
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005884  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006048  08006048  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101d0  20000090  080060e0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010260  080060e0  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f616  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216a  00000000  00000000  0002f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00031840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027857  00000000  00000000  00032930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc00  00000000  00000000  0005a187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b06  00000000  00000000  00066d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015888d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  001588e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a6c 	.word	0x08005a6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08005a6c 	.word	0x08005a6c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <check_command>:
#include "commands.h"

unsigned char check_command(char* message)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	char cmd = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR ", 3)) * MR;
 80005f4:	2203      	movs	r2, #3
 80005f6:	4933      	ldr	r1, [pc, #204]	; (80006c4 <check_command+0xdc>)
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f004 f96f 	bl	80048dc <strncmp>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf0c      	ite	eq
 8000604:	2301      	moveq	r3, #1
 8000606:	2300      	movne	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4413      	add	r3, r2
 8000610:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW ", 3)) * MW;
 8000612:	2203      	movs	r2, #3
 8000614:	492c      	ldr	r1, [pc, #176]	; (80006c8 <check_command+0xe0>)
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f004 f960 	bl	80048dc <strncmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <check_command+0x3e>
 8000622:	2202      	movs	r2, #2
 8000624:	e000      	b.n	8000628 <check_command+0x40>
 8000626:	2200      	movs	r2, #0
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	4413      	add	r3, r2
 800062c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI ", 3)) * MI;
 800062e:	2203      	movs	r2, #3
 8000630:	4926      	ldr	r1, [pc, #152]	; (80006cc <check_command+0xe4>)
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f004 f952 	bl	80048dc <strncmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <check_command+0x5a>
 800063e:	2203      	movs	r2, #3
 8000640:	e000      	b.n	8000644 <check_command+0x5c>
 8000642:	2200      	movs	r2, #0
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4413      	add	r3, r2
 8000648:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO ", 3)) * MO;
 800064a:	2203      	movs	r2, #3
 800064c:	4920      	ldr	r1, [pc, #128]	; (80006d0 <check_command+0xe8>)
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f004 f944 	bl	80048dc <strncmp>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d101      	bne.n	800065e <check_command+0x76>
 800065a:	2204      	movs	r2, #4
 800065c:	e000      	b.n	8000660 <check_command+0x78>
 800065e:	2200      	movs	r2, #0
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4413      	add	r3, r2
 8000664:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD ", 3)) * RD;
 8000666:	2203      	movs	r2, #3
 8000668:	491a      	ldr	r1, [pc, #104]	; (80006d4 <check_command+0xec>)
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f004 f936 	bl	80048dc <strncmp>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <check_command+0x92>
 8000676:	2205      	movs	r2, #5
 8000678:	e000      	b.n	800067c <check_command+0x94>
 800067a:	2200      	movs	r2, #0
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	4413      	add	r3, r2
 8000680:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD ", 3)) * WD;
 8000682:	2203      	movs	r2, #3
 8000684:	4914      	ldr	r1, [pc, #80]	; (80006d8 <check_command+0xf0>)
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f004 f928 	bl	80048dc <strncmp>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <check_command+0xae>
 8000692:	2206      	movs	r2, #6
 8000694:	e000      	b.n	8000698 <check_command+0xb0>
 8000696:	2200      	movs	r2, #0
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	4413      	add	r3, r2
 800069c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA ", 3)) * RA;
 800069e:	2203      	movs	r2, #3
 80006a0:	490e      	ldr	r1, [pc, #56]	; (80006dc <check_command+0xf4>)
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f004 f91a 	bl	80048dc <strncmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d101      	bne.n	80006b2 <check_command+0xca>
 80006ae:	2207      	movs	r2, #7
 80006b0:	e000      	b.n	80006b4 <check_command+0xcc>
 80006b2:	2200      	movs	r2, #0
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4413      	add	r3, r2
 80006b8:	73fb      	strb	r3, [r7, #15]

	return cmd;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08005a84 	.word	0x08005a84
 80006c8:	08005a88 	.word	0x08005a88
 80006cc:	08005a8c 	.word	0x08005a8c
 80006d0:	08005a90 	.word	0x08005a90
 80006d4:	08005a94 	.word	0x08005a94
 80006d8:	08005a98 	.word	0x08005a98
 80006dc:	08005a9c 	.word	0x08005a9c

080006e0 <inv_command>:
		rd_command,
		wd_command,
		ra_command
};

void inv_command(char* message){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction.");
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <inv_command+0x18>)
 80006ea:	f000 fefd 	bl	80014e8 <send_UART>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08005aa0 	.word	0x08005aa0

080006fc <mr_command>:

void mr_command(char* message){
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	unsigned int addr, length;

	if(sscanf((char*)message, "%*s %x %x", &addr, &length) == 2)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	f107 0210 	add.w	r2, r7, #16
 800070c:	492f      	ldr	r1, [pc, #188]	; (80007cc <mr_command+0xd0>)
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f004 f8b6 	bl	8004880 <siscanf>
 8000714:	4603      	mov	r3, r0
 8000716:	2b02      	cmp	r3, #2
 8000718:	d151      	bne.n	80007be <mr_command+0xc2>
	{
 800071a:	466b      	mov	r3, sp
 800071c:	461d      	mov	r5, r3
		char data[length];
 800071e:	68fc      	ldr	r4, [r7, #12]
 8000720:	4623      	mov	r3, r4
 8000722:	3b01      	subs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	4620      	mov	r0, r4
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	f04f 0200 	mov.w	r2, #0
 8000730:	f04f 0300 	mov.w	r3, #0
 8000734:	00cb      	lsls	r3, r1, #3
 8000736:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800073a:	00c2      	lsls	r2, r0, #3
 800073c:	4620      	mov	r0, r4
 800073e:	f04f 0100 	mov.w	r1, #0
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	00cb      	lsls	r3, r1, #3
 800074c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000750:	00c2      	lsls	r2, r0, #3
 8000752:	1de3      	adds	r3, r4, #7
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	ebad 0d03 	sub.w	sp, sp, r3
 800075c:	466b      	mov	r3, sp
 800075e:	3300      	adds	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	68f9      	ldr	r1, [r7, #12]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f999 	bl	8000aa0 <memory_read>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01f      	beq.n	80007b4 <mr_command+0xb8>
		{
			sprintf((char*) message, "Memory read: ");
 8000774:	4916      	ldr	r1, [pc, #88]	; (80007d0 <mr_command+0xd4>)
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f004 f862 	bl	8004840 <siprintf>

			for(int i = 0; i < length; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	e010      	b.n	80007a4 <mr_command+0xa8>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fd5c 	bl	8000240 <strlen>
 8000788:	4602      	mov	r2, r0
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1898      	adds	r0, r3, r2
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	490e      	ldr	r1, [pc, #56]	; (80007d4 <mr_command+0xd8>)
 800079a:	f004 f851 	bl	8004840 <siprintf>
			for(int i = 0; i < length; i++)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fa      	ldr	r2, [r7, #28]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d3ea      	bcc.n	8000782 <mr_command+0x86>
			}

			send_UART((char*) message);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fe9b 	bl	80014e8 <send_UART>
 80007b2:	e002      	b.n	80007ba <mr_command+0xbe>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <mr_command+0xdc>)
 80007b6:	f000 fe97 	bl	80014e8 <send_UART>
 80007ba:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 80007bc:	e002      	b.n	80007c4 <mr_command+0xc8>
		send_UART("Invalid Memory Read instruction syntax.");
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <mr_command+0xe0>)
 80007c0:	f000 fe92 	bl	80014e8 <send_UART>
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}
 80007cc:	08005ab8 	.word	0x08005ab8
 80007d0:	08005ac4 	.word	0x08005ac4
 80007d4:	08005ad4 	.word	0x08005ad4
 80007d8:	08005adc 	.word	0x08005adc
 80007dc:	08005b10 	.word	0x08005b10

080007e0 <mw_command>:

void mw_command(char* message){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]

	unsigned int addr, length, data;

	if(sscanf((char*) message, "%*s %x %x %x", &addr, &length, &data) == 3)
 80007e8:	f107 0110 	add.w	r1, r7, #16
 80007ec:	f107 0214 	add.w	r2, r7, #20
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	490f      	ldr	r1, [pc, #60]	; (8000838 <mw_command+0x58>)
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f004 f840 	bl	8004880 <siscanf>
 8000800:	4603      	mov	r3, r0
 8000802:	2b03      	cmp	r3, #3
 8000804:	d110      	bne.n	8000828 <mw_command+0x48>
	{
		if(memory_write(addr, length, data))
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	6939      	ldr	r1, [r7, #16]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f971 	bl	8000af4 <memory_write>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <mw_command+0x40>
			send_UART("Memory written with success.");
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <mw_command+0x5c>)
 800081a:	f000 fe65 	bl	80014e8 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 800081e:	e006      	b.n	800082e <mw_command+0x4e>
			send_UART("Invalid Memory Write instruction argument values.");
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <mw_command+0x60>)
 8000822:	f000 fe61 	bl	80014e8 <send_UART>
}
 8000826:	e002      	b.n	800082e <mw_command+0x4e>
		send_UART("Invalid Memory Write instruction syntax.");
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <mw_command+0x64>)
 800082a:	f000 fe5d 	bl	80014e8 <send_UART>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08005b38 	.word	0x08005b38
 800083c:	08005b48 	.word	0x08005b48
 8000840:	08005b68 	.word	0x08005b68
 8000844:	08005b9c 	.word	0x08005b9c

08000848 <mi_command>:

void mi_command(char* message){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	f107 020c 	add.w	r2, r7, #12
 8000858:	490f      	ldr	r1, [pc, #60]	; (8000898 <mi_command+0x50>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f004 f810 	bl	8004880 <siscanf>
 8000860:	4603      	mov	r3, r0
 8000862:	2b02      	cmp	r3, #2
 8000864:	d110      	bne.n	8000888 <mi_command+0x40>
	{
		if(make_pin_input(port_addr, pin_setting))
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f969 	bl	8000b44 <make_pin_input>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d003      	beq.n	8000880 <mi_command+0x38>
			send_UART("Pin(s) set as input with success.");
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <mi_command+0x54>)
 800087a:	f000 fe35 	bl	80014e8 <send_UART>
			send_UART("Invalid Make Pin Input instruction argument values.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");

}
 800087e:	e006      	b.n	800088e <mi_command+0x46>
			send_UART("Invalid Make Pin Input instruction argument values.");
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <mi_command+0x58>)
 8000882:	f000 fe31 	bl	80014e8 <send_UART>
}
 8000886:	e002      	b.n	800088e <mi_command+0x46>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <mi_command+0x5c>)
 800088a:	f000 fe2d 	bl	80014e8 <send_UART>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	08005ab8 	.word	0x08005ab8
 800089c:	08005bc8 	.word	0x08005bc8
 80008a0:	08005bec 	.word	0x08005bec
 80008a4:	08005c20 	.word	0x08005c20

080008a8 <mo_command>:

void mo_command(char* message){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	f107 020c 	add.w	r2, r7, #12
 80008b8:	490f      	ldr	r1, [pc, #60]	; (80008f8 <mo_command+0x50>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f003 ffe0 	bl	8004880 <siscanf>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d110      	bne.n	80008e8 <mo_command+0x40>
	{
		if(make_pin_output(port_addr, pin_setting))
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fa1f 	bl	8000d10 <make_pin_output>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <mo_command+0x38>
			send_UART("Pin(s) set as output with success.");
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <mo_command+0x54>)
 80008da:	f000 fe05 	bl	80014e8 <send_UART>
			send_UART("Invalid Make Pin Output instruction argument values.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");

}
 80008de:	e006      	b.n	80008ee <mo_command+0x46>
			send_UART("Invalid Make Pin Output instruction argument values.");
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <mo_command+0x58>)
 80008e2:	f000 fe01 	bl	80014e8 <send_UART>
}
 80008e6:	e002      	b.n	80008ee <mo_command+0x46>
		send_UART("Invalid Make Pin Output instruction syntax.");
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <mo_command+0x5c>)
 80008ea:	f000 fdfd 	bl	80014e8 <send_UART>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08005ab8 	.word	0x08005ab8
 80008fc:	08005c4c 	.word	0x08005c4c
 8000900:	08005c70 	.word	0x08005c70
 8000904:	08005ca8 	.word	0x08005ca8

08000908 <rd_command>:

void rd_command(char* message){
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	f107 0220 	add.w	r2, r7, #32
 8000918:	4927      	ldr	r1, [pc, #156]	; (80009b8 <rd_command+0xb0>)
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f003 ffb0 	bl	8004880 <siscanf>
 8000920:	4603      	mov	r3, r0
 8000922:	2b02      	cmp	r3, #2
 8000924:	d141      	bne.n	80009aa <rd_command+0xa2>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	69f9      	ldr	r1, [r7, #28]
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fad6 	bl	8000ee0 <read_dig_input>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d033      	beq.n	80009a2 <rd_command+0x9a>
		{
			sprintf((char*) message, "Digital input read: ");
 800093a:	4920      	ldr	r1, [pc, #128]	; (80009bc <rd_command+0xb4>)
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f003 ff7f 	bl	8004840 <siprintf>

			for(int i = 15; i >= 0; i--)
 8000942:	230f      	movs	r3, #15
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	e025      	b.n	8000994 <rd_command+0x8c>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fc79 	bl	8000240 <strlen>
 800094e:	4602      	mov	r2, r0
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1898      	adds	r0, r3, r2
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	4917      	ldr	r1, [pc, #92]	; (80009c0 <rd_command+0xb8>)
 8000962:	f003 ff6d 	bl	8004840 <siprintf>

				if(!(i % 4) && i)
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10e      	bne.n	800098e <rd_command+0x86>
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00b      	beq.n	800098e <rd_command+0x86>
					strcat((char*) message, " ");
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fc62 	bl	8000240 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <rd_command+0xbc>)
 8000986:	461a      	mov	r2, r3
 8000988:	460b      	mov	r3, r1
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	3b01      	subs	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	2b00      	cmp	r3, #0
 8000998:	dad6      	bge.n	8000948 <rd_command+0x40>
			}

			send_UART((char*) message);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 fda4 	bl	80014e8 <send_UART>
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");

}
 80009a0:	e006      	b.n	80009b0 <rd_command+0xa8>
			send_UART("Invalid Read Digital Input instruction argument values.");
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <rd_command+0xc0>)
 80009a4:	f000 fda0 	bl	80014e8 <send_UART>
}
 80009a8:	e002      	b.n	80009b0 <rd_command+0xa8>
		send_UART("Invalid Read Digital Input instruction syntax.");
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <rd_command+0xc4>)
 80009ac:	f000 fd9c 	bl	80014e8 <send_UART>
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08005ab8 	.word	0x08005ab8
 80009bc:	08005cd4 	.word	0x08005cd4
 80009c0:	08005cec 	.word	0x08005cec
 80009c4:	08005cf0 	.word	0x08005cf0
 80009c8:	08005cf4 	.word	0x08005cf4
 80009cc:	08005d2c 	.word	0x08005d2c

080009d0 <wd_command>:

void wd_command(char* message){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	6078      	str	r0, [r7, #4]

	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "%*s %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 80009d8:	f107 0110 	add.w	r1, r7, #16
 80009dc:	f107 0214 	add.w	r2, r7, #20
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	460b      	mov	r3, r1
 80009e8:	490f      	ldr	r1, [pc, #60]	; (8000a28 <wd_command+0x58>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f003 ff48 	bl	8004880 <siscanf>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d110      	bne.n	8000a18 <wd_command+0x48>
	{
		if(write_dig_output(port_addr, pin_setting, pin_values))
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fab3 	bl	8000f68 <write_dig_output>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <wd_command+0x40>
			send_UART("Digital output value wrote with success.");
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <wd_command+0x5c>)
 8000a0a:	f000 fd6d 	bl	80014e8 <send_UART>
			send_UART("Invalid Write Digital Output instruction argument values.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");

}
 8000a0e:	e006      	b.n	8000a1e <wd_command+0x4e>
			send_UART("Invalid Write Digital Output instruction argument values.");
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <wd_command+0x60>)
 8000a12:	f000 fd69 	bl	80014e8 <send_UART>
}
 8000a16:	e002      	b.n	8000a1e <wd_command+0x4e>
		send_UART("Invalid Write Digital Output instruction syntax.");
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <wd_command+0x64>)
 8000a1a:	f000 fd65 	bl	80014e8 <send_UART>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08005b38 	.word	0x08005b38
 8000a2c:	08005d5c 	.word	0x08005d5c
 8000a30:	08005d88 	.word	0x08005d88
 8000a34:	08005dc4 	.word	0x08005dc4

08000a38 <ra_command>:

void ra_command(char* message){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]

	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "%*s %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 8000a40:	f107 0110 	add.w	r1, r7, #16
 8000a44:	f107 0214 	add.w	r2, r7, #20
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	490f      	ldr	r1, [pc, #60]	; (8000a90 <ra_command+0x58>)
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f003 ff14 	bl	8004880 <siscanf>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d110      	bne.n	8000a80 <ra_command+0x48>
	{
		if(write_dig_output(port_addr, pin_setting, pin_values))
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa7f 	bl	8000f68 <write_dig_output>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <ra_command+0x40>
		{
			send_UART("Analog read: ");
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <ra_command+0x5c>)
 8000a72:	f000 fd39 	bl	80014e8 <send_UART>
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");

}
 8000a76:	e006      	b.n	8000a86 <ra_command+0x4e>
			send_UART("Invalid Analog Read instruction argument values.");
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <ra_command+0x60>)
 8000a7a:	f000 fd35 	bl	80014e8 <send_UART>
}
 8000a7e:	e002      	b.n	8000a86 <ra_command+0x4e>
		send_UART("Invalid Analog Read instruction syntax.");
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <ra_command+0x64>)
 8000a82:	f000 fd31 	bl	80014e8 <send_UART>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	08005b38 	.word	0x08005b38
 8000a94:	08005df8 	.word	0x08005df8
 8000a98:	08005e08 	.word	0x08005e08
 8000a9c:	08005e3c 	.word	0x08005e3c

08000aa0 <memory_read>:

bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF)
		return false;

	if((0x10000 - addr_r) < length)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d901      	bls.n	8000abc <memory_read+0x1c>
		return false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e013      	b.n	8000ae4 <memory_read+0x44>

	for(int i = 0; i < length; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00b      	b.n	8000ada <memory_read+0x3a>
	{
		data[i] = memory[addr_r++];
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	60fa      	str	r2, [r7, #12]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	440a      	add	r2, r1
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <memory_read+0x50>)
 8000ad0:	5ccb      	ldrb	r3, [r1, r3]
 8000ad2:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8ef      	bhi.n	8000ac2 <memory_read+0x22>
	}

	return true;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	20000138 	.word	0x20000138

08000af4 <memory_write>:

bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	if(addr < 0 && addr > 0xFFFF && length < 0 && length > 0xFF && data < 0 && data > 0xFF)
		return false;

	if((0x10000 - addr) < length)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d901      	bls.n	8000b10 <memory_write+0x1c>
		return false;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e011      	b.n	8000b34 <memory_write+0x40>

	for(int i = 0; i < length; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e009      	b.n	8000b2a <memory_write+0x36>
	{
		memory[addr++] = data;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	1c5a      	adds	r2, r3, #1
 8000b1a:	60fa      	str	r2, [r7, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	b2d1      	uxtb	r1, r2
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <memory_write+0x4c>)
 8000b22:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8f1      	bhi.n	8000b16 <memory_write+0x22>
	}

	return true;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20000138 	.word	0x20000138

08000b44 <make_pin_input>:

bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b092      	sub	sp, #72	; 0x48
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <make_pin_input+0x28>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0b      	cmp	r3, #11
 8000b58:	d908      	bls.n	8000b6c <make_pin_input+0x28>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <make_pin_input+0x28>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b66:	d301      	bcc.n	8000b6c <make_pin_input+0x28>
		return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e0c8      	b.n	8000cfe <make_pin_input+0x1ba>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b0a      	cmp	r3, #10
 8000b72:	f200 80a8 	bhi.w	8000cc6 <make_pin_input+0x182>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <make_pin_input+0x38>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000ba9 	.word	0x08000ba9
 8000b80:	08000bc3 	.word	0x08000bc3
 8000b84:	08000bdd 	.word	0x08000bdd
 8000b88:	08000bf7 	.word	0x08000bf7
 8000b8c:	08000c11 	.word	0x08000c11
 8000b90:	08000c2b 	.word	0x08000c2b
 8000b94:	08000c45 	.word	0x08000c45
 8000b98:	08000c5f 	.word	0x08000c5f
 8000b9c:	08000c79 	.word	0x08000c79
 8000ba0:	08000c93 	.word	0x08000c93
 8000ba4:	08000cad 	.word	0x08000cad

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000ba8:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <make_pin_input+0x1c4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a56      	ldr	r2, [pc, #344]	; (8000d08 <make_pin_input+0x1c4>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <make_pin_input+0x1c4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc0:	e081      	b.n	8000cc6 <make_pin_input+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000bc2:	4b51      	ldr	r3, [pc, #324]	; (8000d08 <make_pin_input+0x1c4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a50      	ldr	r2, [pc, #320]	; (8000d08 <make_pin_input+0x1c4>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <make_pin_input+0x1c4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	e074      	b.n	8000cc6 <make_pin_input+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <make_pin_input+0x1c4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a49      	ldr	r2, [pc, #292]	; (8000d08 <make_pin_input+0x1c4>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b47      	ldr	r3, [pc, #284]	; (8000d08 <make_pin_input+0x1c4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	e067      	b.n	8000cc6 <make_pin_input+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000bf6:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <make_pin_input+0x1c4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <make_pin_input+0x1c4>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <make_pin_input+0x1c4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	e05a      	b.n	8000cc6 <make_pin_input+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000c10:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <make_pin_input+0x1c4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a3c      	ldr	r2, [pc, #240]	; (8000d08 <make_pin_input+0x1c4>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <make_pin_input+0x1c4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	e04d      	b.n	8000cc6 <make_pin_input+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <make_pin_input+0x1c4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a36      	ldr	r2, [pc, #216]	; (8000d08 <make_pin_input+0x1c4>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <make_pin_input+0x1c4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	e040      	b.n	8000cc6 <make_pin_input+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <make_pin_input+0x1c4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <make_pin_input+0x1c4>)
 8000c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <make_pin_input+0x1c4>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	e033      	b.n	8000cc6 <make_pin_input+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <make_pin_input+0x1c4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <make_pin_input+0x1c4>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <make_pin_input+0x1c4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	e026      	b.n	8000cc6 <make_pin_input+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <make_pin_input+0x1c4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <make_pin_input+0x1c4>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <make_pin_input+0x1c4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	e019      	b.n	8000cc6 <make_pin_input+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <make_pin_input+0x1c4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <make_pin_input+0x1c4>)
 8000c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <make_pin_input+0x1c4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	e00c      	b.n	8000cc6 <make_pin_input+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <make_pin_input+0x1c4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <make_pin_input+0x1c4>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <make_pin_input+0x1c4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <make_pin_input+0x1c8>)
 8000cea:	4413      	add	r3, r2
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f000 feca 	bl	8001a90 <HAL_GPIO_Init>

	return true;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3748      	adds	r7, #72	; 0x48
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	0010007f 	.word	0x0010007f

08000d10 <make_pin_output>:

bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b092      	sub	sp, #72	; 0x48
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10b      	bne.n	8000d38 <make_pin_output+0x28>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b0b      	cmp	r3, #11
 8000d24:	d908      	bls.n	8000d38 <make_pin_output+0x28>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <make_pin_output+0x28>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d32:	d301      	bcc.n	8000d38 <make_pin_output+0x28>
		return false;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e0ca      	b.n	8000ece <make_pin_output+0x1be>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	2b0a      	cmp	r3, #10
 8000d3e:	f200 80a8 	bhi.w	8000e92 <make_pin_output+0x182>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <make_pin_output+0x38>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000d75 	.word	0x08000d75
 8000d4c:	08000d8f 	.word	0x08000d8f
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000dc3 	.word	0x08000dc3
 8000d58:	08000ddd 	.word	0x08000ddd
 8000d5c:	08000df7 	.word	0x08000df7
 8000d60:	08000e11 	.word	0x08000e11
 8000d64:	08000e2b 	.word	0x08000e2b
 8000d68:	08000e45 	.word	0x08000e45
 8000d6c:	08000e5f 	.word	0x08000e5f
 8000d70:	08000e79 	.word	0x08000e79

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000d74:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	e081      	b.n	8000e92 <make_pin_output+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000d8e:	4b52      	ldr	r3, [pc, #328]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <make_pin_output+0x1c8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	e074      	b.n	8000e92 <make_pin_output+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000da8:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <make_pin_output+0x1c8>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <make_pin_output+0x1c8>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc0:	e067      	b.n	8000e92 <make_pin_output+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000dc2:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a44      	ldr	r2, [pc, #272]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	e05a      	b.n	8000e92 <make_pin_output+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a3d      	ldr	r2, [pc, #244]	; (8000ed8 <make_pin_output+0x1c8>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	e04d      	b.n	8000e92 <make_pin_output+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <make_pin_output+0x1c8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <make_pin_output+0x1c8>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	e040      	b.n	8000e92 <make_pin_output+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	e033      	b.n	8000e92 <make_pin_output+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	e026      	b.n	8000e92 <make_pin_output+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	e019      	b.n	8000e92 <make_pin_output+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	e00c      	b.n	8000e92 <make_pin_output+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <make_pin_output+0x1c8>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40

//	HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <make_pin_output+0x1cc>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	f000 fde2 	bl	8001a90 <HAL_GPIO_Init>

	return true;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3748      	adds	r7, #72	; 0x48
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	0010007f 	.word	0x0010007f

08000ee0 <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10b      	bne.n	8000f0a <read_dig_input+0x2a>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b0b      	cmp	r3, #11
 8000ef6:	d908      	bls.n	8000f0a <read_dig_input+0x2a>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <read_dig_input+0x2a>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d301      	bcc.n	8000f0a <read_dig_input+0x2a>
		return false;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e028      	b.n	8000f5c <read_dig_input+0x7c>

	int mask = 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]

	for(int pin = 0; pin < 16; pin++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e01f      	b.n	8000f54 <read_dig_input+0x74>
	{
		if(pin_setting & mask)
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00f      	beq.n	8000f3e <read_dig_input+0x5e>
			pin_values[pin] = HAL_GPIO_ReadPin((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), (uint16_t) (0x0001U * (pin + 1)));
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <read_dig_input+0x84>)
 8000f22:	4413      	add	r3, r2
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4618      	mov	r0, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	18d4      	adds	r4, r2, r3
 8000f34:	f000 ff58 	bl	8001de8 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	7023      	strb	r3, [r4, #0]
 8000f3c:	e004      	b.n	8000f48 <read_dig_input+0x68>
		else
			pin_values[pin] = (GPIO_PinState) 0;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
	for(int pin = 0; pin < 16; pin++)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3301      	adds	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	dddc      	ble.n	8000f14 <read_dig_input+0x34>
	}

	return true;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	0010007f 	.word	0x0010007f

08000f68 <write_dig_output>:


bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF && pin_values < 0x01 && pin_values > 0xFFFF)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d112      	bne.n	8000fa0 <write_dig_output+0x38>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	d90f      	bls.n	8000fa0 <write_dig_output+0x38>
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10c      	bne.n	8000fa0 <write_dig_output+0x38>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d308      	bcc.n	8000fa0 <write_dig_output+0x38>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <write_dig_output+0x38>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d301      	bcc.n	8000fa0 <write_dig_output+0x38>
		return false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e024      	b.n	8000fea <write_dig_output+0x82>

	int mask = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]

	for(int pin = 0; pin < 16; pin++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	e01b      	b.n	8000fe2 <write_dig_output+0x7a>
	{
		if(pin_setting & mask)
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <write_dig_output+0x74>
		{
			HAL_GPIO_WritePin((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), (uint16_t) (0x0001U * (pin + 1)), (GPIO_PinState) (pin_values & mask));
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <write_dig_output+0x8c>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f000 ff21 	bl	8001e18 <HAL_GPIO_WritePin>
			mask <<= 1;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
	for(int pin = 0; pin < 16; pin++)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	dde0      	ble.n	8000faa <write_dig_output+0x42>
		}
	}

	return true;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0010007f 	.word	0x0010007f

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_GPIO_Init+0x8c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_GPIO_Init+0x8c>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <MX_GPIO_Init+0x8c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_GPIO_Init+0x8c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <MX_GPIO_Init+0x90>)
 800105c:	f000 fedc 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_GPIO_Init+0x90>)
 8001078:	f000 fd0a 	bl	8001a90 <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a2      	sub	sp, #136	; 0x88
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f000 fafc 	bl	800168e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f831 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f7ff ffad 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800109e:	f000 f943 	bl	8001328 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //send_UART("");
  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <main+0x64>)
 80010a6:	4813      	ldr	r0, [pc, #76]	; (80010f4 <main+0x68>)
 80010a8:	f002 f8b4 	bl	8003214 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 80010ac:	f000 f9ec 	bl	8001488 <has_message_from_UART>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0fa      	beq.n	80010ac <main+0x20>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fa4b 	bl	8001554 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa91 	bl	80005e8 <check_command>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  exec_command[cmd]((char*) message);
 80010cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <main+0x6c>)
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	4610      	mov	r0, r2
 80010da:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 80010dc:	bf00      	nop
 80010de:	f000 f9df 	bl	80014a0 <is_transmitting_to_UART>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1fa      	bne.n	80010de <main+0x52>

		  reset_UART();
 80010e8:	f000 f9e6 	bl	80014b8 <reset_UART>
	  if(has_message_from_UART())
 80010ec:	e7de      	b.n	80010ac <main+0x20>
 80010ee:	bf00      	nop
 80010f0:	200000b8 	.word	0x200000b8
 80010f4:	200101c8 	.word	0x200101c8
 80010f8:	20000000 	.word	0x20000000

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2234      	movs	r2, #52	; 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fb90 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <SystemClock_Config+0xd8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <SystemClock_Config+0xd8>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <SystemClock_Config+0xd8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <SystemClock_Config+0xdc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <SystemClock_Config+0xdc>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <SystemClock_Config+0xdc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4618      	mov	r0, r3
 8001182:	f000 feb3 	bl	8001eec <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f826 	bl	80011dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001190:	f000 fe5c 	bl	8001e4c <HAL_PWREx_EnableOverDrive>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800119a:	f000 f81f 	bl	80011dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119e:	230f      	movs	r3, #15
 80011a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	2302      	movs	r3, #2
 80011a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2103      	movs	r1, #3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f944 	bl	8002448 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80011c6:	f000 f809 	bl	80011dc <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3750      	adds	r7, #80	; 0x50
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x44>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_MspInit+0x44>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_MspInit+0x44>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_MspInit+0x44>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_MspInit+0x44>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 fa44 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USART3_IRQHandler+0x10>)
 800128a:	f002 f811 	bl	80032b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200101c8 	.word	0x200101c8

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f003 fa88 	bl	80047dc <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20080000 	.word	0x20080000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200000ac 	.word	0x200000ac
 8001300:	20010260 	.word	0x20010260

08001304 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_USART3_UART_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_USART3_UART_Init+0x78>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_USART3_UART_Init+0x7c>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_USART3_UART_Init+0x80>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART3_UART_Init+0x84>)
 8001346:	220d      	movs	r2, #13
 8001348:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <MX_USART3_UART_Init+0x8c>)
 800134e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001352:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001356:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 800136c:	220c      	movs	r2, #12
 800136e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <MX_USART3_UART_Init+0x88>)
 800138a:	f001 fe87 	bl	800309c <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8001394:	f7ff ff22 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2001013c 	.word	0x2001013c
 80013a0:	200101c0 	.word	0x200101c0
 80013a4:	20010138 	.word	0x20010138
 80013a8:	200101c4 	.word	0x200101c4
 80013ac:	20010140 	.word	0x20010140
 80013b0:	200101c8 	.word	0x200101c8
 80013b4:	40004800 	.word	0x40004800

080013b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ae      	sub	sp, #184	; 0xb8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2290      	movs	r2, #144	; 0x90
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fa29 	bl	8004830 <memset>
  if(uartHandle->Instance==USART3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_UART_MspInit+0xc4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d144      	bne.n	8001472 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fa28 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001402:	f7ff feeb 	bl	80011dc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_UART_MspInit+0xc8>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_UART_MspInit+0xc8>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_UART_MspInit+0xc8>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0xc8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_UART_MspInit+0xc8>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0xc8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001450:	2307      	movs	r3, #7
 8001452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_UART_MspInit+0xcc>)
 800145e:	f000 fb17 	bl	8001a90 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2027      	movs	r0, #39	; 0x27
 8001468:	f000 fa49 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800146c:	2027      	movs	r0, #39	; 0x27
 800146e:	f000 fa62 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	37b8      	adds	r7, #184	; 0xb8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40004800 	.word	0x40004800
 8001480:	40023800 	.word	0x40023800
 8001484:	40020c00 	.word	0x40020c00

08001488 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	return flagCPP;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <has_message_from_UART+0x14>)
 800148e:	781b      	ldrb	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2001013c 	.word	0x2001013c

080014a0 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	return flagCPE;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <is_transmitting_to_UART+0x14>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200101c0 	.word	0x200101c0

080014b8 <reset_UART>:

void reset_UART()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	2100      	movs	r1, #0
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <reset_UART+0x24>)
 80014c2:	f003 f9b5 	bl	8004830 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <reset_UART+0x24>)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <reset_UART+0x28>)
 80014cc:	f001 fea2 	bl	8003214 <HAL_UART_Receive_IT>
	flagCPP = false;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <reset_UART+0x2c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000b8 	.word	0x200000b8
 80014e0:	200101c8 	.word	0x200101c8
 80014e4:	2001013c 	.word	0x2001013c

080014e8 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, 128);
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4812      	ldr	r0, [pc, #72]	; (8001540 <send_UART+0x58>)
 80014f6:	f003 fa03 	bl	8004900 <strncpy>
	strcat((char*) UART_TX_buffer, PROMPT);
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <send_UART+0x58>)
 80014fc:	f7fe fea0 	bl	8000240 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <send_UART+0x58>)
 8001506:	4413      	add	r3, r2
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <send_UART+0x5c>)
 800150a:	6810      	ldr	r0, [r2, #0]
 800150c:	6018      	str	r0, [r3, #0]
	strcat((char*) UART_TX_buffer, "\r");
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <send_UART+0x58>)
 8001510:	f7fe fe96 	bl	8000240 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <send_UART+0x58>)
 800151a:	4413      	add	r3, r2
 800151c:	490a      	ldr	r1, [pc, #40]	; (8001548 <send_UART+0x60>)
 800151e:	461a      	mov	r2, r3
 8001520:	460b      	mov	r3, r1
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <send_UART+0x64>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4904      	ldr	r1, [pc, #16]	; (8001540 <send_UART+0x58>)
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <send_UART+0x68>)
 8001532:	f001 fe01 	bl	8003138 <HAL_UART_Transmit_IT>

	return;
 8001536:	bf00      	nop
}
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20010140 	.word	0x20010140
 8001544:	08005e64 	.word	0x08005e64
 8001548:	08005e68 	.word	0x08005e68
 800154c:	200101c0 	.word	0x200101c0
 8001550:	200101c8 	.word	0x200101c8

08001554 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	// formatar backspaces

	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, 128);
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	4904      	ldr	r1, [pc, #16]	; (8001570 <read_UART+0x1c>)
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f003 f9cd 	bl	8004900 <strncpy>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000b8 	.word	0x200000b8

08001574 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_RxCpltCallback+0x50>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11b      	bne.n	80015bc <HAL_UART_RxCpltCallback+0x48>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r')
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_UART_RxCpltCallback+0x54>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_UART_RxCpltCallback+0x58>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	2b0d      	cmp	r3, #13
 800158e:	d106      	bne.n	800159e <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_UART_RxCpltCallback+0x54>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_UART_RxCpltCallback+0x50>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}

	return;
 800159c:	e00f      	b.n	80015be <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_UART_RxCpltCallback+0x54>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_UART_RxCpltCallback+0x54>)
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_UART_RxCpltCallback+0x54>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_UART_RxCpltCallback+0x58>)
 80015ae:	4413      	add	r3, r2
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <HAL_UART_RxCpltCallback+0x5c>)
 80015b6:	f001 fe2d 	bl	8003214 <HAL_UART_Receive_IT>
	return;
 80015ba:	e000      	b.n	80015be <HAL_UART_RxCpltCallback+0x4a>
		return;
 80015bc:	bf00      	nop
}
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2001013c 	.word	0x2001013c
 80015c8:	20010138 	.word	0x20010138
 80015cc:	200000b8 	.word	0x200000b8
 80015d0:	200101c8 	.word	0x200101c8

080015d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_UART_TxCpltCallback+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11b      	bne.n	8001622 <HAL_UART_TxCpltCallback+0x4e>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r')
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_UART_TxCpltCallback+0x5c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_UART_TxCpltCallback+0x60>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	2b0d      	cmp	r3, #13
 80015f4:	d106      	bne.n	8001604 <HAL_UART_TxCpltCallback+0x30>
	{
		UART_TX_index = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_UART_TxCpltCallback+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_UART_TxCpltCallback+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
	}

	return;
 8001602:	e00f      	b.n	8001624 <HAL_UART_TxCpltCallback+0x50>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_UART_TxCpltCallback+0x5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_UART_TxCpltCallback+0x5c>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_UART_TxCpltCallback+0x5c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_UART_TxCpltCallback+0x60>)
 8001614:	4413      	add	r3, r2
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_UART_TxCpltCallback+0x64>)
 800161c:	f001 fd8c 	bl	8003138 <HAL_UART_Transmit_IT>
	return;
 8001620:	e000      	b.n	8001624 <HAL_UART_TxCpltCallback+0x50>
		return;
 8001622:	bf00      	nop
}
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200101c0 	.word	0x200101c0
 8001630:	200101c4 	.word	0x200101c4
 8001634:	20010140 	.word	0x20010140
 8001638:	200101c8 	.word	0x200101c8

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001666:	f7ff fe4d 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f003 f8bd 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fd0d 	bl	800108c <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001680:	08006050 	.word	0x08006050
  ldr r2, =_sbss
 8001684:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001688:	20010260 	.word	0x20010260

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>

0800168e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001692:	2003      	movs	r0, #3
 8001694:	f000 f928 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 f805 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169e:	f7ff fda3 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f943 	bl	8001952 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f90b 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000020 	.word	0x20000020
 8001700:	20000028 	.word	0x20000028
 8001704:	20000024 	.word	0x20000024

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000028 	.word	0x20000028
 800172c:	2001024c 	.word	0x2001024c

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2001024c 	.word	0x2001024c

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	4313      	orrs	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	05fa0000 	.word	0x05fa0000

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feda 	bl	8001730 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d008      	beq.n	800199c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e052      	b.n	8001a42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0216 	bic.w	r2, r2, #22
 80019aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <HAL_DMA_Abort+0x62>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0208 	bic.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ec:	e013      	b.n	8001a16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ee:	f7ff fe9f 	bl	8001730 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d90c      	bls.n	8001a16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e015      	b.n	8001a42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e4      	bne.n	80019ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	223f      	movs	r2, #63	; 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e00c      	b.n	8001a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e175      	b.n	8001d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8164 	bne.w	8001d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x56>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80be 	beq.w	8001d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c32:	4a61      	ldr	r2, [pc, #388]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_GPIO_Init+0x32c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d037      	beq.n	8001cce <HAL_GPIO_Init+0x23e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_GPIO_Init+0x23a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x334>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x236>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x338>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x232>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x33c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x22e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x340>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x22a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x344>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x348>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x350>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x21a>
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	e012      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001caa:	230a      	movs	r3, #10
 8001cac:	e010      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00e      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e00c      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00a      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f ae86 	bls.w	8001ab0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40021c00 	.word	0x40021c00
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40022400 	.word	0x40022400
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7a:	f7ff fc59 	bl	8001730 <HAL_GetTick>
 8001e7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e80:	e009      	b.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e82:	f7ff fc55 	bl	8001730 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e90:	d901      	bls.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e022      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff fc3e 	bl	8001730 <HAL_GetTick>
 8001eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb6:	e009      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb8:	f7ff fc3a 	bl	8001730 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec6:	d901      	bls.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e007      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e29b      	b.n	800243a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1c:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d112      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f34:	d10b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <HAL_RCC_OscConfig+0x130>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d168      	bne.n	800201c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e275      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a>
 8001f58:	4b84      	ldr	r3, [pc, #528]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x9c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7e      	ldr	r2, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7b      	ldr	r2, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fbb0 	bl	8001730 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff fbac 	bl	8001730 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e229      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fb9c 	bl	8001730 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fb98 	bl	8001730 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e215      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x110>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d069      	beq.n	80020fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1e9      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fb4e 	bl	8001730 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fb4a 	bl	8001730 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1c7      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb2a 	bl	8001730 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff fb26 	bl	8001730 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1a3      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff fb07 	bl	8001730 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff fb03 	bl	8001730 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e180      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x23a>
 8002144:	e01a      	b.n	800217c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff faed 	bl	8001730 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fae9 	bl	8001730 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d903      	bls.n	8002170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e166      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
 800216c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a4 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a88      	ldr	r2, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b86      	ldr	r3, [pc, #536]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fab1 	bl	8001730 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff faad 	bl	8001730 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e12a      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x31a>
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x33c>
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x35e>
 8002230:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a61      	ldr	r2, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff fa61 	bl	8001730 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fa5d 	bl	8001730 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0d8      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x386>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa4b 	bl	8001730 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fa47 	bl	8001730 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0c2      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80ae 	beq.w	8002438 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d06d      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d14b      	bne.n	8002388 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fa18 	bl	8001730 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff fa14 	bl	8001730 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e091      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	491b      	ldr	r1, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f9e6 	bl	8001730 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f9e2 	bl	8001730 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e05f      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x47c>
 8002386:	e057      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f9cc 	bl	8001730 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff f9c8 	bl	8001730 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e045      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x4b0>
 80023ba:	e03d      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x558>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d122      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4965      	ldr	r1, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7ff f8f8 	bl	8001730 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff f8f4 	bl	8001730 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1d4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f854 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	08005e78 	.word	0x08005e78
 8002618:	20000020 	.word	0x20000020
 800261c:	20000024 	.word	0x20000024

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	2300      	movs	r3, #0
 8002632:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002638:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x40>
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 80bd 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3a>
 8002652:	e0b7      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002656:	60bb      	str	r3, [r7, #8]
      break;
 8002658:	e0b7      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800265c:	60bb      	str	r3, [r7, #8]
      break;
 800265e:	e0b4      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002668:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800266a:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04d      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	461a      	mov	r2, r3
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	ea02 0800 	and.w	r8, r2, r0
 800268e:	ea03 0901 	and.w	r9, r3, r1
 8002692:	4640      	mov	r0, r8
 8002694:	4649      	mov	r1, r9
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	014b      	lsls	r3, r1, #5
 80026a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026a4:	0142      	lsls	r2, r0, #5
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	ebb0 0008 	subs.w	r0, r0, r8
 80026ae:	eb61 0109 	sbc.w	r1, r1, r9
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026c0:	0182      	lsls	r2, r0, #6
 80026c2:	1a12      	subs	r2, r2, r0
 80026c4:	eb63 0301 	sbc.w	r3, r3, r1
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	00d9      	lsls	r1, r3, #3
 80026d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d6:	00d0      	lsls	r0, r2, #3
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	eb12 0208 	adds.w	r2, r2, r8
 80026e0:	eb43 0309 	adc.w	r3, r3, r9
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0259      	lsls	r1, r3, #9
 80026ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026f2:	0250      	lsls	r0, r2, #9
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f7fd fdf4 	bl	80002f0 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e04a      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	461a      	mov	r2, r3
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	ea02 0400 	and.w	r4, r2, r0
 800272a:	ea03 0501 	and.w	r5, r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	014b      	lsls	r3, r1, #5
 800273c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002740:	0142      	lsls	r2, r0, #5
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	1b00      	subs	r0, r0, r4
 8002748:	eb61 0105 	sbc.w	r1, r1, r5
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	018b      	lsls	r3, r1, #6
 8002756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800275a:	0182      	lsls	r2, r0, #6
 800275c:	1a12      	subs	r2, r2, r0
 800275e:	eb63 0301 	sbc.w	r3, r3, r1
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	00d9      	lsls	r1, r3, #3
 800276c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002770:	00d0      	lsls	r0, r2, #3
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	1912      	adds	r2, r2, r4
 8002778:	eb45 0303 	adc.w	r3, r5, r3
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0299      	lsls	r1, r3, #10
 8002786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800278a:	0290      	lsls	r0, r2, #10
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f7fd fda8 	bl	80002f0 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	60bb      	str	r3, [r7, #8]
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027c6:	60bb      	str	r3, [r7, #8]
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	68bb      	ldr	r3, [r7, #8]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000020 	.word	0x20000020

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08005e88 	.word	0x08005e88

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08005e88 	.word	0x08005e88

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a68      	ldr	r2, [pc, #416]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	4964      	ldr	r1, [pc, #400]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	4959      	ldr	r1, [pc, #356]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d017      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	494a      	ldr	r1, [pc, #296]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 808b 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002948:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002954:	f7fe feec 	bl	8001730 <HAL_GetTick>
 8002958:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fee8 	bl	8001730 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e38f      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d035      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d02e      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d114      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe feb0 	bl	8001730 <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe feac 	bl	8001730 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e351      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d111      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	4901      	ldr	r1, [pc, #4]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000
 8002a24:	0ffffcff 	.word	0x0ffffcff
 8002a28:	4bb3      	ldr	r3, [pc, #716]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4ab2      	ldr	r2, [pc, #712]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a32:	6093      	str	r3, [r2, #8]
 8002a34:	4bb0      	ldr	r3, [pc, #704]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	49ad      	ldr	r1, [pc, #692]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a52:	4ba9      	ldr	r3, [pc, #676]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a58:	4aa7      	ldr	r2, [pc, #668]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a62:	4ba5      	ldr	r3, [pc, #660]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	49a2      	ldr	r1, [pc, #648]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a80:	4b9d      	ldr	r3, [pc, #628]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	499a      	ldr	r1, [pc, #616]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa2:	4b95      	ldr	r3, [pc, #596]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab0:	4991      	ldr	r1, [pc, #580]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	4989      	ldr	r1, [pc, #548]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae6:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4980      	ldr	r1, [pc, #512]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b08:	4b7b      	ldr	r3, [pc, #492]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4978      	ldr	r1, [pc, #480]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2a:	4b73      	ldr	r3, [pc, #460]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f023 020c 	bic.w	r2, r3, #12
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	496f      	ldr	r1, [pc, #444]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	4967      	ldr	r1, [pc, #412]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b6e:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	495e      	ldr	r1, [pc, #376]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	4956      	ldr	r1, [pc, #344]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bb2:	4b51      	ldr	r3, [pc, #324]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	494d      	ldr	r1, [pc, #308]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bd4:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	4945      	ldr	r1, [pc, #276]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	493c      	ldr	r1, [pc, #240]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c26:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d011      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c48:	492b      	ldr	r1, [pc, #172]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c58:	d101      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cac:	4912      	ldr	r1, [pc, #72]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd0:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	e002      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	4986      	ldr	r1, [pc, #536]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d20:	497d      	ldr	r1, [pc, #500]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d006      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80d6 	beq.w	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d3c:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a75      	ldr	r2, [pc, #468]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fcf2 	bl	8001730 <HAL_GetTick>
 8002d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d50:	f7fe fcee 	bl	8001730 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e195      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d021      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d90:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	0e1b      	lsrs	r3, r3, #24
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	019a      	lsls	r2, r3, #6
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	071b      	lsls	r3, r3, #28
 8002db6:	4958      	ldr	r1, [pc, #352]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02e      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de8:	d129      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dea:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002df8:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfe:	0f1b      	lsrs	r3, r3, #28
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	019a      	lsls	r2, r3, #6
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	493e      	ldr	r1, [pc, #248]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e26:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f023 021f 	bic.w	r2, r3, #31
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	3b01      	subs	r3, #1
 8002e36:	4938      	ldr	r1, [pc, #224]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01d      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e4a:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e50:	0e1b      	lsrs	r3, r3, #24
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	0f1b      	lsrs	r3, r3, #28
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	019a      	lsls	r2, r3, #6
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	4926      	ldr	r1, [pc, #152]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d011      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	019a      	lsls	r2, r3, #6
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	071b      	lsls	r3, r3, #28
 8002eae:	491a      	ldr	r1, [pc, #104]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002eb6:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fe fc35 	bl	8001730 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eca:	f7fe fc31 	bl	8001730 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0d8      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 80ce 	bne.w	800308c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efc:	f7fe fc18 	bl	8001730 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f02:	e00b      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f04:	f7fe fc14 	bl	8001730 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d904      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0bb      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f1c:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f28:	d0ec      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02e      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d12a      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	0f1b      	lsrs	r3, r3, #28
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	4944      	ldr	r1, [pc, #272]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	493d      	ldr	r1, [pc, #244]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d11d      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	0e1b      	lsrs	r3, r3, #24
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	0f1b      	lsrs	r3, r3, #28
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	019a      	lsls	r2, r3, #6
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	061b      	lsls	r3, r3, #24
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	4929      	ldr	r1, [pc, #164]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d028      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4911      	ldr	r1, [pc, #68]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fb64 	bl	8001730 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800306c:	f7fe fb60 	bl	8001730 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e007      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308a:	d1ef      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e040      	b.n	8003130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe f97a 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fbe8 	bl	80038b0 <UART_SetConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e022      	b.n	8003130 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fe3e 	bl	8003d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fec5 	bl	8003eb8 <UART_CheckIdleState>
 800312e:	4603      	mov	r3, r0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003138:	b480      	push	{r7}
 800313a:	b08b      	sub	sp, #44	; 0x2c
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314a:	2b20      	cmp	r3, #32
 800314c:	d156      	bne.n	80031fc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_Transmit_IT+0x22>
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e04f      	b.n	80031fe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_UART_Transmit_IT+0x34>
 8003168:	2302      	movs	r3, #2
 800316a:	e048      	b.n	80031fe <HAL_UART_Transmit_IT+0xc6>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2221      	movs	r2, #33	; 0x21
 800319c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d107      	bne.n	80031b8 <HAL_UART_Transmit_IT+0x80>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_UART_Transmit_IT+0xd4>)
 80031b4:	669a      	str	r2, [r3, #104]	; 0x68
 80031b6:	e002      	b.n	80031be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_UART_Transmit_IT+0xd8>)
 80031bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	613b      	str	r3, [r7, #16]
   return(result);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	69f9      	ldr	r1, [r7, #28]
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e6      	bne.n	80031c6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	372c      	adds	r7, #44	; 0x2c
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	08004411 	.word	0x08004411
 8003210:	0800435b 	.word	0x0800435b

08003214 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	2b20      	cmp	r3, #32
 8003228:	d13d      	bne.n	80032a6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_UART_Receive_IT+0x22>
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e036      	b.n	80032a8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_UART_Receive_IT+0x34>
 8003244:	2302      	movs	r3, #2
 8003246:	e02f      	b.n	80032a8 <HAL_UART_Receive_IT+0x94>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	613b      	str	r3, [r7, #16]
   return(result);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	69f9      	ldr	r1, [r7, #28]
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e6      	bne.n	8003264 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	461a      	mov	r2, r3
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 ff19 	bl	80040d4 <UART_Start_Receive_IT>
 80032a2:	4603      	mov	r3, r0
 80032a4:	e000      	b.n	80032a8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b0ba      	sub	sp, #232	; 0xe8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032da:	f640 030f 	movw	r3, #2063	; 0x80f
 80032de:	4013      	ands	r3, r2
 80032e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 82a4 	beq.w	8003856 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
      }
      return;
 8003316:	e29e      	b.n	8003856 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8117 	beq.w	8003550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800332e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_UART_IRQHandler+0x298>)
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 810a 	beq.w	8003550 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800333c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <HAL_UART_IRQHandler+0xbc>
 8003348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800336c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d011      	beq.n	800339c <HAL_UART_IRQHandler+0xec>
 8003378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2202      	movs	r2, #2
 800338a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800339c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d011      	beq.n	80033cc <HAL_UART_IRQHandler+0x11c>
 80033a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2204      	movs	r2, #4
 80033ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c2:	f043 0202 	orr.w	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2208      	movs	r2, #8
 80033f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	f043 0208 	orr.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <HAL_UART_IRQHandler+0x18a>
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 820a 	beq.w	800385a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d005      	beq.n	8003492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800348a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04f      	beq.n	8003532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fee8 	bl	8004268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d141      	bne.n	800352a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3308      	adds	r3, #8
 80034ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1d9      	bne.n	80034a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_UART_IRQHandler+0x29c>)
 8003500:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fa9f 	bl	8001a4a <HAL_DMA_Abort_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e00f      	b.n	8003542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9a4 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	e00b      	b.n	8003542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9a0 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e007      	b.n	8003542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f99c 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003540:	e18b      	b.n	800385a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003542:	bf00      	nop
    return;
 8003544:	e189      	b.n	800385a <HAL_UART_IRQHandler+0x5aa>
 8003546:	bf00      	nop
 8003548:	04000120 	.word	0x04000120
 800354c:	0800432f 	.word	0x0800432f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	2b01      	cmp	r3, #1
 8003556:	f040 8144 	bne.w	80037e2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 813d 	beq.w	80037e2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8136 	beq.w	80037e2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2210      	movs	r2, #16
 800357c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	f040 80b2 	bne.w	80036f2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800359a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 815d 	beq.w	800385e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f080 8155 	bcs.w	800385e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	f000 8085 	beq.w	80036d6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800360e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1da      	bne.n	80035cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3308      	adds	r3, #8
 800361c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800363a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800363e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800364c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e1      	bne.n	8003616 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800367c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e3      	bne.n	8003652 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a6:	f023 0310 	bic.w	r3, r3, #16
 80036aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e4      	bne.n	8003696 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe f94a 	bl	800196a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8ca 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f0:	e0b5      	b.n	800385e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80a7 	beq.w	8003862 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a2 	beq.w	8003862 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
 8003742:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800374e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e4      	bne.n	800371e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	623b      	str	r3, [r7, #32]
   return(result);
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003778:	633a      	str	r2, [r7, #48]	; 0x30
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800377e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e3      	bne.n	8003754 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	617b      	str	r3, [r7, #20]
   return(result);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e4      	bne.n	800379e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f852 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037e0:	e03f      	b.n	8003862 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <HAL_UART_IRQHandler+0x55c>
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f849 	bl	800389c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800380a:	e02d      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01c      	beq.n	8003866 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
    }
    return;
 8003834:	e017      	b.n	8003866 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_UART_IRQHandler+0x5b8>
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fe3e 	bl	80044d0 <UART_EndTransmit_IT>
    return;
 8003854:	e008      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003856:	bf00      	nop
 8003858:	e006      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
    return;
 800385a:	bf00      	nop
 800385c:	e004      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
      return;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003866:	bf00      	nop
  }

}
 8003868:	37e8      	adds	r7, #232	; 0xe8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop

08003870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4ba7      	ldr	r3, [pc, #668]	; (8003b78 <UART_SetConfig+0x2c8>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a95      	ldr	r2, [pc, #596]	; (8003b7c <UART_SetConfig+0x2cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d120      	bne.n	800396e <UART_SetConfig+0xbe>
 800392c:	4b94      	ldr	r3, [pc, #592]	; (8003b80 <UART_SetConfig+0x2d0>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b03      	cmp	r3, #3
 8003938:	d816      	bhi.n	8003968 <UART_SetConfig+0xb8>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0x90>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003951 	.word	0x08003951
 8003944:	0800395d 	.word	0x0800395d
 8003948:	08003957 	.word	0x08003957
 800394c:	08003963 	.word	0x08003963
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e14f      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003956:	2302      	movs	r3, #2
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e14c      	b.n	8003bf6 <UART_SetConfig+0x346>
 800395c:	2304      	movs	r3, #4
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e149      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003962:	2308      	movs	r3, #8
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e146      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003968:	2310      	movs	r3, #16
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e143      	b.n	8003bf6 <UART_SetConfig+0x346>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a84      	ldr	r2, [pc, #528]	; (8003b84 <UART_SetConfig+0x2d4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d132      	bne.n	80039de <UART_SetConfig+0x12e>
 8003978:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <UART_SetConfig+0x2d0>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d828      	bhi.n	80039d8 <UART_SetConfig+0x128>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0xdc>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	080039c1 	.word	0x080039c1
 8003990:	080039d9 	.word	0x080039d9
 8003994:	080039d9 	.word	0x080039d9
 8003998:	080039d9 	.word	0x080039d9
 800399c:	080039cd 	.word	0x080039cd
 80039a0:	080039d9 	.word	0x080039d9
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039c7 	.word	0x080039c7
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039d9 	.word	0x080039d9
 80039bc:	080039d3 	.word	0x080039d3
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e117      	b.n	8003bf6 <UART_SetConfig+0x346>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e114      	b.n	8003bf6 <UART_SetConfig+0x346>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e111      	b.n	8003bf6 <UART_SetConfig+0x346>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e10e      	b.n	8003bf6 <UART_SetConfig+0x346>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e10b      	b.n	8003bf6 <UART_SetConfig+0x346>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a69      	ldr	r2, [pc, #420]	; (8003b88 <UART_SetConfig+0x2d8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d120      	bne.n	8003a2a <UART_SetConfig+0x17a>
 80039e8:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <UART_SetConfig+0x2d0>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039f2:	2b30      	cmp	r3, #48	; 0x30
 80039f4:	d013      	beq.n	8003a1e <UART_SetConfig+0x16e>
 80039f6:	2b30      	cmp	r3, #48	; 0x30
 80039f8:	d814      	bhi.n	8003a24 <UART_SetConfig+0x174>
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d009      	beq.n	8003a12 <UART_SetConfig+0x162>
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d810      	bhi.n	8003a24 <UART_SetConfig+0x174>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <UART_SetConfig+0x15c>
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d006      	beq.n	8003a18 <UART_SetConfig+0x168>
 8003a0a:	e00b      	b.n	8003a24 <UART_SetConfig+0x174>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e0f1      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a12:	2302      	movs	r3, #2
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e0ee      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e0eb      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e0e8      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a24:	2310      	movs	r3, #16
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0e5      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <UART_SetConfig+0x2dc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d120      	bne.n	8003a76 <UART_SetConfig+0x1c6>
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <UART_SetConfig+0x2d0>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a40:	d013      	beq.n	8003a6a <UART_SetConfig+0x1ba>
 8003a42:	2bc0      	cmp	r3, #192	; 0xc0
 8003a44:	d814      	bhi.n	8003a70 <UART_SetConfig+0x1c0>
 8003a46:	2b80      	cmp	r3, #128	; 0x80
 8003a48:	d009      	beq.n	8003a5e <UART_SetConfig+0x1ae>
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d810      	bhi.n	8003a70 <UART_SetConfig+0x1c0>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <UART_SetConfig+0x1a8>
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d006      	beq.n	8003a64 <UART_SetConfig+0x1b4>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x1c0>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e0cb      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e0c8      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a64:	2304      	movs	r3, #4
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e0c5      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e0c2      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a70:	2310      	movs	r3, #16
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0bf      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a45      	ldr	r2, [pc, #276]	; (8003b90 <UART_SetConfig+0x2e0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d125      	bne.n	8003acc <UART_SetConfig+0x21c>
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <UART_SetConfig+0x2d0>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8e:	d017      	beq.n	8003ac0 <UART_SetConfig+0x210>
 8003a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a94:	d817      	bhi.n	8003ac6 <UART_SetConfig+0x216>
 8003a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9a:	d00b      	beq.n	8003ab4 <UART_SetConfig+0x204>
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa0:	d811      	bhi.n	8003ac6 <UART_SetConfig+0x216>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <UART_SetConfig+0x1fe>
 8003aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aaa:	d006      	beq.n	8003aba <UART_SetConfig+0x20a>
 8003aac:	e00b      	b.n	8003ac6 <UART_SetConfig+0x216>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e0a0      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e09d      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003aba:	2304      	movs	r3, #4
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e09a      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e097      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e094      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a30      	ldr	r2, [pc, #192]	; (8003b94 <UART_SetConfig+0x2e4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d125      	bne.n	8003b22 <UART_SetConfig+0x272>
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <UART_SetConfig+0x2d0>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae4:	d017      	beq.n	8003b16 <UART_SetConfig+0x266>
 8003ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aea:	d817      	bhi.n	8003b1c <UART_SetConfig+0x26c>
 8003aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af0:	d00b      	beq.n	8003b0a <UART_SetConfig+0x25a>
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d811      	bhi.n	8003b1c <UART_SetConfig+0x26c>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <UART_SetConfig+0x254>
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b00:	d006      	beq.n	8003b10 <UART_SetConfig+0x260>
 8003b02:	e00b      	b.n	8003b1c <UART_SetConfig+0x26c>
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e075      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e072      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b10:	2304      	movs	r3, #4
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e06f      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b16:	2308      	movs	r3, #8
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e06c      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e069      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <UART_SetConfig+0x2e8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d137      	bne.n	8003b9c <UART_SetConfig+0x2ec>
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <UART_SetConfig+0x2d0>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b3a:	d017      	beq.n	8003b6c <UART_SetConfig+0x2bc>
 8003b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b40:	d817      	bhi.n	8003b72 <UART_SetConfig+0x2c2>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d00b      	beq.n	8003b60 <UART_SetConfig+0x2b0>
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4c:	d811      	bhi.n	8003b72 <UART_SetConfig+0x2c2>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <UART_SetConfig+0x2aa>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d006      	beq.n	8003b66 <UART_SetConfig+0x2b6>
 8003b58:	e00b      	b.n	8003b72 <UART_SetConfig+0x2c2>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e04a      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b60:	2302      	movs	r3, #2
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e047      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b66:	2304      	movs	r3, #4
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e044      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e041      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b72:	2310      	movs	r3, #16
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e03e      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003b78:	efff69f3 	.word	0xefff69f3
 8003b7c:	40011000 	.word	0x40011000
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40004800 	.word	0x40004800
 8003b8c:	40004c00 	.word	0x40004c00
 8003b90:	40005000 	.word	0x40005000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	40007800 	.word	0x40007800
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a71      	ldr	r2, [pc, #452]	; (8003d68 <UART_SetConfig+0x4b8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <UART_SetConfig+0x342>
 8003ba6:	4b71      	ldr	r3, [pc, #452]	; (8003d6c <UART_SetConfig+0x4bc>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bb4:	d017      	beq.n	8003be6 <UART_SetConfig+0x336>
 8003bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0x33c>
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc0:	d00b      	beq.n	8003bda <UART_SetConfig+0x32a>
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d811      	bhi.n	8003bec <UART_SetConfig+0x33c>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x324>
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x330>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x33c>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e00d      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e00a      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e007      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e004      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e001      	b.n	8003bf6 <UART_SetConfig+0x346>
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfe:	d15a      	bne.n	8003cb6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d827      	bhi.n	8003c56 <UART_SetConfig+0x3a6>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x35c>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c57 	.word	0x08003c57
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7fe fde4 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003c34:	61b8      	str	r0, [r7, #24]
        break;
 8003c36:	e013      	b.n	8003c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7fe fdf4 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003c3c:	61b8      	str	r0, [r7, #24]
        break;
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c40:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <UART_SetConfig+0x4c0>)
 8003c42:	61bb      	str	r3, [r7, #24]
        break;
 8003c44:	e00c      	b.n	8003c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c46:	f7fe fceb 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8003c4a:	61b8      	str	r0, [r7, #24]
        break;
 8003c4c:	e008      	b.n	8003c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c52:	61bb      	str	r3, [r7, #24]
        break;
 8003c54:	e004      	b.n	8003c60 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d074      	beq.n	8003d50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	005a      	lsls	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d916      	bls.n	8003cb0 <UART_SetConfig+0x400>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d212      	bcs.n	8003cb0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f023 030f 	bic.w	r3, r3, #15
 8003c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	89fa      	ldrh	r2, [r7, #14]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e04f      	b.n	8003d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77bb      	strb	r3, [r7, #30]
 8003cb4:	e04c      	b.n	8003d50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d828      	bhi.n	8003d0e <UART_SetConfig+0x45e>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0x414>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003d0f 	.word	0x08003d0f
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003d0f 	.word	0x08003d0f
 8003cdc:	08003d0f 	.word	0x08003d0f
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d07 	.word	0x08003d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7fe fd88 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003cec:	61b8      	str	r0, [r7, #24]
        break;
 8003cee:	e013      	b.n	8003d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fd98 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	61b8      	str	r0, [r7, #24]
        break;
 8003cf6:	e00f      	b.n	8003d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <UART_SetConfig+0x4c0>)
 8003cfa:	61bb      	str	r3, [r7, #24]
        break;
 8003cfc:	e00c      	b.n	8003d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfe:	f7fe fc8f 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8003d02:	61b8      	str	r0, [r7, #24]
        break;
 8003d04:	e008      	b.n	8003d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e004      	b.n	8003d18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77bb      	strb	r3, [r7, #30]
        break;
 8003d16:	bf00      	nop
    }

    if (pclk != 0U)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	085a      	lsrs	r2, r3, #1
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d909      	bls.n	8003d4c <UART_SetConfig+0x49c>
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d205      	bcs.n	8003d4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e001      	b.n	8003d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40007c00 	.word	0x40007c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400

08003d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e72:	d10a      	bne.n	8003e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec8:	f7fd fc32 	bl	8001730 <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d10e      	bne.n	8003efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f82d 	bl	8003f4a <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e023      	b.n	8003f42 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d10e      	bne.n	8003f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f817 	bl	8003f4a <UART_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e00d      	b.n	8003f42 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b09c      	sub	sp, #112	; 0x70
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4613      	mov	r3, r2
 8003f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	e0a5      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	f000 80a1 	beq.w	80040a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fd fbe3 	bl	8001730 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d13e      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f90:	667b      	str	r3, [r7, #100]	; 0x64
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e067      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d04f      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004016:	d147      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	66bb      	str	r3, [r7, #104]	; 0x68
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004074:	623a      	str	r2, [r7, #32]
 8004076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	61bb      	str	r3, [r7, #24]
   return(result);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e010      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	f43f af4a 	beq.w	8003f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3770      	adds	r7, #112	; 0x70
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b097      	sub	sp, #92	; 0x5c
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d10e      	bne.n	8004126 <UART_Start_Receive_IT+0x52>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <UART_Start_Receive_IT+0x48>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004116:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800411a:	e02d      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004124:	e028      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <UART_Start_Receive_IT+0x76>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <UART_Start_Receive_IT+0x6c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800413e:	e01b      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	227f      	movs	r2, #127	; 0x7f
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004148:	e016      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004152:	d10d      	bne.n	8004170 <UART_Start_Receive_IT+0x9c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <UART_Start_Receive_IT+0x92>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	227f      	movs	r2, #127	; 0x7f
 8004160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004164:	e008      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	223f      	movs	r2, #63	; 0x3f
 800416a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800416e:	e003      	b.n	8004178 <UART_Start_Receive_IT+0xa4>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2222      	movs	r2, #34	; 0x22
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	657b      	str	r3, [r7, #84]	; 0x54
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d107      	bne.n	80041d4 <UART_Start_Receive_IT+0x100>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <UART_Start_Receive_IT+0x18c>)
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64
 80041d2:	e002      	b.n	80041da <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a23      	ldr	r2, [pc, #140]	; (8004264 <UART_Start_Receive_IT+0x190>)
 80041d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d019      	beq.n	800421e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800420e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_Start_Receive_IT+0x116>
 800421c:	e018      	b.n	8004250 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	613b      	str	r3, [r7, #16]
   return(result);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	653b      	str	r3, [r7, #80]	; 0x50
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	61bb      	str	r3, [r7, #24]
   return(result);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	375c      	adds	r7, #92	; 0x5c
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	08004681 	.word	0x08004681
 8004264:	08004525 	.word	0x08004525

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	; 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
 8004290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d118      	bne.n	8004310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e6      	bne.n	80042de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004322:	bf00      	nop
 8004324:	3754      	adds	r7, #84	; 0x54
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff fa8f 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800435a:	b480      	push	{r7}
 800435c:	b08f      	sub	sp, #60	; 0x3c
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004366:	2b21      	cmp	r3, #33	; 0x21
 8004368:	d14c      	bne.n	8004404 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d132      	bne.n	80043dc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	61fb      	str	r3, [r7, #28]
   return(result);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	613b      	str	r3, [r7, #16]
   return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043da:	e013      	b.n	8004404 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004404:	bf00      	nop
 8004406:	373c      	adds	r7, #60	; 0x3c
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b091      	sub	sp, #68	; 0x44
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441c:	2b21      	cmp	r3, #33	; 0x21
 800441e:	d151      	bne.n	80044c4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d132      	bne.n	8004492 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	623b      	str	r3, [r7, #32]
   return(result);
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
 800444c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e6      	bne.n	800442c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	617b      	str	r3, [r7, #20]
   return(result);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004490:	e018      	b.n	80044c4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044c4:	bf00      	nop
 80044c6:	3744      	adds	r7, #68	; 0x44
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	613b      	str	r3, [r7, #16]
   return(result);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e6      	bne.n	80044d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd f85c 	bl	80015d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b096      	sub	sp, #88	; 0x58
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004532:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453a:	2b22      	cmp	r3, #34	; 0x22
 800453c:	f040 8094 	bne.w	8004668 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800454a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800454e:	b2d9      	uxtb	r1, r3
 8004550:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	400a      	ands	r2, r1
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d177      	bne.n	8004678 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459c:	653b      	str	r3, [r7, #80]	; 0x50
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
 80045a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	623b      	str	r3, [r7, #32]
   return(result);
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045da:	633a      	str	r2, [r7, #48]	; 0x30
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12e      	bne.n	8004660 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	60fb      	str	r3, [r7, #12]
   return(result);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0310 	bic.w	r3, r3, #16
 800461c:	64bb      	str	r3, [r7, #72]	; 0x48
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	617b      	str	r3, [r7, #20]
   return(result);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d103      	bne.n	8004650 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2210      	movs	r2, #16
 800464e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff f913 	bl	8003884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800465e:	e00b      	b.n	8004678 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc ff87 	bl	8001574 <HAL_UART_RxCpltCallback>
}
 8004666:	e007      	b.n	8004678 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	619a      	str	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	3758      	adds	r7, #88	; 0x58
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b096      	sub	sp, #88	; 0x58
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800468e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	f040 8094 	bne.w	80047c4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046ac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046b4:	4013      	ands	r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d177      	bne.n	80047d4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
 8004704:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	61fb      	str	r3, [r7, #28]
   return(result);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	2b01      	cmp	r3, #1
 800475c:	d12e      	bne.n	80047bc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	60bb      	str	r3, [r7, #8]
   return(result);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f023 0310 	bic.w	r3, r3, #16
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	613b      	str	r3, [r7, #16]
   return(result);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d103      	bne.n	80047ac <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2210      	movs	r2, #16
 80047aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff f865 	bl	8003884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ba:	e00b      	b.n	80047d4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fc fed9 	bl	8001574 <HAL_UART_RxCpltCallback>
}
 80047c2:	e007      	b.n	80047d4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0208 	orr.w	r2, r2, #8
 80047d2:	619a      	str	r2, [r3, #24]
}
 80047d4:	bf00      	nop
 80047d6:	3758      	adds	r7, #88	; 0x58
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000002c 	.word	0x2000002c

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	; (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	; (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	; (800482c <__libc_init_array+0x44>)
 80047fc:	f001 f936 	bl	8005a6c <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	08006048 	.word	0x08006048
 8004824:	08006048 	.word	0x08006048
 8004828:	08006048 	.word	0x08006048
 800482c:	0800604c 	.word	0x0800604c

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <siprintf>:
 8004840:	b40e      	push	{r1, r2, r3}
 8004842:	b500      	push	{lr}
 8004844:	b09c      	sub	sp, #112	; 0x70
 8004846:	ab1d      	add	r3, sp, #116	; 0x74
 8004848:	9002      	str	r0, [sp, #8]
 800484a:	9006      	str	r0, [sp, #24]
 800484c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <siprintf+0x38>)
 8004852:	9107      	str	r1, [sp, #28]
 8004854:	9104      	str	r1, [sp, #16]
 8004856:	4909      	ldr	r1, [pc, #36]	; (800487c <siprintf+0x3c>)
 8004858:	f853 2b04 	ldr.w	r2, [r3], #4
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	6800      	ldr	r0, [r0, #0]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	a902      	add	r1, sp, #8
 8004864:	f000 f8ba 	bl	80049dc <_svfiprintf_r>
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	b01c      	add	sp, #112	; 0x70
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b003      	add	sp, #12
 8004876:	4770      	bx	lr
 8004878:	2000002c 	.word	0x2000002c
 800487c:	ffff0208 	.word	0xffff0208

08004880 <siscanf>:
 8004880:	b40e      	push	{r1, r2, r3}
 8004882:	b510      	push	{r4, lr}
 8004884:	b09f      	sub	sp, #124	; 0x7c
 8004886:	ac21      	add	r4, sp, #132	; 0x84
 8004888:	f44f 7101 	mov.w	r1, #516	; 0x204
 800488c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004890:	9201      	str	r2, [sp, #4]
 8004892:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004896:	9004      	str	r0, [sp, #16]
 8004898:	9008      	str	r0, [sp, #32]
 800489a:	f7fb fcd1 	bl	8000240 <strlen>
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <siscanf+0x50>)
 80048a0:	9005      	str	r0, [sp, #20]
 80048a2:	9009      	str	r0, [sp, #36]	; 0x24
 80048a4:	930d      	str	r3, [sp, #52]	; 0x34
 80048a6:	480b      	ldr	r0, [pc, #44]	; (80048d4 <siscanf+0x54>)
 80048a8:	9a01      	ldr	r2, [sp, #4]
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	9403      	str	r4, [sp, #12]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9311      	str	r3, [sp, #68]	; 0x44
 80048b2:	9316      	str	r3, [sp, #88]	; 0x58
 80048b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80048bc:	a904      	add	r1, sp, #16
 80048be:	4623      	mov	r3, r4
 80048c0:	f000 f9e6 	bl	8004c90 <__ssvfiscanf_r>
 80048c4:	b01f      	add	sp, #124	; 0x7c
 80048c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ca:	b003      	add	sp, #12
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	080048d9 	.word	0x080048d9
 80048d4:	2000002c 	.word	0x2000002c

080048d8 <__seofread>:
 80048d8:	2000      	movs	r0, #0
 80048da:	4770      	bx	lr

080048dc <strncmp>:
 80048dc:	b510      	push	{r4, lr}
 80048de:	b16a      	cbz	r2, 80048fc <strncmp+0x20>
 80048e0:	3901      	subs	r1, #1
 80048e2:	1884      	adds	r4, r0, r2
 80048e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80048e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <strncmp+0x1c>
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d001      	beq.n	80048f8 <strncmp+0x1c>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f5      	bne.n	80048e4 <strncmp+0x8>
 80048f8:	1a98      	subs	r0, r3, r2
 80048fa:	bd10      	pop	{r4, pc}
 80048fc:	4610      	mov	r0, r2
 80048fe:	e7fc      	b.n	80048fa <strncmp+0x1e>

08004900 <strncpy>:
 8004900:	b510      	push	{r4, lr}
 8004902:	3901      	subs	r1, #1
 8004904:	4603      	mov	r3, r0
 8004906:	b132      	cbz	r2, 8004916 <strncpy+0x16>
 8004908:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800490c:	f803 4b01 	strb.w	r4, [r3], #1
 8004910:	3a01      	subs	r2, #1
 8004912:	2c00      	cmp	r4, #0
 8004914:	d1f7      	bne.n	8004906 <strncpy+0x6>
 8004916:	441a      	add	r2, r3
 8004918:	2100      	movs	r1, #0
 800491a:	4293      	cmp	r3, r2
 800491c:	d100      	bne.n	8004920 <strncpy+0x20>
 800491e:	bd10      	pop	{r4, pc}
 8004920:	f803 1b01 	strb.w	r1, [r3], #1
 8004924:	e7f9      	b.n	800491a <strncpy+0x1a>

08004926 <__ssputs_r>:
 8004926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492a:	688e      	ldr	r6, [r1, #8]
 800492c:	429e      	cmp	r6, r3
 800492e:	4682      	mov	sl, r0
 8004930:	460c      	mov	r4, r1
 8004932:	4690      	mov	r8, r2
 8004934:	461f      	mov	r7, r3
 8004936:	d838      	bhi.n	80049aa <__ssputs_r+0x84>
 8004938:	898a      	ldrh	r2, [r1, #12]
 800493a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800493e:	d032      	beq.n	80049a6 <__ssputs_r+0x80>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6909      	ldr	r1, [r1, #16]
 8004944:	eba5 0901 	sub.w	r9, r5, r1
 8004948:	6965      	ldr	r5, [r4, #20]
 800494a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800494e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004952:	3301      	adds	r3, #1
 8004954:	444b      	add	r3, r9
 8004956:	106d      	asrs	r5, r5, #1
 8004958:	429d      	cmp	r5, r3
 800495a:	bf38      	it	cc
 800495c:	461d      	movcc	r5, r3
 800495e:	0553      	lsls	r3, r2, #21
 8004960:	d531      	bpl.n	80049c6 <__ssputs_r+0xa0>
 8004962:	4629      	mov	r1, r5
 8004964:	f000 ffde 	bl	8005924 <_malloc_r>
 8004968:	4606      	mov	r6, r0
 800496a:	b950      	cbnz	r0, 8004982 <__ssputs_r+0x5c>
 800496c:	230c      	movs	r3, #12
 800496e:	f8ca 3000 	str.w	r3, [sl]
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004982:	6921      	ldr	r1, [r4, #16]
 8004984:	464a      	mov	r2, r9
 8004986:	f000 ff55 	bl	8005834 <memcpy>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	6126      	str	r6, [r4, #16]
 8004998:	6165      	str	r5, [r4, #20]
 800499a:	444e      	add	r6, r9
 800499c:	eba5 0509 	sub.w	r5, r5, r9
 80049a0:	6026      	str	r6, [r4, #0]
 80049a2:	60a5      	str	r5, [r4, #8]
 80049a4:	463e      	mov	r6, r7
 80049a6:	42be      	cmp	r6, r7
 80049a8:	d900      	bls.n	80049ac <__ssputs_r+0x86>
 80049aa:	463e      	mov	r6, r7
 80049ac:	4632      	mov	r2, r6
 80049ae:	6820      	ldr	r0, [r4, #0]
 80049b0:	4641      	mov	r1, r8
 80049b2:	f000 ff4d 	bl	8005850 <memmove>
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	1b9b      	subs	r3, r3, r6
 80049bc:	4432      	add	r2, r6
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	e7db      	b.n	800497e <__ssputs_r+0x58>
 80049c6:	462a      	mov	r2, r5
 80049c8:	f001 f806 	bl	80059d8 <_realloc_r>
 80049cc:	4606      	mov	r6, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d1e1      	bne.n	8004996 <__ssputs_r+0x70>
 80049d2:	6921      	ldr	r1, [r4, #16]
 80049d4:	4650      	mov	r0, sl
 80049d6:	f000 ff55 	bl	8005884 <_free_r>
 80049da:	e7c7      	b.n	800496c <__ssputs_r+0x46>

080049dc <_svfiprintf_r>:
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	4698      	mov	r8, r3
 80049e2:	898b      	ldrh	r3, [r1, #12]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	4607      	mov	r7, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	d50e      	bpl.n	8004a0e <_svfiprintf_r+0x32>
 80049f0:	690b      	ldr	r3, [r1, #16]
 80049f2:	b963      	cbnz	r3, 8004a0e <_svfiprintf_r+0x32>
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	f000 ff95 	bl	8005924 <_malloc_r>
 80049fa:	6028      	str	r0, [r5, #0]
 80049fc:	6128      	str	r0, [r5, #16]
 80049fe:	b920      	cbnz	r0, 8004a0a <_svfiprintf_r+0x2e>
 8004a00:	230c      	movs	r3, #12
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e0d1      	b.n	8004bae <_svfiprintf_r+0x1d2>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	616b      	str	r3, [r5, #20]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	2320      	movs	r3, #32
 8004a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a1c:	2330      	movs	r3, #48	; 0x30
 8004a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bc8 <_svfiprintf_r+0x1ec>
 8004a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a26:	f04f 0901 	mov.w	r9, #1
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a32:	b10a      	cbz	r2, 8004a38 <_svfiprintf_r+0x5c>
 8004a34:	2a25      	cmp	r2, #37	; 0x25
 8004a36:	d1f9      	bne.n	8004a2c <_svfiprintf_r+0x50>
 8004a38:	ebba 0b04 	subs.w	fp, sl, r4
 8004a3c:	d00b      	beq.n	8004a56 <_svfiprintf_r+0x7a>
 8004a3e:	465b      	mov	r3, fp
 8004a40:	4622      	mov	r2, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff ff6e 	bl	8004926 <__ssputs_r>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f000 80aa 	beq.w	8004ba4 <_svfiprintf_r+0x1c8>
 8004a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a52:	445a      	add	r2, fp
 8004a54:	9209      	str	r2, [sp, #36]	; 0x24
 8004a56:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a2 	beq.w	8004ba4 <_svfiprintf_r+0x1c8>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a6a:	f10a 0a01 	add.w	sl, sl, #1
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	9307      	str	r3, [sp, #28]
 8004a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a76:	931a      	str	r3, [sp, #104]	; 0x68
 8004a78:	4654      	mov	r4, sl
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a80:	4851      	ldr	r0, [pc, #324]	; (8004bc8 <_svfiprintf_r+0x1ec>)
 8004a82:	f7fb fbe5 	bl	8000250 <memchr>
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	b9d8      	cbnz	r0, 8004ac2 <_svfiprintf_r+0xe6>
 8004a8a:	06d0      	lsls	r0, r2, #27
 8004a8c:	bf44      	itt	mi
 8004a8e:	2320      	movmi	r3, #32
 8004a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a94:	0711      	lsls	r1, r2, #28
 8004a96:	bf44      	itt	mi
 8004a98:	232b      	movmi	r3, #43	; 0x2b
 8004a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa4:	d015      	beq.n	8004ad2 <_svfiprintf_r+0xf6>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	4654      	mov	r4, sl
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f04f 0c0a 	mov.w	ip, #10
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab6:	3b30      	subs	r3, #48	; 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d94e      	bls.n	8004b5a <_svfiprintf_r+0x17e>
 8004abc:	b1b0      	cbz	r0, 8004aec <_svfiprintf_r+0x110>
 8004abe:	9207      	str	r2, [sp, #28]
 8004ac0:	e014      	b.n	8004aec <_svfiprintf_r+0x110>
 8004ac2:	eba0 0308 	sub.w	r3, r0, r8
 8004ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	46a2      	mov	sl, r4
 8004ad0:	e7d2      	b.n	8004a78 <_svfiprintf_r+0x9c>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	1d19      	adds	r1, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbb      	ittet	lt
 8004ade:	425b      	neglt	r3, r3
 8004ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae4:	9307      	strge	r3, [sp, #28]
 8004ae6:	9307      	strlt	r3, [sp, #28]
 8004ae8:	bfb8      	it	lt
 8004aea:	9204      	strlt	r2, [sp, #16]
 8004aec:	7823      	ldrb	r3, [r4, #0]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d10c      	bne.n	8004b0c <_svfiprintf_r+0x130>
 8004af2:	7863      	ldrb	r3, [r4, #1]
 8004af4:	2b2a      	cmp	r3, #42	; 0x2a
 8004af6:	d135      	bne.n	8004b64 <_svfiprintf_r+0x188>
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b08:	3402      	adds	r4, #2
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bd8 <_svfiprintf_r+0x1fc>
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	2203      	movs	r2, #3
 8004b14:	4650      	mov	r0, sl
 8004b16:	f7fb fb9b 	bl	8000250 <memchr>
 8004b1a:	b140      	cbz	r0, 8004b2e <_svfiprintf_r+0x152>
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	eba0 000a 	sub.w	r0, r0, sl
 8004b22:	fa03 f000 	lsl.w	r0, r3, r0
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	4303      	orrs	r3, r0
 8004b2a:	3401      	adds	r4, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b32:	4826      	ldr	r0, [pc, #152]	; (8004bcc <_svfiprintf_r+0x1f0>)
 8004b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b38:	2206      	movs	r2, #6
 8004b3a:	f7fb fb89 	bl	8000250 <memchr>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d038      	beq.n	8004bb4 <_svfiprintf_r+0x1d8>
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <_svfiprintf_r+0x1f4>)
 8004b44:	bb1b      	cbnz	r3, 8004b8e <_svfiprintf_r+0x1b2>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	3307      	adds	r3, #7
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b54:	4433      	add	r3, r6
 8004b56:	9309      	str	r3, [sp, #36]	; 0x24
 8004b58:	e767      	b.n	8004a2a <_svfiprintf_r+0x4e>
 8004b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5e:	460c      	mov	r4, r1
 8004b60:	2001      	movs	r0, #1
 8004b62:	e7a5      	b.n	8004ab0 <_svfiprintf_r+0xd4>
 8004b64:	2300      	movs	r3, #0
 8004b66:	3401      	adds	r4, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0c0a 	mov.w	ip, #10
 8004b70:	4620      	mov	r0, r4
 8004b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b76:	3a30      	subs	r2, #48	; 0x30
 8004b78:	2a09      	cmp	r2, #9
 8004b7a:	d903      	bls.n	8004b84 <_svfiprintf_r+0x1a8>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0c5      	beq.n	8004b0c <_svfiprintf_r+0x130>
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	e7c3      	b.n	8004b0c <_svfiprintf_r+0x130>
 8004b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b88:	4604      	mov	r4, r0
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7f0      	b.n	8004b70 <_svfiprintf_r+0x194>
 8004b8e:	ab03      	add	r3, sp, #12
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	462a      	mov	r2, r5
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <_svfiprintf_r+0x1f8>)
 8004b96:	a904      	add	r1, sp, #16
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f3af 8000 	nop.w
 8004b9e:	1c42      	adds	r2, r0, #1
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	d1d6      	bne.n	8004b52 <_svfiprintf_r+0x176>
 8004ba4:	89ab      	ldrh	r3, [r5, #12]
 8004ba6:	065b      	lsls	r3, r3, #25
 8004ba8:	f53f af2c 	bmi.w	8004a04 <_svfiprintf_r+0x28>
 8004bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bae:	b01d      	add	sp, #116	; 0x74
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	ab03      	add	r3, sp, #12
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <_svfiprintf_r+0x1f8>)
 8004bbc:	a904      	add	r1, sp, #16
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f000 fa4c 	bl	800505c <_printf_i>
 8004bc4:	e7eb      	b.n	8004b9e <_svfiprintf_r+0x1c2>
 8004bc6:	bf00      	nop
 8004bc8:	08005e90 	.word	0x08005e90
 8004bcc:	08005e9a 	.word	0x08005e9a
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	08004927 	.word	0x08004927
 8004bd8:	08005e96 	.word	0x08005e96

08004bdc <_sungetc_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	1c4b      	adds	r3, r1, #1
 8004be0:	4614      	mov	r4, r2
 8004be2:	d103      	bne.n	8004bec <_sungetc_r+0x10>
 8004be4:	f04f 35ff 	mov.w	r5, #4294967295
 8004be8:	4628      	mov	r0, r5
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	8993      	ldrh	r3, [r2, #12]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	8193      	strh	r3, [r2, #12]
 8004bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf6:	6852      	ldr	r2, [r2, #4]
 8004bf8:	b2cd      	uxtb	r5, r1
 8004bfa:	b18b      	cbz	r3, 8004c20 <_sungetc_r+0x44>
 8004bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	dd08      	ble.n	8004c14 <_sungetc_r+0x38>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	1e5a      	subs	r2, r3, #1
 8004c06:	6022      	str	r2, [r4, #0]
 8004c08:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	e7e9      	b.n	8004be8 <_sungetc_r+0xc>
 8004c14:	4621      	mov	r1, r4
 8004c16:	f000 fdd1 	bl	80057bc <__submore>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0f1      	beq.n	8004c02 <_sungetc_r+0x26>
 8004c1e:	e7e1      	b.n	8004be4 <_sungetc_r+0x8>
 8004c20:	6921      	ldr	r1, [r4, #16]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	b151      	cbz	r1, 8004c3c <_sungetc_r+0x60>
 8004c26:	4299      	cmp	r1, r3
 8004c28:	d208      	bcs.n	8004c3c <_sungetc_r+0x60>
 8004c2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004c2e:	42a9      	cmp	r1, r5
 8004c30:	d104      	bne.n	8004c3c <_sungetc_r+0x60>
 8004c32:	3b01      	subs	r3, #1
 8004c34:	3201      	adds	r2, #1
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	6062      	str	r2, [r4, #4]
 8004c3a:	e7d5      	b.n	8004be8 <_sungetc_r+0xc>
 8004c3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c44:	6363      	str	r3, [r4, #52]	; 0x34
 8004c46:	2303      	movs	r3, #3
 8004c48:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	2301      	movs	r3, #1
 8004c54:	e7dc      	b.n	8004c10 <_sungetc_r+0x34>

08004c56 <__ssrefill_r>:
 8004c56:	b510      	push	{r4, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c5c:	b169      	cbz	r1, 8004c7a <__ssrefill_r+0x24>
 8004c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c62:	4299      	cmp	r1, r3
 8004c64:	d001      	beq.n	8004c6a <__ssrefill_r+0x14>
 8004c66:	f000 fe0d 	bl	8005884 <_free_r>
 8004c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	6360      	str	r0, [r4, #52]	; 0x34
 8004c72:	b113      	cbz	r3, 8004c7a <__ssrefill_r+0x24>
 8004c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6063      	str	r3, [r4, #4]
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f043 0320 	orr.w	r3, r3, #32
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	e7f3      	b.n	8004c78 <__ssrefill_r+0x22>

08004c90 <__ssvfiscanf_r>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	460c      	mov	r4, r1
 8004c96:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004ca0:	49b2      	ldr	r1, [pc, #712]	; (8004f6c <__ssvfiscanf_r+0x2dc>)
 8004ca2:	91a0      	str	r1, [sp, #640]	; 0x280
 8004ca4:	f10d 0804 	add.w	r8, sp, #4
 8004ca8:	49b1      	ldr	r1, [pc, #708]	; (8004f70 <__ssvfiscanf_r+0x2e0>)
 8004caa:	4fb2      	ldr	r7, [pc, #712]	; (8004f74 <__ssvfiscanf_r+0x2e4>)
 8004cac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004f78 <__ssvfiscanf_r+0x2e8>
 8004cb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	91a1      	str	r1, [sp, #644]	; 0x284
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	f892 a000 	ldrb.w	sl, [r2]
 8004cbe:	f1ba 0f00 	cmp.w	sl, #0
 8004cc2:	f000 8151 	beq.w	8004f68 <__ssvfiscanf_r+0x2d8>
 8004cc6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004cca:	f013 0308 	ands.w	r3, r3, #8
 8004cce:	f102 0501 	add.w	r5, r2, #1
 8004cd2:	d019      	beq.n	8004d08 <__ssvfiscanf_r+0x78>
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	dd0f      	ble.n	8004cfa <__ssvfiscanf_r+0x6a>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	5cba      	ldrb	r2, [r7, r2]
 8004ce0:	0712      	lsls	r2, r2, #28
 8004ce2:	d401      	bmi.n	8004ce8 <__ssvfiscanf_r+0x58>
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	e7e8      	b.n	8004cba <__ssvfiscanf_r+0x2a>
 8004ce8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cea:	3201      	adds	r2, #1
 8004cec:	9245      	str	r2, [sp, #276]	; 0x114
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	6062      	str	r2, [r4, #4]
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	e7ec      	b.n	8004cd4 <__ssvfiscanf_r+0x44>
 8004cfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4630      	mov	r0, r6
 8004d00:	4798      	blx	r3
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d0e9      	beq.n	8004cda <__ssvfiscanf_r+0x4a>
 8004d06:	e7ed      	b.n	8004ce4 <__ssvfiscanf_r+0x54>
 8004d08:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004d0c:	f040 8083 	bne.w	8004e16 <__ssvfiscanf_r+0x186>
 8004d10:	9341      	str	r3, [sp, #260]	; 0x104
 8004d12:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d14:	7853      	ldrb	r3, [r2, #1]
 8004d16:	2b2a      	cmp	r3, #42	; 0x2a
 8004d18:	bf02      	ittt	eq
 8004d1a:	2310      	moveq	r3, #16
 8004d1c:	1c95      	addeq	r5, r2, #2
 8004d1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004d20:	220a      	movs	r2, #10
 8004d22:	46ab      	mov	fp, r5
 8004d24:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004d28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	d91d      	bls.n	8004d6c <__ssvfiscanf_r+0xdc>
 8004d30:	4891      	ldr	r0, [pc, #580]	; (8004f78 <__ssvfiscanf_r+0x2e8>)
 8004d32:	2203      	movs	r2, #3
 8004d34:	f7fb fa8c 	bl	8000250 <memchr>
 8004d38:	b140      	cbz	r0, 8004d4c <__ssvfiscanf_r+0xbc>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	eba0 0009 	sub.w	r0, r0, r9
 8004d40:	fa03 f000 	lsl.w	r0, r3, r0
 8004d44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d46:	4318      	orrs	r0, r3
 8004d48:	9041      	str	r0, [sp, #260]	; 0x104
 8004d4a:	465d      	mov	r5, fp
 8004d4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d50:	2b78      	cmp	r3, #120	; 0x78
 8004d52:	d806      	bhi.n	8004d62 <__ssvfiscanf_r+0xd2>
 8004d54:	2b57      	cmp	r3, #87	; 0x57
 8004d56:	d810      	bhi.n	8004d7a <__ssvfiscanf_r+0xea>
 8004d58:	2b25      	cmp	r3, #37	; 0x25
 8004d5a:	d05c      	beq.n	8004e16 <__ssvfiscanf_r+0x186>
 8004d5c:	d856      	bhi.n	8004e0c <__ssvfiscanf_r+0x17c>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d074      	beq.n	8004e4c <__ssvfiscanf_r+0x1bc>
 8004d62:	2303      	movs	r3, #3
 8004d64:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d66:	230a      	movs	r3, #10
 8004d68:	9342      	str	r3, [sp, #264]	; 0x108
 8004d6a:	e081      	b.n	8004e70 <__ssvfiscanf_r+0x1e0>
 8004d6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d6e:	fb02 1303 	mla	r3, r2, r3, r1
 8004d72:	3b30      	subs	r3, #48	; 0x30
 8004d74:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d76:	465d      	mov	r5, fp
 8004d78:	e7d3      	b.n	8004d22 <__ssvfiscanf_r+0x92>
 8004d7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004d7e:	2a20      	cmp	r2, #32
 8004d80:	d8ef      	bhi.n	8004d62 <__ssvfiscanf_r+0xd2>
 8004d82:	a101      	add	r1, pc, #4	; (adr r1, 8004d88 <__ssvfiscanf_r+0xf8>)
 8004d84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d88:	08004e5b 	.word	0x08004e5b
 8004d8c:	08004d63 	.word	0x08004d63
 8004d90:	08004d63 	.word	0x08004d63
 8004d94:	08004eb9 	.word	0x08004eb9
 8004d98:	08004d63 	.word	0x08004d63
 8004d9c:	08004d63 	.word	0x08004d63
 8004da0:	08004d63 	.word	0x08004d63
 8004da4:	08004d63 	.word	0x08004d63
 8004da8:	08004d63 	.word	0x08004d63
 8004dac:	08004d63 	.word	0x08004d63
 8004db0:	08004d63 	.word	0x08004d63
 8004db4:	08004ecf 	.word	0x08004ecf
 8004db8:	08004ea5 	.word	0x08004ea5
 8004dbc:	08004e13 	.word	0x08004e13
 8004dc0:	08004e13 	.word	0x08004e13
 8004dc4:	08004e13 	.word	0x08004e13
 8004dc8:	08004d63 	.word	0x08004d63
 8004dcc:	08004ea9 	.word	0x08004ea9
 8004dd0:	08004d63 	.word	0x08004d63
 8004dd4:	08004d63 	.word	0x08004d63
 8004dd8:	08004d63 	.word	0x08004d63
 8004ddc:	08004d63 	.word	0x08004d63
 8004de0:	08004edf 	.word	0x08004edf
 8004de4:	08004eb1 	.word	0x08004eb1
 8004de8:	08004e53 	.word	0x08004e53
 8004dec:	08004d63 	.word	0x08004d63
 8004df0:	08004d63 	.word	0x08004d63
 8004df4:	08004edb 	.word	0x08004edb
 8004df8:	08004d63 	.word	0x08004d63
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004d63 	.word	0x08004d63
 8004e04:	08004d63 	.word	0x08004d63
 8004e08:	08004e5b 	.word	0x08004e5b
 8004e0c:	3b45      	subs	r3, #69	; 0x45
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d8a7      	bhi.n	8004d62 <__ssvfiscanf_r+0xd2>
 8004e12:	2305      	movs	r3, #5
 8004e14:	e02b      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dd0d      	ble.n	8004e38 <__ssvfiscanf_r+0x1a8>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	4552      	cmp	r2, sl
 8004e22:	f040 80a1 	bne.w	8004f68 <__ssvfiscanf_r+0x2d8>
 8004e26:	3301      	adds	r3, #1
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	3301      	adds	r3, #1
 8004e32:	6062      	str	r2, [r4, #4]
 8004e34:	9345      	str	r3, [sp, #276]	; 0x114
 8004e36:	e755      	b.n	8004ce4 <__ssvfiscanf_r+0x54>
 8004e38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4798      	blx	r3
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d0eb      	beq.n	8004e1c <__ssvfiscanf_r+0x18c>
 8004e44:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e46:	2800      	cmp	r0, #0
 8004e48:	f040 8084 	bne.w	8004f54 <__ssvfiscanf_r+0x2c4>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e086      	b.n	8004f60 <__ssvfiscanf_r+0x2d0>
 8004e52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e54:	f042 0220 	orr.w	r2, r2, #32
 8004e58:	9241      	str	r2, [sp, #260]	; 0x104
 8004e5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	9241      	str	r2, [sp, #260]	; 0x104
 8004e62:	2210      	movs	r2, #16
 8004e64:	2b6f      	cmp	r3, #111	; 0x6f
 8004e66:	9242      	str	r2, [sp, #264]	; 0x108
 8004e68:	bf34      	ite	cc
 8004e6a:	2303      	movcc	r3, #3
 8004e6c:	2304      	movcs	r3, #4
 8004e6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dd41      	ble.n	8004efa <__ssvfiscanf_r+0x26a>
 8004e76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e78:	0659      	lsls	r1, r3, #25
 8004e7a:	d404      	bmi.n	8004e86 <__ssvfiscanf_r+0x1f6>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	5cba      	ldrb	r2, [r7, r2]
 8004e82:	0712      	lsls	r2, r2, #28
 8004e84:	d440      	bmi.n	8004f08 <__ssvfiscanf_r+0x278>
 8004e86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	dc4f      	bgt.n	8004f2c <__ssvfiscanf_r+0x29c>
 8004e8c:	466b      	mov	r3, sp
 8004e8e:	4622      	mov	r2, r4
 8004e90:	a941      	add	r1, sp, #260	; 0x104
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 fa08 	bl	80052a8 <_scanf_chars>
 8004e98:	2801      	cmp	r0, #1
 8004e9a:	d065      	beq.n	8004f68 <__ssvfiscanf_r+0x2d8>
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	f47f af21 	bne.w	8004ce4 <__ssvfiscanf_r+0x54>
 8004ea2:	e7cf      	b.n	8004e44 <__ssvfiscanf_r+0x1b4>
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	e7dd      	b.n	8004e64 <__ssvfiscanf_r+0x1d4>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9342      	str	r3, [sp, #264]	; 0x108
 8004eac:	2303      	movs	r3, #3
 8004eae:	e7de      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	9342      	str	r3, [sp, #264]	; 0x108
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	e7da      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f000 fb40 	bl	8005540 <__sccl>
 8004ec0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec6:	9341      	str	r3, [sp, #260]	; 0x104
 8004ec8:	4605      	mov	r5, r0
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e7cf      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004ece:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed4:	9341      	str	r3, [sp, #260]	; 0x104
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e7c9      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e7c7      	b.n	8004e6e <__ssvfiscanf_r+0x1de>
 8004ede:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004ee0:	06c3      	lsls	r3, r0, #27
 8004ee2:	f53f aeff 	bmi.w	8004ce4 <__ssvfiscanf_r+0x54>
 8004ee6:	9b00      	ldr	r3, [sp, #0]
 8004ee8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004eea:	1d19      	adds	r1, r3, #4
 8004eec:	9100      	str	r1, [sp, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	07c0      	lsls	r0, r0, #31
 8004ef2:	bf4c      	ite	mi
 8004ef4:	801a      	strhmi	r2, [r3, #0]
 8004ef6:	601a      	strpl	r2, [r3, #0]
 8004ef8:	e6f4      	b.n	8004ce4 <__ssvfiscanf_r+0x54>
 8004efa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004efc:	4621      	mov	r1, r4
 8004efe:	4630      	mov	r0, r6
 8004f00:	4798      	blx	r3
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d0b7      	beq.n	8004e76 <__ssvfiscanf_r+0x1e6>
 8004f06:	e79d      	b.n	8004e44 <__ssvfiscanf_r+0x1b4>
 8004f08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004f0a:	3201      	adds	r2, #1
 8004f0c:	9245      	str	r2, [sp, #276]	; 0x114
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	3a01      	subs	r2, #1
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	6062      	str	r2, [r4, #4]
 8004f16:	dd02      	ble.n	8004f1e <__ssvfiscanf_r+0x28e>
 8004f18:	3301      	adds	r3, #1
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	e7ae      	b.n	8004e7c <__ssvfiscanf_r+0x1ec>
 8004f1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f20:	4621      	mov	r1, r4
 8004f22:	4630      	mov	r0, r6
 8004f24:	4798      	blx	r3
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d0a8      	beq.n	8004e7c <__ssvfiscanf_r+0x1ec>
 8004f2a:	e78b      	b.n	8004e44 <__ssvfiscanf_r+0x1b4>
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	dc06      	bgt.n	8004f3e <__ssvfiscanf_r+0x2ae>
 8004f30:	466b      	mov	r3, sp
 8004f32:	4622      	mov	r2, r4
 8004f34:	a941      	add	r1, sp, #260	; 0x104
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 fa0e 	bl	8005358 <_scanf_i>
 8004f3c:	e7ac      	b.n	8004e98 <__ssvfiscanf_r+0x208>
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <__ssvfiscanf_r+0x2ec>)
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f43f aecf 	beq.w	8004ce4 <__ssvfiscanf_r+0x54>
 8004f46:	466b      	mov	r3, sp
 8004f48:	4622      	mov	r2, r4
 8004f4a:	a941      	add	r1, sp, #260	; 0x104
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f3af 8000 	nop.w
 8004f52:	e7a1      	b.n	8004e98 <__ssvfiscanf_r+0x208>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f5a:	bf18      	it	ne
 8004f5c:	f04f 30ff 	movne.w	r0, #4294967295
 8004f60:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f6a:	e7f9      	b.n	8004f60 <__ssvfiscanf_r+0x2d0>
 8004f6c:	08004bdd 	.word	0x08004bdd
 8004f70:	08004c57 	.word	0x08004c57
 8004f74:	08005edf 	.word	0x08005edf
 8004f78:	08005e96 	.word	0x08005e96
 8004f7c:	00000000 	.word	0x00000000

08004f80 <_printf_common>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4616      	mov	r6, r2
 8004f86:	4699      	mov	r9, r3
 8004f88:	688a      	ldr	r2, [r1, #8]
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfb8      	it	lt
 8004f94:	4613      	movlt	r3, r2
 8004f96:	6033      	str	r3, [r6, #0]
 8004f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	b10a      	cbz	r2, 8004fa6 <_printf_common+0x26>
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	6033      	str	r3, [r6, #0]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	0699      	lsls	r1, r3, #26
 8004faa:	bf42      	ittt	mi
 8004fac:	6833      	ldrmi	r3, [r6, #0]
 8004fae:	3302      	addmi	r3, #2
 8004fb0:	6033      	strmi	r3, [r6, #0]
 8004fb2:	6825      	ldr	r5, [r4, #0]
 8004fb4:	f015 0506 	ands.w	r5, r5, #6
 8004fb8:	d106      	bne.n	8004fc8 <_printf_common+0x48>
 8004fba:	f104 0a19 	add.w	sl, r4, #25
 8004fbe:	68e3      	ldr	r3, [r4, #12]
 8004fc0:	6832      	ldr	r2, [r6, #0]
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	42ab      	cmp	r3, r5
 8004fc6:	dc26      	bgt.n	8005016 <_printf_common+0x96>
 8004fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fcc:	1e13      	subs	r3, r2, #0
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	bf18      	it	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	0692      	lsls	r2, r2, #26
 8004fd6:	d42b      	bmi.n	8005030 <_printf_common+0xb0>
 8004fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4638      	mov	r0, r7
 8004fe0:	47c0      	blx	r8
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d01e      	beq.n	8005024 <_printf_common+0xa4>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	68e5      	ldr	r5, [r4, #12]
 8004fea:	6832      	ldr	r2, [r6, #0]
 8004fec:	f003 0306 	and.w	r3, r3, #6
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	bf08      	it	eq
 8004ff4:	1aad      	subeq	r5, r5, r2
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	bf0c      	ite	eq
 8004ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005000:	2500      	movne	r5, #0
 8005002:	4293      	cmp	r3, r2
 8005004:	bfc4      	itt	gt
 8005006:	1a9b      	subgt	r3, r3, r2
 8005008:	18ed      	addgt	r5, r5, r3
 800500a:	2600      	movs	r6, #0
 800500c:	341a      	adds	r4, #26
 800500e:	42b5      	cmp	r5, r6
 8005010:	d11a      	bne.n	8005048 <_printf_common+0xc8>
 8005012:	2000      	movs	r0, #0
 8005014:	e008      	b.n	8005028 <_printf_common+0xa8>
 8005016:	2301      	movs	r3, #1
 8005018:	4652      	mov	r2, sl
 800501a:	4649      	mov	r1, r9
 800501c:	4638      	mov	r0, r7
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d103      	bne.n	800502c <_printf_common+0xac>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	3501      	adds	r5, #1
 800502e:	e7c6      	b.n	8004fbe <_printf_common+0x3e>
 8005030:	18e1      	adds	r1, r4, r3
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	2030      	movs	r0, #48	; 0x30
 8005036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800503a:	4422      	add	r2, r4
 800503c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005044:	3302      	adds	r3, #2
 8005046:	e7c7      	b.n	8004fd8 <_printf_common+0x58>
 8005048:	2301      	movs	r3, #1
 800504a:	4622      	mov	r2, r4
 800504c:	4649      	mov	r1, r9
 800504e:	4638      	mov	r0, r7
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d0e6      	beq.n	8005024 <_printf_common+0xa4>
 8005056:	3601      	adds	r6, #1
 8005058:	e7d9      	b.n	800500e <_printf_common+0x8e>
	...

0800505c <_printf_i>:
 800505c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	460c      	mov	r4, r1
 8005062:	4691      	mov	r9, r2
 8005064:	7e27      	ldrb	r7, [r4, #24]
 8005066:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005068:	2f78      	cmp	r7, #120	; 0x78
 800506a:	4680      	mov	r8, r0
 800506c:	469a      	mov	sl, r3
 800506e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005072:	d807      	bhi.n	8005084 <_printf_i+0x28>
 8005074:	2f62      	cmp	r7, #98	; 0x62
 8005076:	d80a      	bhi.n	800508e <_printf_i+0x32>
 8005078:	2f00      	cmp	r7, #0
 800507a:	f000 80d8 	beq.w	800522e <_printf_i+0x1d2>
 800507e:	2f58      	cmp	r7, #88	; 0x58
 8005080:	f000 80a3 	beq.w	80051ca <_printf_i+0x16e>
 8005084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800508c:	e03a      	b.n	8005104 <_printf_i+0xa8>
 800508e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005092:	2b15      	cmp	r3, #21
 8005094:	d8f6      	bhi.n	8005084 <_printf_i+0x28>
 8005096:	a001      	add	r0, pc, #4	; (adr r0, 800509c <_printf_i+0x40>)
 8005098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800509c:	080050f5 	.word	0x080050f5
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005085 	.word	0x08005085
 80050a8:	08005085 	.word	0x08005085
 80050ac:	08005085 	.word	0x08005085
 80050b0:	08005085 	.word	0x08005085
 80050b4:	08005109 	.word	0x08005109
 80050b8:	08005085 	.word	0x08005085
 80050bc:	08005085 	.word	0x08005085
 80050c0:	08005085 	.word	0x08005085
 80050c4:	08005085 	.word	0x08005085
 80050c8:	08005215 	.word	0x08005215
 80050cc:	08005139 	.word	0x08005139
 80050d0:	080051f7 	.word	0x080051f7
 80050d4:	08005085 	.word	0x08005085
 80050d8:	08005085 	.word	0x08005085
 80050dc:	08005237 	.word	0x08005237
 80050e0:	08005085 	.word	0x08005085
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005085 	.word	0x08005085
 80050ec:	08005085 	.word	0x08005085
 80050f0:	080051ff 	.word	0x080051ff
 80050f4:	680b      	ldr	r3, [r1, #0]
 80050f6:	1d1a      	adds	r2, r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	600a      	str	r2, [r1, #0]
 80050fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005104:	2301      	movs	r3, #1
 8005106:	e0a3      	b.n	8005250 <_printf_i+0x1f4>
 8005108:	6825      	ldr	r5, [r4, #0]
 800510a:	6808      	ldr	r0, [r1, #0]
 800510c:	062e      	lsls	r6, r5, #24
 800510e:	f100 0304 	add.w	r3, r0, #4
 8005112:	d50a      	bpl.n	800512a <_printf_i+0xce>
 8005114:	6805      	ldr	r5, [r0, #0]
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	2d00      	cmp	r5, #0
 800511a:	da03      	bge.n	8005124 <_printf_i+0xc8>
 800511c:	232d      	movs	r3, #45	; 0x2d
 800511e:	426d      	negs	r5, r5
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	485e      	ldr	r0, [pc, #376]	; (80052a0 <_printf_i+0x244>)
 8005126:	230a      	movs	r3, #10
 8005128:	e019      	b.n	800515e <_printf_i+0x102>
 800512a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800512e:	6805      	ldr	r5, [r0, #0]
 8005130:	600b      	str	r3, [r1, #0]
 8005132:	bf18      	it	ne
 8005134:	b22d      	sxthne	r5, r5
 8005136:	e7ef      	b.n	8005118 <_printf_i+0xbc>
 8005138:	680b      	ldr	r3, [r1, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	1d18      	adds	r0, r3, #4
 800513e:	6008      	str	r0, [r1, #0]
 8005140:	0628      	lsls	r0, r5, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0xec>
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0xf2>
 8005148:	0669      	lsls	r1, r5, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0xe8>
 800514c:	881d      	ldrh	r5, [r3, #0]
 800514e:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_printf_i+0x244>)
 8005150:	2f6f      	cmp	r7, #111	; 0x6f
 8005152:	bf0c      	ite	eq
 8005154:	2308      	moveq	r3, #8
 8005156:	230a      	movne	r3, #10
 8005158:	2100      	movs	r1, #0
 800515a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515e:	6866      	ldr	r6, [r4, #4]
 8005160:	60a6      	str	r6, [r4, #8]
 8005162:	2e00      	cmp	r6, #0
 8005164:	bfa2      	ittt	ge
 8005166:	6821      	ldrge	r1, [r4, #0]
 8005168:	f021 0104 	bicge.w	r1, r1, #4
 800516c:	6021      	strge	r1, [r4, #0]
 800516e:	b90d      	cbnz	r5, 8005174 <_printf_i+0x118>
 8005170:	2e00      	cmp	r6, #0
 8005172:	d04d      	beq.n	8005210 <_printf_i+0x1b4>
 8005174:	4616      	mov	r6, r2
 8005176:	fbb5 f1f3 	udiv	r1, r5, r3
 800517a:	fb03 5711 	mls	r7, r3, r1, r5
 800517e:	5dc7      	ldrb	r7, [r0, r7]
 8005180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005184:	462f      	mov	r7, r5
 8005186:	42bb      	cmp	r3, r7
 8005188:	460d      	mov	r5, r1
 800518a:	d9f4      	bls.n	8005176 <_printf_i+0x11a>
 800518c:	2b08      	cmp	r3, #8
 800518e:	d10b      	bne.n	80051a8 <_printf_i+0x14c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07df      	lsls	r7, r3, #31
 8005194:	d508      	bpl.n	80051a8 <_printf_i+0x14c>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	4299      	cmp	r1, r3
 800519c:	bfde      	ittt	le
 800519e:	2330      	movle	r3, #48	; 0x30
 80051a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051a8:	1b92      	subs	r2, r2, r6
 80051aa:	6122      	str	r2, [r4, #16]
 80051ac:	f8cd a000 	str.w	sl, [sp]
 80051b0:	464b      	mov	r3, r9
 80051b2:	aa03      	add	r2, sp, #12
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff fee2 	bl	8004f80 <_printf_common>
 80051bc:	3001      	adds	r0, #1
 80051be:	d14c      	bne.n	800525a <_printf_i+0x1fe>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	b004      	add	sp, #16
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	4835      	ldr	r0, [pc, #212]	; (80052a0 <_printf_i+0x244>)
 80051cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	680e      	ldr	r6, [r1, #0]
 80051d4:	061f      	lsls	r7, r3, #24
 80051d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80051da:	600e      	str	r6, [r1, #0]
 80051dc:	d514      	bpl.n	8005208 <_printf_i+0x1ac>
 80051de:	07d9      	lsls	r1, r3, #31
 80051e0:	bf44      	itt	mi
 80051e2:	f043 0320 	orrmi.w	r3, r3, #32
 80051e6:	6023      	strmi	r3, [r4, #0]
 80051e8:	b91d      	cbnz	r5, 80051f2 <_printf_i+0x196>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f023 0320 	bic.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	2310      	movs	r3, #16
 80051f4:	e7b0      	b.n	8005158 <_printf_i+0xfc>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	f043 0320 	orr.w	r3, r3, #32
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	2378      	movs	r3, #120	; 0x78
 8005200:	4828      	ldr	r0, [pc, #160]	; (80052a4 <_printf_i+0x248>)
 8005202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005206:	e7e3      	b.n	80051d0 <_printf_i+0x174>
 8005208:	065e      	lsls	r6, r3, #25
 800520a:	bf48      	it	mi
 800520c:	b2ad      	uxthmi	r5, r5
 800520e:	e7e6      	b.n	80051de <_printf_i+0x182>
 8005210:	4616      	mov	r6, r2
 8005212:	e7bb      	b.n	800518c <_printf_i+0x130>
 8005214:	680b      	ldr	r3, [r1, #0]
 8005216:	6826      	ldr	r6, [r4, #0]
 8005218:	6960      	ldr	r0, [r4, #20]
 800521a:	1d1d      	adds	r5, r3, #4
 800521c:	600d      	str	r5, [r1, #0]
 800521e:	0635      	lsls	r5, r6, #24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	d501      	bpl.n	8005228 <_printf_i+0x1cc>
 8005224:	6018      	str	r0, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0x1d2>
 8005228:	0671      	lsls	r1, r6, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0x1c8>
 800522c:	8018      	strh	r0, [r3, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	4616      	mov	r6, r2
 8005234:	e7ba      	b.n	80051ac <_printf_i+0x150>
 8005236:	680b      	ldr	r3, [r1, #0]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	600a      	str	r2, [r1, #0]
 800523c:	681e      	ldr	r6, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	4630      	mov	r0, r6
 8005244:	f7fb f804 	bl	8000250 <memchr>
 8005248:	b108      	cbz	r0, 800524e <_printf_i+0x1f2>
 800524a:	1b80      	subs	r0, r0, r6
 800524c:	6060      	str	r0, [r4, #4]
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	2300      	movs	r3, #0
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	e7a8      	b.n	80051ac <_printf_i+0x150>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	4632      	mov	r2, r6
 800525e:	4649      	mov	r1, r9
 8005260:	4640      	mov	r0, r8
 8005262:	47d0      	blx	sl
 8005264:	3001      	adds	r0, #1
 8005266:	d0ab      	beq.n	80051c0 <_printf_i+0x164>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	079b      	lsls	r3, r3, #30
 800526c:	d413      	bmi.n	8005296 <_printf_i+0x23a>
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	4298      	cmp	r0, r3
 8005274:	bfb8      	it	lt
 8005276:	4618      	movlt	r0, r3
 8005278:	e7a4      	b.n	80051c4 <_printf_i+0x168>
 800527a:	2301      	movs	r3, #1
 800527c:	4632      	mov	r2, r6
 800527e:	4649      	mov	r1, r9
 8005280:	4640      	mov	r0, r8
 8005282:	47d0      	blx	sl
 8005284:	3001      	adds	r0, #1
 8005286:	d09b      	beq.n	80051c0 <_printf_i+0x164>
 8005288:	3501      	adds	r5, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	9903      	ldr	r1, [sp, #12]
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	42ab      	cmp	r3, r5
 8005292:	dcf2      	bgt.n	800527a <_printf_i+0x21e>
 8005294:	e7eb      	b.n	800526e <_printf_i+0x212>
 8005296:	2500      	movs	r5, #0
 8005298:	f104 0619 	add.w	r6, r4, #25
 800529c:	e7f5      	b.n	800528a <_printf_i+0x22e>
 800529e:	bf00      	nop
 80052a0:	08005ea1 	.word	0x08005ea1
 80052a4:	08005eb2 	.word	0x08005eb2

080052a8 <_scanf_chars>:
 80052a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ac:	4615      	mov	r5, r2
 80052ae:	688a      	ldr	r2, [r1, #8]
 80052b0:	4680      	mov	r8, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b932      	cbnz	r2, 80052c4 <_scanf_chars+0x1c>
 80052b6:	698a      	ldr	r2, [r1, #24]
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2201      	moveq	r2, #1
 80052be:	f04f 32ff 	movne.w	r2, #4294967295
 80052c2:	608a      	str	r2, [r1, #8]
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005354 <_scanf_chars+0xac>
 80052ca:	06d1      	lsls	r1, r2, #27
 80052cc:	bf5f      	itttt	pl
 80052ce:	681a      	ldrpl	r2, [r3, #0]
 80052d0:	1d11      	addpl	r1, r2, #4
 80052d2:	6019      	strpl	r1, [r3, #0]
 80052d4:	6816      	ldrpl	r6, [r2, #0]
 80052d6:	2700      	movs	r7, #0
 80052d8:	69a0      	ldr	r0, [r4, #24]
 80052da:	b188      	cbz	r0, 8005300 <_scanf_chars+0x58>
 80052dc:	2801      	cmp	r0, #1
 80052de:	d107      	bne.n	80052f0 <_scanf_chars+0x48>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	6963      	ldr	r3, [r4, #20]
 80052e6:	5c9b      	ldrb	r3, [r3, r2]
 80052e8:	b953      	cbnz	r3, 8005300 <_scanf_chars+0x58>
 80052ea:	bb27      	cbnz	r7, 8005336 <_scanf_chars+0x8e>
 80052ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f0:	2802      	cmp	r0, #2
 80052f2:	d120      	bne.n	8005336 <_scanf_chars+0x8e>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80052fc:	071b      	lsls	r3, r3, #28
 80052fe:	d41a      	bmi.n	8005336 <_scanf_chars+0x8e>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	06da      	lsls	r2, r3, #27
 8005304:	bf5e      	ittt	pl
 8005306:	682b      	ldrpl	r3, [r5, #0]
 8005308:	781b      	ldrbpl	r3, [r3, #0]
 800530a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800530e:	682a      	ldr	r2, [r5, #0]
 8005310:	686b      	ldr	r3, [r5, #4]
 8005312:	3201      	adds	r2, #1
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	68a2      	ldr	r2, [r4, #8]
 8005318:	3b01      	subs	r3, #1
 800531a:	3a01      	subs	r2, #1
 800531c:	606b      	str	r3, [r5, #4]
 800531e:	3701      	adds	r7, #1
 8005320:	60a2      	str	r2, [r4, #8]
 8005322:	b142      	cbz	r2, 8005336 <_scanf_chars+0x8e>
 8005324:	2b00      	cmp	r3, #0
 8005326:	dcd7      	bgt.n	80052d8 <_scanf_chars+0x30>
 8005328:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800532c:	4629      	mov	r1, r5
 800532e:	4640      	mov	r0, r8
 8005330:	4798      	blx	r3
 8005332:	2800      	cmp	r0, #0
 8005334:	d0d0      	beq.n	80052d8 <_scanf_chars+0x30>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	f013 0310 	ands.w	r3, r3, #16
 800533c:	d105      	bne.n	800534a <_scanf_chars+0xa2>
 800533e:	68e2      	ldr	r2, [r4, #12]
 8005340:	3201      	adds	r2, #1
 8005342:	60e2      	str	r2, [r4, #12]
 8005344:	69a2      	ldr	r2, [r4, #24]
 8005346:	b102      	cbz	r2, 800534a <_scanf_chars+0xa2>
 8005348:	7033      	strb	r3, [r6, #0]
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	441f      	add	r7, r3
 800534e:	6127      	str	r7, [r4, #16]
 8005350:	2000      	movs	r0, #0
 8005352:	e7cb      	b.n	80052ec <_scanf_chars+0x44>
 8005354:	08005edf 	.word	0x08005edf

08005358 <_scanf_i>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	4698      	mov	r8, r3
 800535e:	4b74      	ldr	r3, [pc, #464]	; (8005530 <_scanf_i+0x1d8>)
 8005360:	460c      	mov	r4, r1
 8005362:	4682      	mov	sl, r0
 8005364:	4616      	mov	r6, r2
 8005366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800536a:	b087      	sub	sp, #28
 800536c:	ab03      	add	r3, sp, #12
 800536e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005372:	4b70      	ldr	r3, [pc, #448]	; (8005534 <_scanf_i+0x1dc>)
 8005374:	69a1      	ldr	r1, [r4, #24]
 8005376:	4a70      	ldr	r2, [pc, #448]	; (8005538 <_scanf_i+0x1e0>)
 8005378:	2903      	cmp	r1, #3
 800537a:	bf18      	it	ne
 800537c:	461a      	movne	r2, r3
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	9201      	str	r2, [sp, #4]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005388:	bf88      	it	hi
 800538a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800538e:	4627      	mov	r7, r4
 8005390:	bf82      	ittt	hi
 8005392:	eb03 0905 	addhi.w	r9, r3, r5
 8005396:	f240 135d 	movwhi	r3, #349	; 0x15d
 800539a:	60a3      	strhi	r3, [r4, #8]
 800539c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80053a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80053a4:	bf98      	it	ls
 80053a6:	f04f 0900 	movls.w	r9, #0
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	463d      	mov	r5, r7
 80053ae:	f04f 0b00 	mov.w	fp, #0
 80053b2:	6831      	ldr	r1, [r6, #0]
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	7809      	ldrb	r1, [r1, #0]
 80053b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80053bc:	2202      	movs	r2, #2
 80053be:	f7fa ff47 	bl	8000250 <memchr>
 80053c2:	b328      	cbz	r0, 8005410 <_scanf_i+0xb8>
 80053c4:	f1bb 0f01 	cmp.w	fp, #1
 80053c8:	d159      	bne.n	800547e <_scanf_i+0x126>
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	b92a      	cbnz	r2, 80053da <_scanf_i+0x82>
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	2308      	movs	r3, #8
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	68a2      	ldr	r2, [r4, #8]
 80053e4:	1e51      	subs	r1, r2, #1
 80053e6:	60a1      	str	r1, [r4, #8]
 80053e8:	b192      	cbz	r2, 8005410 <_scanf_i+0xb8>
 80053ea:	6832      	ldr	r2, [r6, #0]
 80053ec:	1c51      	adds	r1, r2, #1
 80053ee:	6031      	str	r1, [r6, #0]
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	f805 2b01 	strb.w	r2, [r5], #1
 80053f6:	6872      	ldr	r2, [r6, #4]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	6072      	str	r2, [r6, #4]
 80053fe:	dc07      	bgt.n	8005410 <_scanf_i+0xb8>
 8005400:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005404:	4631      	mov	r1, r6
 8005406:	4650      	mov	r0, sl
 8005408:	4790      	blx	r2
 800540a:	2800      	cmp	r0, #0
 800540c:	f040 8085 	bne.w	800551a <_scanf_i+0x1c2>
 8005410:	f10b 0b01 	add.w	fp, fp, #1
 8005414:	f1bb 0f03 	cmp.w	fp, #3
 8005418:	d1cb      	bne.n	80053b2 <_scanf_i+0x5a>
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	b90b      	cbnz	r3, 8005422 <_scanf_i+0xca>
 800541e:	230a      	movs	r3, #10
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	4945      	ldr	r1, [pc, #276]	; (800553c <_scanf_i+0x1e4>)
 8005426:	6960      	ldr	r0, [r4, #20]
 8005428:	1ac9      	subs	r1, r1, r3
 800542a:	f000 f889 	bl	8005540 <__sccl>
 800542e:	f04f 0b00 	mov.w	fp, #0
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d03d      	beq.n	80054b6 <_scanf_i+0x15e>
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	6960      	ldr	r0, [r4, #20]
 800543e:	f891 c000 	ldrb.w	ip, [r1]
 8005442:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005446:	2800      	cmp	r0, #0
 8005448:	d035      	beq.n	80054b6 <_scanf_i+0x15e>
 800544a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800544e:	d124      	bne.n	800549a <_scanf_i+0x142>
 8005450:	0510      	lsls	r0, r2, #20
 8005452:	d522      	bpl.n	800549a <_scanf_i+0x142>
 8005454:	f10b 0b01 	add.w	fp, fp, #1
 8005458:	f1b9 0f00 	cmp.w	r9, #0
 800545c:	d003      	beq.n	8005466 <_scanf_i+0x10e>
 800545e:	3301      	adds	r3, #1
 8005460:	f109 39ff 	add.w	r9, r9, #4294967295
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	6873      	ldr	r3, [r6, #4]
 8005468:	3b01      	subs	r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	6073      	str	r3, [r6, #4]
 800546e:	dd1b      	ble.n	80054a8 <_scanf_i+0x150>
 8005470:	6833      	ldr	r3, [r6, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	3b01      	subs	r3, #1
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	e7d9      	b.n	8005432 <_scanf_i+0xda>
 800547e:	f1bb 0f02 	cmp.w	fp, #2
 8005482:	d1ae      	bne.n	80053e2 <_scanf_i+0x8a>
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800548a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800548e:	d1bf      	bne.n	8005410 <_scanf_i+0xb8>
 8005490:	2310      	movs	r3, #16
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005498:	e7a2      	b.n	80053e0 <_scanf_i+0x88>
 800549a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	780b      	ldrb	r3, [r1, #0]
 80054a2:	f805 3b01 	strb.w	r3, [r5], #1
 80054a6:	e7de      	b.n	8005466 <_scanf_i+0x10e>
 80054a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054ac:	4631      	mov	r1, r6
 80054ae:	4650      	mov	r0, sl
 80054b0:	4798      	blx	r3
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0df      	beq.n	8005476 <_scanf_i+0x11e>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	05d9      	lsls	r1, r3, #23
 80054ba:	d50d      	bpl.n	80054d8 <_scanf_i+0x180>
 80054bc:	42bd      	cmp	r5, r7
 80054be:	d909      	bls.n	80054d4 <_scanf_i+0x17c>
 80054c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80054c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c8:	4632      	mov	r2, r6
 80054ca:	4650      	mov	r0, sl
 80054cc:	4798      	blx	r3
 80054ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80054d2:	464d      	mov	r5, r9
 80054d4:	42bd      	cmp	r5, r7
 80054d6:	d028      	beq.n	800552a <_scanf_i+0x1d2>
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	f012 0210 	ands.w	r2, r2, #16
 80054de:	d113      	bne.n	8005508 <_scanf_i+0x1b0>
 80054e0:	702a      	strb	r2, [r5, #0]
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	9e01      	ldr	r6, [sp, #4]
 80054e6:	4639      	mov	r1, r7
 80054e8:	4650      	mov	r0, sl
 80054ea:	47b0      	blx	r6
 80054ec:	f8d8 3000 	ldr.w	r3, [r8]
 80054f0:	6821      	ldr	r1, [r4, #0]
 80054f2:	1d1a      	adds	r2, r3, #4
 80054f4:	f8c8 2000 	str.w	r2, [r8]
 80054f8:	f011 0f20 	tst.w	r1, #32
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	d00f      	beq.n	8005520 <_scanf_i+0x1c8>
 8005500:	6018      	str	r0, [r3, #0]
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60e3      	str	r3, [r4, #12]
 8005508:	1bed      	subs	r5, r5, r7
 800550a:	44ab      	add	fp, r5
 800550c:	6925      	ldr	r5, [r4, #16]
 800550e:	445d      	add	r5, fp
 8005510:	6125      	str	r5, [r4, #16]
 8005512:	2000      	movs	r0, #0
 8005514:	b007      	add	sp, #28
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	f04f 0b00 	mov.w	fp, #0
 800551e:	e7ca      	b.n	80054b6 <_scanf_i+0x15e>
 8005520:	07ca      	lsls	r2, r1, #31
 8005522:	bf4c      	ite	mi
 8005524:	8018      	strhmi	r0, [r3, #0]
 8005526:	6018      	strpl	r0, [r3, #0]
 8005528:	e7eb      	b.n	8005502 <_scanf_i+0x1aa>
 800552a:	2001      	movs	r0, #1
 800552c:	e7f2      	b.n	8005514 <_scanf_i+0x1bc>
 800552e:	bf00      	nop
 8005530:	08005e6c 	.word	0x08005e6c
 8005534:	080057b9 	.word	0x080057b9
 8005538:	080056bd 	.word	0x080056bd
 800553c:	08005edc 	.word	0x08005edc

08005540 <__sccl>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	780b      	ldrb	r3, [r1, #0]
 8005544:	4604      	mov	r4, r0
 8005546:	2b5e      	cmp	r3, #94	; 0x5e
 8005548:	bf0b      	itete	eq
 800554a:	784b      	ldrbeq	r3, [r1, #1]
 800554c:	1c48      	addne	r0, r1, #1
 800554e:	1c88      	addeq	r0, r1, #2
 8005550:	2200      	movne	r2, #0
 8005552:	bf08      	it	eq
 8005554:	2201      	moveq	r2, #1
 8005556:	1e61      	subs	r1, r4, #1
 8005558:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800555c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005560:	42a9      	cmp	r1, r5
 8005562:	d1fb      	bne.n	800555c <__sccl+0x1c>
 8005564:	b90b      	cbnz	r3, 800556a <__sccl+0x2a>
 8005566:	3801      	subs	r0, #1
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	f082 0101 	eor.w	r1, r2, #1
 800556e:	54e1      	strb	r1, [r4, r3]
 8005570:	1c42      	adds	r2, r0, #1
 8005572:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005576:	2d2d      	cmp	r5, #45	; 0x2d
 8005578:	f102 36ff 	add.w	r6, r2, #4294967295
 800557c:	4610      	mov	r0, r2
 800557e:	d006      	beq.n	800558e <__sccl+0x4e>
 8005580:	2d5d      	cmp	r5, #93	; 0x5d
 8005582:	d0f1      	beq.n	8005568 <__sccl+0x28>
 8005584:	b90d      	cbnz	r5, 800558a <__sccl+0x4a>
 8005586:	4630      	mov	r0, r6
 8005588:	e7ee      	b.n	8005568 <__sccl+0x28>
 800558a:	462b      	mov	r3, r5
 800558c:	e7ef      	b.n	800556e <__sccl+0x2e>
 800558e:	7816      	ldrb	r6, [r2, #0]
 8005590:	2e5d      	cmp	r6, #93	; 0x5d
 8005592:	d0fa      	beq.n	800558a <__sccl+0x4a>
 8005594:	42b3      	cmp	r3, r6
 8005596:	dcf8      	bgt.n	800558a <__sccl+0x4a>
 8005598:	4618      	mov	r0, r3
 800559a:	3001      	adds	r0, #1
 800559c:	4286      	cmp	r6, r0
 800559e:	5421      	strb	r1, [r4, r0]
 80055a0:	dcfb      	bgt.n	800559a <__sccl+0x5a>
 80055a2:	43d8      	mvns	r0, r3
 80055a4:	4430      	add	r0, r6
 80055a6:	1c5d      	adds	r5, r3, #1
 80055a8:	42b3      	cmp	r3, r6
 80055aa:	bfa8      	it	ge
 80055ac:	2000      	movge	r0, #0
 80055ae:	182b      	adds	r3, r5, r0
 80055b0:	3202      	adds	r2, #2
 80055b2:	e7de      	b.n	8005572 <__sccl+0x32>

080055b4 <_strtol_l.isra.0>:
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ba:	d001      	beq.n	80055c0 <_strtol_l.isra.0+0xc>
 80055bc:	2b24      	cmp	r3, #36	; 0x24
 80055be:	d906      	bls.n	80055ce <_strtol_l.isra.0+0x1a>
 80055c0:	f7ff f90c 	bl	80047dc <__errno>
 80055c4:	2316      	movs	r3, #22
 80055c6:	6003      	str	r3, [r0, #0]
 80055c8:	2000      	movs	r0, #0
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	4f3a      	ldr	r7, [pc, #232]	; (80056b8 <_strtol_l.isra.0+0x104>)
 80055d0:	468e      	mov	lr, r1
 80055d2:	4676      	mov	r6, lr
 80055d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80055d8:	5de5      	ldrb	r5, [r4, r7]
 80055da:	f015 0508 	ands.w	r5, r5, #8
 80055de:	d1f8      	bne.n	80055d2 <_strtol_l.isra.0+0x1e>
 80055e0:	2c2d      	cmp	r4, #45	; 0x2d
 80055e2:	d134      	bne.n	800564e <_strtol_l.isra.0+0x9a>
 80055e4:	f89e 4000 	ldrb.w	r4, [lr]
 80055e8:	f04f 0801 	mov.w	r8, #1
 80055ec:	f106 0e02 	add.w	lr, r6, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05c      	beq.n	80056ae <_strtol_l.isra.0+0xfa>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d10c      	bne.n	8005612 <_strtol_l.isra.0+0x5e>
 80055f8:	2c30      	cmp	r4, #48	; 0x30
 80055fa:	d10a      	bne.n	8005612 <_strtol_l.isra.0+0x5e>
 80055fc:	f89e 4000 	ldrb.w	r4, [lr]
 8005600:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005604:	2c58      	cmp	r4, #88	; 0x58
 8005606:	d14d      	bne.n	80056a4 <_strtol_l.isra.0+0xf0>
 8005608:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800560c:	2310      	movs	r3, #16
 800560e:	f10e 0e02 	add.w	lr, lr, #2
 8005612:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005616:	f10c 3cff 	add.w	ip, ip, #4294967295
 800561a:	2600      	movs	r6, #0
 800561c:	fbbc f9f3 	udiv	r9, ip, r3
 8005620:	4635      	mov	r5, r6
 8005622:	fb03 ca19 	mls	sl, r3, r9, ip
 8005626:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800562a:	2f09      	cmp	r7, #9
 800562c:	d818      	bhi.n	8005660 <_strtol_l.isra.0+0xac>
 800562e:	463c      	mov	r4, r7
 8005630:	42a3      	cmp	r3, r4
 8005632:	dd24      	ble.n	800567e <_strtol_l.isra.0+0xca>
 8005634:	2e00      	cmp	r6, #0
 8005636:	db1f      	blt.n	8005678 <_strtol_l.isra.0+0xc4>
 8005638:	45a9      	cmp	r9, r5
 800563a:	d31d      	bcc.n	8005678 <_strtol_l.isra.0+0xc4>
 800563c:	d101      	bne.n	8005642 <_strtol_l.isra.0+0x8e>
 800563e:	45a2      	cmp	sl, r4
 8005640:	db1a      	blt.n	8005678 <_strtol_l.isra.0+0xc4>
 8005642:	fb05 4503 	mla	r5, r5, r3, r4
 8005646:	2601      	movs	r6, #1
 8005648:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800564c:	e7eb      	b.n	8005626 <_strtol_l.isra.0+0x72>
 800564e:	2c2b      	cmp	r4, #43	; 0x2b
 8005650:	bf08      	it	eq
 8005652:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005656:	46a8      	mov	r8, r5
 8005658:	bf08      	it	eq
 800565a:	f106 0e02 	addeq.w	lr, r6, #2
 800565e:	e7c7      	b.n	80055f0 <_strtol_l.isra.0+0x3c>
 8005660:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005664:	2f19      	cmp	r7, #25
 8005666:	d801      	bhi.n	800566c <_strtol_l.isra.0+0xb8>
 8005668:	3c37      	subs	r4, #55	; 0x37
 800566a:	e7e1      	b.n	8005630 <_strtol_l.isra.0+0x7c>
 800566c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005670:	2f19      	cmp	r7, #25
 8005672:	d804      	bhi.n	800567e <_strtol_l.isra.0+0xca>
 8005674:	3c57      	subs	r4, #87	; 0x57
 8005676:	e7db      	b.n	8005630 <_strtol_l.isra.0+0x7c>
 8005678:	f04f 36ff 	mov.w	r6, #4294967295
 800567c:	e7e4      	b.n	8005648 <_strtol_l.isra.0+0x94>
 800567e:	2e00      	cmp	r6, #0
 8005680:	da05      	bge.n	800568e <_strtol_l.isra.0+0xda>
 8005682:	2322      	movs	r3, #34	; 0x22
 8005684:	6003      	str	r3, [r0, #0]
 8005686:	4665      	mov	r5, ip
 8005688:	b942      	cbnz	r2, 800569c <_strtol_l.isra.0+0xe8>
 800568a:	4628      	mov	r0, r5
 800568c:	e79d      	b.n	80055ca <_strtol_l.isra.0+0x16>
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	d000      	beq.n	8005696 <_strtol_l.isra.0+0xe2>
 8005694:	426d      	negs	r5, r5
 8005696:	2a00      	cmp	r2, #0
 8005698:	d0f7      	beq.n	800568a <_strtol_l.isra.0+0xd6>
 800569a:	b10e      	cbz	r6, 80056a0 <_strtol_l.isra.0+0xec>
 800569c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	e7f2      	b.n	800568a <_strtol_l.isra.0+0xd6>
 80056a4:	2430      	movs	r4, #48	; 0x30
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1b3      	bne.n	8005612 <_strtol_l.isra.0+0x5e>
 80056aa:	2308      	movs	r3, #8
 80056ac:	e7b1      	b.n	8005612 <_strtol_l.isra.0+0x5e>
 80056ae:	2c30      	cmp	r4, #48	; 0x30
 80056b0:	d0a4      	beq.n	80055fc <_strtol_l.isra.0+0x48>
 80056b2:	230a      	movs	r3, #10
 80056b4:	e7ad      	b.n	8005612 <_strtol_l.isra.0+0x5e>
 80056b6:	bf00      	nop
 80056b8:	08005edf 	.word	0x08005edf

080056bc <_strtol_r>:
 80056bc:	f7ff bf7a 	b.w	80055b4 <_strtol_l.isra.0>

080056c0 <_strtoul_l.isra.0>:
 80056c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c4:	4e3b      	ldr	r6, [pc, #236]	; (80057b4 <_strtoul_l.isra.0+0xf4>)
 80056c6:	4686      	mov	lr, r0
 80056c8:	468c      	mov	ip, r1
 80056ca:	4660      	mov	r0, ip
 80056cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80056d0:	5da5      	ldrb	r5, [r4, r6]
 80056d2:	f015 0508 	ands.w	r5, r5, #8
 80056d6:	d1f8      	bne.n	80056ca <_strtoul_l.isra.0+0xa>
 80056d8:	2c2d      	cmp	r4, #45	; 0x2d
 80056da:	d134      	bne.n	8005746 <_strtoul_l.isra.0+0x86>
 80056dc:	f89c 4000 	ldrb.w	r4, [ip]
 80056e0:	f04f 0801 	mov.w	r8, #1
 80056e4:	f100 0c02 	add.w	ip, r0, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05e      	beq.n	80057aa <_strtoul_l.isra.0+0xea>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d10c      	bne.n	800570a <_strtoul_l.isra.0+0x4a>
 80056f0:	2c30      	cmp	r4, #48	; 0x30
 80056f2:	d10a      	bne.n	800570a <_strtoul_l.isra.0+0x4a>
 80056f4:	f89c 0000 	ldrb.w	r0, [ip]
 80056f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80056fc:	2858      	cmp	r0, #88	; 0x58
 80056fe:	d14f      	bne.n	80057a0 <_strtoul_l.isra.0+0xe0>
 8005700:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005704:	2310      	movs	r3, #16
 8005706:	f10c 0c02 	add.w	ip, ip, #2
 800570a:	f04f 37ff 	mov.w	r7, #4294967295
 800570e:	2500      	movs	r5, #0
 8005710:	fbb7 f7f3 	udiv	r7, r7, r3
 8005714:	fb03 f907 	mul.w	r9, r3, r7
 8005718:	ea6f 0909 	mvn.w	r9, r9
 800571c:	4628      	mov	r0, r5
 800571e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005722:	2e09      	cmp	r6, #9
 8005724:	d818      	bhi.n	8005758 <_strtoul_l.isra.0+0x98>
 8005726:	4634      	mov	r4, r6
 8005728:	42a3      	cmp	r3, r4
 800572a:	dd24      	ble.n	8005776 <_strtoul_l.isra.0+0xb6>
 800572c:	2d00      	cmp	r5, #0
 800572e:	db1f      	blt.n	8005770 <_strtoul_l.isra.0+0xb0>
 8005730:	4287      	cmp	r7, r0
 8005732:	d31d      	bcc.n	8005770 <_strtoul_l.isra.0+0xb0>
 8005734:	d101      	bne.n	800573a <_strtoul_l.isra.0+0x7a>
 8005736:	45a1      	cmp	r9, r4
 8005738:	db1a      	blt.n	8005770 <_strtoul_l.isra.0+0xb0>
 800573a:	fb00 4003 	mla	r0, r0, r3, r4
 800573e:	2501      	movs	r5, #1
 8005740:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005744:	e7eb      	b.n	800571e <_strtoul_l.isra.0+0x5e>
 8005746:	2c2b      	cmp	r4, #43	; 0x2b
 8005748:	bf08      	it	eq
 800574a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800574e:	46a8      	mov	r8, r5
 8005750:	bf08      	it	eq
 8005752:	f100 0c02 	addeq.w	ip, r0, #2
 8005756:	e7c7      	b.n	80056e8 <_strtoul_l.isra.0+0x28>
 8005758:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800575c:	2e19      	cmp	r6, #25
 800575e:	d801      	bhi.n	8005764 <_strtoul_l.isra.0+0xa4>
 8005760:	3c37      	subs	r4, #55	; 0x37
 8005762:	e7e1      	b.n	8005728 <_strtoul_l.isra.0+0x68>
 8005764:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005768:	2e19      	cmp	r6, #25
 800576a:	d804      	bhi.n	8005776 <_strtoul_l.isra.0+0xb6>
 800576c:	3c57      	subs	r4, #87	; 0x57
 800576e:	e7db      	b.n	8005728 <_strtoul_l.isra.0+0x68>
 8005770:	f04f 35ff 	mov.w	r5, #4294967295
 8005774:	e7e4      	b.n	8005740 <_strtoul_l.isra.0+0x80>
 8005776:	2d00      	cmp	r5, #0
 8005778:	da07      	bge.n	800578a <_strtoul_l.isra.0+0xca>
 800577a:	2322      	movs	r3, #34	; 0x22
 800577c:	f8ce 3000 	str.w	r3, [lr]
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	b942      	cbnz	r2, 8005798 <_strtoul_l.isra.0+0xd8>
 8005786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800578a:	f1b8 0f00 	cmp.w	r8, #0
 800578e:	d000      	beq.n	8005792 <_strtoul_l.isra.0+0xd2>
 8005790:	4240      	negs	r0, r0
 8005792:	2a00      	cmp	r2, #0
 8005794:	d0f7      	beq.n	8005786 <_strtoul_l.isra.0+0xc6>
 8005796:	b10d      	cbz	r5, 800579c <_strtoul_l.isra.0+0xdc>
 8005798:	f10c 31ff 	add.w	r1, ip, #4294967295
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	e7f2      	b.n	8005786 <_strtoul_l.isra.0+0xc6>
 80057a0:	2430      	movs	r4, #48	; 0x30
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1b1      	bne.n	800570a <_strtoul_l.isra.0+0x4a>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e7af      	b.n	800570a <_strtoul_l.isra.0+0x4a>
 80057aa:	2c30      	cmp	r4, #48	; 0x30
 80057ac:	d0a2      	beq.n	80056f4 <_strtoul_l.isra.0+0x34>
 80057ae:	230a      	movs	r3, #10
 80057b0:	e7ab      	b.n	800570a <_strtoul_l.isra.0+0x4a>
 80057b2:	bf00      	nop
 80057b4:	08005edf 	.word	0x08005edf

080057b8 <_strtoul_r>:
 80057b8:	f7ff bf82 	b.w	80056c0 <_strtoul_l.isra.0>

080057bc <__submore>:
 80057bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c0:	460c      	mov	r4, r1
 80057c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057c8:	4299      	cmp	r1, r3
 80057ca:	d11d      	bne.n	8005808 <__submore+0x4c>
 80057cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057d0:	f000 f8a8 	bl	8005924 <_malloc_r>
 80057d4:	b918      	cbnz	r0, 80057de <__submore+0x22>
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80057e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80057e8:	6360      	str	r0, [r4, #52]	; 0x34
 80057ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80057ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80057f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80057fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80057fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005802:	6020      	str	r0, [r4, #0]
 8005804:	2000      	movs	r0, #0
 8005806:	e7e8      	b.n	80057da <__submore+0x1e>
 8005808:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800580a:	0077      	lsls	r7, r6, #1
 800580c:	463a      	mov	r2, r7
 800580e:	f000 f8e3 	bl	80059d8 <_realloc_r>
 8005812:	4605      	mov	r5, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d0de      	beq.n	80057d6 <__submore+0x1a>
 8005818:	eb00 0806 	add.w	r8, r0, r6
 800581c:	4601      	mov	r1, r0
 800581e:	4632      	mov	r2, r6
 8005820:	4640      	mov	r0, r8
 8005822:	f000 f807 	bl	8005834 <memcpy>
 8005826:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800582a:	f8c4 8000 	str.w	r8, [r4]
 800582e:	e7e9      	b.n	8005804 <__submore+0x48>

08005830 <__retarget_lock_acquire_recursive>:
 8005830:	4770      	bx	lr

08005832 <__retarget_lock_release_recursive>:
 8005832:	4770      	bx	lr

08005834 <memcpy>:
 8005834:	440a      	add	r2, r1
 8005836:	4291      	cmp	r1, r2
 8005838:	f100 33ff 	add.w	r3, r0, #4294967295
 800583c:	d100      	bne.n	8005840 <memcpy+0xc>
 800583e:	4770      	bx	lr
 8005840:	b510      	push	{r4, lr}
 8005842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584a:	4291      	cmp	r1, r2
 800584c:	d1f9      	bne.n	8005842 <memcpy+0xe>
 800584e:	bd10      	pop	{r4, pc}

08005850 <memmove>:
 8005850:	4288      	cmp	r0, r1
 8005852:	b510      	push	{r4, lr}
 8005854:	eb01 0402 	add.w	r4, r1, r2
 8005858:	d902      	bls.n	8005860 <memmove+0x10>
 800585a:	4284      	cmp	r4, r0
 800585c:	4623      	mov	r3, r4
 800585e:	d807      	bhi.n	8005870 <memmove+0x20>
 8005860:	1e43      	subs	r3, r0, #1
 8005862:	42a1      	cmp	r1, r4
 8005864:	d008      	beq.n	8005878 <memmove+0x28>
 8005866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800586e:	e7f8      	b.n	8005862 <memmove+0x12>
 8005870:	4402      	add	r2, r0
 8005872:	4601      	mov	r1, r0
 8005874:	428a      	cmp	r2, r1
 8005876:	d100      	bne.n	800587a <memmove+0x2a>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800587e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005882:	e7f7      	b.n	8005874 <memmove+0x24>

08005884 <_free_r>:
 8005884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005886:	2900      	cmp	r1, #0
 8005888:	d048      	beq.n	800591c <_free_r+0x98>
 800588a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588e:	9001      	str	r0, [sp, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f1a1 0404 	sub.w	r4, r1, #4
 8005896:	bfb8      	it	lt
 8005898:	18e4      	addlt	r4, r4, r3
 800589a:	f000 f8d3 	bl	8005a44 <__malloc_lock>
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <_free_r+0x9c>)
 80058a0:	9801      	ldr	r0, [sp, #4]
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	4615      	mov	r5, r2
 80058a6:	b933      	cbnz	r3, 80058b6 <_free_r+0x32>
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	6014      	str	r4, [r2, #0]
 80058ac:	b003      	add	sp, #12
 80058ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b2:	f000 b8cd 	b.w	8005a50 <__malloc_unlock>
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	d90b      	bls.n	80058d2 <_free_r+0x4e>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	1862      	adds	r2, r4, r1
 80058be:	4293      	cmp	r3, r2
 80058c0:	bf04      	itt	eq
 80058c2:	681a      	ldreq	r2, [r3, #0]
 80058c4:	685b      	ldreq	r3, [r3, #4]
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	bf04      	itt	eq
 80058ca:	1852      	addeq	r2, r2, r1
 80058cc:	6022      	streq	r2, [r4, #0]
 80058ce:	602c      	str	r4, [r5, #0]
 80058d0:	e7ec      	b.n	80058ac <_free_r+0x28>
 80058d2:	461a      	mov	r2, r3
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b10b      	cbz	r3, 80058dc <_free_r+0x58>
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d9fa      	bls.n	80058d2 <_free_r+0x4e>
 80058dc:	6811      	ldr	r1, [r2, #0]
 80058de:	1855      	adds	r5, r2, r1
 80058e0:	42a5      	cmp	r5, r4
 80058e2:	d10b      	bne.n	80058fc <_free_r+0x78>
 80058e4:	6824      	ldr	r4, [r4, #0]
 80058e6:	4421      	add	r1, r4
 80058e8:	1854      	adds	r4, r2, r1
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	d1dd      	bne.n	80058ac <_free_r+0x28>
 80058f0:	681c      	ldr	r4, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	6053      	str	r3, [r2, #4]
 80058f6:	4421      	add	r1, r4
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	e7d7      	b.n	80058ac <_free_r+0x28>
 80058fc:	d902      	bls.n	8005904 <_free_r+0x80>
 80058fe:	230c      	movs	r3, #12
 8005900:	6003      	str	r3, [r0, #0]
 8005902:	e7d3      	b.n	80058ac <_free_r+0x28>
 8005904:	6825      	ldr	r5, [r4, #0]
 8005906:	1961      	adds	r1, r4, r5
 8005908:	428b      	cmp	r3, r1
 800590a:	bf04      	itt	eq
 800590c:	6819      	ldreq	r1, [r3, #0]
 800590e:	685b      	ldreq	r3, [r3, #4]
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	bf04      	itt	eq
 8005914:	1949      	addeq	r1, r1, r5
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	6054      	str	r4, [r2, #4]
 800591a:	e7c7      	b.n	80058ac <_free_r+0x28>
 800591c:	b003      	add	sp, #12
 800591e:	bd30      	pop	{r4, r5, pc}
 8005920:	200000b0 	.word	0x200000b0

08005924 <_malloc_r>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	1ccd      	adds	r5, r1, #3
 8005928:	f025 0503 	bic.w	r5, r5, #3
 800592c:	3508      	adds	r5, #8
 800592e:	2d0c      	cmp	r5, #12
 8005930:	bf38      	it	cc
 8005932:	250c      	movcc	r5, #12
 8005934:	2d00      	cmp	r5, #0
 8005936:	4606      	mov	r6, r0
 8005938:	db01      	blt.n	800593e <_malloc_r+0x1a>
 800593a:	42a9      	cmp	r1, r5
 800593c:	d903      	bls.n	8005946 <_malloc_r+0x22>
 800593e:	230c      	movs	r3, #12
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	2000      	movs	r0, #0
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	f000 f87d 	bl	8005a44 <__malloc_lock>
 800594a:	4921      	ldr	r1, [pc, #132]	; (80059d0 <_malloc_r+0xac>)
 800594c:	680a      	ldr	r2, [r1, #0]
 800594e:	4614      	mov	r4, r2
 8005950:	b99c      	cbnz	r4, 800597a <_malloc_r+0x56>
 8005952:	4f20      	ldr	r7, [pc, #128]	; (80059d4 <_malloc_r+0xb0>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	b923      	cbnz	r3, 8005962 <_malloc_r+0x3e>
 8005958:	4621      	mov	r1, r4
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f862 	bl	8005a24 <_sbrk_r>
 8005960:	6038      	str	r0, [r7, #0]
 8005962:	4629      	mov	r1, r5
 8005964:	4630      	mov	r0, r6
 8005966:	f000 f85d 	bl	8005a24 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d123      	bne.n	80059b6 <_malloc_r+0x92>
 800596e:	230c      	movs	r3, #12
 8005970:	6033      	str	r3, [r6, #0]
 8005972:	4630      	mov	r0, r6
 8005974:	f000 f86c 	bl	8005a50 <__malloc_unlock>
 8005978:	e7e3      	b.n	8005942 <_malloc_r+0x1e>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	1b5b      	subs	r3, r3, r5
 800597e:	d417      	bmi.n	80059b0 <_malloc_r+0x8c>
 8005980:	2b0b      	cmp	r3, #11
 8005982:	d903      	bls.n	800598c <_malloc_r+0x68>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	441c      	add	r4, r3
 8005988:	6025      	str	r5, [r4, #0]
 800598a:	e004      	b.n	8005996 <_malloc_r+0x72>
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	42a2      	cmp	r2, r4
 8005990:	bf0c      	ite	eq
 8005992:	600b      	streq	r3, [r1, #0]
 8005994:	6053      	strne	r3, [r2, #4]
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f85a 	bl	8005a50 <__malloc_unlock>
 800599c:	f104 000b 	add.w	r0, r4, #11
 80059a0:	1d23      	adds	r3, r4, #4
 80059a2:	f020 0007 	bic.w	r0, r0, #7
 80059a6:	1ac2      	subs	r2, r0, r3
 80059a8:	d0cc      	beq.n	8005944 <_malloc_r+0x20>
 80059aa:	1a1b      	subs	r3, r3, r0
 80059ac:	50a3      	str	r3, [r4, r2]
 80059ae:	e7c9      	b.n	8005944 <_malloc_r+0x20>
 80059b0:	4622      	mov	r2, r4
 80059b2:	6864      	ldr	r4, [r4, #4]
 80059b4:	e7cc      	b.n	8005950 <_malloc_r+0x2c>
 80059b6:	1cc4      	adds	r4, r0, #3
 80059b8:	f024 0403 	bic.w	r4, r4, #3
 80059bc:	42a0      	cmp	r0, r4
 80059be:	d0e3      	beq.n	8005988 <_malloc_r+0x64>
 80059c0:	1a21      	subs	r1, r4, r0
 80059c2:	4630      	mov	r0, r6
 80059c4:	f000 f82e 	bl	8005a24 <_sbrk_r>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d1dd      	bne.n	8005988 <_malloc_r+0x64>
 80059cc:	e7cf      	b.n	800596e <_malloc_r+0x4a>
 80059ce:	bf00      	nop
 80059d0:	200000b0 	.word	0x200000b0
 80059d4:	200000b4 	.word	0x200000b4

080059d8 <_realloc_r>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	4607      	mov	r7, r0
 80059dc:	4614      	mov	r4, r2
 80059de:	460e      	mov	r6, r1
 80059e0:	b921      	cbnz	r1, 80059ec <_realloc_r+0x14>
 80059e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059e6:	4611      	mov	r1, r2
 80059e8:	f7ff bf9c 	b.w	8005924 <_malloc_r>
 80059ec:	b922      	cbnz	r2, 80059f8 <_realloc_r+0x20>
 80059ee:	f7ff ff49 	bl	8005884 <_free_r>
 80059f2:	4625      	mov	r5, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f8:	f000 f830 	bl	8005a5c <_malloc_usable_size_r>
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d20f      	bcs.n	8005a20 <_realloc_r+0x48>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4638      	mov	r0, r7
 8005a04:	f7ff ff8e 	bl	8005924 <_malloc_r>
 8005a08:	4605      	mov	r5, r0
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0f2      	beq.n	80059f4 <_realloc_r+0x1c>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4622      	mov	r2, r4
 8005a12:	f7ff ff0f 	bl	8005834 <memcpy>
 8005a16:	4631      	mov	r1, r6
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f7ff ff33 	bl	8005884 <_free_r>
 8005a1e:	e7e9      	b.n	80059f4 <_realloc_r+0x1c>
 8005a20:	4635      	mov	r5, r6
 8005a22:	e7e7      	b.n	80059f4 <_realloc_r+0x1c>

08005a24 <_sbrk_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d06      	ldr	r5, [pc, #24]	; (8005a40 <_sbrk_r+0x1c>)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	f7fb fc32 	bl	8001298 <_sbrk>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_sbrk_r+0x1a>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_sbrk_r+0x1a>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20010250 	.word	0x20010250

08005a44 <__malloc_lock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_lock+0x8>)
 8005a46:	f7ff bef3 	b.w	8005830 <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20010258 	.word	0x20010258

08005a50 <__malloc_unlock>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__malloc_unlock+0x8>)
 8005a52:	f7ff beee 	b.w	8005832 <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20010258 	.word	0x20010258

08005a5c <_malloc_usable_size_r>:
 8005a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a60:	1f18      	subs	r0, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfbc      	itt	lt
 8005a66:	580b      	ldrlt	r3, [r1, r0]
 8005a68:	18c0      	addlt	r0, r0, r3
 8005a6a:	4770      	bx	lr

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
