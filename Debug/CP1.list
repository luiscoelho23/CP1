
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  0800b4d0  0800b4d0  0001b4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0e4  0800c0e4  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ec  0800c0ec  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ec  0800c0ec  0001c0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0f0  0800c0f0  0001c0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800c0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010670  20000234  0800c328  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200108a4  0800c328  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192f4  00000000  00000000  00020262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316f  00000000  00000000  00039556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a626  00000000  00000000  0003e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016738  00000000  00000000  00068e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102832  00000000  00000000  0007f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d30  00000000  00000000  00181dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000234 	.word	0x20000234
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b4b4 	.word	0x0800b4b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000238 	.word	0x20000238
 800023c:	0800b4b4 	.word	0x0800b4b4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC3_Init 1 */
  if(!software)
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_ADC3_Init+0xb4>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	f083 0301 	eor.w	r3, r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <MX_ADC3_Init+0x2a>
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a12:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
 8000a18:	e002      	b.n	8000a20 <MX_ADC3_Init+0x30>
  else
	  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_ADC3_Init+0xbc>)
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <MX_ADC3_Init+0xc0>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a2c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a6c:	f001 fdd6 	bl	800261c <HAL_ADC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000a76:	f001 f9df 	bl	8001e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MX_ADC3_Init+0xb8>)
 8000a8c:	f002 f852 	bl	8002b34 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8000a96:	f001 f9cf 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000265 	.word	0x20000265
 8000aa8:	2000026c 	.word	0x2000026c
 8000aac:	0f000001 	.word	0x0f000001
 8000ab0:	40012200 	.word	0x40012200

08000ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <HAL_ADC_MspInit+0xe4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d15c      	bne.n	8000b90 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a24      	ldr	r2, [pc, #144]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_ADC_MspInit+0xe8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b36:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000b3a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <HAL_ADC_MspInit+0xec>)
 8000b4c:	f002 fbf0 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b50:	230f      	movs	r3, #15
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <HAL_ADC_MspInit+0xf0>)
 8000b64:	f002 fbe4 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_ADC_MspInit+0xf4>)
 8000b7c:	f002 fbd8 	bl	8003330 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2012      	movs	r0, #18
 8000b86:	f002 fb0a 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b8a:	2012      	movs	r0, #18
 8000b8c:	f002 fb23 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40012200 	.word	0x40012200
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40021400 	.word	0x40021400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000

08000bac <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <config_ADC+0x38>)
 8000bd6:	f001 ffad 	bl	8002b34 <HAL_ADC_ConfigChannel>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000026c 	.word	0x2000026c

08000be8 <read_ADC>:

uint32_t read_ADC(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	Read = false;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <read_ADC+0x34>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <read_ADC+0x38>)
 8000bf4:	f001 fd56 	bl	80026a4 <HAL_ADC_Start_IT>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10a      	bne.n	8000c14 <read_ADC+0x2c>
	{
	  while(!Read);
 8000bfe:	bf00      	nop
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <read_ADC+0x34>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f8      	bne.n	8000c00 <read_ADC+0x18>
	  HAL_ADC_Stop_IT(&hadc3);
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <read_ADC+0x38>)
 8000c10:	f001 fe20 	bl	8002854 <HAL_ADC_Stop_IT>
	}
	return adc_value;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <read_ADC+0x3c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000264 	.word	0x20000264
 8000c20:	2000026c 	.word	0x2000026c
 8000c24:	20000268 	.word	0x20000268

08000c28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
		if(!software)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f083 0301 	eor.w	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d012      	beq.n	8000c64 <HAL_ADC_ConvCpltCallback+0x3c>
		{
			adc_buf[adc_buf_index++] = HAL_ADC_GetValue(&hadc3);
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c40:	681c      	ldr	r4, [r3, #0]
 8000c42:	1c63      	adds	r3, r4, #1
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c4a:	f001 ff51 	bl	8002af0 <HAL_ADC_GetValue>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x64>)
 8000c52:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			adc_buf_index &= ADC_BUF_SIZE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c60:	6013      	str	r3, [r2, #0]
		else
		{
			adc_value = HAL_ADC_GetValue(&hadc3);
			Read = true;
		}
}
 8000c62:	e008      	b.n	8000c76 <HAL_ADC_ConvCpltCallback+0x4e>
			adc_value = HAL_ADC_GetValue(&hadc3);
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c66:	f001 ff43 	bl	8002af0 <HAL_ADC_GetValue>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c6e:	6013      	str	r3, [r2, #0]
			Read = true;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000265 	.word	0x20000265
 8000c84:	20000250 	.word	0x20000250
 8000c88:	2000026c 	.word	0x2000026c
 8000c8c:	200002b4 	.word	0x200002b4
 8000c90:	20000268 	.word	0x20000268
 8000c94:	20000264 	.word	0x20000264

08000c98 <check_command>:
#include "commands.h"

struct sp_config_t sp_config = {1,1,"s",false};

unsigned char check_command(char* message)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	char cmd = INV;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	4971      	ldr	r1, [pc, #452]	; (8000e6c <check_command+0x1d4>)
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f006 fb3e 	bl	800732a <strncmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	496a      	ldr	r1, [pc, #424]	; (8000e70 <check_command+0x1d8>)
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f006 fb2f 	bl	800732a <strncmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <check_command+0x3e>
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	e000      	b.n	8000cd8 <check_command+0x40>
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	4413      	add	r3, r2
 8000cdc:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4964      	ldr	r1, [pc, #400]	; (8000e74 <check_command+0x1dc>)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f006 fb21 	bl	800732a <strncmp>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <check_command+0x5a>
 8000cee:	2203      	movs	r2, #3
 8000cf0:	e000      	b.n	8000cf4 <check_command+0x5c>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	495e      	ldr	r1, [pc, #376]	; (8000e78 <check_command+0x1e0>)
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f006 fb13 	bl	800732a <strncmp>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <check_command+0x76>
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	e000      	b.n	8000d10 <check_command+0x78>
 8000d0e:	2200      	movs	r2, #0
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	4413      	add	r3, r2
 8000d14:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000d16:	2202      	movs	r2, #2
 8000d18:	4958      	ldr	r1, [pc, #352]	; (8000e7c <check_command+0x1e4>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f006 fb05 	bl	800732a <strncmp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <check_command+0x92>
 8000d26:	2205      	movs	r2, #5
 8000d28:	e000      	b.n	8000d2c <check_command+0x94>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	4413      	add	r3, r2
 8000d30:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000d32:	2202      	movs	r2, #2
 8000d34:	4952      	ldr	r1, [pc, #328]	; (8000e80 <check_command+0x1e8>)
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f006 faf7 	bl	800732a <strncmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <check_command+0xae>
 8000d42:	2206      	movs	r2, #6
 8000d44:	e000      	b.n	8000d48 <check_command+0xb0>
 8000d46:	2200      	movs	r2, #0
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000d4e:	2202      	movs	r2, #2
 8000d50:	494c      	ldr	r1, [pc, #304]	; (8000e84 <check_command+0x1ec>)
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f006 fae9 	bl	800732a <strncmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <check_command+0xca>
 8000d5e:	2207      	movs	r2, #7
 8000d60:	e000      	b.n	8000d64 <check_command+0xcc>
 8000d62:	2200      	movs	r2, #0
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	4413      	add	r3, r2
 8000d68:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <check_command+0x1f0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <check_command+0xe4>
 8000d78:	2208      	movs	r2, #8
 8000d7a:	e000      	b.n	8000d7e <check_command+0xe6>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4413      	add	r3, r2
 8000d82:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <check_command+0x1f4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <check_command+0xfe>
 8000d92:	2209      	movs	r2, #9
 8000d94:	e000      	b.n	8000d98 <check_command+0x100>
 8000d96:	2200      	movs	r2, #0
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000d9e:	2203      	movs	r2, #3
 8000da0:	493b      	ldr	r1, [pc, #236]	; (8000e90 <check_command+0x1f8>)
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f006 fac1 	bl	800732a <strncmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <check_command+0x11a>
 8000dae:	220a      	movs	r2, #10
 8000db0:	e000      	b.n	8000db4 <check_command+0x11c>
 8000db2:	2200      	movs	r2, #0
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	4413      	add	r3, r2
 8000db8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "SP", 2)) * SP;
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <check_command+0x1fc>)
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f006 fab3 	bl	800732a <strncmp>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <check_command+0x136>
 8000dca:	220b      	movs	r2, #11
 8000dcc:	e000      	b.n	8000dd0 <check_command+0x138>
 8000dce:	2200      	movs	r2, #0
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "AC", 2)) * AC;
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	492f      	ldr	r1, [pc, #188]	; (8000e98 <check_command+0x200>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f006 faa5 	bl	800732a <strncmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <check_command+0x152>
 8000de6:	220c      	movs	r2, #12
 8000de8:	e000      	b.n	8000dec <check_command+0x154>
 8000dea:	2200      	movs	r2, #0
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	4413      	add	r3, r2
 8000df0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FN", 2)) * FN;
 8000df2:	2202      	movs	r2, #2
 8000df4:	4929      	ldr	r1, [pc, #164]	; (8000e9c <check_command+0x204>)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f006 fa97 	bl	800732a <strncmp>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <check_command+0x16e>
 8000e02:	220d      	movs	r2, #13
 8000e04:	e000      	b.n	8000e08 <check_command+0x170>
 8000e06:	2200      	movs	r2, #0
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FF", 2)) * FF;
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4923      	ldr	r1, [pc, #140]	; (8000ea0 <check_command+0x208>)
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f006 fa89 	bl	800732a <strncmp>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <check_command+0x18a>
 8000e1e:	220e      	movs	r2, #14
 8000e20:	e000      	b.n	8000e24 <check_command+0x18c>
 8000e22:	2200      	movs	r2, #0
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4413      	add	r3, r2
 8000e28:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S", 1)) * S;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <check_command+0x20c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <check_command+0x1a4>
 8000e38:	220f      	movs	r2, #15
 8000e3a:	e000      	b.n	8000e3e <check_command+0x1a6>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	4413      	add	r3, r2
 8000e42:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "ST", 2)) * ST;
 8000e44:	2202      	movs	r2, #2
 8000e46:	4918      	ldr	r1, [pc, #96]	; (8000ea8 <check_command+0x210>)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f006 fa6e 	bl	800732a <strncmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <check_command+0x1c0>
 8000e54:	2210      	movs	r2, #16
 8000e56:	e000      	b.n	8000e5a <check_command+0x1c2>
 8000e58:	2200      	movs	r2, #0
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800b4d4 	.word	0x0800b4d4
 8000e70:	0800b4d8 	.word	0x0800b4d8
 8000e74:	0800b4dc 	.word	0x0800b4dc
 8000e78:	0800b4e0 	.word	0x0800b4e0
 8000e7c:	0800b4e4 	.word	0x0800b4e4
 8000e80:	0800b4e8 	.word	0x0800b4e8
 8000e84:	0800b4ec 	.word	0x0800b4ec
 8000e88:	0800b4f0 	.word	0x0800b4f0
 8000e8c:	0800b4f4 	.word	0x0800b4f4
 8000e90:	0800b4f8 	.word	0x0800b4f8
 8000e94:	0800b4fc 	.word	0x0800b4fc
 8000e98:	0800b500 	.word	0x0800b500
 8000e9c:	0800b504 	.word	0x0800b504
 8000ea0:	0800b508 	.word	0x0800b508
 8000ea4:	0800b50c 	.word	0x0800b50c
 8000ea8:	0800b510 	.word	0x0800b510

08000eac <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <proc_inv_cmd+0x18>)
 8000eb6:	f001 fa37 	bl	8002328 <send_UART>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800b514 	.word	0x0800b514

08000ec8 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	f107 0210 	add.w	r2, r7, #16
 8000ed8:	4932      	ldr	r1, [pc, #200]	; (8000fa4 <proc_mr_cmd+0xdc>)
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f006 f9b4 	bl	8007248 <siscanf>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d157      	bne.n	8000f96 <proc_mr_cmd+0xce>
	{
 8000ee6:	466b      	mov	r3, sp
 8000ee8:	461d      	mov	r5, r3
		char data[length];
 8000eea:	68fc      	ldr	r4, [r7, #12]
 8000eec:	4623      	mov	r3, r4
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f04f 0100 	mov.w	r1, #0
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	00cb      	lsls	r3, r1, #3
 8000f02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f06:	00c2      	lsls	r2, r0, #3
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f04f 0100 	mov.w	r1, #0
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	00cb      	lsls	r3, r1, #3
 8000f18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f1c:	00c2      	lsls	r2, r0, #3
 8000f1e:	1de3      	adds	r3, r4, #7
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	ebad 0d03 	sub.w	sp, sp, r3
 8000f28:	466b      	mov	r3, sp
 8000f2a:	3300      	adds	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	68f9      	ldr	r1, [r7, #12]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fbb3 	bl	80016a0 <memory_read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d025      	beq.n	8000f8c <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <proc_mr_cmd+0xe0>)
 8000f48:	f006 fa01 	bl	800734e <strncpy>

			sprintf((char*) message, "Memory read: ");
 8000f4c:	4917      	ldr	r1, [pc, #92]	; (8000fac <proc_mr_cmd+0xe4>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f006 f95a 	bl	8007208 <siprintf>

			for(int i = 0; i < length; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	e010      	b.n	8000f7c <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f97a 	bl	8000254 <strlen>
 8000f60:	4602      	mov	r2, r0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1898      	adds	r0, r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	490f      	ldr	r1, [pc, #60]	; (8000fb0 <proc_mr_cmd+0xe8>)
 8000f72:	f006 f949 	bl	8007208 <siprintf>
			for(int i = 0; i < length; i++)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3ea      	bcc.n	8000f5a <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 f9cf 	bl	8002328 <send_UART>
 8000f8a:	e002      	b.n	8000f92 <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <proc_mr_cmd+0xec>)
 8000f8e:	f001 f9cb 	bl	8002328 <send_UART>
 8000f92:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 8000f94:	e002      	b.n	8000f9c <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <proc_mr_cmd+0xf0>)
 8000f98:	f001 f9c6 	bl	8002328 <send_UART>
}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa4:	0800b53c 	.word	0x0800b53c
 8000fa8:	200106b8 	.word	0x200106b8
 8000fac:	0800b548 	.word	0x0800b548
 8000fb0:	0800b558 	.word	0x0800b558
 8000fb4:	0800b560 	.word	0x0800b560
 8000fb8:	0800b594 	.word	0x0800b594

08000fbc <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8000fc4:	f107 0110 	add.w	r1, r7, #16
 8000fc8:	f107 0214 	add.w	r2, r7, #20
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4912      	ldr	r1, [pc, #72]	; (8001020 <proc_mw_cmd+0x64>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f006 f936 	bl	8007248 <siscanf>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d116      	bne.n	8001010 <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fb8d 	bl	8001708 <memory_write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <proc_mw_cmd+0x68>)
 8000ffc:	f006 f9a7 	bl	800734e <strncpy>
			send_UART("Memory written with success.");
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <proc_mw_cmd+0x6c>)
 8001002:	f001 f991 	bl	8002328 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8001006:	e006      	b.n	8001016 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <proc_mw_cmd+0x70>)
 800100a:	f001 f98d 	bl	8002328 <send_UART>
}
 800100e:	e002      	b.n	8001016 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <proc_mw_cmd+0x74>)
 8001012:	f001 f989 	bl	8002328 <send_UART>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800b5bc 	.word	0x0800b5bc
 8001024:	200106b8 	.word	0x200106b8
 8001028:	0800b5c8 	.word	0x0800b5c8
 800102c:	0800b5e8 	.word	0x0800b5e8
 8001030:	0800b61c 	.word	0x0800b61c

08001034 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	4918      	ldr	r1, [pc, #96]	; (80010a8 <proc_mi_cmd+0x74>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f006 f8fe 	bl	8007248 <siscanf>
 800104c:	4603      	mov	r3, r0
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fde7 	bl	8001c2c <is_GPIO_pin_free>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d016      	beq.n	8001092 <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fb84 	bl	8001778 <make_pin_input>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <proc_mi_cmd+0x78>)
 800107e:	f006 f966 	bl	800734e <strncpy>
				send_UART("Pin(s) set as input with success.");
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <proc_mi_cmd+0x7c>)
 8001084:	f001 f950 	bl	8002328 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 8001088:	e00a      	b.n	80010a0 <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <proc_mi_cmd+0x80>)
 800108c:	f001 f94c 	bl	8002328 <send_UART>
}
 8001090:	e006      	b.n	80010a0 <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <proc_mi_cmd+0x84>)
 8001094:	f001 f948 	bl	8002328 <send_UART>
}
 8001098:	e002      	b.n	80010a0 <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 800109a:	4808      	ldr	r0, [pc, #32]	; (80010bc <proc_mi_cmd+0x88>)
 800109c:	f001 f944 	bl	8002328 <send_UART>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0800b648 	.word	0x0800b648
 80010ac:	200106b8 	.word	0x200106b8
 80010b0:	0800b654 	.word	0x0800b654
 80010b4:	0800b678 	.word	0x0800b678
 80010b8:	0800b6ac 	.word	0x0800b6ac
 80010bc:	0800b6e4 	.word	0x0800b6e4

080010c0 <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	4918      	ldr	r1, [pc, #96]	; (8001134 <proc_mo_cmd+0x74>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f006 f8b8 	bl	8007248 <siscanf>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fda1 	bl	8001c2c <is_GPIO_pin_free>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d016      	beq.n	800111e <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fbda 	bl	80018b0 <make_pin_output>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <proc_mo_cmd+0x78>)
 800110a:	f006 f920 	bl	800734e <strncpy>
				send_UART("Pin(s) set as output with success.");
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <proc_mo_cmd+0x7c>)
 8001110:	f001 f90a 	bl	8002328 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8001114:	e00a      	b.n	800112c <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <proc_mo_cmd+0x80>)
 8001118:	f001 f906 	bl	8002328 <send_UART>
}
 800111c:	e006      	b.n	800112c <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <proc_mo_cmd+0x84>)
 8001120:	f001 f902 	bl	8002328 <send_UART>
}
 8001124:	e002      	b.n	800112c <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <proc_mo_cmd+0x88>)
 8001128:	f001 f8fe 	bl	8002328 <send_UART>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800b710 	.word	0x0800b710
 8001138:	200106b8 	.word	0x200106b8
 800113c:	0800b71c 	.word	0x0800b71c
 8001140:	0800b740 	.word	0x0800b740
 8001144:	0800b6ac 	.word	0x0800b6ac
 8001148:	0800b778 	.word	0x0800b778

0800114c <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	f107 0220 	add.w	r2, r7, #32
 800115c:	492a      	ldr	r1, [pc, #168]	; (8001208 <proc_rd_cmd+0xbc>)
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f006 f872 	bl	8007248 <siscanf>
 8001164:	4603      	mov	r3, r0
 8001166:	2b02      	cmp	r3, #2
 8001168:	d147      	bne.n	80011fa <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	69f9      	ldr	r1, [r7, #28]
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fc3a 	bl	80019ec <read_dig_input>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d039      	beq.n	80011f2 <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800117e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <proc_rd_cmd+0xc0>)
 8001186:	f006 f8e2 	bl	800734e <strncpy>

			sprintf((char*) message, "Digital input read: ");
 800118a:	4921      	ldr	r1, [pc, #132]	; (8001210 <proc_rd_cmd+0xc4>)
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f006 f83b 	bl	8007208 <siprintf>

			for(int i = 15; i >= 0; i--)
 8001192:	230f      	movs	r3, #15
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	e025      	b.n	80011e4 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff f85b 	bl	8000254 <strlen>
 800119e:	4602      	mov	r2, r0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1898      	adds	r0, r3, r2
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4918      	ldr	r1, [pc, #96]	; (8001214 <proc_rd_cmd+0xc8>)
 80011b2:	f006 f829 	bl	8007208 <siprintf>

				if(!(i % 4) && i)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10e      	bne.n	80011de <proc_rd_cmd+0x92>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f844 	bl	8000254 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	4910      	ldr	r1, [pc, #64]	; (8001218 <proc_rd_cmd+0xcc>)
 80011d6:	461a      	mov	r2, r3
 80011d8:	460b      	mov	r3, r1
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3b01      	subs	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dad6      	bge.n	8001198 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f001 f89c 	bl	8002328 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 80011f0:	e006      	b.n	8001200 <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <proc_rd_cmd+0xd0>)
 80011f4:	f001 f898 	bl	8002328 <send_UART>
}
 80011f8:	e002      	b.n	8001200 <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <proc_rd_cmd+0xd4>)
 80011fc:	f001 f894 	bl	8002328 <send_UART>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	0800b7a4 	.word	0x0800b7a4
 800120c:	200106b8 	.word	0x200106b8
 8001210:	0800b7b0 	.word	0x0800b7b0
 8001214:	0800b7c8 	.word	0x0800b7c8
 8001218:	0800b7cc 	.word	0x0800b7cc
 800121c:	0800b7d0 	.word	0x0800b7d0
 8001220:	0800b808 	.word	0x0800b808

08001224 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 800122c:	f107 0110 	add.w	r1, r7, #16
 8001230:	f107 0214 	add.w	r2, r7, #20
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	460b      	mov	r3, r1
 800123c:	4918      	ldr	r1, [pc, #96]	; (80012a0 <proc_wd_cmd+0x7c>)
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f006 f802 	bl	8007248 <siscanf>
 8001244:	4603      	mov	r3, r0
 8001246:	2b03      	cmp	r3, #3
 8001248:	d123      	bne.n	8001292 <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fceb 	bl	8001c2c <is_GPIO_pin_free>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d016      	beq.n	800128a <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	6939      	ldr	r1, [r7, #16]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fc0c 	bl	8001a80 <write_dig_output>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <proc_wd_cmd+0x80>)
 8001276:	f006 f86a 	bl	800734e <strncpy>
				send_UART("Digital output value wrote with success.");
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <proc_wd_cmd+0x84>)
 800127c:	f001 f854 	bl	8002328 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 8001280:	e00a      	b.n	8001298 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <proc_wd_cmd+0x88>)
 8001284:	f001 f850 	bl	8002328 <send_UART>
}
 8001288:	e006      	b.n	8001298 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <proc_wd_cmd+0x8c>)
 800128c:	f001 f84c 	bl	8002328 <send_UART>
}
 8001290:	e002      	b.n	8001298 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <proc_wd_cmd+0x90>)
 8001294:	f001 f848 	bl	8002328 <send_UART>
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800b838 	.word	0x0800b838
 80012a4:	200106b8 	.word	0x200106b8
 80012a8:	0800b844 	.word	0x0800b844
 80012ac:	0800b870 	.word	0x0800b870
 80012b0:	0800b6ac 	.word	0x0800b6ac
 80012b4:	0800b8ac 	.word	0x0800b8ac

080012b8 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	461a      	mov	r2, r3
 80012c6:	492c      	ldr	r1, [pc, #176]	; (8001378 <proc_ra_cmd+0xc0>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f005 ffbd 	bl	8007248 <siscanf>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d13f      	bne.n	8001354 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc19 	bl	8001b14 <analog_read>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d031      	beq.n	800134c <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80012e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4823      	ldr	r0, [pc, #140]	; (800137c <proc_ra_cmd+0xc4>)
 80012f0:	f006 f82d 	bl	800734e <strncpy>

			float volts = (float) value * 3.3 / 4095;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001302:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001368 <proc_ra_cmd+0xb0>
 8001306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800130a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001370 <proc_ra_cmd+0xb8>
 800130e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001316:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800131a:	4919      	ldr	r1, [pc, #100]	; (8001380 <proc_ra_cmd+0xc8>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f005 ff73 	bl	8007208 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7fe ff96 	bl	8000254 <strlen>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	edd7 7a05 	vldr	s15, [r7, #20]
 8001334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001338:	ed8d 7b00 	vstr	d7, [sp]
 800133c:	4911      	ldr	r1, [pc, #68]	; (8001384 <proc_ra_cmd+0xcc>)
 800133e:	4618      	mov	r0, r3
 8001340:	f005 ff62 	bl	8007208 <siprintf>

			send_UART((char*) message);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 ffef 	bl	8002328 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 800134a:	e006      	b.n	800135a <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <proc_ra_cmd+0xd0>)
 800134e:	f000 ffeb 	bl	8002328 <send_UART>
}
 8001352:	e002      	b.n	800135a <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <proc_ra_cmd+0xd4>)
 8001356:	f000 ffe7 	bl	8002328 <send_UART>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	66666666 	.word	0x66666666
 800136c:	400a6666 	.word	0x400a6666
 8001370:	00000000 	.word	0x00000000
 8001374:	40affe00 	.word	0x40affe00
 8001378:	0800b8e0 	.word	0x0800b8e0
 800137c:	200106b8 	.word	0x200106b8
 8001380:	0800b8e8 	.word	0x0800b8e8
 8001384:	0800b904 	.word	0x0800b904
 8001388:	0800b910 	.word	0x0800b910
 800138c:	0800b944 	.word	0x0800b944

08001390 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0c4      	sub	sp, #272	; 0x110
 8001394:	af00      	add	r7, sp, #0
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b0d      	cmp	r3, #13
 80013a4:	d12a      	bne.n	80013fc <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013ac:	e010      	b.n	80013d0 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <proc_last_cmd+0x7c>)
 80013b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013b4:	4413      	add	r3, r2
 80013b6:	7819      	ldrb	r1, [r3, #0]
 80013b8:	f107 0208 	add.w	r2, r7, #8
 80013bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013c0:	4413      	add	r3, r2
 80013c2:	460a      	mov	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 80013c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013d4:	2bff      	cmp	r3, #255	; 0xff
 80013d6:	ddea      	ble.n	80013ae <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fc5b 	bl	8000c98 <check_command>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 80013e8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <proc_last_cmd+0x80>)
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	4610      	mov	r0, r2
 80013f8:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80013fa:	e002      	b.n	8001402 <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <proc_last_cmd+0x84>)
 80013fe:	f000 ff93 	bl	8002328 <send_UART>
}
 8001402:	bf00      	nop
 8001404:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200106b8 	.word	0x200106b8
 8001410:	20000000 	.word	0x20000000
 8001414:	0800b96c 	.word	0x0800b96c

08001418 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b0d      	cmp	r3, #13
 8001428:	d109      	bne.n	800143e <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800142a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <proc_help_cmd+0x34>)
 8001432:	f005 ff8c 	bl	800734e <strncpy>

		send_UART("MR <addr> <length>\n\r"
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <proc_help_cmd+0x38>)
 8001438:	f000 ff76 	bl	8002328 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 800143c:	e002      	b.n	8001444 <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <proc_help_cmd+0x3c>)
 8001440:	f000 ff72 	bl	8002328 <send_UART>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200106b8 	.word	0x200106b8
 8001450:	0800b98c 	.word	0x0800b98c
 8001454:	0800ba48 	.word	0x0800ba48

08001458 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3303      	adds	r3, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b0d      	cmp	r3, #13
 8001468:	d113      	bne.n	8001492 <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <proc_ver_cmd+0x48>)
 8001472:	f005 ff6c 	bl	800734e <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <proc_ver_cmd+0x4c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <proc_ver_cmd+0x4c>)
 800147e:	600a      	str	r2, [r1, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4909      	ldr	r1, [pc, #36]	; (80014a8 <proc_ver_cmd+0x50>)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f005 febf 	bl	8007208 <siprintf>
		send_UART((char*) message);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 ff4c 	bl	8002328 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001490:	e002      	b.n	8001498 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <proc_ver_cmd+0x54>)
 8001494:	f000 ff48 	bl	8002328 <send_UART>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200106b8 	.word	0x200106b8
 80014a4:	20000254 	.word	0x20000254
 80014a8:	0800ba68 	.word	0x0800ba68
 80014ac:	0800ba9c 	.word	0x0800ba9c

080014b0 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "SP %s %x", timeunit, &unit) == 2)
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	f107 0208 	add.w	r2, r7, #8
 80014c0:	491a      	ldr	r1, [pc, #104]	; (800152c <proc_sp_cmd+0x7c>)
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fec0 	bl	8007248 <siscanf>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d126      	bne.n	800151c <proc_sp_cmd+0x6c>
		{
			if(!strcmp(timeunit,"ms") == 0 || !strcmp(timeunit,"s") == 0 || !strcmp(timeunit,"us") == 0)
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4917      	ldr	r1, [pc, #92]	; (8001530 <proc_sp_cmd+0x80>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe feb3 	bl	8000240 <strcmp>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <proc_sp_cmd+0x54>
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4913      	ldr	r1, [pc, #76]	; (8001534 <proc_sp_cmd+0x84>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe feaa 	bl	8000240 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <proc_sp_cmd+0x54>
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4910      	ldr	r1, [pc, #64]	; (8001538 <proc_sp_cmd+0x88>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fea1 	bl	8000240 <strcmp>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <proc_sp_cmd+0x64>
			{
				sp_config.timeunit = timeunit;
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <proc_sp_cmd+0x8c>)
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	6093      	str	r3, [r2, #8]
				sp_config.unit = unit;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <proc_sp_cmd+0x8c>)
 8001510:	6053      	str	r3, [r2, #4]
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 8001512:	e006      	b.n	8001522 <proc_sp_cmd+0x72>
				send_UART("Invalid Sample Period instruction argument values.");
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <proc_sp_cmd+0x90>)
 8001516:	f000 ff07 	bl	8002328 <send_UART>
}
 800151a:	e002      	b.n	8001522 <proc_sp_cmd+0x72>
			send_UART("Invalid Sample Period instruction syntax.");
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <proc_sp_cmd+0x94>)
 800151e:	f000 ff03 	bl	8002328 <send_UART>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	0800babc 	.word	0x0800babc
 8001530:	0800bac8 	.word	0x0800bac8
 8001534:	0800b4d0 	.word	0x0800b4d0
 8001538:	0800bacc 	.word	0x0800bacc
 800153c:	20000044 	.word	0x20000044
 8001540:	0800bad0 	.word	0x0800bad0
 8001544:	0800bb04 	.word	0x0800bb04

08001548 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	461a      	mov	r2, r3
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <proc_ac_cmd+0x48>)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f005 fe75 	bl	8007248 <siscanf>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10d      	bne.n	8001580 <proc_ac_cmd+0x38>
	{
		if(addr3 > 0 && addr3 <= 0x0F)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <proc_ac_cmd+0x30>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d803      	bhi.n	8001578 <proc_ac_cmd+0x30>
			sp_config.addr3 = addr3;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <proc_ac_cmd+0x4c>)
 8001574:	6013      	str	r3, [r2, #0]
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 8001576:	e006      	b.n	8001586 <proc_ac_cmd+0x3e>
			send_UART("Invalid Analog Channel instruction argument values.");
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <proc_ac_cmd+0x50>)
 800157a:	f000 fed5 	bl	8002328 <send_UART>
}
 800157e:	e002      	b.n	8001586 <proc_ac_cmd+0x3e>
		send_UART("Invalid Analog Channel instruction syntax.");
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <proc_ac_cmd+0x54>)
 8001582:	f000 fed1 	bl	8002328 <send_UART>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800bb30 	.word	0x0800bb30
 8001594:	20000044 	.word	0x20000044
 8001598:	0800bb38 	.word	0x0800bb38
 800159c:	0800bb6c 	.word	0x0800bb6c

080015a0 <proc_fn_cmd>:

void proc_fn_cmd(char* message)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3302      	adds	r3, #2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b0d      	cmp	r3, #13
 80015b0:	d103      	bne.n	80015ba <proc_fn_cmd+0x1a>
	{
		sp_config.filter = true;
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <proc_fn_cmd+0x28>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	731a      	strb	r2, [r3, #12]
	}
	else
		send_UART("Invalid Filter instruction syntax.");
}
 80015b8:	e002      	b.n	80015c0 <proc_fn_cmd+0x20>
		send_UART("Invalid Filter instruction syntax.");
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <proc_fn_cmd+0x2c>)
 80015bc:	f000 feb4 	bl	8002328 <send_UART>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000044 	.word	0x20000044
 80015cc:	0800bb98 	.word	0x0800bb98

080015d0 <proc_ff_cmd>:

void proc_ff_cmd(char* message)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3302      	adds	r3, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b0d      	cmp	r3, #13
 80015e0:	d103      	bne.n	80015ea <proc_ff_cmd+0x1a>
	{
		sp_config.filter = false;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <proc_ff_cmd+0x28>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	731a      	strb	r2, [r3, #12]
	}
	else
		send_UART("Invalid Filter instruction syntax.");
}
 80015e8:	e002      	b.n	80015f0 <proc_ff_cmd+0x20>
		send_UART("Invalid Filter instruction syntax.");
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <proc_ff_cmd+0x2c>)
 80015ec:	f000 fe9c 	bl	8002328 <send_UART>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000044 	.word	0x20000044
 80015fc:	0800bb98 	.word	0x0800bb98

08001600 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

	unsigned int k_values;

	if(message[1] == '\r')
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0d      	cmp	r3, #13
 8001610:	d10a      	bne.n	8001628 <proc_s_cmd+0x28>
	{
		software = false;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <proc_s_cmd+0x60>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
		MX_ADC3_Init();
 8001618:	f7ff f9ea 	bl	80009f0 <MX_ADC3_Init>
		config_sample();
 800161c:	f000 fa98 	bl	8001b50 <config_sample>
		HAL_TIM_Base_Start_IT(&htim6);
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <proc_s_cmd+0x64>)
 8001622:	f003 f9fd 	bl	8004a20 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim6);
	}
	else
		send_UART("Invalid Filter instruction syntax.");

}
 8001626:	e017      	b.n	8001658 <proc_s_cmd+0x58>
	else if(sscanf((char*)message, "S %x", &k_values) == 1)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	461a      	mov	r2, r3
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <proc_s_cmd+0x68>)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f005 fe09 	bl	8007248 <siscanf>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10a      	bne.n	8001652 <proc_s_cmd+0x52>
		software = false;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <proc_s_cmd+0x60>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
		MX_ADC3_Init();
 8001642:	f7ff f9d5 	bl	80009f0 <MX_ADC3_Init>
		config_sample();
 8001646:	f000 fa83 	bl	8001b50 <config_sample>
		HAL_TIM_Base_Start_IT(&htim6);
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <proc_s_cmd+0x64>)
 800164c:	f003 f9e8 	bl	8004a20 <HAL_TIM_Base_Start_IT>
}
 8001650:	e002      	b.n	8001658 <proc_s_cmd+0x58>
		send_UART("Invalid Filter instruction syntax.");
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <proc_s_cmd+0x6c>)
 8001654:	f000 fe68 	bl	8002328 <send_UART>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000265 	.word	0x20000265
 8001664:	200107c0 	.word	0x200107c0
 8001668:	0800bbbc 	.word	0x0800bbbc
 800166c:	0800bb98 	.word	0x0800bb98

08001670 <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3302      	adds	r3, #2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b0d      	cmp	r3, #13
 8001680:	d103      	bne.n	800168a <proc_st_cmd+0x1a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <proc_st_cmd+0x28>)
 8001684:	f003 fa44 	bl	8004b10 <HAL_TIM_Base_Stop_IT>
	else
		send_UART("Invalid Sample Stop instruction syntax.");
}
 8001688:	e002      	b.n	8001690 <proc_st_cmd+0x20>
		send_UART("Invalid Sample Stop instruction syntax.");
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <proc_st_cmd+0x2c>)
 800168c:	f000 fe4c 	bl	8002328 <send_UART>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200107c0 	.word	0x200107c0
 800169c:	0800bbc4 	.word	0x0800bbc4

080016a0 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d202      	bcs.n	80016ba <memory_read+0x1a>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d901      	bls.n	80016be <memory_read+0x1e>
		return false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e01b      	b.n	80016f6 <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d901      	bls.n	80016ce <memory_read+0x2e>
		return false;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e013      	b.n	80016f6 <memory_read+0x56>

	for(int i = 0; i < length; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e00b      	b.n	80016ec <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	440a      	add	r2, r1
 80016e0:	4908      	ldr	r1, [pc, #32]	; (8001704 <memory_read+0x64>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8ef      	bhi.n	80016d4 <memory_read+0x34>
	}

	return true;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200005b0 	.word	0x200005b0

08001708 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d208      	bcs.n	800172e <memory_write+0x26>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d805      	bhi.n	800172e <memory_write+0x26>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db02      	blt.n	800172e <memory_write+0x26>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	dd01      	ble.n	8001732 <memory_write+0x2a>
		return false;
 800172e:	2300      	movs	r3, #0
 8001730:	e019      	b.n	8001766 <memory_write+0x5e>

	if((0x10000 - addr) < length)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	429a      	cmp	r2, r3
 800173c:	d901      	bls.n	8001742 <memory_write+0x3a>
		return false;
 800173e:	2300      	movs	r3, #0
 8001740:	e011      	b.n	8001766 <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e009      	b.n	800175c <memory_write+0x54>
	{
		memory[addr++] = data;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	b2d1      	uxtb	r1, r2
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <memory_write+0x6c>)
 8001754:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f1      	bhi.n	8001748 <memory_write+0x40>
	}

	return true;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200005b0 	.word	0x200005b0

08001778 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <make_pin_input+0x24>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d806      	bhi.n	800179c <make_pin_input+0x24>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <make_pin_input+0x24>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d301      	bcc.n	80017a0 <make_pin_input+0x28>
		return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e07f      	b.n	80018a0 <make_pin_input+0x128>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b05      	subs	r3, #5
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d85f      	bhi.n	8001868 <make_pin_input+0xf0>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <make_pin_input+0x38>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017cd 	.word	0x080017cd
 80017b4:	08001869 	.word	0x08001869
 80017b8:	080017e7 	.word	0x080017e7
 80017bc:	08001801 	.word	0x08001801
 80017c0:	0800181b 	.word	0x0800181b
 80017c4:	08001835 	.word	0x08001835
 80017c8:	0800184f 	.word	0x0800184f

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <make_pin_input+0x130>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <make_pin_input+0x130>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <make_pin_input+0x130>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	e040      	b.n	8001868 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <make_pin_input+0x130>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <make_pin_input+0x130>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <make_pin_input+0x130>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	e033      	b.n	8001868 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <make_pin_input+0x130>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <make_pin_input+0x130>)
 8001806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <make_pin_input+0x130>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	e026      	b.n	8001868 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <make_pin_input+0x130>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <make_pin_input+0x130>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <make_pin_input+0x130>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	e019      	b.n	8001868 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <make_pin_input+0x130>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <make_pin_input+0x130>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <make_pin_input+0x130>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	e00c      	b.n	8001868 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <make_pin_input+0x130>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <make_pin_input+0x130>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <make_pin_input+0x130>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <make_pin_input+0x134>)
 800188c:	4413      	add	r3, r2
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	461a      	mov	r2, r3
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f001 fd49 	bl	8003330 <HAL_GPIO_Init>

	return true;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	0010007f 	.word	0x0010007f

080018b0 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <make_pin_output+0x24>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d806      	bhi.n	80018d4 <make_pin_output+0x24>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <make_pin_output+0x24>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d301      	bcc.n	80018d8 <make_pin_output+0x28>
		return false;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e081      	b.n	80019dc <make_pin_output+0x12c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b05      	subs	r3, #5
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d85f      	bhi.n	80019a0 <make_pin_output+0xf0>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <make_pin_output+0x38>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	08001905 	.word	0x08001905
 80018ec:	080019a1 	.word	0x080019a1
 80018f0:	0800191f 	.word	0x0800191f
 80018f4:	08001939 	.word	0x08001939
 80018f8:	08001953 	.word	0x08001953
 80018fc:	0800196d 	.word	0x0800196d
 8001900:	08001987 	.word	0x08001987

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <make_pin_output+0x134>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a36      	ldr	r2, [pc, #216]	; (80019e4 <make_pin_output+0x134>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <make_pin_output+0x134>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	e040      	b.n	80019a0 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <make_pin_output+0x134>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <make_pin_output+0x134>)
 8001924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <make_pin_output+0x134>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	e033      	b.n	80019a0 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <make_pin_output+0x134>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <make_pin_output+0x134>)
 800193e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <make_pin_output+0x134>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	e026      	b.n	80019a0 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <make_pin_output+0x134>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <make_pin_output+0x134>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <make_pin_output+0x134>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	e019      	b.n	80019a0 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <make_pin_output+0x134>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <make_pin_output+0x134>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <make_pin_output+0x134>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	e00c      	b.n	80019a0 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <make_pin_output+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <make_pin_output+0x134>)
 800198c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <make_pin_output+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <make_pin_output+0x138>)
 80019c8:	4413      	add	r3, r2
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	461a      	mov	r2, r3
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f001 fcab 	bl	8003330 <HAL_GPIO_Init>

	return true;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	0010007f 	.word	0x0010007f

080019ec <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <read_dig_input+0x26>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d806      	bhi.n	8001a12 <read_dig_input+0x26>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <read_dig_input+0x26>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d301      	bcc.n	8001a16 <read_dig_input+0x2a>
		return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e02d      	b.n	8001a72 <read_dig_input+0x86>

	int mask = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e024      	b.n	8001a6a <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d014      	beq.n	8001a54 <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <read_dig_input+0x90>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001a34:	2201      	movs	r2, #1
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	18d4      	adds	r4, r2, r3
 8001a44:	8a7b      	ldrh	r3, [r7, #18]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f001 fe1d 	bl	8003688 <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	7023      	strb	r3, [r4, #0]
 8001a52:	e004      	b.n	8001a5e <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3301      	adds	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	ddd7      	ble.n	8001a20 <read_dig_input+0x34>
	}

	return true;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0010007f 	.word	0x0010007f

08001a80 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00d      	beq.n	8001aae <write_dig_output+0x2e>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d80a      	bhi.n	8001aae <write_dig_output+0x2e>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <write_dig_output+0x2e>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d203      	bcs.n	8001aae <write_dig_output+0x2e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d301      	bcc.n	8001ab2 <write_dig_output+0x32>
		return false;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e02a      	b.n	8001b08 <write_dig_output+0x88>

	int mask = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e021      	b.n	8001b00 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d016      	beq.n	8001af4 <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <write_dig_output+0x90>)
 8001aca:	4413      	add	r3, r2
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8001ae8:	7c7a      	ldrb	r2, [r7, #17]
 8001aea:	8a7b      	ldrh	r3, [r7, #18]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f001 fde2 	bl	80036b8 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	ddda      	ble.n	8001abc <write_dig_output+0x3c>
	}

	return true;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0010007f 	.word	0x0010007f

08001b14 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d901      	bls.n	8001b28 <analog_read+0x14>
		return false;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e00d      	b.n	8001b44 <analog_read+0x30>

	software = true;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <analog_read+0x38>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
	MX_ADC3_Init();
 8001b2e:	f7fe ff5f 	bl	80009f0 <MX_ADC3_Init>
	config_ADC(addr3);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f83a 	bl	8000bac <config_ADC>
	*value = read_ADC();
 8001b38:	f7ff f856 	bl	8000be8 <read_ADC>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]

	return true;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000265 	.word	0x20000265

08001b50 <config_sample>:

void config_sample()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	config_ADC(sp_config.addr3);
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <config_sample+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f827 	bl	8000bac <config_ADC>

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000044 	.word	0x20000044

08001b68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_GPIO_Init+0xbc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <MX_GPIO_Init+0xc0>)
 8001bfc:	f001 fd5c 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c00:	2301      	movs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_GPIO_Init+0xc0>)
 8001c18:	f001 fb8a 	bl	8003330 <HAL_GPIO_Init>

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400

08001c2c <is_GPIO_pin_free>:

/* USER CODE BEGIN 2 */

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	//	ADC3

	if(port_addr == 1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x600F)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	f246 030f 	movw	r3, #24591	; 0x600f
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <is_GPIO_pin_free+0x20>
			return false;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e028      	b.n	8001c9e <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d106      	bne.n	8001c60 <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <is_GPIO_pin_free+0x34>
			return false;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e01e      	b.n	8001c9e <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d106      	bne.n	8001c74 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <is_GPIO_pin_free+0x48>
			return false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e014      	b.n	8001c9e <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d106      	bne.n	8001c88 <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <is_GPIO_pin_free+0x5c>
			return false;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e00a      	b.n	8001c9e <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d106      	bne.n	8001c9c <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <is_GPIO_pin_free+0x70>
			return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <is_GPIO_pin_free+0x72>

	return true;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <blink_LED>:

void blink_LED()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <blink_LED+0x20>)
 8001cb4:	f001 fd19 	bl	80036ea <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001cb8:	20c8      	movs	r0, #200	; 0xc8
 8001cba:	f000 fc8b 	bl	80025d4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <blink_LED+0x20>)
 8001cc2:	f001 fd12 	bl	80036ea <HAL_GPIO_TogglePin>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0c2      	sub	sp, #264	; 0x108
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 fc20 	bl	800251a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cda:	f000 f83d 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cde:	f7ff ff43 	bl	8001b68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ce2:	f000 fa41 	bl	8002168 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001ce6:	f000 f9e7 	bl	80020b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <main+0x78>)
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <main+0x7c>)
 8001cf0:	f003 f928 	bl	8004f44 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001cf4:	4816      	ldr	r0, [pc, #88]	; (8001d50 <main+0x80>)
 8001cf6:	f000 fb17 	bl	8002328 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 8001cfa:	f000 fae5 	bl	80022c8 <has_message_from_UART>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0fa      	beq.n	8001cfa <main+0x2a>
	  {
		  blink_LED();
 8001d04:	f7ff ffd2 	bl	8001cac <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fb36 	bl	800237c <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ffc0 	bl	8000c98 <check_command>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8001d1e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <main+0x84>)
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8001d2e:	bf00      	nop
 8001d30:	f000 fad6 	bl	80022e0 <is_transmitting_to_UART>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1fa      	bne.n	8001d30 <main+0x60>

		  reset_UART();
 8001d3a:	f000 fadd 	bl	80022f8 <reset_UART>
		  send_UART(PROMPT);
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <main+0x80>)
 8001d40:	f000 faf2 	bl	8002328 <send_UART>
	  if(has_message_from_UART())
 8001d44:	e7d9      	b.n	8001cfa <main+0x2a>
 8001d46:	bf00      	nop
 8001d48:	200004b0 	.word	0x200004b0
 8001d4c:	2001080c 	.word	0x2001080c
 8001d50:	0800bbec 	.word	0x0800bbec
 8001d54:	20000000 	.word	0x20000000

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	; 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	2234      	movs	r2, #52	; 0x34
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fbfa 	bl	8006560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <SystemClock_Config+0xd8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <SystemClock_Config+0xd8>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <SystemClock_Config+0xd8>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <SystemClock_Config+0xdc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <SystemClock_Config+0xdc>)
 8001d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <SystemClock_Config+0xdc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db8:	2310      	movs	r3, #16
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 fcef 	bl	80037c0 <HAL_RCC_OscConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de8:	f000 f826 	bl	8001e38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dec:	f001 fc98 	bl	8003720 <HAL_PWREx_EnableOverDrive>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001df6:	f000 f81f 	bl	8001e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	2103      	movs	r1, #3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ff80 	bl	8003d1c <HAL_RCC_ClockConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001e22:	f000 f809 	bl	8001e38 <Error_Handler>
  }
}
 8001e26:	bf00      	nop
 8001e28:	3750      	adds	r7, #80	; 0x50
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40007000 	.word	0x40007000

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_MspInit+0x44>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_MspInit+0x44>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_MspInit+0x44>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_MspInit+0x44>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_MspInit+0x44>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 fb5c 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <ADC_IRQHandler+0x10>)
 8001ee6:	f000 fcf3 	bl	80028d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000026c 	.word	0x2000026c

08001ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <USART3_IRQHandler+0x10>)
 8001efa:	f003 f871 	bl	8004fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2001080c 	.word	0x2001080c

08001f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
	return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_kill>:

int _kill(int pid, int sig)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f22:	f004 faf3 	bl	800650c <__errno>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2216      	movs	r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_exit>:

void _exit (int status)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffe7 	bl	8001f18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f4a:	e7fe      	b.n	8001f4a <_exit+0x12>

08001f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e00a      	b.n	8001f74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f5e:	f3af 8000 	nop.w
 8001f62:	4601      	mov	r1, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf0      	blt.n	8001f5e <_read+0x12>
	}

return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e009      	b.n	8001fac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf1      	blt.n	8001f98 <_write+0x12>
	}
	return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f004 fa58 	bl	800650c <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20080000 	.word	0x20080000
 8002088:	00000400 	.word	0x00000400
 800208c:	20000258 	.word	0x20000258
 8002090:	200108a8 	.word	0x200108a8

08002094 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_TIM6_Init+0x68>)
 80020ca:	4a16      	ldr	r2, [pc, #88]	; (8002124 <MX_TIM6_Init+0x6c>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9600;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_TIM6_Init+0x68>)
 80020d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_TIM6_Init+0x68>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_TIM6_Init+0x68>)
 80020de:	f242 720f 	movw	r2, #9999	; 0x270f
 80020e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_TIM6_Init+0x68>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_TIM6_Init+0x68>)
 80020ec:	f002 fc40 	bl	8004970 <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80020f6:	f7ff fe9f 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020fa:	2320      	movs	r3, #32
 80020fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM6_Init+0x68>)
 8002108:	f002 fdd2 	bl	8004cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002112:	f7ff fe91 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200107c0 	.word	0x200107c0
 8002124:	40001000 	.word	0x40001000

08002128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x38>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10b      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_TIM_Base_MspInit+0x3c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_TIM_Base_MspInit+0x3c>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_TIM_Base_MspInit+0x3c>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40001000 	.word	0x40001000
 8002164:	40023800 	.word	0x40023800

08002168 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_USART3_UART_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_USART3_UART_Init+0x78>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_USART3_UART_Init+0x7c>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_USART3_UART_Init+0x80>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_USART3_UART_Init+0x84>)
 8002186:	220d      	movs	r2, #13
 8002188:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <MX_USART3_UART_Init+0x8c>)
 800218e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 8002192:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002196:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021ac:	220c      	movs	r2, #12
 80021ae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <MX_USART3_UART_Init+0x88>)
 80021ca:	f002 fdff 	bl	8004dcc <HAL_UART_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 80021d4:	f7ff fe30 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200105b4 	.word	0x200105b4
 80021e0:	200107b8 	.word	0x200107b8
 80021e4:	200105b0 	.word	0x200105b0
 80021e8:	200107bc 	.word	0x200107bc
 80021ec:	200105b8 	.word	0x200105b8
 80021f0:	2001080c 	.word	0x2001080c
 80021f4:	40004800 	.word	0x40004800

080021f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0ae      	sub	sp, #184	; 0xb8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2290      	movs	r2, #144	; 0x90
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f9a1 	bl	8006560 <memset>
  if(uartHandle->Instance==USART3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_UART_MspInit+0xc4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d144      	bne.n	80022b2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800222e:	2300      	movs	r3, #0
 8002230:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4618      	mov	r0, r3
 8002238:	f001 ff72 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002242:	f7ff fdf9 	bl	8001e38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_UART_MspInit+0xc8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800227a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002290:	2307      	movs	r3, #7
 8002292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800229a:	4619      	mov	r1, r3
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <HAL_UART_MspInit+0xcc>)
 800229e:	f001 f847 	bl	8003330 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2027      	movs	r0, #39	; 0x27
 80022a8:	f000 ff79 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022ac:	2027      	movs	r0, #39	; 0x27
 80022ae:	f000 ff92 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022b2:	bf00      	nop
 80022b4:	37b8      	adds	r7, #184	; 0xb8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40004800 	.word	0x40004800
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020c00 	.word	0x40020c00

080022c8 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	return flagCPP;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <has_message_from_UART+0x14>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200105b4 	.word	0x200105b4

080022e0 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
	return flagCPE;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <is_transmitting_to_UART+0x14>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200107b8 	.word	0x200107b8

080022f8 <reset_UART>:

void reset_UART()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80022fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002300:	2100      	movs	r1, #0
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <reset_UART+0x24>)
 8002304:	f004 f92c 	bl	8006560 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	4904      	ldr	r1, [pc, #16]	; (800231c <reset_UART+0x24>)
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <reset_UART+0x28>)
 800230e:	f002 fe19 	bl	8004f44 <HAL_UART_Receive_IT>
	flagCPP = false;
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <reset_UART+0x2c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200004b0 	.word	0x200004b0
 8002320:	2001080c 	.word	0x2001080c
 8002324:	200105b4 	.word	0x200105b4

08002328 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <send_UART+0x44>)
 8002338:	f005 f809 	bl	800734e <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <send_UART+0x44>)
 800233e:	f7fd ff89 	bl	8000254 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <send_UART+0x44>)
 8002348:	4413      	add	r3, r2
 800234a:	4909      	ldr	r1, [pc, #36]	; (8002370 <send_UART+0x48>)
 800234c:	461a      	mov	r2, r3
 800234e:	460b      	mov	r3, r1
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <send_UART+0x4c>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800235a:	2201      	movs	r2, #1
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <send_UART+0x44>)
 800235e:	4806      	ldr	r0, [pc, #24]	; (8002378 <send_UART+0x50>)
 8002360:	f002 fd82 	bl	8004e68 <HAL_UART_Transmit_IT>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200105b8 	.word	0x200105b8
 8002370:	0800bbf0 	.word	0x0800bbf0
 8002374:	200107b8 	.word	0x200107b8
 8002378:	2001080c 	.word	0x2001080c

0800237c <read_UART>:

void read_UART(char* msg_to_read)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8002384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <read_UART+0x1c>)
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f004 ffdf 	bl	800734e <strncpy>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200004b0 	.word	0x200004b0

0800239c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_UART_RxCpltCallback+0xa8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d146      	bne.n	800243a <HAL_UART_RxCpltCallback+0x9e>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r') //		CARRIAGE RETURN
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	2b0d      	cmp	r3, #13
 80023b6:	d106      	bne.n	80023c6 <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_UART_RxCpltCallback+0xa8>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e03a      	b.n	800243c <HAL_UART_RxCpltCallback+0xa0>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d10e      	bne.n	80023f0 <HAL_UART_RxCpltCallback+0x54>
		{
			if(UART_RX_index == 0)
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_UART_RxCpltCallback+0x4a>
				UART_RX_index--;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3b01      	subs	r3, #1
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e004      	b.n	80023f0 <HAL_UART_RxCpltCallback+0x54>
			else
				UART_RX_index -= 2;
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3b02      	subs	r3, #2
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023ee:	6013      	str	r3, [r2, #0]
		}

		if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	2b1b      	cmp	r3, #27
 80023fa:	d103      	bne.n	8002404 <HAL_UART_RxCpltCallback+0x68>
			UART_RX_index = -1;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002402:	601a      	str	r2, [r3, #0]

		if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	2b24      	cmp	r3, #36	; 0x24
 800240e:	d105      	bne.n	800241c <HAL_UART_RxCpltCallback+0x80>
		{
			UART_RX_index = 0;
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 8002418:	2224      	movs	r2, #36	; 0x24
 800241a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_UART_RxCpltCallback+0xac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_UART_RxCpltCallback+0xb0>)
 800242c:	4413      	add	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	4619      	mov	r1, r3
 8002432:	4807      	ldr	r0, [pc, #28]	; (8002450 <HAL_UART_RxCpltCallback+0xb4>)
 8002434:	f002 fd86 	bl	8004f44 <HAL_UART_Receive_IT>
 8002438:	e000      	b.n	800243c <HAL_UART_RxCpltCallback+0xa0>
		return;
 800243a:	bf00      	nop
	}
}
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200105b4 	.word	0x200105b4
 8002448:	200105b0 	.word	0x200105b0
 800244c:	200004b0 	.word	0x200004b0
 8002450:	2001080c 	.word	0x2001080c

08002454 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_UART_TxCpltCallback+0x64>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d122      	bne.n	80024b0 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_UART_TxCpltCallback+0x6c>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	2b0d      	cmp	r3, #13
 8002474:	d10d      	bne.n	8002492 <HAL_UART_TxCpltCallback+0x3e>
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_UART_TxCpltCallback+0x6c>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	2b0a      	cmp	r3, #10
 8002482:	d006      	beq.n	8002492 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_UART_TxCpltCallback+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e00f      	b.n	80024b2 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_UART_TxCpltCallback+0x68>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_UART_TxCpltCallback+0x6c>)
 80024a2:	4413      	add	r3, r2
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <HAL_UART_TxCpltCallback+0x70>)
 80024aa:	f002 fcdd 	bl	8004e68 <HAL_UART_Transmit_IT>
 80024ae:	e000      	b.n	80024b2 <HAL_UART_TxCpltCallback+0x5e>
		return;
 80024b0:	bf00      	nop
}
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200107b8 	.word	0x200107b8
 80024bc:	200107bc 	.word	0x200107bc
 80024c0:	200105b8 	.word	0x200105b8
 80024c4:	2001080c 	.word	0x2001080c

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f2:	f7ff fdcf 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f004 f80f 	bl	8006518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff fbe9 	bl	8001cd0 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800250c:	0800c0f4 	.word	0x0800c0f4
  ldr r2, =_sbss
 8002510:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002514:	200108a4 	.word	0x200108a4

08002518 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <CAN1_RX0_IRQHandler>

0800251a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251e:	2003      	movs	r0, #3
 8002520:	f000 fe32 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002524:	2000      	movs	r0, #0
 8002526:	f000 f805 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800252a:	f7ff fc8b 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fe4d 	bl	80031f2 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 fe15 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000054 	.word	0x20000054
 800258c:	2000005c 	.word	0x2000005c
 8002590:	20000058 	.word	0x20000058

08002594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x20>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_IncTick+0x24>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000005c 	.word	0x2000005c
 80025b8:	20010890 	.word	0x20010890

080025bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GetTick+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20010890 	.word	0x20010890

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff ffee 	bl	80025bc <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fa:	bf00      	nop
 80025fc:	f7ff ffde 	bl	80025bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000005c 	.word	0x2000005c

0800261c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e031      	b.n	8002696 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fa3a 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_ADC_Init+0x84>)
 8002660:	4013      	ands	r3, r2
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fbb8 	bl	8002de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
 8002686:	e001      	b.n	800268c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	ffffeefd 	.word	0xffffeefd

080026a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Start_IT+0x1a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0b5      	b.n	800282a <HAL_ADC_Start_IT+0x186>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d018      	beq.n	8002706 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_ADC_Start_IT+0x194>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_ADC_Start_IT+0x198>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9a      	lsrs	r2, r3, #18
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026f8:	e002      	b.n	8002700 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d17d      	bne.n	8002810 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_ADC_Start_IT+0x19c>)
 800271a:	4013      	ands	r3, r2
 800271c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800273a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274e:	d106      	bne.n	800275e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f023 0206 	bic.w	r2, r3, #6
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002774:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_ADC_Start_IT+0x1a0>)
 8002782:	430b      	orrs	r3, r1
 8002784:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_ADC_Start_IT+0x1a4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d143      	bne.n	8002828 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	e03a      	b.n	8002828 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_ADC_Start_IT+0x1a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10e      	bne.n	80027da <HAL_ADC_Start_IT+0x136>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027d8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_ADC_Start_IT+0x1a4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d120      	bne.n	8002828 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_ADC_Start_IT+0x1ac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d11b      	bne.n	8002828 <HAL_ADC_Start_IT+0x184>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d114      	bne.n	8002828 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	e00b      	b.n	8002828 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0210 	orr.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000054 	.word	0x20000054
 800283c:	431bde83 	.word	0x431bde83
 8002840:	fffff8fe 	.word	0xfffff8fe
 8002844:	04000020 	.word	0x04000020
 8002848:	40012300 	.word	0x40012300
 800284c:	40012000 	.word	0x40012000
 8002850:	40012200 	.word	0x40012200

08002854 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADC_Stop_IT+0x16>
 8002866:	2302      	movs	r3, #2
 8002868:	e027      	b.n	80028ba <HAL_ADC_Stop_IT+0x66>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_ADC_Stop_IT+0x74>)
 800289c:	400b      	ands	r3, r1
 800289e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_ADC_Stop_IT+0x78>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	fbffffdf 	.word	0xfbffffdf
 80028cc:	ffffeefe 	.word	0xffffeefe

080028d0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d049      	beq.n	800299a <HAL_ADC_IRQHandler+0xca>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d046      	beq.n	800299a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d12b      	bne.n	800298a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d127      	bne.n	800298a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0220 	bic.w	r2, r2, #32
 8002964:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f94c 	bl	8000c28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0212 	mvn.w	r2, #18
 8002998:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d057      	beq.n	8002a60 <HAL_ADC_IRQHandler+0x190>
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d054      	beq.n	8002a60 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d139      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d12b      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d124      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11d      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d119      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fabf 	bl	8002fd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 020c 	mvn.w	r2, #12
 8002a5e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x1d6>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d014      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f837 	bl	8002b0a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0201 	mvn.w	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d015      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x218>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f06f 0220 	mvn.w	r2, #32
 8002ad6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f820 	bl	8002b1e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f06f 0220 	mvn.w	r2, #32
 8002ae6:	601a      	str	r2, [r3, #0]
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1c>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e136      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x28a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d93a      	bls.n	8002bd6 <HAL_ADC_ConfigChannel+0xa2>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b68:	d035      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68d9      	ldr	r1, [r3, #12]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b1e      	subs	r3, #30
 8002b80:	2207      	movs	r2, #7
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a8d      	ldr	r2, [pc, #564]	; (8002dcc <HAL_ADC_ConfigChannel+0x298>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	061a      	lsls	r2, r3, #24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bae:	e035      	b.n	8002c1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	e022      	b.n	8002c1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6919      	ldr	r1, [r3, #16]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	2207      	movs	r2, #7
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6919      	ldr	r1, [r3, #16]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4403      	add	r3, r0
 8002c12:	409a      	lsls	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d824      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b05      	subs	r3, #5
 8002c36:	221f      	movs	r2, #31
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b05      	subs	r3, #5
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6c:	e04c      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d824      	bhi.n	8002cc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b23      	subs	r3, #35	; 0x23
 8002c88:	221f      	movs	r2, #31
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b23      	subs	r3, #35	; 0x23
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbe:	e023      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b41      	subs	r3, #65	; 0x41
 8002cd2:	221f      	movs	r2, #31
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	400a      	ands	r2, r1
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b41      	subs	r3, #65	; 0x41
 8002cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10a      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1f4>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10f      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x21e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	d10b      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d44:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d12b      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x280>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_ADC_ConfigChannel+0x298>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <HAL_ADC_ConfigChannel+0x23a>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b11      	cmp	r3, #17
 8002d6c:	d122      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d78:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_ADC_ConfigChannel+0x298>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_ADC_ConfigChannel+0x2a8>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9a      	lsrs	r2, r3, #18
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002da6:	e002      	b.n	8002dae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	10000012 	.word	0x10000012
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	20000054 	.word	0x20000054
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <ADC_Init+0x1ec>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <ADC_Init+0x1ec>)
 8002dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002df2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002df4:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <ADC_Init+0x1ec>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4973      	ldr	r1, [pc, #460]	; (8002fcc <ADC_Init+0x1ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <ADC_Init+0x1f0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e00f      	b.n	8002eda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0202 	bic.w	r2, r2, #2
 8002ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	035a      	lsls	r2, r3, #13
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	051a      	lsls	r2, r3, #20
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f92:	025a      	lsls	r2, r3, #9
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	029a      	lsls	r2, r3, #10
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	05fa0000 	.word	0x05fa0000

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff f9d0 	bl	80025bc <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d008      	beq.n	800323c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e052      	b.n	80032e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0216 	bic.w	r2, r2, #22
 800324a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_DMA_Abort+0x62>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0208 	bic.w	r2, r2, #8
 800327a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	e013      	b.n	80032b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328e:	f7ff f995 	bl	80025bc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b05      	cmp	r3, #5
 800329a:	d90c      	bls.n	80032b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e015      	b.n	80032e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d004      	beq.n	8003308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e00c      	b.n	8003322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2205      	movs	r2, #5
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e175      	b.n	800363c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8164 	bne.w	8003636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d005      	beq.n	8003386 <HAL_GPIO_Init+0x56>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d017      	beq.n	8003424 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80be 	beq.w	8003636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_GPIO_Init+0x328>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d037      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_GPIO_Init+0x334>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_GPIO_Init+0x338>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x33c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a53      	ldr	r2, [pc, #332]	; (8003670 <HAL_GPIO_Init+0x340>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x344>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x348>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x34c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x21a>
 8003546:	2309      	movs	r3, #9
 8003548:	e012      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354a:	230a      	movs	r3, #10
 800354c:	e010      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354e:	2308      	movs	r3, #8
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003552:	2307      	movs	r3, #7
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x328>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_GPIO_Init+0x354>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae86 	bls.w	8003350 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40013800 	.word	0x40013800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020800 	.word	0x40020800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40021400 	.word	0x40021400
 8003674:	40021800 	.word	0x40021800
 8003678:	40021c00 	.word	0x40021c00
 800367c:	40022000 	.word	0x40022000
 8003680:	40022400 	.word	0x40022400
 8003684:	40013c00 	.word	0x40013c00

08003688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e001      	b.n	80036aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
 80036c4:	4613      	mov	r3, r2
 80036c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c8:	787b      	ldrb	r3, [r7, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036d4:	e003      	b.n	80036de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036fc:	887a      	ldrh	r2, [r7, #2]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	43d9      	mvns	r1, r3
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	400b      	ands	r3, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	619a      	str	r2, [r3, #24]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800374e:	f7fe ff35 	bl	80025bc <HAL_GetTick>
 8003752:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003754:	e009      	b.n	800376a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003756:	f7fe ff31 	bl	80025bc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003764:	d901      	bls.n	800376a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e022      	b.n	80037b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d1ee      	bne.n	8003756 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003784:	f7fe ff1a 	bl	80025bc <HAL_GetTick>
 8003788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378a:	e009      	b.n	80037a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800378c:	f7fe ff16 	bl	80025bc <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379a:	d901      	bls.n	80037a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e007      	b.n	80037b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ac:	d1ee      	bne.n	800378c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e29b      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8087 	beq.w	80038f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	4b96      	ldr	r3, [pc, #600]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00c      	beq.n	800380a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f0:	4b93      	ldr	r3, [pc, #588]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d112      	bne.n	8003822 <HAL_RCC_OscConfig+0x62>
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003808:	d10b      	bne.n	8003822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x130>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d168      	bne.n	80038f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e275      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x7a>
 800382c:	4b84      	ldr	r3, [pc, #528]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a83      	ldr	r2, [pc, #524]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0xd8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x9c>
 8003842:	4b7f      	ldr	r3, [pc, #508]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7e      	ldr	r2, [pc, #504]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7b      	ldr	r2, [pc, #492]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e01d      	b.n	8003898 <HAL_RCC_OscConfig+0xd8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0xc0>
 8003866:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a75      	ldr	r2, [pc, #468]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a72      	ldr	r2, [pc, #456]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0xd8>
 8003880:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6b      	ldr	r2, [pc, #428]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fe8c 	bl	80025bc <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe fe88 	bl	80025bc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e229      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe8>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe fe78 	bl	80025bc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe fe74 	bl	80025bc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e215      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	4b57      	ldr	r3, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x110>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d069      	beq.n	80039d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fe:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x190>
 8003916:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x17a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1e9      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	493d      	ldr	r1, [pc, #244]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e040      	b.n	80039d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe fe2a 	bl	80025bc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396c:	f7fe fe26 	bl	80025bc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e1c7      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4929      	ldr	r1, [pc, #164]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
 800399e:	e018      	b.n	80039d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fe06 	bl	80025bc <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fe fe02 	bl	80025bc <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1a3      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d038      	beq.n	8003a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d019      	beq.n	8003a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fe fde3 	bl	80025bc <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fe fddf 	bl	80025bc <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e180      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x23a>
 8003a18:	e01a      	b.n	8003a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <HAL_RCC_OscConfig+0x280>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fe fdc9 	bl	80025bc <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fdc5 	bl	80025bc <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d903      	bls.n	8003a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e166      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
 8003a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a4 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5e:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a88      	ldr	r2, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b86      	ldr	r3, [pc, #536]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_OscConfig+0x4d4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a92:	4b80      	ldr	r3, [pc, #512]	; (8003c94 <HAL_RCC_OscConfig+0x4d4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a7f      	ldr	r2, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x4d4>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fd8d 	bl	80025bc <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe fd89 	bl	80025bc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	; 0x64
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e12a      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab8:	4b76      	ldr	r3, [pc, #472]	; (8003c94 <HAL_RCC_OscConfig+0x4d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x31a>
 8003acc:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a6f      	ldr	r2, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e02d      	b.n	8003b36 <HAL_RCC_OscConfig+0x376>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x33c>
 8003ae2:	4b6b      	ldr	r3, [pc, #428]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	e01c      	b.n	8003b36 <HAL_RCC_OscConfig+0x376>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x35e>
 8003b04:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a61      	ldr	r2, [pc, #388]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	e00b      	b.n	8003b36 <HAL_RCC_OscConfig+0x376>
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a5b      	ldr	r2, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d015      	beq.n	8003b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fd3d 	bl	80025bc <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fe fd39 	bl	80025bc <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0d8      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ee      	beq.n	8003b46 <HAL_RCC_OscConfig+0x386>
 8003b68:	e014      	b.n	8003b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fd27 	bl	80025bc <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe fd23 	bl	80025bc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0c2      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b88:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ee      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80ae 	beq.w	8003d0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb0:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d06d      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d14b      	bne.n	8003c5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a31      	ldr	r2, [pc, #196]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fcf4 	bl	80025bc <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fcf0 	bl	80025bc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e091      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	491b      	ldr	r1, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe fcc2 	bl	80025bc <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fcbe 	bl	80025bc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e05f      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x47c>
 8003c5a:	e057      	b.n	8003d0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe fca8 	bl	80025bc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fe fca4 	bl	80025bc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e045      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4b0>
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x54c>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_OscConfig+0x558>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d030      	beq.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d129      	bne.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d122      	bne.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d119      	bne.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d10f      	bne.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d0      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d910      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 020f 	bic.w	r2, r3, #15
 8003d4a:	4965      	ldr	r1, [pc, #404]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d040      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d115      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e073      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06b      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4936      	ldr	r1, [pc, #216]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fe fbd4 	bl	80025bc <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fe fbd0 	bl	80025bc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e053      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d210      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1d0>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fb30 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800bc00 	.word	0x0800bc00
 8003eec:	20000054 	.word	0x20000054
 8003ef0:	20000058 	.word	0x20000058

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0c:	4b67      	ldr	r3, [pc, #412]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d00d      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x40>
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	f200 80bd 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x34>
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f26:	e0b7      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f2a:	60bb      	str	r3, [r7, #8]
      break;
 8003f2c:	e0b7      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2e:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f30:	60bb      	str	r3, [r7, #8]
      break;
 8003f32:	e0b4      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b5d      	ldr	r3, [pc, #372]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04d      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b58      	ldr	r3, [pc, #352]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	461a      	mov	r2, r3
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	ea02 0800 	and.w	r8, r2, r0
 8003f62:	ea03 0901 	and.w	r9, r3, r1
 8003f66:	4640      	mov	r0, r8
 8003f68:	4649      	mov	r1, r9
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	014b      	lsls	r3, r1, #5
 8003f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f78:	0142      	lsls	r2, r0, #5
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	ebb0 0008 	subs.w	r0, r0, r8
 8003f82:	eb61 0109 	sbc.w	r1, r1, r9
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	018b      	lsls	r3, r1, #6
 8003f90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f94:	0182      	lsls	r2, r0, #6
 8003f96:	1a12      	subs	r2, r2, r0
 8003f98:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9c:	f04f 0000 	mov.w	r0, #0
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	00d9      	lsls	r1, r3, #3
 8003fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003faa:	00d0      	lsls	r0, r2, #3
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	eb12 0208 	adds.w	r2, r2, r8
 8003fb4:	eb43 0309 	adc.w	r3, r3, r9
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0259      	lsls	r1, r3, #9
 8003fc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fc6:	0250      	lsls	r0, r2, #9
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f7fc fb56 	bl	8000688 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e04a      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	461a      	mov	r2, r3
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	ea02 0400 	and.w	r4, r2, r0
 8003ffe:	ea03 0501 	and.w	r5, r3, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	014b      	lsls	r3, r1, #5
 8004010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004014:	0142      	lsls	r2, r0, #5
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	1b00      	subs	r0, r0, r4
 800401c:	eb61 0105 	sbc.w	r1, r1, r5
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	018b      	lsls	r3, r1, #6
 800402a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800402e:	0182      	lsls	r2, r0, #6
 8004030:	1a12      	subs	r2, r2, r0
 8004032:	eb63 0301 	sbc.w	r3, r3, r1
 8004036:	f04f 0000 	mov.w	r0, #0
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	00d9      	lsls	r1, r3, #3
 8004040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004044:	00d0      	lsls	r0, r2, #3
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	1912      	adds	r2, r2, r4
 800404c:	eb45 0303 	adc.w	r3, r5, r3
 8004050:	f04f 0000 	mov.w	r0, #0
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	0299      	lsls	r1, r3, #10
 800405a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800405e:	0290      	lsls	r0, r2, #10
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	f7fc fb0a 	bl	8000688 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	60bb      	str	r3, [r7, #8]
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800409a:	60bb      	str	r3, [r7, #8]
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	68bb      	ldr	r3, [r7, #8]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000054 	.word	0x20000054

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800bc10 	.word	0x0800bc10

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	0800bc10 	.word	0x0800bc10

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004148:	4b69      	ldr	r3, [pc, #420]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	4964      	ldr	r1, [pc, #400]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d017      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417a:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	4959      	ldr	r1, [pc, #356]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b6:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	494a      	ldr	r1, [pc, #296]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 808b 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	4a39      	ldr	r2, [pc, #228]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6413      	str	r3, [r2, #64]	; 0x40
 8004210:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800421c:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fe f9c8 	bl	80025bc <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fe f9c4 	bl	80025bc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e38f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d035      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d02e      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004294:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d114      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe f98c 	bl	80025bc <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe f988 	bl	80025bc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e351      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d6:	d111      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	4901      	ldr	r1, [pc, #4]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	e00b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40007000 	.word	0x40007000
 80042f8:	0ffffcff 	.word	0x0ffffcff
 80042fc:	4bb3      	ldr	r3, [pc, #716]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4ab2      	ldr	r2, [pc, #712]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	4bb0      	ldr	r3, [pc, #704]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	49ad      	ldr	r1, [pc, #692]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004316:	4313      	orrs	r3, r2
 8004318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004326:	4ba9      	ldr	r3, [pc, #676]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	4aa7      	ldr	r2, [pc, #668]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004336:	4ba5      	ldr	r3, [pc, #660]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	49a2      	ldr	r1, [pc, #648]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004354:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	499a      	ldr	r1, [pc, #616]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004376:	4b95      	ldr	r3, [pc, #596]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004384:	4991      	ldr	r1, [pc, #580]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004398:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	4989      	ldr	r1, [pc, #548]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ba:	4b84      	ldr	r3, [pc, #528]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4980      	ldr	r1, [pc, #512]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043dc:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4978      	ldr	r1, [pc, #480]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f023 020c 	bic.w	r2, r3, #12
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	496f      	ldr	r1, [pc, #444]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	4967      	ldr	r1, [pc, #412]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004442:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004450:	495e      	ldr	r1, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	4956      	ldr	r1, [pc, #344]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004486:	4b51      	ldr	r3, [pc, #324]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	4945      	ldr	r1, [pc, #276]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	493c      	ldr	r1, [pc, #240]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	492b      	ldr	r1, [pc, #172]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454e:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004580:	4912      	ldr	r1, [pc, #72]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	4909      	ldr	r1, [pc, #36]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	e002      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	4986      	ldr	r1, [pc, #536]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045e4:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	497d      	ldr	r1, [pc, #500]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d006      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80d6 	beq.w	80047bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a75      	ldr	r2, [pc, #468]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fd ffce 	bl	80025bc <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004624:	f7fd ffca 	bl	80025bc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e195      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d021      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004656:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004664:	4b61      	ldr	r3, [pc, #388]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	0e1b      	lsrs	r3, r3, #24
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	019a      	lsls	r2, r3, #6
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	071b      	lsls	r3, r3, #28
 800468a:	4958      	ldr	r1, [pc, #352]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02e      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046bc:	d129      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046cc:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	493e      	ldr	r1, [pc, #248]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046fa:	4b3c      	ldr	r3, [pc, #240]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	f023 021f 	bic.w	r2, r3, #31
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	3b01      	subs	r3, #1
 800470a:	4938      	ldr	r1, [pc, #224]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01d      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004732:	0f1b      	lsrs	r3, r3, #28
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	019a      	lsls	r2, r3, #6
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	4926      	ldr	r1, [pc, #152]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	491a      	ldr	r1, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fd ff11 	bl	80025bc <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800479e:	f7fd ff0d 	bl	80025bc <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0d8      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 80ce 	bne.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fef4 	bl	80025bc <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d8:	f7fd fef0 	bl	80025bc <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0bb      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f0:	4b5e      	ldr	r3, [pc, #376]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fc:	d0ec      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02e      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d12a      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004834:	4b4d      	ldr	r3, [pc, #308]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4944      	ldr	r1, [pc, #272]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004862:	4b42      	ldr	r3, [pc, #264]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	493d      	ldr	r1, [pc, #244]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004890:	d11d      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048a0:	4b32      	ldr	r3, [pc, #200]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	0f1b      	lsrs	r3, r3, #28
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	019a      	lsls	r2, r3, #6
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	4929      	ldr	r1, [pc, #164]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048da:	4b24      	ldr	r3, [pc, #144]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	0e1b      	lsrs	r3, r3, #24
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	4917      	ldr	r1, [pc, #92]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4911      	ldr	r1, [pc, #68]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fd fe40 	bl	80025bc <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004940:	f7fd fe3c 	bl	80025bc <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e007      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800495e:	d1ef      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e049      	b.n	8004a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fbc6 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 f8de 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e054      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d01d      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d115      	bne.n	8004acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_TIM_Base_Start_IT+0xec>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d015      	beq.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d011      	beq.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	e008      	b.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e000      	b.n	8004ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40001800 	.word	0x40001800
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6a1a      	ldr	r2, [r3, #32]
 8004b2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10f      	bne.n	8004b58 <HAL_TIM_Base_Stop_IT+0x48>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	f240 4344 	movw	r3, #1092	; 0x444
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_Base_Stop_IT+0x48>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3d      	ldr	r2, [pc, #244]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3c      	ldr	r2, [pc, #240]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d027      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d023      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <TIM_Base_SetConfig+0x128>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <TIM_Base_SetConfig+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <TIM_Base_SetConfig+0x130>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <TIM_Base_SetConfig+0x134>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <TIM_Base_SetConfig+0x138>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <TIM_Base_SetConfig+0x13c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d103      	bne.n	8004c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800
 8004ca4:	40001800 	.word	0x40001800
 8004ca8:	40001c00 	.word	0x40001c00
 8004cac:	40002000 	.word	0x40002000

08004cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e06d      	b.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10c      	bne.n	8004d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40010400 	.word	0x40010400
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40001800 	.word	0x40001800

08004dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e040      	b.n	8004e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd fa02 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	; 0x24
 8004df8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fbe8 	bl	80055e0 <UART_SetConfig>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e022      	b.n	8004e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fe3e 	bl	8005aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fec5 	bl	8005be8 <UART_CheckIdleState>
 8004e5e:	4603      	mov	r3, r0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b08b      	sub	sp, #44	; 0x2c
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d156      	bne.n	8004f2c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Transmit_IT+0x22>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e04f      	b.n	8004f2e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Transmit_IT+0x34>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e048      	b.n	8004f2e <HAL_UART_Transmit_IT+0xc6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	; 0x21
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed6:	d107      	bne.n	8004ee8 <HAL_UART_Transmit_IT+0x80>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <HAL_UART_Transmit_IT+0xd4>)
 8004ee4:	669a      	str	r2, [r3, #104]	; 0x68
 8004ee6:	e002      	b.n	8004eee <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <HAL_UART_Transmit_IT+0xd8>)
 8004eec:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	372c      	adds	r7, #44	; 0x2c
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	08006141 	.word	0x08006141
 8004f40:	0800608b 	.word	0x0800608b

08004f44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d13d      	bne.n	8004fd6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_UART_Receive_IT+0x22>
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e036      	b.n	8004fd8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Receive_IT+0x34>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e02f      	b.n	8004fd8 <HAL_UART_Receive_IT+0x94>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d018      	beq.n	8004fc6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	69f9      	ldr	r1, [r7, #28]
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 ff19 	bl	8005e04 <UART_Start_Receive_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	e000      	b.n	8004fd8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0ba      	sub	sp, #232	; 0xe8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800500a:	f640 030f 	movw	r3, #2063	; 0x80f
 800500e:	4013      	ands	r3, r2
 8005010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d115      	bne.n	8005048 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 82a4 	beq.w	8005586 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      }
      return;
 8005046:	e29e      	b.n	8005586 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8117 	beq.w	8005280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800505e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005062:	4b85      	ldr	r3, [pc, #532]	; (8005278 <HAL_UART_IRQHandler+0x298>)
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 810a 	beq.w	8005280 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d011      	beq.n	800509c <HAL_UART_IRQHandler+0xbc>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_UART_IRQHandler+0xec>
 80050a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2202      	movs	r2, #2
 80050ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d011      	beq.n	80050fc <HAL_UART_IRQHandler+0x11c>
 80050d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2204      	movs	r2, #4
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d017      	beq.n	8005138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512e:	f043 0208 	orr.w	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_UART_IRQHandler+0x18a>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 820a 	beq.w	800558a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00d      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d005      	beq.n	80051c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d04f      	beq.n	8005262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fee8 	bl	8005f98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d141      	bne.n	800525a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3308      	adds	r3, #8
 80051dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800520e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800521a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <HAL_UART_IRQHandler+0x29c>)
 8005230:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe f857 	bl	80032ea <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d017      	beq.n	8005272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e00f      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9a4 	bl	80055a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00b      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9a0 	bl	80055a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e007      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f99c 	bl	80055a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005270:	e18b      	b.n	800558a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005272:	bf00      	nop
    return;
 8005274:	e189      	b.n	800558a <HAL_UART_IRQHandler+0x5aa>
 8005276:	bf00      	nop
 8005278:	04000120 	.word	0x04000120
 800527c:	0800605f 	.word	0x0800605f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005284:	2b01      	cmp	r3, #1
 8005286:	f040 8144 	bne.w	8005512 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 813d 	beq.w	8005512 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8136 	beq.w	8005512 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	f040 80b2 	bne.w	8005422 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 815d 	beq.w	800558e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052de:	429a      	cmp	r2, r3
 80052e0:	f080 8155 	bcs.w	800558e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f8:	f000 8085 	beq.w	8005406 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800532a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800533e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1da      	bne.n	80052fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800536a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800536e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800537c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e1      	bne.n	8005346 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e3      	bne.n	8005382 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e4      	bne.n	80053c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4618      	mov	r0, r3
 8005402:	f7fd ff02 	bl	800320a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005412:	b29b      	uxth	r3, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8ca 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005420:	e0b5      	b.n	800558e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800542e:	b29b      	uxth	r3, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80a7 	beq.w	8005592 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a2 	beq.w	8005592 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
 8005472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e4      	bne.n	800544e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	623b      	str	r3, [r7, #32]
   return(result);
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054a8:	633a      	str	r2, [r7, #48]	; 0x30
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60fb      	str	r3, [r7, #12]
   return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	69b9      	ldr	r1, [r7, #24]
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	617b      	str	r3, [r7, #20]
   return(result);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e4      	bne.n	80054ce <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f852 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005510:	e03f      	b.n	8005592 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <HAL_UART_IRQHandler+0x55c>
 800551e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f849 	bl	80055cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800553a:	e02d      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
    }
    return;
 8005564:	e017      	b.n	8005596 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <HAL_UART_IRQHandler+0x5b8>
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fe3e 	bl	8006200 <UART_EndTransmit_IT>
    return;
 8005584:	e008      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005586:	bf00      	nop
 8005588:	e006      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
    return;
 800558a:	bf00      	nop
 800558c:	e004      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
      return;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005596:	bf00      	nop
  }

}
 8005598:	37e8      	adds	r7, #232	; 0xe8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop

080055a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4ba7      	ldr	r3, [pc, #668]	; (80058a8 <UART_SetConfig+0x2c8>)
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6979      	ldr	r1, [r7, #20]
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	430a      	orrs	r2, r1
 8005650:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a95      	ldr	r2, [pc, #596]	; (80058ac <UART_SetConfig+0x2cc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d120      	bne.n	800569e <UART_SetConfig+0xbe>
 800565c:	4b94      	ldr	r3, [pc, #592]	; (80058b0 <UART_SetConfig+0x2d0>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b03      	cmp	r3, #3
 8005668:	d816      	bhi.n	8005698 <UART_SetConfig+0xb8>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x90>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005681 	.word	0x08005681
 8005674:	0800568d 	.word	0x0800568d
 8005678:	08005687 	.word	0x08005687
 800567c:	08005693 	.word	0x08005693
 8005680:	2301      	movs	r3, #1
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e14f      	b.n	8005926 <UART_SetConfig+0x346>
 8005686:	2302      	movs	r3, #2
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e14c      	b.n	8005926 <UART_SetConfig+0x346>
 800568c:	2304      	movs	r3, #4
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e149      	b.n	8005926 <UART_SetConfig+0x346>
 8005692:	2308      	movs	r3, #8
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e146      	b.n	8005926 <UART_SetConfig+0x346>
 8005698:	2310      	movs	r3, #16
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e143      	b.n	8005926 <UART_SetConfig+0x346>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a84      	ldr	r2, [pc, #528]	; (80058b4 <UART_SetConfig+0x2d4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d132      	bne.n	800570e <UART_SetConfig+0x12e>
 80056a8:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <UART_SetConfig+0x2d0>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b0c      	cmp	r3, #12
 80056b4:	d828      	bhi.n	8005708 <UART_SetConfig+0x128>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0xdc>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005709 	.word	0x08005709
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005709 	.word	0x08005709
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	08005709 	.word	0x08005709
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005709 	.word	0x08005709
 80056dc:	080056f7 	.word	0x080056f7
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005709 	.word	0x08005709
 80056ec:	08005703 	.word	0x08005703
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e117      	b.n	8005926 <UART_SetConfig+0x346>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e114      	b.n	8005926 <UART_SetConfig+0x346>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e111      	b.n	8005926 <UART_SetConfig+0x346>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e10e      	b.n	8005926 <UART_SetConfig+0x346>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e10b      	b.n	8005926 <UART_SetConfig+0x346>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a69      	ldr	r2, [pc, #420]	; (80058b8 <UART_SetConfig+0x2d8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d120      	bne.n	800575a <UART_SetConfig+0x17a>
 8005718:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <UART_SetConfig+0x2d0>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005722:	2b30      	cmp	r3, #48	; 0x30
 8005724:	d013      	beq.n	800574e <UART_SetConfig+0x16e>
 8005726:	2b30      	cmp	r3, #48	; 0x30
 8005728:	d814      	bhi.n	8005754 <UART_SetConfig+0x174>
 800572a:	2b20      	cmp	r3, #32
 800572c:	d009      	beq.n	8005742 <UART_SetConfig+0x162>
 800572e:	2b20      	cmp	r3, #32
 8005730:	d810      	bhi.n	8005754 <UART_SetConfig+0x174>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <UART_SetConfig+0x15c>
 8005736:	2b10      	cmp	r3, #16
 8005738:	d006      	beq.n	8005748 <UART_SetConfig+0x168>
 800573a:	e00b      	b.n	8005754 <UART_SetConfig+0x174>
 800573c:	2300      	movs	r3, #0
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e0f1      	b.n	8005926 <UART_SetConfig+0x346>
 8005742:	2302      	movs	r3, #2
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e0ee      	b.n	8005926 <UART_SetConfig+0x346>
 8005748:	2304      	movs	r3, #4
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e0eb      	b.n	8005926 <UART_SetConfig+0x346>
 800574e:	2308      	movs	r3, #8
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e0e8      	b.n	8005926 <UART_SetConfig+0x346>
 8005754:	2310      	movs	r3, #16
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e0e5      	b.n	8005926 <UART_SetConfig+0x346>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a57      	ldr	r2, [pc, #348]	; (80058bc <UART_SetConfig+0x2dc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d120      	bne.n	80057a6 <UART_SetConfig+0x1c6>
 8005764:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <UART_SetConfig+0x2d0>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800576e:	2bc0      	cmp	r3, #192	; 0xc0
 8005770:	d013      	beq.n	800579a <UART_SetConfig+0x1ba>
 8005772:	2bc0      	cmp	r3, #192	; 0xc0
 8005774:	d814      	bhi.n	80057a0 <UART_SetConfig+0x1c0>
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x1ae>
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d810      	bhi.n	80057a0 <UART_SetConfig+0x1c0>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <UART_SetConfig+0x1a8>
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d006      	beq.n	8005794 <UART_SetConfig+0x1b4>
 8005786:	e00b      	b.n	80057a0 <UART_SetConfig+0x1c0>
 8005788:	2300      	movs	r3, #0
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e0cb      	b.n	8005926 <UART_SetConfig+0x346>
 800578e:	2302      	movs	r3, #2
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e0c8      	b.n	8005926 <UART_SetConfig+0x346>
 8005794:	2304      	movs	r3, #4
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e0c5      	b.n	8005926 <UART_SetConfig+0x346>
 800579a:	2308      	movs	r3, #8
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e0c2      	b.n	8005926 <UART_SetConfig+0x346>
 80057a0:	2310      	movs	r3, #16
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e0bf      	b.n	8005926 <UART_SetConfig+0x346>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a45      	ldr	r2, [pc, #276]	; (80058c0 <UART_SetConfig+0x2e0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d125      	bne.n	80057fc <UART_SetConfig+0x21c>
 80057b0:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <UART_SetConfig+0x2d0>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057be:	d017      	beq.n	80057f0 <UART_SetConfig+0x210>
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c4:	d817      	bhi.n	80057f6 <UART_SetConfig+0x216>
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ca:	d00b      	beq.n	80057e4 <UART_SetConfig+0x204>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d811      	bhi.n	80057f6 <UART_SetConfig+0x216>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <UART_SetConfig+0x1fe>
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057da:	d006      	beq.n	80057ea <UART_SetConfig+0x20a>
 80057dc:	e00b      	b.n	80057f6 <UART_SetConfig+0x216>
 80057de:	2300      	movs	r3, #0
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e0a0      	b.n	8005926 <UART_SetConfig+0x346>
 80057e4:	2302      	movs	r3, #2
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e09d      	b.n	8005926 <UART_SetConfig+0x346>
 80057ea:	2304      	movs	r3, #4
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	e09a      	b.n	8005926 <UART_SetConfig+0x346>
 80057f0:	2308      	movs	r3, #8
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e097      	b.n	8005926 <UART_SetConfig+0x346>
 80057f6:	2310      	movs	r3, #16
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e094      	b.n	8005926 <UART_SetConfig+0x346>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <UART_SetConfig+0x2e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d125      	bne.n	8005852 <UART_SetConfig+0x272>
 8005806:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <UART_SetConfig+0x2d0>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005814:	d017      	beq.n	8005846 <UART_SetConfig+0x266>
 8005816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800581a:	d817      	bhi.n	800584c <UART_SetConfig+0x26c>
 800581c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005820:	d00b      	beq.n	800583a <UART_SetConfig+0x25a>
 8005822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005826:	d811      	bhi.n	800584c <UART_SetConfig+0x26c>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <UART_SetConfig+0x254>
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d006      	beq.n	8005840 <UART_SetConfig+0x260>
 8005832:	e00b      	b.n	800584c <UART_SetConfig+0x26c>
 8005834:	2301      	movs	r3, #1
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e075      	b.n	8005926 <UART_SetConfig+0x346>
 800583a:	2302      	movs	r3, #2
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e072      	b.n	8005926 <UART_SetConfig+0x346>
 8005840:	2304      	movs	r3, #4
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e06f      	b.n	8005926 <UART_SetConfig+0x346>
 8005846:	2308      	movs	r3, #8
 8005848:	77fb      	strb	r3, [r7, #31]
 800584a:	e06c      	b.n	8005926 <UART_SetConfig+0x346>
 800584c:	2310      	movs	r3, #16
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e069      	b.n	8005926 <UART_SetConfig+0x346>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <UART_SetConfig+0x2e8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d137      	bne.n	80058cc <UART_SetConfig+0x2ec>
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <UART_SetConfig+0x2d0>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586a:	d017      	beq.n	800589c <UART_SetConfig+0x2bc>
 800586c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005870:	d817      	bhi.n	80058a2 <UART_SetConfig+0x2c2>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d00b      	beq.n	8005890 <UART_SetConfig+0x2b0>
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587c:	d811      	bhi.n	80058a2 <UART_SetConfig+0x2c2>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <UART_SetConfig+0x2aa>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	d006      	beq.n	8005896 <UART_SetConfig+0x2b6>
 8005888:	e00b      	b.n	80058a2 <UART_SetConfig+0x2c2>
 800588a:	2300      	movs	r3, #0
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e04a      	b.n	8005926 <UART_SetConfig+0x346>
 8005890:	2302      	movs	r3, #2
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e047      	b.n	8005926 <UART_SetConfig+0x346>
 8005896:	2304      	movs	r3, #4
 8005898:	77fb      	strb	r3, [r7, #31]
 800589a:	e044      	b.n	8005926 <UART_SetConfig+0x346>
 800589c:	2308      	movs	r3, #8
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e041      	b.n	8005926 <UART_SetConfig+0x346>
 80058a2:	2310      	movs	r3, #16
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e03e      	b.n	8005926 <UART_SetConfig+0x346>
 80058a8:	efff69f3 	.word	0xefff69f3
 80058ac:	40011000 	.word	0x40011000
 80058b0:	40023800 	.word	0x40023800
 80058b4:	40004400 	.word	0x40004400
 80058b8:	40004800 	.word	0x40004800
 80058bc:	40004c00 	.word	0x40004c00
 80058c0:	40005000 	.word	0x40005000
 80058c4:	40011400 	.word	0x40011400
 80058c8:	40007800 	.word	0x40007800
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a71      	ldr	r2, [pc, #452]	; (8005a98 <UART_SetConfig+0x4b8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d125      	bne.n	8005922 <UART_SetConfig+0x342>
 80058d6:	4b71      	ldr	r3, [pc, #452]	; (8005a9c <UART_SetConfig+0x4bc>)
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058e4:	d017      	beq.n	8005916 <UART_SetConfig+0x336>
 80058e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058ea:	d817      	bhi.n	800591c <UART_SetConfig+0x33c>
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d00b      	beq.n	800590a <UART_SetConfig+0x32a>
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f6:	d811      	bhi.n	800591c <UART_SetConfig+0x33c>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <UART_SetConfig+0x324>
 80058fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005900:	d006      	beq.n	8005910 <UART_SetConfig+0x330>
 8005902:	e00b      	b.n	800591c <UART_SetConfig+0x33c>
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e00d      	b.n	8005926 <UART_SetConfig+0x346>
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e00a      	b.n	8005926 <UART_SetConfig+0x346>
 8005910:	2304      	movs	r3, #4
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e007      	b.n	8005926 <UART_SetConfig+0x346>
 8005916:	2308      	movs	r3, #8
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e004      	b.n	8005926 <UART_SetConfig+0x346>
 800591c:	2310      	movs	r3, #16
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e001      	b.n	8005926 <UART_SetConfig+0x346>
 8005922:	2310      	movs	r3, #16
 8005924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592e:	d15a      	bne.n	80059e6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005930:	7ffb      	ldrb	r3, [r7, #31]
 8005932:	2b08      	cmp	r3, #8
 8005934:	d827      	bhi.n	8005986 <UART_SetConfig+0x3a6>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x35c>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fe fbb6 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8005964:	61b8      	str	r0, [r7, #24]
        break;
 8005966:	e013      	b.n	8005990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe fbc6 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 800596c:	61b8      	str	r0, [r7, #24]
        break;
 800596e:	e00f      	b.n	8005990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <UART_SetConfig+0x4c0>)
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e00c      	b.n	8005990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe fabd 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 800597a:	61b8      	str	r0, [r7, #24]
        break;
 800597c:	e008      	b.n	8005990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	61bb      	str	r3, [r7, #24]
        break;
 8005984:	e004      	b.n	8005990 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	77bb      	strb	r3, [r7, #30]
        break;
 800598e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d074      	beq.n	8005a80 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	005a      	lsls	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d916      	bls.n	80059e0 <UART_SetConfig+0x400>
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d212      	bcs.n	80059e0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f023 030f 	bic.w	r3, r3, #15
 80059c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	89fb      	ldrh	r3, [r7, #14]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	89fa      	ldrh	r2, [r7, #14]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	e04f      	b.n	8005a80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	77bb      	strb	r3, [r7, #30]
 80059e4:	e04c      	b.n	8005a80 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d828      	bhi.n	8005a3e <UART_SetConfig+0x45e>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x414>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	08005a3f 	.word	0x08005a3f
 8005a04:	08005a2f 	.word	0x08005a2f
 8005a08:	08005a3f 	.word	0x08005a3f
 8005a0c:	08005a3f 	.word	0x08005a3f
 8005a10:	08005a3f 	.word	0x08005a3f
 8005a14:	08005a37 	.word	0x08005a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a18:	f7fe fb5a 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8005a1c:	61b8      	str	r0, [r7, #24]
        break;
 8005a1e:	e013      	b.n	8005a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fe fb6a 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8005a24:	61b8      	str	r0, [r7, #24]
        break;
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a28:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <UART_SetConfig+0x4c0>)
 8005a2a:	61bb      	str	r3, [r7, #24]
        break;
 8005a2c:	e00c      	b.n	8005a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2e:	f7fe fa61 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8005a32:	61b8      	str	r0, [r7, #24]
        break;
 8005a34:	e008      	b.n	8005a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3a:	61bb      	str	r3, [r7, #24]
        break;
 8005a3c:	e004      	b.n	8005a48 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	77bb      	strb	r3, [r7, #30]
        break;
 8005a46:	bf00      	nop
    }

    if (pclk != 0U)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d018      	beq.n	8005a80 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	085a      	lsrs	r2, r3, #1
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	441a      	add	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d909      	bls.n	8005a7c <UART_SetConfig+0x49c>
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6e:	d205      	bcs.n	8005a7c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	e001      	b.n	8005a80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40007c00 	.word	0x40007c00
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	00f42400 	.word	0x00f42400

08005aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01a      	beq.n	8005bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba2:	d10a      	bne.n	8005bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf8:	f7fc fce0 	bl	80025bc <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d10e      	bne.n	8005c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f82d 	bl	8005c7a <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e023      	b.n	8005c72 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d10e      	bne.n	8005c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f817 	bl	8005c7a <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00d      	b.n	8005c72 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b09c      	sub	sp, #112	; 0x70
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8a:	e0a5      	b.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	f000 80a1 	beq.w	8005dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c96:	f7fc fc91 	bl	80025bc <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d302      	bcc.n	8005cac <UART_WaitOnFlagUntilTimeout+0x32>
 8005ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d13e      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ccc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e6      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e5      	bne.n	8005cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e067      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d04f      	beq.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	d147      	bne.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34
 8005d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005da4:	623a      	str	r2, [r7, #32]
 8005da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e010      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	f43f af4a 	beq.w	8005c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3770      	adds	r7, #112	; 0x70
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b097      	sub	sp, #92	; 0x5c
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	88fa      	ldrh	r2, [r7, #6]
 8005e1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d10e      	bne.n	8005e56 <UART_Start_Receive_IT+0x52>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <UART_Start_Receive_IT+0x48>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e4a:	e02d      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	22ff      	movs	r2, #255	; 0xff
 8005e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e54:	e028      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <UART_Start_Receive_IT+0x76>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <UART_Start_Receive_IT+0x6c>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	22ff      	movs	r2, #255	; 0xff
 8005e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e6e:	e01b      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	227f      	movs	r2, #127	; 0x7f
 8005e74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e78:	e016      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e82:	d10d      	bne.n	8005ea0 <UART_Start_Receive_IT+0x9c>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <UART_Start_Receive_IT+0x92>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	227f      	movs	r2, #127	; 0x7f
 8005e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e94:	e008      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	223f      	movs	r2, #63	; 0x3f
 8005e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e9e:	e003      	b.n	8005ea8 <UART_Start_Receive_IT+0xa4>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2222      	movs	r2, #34	; 0x22
 8005eb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d107      	bne.n	8005f04 <UART_Start_Receive_IT+0x100>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a24      	ldr	r2, [pc, #144]	; (8005f90 <UART_Start_Receive_IT+0x18c>)
 8005f00:	665a      	str	r2, [r3, #100]	; 0x64
 8005f02:	e002      	b.n	8005f0a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <UART_Start_Receive_IT+0x190>)
 8005f08:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_Start_Receive_IT+0x116>
 8005f4c:	e018      	b.n	8005f80 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f043 0320 	orr.w	r3, r3, #32
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6c:	623b      	str	r3, [r7, #32]
 8005f6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69f9      	ldr	r1, [r7, #28]
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	375c      	adds	r7, #92	; 0x5c
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	080063b1 	.word	0x080063b1
 8005f94:	08006255 	.word	0x08006255

08005f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b095      	sub	sp, #84	; 0x54
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e6      	bne.n	8005fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600a:	2b01      	cmp	r3, #1
 800600c:	d118      	bne.n	8006040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0310 	bic.w	r3, r3, #16
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	613b      	str	r3, [r7, #16]
   return(result);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006052:	bf00      	nop
 8006054:	3754      	adds	r7, #84	; 0x54
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff fa8f 	bl	80055a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b08f      	sub	sp, #60	; 0x3c
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006096:	2b21      	cmp	r3, #33	; 0x21
 8006098:	d14c      	bne.n	8006134 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d132      	bne.n	800610c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6979      	ldr	r1, [r7, #20]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	613b      	str	r3, [r7, #16]
   return(result);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e6      	bne.n	80060d8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800610a:	e013      	b.n	8006134 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006134:	bf00      	nop
 8006136:	373c      	adds	r7, #60	; 0x3c
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b091      	sub	sp, #68	; 0x44
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614c:	2b21      	cmp	r3, #33	; 0x21
 800614e:	d151      	bne.n	80061f4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d132      	bne.n	80061c2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	623b      	str	r3, [r7, #32]
   return(result);
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
 800617c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e6      	bne.n	800615c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60fb      	str	r3, [r7, #12]
   return(result);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	617b      	str	r3, [r7, #20]
   return(result);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80061c0:	e018      	b.n	80061f4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80061f4:	bf00      	nop
 80061f6:	3744      	adds	r7, #68	; 0x44
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	60bb      	str	r3, [r7, #8]
   return(result);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	613b      	str	r3, [r7, #16]
   return(result);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e6      	bne.n	8006208 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fc f904 	bl	8002454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800624c:	bf00      	nop
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b096      	sub	sp, #88	; 0x58
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006262:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626a:	2b22      	cmp	r3, #34	; 0x22
 800626c:	f040 8094 	bne.w	8006398 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800627a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800627e:	b2d9      	uxtb	r1, r3
 8006280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	400a      	ands	r2, r1
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d177      	bne.n	80063a8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062cc:	653b      	str	r3, [r7, #80]	; 0x50
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44
 80062d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	623b      	str	r3, [r7, #32]
   return(result);
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800630a:	633a      	str	r2, [r7, #48]	; 0x30
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632e:	2b01      	cmp	r3, #1
 8006330:	d12e      	bne.n	8006390 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	60fb      	str	r3, [r7, #12]
   return(result);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0310 	bic.w	r3, r3, #16
 800634c:	64bb      	str	r3, [r7, #72]	; 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	617b      	str	r3, [r7, #20]
   return(result);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b10      	cmp	r3, #16
 8006376:	d103      	bne.n	8006380 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2210      	movs	r2, #16
 800637e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff f913 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800638e:	e00b      	b.n	80063a8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fc f803 	bl	800239c <HAL_UART_RxCpltCallback>
}
 8006396:	e007      	b.n	80063a8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	619a      	str	r2, [r3, #24]
}
 80063a8:	bf00      	nop
 80063aa:	3758      	adds	r7, #88	; 0x58
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b096      	sub	sp, #88	; 0x58
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063c6:	2b22      	cmp	r3, #34	; 0x22
 80063c8:	f040 8094 	bne.w	80064f4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80063dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80063e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063e4:	4013      	ands	r3, r2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d177      	bne.n	8006504 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	643b      	str	r3, [r7, #64]	; 0x40
 8006434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	61fb      	str	r3, [r7, #28]
   return(result);
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	64bb      	str	r3, [r7, #72]	; 0x48
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	2b01      	cmp	r3, #1
 800648c:	d12e      	bne.n	80064ec <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	647b      	str	r3, [r7, #68]	; 0x44
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6979      	ldr	r1, [r7, #20]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	613b      	str	r3, [r7, #16]
   return(result);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e6      	bne.n	8006494 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d103      	bne.n	80064dc <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2210      	movs	r2, #16
 80064da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff f865 	bl	80055b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064ea:	e00b      	b.n	8006504 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fb ff55 	bl	800239c <HAL_UART_RxCpltCallback>
}
 80064f2:	e007      	b.n	8006504 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0208 	orr.w	r2, r2, #8
 8006502:	619a      	str	r2, [r3, #24]
}
 8006504:	bf00      	nop
 8006506:	3758      	adds	r7, #88	; 0x58
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <__errno>:
 800650c:	4b01      	ldr	r3, [pc, #4]	; (8006514 <__errno+0x8>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000060 	.word	0x20000060

08006518 <__libc_init_array>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4d0d      	ldr	r5, [pc, #52]	; (8006550 <__libc_init_array+0x38>)
 800651c:	4c0d      	ldr	r4, [pc, #52]	; (8006554 <__libc_init_array+0x3c>)
 800651e:	1b64      	subs	r4, r4, r5
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	2600      	movs	r6, #0
 8006524:	42a6      	cmp	r6, r4
 8006526:	d109      	bne.n	800653c <__libc_init_array+0x24>
 8006528:	4d0b      	ldr	r5, [pc, #44]	; (8006558 <__libc_init_array+0x40>)
 800652a:	4c0c      	ldr	r4, [pc, #48]	; (800655c <__libc_init_array+0x44>)
 800652c:	f004 ffc2 	bl	800b4b4 <_init>
 8006530:	1b64      	subs	r4, r4, r5
 8006532:	10a4      	asrs	r4, r4, #2
 8006534:	2600      	movs	r6, #0
 8006536:	42a6      	cmp	r6, r4
 8006538:	d105      	bne.n	8006546 <__libc_init_array+0x2e>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006540:	4798      	blx	r3
 8006542:	3601      	adds	r6, #1
 8006544:	e7ee      	b.n	8006524 <__libc_init_array+0xc>
 8006546:	f855 3b04 	ldr.w	r3, [r5], #4
 800654a:	4798      	blx	r3
 800654c:	3601      	adds	r6, #1
 800654e:	e7f2      	b.n	8006536 <__libc_init_array+0x1e>
 8006550:	0800c0ec 	.word	0x0800c0ec
 8006554:	0800c0ec 	.word	0x0800c0ec
 8006558:	0800c0ec 	.word	0x0800c0ec
 800655c:	0800c0f0 	.word	0x0800c0f0

08006560 <memset>:
 8006560:	4402      	add	r2, r0
 8006562:	4603      	mov	r3, r0
 8006564:	4293      	cmp	r3, r2
 8006566:	d100      	bne.n	800656a <memset+0xa>
 8006568:	4770      	bx	lr
 800656a:	f803 1b01 	strb.w	r1, [r3], #1
 800656e:	e7f9      	b.n	8006564 <memset+0x4>

08006570 <__cvt>:
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	ed2d 8b02 	vpush	{d8}
 8006576:	eeb0 8b40 	vmov.f64	d8, d0
 800657a:	b085      	sub	sp, #20
 800657c:	4617      	mov	r7, r2
 800657e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006580:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006582:	ee18 2a90 	vmov	r2, s17
 8006586:	f025 0520 	bic.w	r5, r5, #32
 800658a:	2a00      	cmp	r2, #0
 800658c:	bfb6      	itet	lt
 800658e:	222d      	movlt	r2, #45	; 0x2d
 8006590:	2200      	movge	r2, #0
 8006592:	eeb1 8b40 	vneglt.f64	d8, d0
 8006596:	2d46      	cmp	r5, #70	; 0x46
 8006598:	460c      	mov	r4, r1
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	d004      	beq.n	80065a8 <__cvt+0x38>
 800659e:	2d45      	cmp	r5, #69	; 0x45
 80065a0:	d100      	bne.n	80065a4 <__cvt+0x34>
 80065a2:	3401      	adds	r4, #1
 80065a4:	2102      	movs	r1, #2
 80065a6:	e000      	b.n	80065aa <__cvt+0x3a>
 80065a8:	2103      	movs	r1, #3
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	ab02      	add	r3, sp, #8
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4622      	mov	r2, r4
 80065b4:	4633      	mov	r3, r6
 80065b6:	eeb0 0b48 	vmov.f64	d0, d8
 80065ba:	f001 fe05 	bl	80081c8 <_dtoa_r>
 80065be:	2d47      	cmp	r5, #71	; 0x47
 80065c0:	d109      	bne.n	80065d6 <__cvt+0x66>
 80065c2:	07fb      	lsls	r3, r7, #31
 80065c4:	d407      	bmi.n	80065d6 <__cvt+0x66>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ca:	1a1b      	subs	r3, r3, r0
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	b005      	add	sp, #20
 80065d0:	ecbd 8b02 	vpop	{d8}
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	2d46      	cmp	r5, #70	; 0x46
 80065d8:	eb00 0204 	add.w	r2, r0, r4
 80065dc:	d10c      	bne.n	80065f8 <__cvt+0x88>
 80065de:	7803      	ldrb	r3, [r0, #0]
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d107      	bne.n	80065f4 <__cvt+0x84>
 80065e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ec:	bf1c      	itt	ne
 80065ee:	f1c4 0401 	rsbne	r4, r4, #1
 80065f2:	6034      	strne	r4, [r6, #0]
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	441a      	add	r2, r3
 80065f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006600:	bf08      	it	eq
 8006602:	9203      	streq	r2, [sp, #12]
 8006604:	2130      	movs	r1, #48	; 0x30
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	4293      	cmp	r3, r2
 800660a:	d2dc      	bcs.n	80065c6 <__cvt+0x56>
 800660c:	1c5c      	adds	r4, r3, #1
 800660e:	9403      	str	r4, [sp, #12]
 8006610:	7019      	strb	r1, [r3, #0]
 8006612:	e7f8      	b.n	8006606 <__cvt+0x96>

08006614 <__exponent>:
 8006614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006616:	4603      	mov	r3, r0
 8006618:	2900      	cmp	r1, #0
 800661a:	bfb8      	it	lt
 800661c:	4249      	neglt	r1, r1
 800661e:	f803 2b02 	strb.w	r2, [r3], #2
 8006622:	bfb4      	ite	lt
 8006624:	222d      	movlt	r2, #45	; 0x2d
 8006626:	222b      	movge	r2, #43	; 0x2b
 8006628:	2909      	cmp	r1, #9
 800662a:	7042      	strb	r2, [r0, #1]
 800662c:	dd2a      	ble.n	8006684 <__exponent+0x70>
 800662e:	f10d 0407 	add.w	r4, sp, #7
 8006632:	46a4      	mov	ip, r4
 8006634:	270a      	movs	r7, #10
 8006636:	46a6      	mov	lr, r4
 8006638:	460a      	mov	r2, r1
 800663a:	fb91 f6f7 	sdiv	r6, r1, r7
 800663e:	fb07 1516 	mls	r5, r7, r6, r1
 8006642:	3530      	adds	r5, #48	; 0x30
 8006644:	2a63      	cmp	r2, #99	; 0x63
 8006646:	f104 34ff 	add.w	r4, r4, #4294967295
 800664a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800664e:	4631      	mov	r1, r6
 8006650:	dcf1      	bgt.n	8006636 <__exponent+0x22>
 8006652:	3130      	adds	r1, #48	; 0x30
 8006654:	f1ae 0502 	sub.w	r5, lr, #2
 8006658:	f804 1c01 	strb.w	r1, [r4, #-1]
 800665c:	1c44      	adds	r4, r0, #1
 800665e:	4629      	mov	r1, r5
 8006660:	4561      	cmp	r1, ip
 8006662:	d30a      	bcc.n	800667a <__exponent+0x66>
 8006664:	f10d 0209 	add.w	r2, sp, #9
 8006668:	eba2 020e 	sub.w	r2, r2, lr
 800666c:	4565      	cmp	r5, ip
 800666e:	bf88      	it	hi
 8006670:	2200      	movhi	r2, #0
 8006672:	4413      	add	r3, r2
 8006674:	1a18      	subs	r0, r3, r0
 8006676:	b003      	add	sp, #12
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800667e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006682:	e7ed      	b.n	8006660 <__exponent+0x4c>
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	3130      	adds	r1, #48	; 0x30
 8006688:	7083      	strb	r3, [r0, #2]
 800668a:	70c1      	strb	r1, [r0, #3]
 800668c:	1d03      	adds	r3, r0, #4
 800668e:	e7f1      	b.n	8006674 <__exponent+0x60>

08006690 <_printf_float>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b08b      	sub	sp, #44	; 0x2c
 8006696:	460c      	mov	r4, r1
 8006698:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800669c:	4616      	mov	r6, r2
 800669e:	461f      	mov	r7, r3
 80066a0:	4605      	mov	r5, r0
 80066a2:	f002 fe83 	bl	80093ac <_localeconv_r>
 80066a6:	f8d0 b000 	ldr.w	fp, [r0]
 80066aa:	4658      	mov	r0, fp
 80066ac:	f7f9 fdd2 	bl	8000254 <strlen>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9308      	str	r3, [sp, #32]
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	3307      	adds	r3, #7
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	f103 0108 	add.w	r1, r3, #8
 80066c8:	f8c8 1000 	str.w	r1, [r8]
 80066cc:	4682      	mov	sl, r0
 80066ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80066d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006938 <_printf_float+0x2a8>
 80066da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80066de:	eeb0 6bc0 	vabs.f64	d6, d0
 80066e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80066e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ea:	dd24      	ble.n	8006736 <_printf_float+0xa6>
 80066ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80066f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f4:	d502      	bpl.n	80066fc <_printf_float+0x6c>
 80066f6:	232d      	movs	r3, #45	; 0x2d
 80066f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066fc:	4b90      	ldr	r3, [pc, #576]	; (8006940 <_printf_float+0x2b0>)
 80066fe:	4891      	ldr	r0, [pc, #580]	; (8006944 <_printf_float+0x2b4>)
 8006700:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006704:	bf94      	ite	ls
 8006706:	4698      	movls	r8, r3
 8006708:	4680      	movhi	r8, r0
 800670a:	2303      	movs	r3, #3
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	f022 0204 	bic.w	r2, r2, #4
 8006712:	2300      	movs	r3, #0
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	9700      	str	r7, [sp, #0]
 800671a:	4633      	mov	r3, r6
 800671c:	aa09      	add	r2, sp, #36	; 0x24
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f000 f9d3 	bl	8006acc <_printf_common>
 8006726:	3001      	adds	r0, #1
 8006728:	f040 808a 	bne.w	8006840 <_printf_float+0x1b0>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	b00b      	add	sp, #44	; 0x2c
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	eeb4 0b40 	vcmp.f64	d0, d0
 800673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673e:	d709      	bvc.n	8006754 <_printf_float+0xc4>
 8006740:	ee10 3a90 	vmov	r3, s1
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbc      	itt	lt
 8006748:	232d      	movlt	r3, #45	; 0x2d
 800674a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674e:	487e      	ldr	r0, [pc, #504]	; (8006948 <_printf_float+0x2b8>)
 8006750:	4b7e      	ldr	r3, [pc, #504]	; (800694c <_printf_float+0x2bc>)
 8006752:	e7d5      	b.n	8006700 <_printf_float+0x70>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800675a:	9104      	str	r1, [sp, #16]
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	d13c      	bne.n	80067da <_printf_float+0x14a>
 8006760:	2306      	movs	r3, #6
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	2300      	movs	r3, #0
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	ab08      	add	r3, sp, #32
 800676a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800676e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006772:	ab07      	add	r3, sp, #28
 8006774:	6861      	ldr	r1, [r4, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	6022      	str	r2, [r4, #0]
 800677a:	f10d 031b 	add.w	r3, sp, #27
 800677e:	4628      	mov	r0, r5
 8006780:	f7ff fef6 	bl	8006570 <__cvt>
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	9907      	ldr	r1, [sp, #28]
 8006788:	2b47      	cmp	r3, #71	; 0x47
 800678a:	4680      	mov	r8, r0
 800678c:	d108      	bne.n	80067a0 <_printf_float+0x110>
 800678e:	1cc8      	adds	r0, r1, #3
 8006790:	db02      	blt.n	8006798 <_printf_float+0x108>
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	4299      	cmp	r1, r3
 8006796:	dd41      	ble.n	800681c <_printf_float+0x18c>
 8006798:	f1a9 0902 	sub.w	r9, r9, #2
 800679c:	fa5f f989 	uxtb.w	r9, r9
 80067a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067a4:	d820      	bhi.n	80067e8 <_printf_float+0x158>
 80067a6:	3901      	subs	r1, #1
 80067a8:	464a      	mov	r2, r9
 80067aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067ae:	9107      	str	r1, [sp, #28]
 80067b0:	f7ff ff30 	bl	8006614 <__exponent>
 80067b4:	9a08      	ldr	r2, [sp, #32]
 80067b6:	9004      	str	r0, [sp, #16]
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	dc02      	bgt.n	80067c6 <_printf_float+0x136>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	07d2      	lsls	r2, r2, #31
 80067c4:	d501      	bpl.n	80067ca <_printf_float+0x13a>
 80067c6:	3301      	adds	r3, #1
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0a2      	beq.n	8006718 <_printf_float+0x88>
 80067d2:	232d      	movs	r3, #45	; 0x2d
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e79e      	b.n	8006718 <_printf_float+0x88>
 80067da:	9904      	ldr	r1, [sp, #16]
 80067dc:	2947      	cmp	r1, #71	; 0x47
 80067de:	d1c1      	bne.n	8006764 <_printf_float+0xd4>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1bf      	bne.n	8006764 <_printf_float+0xd4>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e7bc      	b.n	8006762 <_printf_float+0xd2>
 80067e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067ec:	d118      	bne.n	8006820 <_printf_float+0x190>
 80067ee:	2900      	cmp	r1, #0
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	dd0b      	ble.n	800680c <_printf_float+0x17c>
 80067f4:	6121      	str	r1, [r4, #16]
 80067f6:	b913      	cbnz	r3, 80067fe <_printf_float+0x16e>
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	07d0      	lsls	r0, r2, #31
 80067fc:	d502      	bpl.n	8006804 <_printf_float+0x174>
 80067fe:	3301      	adds	r3, #1
 8006800:	440b      	add	r3, r1
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	2300      	movs	r3, #0
 8006806:	65a1      	str	r1, [r4, #88]	; 0x58
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	e7de      	b.n	80067ca <_printf_float+0x13a>
 800680c:	b913      	cbnz	r3, 8006814 <_printf_float+0x184>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	07d2      	lsls	r2, r2, #31
 8006812:	d501      	bpl.n	8006818 <_printf_float+0x188>
 8006814:	3302      	adds	r3, #2
 8006816:	e7f4      	b.n	8006802 <_printf_float+0x172>
 8006818:	2301      	movs	r3, #1
 800681a:	e7f2      	b.n	8006802 <_printf_float+0x172>
 800681c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	4299      	cmp	r1, r3
 8006824:	db05      	blt.n	8006832 <_printf_float+0x1a2>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6121      	str	r1, [r4, #16]
 800682a:	07d8      	lsls	r0, r3, #31
 800682c:	d5ea      	bpl.n	8006804 <_printf_float+0x174>
 800682e:	1c4b      	adds	r3, r1, #1
 8006830:	e7e7      	b.n	8006802 <_printf_float+0x172>
 8006832:	2900      	cmp	r1, #0
 8006834:	bfd4      	ite	le
 8006836:	f1c1 0202 	rsble	r2, r1, #2
 800683a:	2201      	movgt	r2, #1
 800683c:	4413      	add	r3, r2
 800683e:	e7e0      	b.n	8006802 <_printf_float+0x172>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	055a      	lsls	r2, r3, #21
 8006844:	d407      	bmi.n	8006856 <_printf_float+0x1c6>
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	4642      	mov	r2, r8
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d12a      	bne.n	80068aa <_printf_float+0x21a>
 8006854:	e76a      	b.n	800672c <_printf_float+0x9c>
 8006856:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800685a:	f240 80e2 	bls.w	8006a22 <_printf_float+0x392>
 800685e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006862:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686a:	d133      	bne.n	80068d4 <_printf_float+0x244>
 800686c:	4a38      	ldr	r2, [pc, #224]	; (8006950 <_printf_float+0x2c0>)
 800686e:	2301      	movs	r3, #1
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af58 	beq.w	800672c <_printf_float+0x9c>
 800687c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006880:	429a      	cmp	r2, r3
 8006882:	db02      	blt.n	800688a <_printf_float+0x1fa>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07d8      	lsls	r0, r3, #31
 8006888:	d50f      	bpl.n	80068aa <_printf_float+0x21a>
 800688a:	4653      	mov	r3, sl
 800688c:	465a      	mov	r2, fp
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f af49 	beq.w	800672c <_printf_float+0x9c>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	f104 091a 	add.w	r9, r4, #26
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dc09      	bgt.n	80068be <_printf_float+0x22e>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	079b      	lsls	r3, r3, #30
 80068ae:	f100 8108 	bmi.w	8006ac2 <_printf_float+0x432>
 80068b2:	68e0      	ldr	r0, [r4, #12]
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bfb8      	it	lt
 80068ba:	4618      	movlt	r0, r3
 80068bc:	e738      	b.n	8006730 <_printf_float+0xa0>
 80068be:	2301      	movs	r3, #1
 80068c0:	464a      	mov	r2, r9
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f af2f 	beq.w	800672c <_printf_float+0x9c>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	e7e6      	b.n	80068a2 <_printf_float+0x212>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc3c      	bgt.n	8006954 <_printf_float+0x2c4>
 80068da:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <_printf_float+0x2c0>)
 80068dc:	2301      	movs	r3, #1
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f af21 	beq.w	800672c <_printf_float+0x9c>
 80068ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d102      	bne.n	80068f8 <_printf_float+0x268>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07d9      	lsls	r1, r3, #31
 80068f6:	d5d8      	bpl.n	80068aa <_printf_float+0x21a>
 80068f8:	4653      	mov	r3, sl
 80068fa:	465a      	mov	r2, fp
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af12 	beq.w	800672c <_printf_float+0x9c>
 8006908:	f04f 0900 	mov.w	r9, #0
 800690c:	f104 0a1a 	add.w	sl, r4, #26
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	425b      	negs	r3, r3
 8006914:	454b      	cmp	r3, r9
 8006916:	dc01      	bgt.n	800691c <_printf_float+0x28c>
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	e795      	b.n	8006848 <_printf_float+0x1b8>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af00 	beq.w	800672c <_printf_float+0x9c>
 800692c:	f109 0901 	add.w	r9, r9, #1
 8006930:	e7ee      	b.n	8006910 <_printf_float+0x280>
 8006932:	bf00      	nop
 8006934:	f3af 8000 	nop.w
 8006938:	ffffffff 	.word	0xffffffff
 800693c:	7fefffff 	.word	0x7fefffff
 8006940:	0800bc1c 	.word	0x0800bc1c
 8006944:	0800bc20 	.word	0x0800bc20
 8006948:	0800bc28 	.word	0x0800bc28
 800694c:	0800bc24 	.word	0x0800bc24
 8006950:	0800c031 	.word	0x0800c031
 8006954:	9a08      	ldr	r2, [sp, #32]
 8006956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006958:	429a      	cmp	r2, r3
 800695a:	bfa8      	it	ge
 800695c:	461a      	movge	r2, r3
 800695e:	2a00      	cmp	r2, #0
 8006960:	4691      	mov	r9, r2
 8006962:	dc38      	bgt.n	80069d6 <_printf_float+0x346>
 8006964:	2300      	movs	r3, #0
 8006966:	9305      	str	r3, [sp, #20]
 8006968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800696c:	f104 021a 	add.w	r2, r4, #26
 8006970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006972:	9905      	ldr	r1, [sp, #20]
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	eba3 0309 	sub.w	r3, r3, r9
 800697a:	428b      	cmp	r3, r1
 800697c:	dc33      	bgt.n	80069e6 <_printf_float+0x356>
 800697e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006982:	429a      	cmp	r2, r3
 8006984:	db3c      	blt.n	8006a00 <_printf_float+0x370>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	07da      	lsls	r2, r3, #31
 800698a:	d439      	bmi.n	8006a00 <_printf_float+0x370>
 800698c:	9a08      	ldr	r2, [sp, #32]
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	9907      	ldr	r1, [sp, #28]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	eba2 0901 	sub.w	r9, r2, r1
 8006998:	4599      	cmp	r9, r3
 800699a:	bfa8      	it	ge
 800699c:	4699      	movge	r9, r3
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	dc35      	bgt.n	8006a10 <_printf_float+0x380>
 80069a4:	f04f 0800 	mov.w	r8, #0
 80069a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ac:	f104 0a1a 	add.w	sl, r4, #26
 80069b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	eba3 0309 	sub.w	r3, r3, r9
 80069ba:	4543      	cmp	r3, r8
 80069bc:	f77f af75 	ble.w	80068aa <_printf_float+0x21a>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4652      	mov	r2, sl
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f aeae 	beq.w	800672c <_printf_float+0x9c>
 80069d0:	f108 0801 	add.w	r8, r8, #1
 80069d4:	e7ec      	b.n	80069b0 <_printf_float+0x320>
 80069d6:	4613      	mov	r3, r2
 80069d8:	4631      	mov	r1, r6
 80069da:	4642      	mov	r2, r8
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	d1bf      	bne.n	8006964 <_printf_float+0x2d4>
 80069e4:	e6a2      	b.n	800672c <_printf_float+0x9c>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	9204      	str	r2, [sp, #16]
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae9b 	beq.w	800672c <_printf_float+0x9c>
 80069f6:	9b05      	ldr	r3, [sp, #20]
 80069f8:	9a04      	ldr	r2, [sp, #16]
 80069fa:	3301      	adds	r3, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	e7b7      	b.n	8006970 <_printf_float+0x2e0>
 8006a00:	4653      	mov	r3, sl
 8006a02:	465a      	mov	r2, fp
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d1be      	bne.n	800698c <_printf_float+0x2fc>
 8006a0e:	e68d      	b.n	800672c <_printf_float+0x9c>
 8006a10:	9a04      	ldr	r2, [sp, #16]
 8006a12:	464b      	mov	r3, r9
 8006a14:	4442      	add	r2, r8
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d1c1      	bne.n	80069a4 <_printf_float+0x314>
 8006a20:	e684      	b.n	800672c <_printf_float+0x9c>
 8006a22:	9a08      	ldr	r2, [sp, #32]
 8006a24:	2a01      	cmp	r2, #1
 8006a26:	dc01      	bgt.n	8006a2c <_printf_float+0x39c>
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d537      	bpl.n	8006a9c <_printf_float+0x40c>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4642      	mov	r2, r8
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f ae78 	beq.w	800672c <_printf_float+0x9c>
 8006a3c:	4653      	mov	r3, sl
 8006a3e:	465a      	mov	r2, fp
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f ae70 	beq.w	800672c <_printf_float+0x9c>
 8006a4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	d01b      	beq.n	8006a92 <_printf_float+0x402>
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	f108 0201 	add.w	r2, r8, #1
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d10e      	bne.n	8006a8a <_printf_float+0x3fa>
 8006a6c:	e65e      	b.n	800672c <_printf_float+0x9c>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	464a      	mov	r2, r9
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae57 	beq.w	800672c <_printf_float+0x9c>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	9b08      	ldr	r3, [sp, #32]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	4543      	cmp	r3, r8
 8006a88:	dcf1      	bgt.n	8006a6e <_printf_float+0x3de>
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a90:	e6db      	b.n	800684a <_printf_float+0x1ba>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	f104 091a 	add.w	r9, r4, #26
 8006a9a:	e7f2      	b.n	8006a82 <_printf_float+0x3f2>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	e7df      	b.n	8006a62 <_printf_float+0x3d2>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae3d 	beq.w	800672c <_printf_float+0x9c>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	4543      	cmp	r3, r8
 8006abe:	dcf0      	bgt.n	8006aa2 <_printf_float+0x412>
 8006ac0:	e6f7      	b.n	80068b2 <_printf_float+0x222>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f104 0919 	add.w	r9, r4, #25
 8006aca:	e7f4      	b.n	8006ab6 <_printf_float+0x426>

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfb8      	it	lt
 8006ae0:	4613      	movlt	r3, r2
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc26      	bgt.n	8006b62 <_printf_common+0x96>
 8006b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b18:	1e13      	subs	r3, r2, #0
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d42b      	bmi.n	8006b7c <_printf_common+0xb0>
 8006b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d01e      	beq.n	8006b70 <_printf_common+0xa4>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	68e5      	ldr	r5, [r4, #12]
 8006b36:	6832      	ldr	r2, [r6, #0]
 8006b38:	f003 0306 	and.w	r3, r3, #6
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	bf08      	it	eq
 8006b40:	1aad      	subeq	r5, r5, r2
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	bf0c      	ite	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	2500      	movne	r5, #0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bfc4      	itt	gt
 8006b52:	1a9b      	subgt	r3, r3, r2
 8006b54:	18ed      	addgt	r5, r5, r3
 8006b56:	2600      	movs	r6, #0
 8006b58:	341a      	adds	r4, #26
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d11a      	bne.n	8006b94 <_printf_common+0xc8>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e008      	b.n	8006b74 <_printf_common+0xa8>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4649      	mov	r1, r9
 8006b68:	4638      	mov	r0, r7
 8006b6a:	47c0      	blx	r8
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d103      	bne.n	8006b78 <_printf_common+0xac>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7c6      	b.n	8006b0a <_printf_common+0x3e>
 8006b7c:	18e1      	adds	r1, r4, r3
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	2030      	movs	r0, #48	; 0x30
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b86:	4422      	add	r2, r4
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b90:	3302      	adds	r3, #2
 8006b92:	e7c7      	b.n	8006b24 <_printf_common+0x58>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4622      	mov	r2, r4
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0e6      	beq.n	8006b70 <_printf_common+0xa4>
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7d9      	b.n	8006b5a <_printf_common+0x8e>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	4691      	mov	r9, r2
 8006bb0:	7e27      	ldrb	r7, [r4, #24]
 8006bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	; 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d8 	beq.w	8006d7a <_printf_i+0x1d2>
 8006bca:	2f58      	cmp	r7, #88	; 0x58
 8006bcc:	f000 80a3 	beq.w	8006d16 <_printf_i+0x16e>
 8006bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a001      	add	r0, pc, #4	; (adr r0, 8006be8 <_printf_i+0x40>)
 8006be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d61 	.word	0x08006d61
 8006c18:	08006c85 	.word	0x08006c85
 8006c1c:	08006d43 	.word	0x08006d43
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d83 	.word	0x08006d83
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d4b 	.word	0x08006d4b
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	600a      	str	r2, [r1, #0]
 8006c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0a3      	b.n	8006d9c <_printf_i+0x1f4>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	6808      	ldr	r0, [r1, #0]
 8006c58:	062e      	lsls	r6, r5, #24
 8006c5a:	f100 0304 	add.w	r3, r0, #4
 8006c5e:	d50a      	bpl.n	8006c76 <_printf_i+0xce>
 8006c60:	6805      	ldr	r5, [r0, #0]
 8006c62:	600b      	str	r3, [r1, #0]
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	da03      	bge.n	8006c70 <_printf_i+0xc8>
 8006c68:	232d      	movs	r3, #45	; 0x2d
 8006c6a:	426d      	negs	r5, r5
 8006c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c70:	485e      	ldr	r0, [pc, #376]	; (8006dec <_printf_i+0x244>)
 8006c72:	230a      	movs	r3, #10
 8006c74:	e019      	b.n	8006caa <_printf_i+0x102>
 8006c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c7a:	6805      	ldr	r5, [r0, #0]
 8006c7c:	600b      	str	r3, [r1, #0]
 8006c7e:	bf18      	it	ne
 8006c80:	b22d      	sxthne	r5, r5
 8006c82:	e7ef      	b.n	8006c64 <_printf_i+0xbc>
 8006c84:	680b      	ldr	r3, [r1, #0]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	1d18      	adds	r0, r3, #4
 8006c8a:	6008      	str	r0, [r1, #0]
 8006c8c:	0628      	lsls	r0, r5, #24
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0xec>
 8006c90:	681d      	ldr	r5, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0xf2>
 8006c94:	0669      	lsls	r1, r5, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0xe8>
 8006c98:	881d      	ldrh	r5, [r3, #0]
 8006c9a:	4854      	ldr	r0, [pc, #336]	; (8006dec <_printf_i+0x244>)
 8006c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	230a      	movne	r3, #10
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006caa:	6866      	ldr	r6, [r4, #4]
 8006cac:	60a6      	str	r6, [r4, #8]
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	bfa2      	ittt	ge
 8006cb2:	6821      	ldrge	r1, [r4, #0]
 8006cb4:	f021 0104 	bicge.w	r1, r1, #4
 8006cb8:	6021      	strge	r1, [r4, #0]
 8006cba:	b90d      	cbnz	r5, 8006cc0 <_printf_i+0x118>
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	d04d      	beq.n	8006d5c <_printf_i+0x1b4>
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cca:	5dc7      	ldrb	r7, [r0, r7]
 8006ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cd0:	462f      	mov	r7, r5
 8006cd2:	42bb      	cmp	r3, r7
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	d9f4      	bls.n	8006cc2 <_printf_i+0x11a>
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10b      	bne.n	8006cf4 <_printf_i+0x14c>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07df      	lsls	r7, r3, #31
 8006ce0:	d508      	bpl.n	8006cf4 <_printf_i+0x14c>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bfde      	ittt	le
 8006cea:	2330      	movle	r3, #48	; 0x30
 8006cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cf4:	1b92      	subs	r2, r2, r6
 8006cf6:	6122      	str	r2, [r4, #16]
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	aa03      	add	r2, sp, #12
 8006d00:	4621      	mov	r1, r4
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7ff fee2 	bl	8006acc <_printf_common>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d14c      	bne.n	8006da6 <_printf_i+0x1fe>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	4835      	ldr	r0, [pc, #212]	; (8006dec <_printf_i+0x244>)
 8006d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	680e      	ldr	r6, [r1, #0]
 8006d20:	061f      	lsls	r7, r3, #24
 8006d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d26:	600e      	str	r6, [r1, #0]
 8006d28:	d514      	bpl.n	8006d54 <_printf_i+0x1ac>
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	bf44      	itt	mi
 8006d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d32:	6023      	strmi	r3, [r4, #0]
 8006d34:	b91d      	cbnz	r5, 8006d3e <_printf_i+0x196>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f023 0320 	bic.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	2310      	movs	r3, #16
 8006d40:	e7b0      	b.n	8006ca4 <_printf_i+0xfc>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	2378      	movs	r3, #120	; 0x78
 8006d4c:	4828      	ldr	r0, [pc, #160]	; (8006df0 <_printf_i+0x248>)
 8006d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d52:	e7e3      	b.n	8006d1c <_printf_i+0x174>
 8006d54:	065e      	lsls	r6, r3, #25
 8006d56:	bf48      	it	mi
 8006d58:	b2ad      	uxthmi	r5, r5
 8006d5a:	e7e6      	b.n	8006d2a <_printf_i+0x182>
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	e7bb      	b.n	8006cd8 <_printf_i+0x130>
 8006d60:	680b      	ldr	r3, [r1, #0]
 8006d62:	6826      	ldr	r6, [r4, #0]
 8006d64:	6960      	ldr	r0, [r4, #20]
 8006d66:	1d1d      	adds	r5, r3, #4
 8006d68:	600d      	str	r5, [r1, #0]
 8006d6a:	0635      	lsls	r5, r6, #24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0x1cc>
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <_printf_i+0x1d2>
 8006d74:	0671      	lsls	r1, r6, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0x1c8>
 8006d78:	8018      	strh	r0, [r3, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	4616      	mov	r6, r2
 8006d80:	e7ba      	b.n	8006cf8 <_printf_i+0x150>
 8006d82:	680b      	ldr	r3, [r1, #0]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	600a      	str	r2, [r1, #0]
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7f9 fa6e 	bl	8000270 <memchr>
 8006d94:	b108      	cbz	r0, 8006d9a <_printf_i+0x1f2>
 8006d96:	1b80      	subs	r0, r0, r6
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da4:	e7a8      	b.n	8006cf8 <_printf_i+0x150>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	4632      	mov	r2, r6
 8006daa:	4649      	mov	r1, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	47d0      	blx	sl
 8006db0:	3001      	adds	r0, #1
 8006db2:	d0ab      	beq.n	8006d0c <_printf_i+0x164>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	079b      	lsls	r3, r3, #30
 8006db8:	d413      	bmi.n	8006de2 <_printf_i+0x23a>
 8006dba:	68e0      	ldr	r0, [r4, #12]
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	4298      	cmp	r0, r3
 8006dc0:	bfb8      	it	lt
 8006dc2:	4618      	movlt	r0, r3
 8006dc4:	e7a4      	b.n	8006d10 <_printf_i+0x168>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	47d0      	blx	sl
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d09b      	beq.n	8006d0c <_printf_i+0x164>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dcf2      	bgt.n	8006dc6 <_printf_i+0x21e>
 8006de0:	e7eb      	b.n	8006dba <_printf_i+0x212>
 8006de2:	2500      	movs	r5, #0
 8006de4:	f104 0619 	add.w	r6, r4, #25
 8006de8:	e7f5      	b.n	8006dd6 <_printf_i+0x22e>
 8006dea:	bf00      	nop
 8006dec:	0800bc2c 	.word	0x0800bc2c
 8006df0:	0800bc3d 	.word	0x0800bc3d

08006df4 <_scanf_float>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	4617      	mov	r7, r2
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	688b      	ldr	r3, [r1, #8]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e06:	bf83      	ittte	hi
 8006e08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e0c:	195b      	addhi	r3, r3, r5
 8006e0e:	9302      	strhi	r3, [sp, #8]
 8006e10:	2300      	movls	r3, #0
 8006e12:	bf86      	itte	hi
 8006e14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e18:	608b      	strhi	r3, [r1, #8]
 8006e1a:	9302      	strls	r3, [sp, #8]
 8006e1c:	680b      	ldr	r3, [r1, #0]
 8006e1e:	468b      	mov	fp, r1
 8006e20:	2500      	movs	r5, #0
 8006e22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e26:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e2e:	4680      	mov	r8, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	465e      	mov	r6, fp
 8006e34:	46aa      	mov	sl, r5
 8006e36:	46a9      	mov	r9, r5
 8006e38:	9501      	str	r5, [sp, #4]
 8006e3a:	68a2      	ldr	r2, [r4, #8]
 8006e3c:	b152      	cbz	r2, 8006e54 <_scanf_float+0x60>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b4e      	cmp	r3, #78	; 0x4e
 8006e44:	d864      	bhi.n	8006f10 <_scanf_float+0x11c>
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d83c      	bhi.n	8006ec4 <_scanf_float+0xd0>
 8006e4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e4e:	b2c8      	uxtb	r0, r1
 8006e50:	280e      	cmp	r0, #14
 8006e52:	d93a      	bls.n	8006eca <_scanf_float+0xd6>
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	d003      	beq.n	8006e62 <_scanf_float+0x6e>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e66:	f1ba 0f01 	cmp.w	sl, #1
 8006e6a:	f200 8113 	bhi.w	8007094 <_scanf_float+0x2a0>
 8006e6e:	455e      	cmp	r6, fp
 8006e70:	f200 8105 	bhi.w	800707e <_scanf_float+0x28a>
 8006e74:	2501      	movs	r5, #1
 8006e76:	4628      	mov	r0, r5
 8006e78:	b007      	add	sp, #28
 8006e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e82:	2a0d      	cmp	r2, #13
 8006e84:	d8e6      	bhi.n	8006e54 <_scanf_float+0x60>
 8006e86:	a101      	add	r1, pc, #4	; (adr r1, 8006e8c <_scanf_float+0x98>)
 8006e88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e8c:	08006fcb 	.word	0x08006fcb
 8006e90:	08006e55 	.word	0x08006e55
 8006e94:	08006e55 	.word	0x08006e55
 8006e98:	08006e55 	.word	0x08006e55
 8006e9c:	0800702b 	.word	0x0800702b
 8006ea0:	08007003 	.word	0x08007003
 8006ea4:	08006e55 	.word	0x08006e55
 8006ea8:	08006e55 	.word	0x08006e55
 8006eac:	08006fd9 	.word	0x08006fd9
 8006eb0:	08006e55 	.word	0x08006e55
 8006eb4:	08006e55 	.word	0x08006e55
 8006eb8:	08006e55 	.word	0x08006e55
 8006ebc:	08006e55 	.word	0x08006e55
 8006ec0:	08006f91 	.word	0x08006f91
 8006ec4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ec8:	e7db      	b.n	8006e82 <_scanf_float+0x8e>
 8006eca:	290e      	cmp	r1, #14
 8006ecc:	d8c2      	bhi.n	8006e54 <_scanf_float+0x60>
 8006ece:	a001      	add	r0, pc, #4	; (adr r0, 8006ed4 <_scanf_float+0xe0>)
 8006ed0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ed4:	08006f83 	.word	0x08006f83
 8006ed8:	08006e55 	.word	0x08006e55
 8006edc:	08006f83 	.word	0x08006f83
 8006ee0:	08007017 	.word	0x08007017
 8006ee4:	08006e55 	.word	0x08006e55
 8006ee8:	08006f31 	.word	0x08006f31
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f6d 	.word	0x08006f6d
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	2b6e      	cmp	r3, #110	; 0x6e
 8006f12:	d809      	bhi.n	8006f28 <_scanf_float+0x134>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d8b2      	bhi.n	8006e7e <_scanf_float+0x8a>
 8006f18:	2b54      	cmp	r3, #84	; 0x54
 8006f1a:	d077      	beq.n	800700c <_scanf_float+0x218>
 8006f1c:	2b59      	cmp	r3, #89	; 0x59
 8006f1e:	d199      	bne.n	8006e54 <_scanf_float+0x60>
 8006f20:	2d07      	cmp	r5, #7
 8006f22:	d197      	bne.n	8006e54 <_scanf_float+0x60>
 8006f24:	2508      	movs	r5, #8
 8006f26:	e029      	b.n	8006f7c <_scanf_float+0x188>
 8006f28:	2b74      	cmp	r3, #116	; 0x74
 8006f2a:	d06f      	beq.n	800700c <_scanf_float+0x218>
 8006f2c:	2b79      	cmp	r3, #121	; 0x79
 8006f2e:	e7f6      	b.n	8006f1e <_scanf_float+0x12a>
 8006f30:	6821      	ldr	r1, [r4, #0]
 8006f32:	05c8      	lsls	r0, r1, #23
 8006f34:	d51a      	bpl.n	8006f6c <_scanf_float+0x178>
 8006f36:	9b02      	ldr	r3, [sp, #8]
 8006f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f3c:	6021      	str	r1, [r4, #0]
 8006f3e:	f109 0901 	add.w	r9, r9, #1
 8006f42:	b11b      	cbz	r3, 8006f4c <_scanf_float+0x158>
 8006f44:	3b01      	subs	r3, #1
 8006f46:	3201      	adds	r2, #1
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	60a2      	str	r2, [r4, #8]
 8006f4c:	68a3      	ldr	r3, [r4, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	60a3      	str	r3, [r4, #8]
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	3301      	adds	r3, #1
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	607b      	str	r3, [r7, #4]
 8006f60:	f340 8084 	ble.w	800706c <_scanf_float+0x278>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	e766      	b.n	8006e3a <_scanf_float+0x46>
 8006f6c:	eb1a 0f05 	cmn.w	sl, r5
 8006f70:	f47f af70 	bne.w	8006e54 <_scanf_float+0x60>
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f80:	e7e4      	b.n	8006f4c <_scanf_float+0x158>
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	0610      	lsls	r0, r2, #24
 8006f86:	f57f af65 	bpl.w	8006e54 <_scanf_float+0x60>
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	e7f4      	b.n	8006f7a <_scanf_float+0x186>
 8006f90:	f1ba 0f00 	cmp.w	sl, #0
 8006f94:	d10e      	bne.n	8006fb4 <_scanf_float+0x1c0>
 8006f96:	f1b9 0f00 	cmp.w	r9, #0
 8006f9a:	d10e      	bne.n	8006fba <_scanf_float+0x1c6>
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fa6:	d108      	bne.n	8006fba <_scanf_float+0x1c6>
 8006fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	f04f 0a01 	mov.w	sl, #1
 8006fb2:	e7e3      	b.n	8006f7c <_scanf_float+0x188>
 8006fb4:	f1ba 0f02 	cmp.w	sl, #2
 8006fb8:	d055      	beq.n	8007066 <_scanf_float+0x272>
 8006fba:	2d01      	cmp	r5, #1
 8006fbc:	d002      	beq.n	8006fc4 <_scanf_float+0x1d0>
 8006fbe:	2d04      	cmp	r5, #4
 8006fc0:	f47f af48 	bne.w	8006e54 <_scanf_float+0x60>
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	b2ed      	uxtb	r5, r5
 8006fc8:	e7d8      	b.n	8006f7c <_scanf_float+0x188>
 8006fca:	f1ba 0f01 	cmp.w	sl, #1
 8006fce:	f47f af41 	bne.w	8006e54 <_scanf_float+0x60>
 8006fd2:	f04f 0a02 	mov.w	sl, #2
 8006fd6:	e7d1      	b.n	8006f7c <_scanf_float+0x188>
 8006fd8:	b97d      	cbnz	r5, 8006ffa <_scanf_float+0x206>
 8006fda:	f1b9 0f00 	cmp.w	r9, #0
 8006fde:	f47f af3c 	bne.w	8006e5a <_scanf_float+0x66>
 8006fe2:	6822      	ldr	r2, [r4, #0]
 8006fe4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fe8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fec:	f47f af39 	bne.w	8006e62 <_scanf_float+0x6e>
 8006ff0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ff4:	6022      	str	r2, [r4, #0]
 8006ff6:	2501      	movs	r5, #1
 8006ff8:	e7c0      	b.n	8006f7c <_scanf_float+0x188>
 8006ffa:	2d03      	cmp	r5, #3
 8006ffc:	d0e2      	beq.n	8006fc4 <_scanf_float+0x1d0>
 8006ffe:	2d05      	cmp	r5, #5
 8007000:	e7de      	b.n	8006fc0 <_scanf_float+0x1cc>
 8007002:	2d02      	cmp	r5, #2
 8007004:	f47f af26 	bne.w	8006e54 <_scanf_float+0x60>
 8007008:	2503      	movs	r5, #3
 800700a:	e7b7      	b.n	8006f7c <_scanf_float+0x188>
 800700c:	2d06      	cmp	r5, #6
 800700e:	f47f af21 	bne.w	8006e54 <_scanf_float+0x60>
 8007012:	2507      	movs	r5, #7
 8007014:	e7b2      	b.n	8006f7c <_scanf_float+0x188>
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	0591      	lsls	r1, r2, #22
 800701a:	f57f af1b 	bpl.w	8006e54 <_scanf_float+0x60>
 800701e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	f8cd 9004 	str.w	r9, [sp, #4]
 8007028:	e7a8      	b.n	8006f7c <_scanf_float+0x188>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007030:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007034:	d006      	beq.n	8007044 <_scanf_float+0x250>
 8007036:	0550      	lsls	r0, r2, #21
 8007038:	f57f af0c 	bpl.w	8006e54 <_scanf_float+0x60>
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	f43f af0f 	beq.w	8006e62 <_scanf_float+0x6e>
 8007044:	0591      	lsls	r1, r2, #22
 8007046:	bf58      	it	pl
 8007048:	9901      	ldrpl	r1, [sp, #4]
 800704a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800704e:	bf58      	it	pl
 8007050:	eba9 0101 	subpl.w	r1, r9, r1
 8007054:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007058:	bf58      	it	pl
 800705a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	e78a      	b.n	8006f7c <_scanf_float+0x188>
 8007066:	f04f 0a03 	mov.w	sl, #3
 800706a:	e787      	b.n	8006f7c <_scanf_float+0x188>
 800706c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007070:	4639      	mov	r1, r7
 8007072:	4640      	mov	r0, r8
 8007074:	4798      	blx	r3
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f aedf 	beq.w	8006e3a <_scanf_float+0x46>
 800707c:	e6ea      	b.n	8006e54 <_scanf_float+0x60>
 800707e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007086:	463a      	mov	r2, r7
 8007088:	4640      	mov	r0, r8
 800708a:	4798      	blx	r3
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	3b01      	subs	r3, #1
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	e6ec      	b.n	8006e6e <_scanf_float+0x7a>
 8007094:	1e6b      	subs	r3, r5, #1
 8007096:	2b06      	cmp	r3, #6
 8007098:	d825      	bhi.n	80070e6 <_scanf_float+0x2f2>
 800709a:	2d02      	cmp	r5, #2
 800709c:	d836      	bhi.n	800710c <_scanf_float+0x318>
 800709e:	455e      	cmp	r6, fp
 80070a0:	f67f aee8 	bls.w	8006e74 <_scanf_float+0x80>
 80070a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ac:	463a      	mov	r2, r7
 80070ae:	4640      	mov	r0, r8
 80070b0:	4798      	blx	r3
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	e7f1      	b.n	800709e <_scanf_float+0x2aa>
 80070ba:	9802      	ldr	r0, [sp, #8]
 80070bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070c4:	9002      	str	r0, [sp, #8]
 80070c6:	463a      	mov	r2, r7
 80070c8:	4640      	mov	r0, r8
 80070ca:	4798      	blx	r3
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d6:	fa5f fa8a 	uxtb.w	sl, sl
 80070da:	f1ba 0f02 	cmp.w	sl, #2
 80070de:	d1ec      	bne.n	80070ba <_scanf_float+0x2c6>
 80070e0:	3d03      	subs	r5, #3
 80070e2:	b2ed      	uxtb	r5, r5
 80070e4:	1b76      	subs	r6, r6, r5
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	05da      	lsls	r2, r3, #23
 80070ea:	d52f      	bpl.n	800714c <_scanf_float+0x358>
 80070ec:	055b      	lsls	r3, r3, #21
 80070ee:	d510      	bpl.n	8007112 <_scanf_float+0x31e>
 80070f0:	455e      	cmp	r6, fp
 80070f2:	f67f aebf 	bls.w	8006e74 <_scanf_float+0x80>
 80070f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fe:	463a      	mov	r2, r7
 8007100:	4640      	mov	r0, r8
 8007102:	4798      	blx	r3
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	3b01      	subs	r3, #1
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	e7f1      	b.n	80070f0 <_scanf_float+0x2fc>
 800710c:	46aa      	mov	sl, r5
 800710e:	9602      	str	r6, [sp, #8]
 8007110:	e7df      	b.n	80070d2 <_scanf_float+0x2de>
 8007112:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	2965      	cmp	r1, #101	; 0x65
 800711a:	f103 33ff 	add.w	r3, r3, #4294967295
 800711e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	d00c      	beq.n	8007140 <_scanf_float+0x34c>
 8007126:	2945      	cmp	r1, #69	; 0x45
 8007128:	d00a      	beq.n	8007140 <_scanf_float+0x34c>
 800712a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712e:	463a      	mov	r2, r7
 8007130:	4640      	mov	r0, r8
 8007132:	4798      	blx	r3
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800713a:	3b01      	subs	r3, #1
 800713c:	1eb5      	subs	r5, r6, #2
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007144:	463a      	mov	r2, r7
 8007146:	4640      	mov	r0, r8
 8007148:	4798      	blx	r3
 800714a:	462e      	mov	r6, r5
 800714c:	6825      	ldr	r5, [r4, #0]
 800714e:	f015 0510 	ands.w	r5, r5, #16
 8007152:	d14d      	bne.n	80071f0 <_scanf_float+0x3fc>
 8007154:	7035      	strb	r5, [r6, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800715c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007160:	d11a      	bne.n	8007198 <_scanf_float+0x3a4>
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	454b      	cmp	r3, r9
 8007166:	eba3 0209 	sub.w	r2, r3, r9
 800716a:	d122      	bne.n	80071b2 <_scanf_float+0x3be>
 800716c:	2200      	movs	r2, #0
 800716e:	4659      	mov	r1, fp
 8007170:	4640      	mov	r0, r8
 8007172:	f000 feef 	bl	8007f54 <_strtod_r>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	6821      	ldr	r1, [r4, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f011 0f02 	tst.w	r1, #2
 8007180:	f103 0204 	add.w	r2, r3, #4
 8007184:	d020      	beq.n	80071c8 <_scanf_float+0x3d4>
 8007186:	9903      	ldr	r1, [sp, #12]
 8007188:	600a      	str	r2, [r1, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	ed83 0b00 	vstr	d0, [r3]
 8007190:	68e3      	ldr	r3, [r4, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60e3      	str	r3, [r4, #12]
 8007196:	e66e      	b.n	8006e76 <_scanf_float+0x82>
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0e6      	beq.n	800716c <_scanf_float+0x378>
 800719e:	9905      	ldr	r1, [sp, #20]
 80071a0:	230a      	movs	r3, #10
 80071a2:	462a      	mov	r2, r5
 80071a4:	3101      	adds	r1, #1
 80071a6:	4640      	mov	r0, r8
 80071a8:	f000 ff5e 	bl	8008068 <_strtol_r>
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	9e05      	ldr	r6, [sp, #20]
 80071b0:	1ac2      	subs	r2, r0, r3
 80071b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071b6:	429e      	cmp	r6, r3
 80071b8:	bf28      	it	cs
 80071ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071be:	490d      	ldr	r1, [pc, #52]	; (80071f4 <_scanf_float+0x400>)
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f821 	bl	8007208 <siprintf>
 80071c6:	e7d1      	b.n	800716c <_scanf_float+0x378>
 80071c8:	f011 0f04 	tst.w	r1, #4
 80071cc:	9903      	ldr	r1, [sp, #12]
 80071ce:	600a      	str	r2, [r1, #0]
 80071d0:	d1db      	bne.n	800718a <_scanf_float+0x396>
 80071d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80071d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071da:	681e      	ldr	r6, [r3, #0]
 80071dc:	d705      	bvc.n	80071ea <_scanf_float+0x3f6>
 80071de:	4806      	ldr	r0, [pc, #24]	; (80071f8 <_scanf_float+0x404>)
 80071e0:	f000 f80c 	bl	80071fc <nanf>
 80071e4:	ed86 0a00 	vstr	s0, [r6]
 80071e8:	e7d2      	b.n	8007190 <_scanf_float+0x39c>
 80071ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80071ee:	e7f9      	b.n	80071e4 <_scanf_float+0x3f0>
 80071f0:	2500      	movs	r5, #0
 80071f2:	e640      	b.n	8006e76 <_scanf_float+0x82>
 80071f4:	0800bc4e 	.word	0x0800bc4e
 80071f8:	0800c083 	.word	0x0800c083

080071fc <nanf>:
 80071fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007204 <nanf+0x8>
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	7fc00000 	.word	0x7fc00000

08007208 <siprintf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b500      	push	{lr}
 800720c:	b09c      	sub	sp, #112	; 0x70
 800720e:	ab1d      	add	r3, sp, #116	; 0x74
 8007210:	9002      	str	r0, [sp, #8]
 8007212:	9006      	str	r0, [sp, #24]
 8007214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007218:	4809      	ldr	r0, [pc, #36]	; (8007240 <siprintf+0x38>)
 800721a:	9107      	str	r1, [sp, #28]
 800721c:	9104      	str	r1, [sp, #16]
 800721e:	4909      	ldr	r1, [pc, #36]	; (8007244 <siprintf+0x3c>)
 8007220:	f853 2b04 	ldr.w	r2, [r3], #4
 8007224:	9105      	str	r1, [sp, #20]
 8007226:	6800      	ldr	r0, [r0, #0]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	a902      	add	r1, sp, #8
 800722c:	f002 fece 	bl	8009fcc <_svfiprintf_r>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	b01c      	add	sp, #112	; 0x70
 8007238:	f85d eb04 	ldr.w	lr, [sp], #4
 800723c:	b003      	add	sp, #12
 800723e:	4770      	bx	lr
 8007240:	20000060 	.word	0x20000060
 8007244:	ffff0208 	.word	0xffff0208

08007248 <siscanf>:
 8007248:	b40e      	push	{r1, r2, r3}
 800724a:	b510      	push	{r4, lr}
 800724c:	b09f      	sub	sp, #124	; 0x7c
 800724e:	ac21      	add	r4, sp, #132	; 0x84
 8007250:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007254:	f854 2b04 	ldr.w	r2, [r4], #4
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800725e:	9004      	str	r0, [sp, #16]
 8007260:	9008      	str	r0, [sp, #32]
 8007262:	f7f8 fff7 	bl	8000254 <strlen>
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <siscanf+0x50>)
 8007268:	9005      	str	r0, [sp, #20]
 800726a:	9009      	str	r0, [sp, #36]	; 0x24
 800726c:	930d      	str	r3, [sp, #52]	; 0x34
 800726e:	480b      	ldr	r0, [pc, #44]	; (800729c <siscanf+0x54>)
 8007270:	9a01      	ldr	r2, [sp, #4]
 8007272:	6800      	ldr	r0, [r0, #0]
 8007274:	9403      	str	r4, [sp, #12]
 8007276:	2300      	movs	r3, #0
 8007278:	9311      	str	r3, [sp, #68]	; 0x44
 800727a:	9316      	str	r3, [sp, #88]	; 0x58
 800727c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007280:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007284:	a904      	add	r1, sp, #16
 8007286:	4623      	mov	r3, r4
 8007288:	f002 fffa 	bl	800a280 <__ssvfiscanf_r>
 800728c:	b01f      	add	sp, #124	; 0x7c
 800728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007292:	b003      	add	sp, #12
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	080072c3 	.word	0x080072c3
 800729c:	20000060 	.word	0x20000060

080072a0 <__sread>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	460c      	mov	r4, r1
 80072a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a8:	f003 faae 	bl	800a808 <_read_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	bfab      	itete	ge
 80072b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072b2:	89a3      	ldrhlt	r3, [r4, #12]
 80072b4:	181b      	addge	r3, r3, r0
 80072b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ba:	bfac      	ite	ge
 80072bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072be:	81a3      	strhlt	r3, [r4, #12]
 80072c0:	bd10      	pop	{r4, pc}

080072c2 <__seofread>:
 80072c2:	2000      	movs	r0, #0
 80072c4:	4770      	bx	lr

080072c6 <__swrite>:
 80072c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ca:	461f      	mov	r7, r3
 80072cc:	898b      	ldrh	r3, [r1, #12]
 80072ce:	05db      	lsls	r3, r3, #23
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4616      	mov	r6, r2
 80072d6:	d505      	bpl.n	80072e4 <__swrite+0x1e>
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	2302      	movs	r3, #2
 80072de:	2200      	movs	r2, #0
 80072e0:	f002 f868 	bl	80093b4 <_lseek_r>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	4632      	mov	r2, r6
 80072f2:	463b      	mov	r3, r7
 80072f4:	4628      	mov	r0, r5
 80072f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	f000 beb7 	b.w	800806c <_write_r>

080072fe <__sseek>:
 80072fe:	b510      	push	{r4, lr}
 8007300:	460c      	mov	r4, r1
 8007302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007306:	f002 f855 	bl	80093b4 <_lseek_r>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	bf15      	itete	ne
 8007310:	6560      	strne	r0, [r4, #84]	; 0x54
 8007312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800731a:	81a3      	strheq	r3, [r4, #12]
 800731c:	bf18      	it	ne
 800731e:	81a3      	strhne	r3, [r4, #12]
 8007320:	bd10      	pop	{r4, pc}

08007322 <__sclose>:
 8007322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007326:	f000 beb3 	b.w	8008090 <_close_r>

0800732a <strncmp>:
 800732a:	b510      	push	{r4, lr}
 800732c:	b16a      	cbz	r2, 800734a <strncmp+0x20>
 800732e:	3901      	subs	r1, #1
 8007330:	1884      	adds	r4, r0, r2
 8007332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007336:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800733a:	4293      	cmp	r3, r2
 800733c:	d103      	bne.n	8007346 <strncmp+0x1c>
 800733e:	42a0      	cmp	r0, r4
 8007340:	d001      	beq.n	8007346 <strncmp+0x1c>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f5      	bne.n	8007332 <strncmp+0x8>
 8007346:	1a98      	subs	r0, r3, r2
 8007348:	bd10      	pop	{r4, pc}
 800734a:	4610      	mov	r0, r2
 800734c:	e7fc      	b.n	8007348 <strncmp+0x1e>

0800734e <strncpy>:
 800734e:	b510      	push	{r4, lr}
 8007350:	3901      	subs	r1, #1
 8007352:	4603      	mov	r3, r0
 8007354:	b132      	cbz	r2, 8007364 <strncpy+0x16>
 8007356:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800735a:	f803 4b01 	strb.w	r4, [r3], #1
 800735e:	3a01      	subs	r2, #1
 8007360:	2c00      	cmp	r4, #0
 8007362:	d1f7      	bne.n	8007354 <strncpy+0x6>
 8007364:	441a      	add	r2, r3
 8007366:	2100      	movs	r1, #0
 8007368:	4293      	cmp	r3, r2
 800736a:	d100      	bne.n	800736e <strncpy+0x20>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	f803 1b01 	strb.w	r1, [r3], #1
 8007372:	e7f9      	b.n	8007368 <strncpy+0x1a>

08007374 <sulp>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	4616      	mov	r6, r2
 800737c:	ec45 4b10 	vmov	d0, r4, r5
 8007380:	f002 fbbe 	bl	8009b00 <__ulp>
 8007384:	b17e      	cbz	r6, 80073a6 <sulp+0x32>
 8007386:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800738a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800738e:	2b00      	cmp	r3, #0
 8007390:	dd09      	ble.n	80073a6 <sulp+0x32>
 8007392:	051b      	lsls	r3, r3, #20
 8007394:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007398:	2000      	movs	r0, #0
 800739a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800739e:	ec41 0b17 	vmov	d7, r0, r1
 80073a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80073a6:	bd70      	pop	{r4, r5, r6, pc}

080073a8 <_strtod_l>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	ed2d 8b0c 	vpush	{d8-d13}
 80073b0:	b09d      	sub	sp, #116	; 0x74
 80073b2:	461f      	mov	r7, r3
 80073b4:	2300      	movs	r3, #0
 80073b6:	9318      	str	r3, [sp, #96]	; 0x60
 80073b8:	4ba6      	ldr	r3, [pc, #664]	; (8007654 <_strtod_l+0x2ac>)
 80073ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	9308      	str	r3, [sp, #32]
 80073c0:	4604      	mov	r4, r0
 80073c2:	4618      	mov	r0, r3
 80073c4:	468a      	mov	sl, r1
 80073c6:	f7f8 ff45 	bl	8000254 <strlen>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	4605      	mov	r5, r0
 80073d0:	f04f 0900 	mov.w	r9, #0
 80073d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80073d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	2a2b      	cmp	r2, #43	; 0x2b
 80073de:	d04d      	beq.n	800747c <_strtod_l+0xd4>
 80073e0:	d83a      	bhi.n	8007458 <_strtod_l+0xb0>
 80073e2:	2a0d      	cmp	r2, #13
 80073e4:	d833      	bhi.n	800744e <_strtod_l+0xa6>
 80073e6:	2a08      	cmp	r2, #8
 80073e8:	d833      	bhi.n	8007452 <_strtod_l+0xaa>
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	d03d      	beq.n	800746a <_strtod_l+0xc2>
 80073ee:	2300      	movs	r3, #0
 80073f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80073f4:	7833      	ldrb	r3, [r6, #0]
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	f040 80b6 	bne.w	8007568 <_strtod_l+0x1c0>
 80073fc:	7873      	ldrb	r3, [r6, #1]
 80073fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007402:	2b58      	cmp	r3, #88	; 0x58
 8007404:	d16d      	bne.n	80074e2 <_strtod_l+0x13a>
 8007406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	ab18      	add	r3, sp, #96	; 0x60
 800740c:	9702      	str	r7, [sp, #8]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4a91      	ldr	r2, [pc, #580]	; (8007658 <_strtod_l+0x2b0>)
 8007412:	ab19      	add	r3, sp, #100	; 0x64
 8007414:	a917      	add	r1, sp, #92	; 0x5c
 8007416:	4620      	mov	r0, r4
 8007418:	f001 fcc0 	bl	8008d9c <__gethex>
 800741c:	f010 0507 	ands.w	r5, r0, #7
 8007420:	4607      	mov	r7, r0
 8007422:	d005      	beq.n	8007430 <_strtod_l+0x88>
 8007424:	2d06      	cmp	r5, #6
 8007426:	d12b      	bne.n	8007480 <_strtod_l+0xd8>
 8007428:	3601      	adds	r6, #1
 800742a:	2300      	movs	r3, #0
 800742c:	9617      	str	r6, [sp, #92]	; 0x5c
 800742e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 856e 	bne.w	8007f14 <_strtod_l+0xb6c>
 8007438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800743a:	b1e3      	cbz	r3, 8007476 <_strtod_l+0xce>
 800743c:	ec49 8b17 	vmov	d7, r8, r9
 8007440:	eeb1 0b47 	vneg.f64	d0, d7
 8007444:	b01d      	add	sp, #116	; 0x74
 8007446:	ecbd 8b0c 	vpop	{d8-d13}
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	2a20      	cmp	r2, #32
 8007450:	d1cd      	bne.n	80073ee <_strtod_l+0x46>
 8007452:	3301      	adds	r3, #1
 8007454:	9317      	str	r3, [sp, #92]	; 0x5c
 8007456:	e7bf      	b.n	80073d8 <_strtod_l+0x30>
 8007458:	2a2d      	cmp	r2, #45	; 0x2d
 800745a:	d1c8      	bne.n	80073ee <_strtod_l+0x46>
 800745c:	2201      	movs	r2, #1
 800745e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	9217      	str	r2, [sp, #92]	; 0x5c
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1c3      	bne.n	80073f2 <_strtod_l+0x4a>
 800746a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800746c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 854d 	bne.w	8007f10 <_strtod_l+0xb68>
 8007476:	ec49 8b10 	vmov	d0, r8, r9
 800747a:	e7e3      	b.n	8007444 <_strtod_l+0x9c>
 800747c:	2200      	movs	r2, #0
 800747e:	e7ee      	b.n	800745e <_strtod_l+0xb6>
 8007480:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007482:	b13a      	cbz	r2, 8007494 <_strtod_l+0xec>
 8007484:	2135      	movs	r1, #53	; 0x35
 8007486:	a81a      	add	r0, sp, #104	; 0x68
 8007488:	f002 fc46 	bl	8009d18 <__copybits>
 800748c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800748e:	4620      	mov	r0, r4
 8007490:	f002 f80a 	bl	80094a8 <_Bfree>
 8007494:	3d01      	subs	r5, #1
 8007496:	2d05      	cmp	r5, #5
 8007498:	d807      	bhi.n	80074aa <_strtod_l+0x102>
 800749a:	e8df f005 	tbb	[pc, r5]
 800749e:	0b0e      	.short	0x0b0e
 80074a0:	030e1d18 	.word	0x030e1d18
 80074a4:	f04f 0900 	mov.w	r9, #0
 80074a8:	46c8      	mov	r8, r9
 80074aa:	073b      	lsls	r3, r7, #28
 80074ac:	d5c0      	bpl.n	8007430 <_strtod_l+0x88>
 80074ae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80074b2:	e7bd      	b.n	8007430 <_strtod_l+0x88>
 80074b4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80074b8:	e7f7      	b.n	80074aa <_strtod_l+0x102>
 80074ba:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80074be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80074cc:	e7ed      	b.n	80074aa <_strtod_l+0x102>
 80074ce:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800765c <_strtod_l+0x2b4>
 80074d2:	f04f 0800 	mov.w	r8, #0
 80074d6:	e7e8      	b.n	80074aa <_strtod_l+0x102>
 80074d8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80074dc:	f04f 38ff 	mov.w	r8, #4294967295
 80074e0:	e7e3      	b.n	80074aa <_strtod_l+0x102>
 80074e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	2b30      	cmp	r3, #48	; 0x30
 80074ec:	d0f9      	beq.n	80074e2 <_strtod_l+0x13a>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d09e      	beq.n	8007430 <_strtod_l+0x88>
 80074f2:	2301      	movs	r3, #1
 80074f4:	9306      	str	r3, [sp, #24]
 80074f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074f8:	930c      	str	r3, [sp, #48]	; 0x30
 80074fa:	2300      	movs	r3, #0
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007500:	461e      	mov	r6, r3
 8007502:	220a      	movs	r2, #10
 8007504:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007506:	f890 b000 	ldrb.w	fp, [r0]
 800750a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	2909      	cmp	r1, #9
 8007512:	d92b      	bls.n	800756c <_strtod_l+0x1c4>
 8007514:	9908      	ldr	r1, [sp, #32]
 8007516:	462a      	mov	r2, r5
 8007518:	f7ff ff07 	bl	800732a <strncmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	d035      	beq.n	800758c <_strtod_l+0x1e4>
 8007520:	2000      	movs	r0, #0
 8007522:	465a      	mov	r2, fp
 8007524:	4633      	mov	r3, r6
 8007526:	4683      	mov	fp, r0
 8007528:	4601      	mov	r1, r0
 800752a:	2a65      	cmp	r2, #101	; 0x65
 800752c:	d001      	beq.n	8007532 <_strtod_l+0x18a>
 800752e:	2a45      	cmp	r2, #69	; 0x45
 8007530:	d118      	bne.n	8007564 <_strtod_l+0x1bc>
 8007532:	b91b      	cbnz	r3, 800753c <_strtod_l+0x194>
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	4303      	orrs	r3, r0
 8007538:	d097      	beq.n	800746a <_strtod_l+0xc2>
 800753a:	2300      	movs	r3, #0
 800753c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007540:	f10a 0201 	add.w	r2, sl, #1
 8007544:	9217      	str	r2, [sp, #92]	; 0x5c
 8007546:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800754a:	2a2b      	cmp	r2, #43	; 0x2b
 800754c:	d077      	beq.n	800763e <_strtod_l+0x296>
 800754e:	2a2d      	cmp	r2, #45	; 0x2d
 8007550:	d07d      	beq.n	800764e <_strtod_l+0x2a6>
 8007552:	f04f 0e00 	mov.w	lr, #0
 8007556:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800755a:	2d09      	cmp	r5, #9
 800755c:	f240 8084 	bls.w	8007668 <_strtod_l+0x2c0>
 8007560:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007564:	2500      	movs	r5, #0
 8007566:	e09f      	b.n	80076a8 <_strtod_l+0x300>
 8007568:	2300      	movs	r3, #0
 800756a:	e7c3      	b.n	80074f4 <_strtod_l+0x14c>
 800756c:	2e08      	cmp	r6, #8
 800756e:	bfd5      	itete	le
 8007570:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007572:	9904      	ldrgt	r1, [sp, #16]
 8007574:	fb02 3301 	mlale	r3, r2, r1, r3
 8007578:	fb02 3301 	mlagt	r3, r2, r1, r3
 800757c:	f100 0001 	add.w	r0, r0, #1
 8007580:	bfd4      	ite	le
 8007582:	930a      	strle	r3, [sp, #40]	; 0x28
 8007584:	9304      	strgt	r3, [sp, #16]
 8007586:	3601      	adds	r6, #1
 8007588:	9017      	str	r0, [sp, #92]	; 0x5c
 800758a:	e7bb      	b.n	8007504 <_strtod_l+0x15c>
 800758c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800758e:	195a      	adds	r2, r3, r5
 8007590:	9217      	str	r2, [sp, #92]	; 0x5c
 8007592:	5d5a      	ldrb	r2, [r3, r5]
 8007594:	b3ae      	cbz	r6, 8007602 <_strtod_l+0x25a>
 8007596:	4683      	mov	fp, r0
 8007598:	4633      	mov	r3, r6
 800759a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800759e:	2909      	cmp	r1, #9
 80075a0:	d912      	bls.n	80075c8 <_strtod_l+0x220>
 80075a2:	2101      	movs	r1, #1
 80075a4:	e7c1      	b.n	800752a <_strtod_l+0x182>
 80075a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80075ac:	785a      	ldrb	r2, [r3, #1]
 80075ae:	3001      	adds	r0, #1
 80075b0:	2a30      	cmp	r2, #48	; 0x30
 80075b2:	d0f8      	beq.n	80075a6 <_strtod_l+0x1fe>
 80075b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	f200 84b0 	bhi.w	8007f1e <_strtod_l+0xb76>
 80075be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075c0:	930c      	str	r3, [sp, #48]	; 0x30
 80075c2:	4683      	mov	fp, r0
 80075c4:	2000      	movs	r0, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	3a30      	subs	r2, #48	; 0x30
 80075ca:	f100 0101 	add.w	r1, r0, #1
 80075ce:	d012      	beq.n	80075f6 <_strtod_l+0x24e>
 80075d0:	448b      	add	fp, r1
 80075d2:	eb00 0c03 	add.w	ip, r0, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	250a      	movs	r5, #10
 80075da:	4561      	cmp	r1, ip
 80075dc:	d113      	bne.n	8007606 <_strtod_l+0x25e>
 80075de:	1819      	adds	r1, r3, r0
 80075e0:	2908      	cmp	r1, #8
 80075e2:	f103 0301 	add.w	r3, r3, #1
 80075e6:	4403      	add	r3, r0
 80075e8:	dc1d      	bgt.n	8007626 <_strtod_l+0x27e>
 80075ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075ec:	210a      	movs	r1, #10
 80075ee:	fb01 2200 	mla	r2, r1, r0, r2
 80075f2:	920a      	str	r2, [sp, #40]	; 0x28
 80075f4:	2100      	movs	r1, #0
 80075f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075f8:	1c50      	adds	r0, r2, #1
 80075fa:	9017      	str	r0, [sp, #92]	; 0x5c
 80075fc:	7852      	ldrb	r2, [r2, #1]
 80075fe:	4608      	mov	r0, r1
 8007600:	e7cb      	b.n	800759a <_strtod_l+0x1f2>
 8007602:	4630      	mov	r0, r6
 8007604:	e7d4      	b.n	80075b0 <_strtod_l+0x208>
 8007606:	2908      	cmp	r1, #8
 8007608:	dc04      	bgt.n	8007614 <_strtod_l+0x26c>
 800760a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800760c:	436f      	muls	r7, r5
 800760e:	970a      	str	r7, [sp, #40]	; 0x28
 8007610:	3101      	adds	r1, #1
 8007612:	e7e2      	b.n	80075da <_strtod_l+0x232>
 8007614:	f101 0e01 	add.w	lr, r1, #1
 8007618:	f1be 0f10 	cmp.w	lr, #16
 800761c:	bfde      	ittt	le
 800761e:	9f04      	ldrle	r7, [sp, #16]
 8007620:	436f      	mulle	r7, r5
 8007622:	9704      	strle	r7, [sp, #16]
 8007624:	e7f4      	b.n	8007610 <_strtod_l+0x268>
 8007626:	2b10      	cmp	r3, #16
 8007628:	bfdf      	itttt	le
 800762a:	9804      	ldrle	r0, [sp, #16]
 800762c:	210a      	movle	r1, #10
 800762e:	fb01 2200 	mlale	r2, r1, r0, r2
 8007632:	9204      	strle	r2, [sp, #16]
 8007634:	e7de      	b.n	80075f4 <_strtod_l+0x24c>
 8007636:	f04f 0b00 	mov.w	fp, #0
 800763a:	2101      	movs	r1, #1
 800763c:	e77a      	b.n	8007534 <_strtod_l+0x18c>
 800763e:	f04f 0e00 	mov.w	lr, #0
 8007642:	f10a 0202 	add.w	r2, sl, #2
 8007646:	9217      	str	r2, [sp, #92]	; 0x5c
 8007648:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800764c:	e783      	b.n	8007556 <_strtod_l+0x1ae>
 800764e:	f04f 0e01 	mov.w	lr, #1
 8007652:	e7f6      	b.n	8007642 <_strtod_l+0x29a>
 8007654:	0800bea8 	.word	0x0800bea8
 8007658:	0800bc54 	.word	0x0800bc54
 800765c:	7ff00000 	.word	0x7ff00000
 8007660:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007662:	1c55      	adds	r5, r2, #1
 8007664:	9517      	str	r5, [sp, #92]	; 0x5c
 8007666:	7852      	ldrb	r2, [r2, #1]
 8007668:	2a30      	cmp	r2, #48	; 0x30
 800766a:	d0f9      	beq.n	8007660 <_strtod_l+0x2b8>
 800766c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007670:	2d08      	cmp	r5, #8
 8007672:	f63f af77 	bhi.w	8007564 <_strtod_l+0x1bc>
 8007676:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800767a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800767c:	9208      	str	r2, [sp, #32]
 800767e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007680:	1c55      	adds	r5, r2, #1
 8007682:	9517      	str	r5, [sp, #92]	; 0x5c
 8007684:	7852      	ldrb	r2, [r2, #1]
 8007686:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800768a:	2f09      	cmp	r7, #9
 800768c:	d937      	bls.n	80076fe <_strtod_l+0x356>
 800768e:	9f08      	ldr	r7, [sp, #32]
 8007690:	1bed      	subs	r5, r5, r7
 8007692:	2d08      	cmp	r5, #8
 8007694:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007698:	dc02      	bgt.n	80076a0 <_strtod_l+0x2f8>
 800769a:	4565      	cmp	r5, ip
 800769c:	bfa8      	it	ge
 800769e:	4665      	movge	r5, ip
 80076a0:	f1be 0f00 	cmp.w	lr, #0
 80076a4:	d000      	beq.n	80076a8 <_strtod_l+0x300>
 80076a6:	426d      	negs	r5, r5
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d14f      	bne.n	800774c <_strtod_l+0x3a4>
 80076ac:	9b06      	ldr	r3, [sp, #24]
 80076ae:	4303      	orrs	r3, r0
 80076b0:	f47f aebe 	bne.w	8007430 <_strtod_l+0x88>
 80076b4:	2900      	cmp	r1, #0
 80076b6:	f47f aed8 	bne.w	800746a <_strtod_l+0xc2>
 80076ba:	2a69      	cmp	r2, #105	; 0x69
 80076bc:	d027      	beq.n	800770e <_strtod_l+0x366>
 80076be:	dc24      	bgt.n	800770a <_strtod_l+0x362>
 80076c0:	2a49      	cmp	r2, #73	; 0x49
 80076c2:	d024      	beq.n	800770e <_strtod_l+0x366>
 80076c4:	2a4e      	cmp	r2, #78	; 0x4e
 80076c6:	f47f aed0 	bne.w	800746a <_strtod_l+0xc2>
 80076ca:	499b      	ldr	r1, [pc, #620]	; (8007938 <_strtod_l+0x590>)
 80076cc:	a817      	add	r0, sp, #92	; 0x5c
 80076ce:	f001 fdbd 	bl	800924c <__match>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	f43f aec9 	beq.w	800746a <_strtod_l+0xc2>
 80076d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b28      	cmp	r3, #40	; 0x28
 80076de:	d12d      	bne.n	800773c <_strtod_l+0x394>
 80076e0:	4996      	ldr	r1, [pc, #600]	; (800793c <_strtod_l+0x594>)
 80076e2:	aa1a      	add	r2, sp, #104	; 0x68
 80076e4:	a817      	add	r0, sp, #92	; 0x5c
 80076e6:	f001 fdc5 	bl	8009274 <__hexnan>
 80076ea:	2805      	cmp	r0, #5
 80076ec:	d126      	bne.n	800773c <_strtod_l+0x394>
 80076ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80076f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80076f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80076fc:	e698      	b.n	8007430 <_strtod_l+0x88>
 80076fe:	250a      	movs	r5, #10
 8007700:	fb05 250c 	mla	r5, r5, ip, r2
 8007704:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007708:	e7b9      	b.n	800767e <_strtod_l+0x2d6>
 800770a:	2a6e      	cmp	r2, #110	; 0x6e
 800770c:	e7db      	b.n	80076c6 <_strtod_l+0x31e>
 800770e:	498c      	ldr	r1, [pc, #560]	; (8007940 <_strtod_l+0x598>)
 8007710:	a817      	add	r0, sp, #92	; 0x5c
 8007712:	f001 fd9b 	bl	800924c <__match>
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f aea7 	beq.w	800746a <_strtod_l+0xc2>
 800771c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800771e:	4989      	ldr	r1, [pc, #548]	; (8007944 <_strtod_l+0x59c>)
 8007720:	3b01      	subs	r3, #1
 8007722:	a817      	add	r0, sp, #92	; 0x5c
 8007724:	9317      	str	r3, [sp, #92]	; 0x5c
 8007726:	f001 fd91 	bl	800924c <__match>
 800772a:	b910      	cbnz	r0, 8007732 <_strtod_l+0x38a>
 800772c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800772e:	3301      	adds	r3, #1
 8007730:	9317      	str	r3, [sp, #92]	; 0x5c
 8007732:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007958 <_strtod_l+0x5b0>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	e679      	b.n	8007430 <_strtod_l+0x88>
 800773c:	4882      	ldr	r0, [pc, #520]	; (8007948 <_strtod_l+0x5a0>)
 800773e:	f003 f877 	bl	800a830 <nan>
 8007742:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007746:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800774a:	e671      	b.n	8007430 <_strtod_l+0x88>
 800774c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007750:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007754:	eba5 020b 	sub.w	r2, r5, fp
 8007758:	2e00      	cmp	r6, #0
 800775a:	bf08      	it	eq
 800775c:	461e      	moveq	r6, r3
 800775e:	2b10      	cmp	r3, #16
 8007760:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007764:	9206      	str	r2, [sp, #24]
 8007766:	461a      	mov	r2, r3
 8007768:	bfa8      	it	ge
 800776a:	2210      	movge	r2, #16
 800776c:	2b09      	cmp	r3, #9
 800776e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007772:	dd0e      	ble.n	8007792 <_strtod_l+0x3ea>
 8007774:	4975      	ldr	r1, [pc, #468]	; (800794c <_strtod_l+0x5a4>)
 8007776:	eddd 7a04 	vldr	s15, [sp, #16]
 800777a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800777e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007782:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800778a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800778e:	ec59 8b17 	vmov	r8, r9, d7
 8007792:	2b0f      	cmp	r3, #15
 8007794:	dc37      	bgt.n	8007806 <_strtod_l+0x45e>
 8007796:	9906      	ldr	r1, [sp, #24]
 8007798:	2900      	cmp	r1, #0
 800779a:	f43f ae49 	beq.w	8007430 <_strtod_l+0x88>
 800779e:	dd23      	ble.n	80077e8 <_strtod_l+0x440>
 80077a0:	2916      	cmp	r1, #22
 80077a2:	dc0b      	bgt.n	80077bc <_strtod_l+0x414>
 80077a4:	4b69      	ldr	r3, [pc, #420]	; (800794c <_strtod_l+0x5a4>)
 80077a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80077aa:	ed93 7b00 	vldr	d7, [r3]
 80077ae:	ec49 8b16 	vmov	d6, r8, r9
 80077b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077b6:	ec59 8b17 	vmov	r8, r9, d7
 80077ba:	e639      	b.n	8007430 <_strtod_l+0x88>
 80077bc:	9806      	ldr	r0, [sp, #24]
 80077be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80077c2:	4281      	cmp	r1, r0
 80077c4:	db1f      	blt.n	8007806 <_strtod_l+0x45e>
 80077c6:	4a61      	ldr	r2, [pc, #388]	; (800794c <_strtod_l+0x5a4>)
 80077c8:	f1c3 030f 	rsb	r3, r3, #15
 80077cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80077d0:	ed91 7b00 	vldr	d7, [r1]
 80077d4:	ec49 8b16 	vmov	d6, r8, r9
 80077d8:	1ac3      	subs	r3, r0, r3
 80077da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80077de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077e2:	ed92 6b00 	vldr	d6, [r2]
 80077e6:	e7e4      	b.n	80077b2 <_strtod_l+0x40a>
 80077e8:	9906      	ldr	r1, [sp, #24]
 80077ea:	3116      	adds	r1, #22
 80077ec:	db0b      	blt.n	8007806 <_strtod_l+0x45e>
 80077ee:	4b57      	ldr	r3, [pc, #348]	; (800794c <_strtod_l+0x5a4>)
 80077f0:	ebab 0505 	sub.w	r5, fp, r5
 80077f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80077f8:	ed95 7b00 	vldr	d7, [r5]
 80077fc:	ec49 8b16 	vmov	d6, r8, r9
 8007800:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007804:	e7d7      	b.n	80077b6 <_strtod_l+0x40e>
 8007806:	9906      	ldr	r1, [sp, #24]
 8007808:	1a9a      	subs	r2, r3, r2
 800780a:	440a      	add	r2, r1
 800780c:	2a00      	cmp	r2, #0
 800780e:	dd74      	ble.n	80078fa <_strtod_l+0x552>
 8007810:	f012 000f 	ands.w	r0, r2, #15
 8007814:	d00a      	beq.n	800782c <_strtod_l+0x484>
 8007816:	494d      	ldr	r1, [pc, #308]	; (800794c <_strtod_l+0x5a4>)
 8007818:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800781c:	ed91 7b00 	vldr	d7, [r1]
 8007820:	ec49 8b16 	vmov	d6, r8, r9
 8007824:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007828:	ec59 8b17 	vmov	r8, r9, d7
 800782c:	f032 020f 	bics.w	r2, r2, #15
 8007830:	d04f      	beq.n	80078d2 <_strtod_l+0x52a>
 8007832:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007836:	dd22      	ble.n	800787e <_strtod_l+0x4d6>
 8007838:	2500      	movs	r5, #0
 800783a:	462e      	mov	r6, r5
 800783c:	950a      	str	r5, [sp, #40]	; 0x28
 800783e:	462f      	mov	r7, r5
 8007840:	2322      	movs	r3, #34	; 0x22
 8007842:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007958 <_strtod_l+0x5b0>
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	f04f 0800 	mov.w	r8, #0
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	f43f adee 	beq.w	8007430 <_strtod_l+0x88>
 8007854:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007856:	4620      	mov	r0, r4
 8007858:	f001 fe26 	bl	80094a8 <_Bfree>
 800785c:	4639      	mov	r1, r7
 800785e:	4620      	mov	r0, r4
 8007860:	f001 fe22 	bl	80094a8 <_Bfree>
 8007864:	4631      	mov	r1, r6
 8007866:	4620      	mov	r0, r4
 8007868:	f001 fe1e 	bl	80094a8 <_Bfree>
 800786c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800786e:	4620      	mov	r0, r4
 8007870:	f001 fe1a 	bl	80094a8 <_Bfree>
 8007874:	4629      	mov	r1, r5
 8007876:	4620      	mov	r0, r4
 8007878:	f001 fe16 	bl	80094a8 <_Bfree>
 800787c:	e5d8      	b.n	8007430 <_strtod_l+0x88>
 800787e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007882:	2000      	movs	r0, #0
 8007884:	4f32      	ldr	r7, [pc, #200]	; (8007950 <_strtod_l+0x5a8>)
 8007886:	1112      	asrs	r2, r2, #4
 8007888:	4601      	mov	r1, r0
 800788a:	2a01      	cmp	r2, #1
 800788c:	dc24      	bgt.n	80078d8 <_strtod_l+0x530>
 800788e:	b108      	cbz	r0, 8007894 <_strtod_l+0x4ec>
 8007890:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007894:	4a2e      	ldr	r2, [pc, #184]	; (8007950 <_strtod_l+0x5a8>)
 8007896:	482f      	ldr	r0, [pc, #188]	; (8007954 <_strtod_l+0x5ac>)
 8007898:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800789c:	ed91 7b00 	vldr	d7, [r1]
 80078a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80078a4:	ec49 8b16 	vmov	d6, r8, r9
 80078a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078b0:	9905      	ldr	r1, [sp, #20]
 80078b2:	4a29      	ldr	r2, [pc, #164]	; (8007958 <_strtod_l+0x5b0>)
 80078b4:	400a      	ands	r2, r1
 80078b6:	4282      	cmp	r2, r0
 80078b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078bc:	d8bc      	bhi.n	8007838 <_strtod_l+0x490>
 80078be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80078c2:	4282      	cmp	r2, r0
 80078c4:	bf86      	itte	hi
 80078c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800795c <_strtod_l+0x5b4>
 80078ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80078ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80078d2:	2200      	movs	r2, #0
 80078d4:	9204      	str	r2, [sp, #16]
 80078d6:	e07f      	b.n	80079d8 <_strtod_l+0x630>
 80078d8:	f012 0f01 	tst.w	r2, #1
 80078dc:	d00a      	beq.n	80078f4 <_strtod_l+0x54c>
 80078de:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80078e2:	ed90 7b00 	vldr	d7, [r0]
 80078e6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80078ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078f2:	2001      	movs	r0, #1
 80078f4:	3101      	adds	r1, #1
 80078f6:	1052      	asrs	r2, r2, #1
 80078f8:	e7c7      	b.n	800788a <_strtod_l+0x4e2>
 80078fa:	d0ea      	beq.n	80078d2 <_strtod_l+0x52a>
 80078fc:	4252      	negs	r2, r2
 80078fe:	f012 000f 	ands.w	r0, r2, #15
 8007902:	d00a      	beq.n	800791a <_strtod_l+0x572>
 8007904:	4911      	ldr	r1, [pc, #68]	; (800794c <_strtod_l+0x5a4>)
 8007906:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800790a:	ed91 7b00 	vldr	d7, [r1]
 800790e:	ec49 8b16 	vmov	d6, r8, r9
 8007912:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007916:	ec59 8b17 	vmov	r8, r9, d7
 800791a:	1112      	asrs	r2, r2, #4
 800791c:	d0d9      	beq.n	80078d2 <_strtod_l+0x52a>
 800791e:	2a1f      	cmp	r2, #31
 8007920:	dd1e      	ble.n	8007960 <_strtod_l+0x5b8>
 8007922:	2500      	movs	r5, #0
 8007924:	462e      	mov	r6, r5
 8007926:	950a      	str	r5, [sp, #40]	; 0x28
 8007928:	462f      	mov	r7, r5
 800792a:	2322      	movs	r3, #34	; 0x22
 800792c:	f04f 0800 	mov.w	r8, #0
 8007930:	f04f 0900 	mov.w	r9, #0
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	e789      	b.n	800784c <_strtod_l+0x4a4>
 8007938:	0800bc29 	.word	0x0800bc29
 800793c:	0800bc68 	.word	0x0800bc68
 8007940:	0800bc21 	.word	0x0800bc21
 8007944:	0800bdac 	.word	0x0800bdac
 8007948:	0800c083 	.word	0x0800c083
 800794c:	0800bf48 	.word	0x0800bf48
 8007950:	0800bf20 	.word	0x0800bf20
 8007954:	7ca00000 	.word	0x7ca00000
 8007958:	7ff00000 	.word	0x7ff00000
 800795c:	7fefffff 	.word	0x7fefffff
 8007960:	f012 0110 	ands.w	r1, r2, #16
 8007964:	bf18      	it	ne
 8007966:	216a      	movne	r1, #106	; 0x6a
 8007968:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800796c:	9104      	str	r1, [sp, #16]
 800796e:	49c0      	ldr	r1, [pc, #768]	; (8007c70 <_strtod_l+0x8c8>)
 8007970:	2000      	movs	r0, #0
 8007972:	07d7      	lsls	r7, r2, #31
 8007974:	d508      	bpl.n	8007988 <_strtod_l+0x5e0>
 8007976:	ed9d 6b08 	vldr	d6, [sp, #32]
 800797a:	ed91 7b00 	vldr	d7, [r1]
 800797e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007982:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007986:	2001      	movs	r0, #1
 8007988:	1052      	asrs	r2, r2, #1
 800798a:	f101 0108 	add.w	r1, r1, #8
 800798e:	d1f0      	bne.n	8007972 <_strtod_l+0x5ca>
 8007990:	b108      	cbz	r0, 8007996 <_strtod_l+0x5ee>
 8007992:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	b1ba      	cbz	r2, 80079ca <_strtod_l+0x622>
 800799a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800799e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	4649      	mov	r1, r9
 80079a6:	dd10      	ble.n	80079ca <_strtod_l+0x622>
 80079a8:	2a1f      	cmp	r2, #31
 80079aa:	f340 8132 	ble.w	8007c12 <_strtod_l+0x86a>
 80079ae:	2a34      	cmp	r2, #52	; 0x34
 80079b0:	bfde      	ittt	le
 80079b2:	3a20      	suble	r2, #32
 80079b4:	f04f 30ff 	movle.w	r0, #4294967295
 80079b8:	fa00 f202 	lslle.w	r2, r0, r2
 80079bc:	f04f 0800 	mov.w	r8, #0
 80079c0:	bfcc      	ite	gt
 80079c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80079c6:	ea02 0901 	andle.w	r9, r2, r1
 80079ca:	ec49 8b17 	vmov	d7, r8, r9
 80079ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	d0a4      	beq.n	8007922 <_strtod_l+0x57a>
 80079d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079da:	9200      	str	r2, [sp, #0]
 80079dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079de:	4632      	mov	r2, r6
 80079e0:	4620      	mov	r0, r4
 80079e2:	f001 fdcd 	bl	8009580 <__s2b>
 80079e6:	900a      	str	r0, [sp, #40]	; 0x28
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f43f af25 	beq.w	8007838 <_strtod_l+0x490>
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	ebab 0505 	sub.w	r5, fp, r5
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfb4      	ite	lt
 80079f8:	462b      	movlt	r3, r5
 80079fa:	2300      	movge	r3, #0
 80079fc:	930c      	str	r3, [sp, #48]	; 0x30
 80079fe:	9b06      	ldr	r3, [sp, #24]
 8007a00:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007c58 <_strtod_l+0x8b0>
 8007a04:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007c60 <_strtod_l+0x8b8>
 8007a08:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007c68 <_strtod_l+0x8c0>
 8007a0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a10:	2500      	movs	r5, #0
 8007a12:	9312      	str	r3, [sp, #72]	; 0x48
 8007a14:	462e      	mov	r6, r5
 8007a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a18:	4620      	mov	r0, r4
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	f001 fd04 	bl	8009428 <_Balloc>
 8007a20:	4607      	mov	r7, r0
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f43f af0c 	beq.w	8007840 <_strtod_l+0x498>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	3202      	adds	r2, #2
 8007a2e:	f103 010c 	add.w	r1, r3, #12
 8007a32:	0092      	lsls	r2, r2, #2
 8007a34:	300c      	adds	r0, #12
 8007a36:	f001 fce9 	bl	800940c <memcpy>
 8007a3a:	ec49 8b10 	vmov	d0, r8, r9
 8007a3e:	aa1a      	add	r2, sp, #104	; 0x68
 8007a40:	a919      	add	r1, sp, #100	; 0x64
 8007a42:	4620      	mov	r0, r4
 8007a44:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007a48:	f002 f8d6 	bl	8009bf8 <__d2b>
 8007a4c:	9018      	str	r0, [sp, #96]	; 0x60
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f aef6 	beq.w	8007840 <_strtod_l+0x498>
 8007a54:	2101      	movs	r1, #1
 8007a56:	4620      	mov	r0, r4
 8007a58:	f001 fe2c 	bl	80096b4 <__i2b>
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f43f aeee 	beq.w	8007840 <_strtod_l+0x498>
 8007a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a66:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfab      	itete	ge
 8007a6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007a6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007a70:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007a74:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007a78:	bfac      	ite	ge
 8007a7a:	eb03 0b02 	addge.w	fp, r3, r2
 8007a7e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	440b      	add	r3, r1
 8007a88:	4a7a      	ldr	r2, [pc, #488]	; (8007c74 <_strtod_l+0x8cc>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007a92:	f280 80d1 	bge.w	8007c38 <_strtod_l+0x890>
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	2a1f      	cmp	r2, #31
 8007a9a:	eba1 0102 	sub.w	r1, r1, r2
 8007a9e:	f04f 0001 	mov.w	r0, #1
 8007aa2:	f300 80bd 	bgt.w	8007c20 <_strtod_l+0x878>
 8007aa6:	fa00 f302 	lsl.w	r3, r0, r2
 8007aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8007aac:	2300      	movs	r3, #0
 8007aae:	930d      	str	r3, [sp, #52]	; 0x34
 8007ab0:	eb0b 0301 	add.w	r3, fp, r1
 8007ab4:	9a04      	ldr	r2, [sp, #16]
 8007ab6:	459b      	cmp	fp, r3
 8007ab8:	448a      	add	sl, r1
 8007aba:	4492      	add	sl, r2
 8007abc:	465a      	mov	r2, fp
 8007abe:	bfa8      	it	ge
 8007ac0:	461a      	movge	r2, r3
 8007ac2:	4552      	cmp	r2, sl
 8007ac4:	bfa8      	it	ge
 8007ac6:	4652      	movge	r2, sl
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	bfc2      	ittt	gt
 8007acc:	1a9b      	subgt	r3, r3, r2
 8007ace:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007ad2:	ebab 0b02 	subgt.w	fp, fp, r2
 8007ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	dd18      	ble.n	8007b0e <_strtod_l+0x766>
 8007adc:	4631      	mov	r1, r6
 8007ade:	4620      	mov	r0, r4
 8007ae0:	9315      	str	r3, [sp, #84]	; 0x54
 8007ae2:	f001 fea3 	bl	800982c <__pow5mult>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f aea9 	beq.w	8007840 <_strtod_l+0x498>
 8007aee:	4601      	mov	r1, r0
 8007af0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fdf4 	bl	80096e0 <__multiply>
 8007af8:	9014      	str	r0, [sp, #80]	; 0x50
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f43f aea0 	beq.w	8007840 <_strtod_l+0x498>
 8007b00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b02:	4620      	mov	r0, r4
 8007b04:	f001 fcd0 	bl	80094a8 <_Bfree>
 8007b08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b0c:	9218      	str	r2, [sp, #96]	; 0x60
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f300 8097 	bgt.w	8007c42 <_strtod_l+0x89a>
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dd08      	ble.n	8007b2c <_strtod_l+0x784>
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f001 fe84 	bl	800982c <__pow5mult>
 8007b24:	4607      	mov	r7, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f ae8a 	beq.w	8007840 <_strtod_l+0x498>
 8007b2c:	f1ba 0f00 	cmp.w	sl, #0
 8007b30:	dd08      	ble.n	8007b44 <_strtod_l+0x79c>
 8007b32:	4639      	mov	r1, r7
 8007b34:	4652      	mov	r2, sl
 8007b36:	4620      	mov	r0, r4
 8007b38:	f001 fed2 	bl	80098e0 <__lshift>
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f ae7e 	beq.w	8007840 <_strtod_l+0x498>
 8007b44:	f1bb 0f00 	cmp.w	fp, #0
 8007b48:	dd08      	ble.n	8007b5c <_strtod_l+0x7b4>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	465a      	mov	r2, fp
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f001 fec6 	bl	80098e0 <__lshift>
 8007b54:	4606      	mov	r6, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f ae72 	beq.w	8007840 <_strtod_l+0x498>
 8007b5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b5e:	463a      	mov	r2, r7
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 ff45 	bl	80099f0 <__mdiff>
 8007b66:	4605      	mov	r5, r0
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	f43f ae69 	beq.w	8007840 <_strtod_l+0x498>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007b74:	60c3      	str	r3, [r0, #12]
 8007b76:	4631      	mov	r1, r6
 8007b78:	f001 ff1e 	bl	80099b8 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	da7f      	bge.n	8007c80 <_strtod_l+0x8d8>
 8007b80:	ea5a 0308 	orrs.w	r3, sl, r8
 8007b84:	f040 80a5 	bne.w	8007cd2 <_strtod_l+0x92a>
 8007b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 80a0 	bne.w	8007cd2 <_strtod_l+0x92a>
 8007b92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	051b      	lsls	r3, r3, #20
 8007b9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b9e:	f240 8098 	bls.w	8007cd2 <_strtod_l+0x92a>
 8007ba2:	696b      	ldr	r3, [r5, #20]
 8007ba4:	b91b      	cbnz	r3, 8007bae <_strtod_l+0x806>
 8007ba6:	692b      	ldr	r3, [r5, #16]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	f340 8092 	ble.w	8007cd2 <_strtod_l+0x92a>
 8007bae:	4629      	mov	r1, r5
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f001 fe94 	bl	80098e0 <__lshift>
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4605      	mov	r5, r0
 8007bbc:	f001 fefc 	bl	80099b8 <__mcmp>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f340 8086 	ble.w	8007cd2 <_strtod_l+0x92a>
 8007bc6:	9904      	ldr	r1, [sp, #16]
 8007bc8:	4a2b      	ldr	r2, [pc, #172]	; (8007c78 <_strtod_l+0x8d0>)
 8007bca:	464b      	mov	r3, r9
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	f000 80a1 	beq.w	8007d14 <_strtod_l+0x96c>
 8007bd2:	ea02 0109 	and.w	r1, r2, r9
 8007bd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007bda:	f300 809b 	bgt.w	8007d14 <_strtod_l+0x96c>
 8007bde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007be2:	f77f aea2 	ble.w	800792a <_strtod_l+0x582>
 8007be6:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <_strtod_l+0x8d4>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007bee:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007bf2:	ec49 8b17 	vmov	d7, r8, r9
 8007bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007bfe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	bf08      	it	eq
 8007c06:	2322      	moveq	r3, #34	; 0x22
 8007c08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007c0c:	bf08      	it	eq
 8007c0e:	6023      	streq	r3, [r4, #0]
 8007c10:	e620      	b.n	8007854 <_strtod_l+0x4ac>
 8007c12:	f04f 31ff 	mov.w	r1, #4294967295
 8007c16:	fa01 f202 	lsl.w	r2, r1, r2
 8007c1a:	ea02 0808 	and.w	r8, r2, r8
 8007c1e:	e6d4      	b.n	80079ca <_strtod_l+0x622>
 8007c20:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007c24:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007c28:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007c2c:	33e2      	adds	r3, #226	; 0xe2
 8007c2e:	fa00 f303 	lsl.w	r3, r0, r3
 8007c32:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8007c36:	e73b      	b.n	8007ab0 <_strtod_l+0x708>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007c40:	e736      	b.n	8007ab0 <_strtod_l+0x708>
 8007c42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c44:	461a      	mov	r2, r3
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 fe4a 	bl	80098e0 <__lshift>
 8007c4c:	9018      	str	r0, [sp, #96]	; 0x60
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f47f af60 	bne.w	8007b14 <_strtod_l+0x76c>
 8007c54:	e5f4      	b.n	8007840 <_strtod_l+0x498>
 8007c56:	bf00      	nop
 8007c58:	94a03595 	.word	0x94a03595
 8007c5c:	3fcfffff 	.word	0x3fcfffff
 8007c60:	94a03595 	.word	0x94a03595
 8007c64:	3fdfffff 	.word	0x3fdfffff
 8007c68:	35afe535 	.word	0x35afe535
 8007c6c:	3fe00000 	.word	0x3fe00000
 8007c70:	0800bc80 	.word	0x0800bc80
 8007c74:	fffffc02 	.word	0xfffffc02
 8007c78:	7ff00000 	.word	0x7ff00000
 8007c7c:	39500000 	.word	0x39500000
 8007c80:	46cb      	mov	fp, r9
 8007c82:	d165      	bne.n	8007d50 <_strtod_l+0x9a8>
 8007c84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c88:	f1ba 0f00 	cmp.w	sl, #0
 8007c8c:	d02a      	beq.n	8007ce4 <_strtod_l+0x93c>
 8007c8e:	4aaa      	ldr	r2, [pc, #680]	; (8007f38 <_strtod_l+0xb90>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d12b      	bne.n	8007cec <_strtod_l+0x944>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	4641      	mov	r1, r8
 8007c98:	b1fb      	cbz	r3, 8007cda <_strtod_l+0x932>
 8007c9a:	4aa8      	ldr	r2, [pc, #672]	; (8007f3c <_strtod_l+0xb94>)
 8007c9c:	ea09 0202 	and.w	r2, r9, r2
 8007ca0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	d81a      	bhi.n	8007ce0 <_strtod_l+0x938>
 8007caa:	0d12      	lsrs	r2, r2, #20
 8007cac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007cb0:	fa00 f303 	lsl.w	r3, r0, r3
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d119      	bne.n	8007cec <_strtod_l+0x944>
 8007cb8:	4ba1      	ldr	r3, [pc, #644]	; (8007f40 <_strtod_l+0xb98>)
 8007cba:	459b      	cmp	fp, r3
 8007cbc:	d102      	bne.n	8007cc4 <_strtod_l+0x91c>
 8007cbe:	3101      	adds	r1, #1
 8007cc0:	f43f adbe 	beq.w	8007840 <_strtod_l+0x498>
 8007cc4:	4b9d      	ldr	r3, [pc, #628]	; (8007f3c <_strtod_l+0xb94>)
 8007cc6:	ea0b 0303 	and.w	r3, fp, r3
 8007cca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d186      	bne.n	8007be6 <_strtod_l+0x83e>
 8007cd8:	e5bc      	b.n	8007854 <_strtod_l+0x4ac>
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
 8007cde:	e7e9      	b.n	8007cb4 <_strtod_l+0x90c>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	e7e7      	b.n	8007cb4 <_strtod_l+0x90c>
 8007ce4:	ea53 0308 	orrs.w	r3, r3, r8
 8007ce8:	f43f af6d 	beq.w	8007bc6 <_strtod_l+0x81e>
 8007cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cee:	b1db      	cbz	r3, 8007d28 <_strtod_l+0x980>
 8007cf0:	ea13 0f0b 	tst.w	r3, fp
 8007cf4:	d0ed      	beq.n	8007cd2 <_strtod_l+0x92a>
 8007cf6:	9a04      	ldr	r2, [sp, #16]
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f1ba 0f00 	cmp.w	sl, #0
 8007d00:	d016      	beq.n	8007d30 <_strtod_l+0x988>
 8007d02:	f7ff fb37 	bl	8007374 <sulp>
 8007d06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007d0a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007d0e:	ec59 8b17 	vmov	r8, r9, d7
 8007d12:	e7de      	b.n	8007cd2 <_strtod_l+0x92a>
 8007d14:	4013      	ands	r3, r2
 8007d16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d22:	f04f 38ff 	mov.w	r8, #4294967295
 8007d26:	e7d4      	b.n	8007cd2 <_strtod_l+0x92a>
 8007d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d2a:	ea13 0f08 	tst.w	r3, r8
 8007d2e:	e7e1      	b.n	8007cf4 <_strtod_l+0x94c>
 8007d30:	f7ff fb20 	bl	8007374 <sulp>
 8007d34:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007d38:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007d3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007d4c:	d1c1      	bne.n	8007cd2 <_strtod_l+0x92a>
 8007d4e:	e5ec      	b.n	800792a <_strtod_l+0x582>
 8007d50:	4631      	mov	r1, r6
 8007d52:	4628      	mov	r0, r5
 8007d54:	f001 ffac 	bl	8009cb0 <__ratio>
 8007d58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007d5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	d867      	bhi.n	8007e36 <_strtod_l+0xa8e>
 8007d66:	f1ba 0f00 	cmp.w	sl, #0
 8007d6a:	d044      	beq.n	8007df6 <_strtod_l+0xa4e>
 8007d6c:	4b75      	ldr	r3, [pc, #468]	; (8007f44 <_strtod_l+0xb9c>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007d74:	4971      	ldr	r1, [pc, #452]	; (8007f3c <_strtod_l+0xb94>)
 8007d76:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007f50 <_strtod_l+0xba8>
 8007d7a:	ea0b 0001 	and.w	r0, fp, r1
 8007d7e:	4560      	cmp	r0, ip
 8007d80:	900d      	str	r0, [sp, #52]	; 0x34
 8007d82:	f040 808b 	bne.w	8007e9c <_strtod_l+0xaf4>
 8007d86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d8a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007d8e:	ec49 8b10 	vmov	d0, r8, r9
 8007d92:	ec43 2b1c 	vmov	d12, r2, r3
 8007d96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d9a:	f001 feb1 	bl	8009b00 <__ulp>
 8007d9e:	ec49 8b1d 	vmov	d13, r8, r9
 8007da2:	eeac db00 	vfma.f64	d13, d12, d0
 8007da6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dac:	4963      	ldr	r1, [pc, #396]	; (8007f3c <_strtod_l+0xb94>)
 8007dae:	4a66      	ldr	r2, [pc, #408]	; (8007f48 <_strtod_l+0xba0>)
 8007db0:	4019      	ands	r1, r3
 8007db2:	4291      	cmp	r1, r2
 8007db4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007db8:	d947      	bls.n	8007e4a <_strtod_l+0xaa2>
 8007dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d103      	bne.n	8007dcc <_strtod_l+0xa24>
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f43f ad3a 	beq.w	8007840 <_strtod_l+0x498>
 8007dcc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007f40 <_strtod_l+0xb98>
 8007dd0:	f04f 38ff 	mov.w	r8, #4294967295
 8007dd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f001 fb66 	bl	80094a8 <_Bfree>
 8007ddc:	4639      	mov	r1, r7
 8007dde:	4620      	mov	r0, r4
 8007de0:	f001 fb62 	bl	80094a8 <_Bfree>
 8007de4:	4631      	mov	r1, r6
 8007de6:	4620      	mov	r0, r4
 8007de8:	f001 fb5e 	bl	80094a8 <_Bfree>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4620      	mov	r0, r4
 8007df0:	f001 fb5a 	bl	80094a8 <_Bfree>
 8007df4:	e60f      	b.n	8007a16 <_strtod_l+0x66e>
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	d112      	bne.n	8007e22 <_strtod_l+0xa7a>
 8007dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e00:	b9b3      	cbnz	r3, 8007e30 <_strtod_l+0xa88>
 8007e02:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007e06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007e12:	d401      	bmi.n	8007e18 <_strtod_l+0xa70>
 8007e14:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007e18:	eeb1 7b48 	vneg.f64	d7, d8
 8007e1c:	ec53 2b17 	vmov	r2, r3, d7
 8007e20:	e7a8      	b.n	8007d74 <_strtod_l+0x9cc>
 8007e22:	f1b8 0f01 	cmp.w	r8, #1
 8007e26:	d103      	bne.n	8007e30 <_strtod_l+0xa88>
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	f43f ad7d 	beq.w	800792a <_strtod_l+0x582>
 8007e30:	4b46      	ldr	r3, [pc, #280]	; (8007f4c <_strtod_l+0xba4>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	e79c      	b.n	8007d70 <_strtod_l+0x9c8>
 8007e36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007e3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	d0e9      	beq.n	8007e18 <_strtod_l+0xa70>
 8007e44:	ec53 2b18 	vmov	r2, r3, d8
 8007e48:	e794      	b.n	8007d74 <_strtod_l+0x9cc>
 8007e4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1bf      	bne.n	8007dd4 <_strtod_l+0xa2c>
 8007e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e5a:	0d1b      	lsrs	r3, r3, #20
 8007e5c:	051b      	lsls	r3, r3, #20
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d1b8      	bne.n	8007dd4 <_strtod_l+0xa2c>
 8007e62:	ec51 0b18 	vmov	r0, r1, d8
 8007e66:	f7f8 fc27 	bl	80006b8 <__aeabi_d2lz>
 8007e6a:	f7f8 fbdf 	bl	800062c <__aeabi_l2d>
 8007e6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e72:	ec41 0b17 	vmov	d7, r0, r1
 8007e76:	ea43 0308 	orr.w	r3, r3, r8
 8007e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007e82:	d03e      	beq.n	8007f02 <_strtod_l+0xb5a>
 8007e84:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8c:	f53f ace2 	bmi.w	8007854 <_strtod_l+0x4ac>
 8007e90:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e98:	dd9c      	ble.n	8007dd4 <_strtod_l+0xa2c>
 8007e9a:	e4db      	b.n	8007854 <_strtod_l+0x4ac>
 8007e9c:	9904      	ldr	r1, [sp, #16]
 8007e9e:	b301      	cbz	r1, 8007ee2 <_strtod_l+0xb3a>
 8007ea0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ea2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007ea6:	d81c      	bhi.n	8007ee2 <_strtod_l+0xb3a>
 8007ea8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007f30 <_strtod_l+0xb88>
 8007eac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb4:	d811      	bhi.n	8007eda <_strtod_l+0xb32>
 8007eb6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007eba:	ee18 3a10 	vmov	r3, s16
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	bf38      	it	cc
 8007ec2:	2301      	movcc	r3, #1
 8007ec4:	ee08 3a10 	vmov	s16, r3
 8007ec8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007ecc:	f1ba 0f00 	cmp.w	sl, #0
 8007ed0:	d114      	bne.n	8007efc <_strtod_l+0xb54>
 8007ed2:	eeb1 7b48 	vneg.f64	d7, d8
 8007ed6:	ec53 2b17 	vmov	r2, r3, d7
 8007eda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007edc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007ee0:	1a0b      	subs	r3, r1, r0
 8007ee2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007ee6:	ec43 2b1c 	vmov	d12, r2, r3
 8007eea:	f001 fe09 	bl	8009b00 <__ulp>
 8007eee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007ef2:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007ef6:	ec59 8b17 	vmov	r8, r9, d7
 8007efa:	e7a8      	b.n	8007e4e <_strtod_l+0xaa6>
 8007efc:	ec53 2b18 	vmov	r2, r3, d8
 8007f00:	e7eb      	b.n	8007eda <_strtod_l+0xb32>
 8007f02:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0a:	f57f af63 	bpl.w	8007dd4 <_strtod_l+0xa2c>
 8007f0e:	e4a1      	b.n	8007854 <_strtod_l+0x4ac>
 8007f10:	2300      	movs	r3, #0
 8007f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	f7ff ba8d 	b.w	8007438 <_strtod_l+0x90>
 8007f1e:	2a65      	cmp	r2, #101	; 0x65
 8007f20:	f43f ab89 	beq.w	8007636 <_strtod_l+0x28e>
 8007f24:	2a45      	cmp	r2, #69	; 0x45
 8007f26:	f43f ab86 	beq.w	8007636 <_strtod_l+0x28e>
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	f7ff bbbe 	b.w	80076ac <_strtod_l+0x304>
 8007f30:	ffc00000 	.word	0xffc00000
 8007f34:	41dfffff 	.word	0x41dfffff
 8007f38:	000fffff 	.word	0x000fffff
 8007f3c:	7ff00000 	.word	0x7ff00000
 8007f40:	7fefffff 	.word	0x7fefffff
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	7c9fffff 	.word	0x7c9fffff
 8007f4c:	bff00000 	.word	0xbff00000
 8007f50:	7fe00000 	.word	0x7fe00000

08007f54 <_strtod_r>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <_strtod_r+0x8>)
 8007f56:	f7ff ba27 	b.w	80073a8 <_strtod_l>
 8007f5a:	bf00      	nop
 8007f5c:	200000c8 	.word	0x200000c8

08007f60 <_strtol_l.isra.0>:
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f66:	d001      	beq.n	8007f6c <_strtol_l.isra.0+0xc>
 8007f68:	2b24      	cmp	r3, #36	; 0x24
 8007f6a:	d906      	bls.n	8007f7a <_strtol_l.isra.0+0x1a>
 8007f6c:	f7fe face 	bl	800650c <__errno>
 8007f70:	2316      	movs	r3, #22
 8007f72:	6003      	str	r3, [r0, #0]
 8007f74:	2000      	movs	r0, #0
 8007f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7a:	4f3a      	ldr	r7, [pc, #232]	; (8008064 <_strtol_l.isra.0+0x104>)
 8007f7c:	468e      	mov	lr, r1
 8007f7e:	4676      	mov	r6, lr
 8007f80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f84:	5de5      	ldrb	r5, [r4, r7]
 8007f86:	f015 0508 	ands.w	r5, r5, #8
 8007f8a:	d1f8      	bne.n	8007f7e <_strtol_l.isra.0+0x1e>
 8007f8c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f8e:	d134      	bne.n	8007ffa <_strtol_l.isra.0+0x9a>
 8007f90:	f89e 4000 	ldrb.w	r4, [lr]
 8007f94:	f04f 0801 	mov.w	r8, #1
 8007f98:	f106 0e02 	add.w	lr, r6, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d05c      	beq.n	800805a <_strtol_l.isra.0+0xfa>
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d10c      	bne.n	8007fbe <_strtol_l.isra.0+0x5e>
 8007fa4:	2c30      	cmp	r4, #48	; 0x30
 8007fa6:	d10a      	bne.n	8007fbe <_strtol_l.isra.0+0x5e>
 8007fa8:	f89e 4000 	ldrb.w	r4, [lr]
 8007fac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fb0:	2c58      	cmp	r4, #88	; 0x58
 8007fb2:	d14d      	bne.n	8008050 <_strtol_l.isra.0+0xf0>
 8007fb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f10e 0e02 	add.w	lr, lr, #2
 8007fbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007fc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	fbbc f9f3 	udiv	r9, ip, r3
 8007fcc:	4635      	mov	r5, r6
 8007fce:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fd6:	2f09      	cmp	r7, #9
 8007fd8:	d818      	bhi.n	800800c <_strtol_l.isra.0+0xac>
 8007fda:	463c      	mov	r4, r7
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	dd24      	ble.n	800802a <_strtol_l.isra.0+0xca>
 8007fe0:	2e00      	cmp	r6, #0
 8007fe2:	db1f      	blt.n	8008024 <_strtol_l.isra.0+0xc4>
 8007fe4:	45a9      	cmp	r9, r5
 8007fe6:	d31d      	bcc.n	8008024 <_strtol_l.isra.0+0xc4>
 8007fe8:	d101      	bne.n	8007fee <_strtol_l.isra.0+0x8e>
 8007fea:	45a2      	cmp	sl, r4
 8007fec:	db1a      	blt.n	8008024 <_strtol_l.isra.0+0xc4>
 8007fee:	fb05 4503 	mla	r5, r5, r3, r4
 8007ff2:	2601      	movs	r6, #1
 8007ff4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ff8:	e7eb      	b.n	8007fd2 <_strtol_l.isra.0+0x72>
 8007ffa:	2c2b      	cmp	r4, #43	; 0x2b
 8007ffc:	bf08      	it	eq
 8007ffe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008002:	46a8      	mov	r8, r5
 8008004:	bf08      	it	eq
 8008006:	f106 0e02 	addeq.w	lr, r6, #2
 800800a:	e7c7      	b.n	8007f9c <_strtol_l.isra.0+0x3c>
 800800c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008010:	2f19      	cmp	r7, #25
 8008012:	d801      	bhi.n	8008018 <_strtol_l.isra.0+0xb8>
 8008014:	3c37      	subs	r4, #55	; 0x37
 8008016:	e7e1      	b.n	8007fdc <_strtol_l.isra.0+0x7c>
 8008018:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800801c:	2f19      	cmp	r7, #25
 800801e:	d804      	bhi.n	800802a <_strtol_l.isra.0+0xca>
 8008020:	3c57      	subs	r4, #87	; 0x57
 8008022:	e7db      	b.n	8007fdc <_strtol_l.isra.0+0x7c>
 8008024:	f04f 36ff 	mov.w	r6, #4294967295
 8008028:	e7e4      	b.n	8007ff4 <_strtol_l.isra.0+0x94>
 800802a:	2e00      	cmp	r6, #0
 800802c:	da05      	bge.n	800803a <_strtol_l.isra.0+0xda>
 800802e:	2322      	movs	r3, #34	; 0x22
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	4665      	mov	r5, ip
 8008034:	b942      	cbnz	r2, 8008048 <_strtol_l.isra.0+0xe8>
 8008036:	4628      	mov	r0, r5
 8008038:	e79d      	b.n	8007f76 <_strtol_l.isra.0+0x16>
 800803a:	f1b8 0f00 	cmp.w	r8, #0
 800803e:	d000      	beq.n	8008042 <_strtol_l.isra.0+0xe2>
 8008040:	426d      	negs	r5, r5
 8008042:	2a00      	cmp	r2, #0
 8008044:	d0f7      	beq.n	8008036 <_strtol_l.isra.0+0xd6>
 8008046:	b10e      	cbz	r6, 800804c <_strtol_l.isra.0+0xec>
 8008048:	f10e 31ff 	add.w	r1, lr, #4294967295
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	e7f2      	b.n	8008036 <_strtol_l.isra.0+0xd6>
 8008050:	2430      	movs	r4, #48	; 0x30
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1b3      	bne.n	8007fbe <_strtol_l.isra.0+0x5e>
 8008056:	2308      	movs	r3, #8
 8008058:	e7b1      	b.n	8007fbe <_strtol_l.isra.0+0x5e>
 800805a:	2c30      	cmp	r4, #48	; 0x30
 800805c:	d0a4      	beq.n	8007fa8 <_strtol_l.isra.0+0x48>
 800805e:	230a      	movs	r3, #10
 8008060:	e7ad      	b.n	8007fbe <_strtol_l.isra.0+0x5e>
 8008062:	bf00      	nop
 8008064:	0800bca9 	.word	0x0800bca9

08008068 <_strtol_r>:
 8008068:	f7ff bf7a 	b.w	8007f60 <_strtol_l.isra.0>

0800806c <_write_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_write_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 ff83 	bl	8001f86 <_write>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_write_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_write_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20010894 	.word	0x20010894

08008090 <_close_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_close_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f9 ff8f 	bl	8001fbe <_close>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_close_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_close_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20010894 	.word	0x20010894

080080b0 <quorem>:
 80080b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	6903      	ldr	r3, [r0, #16]
 80080b6:	690c      	ldr	r4, [r1, #16]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	4607      	mov	r7, r0
 80080bc:	f2c0 8081 	blt.w	80081c2 <quorem+0x112>
 80080c0:	3c01      	subs	r4, #1
 80080c2:	f101 0814 	add.w	r8, r1, #20
 80080c6:	f100 0514 	add.w	r5, r0, #20
 80080ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080d8:	3301      	adds	r3, #1
 80080da:	429a      	cmp	r2, r3
 80080dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080e8:	d331      	bcc.n	800814e <quorem+0x9e>
 80080ea:	f04f 0e00 	mov.w	lr, #0
 80080ee:	4640      	mov	r0, r8
 80080f0:	46ac      	mov	ip, r5
 80080f2:	46f2      	mov	sl, lr
 80080f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80080f8:	b293      	uxth	r3, r2
 80080fa:	fb06 e303 	mla	r3, r6, r3, lr
 80080fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008102:	b29b      	uxth	r3, r3
 8008104:	ebaa 0303 	sub.w	r3, sl, r3
 8008108:	0c12      	lsrs	r2, r2, #16
 800810a:	f8dc a000 	ldr.w	sl, [ip]
 800810e:	fb06 e202 	mla	r2, r6, r2, lr
 8008112:	fa13 f38a 	uxtah	r3, r3, sl
 8008116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800811a:	fa1f fa82 	uxth.w	sl, r2
 800811e:	f8dc 2000 	ldr.w	r2, [ip]
 8008122:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008126:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800812a:	b29b      	uxth	r3, r3
 800812c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008130:	4581      	cmp	r9, r0
 8008132:	f84c 3b04 	str.w	r3, [ip], #4
 8008136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800813a:	d2db      	bcs.n	80080f4 <quorem+0x44>
 800813c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008140:	b92b      	cbnz	r3, 800814e <quorem+0x9e>
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	3b04      	subs	r3, #4
 8008146:	429d      	cmp	r5, r3
 8008148:	461a      	mov	r2, r3
 800814a:	d32e      	bcc.n	80081aa <quorem+0xfa>
 800814c:	613c      	str	r4, [r7, #16]
 800814e:	4638      	mov	r0, r7
 8008150:	f001 fc32 	bl	80099b8 <__mcmp>
 8008154:	2800      	cmp	r0, #0
 8008156:	db24      	blt.n	80081a2 <quorem+0xf2>
 8008158:	3601      	adds	r6, #1
 800815a:	4628      	mov	r0, r5
 800815c:	f04f 0c00 	mov.w	ip, #0
 8008160:	f858 2b04 	ldr.w	r2, [r8], #4
 8008164:	f8d0 e000 	ldr.w	lr, [r0]
 8008168:	b293      	uxth	r3, r2
 800816a:	ebac 0303 	sub.w	r3, ip, r3
 800816e:	0c12      	lsrs	r2, r2, #16
 8008170:	fa13 f38e 	uxtah	r3, r3, lr
 8008174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800817c:	b29b      	uxth	r3, r3
 800817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008182:	45c1      	cmp	r9, r8
 8008184:	f840 3b04 	str.w	r3, [r0], #4
 8008188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800818c:	d2e8      	bcs.n	8008160 <quorem+0xb0>
 800818e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008196:	b922      	cbnz	r2, 80081a2 <quorem+0xf2>
 8008198:	3b04      	subs	r3, #4
 800819a:	429d      	cmp	r5, r3
 800819c:	461a      	mov	r2, r3
 800819e:	d30a      	bcc.n	80081b6 <quorem+0x106>
 80081a0:	613c      	str	r4, [r7, #16]
 80081a2:	4630      	mov	r0, r6
 80081a4:	b003      	add	sp, #12
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	3b04      	subs	r3, #4
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	d1cc      	bne.n	800814c <quorem+0x9c>
 80081b2:	3c01      	subs	r4, #1
 80081b4:	e7c7      	b.n	8008146 <quorem+0x96>
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1f0      	bne.n	80081a0 <quorem+0xf0>
 80081be:	3c01      	subs	r4, #1
 80081c0:	e7eb      	b.n	800819a <quorem+0xea>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7ee      	b.n	80081a4 <quorem+0xf4>
	...

080081c8 <_dtoa_r>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	ec59 8b10 	vmov	r8, r9, d0
 80081d0:	b095      	sub	sp, #84	; 0x54
 80081d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081d4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80081d6:	9107      	str	r1, [sp, #28]
 80081d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80081dc:	4606      	mov	r6, r0
 80081de:	9209      	str	r2, [sp, #36]	; 0x24
 80081e0:	9310      	str	r3, [sp, #64]	; 0x40
 80081e2:	b975      	cbnz	r5, 8008202 <_dtoa_r+0x3a>
 80081e4:	2010      	movs	r0, #16
 80081e6:	f001 f8f7 	bl	80093d8 <malloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6270      	str	r0, [r6, #36]	; 0x24
 80081ee:	b920      	cbnz	r0, 80081fa <_dtoa_r+0x32>
 80081f0:	4bab      	ldr	r3, [pc, #684]	; (80084a0 <_dtoa_r+0x2d8>)
 80081f2:	21ea      	movs	r1, #234	; 0xea
 80081f4:	48ab      	ldr	r0, [pc, #684]	; (80084a4 <_dtoa_r+0x2dc>)
 80081f6:	f002 fc33 	bl	800aa60 <__assert_func>
 80081fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081fe:	6005      	str	r5, [r0, #0]
 8008200:	60c5      	str	r5, [r0, #12]
 8008202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	b151      	cbz	r1, 800821e <_dtoa_r+0x56>
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	604a      	str	r2, [r1, #4]
 800820c:	2301      	movs	r3, #1
 800820e:	4093      	lsls	r3, r2
 8008210:	608b      	str	r3, [r1, #8]
 8008212:	4630      	mov	r0, r6
 8008214:	f001 f948 	bl	80094a8 <_Bfree>
 8008218:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	f1b9 0300 	subs.w	r3, r9, #0
 8008222:	bfbb      	ittet	lt
 8008224:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008228:	9303      	strlt	r3, [sp, #12]
 800822a:	2300      	movge	r3, #0
 800822c:	2201      	movlt	r2, #1
 800822e:	bfac      	ite	ge
 8008230:	6023      	strge	r3, [r4, #0]
 8008232:	6022      	strlt	r2, [r4, #0]
 8008234:	4b9c      	ldr	r3, [pc, #624]	; (80084a8 <_dtoa_r+0x2e0>)
 8008236:	9c03      	ldr	r4, [sp, #12]
 8008238:	43a3      	bics	r3, r4
 800823a:	d11a      	bne.n	8008272 <_dtoa_r+0xaa>
 800823c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800823e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008248:	ea53 0308 	orrs.w	r3, r3, r8
 800824c:	f000 8512 	beq.w	8008c74 <_dtoa_r+0xaac>
 8008250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008252:	b953      	cbnz	r3, 800826a <_dtoa_r+0xa2>
 8008254:	4b95      	ldr	r3, [pc, #596]	; (80084ac <_dtoa_r+0x2e4>)
 8008256:	e01f      	b.n	8008298 <_dtoa_r+0xd0>
 8008258:	4b95      	ldr	r3, [pc, #596]	; (80084b0 <_dtoa_r+0x2e8>)
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	9800      	ldr	r0, [sp, #0]
 8008264:	b015      	add	sp, #84	; 0x54
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	4b90      	ldr	r3, [pc, #576]	; (80084ac <_dtoa_r+0x2e4>)
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	3303      	adds	r3, #3
 8008270:	e7f5      	b.n	800825e <_dtoa_r+0x96>
 8008272:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008276:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008282:	d10b      	bne.n	800829c <_dtoa_r+0xd4>
 8008284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008286:	2301      	movs	r3, #1
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 84ee 	beq.w	8008c6e <_dtoa_r+0xaa6>
 8008292:	4888      	ldr	r0, [pc, #544]	; (80084b4 <_dtoa_r+0x2ec>)
 8008294:	6018      	str	r0, [r3, #0]
 8008296:	1e43      	subs	r3, r0, #1
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	e7e2      	b.n	8008262 <_dtoa_r+0x9a>
 800829c:	a913      	add	r1, sp, #76	; 0x4c
 800829e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082a2:	aa12      	add	r2, sp, #72	; 0x48
 80082a4:	4630      	mov	r0, r6
 80082a6:	f001 fca7 	bl	8009bf8 <__d2b>
 80082aa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80082ae:	4605      	mov	r5, r0
 80082b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d047      	beq.n	8008346 <_dtoa_r+0x17e>
 80082b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80082bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80082c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082c8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80082cc:	2400      	movs	r4, #0
 80082ce:	ec43 2b16 	vmov	d6, r2, r3
 80082d2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80082d6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008488 <_dtoa_r+0x2c0>
 80082da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082de:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008490 <_dtoa_r+0x2c8>
 80082e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80082e6:	eeb0 7b46 	vmov.f64	d7, d6
 80082ea:	ee06 1a90 	vmov	s13, r1
 80082ee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80082f2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008498 <_dtoa_r+0x2d0>
 80082f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80082fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80082fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	ee16 ba90 	vmov	fp, s13
 800830a:	9411      	str	r4, [sp, #68]	; 0x44
 800830c:	d508      	bpl.n	8008320 <_dtoa_r+0x158>
 800830e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008312:	eeb4 6b47 	vcmp.f64	d6, d7
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	bf18      	it	ne
 800831c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008320:	f1bb 0f16 	cmp.w	fp, #22
 8008324:	d832      	bhi.n	800838c <_dtoa_r+0x1c4>
 8008326:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <_dtoa_r+0x2f0>)
 8008328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800832c:	ed93 7b00 	vldr	d7, [r3]
 8008330:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833c:	d501      	bpl.n	8008342 <_dtoa_r+0x17a>
 800833e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008342:	2300      	movs	r3, #0
 8008344:	e023      	b.n	800838e <_dtoa_r+0x1c6>
 8008346:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008348:	4401      	add	r1, r0
 800834a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800834e:	2b20      	cmp	r3, #32
 8008350:	bfc3      	ittte	gt
 8008352:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008356:	fa04 f303 	lslgt.w	r3, r4, r3
 800835a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800835e:	f1c3 0320 	rsble	r3, r3, #32
 8008362:	bfc6      	itte	gt
 8008364:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008368:	ea43 0308 	orrgt.w	r3, r3, r8
 800836c:	fa08 f303 	lslle.w	r3, r8, r3
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008378:	3901      	subs	r1, #1
 800837a:	ed8d 7b00 	vstr	d7, [sp]
 800837e:	9c01      	ldr	r4, [sp, #4]
 8008380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008384:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008388:	2401      	movs	r4, #1
 800838a:	e7a0      	b.n	80082ce <_dtoa_r+0x106>
 800838c:	2301      	movs	r3, #1
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	1a43      	subs	r3, r0, r1
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	bf45      	ittet	mi
 8008396:	f1c3 0301 	rsbmi	r3, r3, #1
 800839a:	9305      	strmi	r3, [sp, #20]
 800839c:	2300      	movpl	r3, #0
 800839e:	2300      	movmi	r3, #0
 80083a0:	9206      	str	r2, [sp, #24]
 80083a2:	bf54      	ite	pl
 80083a4:	9305      	strpl	r3, [sp, #20]
 80083a6:	9306      	strmi	r3, [sp, #24]
 80083a8:	f1bb 0f00 	cmp.w	fp, #0
 80083ac:	db18      	blt.n	80083e0 <_dtoa_r+0x218>
 80083ae:	9b06      	ldr	r3, [sp, #24]
 80083b0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80083b4:	445b      	add	r3, fp
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9a07      	ldr	r2, [sp, #28]
 80083bc:	2a09      	cmp	r2, #9
 80083be:	d849      	bhi.n	8008454 <_dtoa_r+0x28c>
 80083c0:	2a05      	cmp	r2, #5
 80083c2:	bfc4      	itt	gt
 80083c4:	3a04      	subgt	r2, #4
 80083c6:	9207      	strgt	r2, [sp, #28]
 80083c8:	9a07      	ldr	r2, [sp, #28]
 80083ca:	f1a2 0202 	sub.w	r2, r2, #2
 80083ce:	bfcc      	ite	gt
 80083d0:	2400      	movgt	r4, #0
 80083d2:	2401      	movle	r4, #1
 80083d4:	2a03      	cmp	r2, #3
 80083d6:	d848      	bhi.n	800846a <_dtoa_r+0x2a2>
 80083d8:	e8df f002 	tbb	[pc, r2]
 80083dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80083e0:	9b05      	ldr	r3, [sp, #20]
 80083e2:	2200      	movs	r2, #0
 80083e4:	eba3 030b 	sub.w	r3, r3, fp
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	920e      	str	r2, [sp, #56]	; 0x38
 80083ec:	f1cb 0300 	rsb	r3, fp, #0
 80083f0:	e7e3      	b.n	80083ba <_dtoa_r+0x1f2>
 80083f2:	2200      	movs	r2, #0
 80083f4:	9208      	str	r2, [sp, #32]
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	dc39      	bgt.n	8008470 <_dtoa_r+0x2a8>
 80083fc:	f04f 0a01 	mov.w	sl, #1
 8008400:	46d1      	mov	r9, sl
 8008402:	4652      	mov	r2, sl
 8008404:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008408:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800840a:	2100      	movs	r1, #0
 800840c:	6079      	str	r1, [r7, #4]
 800840e:	2004      	movs	r0, #4
 8008410:	f100 0c14 	add.w	ip, r0, #20
 8008414:	4594      	cmp	ip, r2
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	d92f      	bls.n	800847a <_dtoa_r+0x2b2>
 800841a:	4630      	mov	r0, r6
 800841c:	930c      	str	r3, [sp, #48]	; 0x30
 800841e:	f001 f803 	bl	8009428 <_Balloc>
 8008422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008424:	9000      	str	r0, [sp, #0]
 8008426:	4602      	mov	r2, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	d149      	bne.n	80084c0 <_dtoa_r+0x2f8>
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <_dtoa_r+0x2f4>)
 800842e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008432:	e6df      	b.n	80081f4 <_dtoa_r+0x2c>
 8008434:	2201      	movs	r2, #1
 8008436:	e7dd      	b.n	80083f4 <_dtoa_r+0x22c>
 8008438:	2200      	movs	r2, #0
 800843a:	9208      	str	r2, [sp, #32]
 800843c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800843e:	eb0b 0a02 	add.w	sl, fp, r2
 8008442:	f10a 0901 	add.w	r9, sl, #1
 8008446:	464a      	mov	r2, r9
 8008448:	2a01      	cmp	r2, #1
 800844a:	bfb8      	it	lt
 800844c:	2201      	movlt	r2, #1
 800844e:	e7db      	b.n	8008408 <_dtoa_r+0x240>
 8008450:	2201      	movs	r2, #1
 8008452:	e7f2      	b.n	800843a <_dtoa_r+0x272>
 8008454:	2401      	movs	r4, #1
 8008456:	2200      	movs	r2, #0
 8008458:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800845c:	f04f 3aff 	mov.w	sl, #4294967295
 8008460:	2100      	movs	r1, #0
 8008462:	46d1      	mov	r9, sl
 8008464:	2212      	movs	r2, #18
 8008466:	9109      	str	r1, [sp, #36]	; 0x24
 8008468:	e7ce      	b.n	8008408 <_dtoa_r+0x240>
 800846a:	2201      	movs	r2, #1
 800846c:	9208      	str	r2, [sp, #32]
 800846e:	e7f5      	b.n	800845c <_dtoa_r+0x294>
 8008470:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008474:	46d1      	mov	r9, sl
 8008476:	4652      	mov	r2, sl
 8008478:	e7c6      	b.n	8008408 <_dtoa_r+0x240>
 800847a:	3101      	adds	r1, #1
 800847c:	6079      	str	r1, [r7, #4]
 800847e:	0040      	lsls	r0, r0, #1
 8008480:	e7c6      	b.n	8008410 <_dtoa_r+0x248>
 8008482:	bf00      	nop
 8008484:	f3af 8000 	nop.w
 8008488:	636f4361 	.word	0x636f4361
 800848c:	3fd287a7 	.word	0x3fd287a7
 8008490:	8b60c8b3 	.word	0x8b60c8b3
 8008494:	3fc68a28 	.word	0x3fc68a28
 8008498:	509f79fb 	.word	0x509f79fb
 800849c:	3fd34413 	.word	0x3fd34413
 80084a0:	0800bdb6 	.word	0x0800bdb6
 80084a4:	0800bdcd 	.word	0x0800bdcd
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	0800bdb2 	.word	0x0800bdb2
 80084b0:	0800bda9 	.word	0x0800bda9
 80084b4:	0800c032 	.word	0x0800c032
 80084b8:	0800bf48 	.word	0x0800bf48
 80084bc:	0800be2c 	.word	0x0800be2c
 80084c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80084c2:	9900      	ldr	r1, [sp, #0]
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	f1b9 0f0e 	cmp.w	r9, #14
 80084ca:	d872      	bhi.n	80085b2 <_dtoa_r+0x3ea>
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	d070      	beq.n	80085b2 <_dtoa_r+0x3ea>
 80084d0:	f1bb 0f00 	cmp.w	fp, #0
 80084d4:	f340 80a6 	ble.w	8008624 <_dtoa_r+0x45c>
 80084d8:	49ca      	ldr	r1, [pc, #808]	; (8008804 <_dtoa_r+0x63c>)
 80084da:	f00b 020f 	and.w	r2, fp, #15
 80084de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80084e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084e6:	ed92 7b00 	vldr	d7, [r2]
 80084ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80084ee:	f000 808d 	beq.w	800860c <_dtoa_r+0x444>
 80084f2:	4ac5      	ldr	r2, [pc, #788]	; (8008808 <_dtoa_r+0x640>)
 80084f4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80084f8:	ed92 6b08 	vldr	d6, [r2, #32]
 80084fc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008500:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008504:	f001 010f 	and.w	r1, r1, #15
 8008508:	2203      	movs	r2, #3
 800850a:	48bf      	ldr	r0, [pc, #764]	; (8008808 <_dtoa_r+0x640>)
 800850c:	2900      	cmp	r1, #0
 800850e:	d17f      	bne.n	8008610 <_dtoa_r+0x448>
 8008510:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008514:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800851c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800851e:	2900      	cmp	r1, #0
 8008520:	f000 80b2 	beq.w	8008688 <_dtoa_r+0x4c0>
 8008524:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008528:	ed9d 7b02 	vldr	d7, [sp, #8]
 800852c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	f140 80a8 	bpl.w	8008688 <_dtoa_r+0x4c0>
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	f000 80a4 	beq.w	8008688 <_dtoa_r+0x4c0>
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	dd31      	ble.n	80085aa <_dtoa_r+0x3e2>
 8008546:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800854a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800854e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008552:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008556:	3201      	adds	r2, #1
 8008558:	4650      	mov	r0, sl
 800855a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800855e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008562:	ee07 2a90 	vmov	s15, r2
 8008566:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800856a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800856e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008572:	9c03      	ldr	r4, [sp, #12]
 8008574:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008578:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800857c:	2800      	cmp	r0, #0
 800857e:	f040 8086 	bne.w	800868e <_dtoa_r+0x4c6>
 8008582:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008586:	ee36 6b47 	vsub.f64	d6, d6, d7
 800858a:	ec42 1b17 	vmov	d7, r1, r2
 800858e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	f300 8272 	bgt.w	8008a7e <_dtoa_r+0x8b6>
 800859a:	eeb1 7b47 	vneg.f64	d7, d7
 800859e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a6:	f100 8267 	bmi.w	8008a78 <_dtoa_r+0x8b0>
 80085aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80085ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80085b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	f2c0 8129 	blt.w	800880c <_dtoa_r+0x644>
 80085ba:	f1bb 0f0e 	cmp.w	fp, #14
 80085be:	f300 8125 	bgt.w	800880c <_dtoa_r+0x644>
 80085c2:	4b90      	ldr	r3, [pc, #576]	; (8008804 <_dtoa_r+0x63c>)
 80085c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085c8:	ed93 6b00 	vldr	d6, [r3]
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f280 80c3 	bge.w	800875a <_dtoa_r+0x592>
 80085d4:	f1b9 0f00 	cmp.w	r9, #0
 80085d8:	f300 80bf 	bgt.w	800875a <_dtoa_r+0x592>
 80085dc:	f040 824c 	bne.w	8008a78 <_dtoa_r+0x8b0>
 80085e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80085e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f4:	464c      	mov	r4, r9
 80085f6:	464f      	mov	r7, r9
 80085f8:	f280 8222 	bge.w	8008a40 <_dtoa_r+0x878>
 80085fc:	f8dd 8000 	ldr.w	r8, [sp]
 8008600:	2331      	movs	r3, #49	; 0x31
 8008602:	f808 3b01 	strb.w	r3, [r8], #1
 8008606:	f10b 0b01 	add.w	fp, fp, #1
 800860a:	e21e      	b.n	8008a4a <_dtoa_r+0x882>
 800860c:	2202      	movs	r2, #2
 800860e:	e77c      	b.n	800850a <_dtoa_r+0x342>
 8008610:	07cc      	lsls	r4, r1, #31
 8008612:	d504      	bpl.n	800861e <_dtoa_r+0x456>
 8008614:	ed90 6b00 	vldr	d6, [r0]
 8008618:	3201      	adds	r2, #1
 800861a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800861e:	1049      	asrs	r1, r1, #1
 8008620:	3008      	adds	r0, #8
 8008622:	e773      	b.n	800850c <_dtoa_r+0x344>
 8008624:	d02e      	beq.n	8008684 <_dtoa_r+0x4bc>
 8008626:	f1cb 0100 	rsb	r1, fp, #0
 800862a:	4a76      	ldr	r2, [pc, #472]	; (8008804 <_dtoa_r+0x63c>)
 800862c:	f001 000f 	and.w	r0, r1, #15
 8008630:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008634:	ed92 7b00 	vldr	d7, [r2]
 8008638:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800863c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008640:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008644:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008648:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800864c:	486e      	ldr	r0, [pc, #440]	; (8008808 <_dtoa_r+0x640>)
 800864e:	1109      	asrs	r1, r1, #4
 8008650:	2400      	movs	r4, #0
 8008652:	2202      	movs	r2, #2
 8008654:	b939      	cbnz	r1, 8008666 <_dtoa_r+0x49e>
 8008656:	2c00      	cmp	r4, #0
 8008658:	f43f af60 	beq.w	800851c <_dtoa_r+0x354>
 800865c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008664:	e75a      	b.n	800851c <_dtoa_r+0x354>
 8008666:	07cf      	lsls	r7, r1, #31
 8008668:	d509      	bpl.n	800867e <_dtoa_r+0x4b6>
 800866a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800866e:	ed90 7b00 	vldr	d7, [r0]
 8008672:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008676:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800867a:	3201      	adds	r2, #1
 800867c:	2401      	movs	r4, #1
 800867e:	1049      	asrs	r1, r1, #1
 8008680:	3008      	adds	r0, #8
 8008682:	e7e7      	b.n	8008654 <_dtoa_r+0x48c>
 8008684:	2202      	movs	r2, #2
 8008686:	e749      	b.n	800851c <_dtoa_r+0x354>
 8008688:	465f      	mov	r7, fp
 800868a:	4648      	mov	r0, r9
 800868c:	e765      	b.n	800855a <_dtoa_r+0x392>
 800868e:	ec42 1b17 	vmov	d7, r1, r2
 8008692:	4a5c      	ldr	r2, [pc, #368]	; (8008804 <_dtoa_r+0x63c>)
 8008694:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008698:	ed12 4b02 	vldr	d4, [r2, #-8]
 800869c:	9a00      	ldr	r2, [sp, #0]
 800869e:	1814      	adds	r4, r2, r0
 80086a0:	9a08      	ldr	r2, [sp, #32]
 80086a2:	b352      	cbz	r2, 80086fa <_dtoa_r+0x532>
 80086a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80086a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80086ac:	f8dd 8000 	ldr.w	r8, [sp]
 80086b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80086b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80086b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80086c0:	ee14 2a90 	vmov	r2, s9
 80086c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086c8:	3230      	adds	r2, #48	; 0x30
 80086ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d6:	f808 2b01 	strb.w	r2, [r8], #1
 80086da:	d439      	bmi.n	8008750 <_dtoa_r+0x588>
 80086dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80086e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	d472      	bmi.n	80087d0 <_dtoa_r+0x608>
 80086ea:	45a0      	cmp	r8, r4
 80086ec:	f43f af5d 	beq.w	80085aa <_dtoa_r+0x3e2>
 80086f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80086f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086f8:	e7e0      	b.n	80086bc <_dtoa_r+0x4f4>
 80086fa:	f8dd 8000 	ldr.w	r8, [sp]
 80086fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008702:	4621      	mov	r1, r4
 8008704:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008708:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800870c:	ee14 2a90 	vmov	r2, s9
 8008710:	3230      	adds	r2, #48	; 0x30
 8008712:	f808 2b01 	strb.w	r2, [r8], #1
 8008716:	45a0      	cmp	r8, r4
 8008718:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800871c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008720:	d118      	bne.n	8008754 <_dtoa_r+0x58c>
 8008722:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008726:	ee37 4b05 	vadd.f64	d4, d7, d5
 800872a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008732:	dc4d      	bgt.n	80087d0 <_dtoa_r+0x608>
 8008734:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008738:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008740:	f57f af33 	bpl.w	80085aa <_dtoa_r+0x3e2>
 8008744:	4688      	mov	r8, r1
 8008746:	3901      	subs	r1, #1
 8008748:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800874c:	2b30      	cmp	r3, #48	; 0x30
 800874e:	d0f9      	beq.n	8008744 <_dtoa_r+0x57c>
 8008750:	46bb      	mov	fp, r7
 8008752:	e02a      	b.n	80087aa <_dtoa_r+0x5e2>
 8008754:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008758:	e7d6      	b.n	8008708 <_dtoa_r+0x540>
 800875a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800875e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008762:	f8dd 8000 	ldr.w	r8, [sp]
 8008766:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800876a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800876e:	ee15 3a10 	vmov	r3, s10
 8008772:	3330      	adds	r3, #48	; 0x30
 8008774:	f808 3b01 	strb.w	r3, [r8], #1
 8008778:	9b00      	ldr	r3, [sp, #0]
 800877a:	eba8 0303 	sub.w	r3, r8, r3
 800877e:	4599      	cmp	r9, r3
 8008780:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008784:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008788:	d133      	bne.n	80087f2 <_dtoa_r+0x62a>
 800878a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800878e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008796:	dc1a      	bgt.n	80087ce <_dtoa_r+0x606>
 8008798:	eeb4 7b46 	vcmp.f64	d7, d6
 800879c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a0:	d103      	bne.n	80087aa <_dtoa_r+0x5e2>
 80087a2:	ee15 3a10 	vmov	r3, s10
 80087a6:	07d9      	lsls	r1, r3, #31
 80087a8:	d411      	bmi.n	80087ce <_dtoa_r+0x606>
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 fe7b 	bl	80094a8 <_Bfree>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087b6:	f888 3000 	strb.w	r3, [r8]
 80087ba:	f10b 0301 	add.w	r3, fp, #1
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f43f ad4d 	beq.w	8008262 <_dtoa_r+0x9a>
 80087c8:	f8c3 8000 	str.w	r8, [r3]
 80087cc:	e549      	b.n	8008262 <_dtoa_r+0x9a>
 80087ce:	465f      	mov	r7, fp
 80087d0:	4643      	mov	r3, r8
 80087d2:	4698      	mov	r8, r3
 80087d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d8:	2a39      	cmp	r2, #57	; 0x39
 80087da:	d106      	bne.n	80087ea <_dtoa_r+0x622>
 80087dc:	9a00      	ldr	r2, [sp, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d1f7      	bne.n	80087d2 <_dtoa_r+0x60a>
 80087e2:	9900      	ldr	r1, [sp, #0]
 80087e4:	2230      	movs	r2, #48	; 0x30
 80087e6:	3701      	adds	r7, #1
 80087e8:	700a      	strb	r2, [r1, #0]
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	3201      	adds	r2, #1
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e7ae      	b.n	8008750 <_dtoa_r+0x588>
 80087f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fe:	d1b2      	bne.n	8008766 <_dtoa_r+0x59e>
 8008800:	e7d3      	b.n	80087aa <_dtoa_r+0x5e2>
 8008802:	bf00      	nop
 8008804:	0800bf48 	.word	0x0800bf48
 8008808:	0800bf20 	.word	0x0800bf20
 800880c:	9908      	ldr	r1, [sp, #32]
 800880e:	2900      	cmp	r1, #0
 8008810:	f000 80d1 	beq.w	80089b6 <_dtoa_r+0x7ee>
 8008814:	9907      	ldr	r1, [sp, #28]
 8008816:	2901      	cmp	r1, #1
 8008818:	f300 80b4 	bgt.w	8008984 <_dtoa_r+0x7bc>
 800881c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800881e:	2900      	cmp	r1, #0
 8008820:	f000 80ac 	beq.w	800897c <_dtoa_r+0x7b4>
 8008824:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008828:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800882c:	461c      	mov	r4, r3
 800882e:	930a      	str	r3, [sp, #40]	; 0x28
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	4413      	add	r3, r2
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	9b06      	ldr	r3, [sp, #24]
 8008838:	2101      	movs	r1, #1
 800883a:	4413      	add	r3, r2
 800883c:	4630      	mov	r0, r6
 800883e:	9306      	str	r3, [sp, #24]
 8008840:	f000 ff38 	bl	80096b4 <__i2b>
 8008844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008846:	4607      	mov	r7, r0
 8008848:	f1b8 0f00 	cmp.w	r8, #0
 800884c:	dd0d      	ble.n	800886a <_dtoa_r+0x6a2>
 800884e:	9a06      	ldr	r2, [sp, #24]
 8008850:	2a00      	cmp	r2, #0
 8008852:	dd0a      	ble.n	800886a <_dtoa_r+0x6a2>
 8008854:	4542      	cmp	r2, r8
 8008856:	9905      	ldr	r1, [sp, #20]
 8008858:	bfa8      	it	ge
 800885a:	4642      	movge	r2, r8
 800885c:	1a89      	subs	r1, r1, r2
 800885e:	9105      	str	r1, [sp, #20]
 8008860:	9906      	ldr	r1, [sp, #24]
 8008862:	eba8 0802 	sub.w	r8, r8, r2
 8008866:	1a8a      	subs	r2, r1, r2
 8008868:	9206      	str	r2, [sp, #24]
 800886a:	b303      	cbz	r3, 80088ae <_dtoa_r+0x6e6>
 800886c:	9a08      	ldr	r2, [sp, #32]
 800886e:	2a00      	cmp	r2, #0
 8008870:	f000 80a6 	beq.w	80089c0 <_dtoa_r+0x7f8>
 8008874:	2c00      	cmp	r4, #0
 8008876:	dd13      	ble.n	80088a0 <_dtoa_r+0x6d8>
 8008878:	4639      	mov	r1, r7
 800887a:	4622      	mov	r2, r4
 800887c:	4630      	mov	r0, r6
 800887e:	930c      	str	r3, [sp, #48]	; 0x30
 8008880:	f000 ffd4 	bl	800982c <__pow5mult>
 8008884:	462a      	mov	r2, r5
 8008886:	4601      	mov	r1, r0
 8008888:	4607      	mov	r7, r0
 800888a:	4630      	mov	r0, r6
 800888c:	f000 ff28 	bl	80096e0 <__multiply>
 8008890:	4629      	mov	r1, r5
 8008892:	900a      	str	r0, [sp, #40]	; 0x28
 8008894:	4630      	mov	r0, r6
 8008896:	f000 fe07 	bl	80094a8 <_Bfree>
 800889a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889e:	4615      	mov	r5, r2
 80088a0:	1b1a      	subs	r2, r3, r4
 80088a2:	d004      	beq.n	80088ae <_dtoa_r+0x6e6>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 ffc0 	bl	800982c <__pow5mult>
 80088ac:	4605      	mov	r5, r0
 80088ae:	2101      	movs	r1, #1
 80088b0:	4630      	mov	r0, r6
 80088b2:	f000 feff 	bl	80096b4 <__i2b>
 80088b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	f340 8082 	ble.w	80089c4 <_dtoa_r+0x7fc>
 80088c0:	461a      	mov	r2, r3
 80088c2:	4601      	mov	r1, r0
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 ffb1 	bl	800982c <__pow5mult>
 80088ca:	9b07      	ldr	r3, [sp, #28]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	4604      	mov	r4, r0
 80088d0:	dd7b      	ble.n	80089ca <_dtoa_r+0x802>
 80088d2:	2300      	movs	r3, #0
 80088d4:	930a      	str	r3, [sp, #40]	; 0x28
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80088dc:	6910      	ldr	r0, [r2, #16]
 80088de:	f000 fe99 	bl	8009614 <__hi0bits>
 80088e2:	f1c0 0020 	rsb	r0, r0, #32
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	4418      	add	r0, r3
 80088ea:	f010 001f 	ands.w	r0, r0, #31
 80088ee:	f000 808d 	beq.w	8008a0c <_dtoa_r+0x844>
 80088f2:	f1c0 0220 	rsb	r2, r0, #32
 80088f6:	2a04      	cmp	r2, #4
 80088f8:	f340 8086 	ble.w	8008a08 <_dtoa_r+0x840>
 80088fc:	f1c0 001c 	rsb	r0, r0, #28
 8008900:	9b05      	ldr	r3, [sp, #20]
 8008902:	4403      	add	r3, r0
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	4403      	add	r3, r0
 800890a:	4480      	add	r8, r0
 800890c:	9306      	str	r3, [sp, #24]
 800890e:	9b05      	ldr	r3, [sp, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x758>
 8008914:	4629      	mov	r1, r5
 8008916:	461a      	mov	r2, r3
 8008918:	4630      	mov	r0, r6
 800891a:	f000 ffe1 	bl	80098e0 <__lshift>
 800891e:	4605      	mov	r5, r0
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x76a>
 8008926:	4621      	mov	r1, r4
 8008928:	461a      	mov	r2, r3
 800892a:	4630      	mov	r0, r6
 800892c:	f000 ffd8 	bl	80098e0 <__lshift>
 8008930:	4604      	mov	r4, r0
 8008932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d06b      	beq.n	8008a10 <_dtoa_r+0x848>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f001 f83c 	bl	80099b8 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	da65      	bge.n	8008a10 <_dtoa_r+0x848>
 8008944:	2300      	movs	r3, #0
 8008946:	4629      	mov	r1, r5
 8008948:	220a      	movs	r2, #10
 800894a:	4630      	mov	r0, r6
 800894c:	f000 fdce 	bl	80094ec <__multadd>
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008956:	4605      	mov	r5, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8192 	beq.w	8008c82 <_dtoa_r+0xaba>
 800895e:	4639      	mov	r1, r7
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	4630      	mov	r0, r6
 8008966:	f000 fdc1 	bl	80094ec <__multadd>
 800896a:	f1ba 0f00 	cmp.w	sl, #0
 800896e:	4607      	mov	r7, r0
 8008970:	f300 808e 	bgt.w	8008a90 <_dtoa_r+0x8c8>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc51      	bgt.n	8008a1e <_dtoa_r+0x856>
 800897a:	e089      	b.n	8008a90 <_dtoa_r+0x8c8>
 800897c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800897e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008982:	e751      	b.n	8008828 <_dtoa_r+0x660>
 8008984:	f109 34ff 	add.w	r4, r9, #4294967295
 8008988:	42a3      	cmp	r3, r4
 800898a:	bfbf      	itttt	lt
 800898c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800898e:	1ae3      	sublt	r3, r4, r3
 8008990:	18d2      	addlt	r2, r2, r3
 8008992:	4613      	movlt	r3, r2
 8008994:	bfb7      	itett	lt
 8008996:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008998:	1b1c      	subge	r4, r3, r4
 800899a:	4623      	movlt	r3, r4
 800899c:	2400      	movlt	r4, #0
 800899e:	f1b9 0f00 	cmp.w	r9, #0
 80089a2:	bfb5      	itete	lt
 80089a4:	9a05      	ldrlt	r2, [sp, #20]
 80089a6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80089aa:	eba2 0809 	sublt.w	r8, r2, r9
 80089ae:	464a      	movge	r2, r9
 80089b0:	bfb8      	it	lt
 80089b2:	2200      	movlt	r2, #0
 80089b4:	e73b      	b.n	800882e <_dtoa_r+0x666>
 80089b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80089ba:	9f08      	ldr	r7, [sp, #32]
 80089bc:	461c      	mov	r4, r3
 80089be:	e743      	b.n	8008848 <_dtoa_r+0x680>
 80089c0:	461a      	mov	r2, r3
 80089c2:	e76f      	b.n	80088a4 <_dtoa_r+0x6dc>
 80089c4:	9b07      	ldr	r3, [sp, #28]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	dc18      	bgt.n	80089fc <_dtoa_r+0x834>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	b9b3      	cbnz	r3, 80089fc <_dtoa_r+0x834>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80089d4:	b9a2      	cbnz	r2, 8008a00 <_dtoa_r+0x838>
 80089d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089da:	0d12      	lsrs	r2, r2, #20
 80089dc:	0512      	lsls	r2, r2, #20
 80089de:	b18a      	cbz	r2, 8008a04 <_dtoa_r+0x83c>
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	2301      	movs	r3, #1
 80089ee:	930a      	str	r3, [sp, #40]	; 0x28
 80089f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f47f af6f 	bne.w	80088d6 <_dtoa_r+0x70e>
 80089f8:	2001      	movs	r0, #1
 80089fa:	e774      	b.n	80088e6 <_dtoa_r+0x71e>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e7f6      	b.n	80089ee <_dtoa_r+0x826>
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	e7f4      	b.n	80089ee <_dtoa_r+0x826>
 8008a04:	920a      	str	r2, [sp, #40]	; 0x28
 8008a06:	e7f3      	b.n	80089f0 <_dtoa_r+0x828>
 8008a08:	d081      	beq.n	800890e <_dtoa_r+0x746>
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	301c      	adds	r0, #28
 8008a0e:	e777      	b.n	8008900 <_dtoa_r+0x738>
 8008a10:	f1b9 0f00 	cmp.w	r9, #0
 8008a14:	dc37      	bgt.n	8008a86 <_dtoa_r+0x8be>
 8008a16:	9b07      	ldr	r3, [sp, #28]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	dd34      	ble.n	8008a86 <_dtoa_r+0x8be>
 8008a1c:	46ca      	mov	sl, r9
 8008a1e:	f1ba 0f00 	cmp.w	sl, #0
 8008a22:	d10d      	bne.n	8008a40 <_dtoa_r+0x878>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4653      	mov	r3, sl
 8008a28:	2205      	movs	r2, #5
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f000 fd5e 	bl	80094ec <__multadd>
 8008a30:	4601      	mov	r1, r0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 ffbf 	bl	80099b8 <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f73f adde 	bgt.w	80085fc <_dtoa_r+0x434>
 8008a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a42:	f8dd 8000 	ldr.w	r8, [sp]
 8008a46:	ea6f 0b03 	mvn.w	fp, r3
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 fd29 	bl	80094a8 <_Bfree>
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	f43f aea7 	beq.w	80087aa <_dtoa_r+0x5e2>
 8008a5c:	f1b9 0f00 	cmp.w	r9, #0
 8008a60:	d005      	beq.n	8008a6e <_dtoa_r+0x8a6>
 8008a62:	45b9      	cmp	r9, r7
 8008a64:	d003      	beq.n	8008a6e <_dtoa_r+0x8a6>
 8008a66:	4649      	mov	r1, r9
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 fd1d 	bl	80094a8 <_Bfree>
 8008a6e:	4639      	mov	r1, r7
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 fd19 	bl	80094a8 <_Bfree>
 8008a76:	e698      	b.n	80087aa <_dtoa_r+0x5e2>
 8008a78:	2400      	movs	r4, #0
 8008a7a:	4627      	mov	r7, r4
 8008a7c:	e7e0      	b.n	8008a40 <_dtoa_r+0x878>
 8008a7e:	46bb      	mov	fp, r7
 8008a80:	4604      	mov	r4, r0
 8008a82:	4607      	mov	r7, r0
 8008a84:	e5ba      	b.n	80085fc <_dtoa_r+0x434>
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	46ca      	mov	sl, r9
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8100 	beq.w	8008c90 <_dtoa_r+0xac8>
 8008a90:	f1b8 0f00 	cmp.w	r8, #0
 8008a94:	dd05      	ble.n	8008aa2 <_dtoa_r+0x8da>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4642      	mov	r2, r8
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 ff20 	bl	80098e0 <__lshift>
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d05d      	beq.n	8008b64 <_dtoa_r+0x99c>
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 fcbc 	bl	8009428 <_Balloc>
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	b928      	cbnz	r0, 8008ac0 <_dtoa_r+0x8f8>
 8008ab4:	4b82      	ldr	r3, [pc, #520]	; (8008cc0 <_dtoa_r+0xaf8>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008abc:	f7ff bb9a 	b.w	80081f4 <_dtoa_r+0x2c>
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	3202      	adds	r2, #2
 8008ac4:	0092      	lsls	r2, r2, #2
 8008ac6:	f107 010c 	add.w	r1, r7, #12
 8008aca:	300c      	adds	r0, #12
 8008acc:	f000 fc9e 	bl	800940c <memcpy>
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4641      	mov	r1, r8
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f000 ff03 	bl	80098e0 <__lshift>
 8008ada:	9b00      	ldr	r3, [sp, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	9305      	str	r3, [sp, #20]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	4453      	add	r3, sl
 8008ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	46b9      	mov	r9, r7
 8008aee:	9308      	str	r3, [sp, #32]
 8008af0:	4607      	mov	r7, r0
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	4621      	mov	r1, r4
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4628      	mov	r0, r5
 8008afa:	9302      	str	r3, [sp, #8]
 8008afc:	f7ff fad8 	bl	80080b0 <quorem>
 8008b00:	4603      	mov	r3, r0
 8008b02:	3330      	adds	r3, #48	; 0x30
 8008b04:	9006      	str	r0, [sp, #24]
 8008b06:	4649      	mov	r1, r9
 8008b08:	4628      	mov	r0, r5
 8008b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b0c:	f000 ff54 	bl	80099b8 <__mcmp>
 8008b10:	463a      	mov	r2, r7
 8008b12:	4682      	mov	sl, r0
 8008b14:	4621      	mov	r1, r4
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 ff6a 	bl	80099f0 <__mdiff>
 8008b1c:	68c2      	ldr	r2, [r0, #12]
 8008b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b20:	4680      	mov	r8, r0
 8008b22:	bb0a      	cbnz	r2, 8008b68 <_dtoa_r+0x9a0>
 8008b24:	4601      	mov	r1, r0
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 ff46 	bl	80099b8 <__mcmp>
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4641      	mov	r1, r8
 8008b32:	4630      	mov	r0, r6
 8008b34:	920e      	str	r2, [sp, #56]	; 0x38
 8008b36:	930a      	str	r3, [sp, #40]	; 0x28
 8008b38:	f000 fcb6 	bl	80094a8 <_Bfree>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008b44:	ea43 0102 	orr.w	r1, r3, r2
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	d10d      	bne.n	8008b6c <_dtoa_r+0x9a4>
 8008b50:	2b39      	cmp	r3, #57	; 0x39
 8008b52:	d029      	beq.n	8008ba8 <_dtoa_r+0x9e0>
 8008b54:	f1ba 0f00 	cmp.w	sl, #0
 8008b58:	dd01      	ble.n	8008b5e <_dtoa_r+0x996>
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	3331      	adds	r3, #49	; 0x31
 8008b5e:	9a02      	ldr	r2, [sp, #8]
 8008b60:	7013      	strb	r3, [r2, #0]
 8008b62:	e774      	b.n	8008a4e <_dtoa_r+0x886>
 8008b64:	4638      	mov	r0, r7
 8008b66:	e7b8      	b.n	8008ada <_dtoa_r+0x912>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	e7e1      	b.n	8008b30 <_dtoa_r+0x968>
 8008b6c:	f1ba 0f00 	cmp.w	sl, #0
 8008b70:	db06      	blt.n	8008b80 <_dtoa_r+0x9b8>
 8008b72:	9907      	ldr	r1, [sp, #28]
 8008b74:	ea41 0a0a 	orr.w	sl, r1, sl
 8008b78:	9908      	ldr	r1, [sp, #32]
 8008b7a:	ea5a 0101 	orrs.w	r1, sl, r1
 8008b7e:	d120      	bne.n	8008bc2 <_dtoa_r+0x9fa>
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	ddec      	ble.n	8008b5e <_dtoa_r+0x996>
 8008b84:	4629      	mov	r1, r5
 8008b86:	2201      	movs	r2, #1
 8008b88:	4630      	mov	r0, r6
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f000 fea8 	bl	80098e0 <__lshift>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4605      	mov	r5, r0
 8008b94:	f000 ff10 	bl	80099b8 <__mcmp>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	9b05      	ldr	r3, [sp, #20]
 8008b9c:	dc02      	bgt.n	8008ba4 <_dtoa_r+0x9dc>
 8008b9e:	d1de      	bne.n	8008b5e <_dtoa_r+0x996>
 8008ba0:	07da      	lsls	r2, r3, #31
 8008ba2:	d5dc      	bpl.n	8008b5e <_dtoa_r+0x996>
 8008ba4:	2b39      	cmp	r3, #57	; 0x39
 8008ba6:	d1d8      	bne.n	8008b5a <_dtoa_r+0x992>
 8008ba8:	9a02      	ldr	r2, [sp, #8]
 8008baa:	2339      	movs	r3, #57	; 0x39
 8008bac:	7013      	strb	r3, [r2, #0]
 8008bae:	4643      	mov	r3, r8
 8008bb0:	4698      	mov	r8, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008bb8:	2a39      	cmp	r2, #57	; 0x39
 8008bba:	d051      	beq.n	8008c60 <_dtoa_r+0xa98>
 8008bbc:	3201      	adds	r2, #1
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	e745      	b.n	8008a4e <_dtoa_r+0x886>
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	dd03      	ble.n	8008bce <_dtoa_r+0xa06>
 8008bc6:	2b39      	cmp	r3, #57	; 0x39
 8008bc8:	d0ee      	beq.n	8008ba8 <_dtoa_r+0x9e0>
 8008bca:	3301      	adds	r3, #1
 8008bcc:	e7c7      	b.n	8008b5e <_dtoa_r+0x996>
 8008bce:	9a05      	ldr	r2, [sp, #20]
 8008bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bd6:	428a      	cmp	r2, r1
 8008bd8:	d02b      	beq.n	8008c32 <_dtoa_r+0xa6a>
 8008bda:	4629      	mov	r1, r5
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 fc83 	bl	80094ec <__multadd>
 8008be6:	45b9      	cmp	r9, r7
 8008be8:	4605      	mov	r5, r0
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	f04f 020a 	mov.w	r2, #10
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	d107      	bne.n	8008c08 <_dtoa_r+0xa40>
 8008bf8:	f000 fc78 	bl	80094ec <__multadd>
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	4607      	mov	r7, r0
 8008c00:	9b05      	ldr	r3, [sp, #20]
 8008c02:	3301      	adds	r3, #1
 8008c04:	9305      	str	r3, [sp, #20]
 8008c06:	e774      	b.n	8008af2 <_dtoa_r+0x92a>
 8008c08:	f000 fc70 	bl	80094ec <__multadd>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4681      	mov	r9, r0
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 fc69 	bl	80094ec <__multadd>
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	e7f0      	b.n	8008c00 <_dtoa_r+0xa38>
 8008c1e:	f1ba 0f00 	cmp.w	sl, #0
 8008c22:	9a00      	ldr	r2, [sp, #0]
 8008c24:	bfcc      	ite	gt
 8008c26:	46d0      	movgt	r8, sl
 8008c28:	f04f 0801 	movle.w	r8, #1
 8008c2c:	4490      	add	r8, r2
 8008c2e:	f04f 0900 	mov.w	r9, #0
 8008c32:	4629      	mov	r1, r5
 8008c34:	2201      	movs	r2, #1
 8008c36:	4630      	mov	r0, r6
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	f000 fe51 	bl	80098e0 <__lshift>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4605      	mov	r5, r0
 8008c42:	f000 feb9 	bl	80099b8 <__mcmp>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dcb1      	bgt.n	8008bae <_dtoa_r+0x9e6>
 8008c4a:	d102      	bne.n	8008c52 <_dtoa_r+0xa8a>
 8008c4c:	9b02      	ldr	r3, [sp, #8]
 8008c4e:	07db      	lsls	r3, r3, #31
 8008c50:	d4ad      	bmi.n	8008bae <_dtoa_r+0x9e6>
 8008c52:	4643      	mov	r3, r8
 8008c54:	4698      	mov	r8, r3
 8008c56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c5a:	2a30      	cmp	r2, #48	; 0x30
 8008c5c:	d0fa      	beq.n	8008c54 <_dtoa_r+0xa8c>
 8008c5e:	e6f6      	b.n	8008a4e <_dtoa_r+0x886>
 8008c60:	9a00      	ldr	r2, [sp, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d1a4      	bne.n	8008bb0 <_dtoa_r+0x9e8>
 8008c66:	f10b 0b01 	add.w	fp, fp, #1
 8008c6a:	2331      	movs	r3, #49	; 0x31
 8008c6c:	e778      	b.n	8008b60 <_dtoa_r+0x998>
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <_dtoa_r+0xafc>)
 8008c70:	f7ff bb12 	b.w	8008298 <_dtoa_r+0xd0>
 8008c74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f47f aaee 	bne.w	8008258 <_dtoa_r+0x90>
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <_dtoa_r+0xb00>)
 8008c7e:	f7ff bb0b 	b.w	8008298 <_dtoa_r+0xd0>
 8008c82:	f1ba 0f00 	cmp.w	sl, #0
 8008c86:	dc03      	bgt.n	8008c90 <_dtoa_r+0xac8>
 8008c88:	9b07      	ldr	r3, [sp, #28]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	f73f aec7 	bgt.w	8008a1e <_dtoa_r+0x856>
 8008c90:	f8dd 8000 	ldr.w	r8, [sp]
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7ff fa0a 	bl	80080b0 <quorem>
 8008c9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ca0:	f808 3b01 	strb.w	r3, [r8], #1
 8008ca4:	9a00      	ldr	r2, [sp, #0]
 8008ca6:	eba8 0202 	sub.w	r2, r8, r2
 8008caa:	4592      	cmp	sl, r2
 8008cac:	ddb7      	ble.n	8008c1e <_dtoa_r+0xa56>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 fc19 	bl	80094ec <__multadd>
 8008cba:	4605      	mov	r5, r0
 8008cbc:	e7ea      	b.n	8008c94 <_dtoa_r+0xacc>
 8008cbe:	bf00      	nop
 8008cc0:	0800be2c 	.word	0x0800be2c
 8008cc4:	0800c031 	.word	0x0800c031
 8008cc8:	0800bda9 	.word	0x0800bda9

08008ccc <rshift>:
 8008ccc:	6903      	ldr	r3, [r0, #16]
 8008cce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cda:	f100 0414 	add.w	r4, r0, #20
 8008cde:	dd45      	ble.n	8008d6c <rshift+0xa0>
 8008ce0:	f011 011f 	ands.w	r1, r1, #31
 8008ce4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ce8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cec:	d10c      	bne.n	8008d08 <rshift+0x3c>
 8008cee:	f100 0710 	add.w	r7, r0, #16
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	42b1      	cmp	r1, r6
 8008cf6:	d334      	bcc.n	8008d62 <rshift+0x96>
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	1eea      	subs	r2, r5, #3
 8008cfe:	4296      	cmp	r6, r2
 8008d00:	bf38      	it	cc
 8008d02:	2300      	movcc	r3, #0
 8008d04:	4423      	add	r3, r4
 8008d06:	e015      	b.n	8008d34 <rshift+0x68>
 8008d08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d0c:	f1c1 0820 	rsb	r8, r1, #32
 8008d10:	40cf      	lsrs	r7, r1
 8008d12:	f105 0e04 	add.w	lr, r5, #4
 8008d16:	46a1      	mov	r9, r4
 8008d18:	4576      	cmp	r6, lr
 8008d1a:	46f4      	mov	ip, lr
 8008d1c:	d815      	bhi.n	8008d4a <rshift+0x7e>
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009a      	lsls	r2, r3, #2
 8008d22:	3a04      	subs	r2, #4
 8008d24:	3501      	adds	r5, #1
 8008d26:	42ae      	cmp	r6, r5
 8008d28:	bf38      	it	cc
 8008d2a:	2200      	movcc	r2, #0
 8008d2c:	18a3      	adds	r3, r4, r2
 8008d2e:	50a7      	str	r7, [r4, r2]
 8008d30:	b107      	cbz	r7, 8008d34 <rshift+0x68>
 8008d32:	3304      	adds	r3, #4
 8008d34:	1b1a      	subs	r2, r3, r4
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d3c:	bf08      	it	eq
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	6102      	str	r2, [r0, #16]
 8008d42:	bf08      	it	eq
 8008d44:	6143      	streq	r3, [r0, #20]
 8008d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	f8dc c000 	ldr.w	ip, [ip]
 8008d4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d52:	ea4c 0707 	orr.w	r7, ip, r7
 8008d56:	f849 7b04 	str.w	r7, [r9], #4
 8008d5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d5e:	40cf      	lsrs	r7, r1
 8008d60:	e7da      	b.n	8008d18 <rshift+0x4c>
 8008d62:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d66:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d6a:	e7c3      	b.n	8008cf4 <rshift+0x28>
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	e7e1      	b.n	8008d34 <rshift+0x68>

08008d70 <__hexdig_fun>:
 8008d70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d802      	bhi.n	8008d7e <__hexdig_fun+0xe>
 8008d78:	3820      	subs	r0, #32
 8008d7a:	b2c0      	uxtb	r0, r0
 8008d7c:	4770      	bx	lr
 8008d7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d801      	bhi.n	8008d8a <__hexdig_fun+0x1a>
 8008d86:	3847      	subs	r0, #71	; 0x47
 8008d88:	e7f7      	b.n	8008d7a <__hexdig_fun+0xa>
 8008d8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	d801      	bhi.n	8008d96 <__hexdig_fun+0x26>
 8008d92:	3827      	subs	r0, #39	; 0x27
 8008d94:	e7f1      	b.n	8008d7a <__hexdig_fun+0xa>
 8008d96:	2000      	movs	r0, #0
 8008d98:	4770      	bx	lr
	...

08008d9c <__gethex>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	ed2d 8b02 	vpush	{d8}
 8008da4:	b089      	sub	sp, #36	; 0x24
 8008da6:	ee08 0a10 	vmov	s16, r0
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	4bbc      	ldr	r3, [pc, #752]	; (80090a0 <__gethex+0x304>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	4618      	mov	r0, r3
 8008db4:	468b      	mov	fp, r1
 8008db6:	4690      	mov	r8, r2
 8008db8:	f7f7 fa4c 	bl	8000254 <strlen>
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	f8db 2000 	ldr.w	r2, [fp]
 8008dc2:	4403      	add	r3, r0
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	1c93      	adds	r3, r2, #2
 8008dce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dd6:	32fe      	adds	r2, #254	; 0xfe
 8008dd8:	18d1      	adds	r1, r2, r3
 8008dda:	461f      	mov	r7, r3
 8008ddc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008de0:	9100      	str	r1, [sp, #0]
 8008de2:	2830      	cmp	r0, #48	; 0x30
 8008de4:	d0f8      	beq.n	8008dd8 <__gethex+0x3c>
 8008de6:	f7ff ffc3 	bl	8008d70 <__hexdig_fun>
 8008dea:	4604      	mov	r4, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d13a      	bne.n	8008e66 <__gethex+0xca>
 8008df0:	9901      	ldr	r1, [sp, #4]
 8008df2:	4652      	mov	r2, sl
 8008df4:	4638      	mov	r0, r7
 8008df6:	f7fe fa98 	bl	800732a <strncmp>
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d168      	bne.n	8008ed2 <__gethex+0x136>
 8008e00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e04:	eb07 060a 	add.w	r6, r7, sl
 8008e08:	f7ff ffb2 	bl	8008d70 <__hexdig_fun>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d062      	beq.n	8008ed6 <__gethex+0x13a>
 8008e10:	4633      	mov	r3, r6
 8008e12:	7818      	ldrb	r0, [r3, #0]
 8008e14:	2830      	cmp	r0, #48	; 0x30
 8008e16:	461f      	mov	r7, r3
 8008e18:	f103 0301 	add.w	r3, r3, #1
 8008e1c:	d0f9      	beq.n	8008e12 <__gethex+0x76>
 8008e1e:	f7ff ffa7 	bl	8008d70 <__hexdig_fun>
 8008e22:	2301      	movs	r3, #1
 8008e24:	fab0 f480 	clz	r4, r0
 8008e28:	0964      	lsrs	r4, r4, #5
 8008e2a:	4635      	mov	r5, r6
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	463a      	mov	r2, r7
 8008e30:	4616      	mov	r6, r2
 8008e32:	3201      	adds	r2, #1
 8008e34:	7830      	ldrb	r0, [r6, #0]
 8008e36:	f7ff ff9b 	bl	8008d70 <__hexdig_fun>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d1f8      	bne.n	8008e30 <__gethex+0x94>
 8008e3e:	9901      	ldr	r1, [sp, #4]
 8008e40:	4652      	mov	r2, sl
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fe fa71 	bl	800732a <strncmp>
 8008e48:	b980      	cbnz	r0, 8008e6c <__gethex+0xd0>
 8008e4a:	b94d      	cbnz	r5, 8008e60 <__gethex+0xc4>
 8008e4c:	eb06 050a 	add.w	r5, r6, sl
 8008e50:	462a      	mov	r2, r5
 8008e52:	4616      	mov	r6, r2
 8008e54:	3201      	adds	r2, #1
 8008e56:	7830      	ldrb	r0, [r6, #0]
 8008e58:	f7ff ff8a 	bl	8008d70 <__hexdig_fun>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1f8      	bne.n	8008e52 <__gethex+0xb6>
 8008e60:	1bad      	subs	r5, r5, r6
 8008e62:	00ad      	lsls	r5, r5, #2
 8008e64:	e004      	b.n	8008e70 <__gethex+0xd4>
 8008e66:	2400      	movs	r4, #0
 8008e68:	4625      	mov	r5, r4
 8008e6a:	e7e0      	b.n	8008e2e <__gethex+0x92>
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	d1f7      	bne.n	8008e60 <__gethex+0xc4>
 8008e70:	7833      	ldrb	r3, [r6, #0]
 8008e72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e76:	2b50      	cmp	r3, #80	; 0x50
 8008e78:	d13b      	bne.n	8008ef2 <__gethex+0x156>
 8008e7a:	7873      	ldrb	r3, [r6, #1]
 8008e7c:	2b2b      	cmp	r3, #43	; 0x2b
 8008e7e:	d02c      	beq.n	8008eda <__gethex+0x13e>
 8008e80:	2b2d      	cmp	r3, #45	; 0x2d
 8008e82:	d02e      	beq.n	8008ee2 <__gethex+0x146>
 8008e84:	1c71      	adds	r1, r6, #1
 8008e86:	f04f 0900 	mov.w	r9, #0
 8008e8a:	7808      	ldrb	r0, [r1, #0]
 8008e8c:	f7ff ff70 	bl	8008d70 <__hexdig_fun>
 8008e90:	1e43      	subs	r3, r0, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b18      	cmp	r3, #24
 8008e96:	d82c      	bhi.n	8008ef2 <__gethex+0x156>
 8008e98:	f1a0 0210 	sub.w	r2, r0, #16
 8008e9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ea0:	f7ff ff66 	bl	8008d70 <__hexdig_fun>
 8008ea4:	1e43      	subs	r3, r0, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b18      	cmp	r3, #24
 8008eaa:	d91d      	bls.n	8008ee8 <__gethex+0x14c>
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	d000      	beq.n	8008eb4 <__gethex+0x118>
 8008eb2:	4252      	negs	r2, r2
 8008eb4:	4415      	add	r5, r2
 8008eb6:	f8cb 1000 	str.w	r1, [fp]
 8008eba:	b1e4      	cbz	r4, 8008ef6 <__gethex+0x15a>
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf14      	ite	ne
 8008ec2:	2700      	movne	r7, #0
 8008ec4:	2706      	moveq	r7, #6
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	b009      	add	sp, #36	; 0x24
 8008eca:	ecbd 8b02 	vpop	{d8}
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	463e      	mov	r6, r7
 8008ed4:	4625      	mov	r5, r4
 8008ed6:	2401      	movs	r4, #1
 8008ed8:	e7ca      	b.n	8008e70 <__gethex+0xd4>
 8008eda:	f04f 0900 	mov.w	r9, #0
 8008ede:	1cb1      	adds	r1, r6, #2
 8008ee0:	e7d3      	b.n	8008e8a <__gethex+0xee>
 8008ee2:	f04f 0901 	mov.w	r9, #1
 8008ee6:	e7fa      	b.n	8008ede <__gethex+0x142>
 8008ee8:	230a      	movs	r3, #10
 8008eea:	fb03 0202 	mla	r2, r3, r2, r0
 8008eee:	3a10      	subs	r2, #16
 8008ef0:	e7d4      	b.n	8008e9c <__gethex+0x100>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	e7df      	b.n	8008eb6 <__gethex+0x11a>
 8008ef6:	1bf3      	subs	r3, r6, r7
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	4621      	mov	r1, r4
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	dc0b      	bgt.n	8008f18 <__gethex+0x17c>
 8008f00:	ee18 0a10 	vmov	r0, s16
 8008f04:	f000 fa90 	bl	8009428 <_Balloc>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	b940      	cbnz	r0, 8008f1e <__gethex+0x182>
 8008f0c:	4b65      	ldr	r3, [pc, #404]	; (80090a4 <__gethex+0x308>)
 8008f0e:	4602      	mov	r2, r0
 8008f10:	21de      	movs	r1, #222	; 0xde
 8008f12:	4865      	ldr	r0, [pc, #404]	; (80090a8 <__gethex+0x30c>)
 8008f14:	f001 fda4 	bl	800aa60 <__assert_func>
 8008f18:	3101      	adds	r1, #1
 8008f1a:	105b      	asrs	r3, r3, #1
 8008f1c:	e7ee      	b.n	8008efc <__gethex+0x160>
 8008f1e:	f100 0914 	add.w	r9, r0, #20
 8008f22:	f04f 0b00 	mov.w	fp, #0
 8008f26:	f1ca 0301 	rsb	r3, sl, #1
 8008f2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f2e:	f8cd b000 	str.w	fp, [sp]
 8008f32:	9306      	str	r3, [sp, #24]
 8008f34:	42b7      	cmp	r7, r6
 8008f36:	d340      	bcc.n	8008fba <__gethex+0x21e>
 8008f38:	9802      	ldr	r0, [sp, #8]
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	f840 3b04 	str.w	r3, [r0], #4
 8008f40:	eba0 0009 	sub.w	r0, r0, r9
 8008f44:	1080      	asrs	r0, r0, #2
 8008f46:	0146      	lsls	r6, r0, #5
 8008f48:	6120      	str	r0, [r4, #16]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fb62 	bl	8009614 <__hi0bits>
 8008f50:	1a30      	subs	r0, r6, r0
 8008f52:	f8d8 6000 	ldr.w	r6, [r8]
 8008f56:	42b0      	cmp	r0, r6
 8008f58:	dd63      	ble.n	8009022 <__gethex+0x286>
 8008f5a:	1b87      	subs	r7, r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 fefd 	bl	8009d5e <__any_on>
 8008f64:	4682      	mov	sl, r0
 8008f66:	b1a8      	cbz	r0, 8008f94 <__gethex+0x1f8>
 8008f68:	1e7b      	subs	r3, r7, #1
 8008f6a:	1159      	asrs	r1, r3, #5
 8008f6c:	f003 021f 	and.w	r2, r3, #31
 8008f70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f74:	f04f 0a01 	mov.w	sl, #1
 8008f78:	fa0a f202 	lsl.w	r2, sl, r2
 8008f7c:	420a      	tst	r2, r1
 8008f7e:	d009      	beq.n	8008f94 <__gethex+0x1f8>
 8008f80:	4553      	cmp	r3, sl
 8008f82:	dd05      	ble.n	8008f90 <__gethex+0x1f4>
 8008f84:	1eb9      	subs	r1, r7, #2
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fee9 	bl	8009d5e <__any_on>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d145      	bne.n	800901c <__gethex+0x280>
 8008f90:	f04f 0a02 	mov.w	sl, #2
 8008f94:	4639      	mov	r1, r7
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff fe98 	bl	8008ccc <rshift>
 8008f9c:	443d      	add	r5, r7
 8008f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fa2:	42ab      	cmp	r3, r5
 8008fa4:	da4c      	bge.n	8009040 <__gethex+0x2a4>
 8008fa6:	ee18 0a10 	vmov	r0, s16
 8008faa:	4621      	mov	r1, r4
 8008fac:	f000 fa7c 	bl	80094a8 <_Bfree>
 8008fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	27a3      	movs	r7, #163	; 0xa3
 8008fb8:	e785      	b.n	8008ec6 <__gethex+0x12a>
 8008fba:	1e73      	subs	r3, r6, #1
 8008fbc:	9a05      	ldr	r2, [sp, #20]
 8008fbe:	9303      	str	r3, [sp, #12]
 8008fc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d019      	beq.n	8008ffc <__gethex+0x260>
 8008fc8:	f1bb 0f20 	cmp.w	fp, #32
 8008fcc:	d107      	bne.n	8008fde <__gethex+0x242>
 8008fce:	9b02      	ldr	r3, [sp, #8]
 8008fd0:	9a00      	ldr	r2, [sp, #0]
 8008fd2:	f843 2b04 	str.w	r2, [r3], #4
 8008fd6:	9302      	str	r3, [sp, #8]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	469b      	mov	fp, r3
 8008fde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fe2:	f7ff fec5 	bl	8008d70 <__hexdig_fun>
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	f000 000f 	and.w	r0, r0, #15
 8008fec:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ff0:	4303      	orrs	r3, r0
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	f10b 0b04 	add.w	fp, fp, #4
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	e00d      	b.n	8009018 <__gethex+0x27c>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	9a06      	ldr	r2, [sp, #24]
 8009000:	4413      	add	r3, r2
 8009002:	42bb      	cmp	r3, r7
 8009004:	d3e0      	bcc.n	8008fc8 <__gethex+0x22c>
 8009006:	4618      	mov	r0, r3
 8009008:	9901      	ldr	r1, [sp, #4]
 800900a:	9307      	str	r3, [sp, #28]
 800900c:	4652      	mov	r2, sl
 800900e:	f7fe f98c 	bl	800732a <strncmp>
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	2800      	cmp	r0, #0
 8009016:	d1d7      	bne.n	8008fc8 <__gethex+0x22c>
 8009018:	461e      	mov	r6, r3
 800901a:	e78b      	b.n	8008f34 <__gethex+0x198>
 800901c:	f04f 0a03 	mov.w	sl, #3
 8009020:	e7b8      	b.n	8008f94 <__gethex+0x1f8>
 8009022:	da0a      	bge.n	800903a <__gethex+0x29e>
 8009024:	1a37      	subs	r7, r6, r0
 8009026:	4621      	mov	r1, r4
 8009028:	ee18 0a10 	vmov	r0, s16
 800902c:	463a      	mov	r2, r7
 800902e:	f000 fc57 	bl	80098e0 <__lshift>
 8009032:	1bed      	subs	r5, r5, r7
 8009034:	4604      	mov	r4, r0
 8009036:	f100 0914 	add.w	r9, r0, #20
 800903a:	f04f 0a00 	mov.w	sl, #0
 800903e:	e7ae      	b.n	8008f9e <__gethex+0x202>
 8009040:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009044:	42a8      	cmp	r0, r5
 8009046:	dd72      	ble.n	800912e <__gethex+0x392>
 8009048:	1b45      	subs	r5, r0, r5
 800904a:	42ae      	cmp	r6, r5
 800904c:	dc36      	bgt.n	80090bc <__gethex+0x320>
 800904e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d02a      	beq.n	80090ac <__gethex+0x310>
 8009056:	2b03      	cmp	r3, #3
 8009058:	d02c      	beq.n	80090b4 <__gethex+0x318>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d115      	bne.n	800908a <__gethex+0x2ee>
 800905e:	42ae      	cmp	r6, r5
 8009060:	d113      	bne.n	800908a <__gethex+0x2ee>
 8009062:	2e01      	cmp	r6, #1
 8009064:	d10b      	bne.n	800907e <__gethex+0x2e2>
 8009066:	9a04      	ldr	r2, [sp, #16]
 8009068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	2301      	movs	r3, #1
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	f8c9 3000 	str.w	r3, [r9]
 8009076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009078:	2762      	movs	r7, #98	; 0x62
 800907a:	601c      	str	r4, [r3, #0]
 800907c:	e723      	b.n	8008ec6 <__gethex+0x12a>
 800907e:	1e71      	subs	r1, r6, #1
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fe6c 	bl	8009d5e <__any_on>
 8009086:	2800      	cmp	r0, #0
 8009088:	d1ed      	bne.n	8009066 <__gethex+0x2ca>
 800908a:	ee18 0a10 	vmov	r0, s16
 800908e:	4621      	mov	r1, r4
 8009090:	f000 fa0a 	bl	80094a8 <_Bfree>
 8009094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009096:	2300      	movs	r3, #0
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	2750      	movs	r7, #80	; 0x50
 800909c:	e713      	b.n	8008ec6 <__gethex+0x12a>
 800909e:	bf00      	nop
 80090a0:	0800bea8 	.word	0x0800bea8
 80090a4:	0800be2c 	.word	0x0800be2c
 80090a8:	0800be3d 	.word	0x0800be3d
 80090ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1eb      	bne.n	800908a <__gethex+0x2ee>
 80090b2:	e7d8      	b.n	8009066 <__gethex+0x2ca>
 80090b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1d5      	bne.n	8009066 <__gethex+0x2ca>
 80090ba:	e7e6      	b.n	800908a <__gethex+0x2ee>
 80090bc:	1e6f      	subs	r7, r5, #1
 80090be:	f1ba 0f00 	cmp.w	sl, #0
 80090c2:	d131      	bne.n	8009128 <__gethex+0x38c>
 80090c4:	b127      	cbz	r7, 80090d0 <__gethex+0x334>
 80090c6:	4639      	mov	r1, r7
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fe48 	bl	8009d5e <__any_on>
 80090ce:	4682      	mov	sl, r0
 80090d0:	117b      	asrs	r3, r7, #5
 80090d2:	2101      	movs	r1, #1
 80090d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090d8:	f007 071f 	and.w	r7, r7, #31
 80090dc:	fa01 f707 	lsl.w	r7, r1, r7
 80090e0:	421f      	tst	r7, r3
 80090e2:	4629      	mov	r1, r5
 80090e4:	4620      	mov	r0, r4
 80090e6:	bf18      	it	ne
 80090e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80090ec:	1b76      	subs	r6, r6, r5
 80090ee:	f7ff fded 	bl	8008ccc <rshift>
 80090f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090f6:	2702      	movs	r7, #2
 80090f8:	f1ba 0f00 	cmp.w	sl, #0
 80090fc:	d048      	beq.n	8009190 <__gethex+0x3f4>
 80090fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d015      	beq.n	8009132 <__gethex+0x396>
 8009106:	2b03      	cmp	r3, #3
 8009108:	d017      	beq.n	800913a <__gethex+0x39e>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d109      	bne.n	8009122 <__gethex+0x386>
 800910e:	f01a 0f02 	tst.w	sl, #2
 8009112:	d006      	beq.n	8009122 <__gethex+0x386>
 8009114:	f8d9 0000 	ldr.w	r0, [r9]
 8009118:	ea4a 0a00 	orr.w	sl, sl, r0
 800911c:	f01a 0f01 	tst.w	sl, #1
 8009120:	d10e      	bne.n	8009140 <__gethex+0x3a4>
 8009122:	f047 0710 	orr.w	r7, r7, #16
 8009126:	e033      	b.n	8009190 <__gethex+0x3f4>
 8009128:	f04f 0a01 	mov.w	sl, #1
 800912c:	e7d0      	b.n	80090d0 <__gethex+0x334>
 800912e:	2701      	movs	r7, #1
 8009130:	e7e2      	b.n	80090f8 <__gethex+0x35c>
 8009132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009134:	f1c3 0301 	rsb	r3, r3, #1
 8009138:	9315      	str	r3, [sp, #84]	; 0x54
 800913a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f0      	beq.n	8009122 <__gethex+0x386>
 8009140:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009144:	f104 0314 	add.w	r3, r4, #20
 8009148:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800914c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009150:	f04f 0c00 	mov.w	ip, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f853 2b04 	ldr.w	r2, [r3], #4
 800915a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800915e:	d01c      	beq.n	800919a <__gethex+0x3fe>
 8009160:	3201      	adds	r2, #1
 8009162:	6002      	str	r2, [r0, #0]
 8009164:	2f02      	cmp	r7, #2
 8009166:	f104 0314 	add.w	r3, r4, #20
 800916a:	d13f      	bne.n	80091ec <__gethex+0x450>
 800916c:	f8d8 2000 	ldr.w	r2, [r8]
 8009170:	3a01      	subs	r2, #1
 8009172:	42b2      	cmp	r2, r6
 8009174:	d10a      	bne.n	800918c <__gethex+0x3f0>
 8009176:	1171      	asrs	r1, r6, #5
 8009178:	2201      	movs	r2, #1
 800917a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800917e:	f006 061f 	and.w	r6, r6, #31
 8009182:	fa02 f606 	lsl.w	r6, r2, r6
 8009186:	421e      	tst	r6, r3
 8009188:	bf18      	it	ne
 800918a:	4617      	movne	r7, r2
 800918c:	f047 0720 	orr.w	r7, r7, #32
 8009190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009192:	601c      	str	r4, [r3, #0]
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	601d      	str	r5, [r3, #0]
 8009198:	e695      	b.n	8008ec6 <__gethex+0x12a>
 800919a:	4299      	cmp	r1, r3
 800919c:	f843 cc04 	str.w	ip, [r3, #-4]
 80091a0:	d8d8      	bhi.n	8009154 <__gethex+0x3b8>
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	459b      	cmp	fp, r3
 80091a6:	db19      	blt.n	80091dc <__gethex+0x440>
 80091a8:	6861      	ldr	r1, [r4, #4]
 80091aa:	ee18 0a10 	vmov	r0, s16
 80091ae:	3101      	adds	r1, #1
 80091b0:	f000 f93a 	bl	8009428 <_Balloc>
 80091b4:	4681      	mov	r9, r0
 80091b6:	b918      	cbnz	r0, 80091c0 <__gethex+0x424>
 80091b8:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <__gethex+0x488>)
 80091ba:	4602      	mov	r2, r0
 80091bc:	2184      	movs	r1, #132	; 0x84
 80091be:	e6a8      	b.n	8008f12 <__gethex+0x176>
 80091c0:	6922      	ldr	r2, [r4, #16]
 80091c2:	3202      	adds	r2, #2
 80091c4:	f104 010c 	add.w	r1, r4, #12
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	300c      	adds	r0, #12
 80091cc:	f000 f91e 	bl	800940c <memcpy>
 80091d0:	4621      	mov	r1, r4
 80091d2:	ee18 0a10 	vmov	r0, s16
 80091d6:	f000 f967 	bl	80094a8 <_Bfree>
 80091da:	464c      	mov	r4, r9
 80091dc:	6923      	ldr	r3, [r4, #16]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091e4:	6122      	str	r2, [r4, #16]
 80091e6:	2201      	movs	r2, #1
 80091e8:	615a      	str	r2, [r3, #20]
 80091ea:	e7bb      	b.n	8009164 <__gethex+0x3c8>
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	455a      	cmp	r2, fp
 80091f0:	dd0b      	ble.n	800920a <__gethex+0x46e>
 80091f2:	2101      	movs	r1, #1
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7ff fd69 	bl	8008ccc <rshift>
 80091fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091fe:	3501      	adds	r5, #1
 8009200:	42ab      	cmp	r3, r5
 8009202:	f6ff aed0 	blt.w	8008fa6 <__gethex+0x20a>
 8009206:	2701      	movs	r7, #1
 8009208:	e7c0      	b.n	800918c <__gethex+0x3f0>
 800920a:	f016 061f 	ands.w	r6, r6, #31
 800920e:	d0fa      	beq.n	8009206 <__gethex+0x46a>
 8009210:	449a      	add	sl, r3
 8009212:	f1c6 0620 	rsb	r6, r6, #32
 8009216:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800921a:	f000 f9fb 	bl	8009614 <__hi0bits>
 800921e:	42b0      	cmp	r0, r6
 8009220:	dbe7      	blt.n	80091f2 <__gethex+0x456>
 8009222:	e7f0      	b.n	8009206 <__gethex+0x46a>
 8009224:	0800be2c 	.word	0x0800be2c

08009228 <L_shift>:
 8009228:	f1c2 0208 	rsb	r2, r2, #8
 800922c:	0092      	lsls	r2, r2, #2
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	f1c2 0620 	rsb	r6, r2, #32
 8009234:	6843      	ldr	r3, [r0, #4]
 8009236:	6804      	ldr	r4, [r0, #0]
 8009238:	fa03 f506 	lsl.w	r5, r3, r6
 800923c:	432c      	orrs	r4, r5
 800923e:	40d3      	lsrs	r3, r2
 8009240:	6004      	str	r4, [r0, #0]
 8009242:	f840 3f04 	str.w	r3, [r0, #4]!
 8009246:	4288      	cmp	r0, r1
 8009248:	d3f4      	bcc.n	8009234 <L_shift+0xc>
 800924a:	bd70      	pop	{r4, r5, r6, pc}

0800924c <__match>:
 800924c:	b530      	push	{r4, r5, lr}
 800924e:	6803      	ldr	r3, [r0, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009256:	b914      	cbnz	r4, 800925e <__match+0x12>
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	2001      	movs	r0, #1
 800925c:	bd30      	pop	{r4, r5, pc}
 800925e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009262:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009266:	2d19      	cmp	r5, #25
 8009268:	bf98      	it	ls
 800926a:	3220      	addls	r2, #32
 800926c:	42a2      	cmp	r2, r4
 800926e:	d0f0      	beq.n	8009252 <__match+0x6>
 8009270:	2000      	movs	r0, #0
 8009272:	e7f3      	b.n	800925c <__match+0x10>

08009274 <__hexnan>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	6801      	ldr	r1, [r0, #0]
 800927c:	115e      	asrs	r6, r3, #5
 800927e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009282:	f013 031f 	ands.w	r3, r3, #31
 8009286:	b087      	sub	sp, #28
 8009288:	bf18      	it	ne
 800928a:	3604      	addne	r6, #4
 800928c:	2500      	movs	r5, #0
 800928e:	1f37      	subs	r7, r6, #4
 8009290:	4682      	mov	sl, r0
 8009292:	4690      	mov	r8, r2
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	f846 5c04 	str.w	r5, [r6, #-4]
 800929a:	46b9      	mov	r9, r7
 800929c:	463c      	mov	r4, r7
 800929e:	9502      	str	r5, [sp, #8]
 80092a0:	46ab      	mov	fp, r5
 80092a2:	784a      	ldrb	r2, [r1, #1]
 80092a4:	1c4b      	adds	r3, r1, #1
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	b342      	cbz	r2, 80092fc <__hexnan+0x88>
 80092aa:	4610      	mov	r0, r2
 80092ac:	9105      	str	r1, [sp, #20]
 80092ae:	9204      	str	r2, [sp, #16]
 80092b0:	f7ff fd5e 	bl	8008d70 <__hexdig_fun>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d14f      	bne.n	8009358 <__hexnan+0xe4>
 80092b8:	9a04      	ldr	r2, [sp, #16]
 80092ba:	9905      	ldr	r1, [sp, #20]
 80092bc:	2a20      	cmp	r2, #32
 80092be:	d818      	bhi.n	80092f2 <__hexnan+0x7e>
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	459b      	cmp	fp, r3
 80092c4:	dd13      	ble.n	80092ee <__hexnan+0x7a>
 80092c6:	454c      	cmp	r4, r9
 80092c8:	d206      	bcs.n	80092d8 <__hexnan+0x64>
 80092ca:	2d07      	cmp	r5, #7
 80092cc:	dc04      	bgt.n	80092d8 <__hexnan+0x64>
 80092ce:	462a      	mov	r2, r5
 80092d0:	4649      	mov	r1, r9
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7ff ffa8 	bl	8009228 <L_shift>
 80092d8:	4544      	cmp	r4, r8
 80092da:	d950      	bls.n	800937e <__hexnan+0x10a>
 80092dc:	2300      	movs	r3, #0
 80092de:	f1a4 0904 	sub.w	r9, r4, #4
 80092e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80092e6:	f8cd b008 	str.w	fp, [sp, #8]
 80092ea:	464c      	mov	r4, r9
 80092ec:	461d      	mov	r5, r3
 80092ee:	9903      	ldr	r1, [sp, #12]
 80092f0:	e7d7      	b.n	80092a2 <__hexnan+0x2e>
 80092f2:	2a29      	cmp	r2, #41	; 0x29
 80092f4:	d156      	bne.n	80093a4 <__hexnan+0x130>
 80092f6:	3102      	adds	r1, #2
 80092f8:	f8ca 1000 	str.w	r1, [sl]
 80092fc:	f1bb 0f00 	cmp.w	fp, #0
 8009300:	d050      	beq.n	80093a4 <__hexnan+0x130>
 8009302:	454c      	cmp	r4, r9
 8009304:	d206      	bcs.n	8009314 <__hexnan+0xa0>
 8009306:	2d07      	cmp	r5, #7
 8009308:	dc04      	bgt.n	8009314 <__hexnan+0xa0>
 800930a:	462a      	mov	r2, r5
 800930c:	4649      	mov	r1, r9
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ff8a 	bl	8009228 <L_shift>
 8009314:	4544      	cmp	r4, r8
 8009316:	d934      	bls.n	8009382 <__hexnan+0x10e>
 8009318:	f1a8 0204 	sub.w	r2, r8, #4
 800931c:	4623      	mov	r3, r4
 800931e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009322:	f842 1f04 	str.w	r1, [r2, #4]!
 8009326:	429f      	cmp	r7, r3
 8009328:	d2f9      	bcs.n	800931e <__hexnan+0xaa>
 800932a:	1b3b      	subs	r3, r7, r4
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	3304      	adds	r3, #4
 8009332:	3401      	adds	r4, #1
 8009334:	3e03      	subs	r6, #3
 8009336:	42b4      	cmp	r4, r6
 8009338:	bf88      	it	hi
 800933a:	2304      	movhi	r3, #4
 800933c:	4443      	add	r3, r8
 800933e:	2200      	movs	r2, #0
 8009340:	f843 2b04 	str.w	r2, [r3], #4
 8009344:	429f      	cmp	r7, r3
 8009346:	d2fb      	bcs.n	8009340 <__hexnan+0xcc>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	b91b      	cbnz	r3, 8009354 <__hexnan+0xe0>
 800934c:	4547      	cmp	r7, r8
 800934e:	d127      	bne.n	80093a0 <__hexnan+0x12c>
 8009350:	2301      	movs	r3, #1
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	2005      	movs	r0, #5
 8009356:	e026      	b.n	80093a6 <__hexnan+0x132>
 8009358:	3501      	adds	r5, #1
 800935a:	2d08      	cmp	r5, #8
 800935c:	f10b 0b01 	add.w	fp, fp, #1
 8009360:	dd06      	ble.n	8009370 <__hexnan+0xfc>
 8009362:	4544      	cmp	r4, r8
 8009364:	d9c3      	bls.n	80092ee <__hexnan+0x7a>
 8009366:	2300      	movs	r3, #0
 8009368:	f844 3c04 	str.w	r3, [r4, #-4]
 800936c:	2501      	movs	r5, #1
 800936e:	3c04      	subs	r4, #4
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	f000 000f 	and.w	r0, r0, #15
 8009376:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	e7b7      	b.n	80092ee <__hexnan+0x7a>
 800937e:	2508      	movs	r5, #8
 8009380:	e7b5      	b.n	80092ee <__hexnan+0x7a>
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0df      	beq.n	8009348 <__hexnan+0xd4>
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	f1c3 0320 	rsb	r3, r3, #32
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009398:	401a      	ands	r2, r3
 800939a:	f846 2c04 	str.w	r2, [r6, #-4]
 800939e:	e7d3      	b.n	8009348 <__hexnan+0xd4>
 80093a0:	3f04      	subs	r7, #4
 80093a2:	e7d1      	b.n	8009348 <__hexnan+0xd4>
 80093a4:	2004      	movs	r0, #4
 80093a6:	b007      	add	sp, #28
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093ac <_localeconv_r>:
 80093ac:	4800      	ldr	r0, [pc, #0]	; (80093b0 <_localeconv_r+0x4>)
 80093ae:	4770      	bx	lr
 80093b0:	200001b8 	.word	0x200001b8

080093b4 <_lseek_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d07      	ldr	r5, [pc, #28]	; (80093d4 <_lseek_r+0x20>)
 80093b8:	4604      	mov	r4, r0
 80093ba:	4608      	mov	r0, r1
 80093bc:	4611      	mov	r1, r2
 80093be:	2200      	movs	r2, #0
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f7f8 fe22 	bl	800200c <_lseek>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_lseek_r+0x1e>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_lseek_r+0x1e>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20010894 	.word	0x20010894

080093d8 <malloc>:
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <malloc+0xc>)
 80093da:	4601      	mov	r1, r0
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f000 bd3f 	b.w	8009e60 <_malloc_r>
 80093e2:	bf00      	nop
 80093e4:	20000060 	.word	0x20000060

080093e8 <__ascii_mbtowc>:
 80093e8:	b082      	sub	sp, #8
 80093ea:	b901      	cbnz	r1, 80093ee <__ascii_mbtowc+0x6>
 80093ec:	a901      	add	r1, sp, #4
 80093ee:	b142      	cbz	r2, 8009402 <__ascii_mbtowc+0x1a>
 80093f0:	b14b      	cbz	r3, 8009406 <__ascii_mbtowc+0x1e>
 80093f2:	7813      	ldrb	r3, [r2, #0]
 80093f4:	600b      	str	r3, [r1, #0]
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	1e10      	subs	r0, r2, #0
 80093fa:	bf18      	it	ne
 80093fc:	2001      	movne	r0, #1
 80093fe:	b002      	add	sp, #8
 8009400:	4770      	bx	lr
 8009402:	4610      	mov	r0, r2
 8009404:	e7fb      	b.n	80093fe <__ascii_mbtowc+0x16>
 8009406:	f06f 0001 	mvn.w	r0, #1
 800940a:	e7f8      	b.n	80093fe <__ascii_mbtowc+0x16>

0800940c <memcpy>:
 800940c:	440a      	add	r2, r1
 800940e:	4291      	cmp	r1, r2
 8009410:	f100 33ff 	add.w	r3, r0, #4294967295
 8009414:	d100      	bne.n	8009418 <memcpy+0xc>
 8009416:	4770      	bx	lr
 8009418:	b510      	push	{r4, lr}
 800941a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009422:	4291      	cmp	r1, r2
 8009424:	d1f9      	bne.n	800941a <memcpy+0xe>
 8009426:	bd10      	pop	{r4, pc}

08009428 <_Balloc>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Balloc+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff ffd0 	bl	80093d8 <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	6260      	str	r0, [r4, #36]	; 0x24
 800943c:	b920      	cbnz	r0, 8009448 <_Balloc+0x20>
 800943e:	4b18      	ldr	r3, [pc, #96]	; (80094a0 <_Balloc+0x78>)
 8009440:	4818      	ldr	r0, [pc, #96]	; (80094a4 <_Balloc+0x7c>)
 8009442:	2166      	movs	r1, #102	; 0x66
 8009444:	f001 fb0c 	bl	800aa60 <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009452:	68f3      	ldr	r3, [r6, #12]
 8009454:	b183      	cbz	r3, 8009478 <_Balloc+0x50>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800945e:	b9b8      	cbnz	r0, 8009490 <_Balloc+0x68>
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f605 	lsl.w	r6, r1, r5
 8009466:	1d72      	adds	r2, r6, #5
 8009468:	0092      	lsls	r2, r2, #2
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fc98 	bl	8009da0 <_calloc_r>
 8009470:	b160      	cbz	r0, 800948c <_Balloc+0x64>
 8009472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009476:	e00e      	b.n	8009496 <_Balloc+0x6e>
 8009478:	2221      	movs	r2, #33	; 0x21
 800947a:	2104      	movs	r1, #4
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fc8f 	bl	8009da0 <_calloc_r>
 8009482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009484:	60f0      	str	r0, [r6, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e4      	bne.n	8009456 <_Balloc+0x2e>
 800948c:	2000      	movs	r0, #0
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	6802      	ldr	r2, [r0, #0]
 8009492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009496:	2300      	movs	r3, #0
 8009498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800949c:	e7f7      	b.n	800948e <_Balloc+0x66>
 800949e:	bf00      	nop
 80094a0:	0800bdb6 	.word	0x0800bdb6
 80094a4:	0800bebc 	.word	0x0800bebc

080094a8 <_Bfree>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b976      	cbnz	r6, 80094d0 <_Bfree+0x28>
 80094b2:	2010      	movs	r0, #16
 80094b4:	f7ff ff90 	bl	80093d8 <malloc>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6268      	str	r0, [r5, #36]	; 0x24
 80094bc:	b920      	cbnz	r0, 80094c8 <_Bfree+0x20>
 80094be:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <_Bfree+0x3c>)
 80094c0:	4809      	ldr	r0, [pc, #36]	; (80094e8 <_Bfree+0x40>)
 80094c2:	218a      	movs	r1, #138	; 0x8a
 80094c4:	f001 facc 	bl	800aa60 <__assert_func>
 80094c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094cc:	6006      	str	r6, [r0, #0]
 80094ce:	60c6      	str	r6, [r0, #12]
 80094d0:	b13c      	cbz	r4, 80094e2 <_Bfree+0x3a>
 80094d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094dc:	6021      	str	r1, [r4, #0]
 80094de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	0800bdb6 	.word	0x0800bdb6
 80094e8:	0800bebc 	.word	0x0800bebc

080094ec <__multadd>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	690e      	ldr	r6, [r1, #16]
 80094f2:	4607      	mov	r7, r0
 80094f4:	4698      	mov	r8, r3
 80094f6:	460c      	mov	r4, r1
 80094f8:	f101 0014 	add.w	r0, r1, #20
 80094fc:	2300      	movs	r3, #0
 80094fe:	6805      	ldr	r5, [r0, #0]
 8009500:	b2a9      	uxth	r1, r5
 8009502:	fb02 8101 	mla	r1, r2, r1, r8
 8009506:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800950a:	0c2d      	lsrs	r5, r5, #16
 800950c:	fb02 c505 	mla	r5, r2, r5, ip
 8009510:	b289      	uxth	r1, r1
 8009512:	3301      	adds	r3, #1
 8009514:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009518:	429e      	cmp	r6, r3
 800951a:	f840 1b04 	str.w	r1, [r0], #4
 800951e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009522:	dcec      	bgt.n	80094fe <__multadd+0x12>
 8009524:	f1b8 0f00 	cmp.w	r8, #0
 8009528:	d022      	beq.n	8009570 <__multadd+0x84>
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	42b3      	cmp	r3, r6
 800952e:	dc19      	bgt.n	8009564 <__multadd+0x78>
 8009530:	6861      	ldr	r1, [r4, #4]
 8009532:	4638      	mov	r0, r7
 8009534:	3101      	adds	r1, #1
 8009536:	f7ff ff77 	bl	8009428 <_Balloc>
 800953a:	4605      	mov	r5, r0
 800953c:	b928      	cbnz	r0, 800954a <__multadd+0x5e>
 800953e:	4602      	mov	r2, r0
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <__multadd+0x8c>)
 8009542:	480e      	ldr	r0, [pc, #56]	; (800957c <__multadd+0x90>)
 8009544:	21b5      	movs	r1, #181	; 0xb5
 8009546:	f001 fa8b 	bl	800aa60 <__assert_func>
 800954a:	6922      	ldr	r2, [r4, #16]
 800954c:	3202      	adds	r2, #2
 800954e:	f104 010c 	add.w	r1, r4, #12
 8009552:	0092      	lsls	r2, r2, #2
 8009554:	300c      	adds	r0, #12
 8009556:	f7ff ff59 	bl	800940c <memcpy>
 800955a:	4621      	mov	r1, r4
 800955c:	4638      	mov	r0, r7
 800955e:	f7ff ffa3 	bl	80094a8 <_Bfree>
 8009562:	462c      	mov	r4, r5
 8009564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009568:	3601      	adds	r6, #1
 800956a:	f8c3 8014 	str.w	r8, [r3, #20]
 800956e:	6126      	str	r6, [r4, #16]
 8009570:	4620      	mov	r0, r4
 8009572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009576:	bf00      	nop
 8009578:	0800be2c 	.word	0x0800be2c
 800957c:	0800bebc 	.word	0x0800bebc

08009580 <__s2b>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	460c      	mov	r4, r1
 8009586:	4615      	mov	r5, r2
 8009588:	461f      	mov	r7, r3
 800958a:	2209      	movs	r2, #9
 800958c:	3308      	adds	r3, #8
 800958e:	4606      	mov	r6, r0
 8009590:	fb93 f3f2 	sdiv	r3, r3, r2
 8009594:	2100      	movs	r1, #0
 8009596:	2201      	movs	r2, #1
 8009598:	429a      	cmp	r2, r3
 800959a:	db09      	blt.n	80095b0 <__s2b+0x30>
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff ff43 	bl	8009428 <_Balloc>
 80095a2:	b940      	cbnz	r0, 80095b6 <__s2b+0x36>
 80095a4:	4602      	mov	r2, r0
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <__s2b+0x8c>)
 80095a8:	4819      	ldr	r0, [pc, #100]	; (8009610 <__s2b+0x90>)
 80095aa:	21ce      	movs	r1, #206	; 0xce
 80095ac:	f001 fa58 	bl	800aa60 <__assert_func>
 80095b0:	0052      	lsls	r2, r2, #1
 80095b2:	3101      	adds	r1, #1
 80095b4:	e7f0      	b.n	8009598 <__s2b+0x18>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	6143      	str	r3, [r0, #20]
 80095ba:	2d09      	cmp	r5, #9
 80095bc:	f04f 0301 	mov.w	r3, #1
 80095c0:	6103      	str	r3, [r0, #16]
 80095c2:	dd16      	ble.n	80095f2 <__s2b+0x72>
 80095c4:	f104 0909 	add.w	r9, r4, #9
 80095c8:	46c8      	mov	r8, r9
 80095ca:	442c      	add	r4, r5
 80095cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095d0:	4601      	mov	r1, r0
 80095d2:	3b30      	subs	r3, #48	; 0x30
 80095d4:	220a      	movs	r2, #10
 80095d6:	4630      	mov	r0, r6
 80095d8:	f7ff ff88 	bl	80094ec <__multadd>
 80095dc:	45a0      	cmp	r8, r4
 80095de:	d1f5      	bne.n	80095cc <__s2b+0x4c>
 80095e0:	f1a5 0408 	sub.w	r4, r5, #8
 80095e4:	444c      	add	r4, r9
 80095e6:	1b2d      	subs	r5, r5, r4
 80095e8:	1963      	adds	r3, r4, r5
 80095ea:	42bb      	cmp	r3, r7
 80095ec:	db04      	blt.n	80095f8 <__s2b+0x78>
 80095ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f2:	340a      	adds	r4, #10
 80095f4:	2509      	movs	r5, #9
 80095f6:	e7f6      	b.n	80095e6 <__s2b+0x66>
 80095f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095fc:	4601      	mov	r1, r0
 80095fe:	3b30      	subs	r3, #48	; 0x30
 8009600:	220a      	movs	r2, #10
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ff72 	bl	80094ec <__multadd>
 8009608:	e7ee      	b.n	80095e8 <__s2b+0x68>
 800960a:	bf00      	nop
 800960c:	0800be2c 	.word	0x0800be2c
 8009610:	0800bebc 	.word	0x0800bebc

08009614 <__hi0bits>:
 8009614:	0c03      	lsrs	r3, r0, #16
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	b9d3      	cbnz	r3, 8009650 <__hi0bits+0x3c>
 800961a:	0400      	lsls	r0, r0, #16
 800961c:	2310      	movs	r3, #16
 800961e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009622:	bf04      	itt	eq
 8009624:	0200      	lsleq	r0, r0, #8
 8009626:	3308      	addeq	r3, #8
 8009628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800962c:	bf04      	itt	eq
 800962e:	0100      	lsleq	r0, r0, #4
 8009630:	3304      	addeq	r3, #4
 8009632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009636:	bf04      	itt	eq
 8009638:	0080      	lsleq	r0, r0, #2
 800963a:	3302      	addeq	r3, #2
 800963c:	2800      	cmp	r0, #0
 800963e:	db05      	blt.n	800964c <__hi0bits+0x38>
 8009640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009644:	f103 0301 	add.w	r3, r3, #1
 8009648:	bf08      	it	eq
 800964a:	2320      	moveq	r3, #32
 800964c:	4618      	mov	r0, r3
 800964e:	4770      	bx	lr
 8009650:	2300      	movs	r3, #0
 8009652:	e7e4      	b.n	800961e <__hi0bits+0xa>

08009654 <__lo0bits>:
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	f013 0207 	ands.w	r2, r3, #7
 800965a:	4601      	mov	r1, r0
 800965c:	d00b      	beq.n	8009676 <__lo0bits+0x22>
 800965e:	07da      	lsls	r2, r3, #31
 8009660:	d424      	bmi.n	80096ac <__lo0bits+0x58>
 8009662:	0798      	lsls	r0, r3, #30
 8009664:	bf49      	itett	mi
 8009666:	085b      	lsrmi	r3, r3, #1
 8009668:	089b      	lsrpl	r3, r3, #2
 800966a:	2001      	movmi	r0, #1
 800966c:	600b      	strmi	r3, [r1, #0]
 800966e:	bf5c      	itt	pl
 8009670:	600b      	strpl	r3, [r1, #0]
 8009672:	2002      	movpl	r0, #2
 8009674:	4770      	bx	lr
 8009676:	b298      	uxth	r0, r3
 8009678:	b9b0      	cbnz	r0, 80096a8 <__lo0bits+0x54>
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	2010      	movs	r0, #16
 800967e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009682:	bf04      	itt	eq
 8009684:	0a1b      	lsreq	r3, r3, #8
 8009686:	3008      	addeq	r0, #8
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	bf04      	itt	eq
 800968c:	091b      	lsreq	r3, r3, #4
 800968e:	3004      	addeq	r0, #4
 8009690:	079a      	lsls	r2, r3, #30
 8009692:	bf04      	itt	eq
 8009694:	089b      	lsreq	r3, r3, #2
 8009696:	3002      	addeq	r0, #2
 8009698:	07da      	lsls	r2, r3, #31
 800969a:	d403      	bmi.n	80096a4 <__lo0bits+0x50>
 800969c:	085b      	lsrs	r3, r3, #1
 800969e:	f100 0001 	add.w	r0, r0, #1
 80096a2:	d005      	beq.n	80096b0 <__lo0bits+0x5c>
 80096a4:	600b      	str	r3, [r1, #0]
 80096a6:	4770      	bx	lr
 80096a8:	4610      	mov	r0, r2
 80096aa:	e7e8      	b.n	800967e <__lo0bits+0x2a>
 80096ac:	2000      	movs	r0, #0
 80096ae:	4770      	bx	lr
 80096b0:	2020      	movs	r0, #32
 80096b2:	4770      	bx	lr

080096b4 <__i2b>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	460c      	mov	r4, r1
 80096b8:	2101      	movs	r1, #1
 80096ba:	f7ff feb5 	bl	8009428 <_Balloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	b928      	cbnz	r0, 80096ce <__i2b+0x1a>
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <__i2b+0x24>)
 80096c4:	4805      	ldr	r0, [pc, #20]	; (80096dc <__i2b+0x28>)
 80096c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096ca:	f001 f9c9 	bl	800aa60 <__assert_func>
 80096ce:	2301      	movs	r3, #1
 80096d0:	6144      	str	r4, [r0, #20]
 80096d2:	6103      	str	r3, [r0, #16]
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	0800be2c 	.word	0x0800be2c
 80096dc:	0800bebc 	.word	0x0800bebc

080096e0 <__multiply>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4614      	mov	r4, r2
 80096e6:	690a      	ldr	r2, [r1, #16]
 80096e8:	6923      	ldr	r3, [r4, #16]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	bfb8      	it	lt
 80096ee:	460b      	movlt	r3, r1
 80096f0:	460d      	mov	r5, r1
 80096f2:	bfbc      	itt	lt
 80096f4:	4625      	movlt	r5, r4
 80096f6:	461c      	movlt	r4, r3
 80096f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80096fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009700:	68ab      	ldr	r3, [r5, #8]
 8009702:	6869      	ldr	r1, [r5, #4]
 8009704:	eb0a 0709 	add.w	r7, sl, r9
 8009708:	42bb      	cmp	r3, r7
 800970a:	b085      	sub	sp, #20
 800970c:	bfb8      	it	lt
 800970e:	3101      	addlt	r1, #1
 8009710:	f7ff fe8a 	bl	8009428 <_Balloc>
 8009714:	b930      	cbnz	r0, 8009724 <__multiply+0x44>
 8009716:	4602      	mov	r2, r0
 8009718:	4b42      	ldr	r3, [pc, #264]	; (8009824 <__multiply+0x144>)
 800971a:	4843      	ldr	r0, [pc, #268]	; (8009828 <__multiply+0x148>)
 800971c:	f240 115d 	movw	r1, #349	; 0x15d
 8009720:	f001 f99e 	bl	800aa60 <__assert_func>
 8009724:	f100 0614 	add.w	r6, r0, #20
 8009728:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800972c:	4633      	mov	r3, r6
 800972e:	2200      	movs	r2, #0
 8009730:	4543      	cmp	r3, r8
 8009732:	d31e      	bcc.n	8009772 <__multiply+0x92>
 8009734:	f105 0c14 	add.w	ip, r5, #20
 8009738:	f104 0314 	add.w	r3, r4, #20
 800973c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009740:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009744:	9202      	str	r2, [sp, #8]
 8009746:	ebac 0205 	sub.w	r2, ip, r5
 800974a:	3a15      	subs	r2, #21
 800974c:	f022 0203 	bic.w	r2, r2, #3
 8009750:	3204      	adds	r2, #4
 8009752:	f105 0115 	add.w	r1, r5, #21
 8009756:	458c      	cmp	ip, r1
 8009758:	bf38      	it	cc
 800975a:	2204      	movcc	r2, #4
 800975c:	9201      	str	r2, [sp, #4]
 800975e:	9a02      	ldr	r2, [sp, #8]
 8009760:	9303      	str	r3, [sp, #12]
 8009762:	429a      	cmp	r2, r3
 8009764:	d808      	bhi.n	8009778 <__multiply+0x98>
 8009766:	2f00      	cmp	r7, #0
 8009768:	dc55      	bgt.n	8009816 <__multiply+0x136>
 800976a:	6107      	str	r7, [r0, #16]
 800976c:	b005      	add	sp, #20
 800976e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009772:	f843 2b04 	str.w	r2, [r3], #4
 8009776:	e7db      	b.n	8009730 <__multiply+0x50>
 8009778:	f8b3 a000 	ldrh.w	sl, [r3]
 800977c:	f1ba 0f00 	cmp.w	sl, #0
 8009780:	d020      	beq.n	80097c4 <__multiply+0xe4>
 8009782:	f105 0e14 	add.w	lr, r5, #20
 8009786:	46b1      	mov	r9, r6
 8009788:	2200      	movs	r2, #0
 800978a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800978e:	f8d9 b000 	ldr.w	fp, [r9]
 8009792:	b2a1      	uxth	r1, r4
 8009794:	fa1f fb8b 	uxth.w	fp, fp
 8009798:	fb0a b101 	mla	r1, sl, r1, fp
 800979c:	4411      	add	r1, r2
 800979e:	f8d9 2000 	ldr.w	r2, [r9]
 80097a2:	0c24      	lsrs	r4, r4, #16
 80097a4:	0c12      	lsrs	r2, r2, #16
 80097a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80097aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80097ae:	b289      	uxth	r1, r1
 80097b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80097b4:	45f4      	cmp	ip, lr
 80097b6:	f849 1b04 	str.w	r1, [r9], #4
 80097ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80097be:	d8e4      	bhi.n	800978a <__multiply+0xaa>
 80097c0:	9901      	ldr	r1, [sp, #4]
 80097c2:	5072      	str	r2, [r6, r1]
 80097c4:	9a03      	ldr	r2, [sp, #12]
 80097c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097ca:	3304      	adds	r3, #4
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	d01f      	beq.n	8009812 <__multiply+0x132>
 80097d2:	6834      	ldr	r4, [r6, #0]
 80097d4:	f105 0114 	add.w	r1, r5, #20
 80097d8:	46b6      	mov	lr, r6
 80097da:	f04f 0a00 	mov.w	sl, #0
 80097de:	880a      	ldrh	r2, [r1, #0]
 80097e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80097e4:	fb09 b202 	mla	r2, r9, r2, fp
 80097e8:	4492      	add	sl, r2
 80097ea:	b2a4      	uxth	r4, r4
 80097ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80097f0:	f84e 4b04 	str.w	r4, [lr], #4
 80097f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80097f8:	f8be 2000 	ldrh.w	r2, [lr]
 80097fc:	0c24      	lsrs	r4, r4, #16
 80097fe:	fb09 2404 	mla	r4, r9, r4, r2
 8009802:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009806:	458c      	cmp	ip, r1
 8009808:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800980c:	d8e7      	bhi.n	80097de <__multiply+0xfe>
 800980e:	9a01      	ldr	r2, [sp, #4]
 8009810:	50b4      	str	r4, [r6, r2]
 8009812:	3604      	adds	r6, #4
 8009814:	e7a3      	b.n	800975e <__multiply+0x7e>
 8009816:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1a5      	bne.n	800976a <__multiply+0x8a>
 800981e:	3f01      	subs	r7, #1
 8009820:	e7a1      	b.n	8009766 <__multiply+0x86>
 8009822:	bf00      	nop
 8009824:	0800be2c 	.word	0x0800be2c
 8009828:	0800bebc 	.word	0x0800bebc

0800982c <__pow5mult>:
 800982c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009830:	4615      	mov	r5, r2
 8009832:	f012 0203 	ands.w	r2, r2, #3
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	d007      	beq.n	800984c <__pow5mult+0x20>
 800983c:	4c25      	ldr	r4, [pc, #148]	; (80098d4 <__pow5mult+0xa8>)
 800983e:	3a01      	subs	r2, #1
 8009840:	2300      	movs	r3, #0
 8009842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009846:	f7ff fe51 	bl	80094ec <__multadd>
 800984a:	4607      	mov	r7, r0
 800984c:	10ad      	asrs	r5, r5, #2
 800984e:	d03d      	beq.n	80098cc <__pow5mult+0xa0>
 8009850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009852:	b97c      	cbnz	r4, 8009874 <__pow5mult+0x48>
 8009854:	2010      	movs	r0, #16
 8009856:	f7ff fdbf 	bl	80093d8 <malloc>
 800985a:	4602      	mov	r2, r0
 800985c:	6270      	str	r0, [r6, #36]	; 0x24
 800985e:	b928      	cbnz	r0, 800986c <__pow5mult+0x40>
 8009860:	4b1d      	ldr	r3, [pc, #116]	; (80098d8 <__pow5mult+0xac>)
 8009862:	481e      	ldr	r0, [pc, #120]	; (80098dc <__pow5mult+0xb0>)
 8009864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009868:	f001 f8fa 	bl	800aa60 <__assert_func>
 800986c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009870:	6004      	str	r4, [r0, #0]
 8009872:	60c4      	str	r4, [r0, #12]
 8009874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800987c:	b94c      	cbnz	r4, 8009892 <__pow5mult+0x66>
 800987e:	f240 2171 	movw	r1, #625	; 0x271
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ff16 	bl	80096b4 <__i2b>
 8009888:	2300      	movs	r3, #0
 800988a:	f8c8 0008 	str.w	r0, [r8, #8]
 800988e:	4604      	mov	r4, r0
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	07eb      	lsls	r3, r5, #31
 8009898:	d50a      	bpl.n	80098b0 <__pow5mult+0x84>
 800989a:	4639      	mov	r1, r7
 800989c:	4622      	mov	r2, r4
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ff1e 	bl	80096e0 <__multiply>
 80098a4:	4639      	mov	r1, r7
 80098a6:	4680      	mov	r8, r0
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff fdfd 	bl	80094a8 <_Bfree>
 80098ae:	4647      	mov	r7, r8
 80098b0:	106d      	asrs	r5, r5, #1
 80098b2:	d00b      	beq.n	80098cc <__pow5mult+0xa0>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	b938      	cbnz	r0, 80098c8 <__pow5mult+0x9c>
 80098b8:	4622      	mov	r2, r4
 80098ba:	4621      	mov	r1, r4
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff ff0f 	bl	80096e0 <__multiply>
 80098c2:	6020      	str	r0, [r4, #0]
 80098c4:	f8c0 9000 	str.w	r9, [r0]
 80098c8:	4604      	mov	r4, r0
 80098ca:	e7e4      	b.n	8009896 <__pow5mult+0x6a>
 80098cc:	4638      	mov	r0, r7
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	bf00      	nop
 80098d4:	0800c010 	.word	0x0800c010
 80098d8:	0800bdb6 	.word	0x0800bdb6
 80098dc:	0800bebc 	.word	0x0800bebc

080098e0 <__lshift>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	460c      	mov	r4, r1
 80098e6:	6849      	ldr	r1, [r1, #4]
 80098e8:	6923      	ldr	r3, [r4, #16]
 80098ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ee:	68a3      	ldr	r3, [r4, #8]
 80098f0:	4607      	mov	r7, r0
 80098f2:	4691      	mov	r9, r2
 80098f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098f8:	f108 0601 	add.w	r6, r8, #1
 80098fc:	42b3      	cmp	r3, r6
 80098fe:	db0b      	blt.n	8009918 <__lshift+0x38>
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff fd91 	bl	8009428 <_Balloc>
 8009906:	4605      	mov	r5, r0
 8009908:	b948      	cbnz	r0, 800991e <__lshift+0x3e>
 800990a:	4602      	mov	r2, r0
 800990c:	4b28      	ldr	r3, [pc, #160]	; (80099b0 <__lshift+0xd0>)
 800990e:	4829      	ldr	r0, [pc, #164]	; (80099b4 <__lshift+0xd4>)
 8009910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009914:	f001 f8a4 	bl	800aa60 <__assert_func>
 8009918:	3101      	adds	r1, #1
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	e7ee      	b.n	80098fc <__lshift+0x1c>
 800991e:	2300      	movs	r3, #0
 8009920:	f100 0114 	add.w	r1, r0, #20
 8009924:	f100 0210 	add.w	r2, r0, #16
 8009928:	4618      	mov	r0, r3
 800992a:	4553      	cmp	r3, sl
 800992c:	db33      	blt.n	8009996 <__lshift+0xb6>
 800992e:	6920      	ldr	r0, [r4, #16]
 8009930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009934:	f104 0314 	add.w	r3, r4, #20
 8009938:	f019 091f 	ands.w	r9, r9, #31
 800993c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009944:	d02b      	beq.n	800999e <__lshift+0xbe>
 8009946:	f1c9 0e20 	rsb	lr, r9, #32
 800994a:	468a      	mov	sl, r1
 800994c:	2200      	movs	r2, #0
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	fa00 f009 	lsl.w	r0, r0, r9
 8009954:	4302      	orrs	r2, r0
 8009956:	f84a 2b04 	str.w	r2, [sl], #4
 800995a:	f853 2b04 	ldr.w	r2, [r3], #4
 800995e:	459c      	cmp	ip, r3
 8009960:	fa22 f20e 	lsr.w	r2, r2, lr
 8009964:	d8f3      	bhi.n	800994e <__lshift+0x6e>
 8009966:	ebac 0304 	sub.w	r3, ip, r4
 800996a:	3b15      	subs	r3, #21
 800996c:	f023 0303 	bic.w	r3, r3, #3
 8009970:	3304      	adds	r3, #4
 8009972:	f104 0015 	add.w	r0, r4, #21
 8009976:	4584      	cmp	ip, r0
 8009978:	bf38      	it	cc
 800997a:	2304      	movcc	r3, #4
 800997c:	50ca      	str	r2, [r1, r3]
 800997e:	b10a      	cbz	r2, 8009984 <__lshift+0xa4>
 8009980:	f108 0602 	add.w	r6, r8, #2
 8009984:	3e01      	subs	r6, #1
 8009986:	4638      	mov	r0, r7
 8009988:	612e      	str	r6, [r5, #16]
 800998a:	4621      	mov	r1, r4
 800998c:	f7ff fd8c 	bl	80094a8 <_Bfree>
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	f842 0f04 	str.w	r0, [r2, #4]!
 800999a:	3301      	adds	r3, #1
 800999c:	e7c5      	b.n	800992a <__lshift+0x4a>
 800999e:	3904      	subs	r1, #4
 80099a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80099a8:	459c      	cmp	ip, r3
 80099aa:	d8f9      	bhi.n	80099a0 <__lshift+0xc0>
 80099ac:	e7ea      	b.n	8009984 <__lshift+0xa4>
 80099ae:	bf00      	nop
 80099b0:	0800be2c 	.word	0x0800be2c
 80099b4:	0800bebc 	.word	0x0800bebc

080099b8 <__mcmp>:
 80099b8:	b530      	push	{r4, r5, lr}
 80099ba:	6902      	ldr	r2, [r0, #16]
 80099bc:	690c      	ldr	r4, [r1, #16]
 80099be:	1b12      	subs	r2, r2, r4
 80099c0:	d10e      	bne.n	80099e0 <__mcmp+0x28>
 80099c2:	f100 0314 	add.w	r3, r0, #20
 80099c6:	3114      	adds	r1, #20
 80099c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d003      	beq.n	80099e4 <__mcmp+0x2c>
 80099dc:	d305      	bcc.n	80099ea <__mcmp+0x32>
 80099de:	2201      	movs	r2, #1
 80099e0:	4610      	mov	r0, r2
 80099e2:	bd30      	pop	{r4, r5, pc}
 80099e4:	4283      	cmp	r3, r0
 80099e6:	d3f3      	bcc.n	80099d0 <__mcmp+0x18>
 80099e8:	e7fa      	b.n	80099e0 <__mcmp+0x28>
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	e7f7      	b.n	80099e0 <__mcmp+0x28>

080099f0 <__mdiff>:
 80099f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	460c      	mov	r4, r1
 80099f6:	4606      	mov	r6, r0
 80099f8:	4611      	mov	r1, r2
 80099fa:	4620      	mov	r0, r4
 80099fc:	4617      	mov	r7, r2
 80099fe:	f7ff ffdb 	bl	80099b8 <__mcmp>
 8009a02:	1e05      	subs	r5, r0, #0
 8009a04:	d110      	bne.n	8009a28 <__mdiff+0x38>
 8009a06:	4629      	mov	r1, r5
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fd0d 	bl	8009428 <_Balloc>
 8009a0e:	b930      	cbnz	r0, 8009a1e <__mdiff+0x2e>
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <__mdiff+0x108>)
 8009a12:	4602      	mov	r2, r0
 8009a14:	f240 2132 	movw	r1, #562	; 0x232
 8009a18:	4838      	ldr	r0, [pc, #224]	; (8009afc <__mdiff+0x10c>)
 8009a1a:	f001 f821 	bl	800aa60 <__assert_func>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	bfa4      	itt	ge
 8009a2a:	463b      	movge	r3, r7
 8009a2c:	4627      	movge	r7, r4
 8009a2e:	4630      	mov	r0, r6
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	bfa6      	itte	ge
 8009a34:	461c      	movge	r4, r3
 8009a36:	2500      	movge	r5, #0
 8009a38:	2501      	movlt	r5, #1
 8009a3a:	f7ff fcf5 	bl	8009428 <_Balloc>
 8009a3e:	b920      	cbnz	r0, 8009a4a <__mdiff+0x5a>
 8009a40:	4b2d      	ldr	r3, [pc, #180]	; (8009af8 <__mdiff+0x108>)
 8009a42:	4602      	mov	r2, r0
 8009a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a48:	e7e6      	b.n	8009a18 <__mdiff+0x28>
 8009a4a:	693e      	ldr	r6, [r7, #16]
 8009a4c:	60c5      	str	r5, [r0, #12]
 8009a4e:	6925      	ldr	r5, [r4, #16]
 8009a50:	f107 0114 	add.w	r1, r7, #20
 8009a54:	f104 0914 	add.w	r9, r4, #20
 8009a58:	f100 0e14 	add.w	lr, r0, #20
 8009a5c:	f107 0210 	add.w	r2, r7, #16
 8009a60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009a64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009a68:	46f2      	mov	sl, lr
 8009a6a:	2700      	movs	r7, #0
 8009a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a74:	fa1f f883 	uxth.w	r8, r3
 8009a78:	fa17 f78b 	uxtah	r7, r7, fp
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	eba7 0808 	sub.w	r8, r7, r8
 8009a82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a8a:	fa1f f888 	uxth.w	r8, r8
 8009a8e:	141f      	asrs	r7, r3, #16
 8009a90:	454d      	cmp	r5, r9
 8009a92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a96:	f84a 3b04 	str.w	r3, [sl], #4
 8009a9a:	d8e7      	bhi.n	8009a6c <__mdiff+0x7c>
 8009a9c:	1b2b      	subs	r3, r5, r4
 8009a9e:	3b15      	subs	r3, #21
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	3415      	adds	r4, #21
 8009aa8:	42a5      	cmp	r5, r4
 8009aaa:	bf38      	it	cc
 8009aac:	2304      	movcc	r3, #4
 8009aae:	4419      	add	r1, r3
 8009ab0:	4473      	add	r3, lr
 8009ab2:	469e      	mov	lr, r3
 8009ab4:	460d      	mov	r5, r1
 8009ab6:	4565      	cmp	r5, ip
 8009ab8:	d30e      	bcc.n	8009ad8 <__mdiff+0xe8>
 8009aba:	f10c 0203 	add.w	r2, ip, #3
 8009abe:	1a52      	subs	r2, r2, r1
 8009ac0:	f022 0203 	bic.w	r2, r2, #3
 8009ac4:	3903      	subs	r1, #3
 8009ac6:	458c      	cmp	ip, r1
 8009ac8:	bf38      	it	cc
 8009aca:	2200      	movcc	r2, #0
 8009acc:	441a      	add	r2, r3
 8009ace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ad2:	b17b      	cbz	r3, 8009af4 <__mdiff+0x104>
 8009ad4:	6106      	str	r6, [r0, #16]
 8009ad6:	e7a5      	b.n	8009a24 <__mdiff+0x34>
 8009ad8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009adc:	fa17 f488 	uxtah	r4, r7, r8
 8009ae0:	1422      	asrs	r2, r4, #16
 8009ae2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009ae6:	b2a4      	uxth	r4, r4
 8009ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009aec:	f84e 4b04 	str.w	r4, [lr], #4
 8009af0:	1417      	asrs	r7, r2, #16
 8009af2:	e7e0      	b.n	8009ab6 <__mdiff+0xc6>
 8009af4:	3e01      	subs	r6, #1
 8009af6:	e7ea      	b.n	8009ace <__mdiff+0xde>
 8009af8:	0800be2c 	.word	0x0800be2c
 8009afc:	0800bebc 	.word	0x0800bebc

08009b00 <__ulp>:
 8009b00:	b082      	sub	sp, #8
 8009b02:	ed8d 0b00 	vstr	d0, [sp]
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	4912      	ldr	r1, [pc, #72]	; (8009b54 <__ulp+0x54>)
 8009b0a:	4019      	ands	r1, r3
 8009b0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b10:	2900      	cmp	r1, #0
 8009b12:	dd05      	ble.n	8009b20 <__ulp+0x20>
 8009b14:	2200      	movs	r2, #0
 8009b16:	460b      	mov	r3, r1
 8009b18:	ec43 2b10 	vmov	d0, r2, r3
 8009b1c:	b002      	add	sp, #8
 8009b1e:	4770      	bx	lr
 8009b20:	4249      	negs	r1, r1
 8009b22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b26:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	da04      	bge.n	8009b3e <__ulp+0x3e>
 8009b34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b38:	fa41 f300 	asr.w	r3, r1, r0
 8009b3c:	e7ec      	b.n	8009b18 <__ulp+0x18>
 8009b3e:	f1a0 0114 	sub.w	r1, r0, #20
 8009b42:	291e      	cmp	r1, #30
 8009b44:	bfda      	itte	le
 8009b46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b4a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b4e:	2101      	movgt	r1, #1
 8009b50:	460a      	mov	r2, r1
 8009b52:	e7e1      	b.n	8009b18 <__ulp+0x18>
 8009b54:	7ff00000 	.word	0x7ff00000

08009b58 <__b2d>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	6905      	ldr	r5, [r0, #16]
 8009b5c:	f100 0714 	add.w	r7, r0, #20
 8009b60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b64:	1f2e      	subs	r6, r5, #4
 8009b66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff fd52 	bl	8009614 <__hi0bits>
 8009b70:	f1c0 0320 	rsb	r3, r0, #32
 8009b74:	280a      	cmp	r0, #10
 8009b76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009bf4 <__b2d+0x9c>
 8009b7a:	600b      	str	r3, [r1, #0]
 8009b7c:	dc14      	bgt.n	8009ba8 <__b2d+0x50>
 8009b7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b82:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b86:	42b7      	cmp	r7, r6
 8009b88:	ea41 030c 	orr.w	r3, r1, ip
 8009b8c:	bf34      	ite	cc
 8009b8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b92:	2100      	movcs	r1, #0
 8009b94:	3015      	adds	r0, #21
 8009b96:	fa04 f000 	lsl.w	r0, r4, r0
 8009b9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b9e:	ea40 0201 	orr.w	r2, r0, r1
 8009ba2:	ec43 2b10 	vmov	d0, r2, r3
 8009ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ba8:	42b7      	cmp	r7, r6
 8009baa:	bf3a      	itte	cc
 8009bac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bb4:	2100      	movcs	r1, #0
 8009bb6:	380b      	subs	r0, #11
 8009bb8:	d017      	beq.n	8009bea <__b2d+0x92>
 8009bba:	f1c0 0c20 	rsb	ip, r0, #32
 8009bbe:	fa04 f500 	lsl.w	r5, r4, r0
 8009bc2:	42be      	cmp	r6, r7
 8009bc4:	fa21 f40c 	lsr.w	r4, r1, ip
 8009bc8:	ea45 0504 	orr.w	r5, r5, r4
 8009bcc:	bf8c      	ite	hi
 8009bce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bd2:	2400      	movls	r4, #0
 8009bd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bd8:	fa01 f000 	lsl.w	r0, r1, r0
 8009bdc:	fa24 f40c 	lsr.w	r4, r4, ip
 8009be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009be4:	ea40 0204 	orr.w	r2, r0, r4
 8009be8:	e7db      	b.n	8009ba2 <__b2d+0x4a>
 8009bea:	ea44 030c 	orr.w	r3, r4, ip
 8009bee:	460a      	mov	r2, r1
 8009bf0:	e7d7      	b.n	8009ba2 <__b2d+0x4a>
 8009bf2:	bf00      	nop
 8009bf4:	3ff00000 	.word	0x3ff00000

08009bf8 <__d2b>:
 8009bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	4689      	mov	r9, r1
 8009bfe:	2101      	movs	r1, #1
 8009c00:	ec57 6b10 	vmov	r6, r7, d0
 8009c04:	4690      	mov	r8, r2
 8009c06:	f7ff fc0f 	bl	8009428 <_Balloc>
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	b930      	cbnz	r0, 8009c1c <__d2b+0x24>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4b25      	ldr	r3, [pc, #148]	; (8009ca8 <__d2b+0xb0>)
 8009c12:	4826      	ldr	r0, [pc, #152]	; (8009cac <__d2b+0xb4>)
 8009c14:	f240 310a 	movw	r1, #778	; 0x30a
 8009c18:	f000 ff22 	bl	800aa60 <__assert_func>
 8009c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c24:	bb35      	cbnz	r5, 8009c74 <__d2b+0x7c>
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	d028      	beq.n	8009c7e <__d2b+0x86>
 8009c2c:	4668      	mov	r0, sp
 8009c2e:	9600      	str	r6, [sp, #0]
 8009c30:	f7ff fd10 	bl	8009654 <__lo0bits>
 8009c34:	9900      	ldr	r1, [sp, #0]
 8009c36:	b300      	cbz	r0, 8009c7a <__d2b+0x82>
 8009c38:	9a01      	ldr	r2, [sp, #4]
 8009c3a:	f1c0 0320 	rsb	r3, r0, #32
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	430b      	orrs	r3, r1
 8009c44:	40c2      	lsrs	r2, r0
 8009c46:	6163      	str	r3, [r4, #20]
 8009c48:	9201      	str	r2, [sp, #4]
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	61a3      	str	r3, [r4, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bf14      	ite	ne
 8009c52:	2202      	movne	r2, #2
 8009c54:	2201      	moveq	r2, #1
 8009c56:	6122      	str	r2, [r4, #16]
 8009c58:	b1d5      	cbz	r5, 8009c90 <__d2b+0x98>
 8009c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c5e:	4405      	add	r5, r0
 8009c60:	f8c9 5000 	str.w	r5, [r9]
 8009c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c68:	f8c8 0000 	str.w	r0, [r8]
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c78:	e7d5      	b.n	8009c26 <__d2b+0x2e>
 8009c7a:	6161      	str	r1, [r4, #20]
 8009c7c:	e7e5      	b.n	8009c4a <__d2b+0x52>
 8009c7e:	a801      	add	r0, sp, #4
 8009c80:	f7ff fce8 	bl	8009654 <__lo0bits>
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	6122      	str	r2, [r4, #16]
 8009c8c:	3020      	adds	r0, #32
 8009c8e:	e7e3      	b.n	8009c58 <__d2b+0x60>
 8009c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c98:	f8c9 0000 	str.w	r0, [r9]
 8009c9c:	6918      	ldr	r0, [r3, #16]
 8009c9e:	f7ff fcb9 	bl	8009614 <__hi0bits>
 8009ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ca6:	e7df      	b.n	8009c68 <__d2b+0x70>
 8009ca8:	0800be2c 	.word	0x0800be2c
 8009cac:	0800bebc 	.word	0x0800bebc

08009cb0 <__ratio>:
 8009cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	468a      	mov	sl, r1
 8009cb6:	4669      	mov	r1, sp
 8009cb8:	4683      	mov	fp, r0
 8009cba:	f7ff ff4d 	bl	8009b58 <__b2d>
 8009cbe:	a901      	add	r1, sp, #4
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	ec59 8b10 	vmov	r8, r9, d0
 8009cc6:	ee10 6a10 	vmov	r6, s0
 8009cca:	f7ff ff45 	bl	8009b58 <__b2d>
 8009cce:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009cd2:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009cd6:	eba3 0c02 	sub.w	ip, r3, r2
 8009cda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ce4:	ec55 4b10 	vmov	r4, r5, d0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	ee10 0a10 	vmov	r0, s0
 8009cee:	bfce      	itee	gt
 8009cf0:	464a      	movgt	r2, r9
 8009cf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cf6:	462a      	movle	r2, r5
 8009cf8:	464f      	mov	r7, r9
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	bfcc      	ite	gt
 8009cfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d02:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009d06:	ec47 6b17 	vmov	d7, r6, r7
 8009d0a:	ec41 0b16 	vmov	d6, r0, r1
 8009d0e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009d12:	b003      	add	sp, #12
 8009d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d18 <__copybits>:
 8009d18:	3901      	subs	r1, #1
 8009d1a:	b570      	push	{r4, r5, r6, lr}
 8009d1c:	1149      	asrs	r1, r1, #5
 8009d1e:	6914      	ldr	r4, [r2, #16]
 8009d20:	3101      	adds	r1, #1
 8009d22:	f102 0314 	add.w	r3, r2, #20
 8009d26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d2e:	1f05      	subs	r5, r0, #4
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d30c      	bcc.n	8009d4e <__copybits+0x36>
 8009d34:	1aa3      	subs	r3, r4, r2
 8009d36:	3b11      	subs	r3, #17
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	3211      	adds	r2, #17
 8009d3e:	42a2      	cmp	r2, r4
 8009d40:	bf88      	it	hi
 8009d42:	2300      	movhi	r3, #0
 8009d44:	4418      	add	r0, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4288      	cmp	r0, r1
 8009d4a:	d305      	bcc.n	8009d58 <__copybits+0x40>
 8009d4c:	bd70      	pop	{r4, r5, r6, pc}
 8009d4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d52:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d56:	e7eb      	b.n	8009d30 <__copybits+0x18>
 8009d58:	f840 3b04 	str.w	r3, [r0], #4
 8009d5c:	e7f4      	b.n	8009d48 <__copybits+0x30>

08009d5e <__any_on>:
 8009d5e:	f100 0214 	add.w	r2, r0, #20
 8009d62:	6900      	ldr	r0, [r0, #16]
 8009d64:	114b      	asrs	r3, r1, #5
 8009d66:	4298      	cmp	r0, r3
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	db11      	blt.n	8009d90 <__any_on+0x32>
 8009d6c:	dd0a      	ble.n	8009d84 <__any_on+0x26>
 8009d6e:	f011 011f 	ands.w	r1, r1, #31
 8009d72:	d007      	beq.n	8009d84 <__any_on+0x26>
 8009d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d78:	fa24 f001 	lsr.w	r0, r4, r1
 8009d7c:	fa00 f101 	lsl.w	r1, r0, r1
 8009d80:	428c      	cmp	r4, r1
 8009d82:	d10b      	bne.n	8009d9c <__any_on+0x3e>
 8009d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d803      	bhi.n	8009d94 <__any_on+0x36>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	bd10      	pop	{r4, pc}
 8009d90:	4603      	mov	r3, r0
 8009d92:	e7f7      	b.n	8009d84 <__any_on+0x26>
 8009d94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	d0f5      	beq.n	8009d88 <__any_on+0x2a>
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	e7f6      	b.n	8009d8e <__any_on+0x30>

08009da0 <_calloc_r>:
 8009da0:	b513      	push	{r0, r1, r4, lr}
 8009da2:	434a      	muls	r2, r1
 8009da4:	4611      	mov	r1, r2
 8009da6:	9201      	str	r2, [sp, #4]
 8009da8:	f000 f85a 	bl	8009e60 <_malloc_r>
 8009dac:	4604      	mov	r4, r0
 8009dae:	b118      	cbz	r0, 8009db8 <_calloc_r+0x18>
 8009db0:	9a01      	ldr	r2, [sp, #4]
 8009db2:	2100      	movs	r1, #0
 8009db4:	f7fc fbd4 	bl	8006560 <memset>
 8009db8:	4620      	mov	r0, r4
 8009dba:	b002      	add	sp, #8
 8009dbc:	bd10      	pop	{r4, pc}
	...

08009dc0 <_free_r>:
 8009dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dc2:	2900      	cmp	r1, #0
 8009dc4:	d048      	beq.n	8009e58 <_free_r+0x98>
 8009dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dca:	9001      	str	r0, [sp, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f1a1 0404 	sub.w	r4, r1, #4
 8009dd2:	bfb8      	it	lt
 8009dd4:	18e4      	addlt	r4, r4, r3
 8009dd6:	f001 f847 	bl	800ae68 <__malloc_lock>
 8009dda:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <_free_r+0x9c>)
 8009ddc:	9801      	ldr	r0, [sp, #4]
 8009dde:	6813      	ldr	r3, [r2, #0]
 8009de0:	4615      	mov	r5, r2
 8009de2:	b933      	cbnz	r3, 8009df2 <_free_r+0x32>
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6014      	str	r4, [r2, #0]
 8009de8:	b003      	add	sp, #12
 8009dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dee:	f001 b841 	b.w	800ae74 <__malloc_unlock>
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	d90b      	bls.n	8009e0e <_free_r+0x4e>
 8009df6:	6821      	ldr	r1, [r4, #0]
 8009df8:	1862      	adds	r2, r4, r1
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	bf04      	itt	eq
 8009dfe:	681a      	ldreq	r2, [r3, #0]
 8009e00:	685b      	ldreq	r3, [r3, #4]
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	bf04      	itt	eq
 8009e06:	1852      	addeq	r2, r2, r1
 8009e08:	6022      	streq	r2, [r4, #0]
 8009e0a:	602c      	str	r4, [r5, #0]
 8009e0c:	e7ec      	b.n	8009de8 <_free_r+0x28>
 8009e0e:	461a      	mov	r2, r3
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b10b      	cbz	r3, 8009e18 <_free_r+0x58>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d9fa      	bls.n	8009e0e <_free_r+0x4e>
 8009e18:	6811      	ldr	r1, [r2, #0]
 8009e1a:	1855      	adds	r5, r2, r1
 8009e1c:	42a5      	cmp	r5, r4
 8009e1e:	d10b      	bne.n	8009e38 <_free_r+0x78>
 8009e20:	6824      	ldr	r4, [r4, #0]
 8009e22:	4421      	add	r1, r4
 8009e24:	1854      	adds	r4, r2, r1
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	d1dd      	bne.n	8009de8 <_free_r+0x28>
 8009e2c:	681c      	ldr	r4, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	6053      	str	r3, [r2, #4]
 8009e32:	4421      	add	r1, r4
 8009e34:	6011      	str	r1, [r2, #0]
 8009e36:	e7d7      	b.n	8009de8 <_free_r+0x28>
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x80>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	e7d3      	b.n	8009de8 <_free_r+0x28>
 8009e40:	6825      	ldr	r5, [r4, #0]
 8009e42:	1961      	adds	r1, r4, r5
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf04      	itt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	6063      	str	r3, [r4, #4]
 8009e4e:	bf04      	itt	eq
 8009e50:	1949      	addeq	r1, r1, r5
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	6054      	str	r4, [r2, #4]
 8009e56:	e7c7      	b.n	8009de8 <_free_r+0x28>
 8009e58:	b003      	add	sp, #12
 8009e5a:	bd30      	pop	{r4, r5, pc}
 8009e5c:	2000025c 	.word	0x2000025c

08009e60 <_malloc_r>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	1ccd      	adds	r5, r1, #3
 8009e64:	f025 0503 	bic.w	r5, r5, #3
 8009e68:	3508      	adds	r5, #8
 8009e6a:	2d0c      	cmp	r5, #12
 8009e6c:	bf38      	it	cc
 8009e6e:	250c      	movcc	r5, #12
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	4606      	mov	r6, r0
 8009e74:	db01      	blt.n	8009e7a <_malloc_r+0x1a>
 8009e76:	42a9      	cmp	r1, r5
 8009e78:	d903      	bls.n	8009e82 <_malloc_r+0x22>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	2000      	movs	r0, #0
 8009e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e82:	f000 fff1 	bl	800ae68 <__malloc_lock>
 8009e86:	4921      	ldr	r1, [pc, #132]	; (8009f0c <_malloc_r+0xac>)
 8009e88:	680a      	ldr	r2, [r1, #0]
 8009e8a:	4614      	mov	r4, r2
 8009e8c:	b99c      	cbnz	r4, 8009eb6 <_malloc_r+0x56>
 8009e8e:	4f20      	ldr	r7, [pc, #128]	; (8009f10 <_malloc_r+0xb0>)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	b923      	cbnz	r3, 8009e9e <_malloc_r+0x3e>
 8009e94:	4621      	mov	r1, r4
 8009e96:	4630      	mov	r0, r6
 8009e98:	f000 fcd2 	bl	800a840 <_sbrk_r>
 8009e9c:	6038      	str	r0, [r7, #0]
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f000 fccd 	bl	800a840 <_sbrk_r>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	d123      	bne.n	8009ef2 <_malloc_r+0x92>
 8009eaa:	230c      	movs	r3, #12
 8009eac:	6033      	str	r3, [r6, #0]
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 ffe0 	bl	800ae74 <__malloc_unlock>
 8009eb4:	e7e3      	b.n	8009e7e <_malloc_r+0x1e>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	1b5b      	subs	r3, r3, r5
 8009eba:	d417      	bmi.n	8009eec <_malloc_r+0x8c>
 8009ebc:	2b0b      	cmp	r3, #11
 8009ebe:	d903      	bls.n	8009ec8 <_malloc_r+0x68>
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	441c      	add	r4, r3
 8009ec4:	6025      	str	r5, [r4, #0]
 8009ec6:	e004      	b.n	8009ed2 <_malloc_r+0x72>
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	42a2      	cmp	r2, r4
 8009ecc:	bf0c      	ite	eq
 8009ece:	600b      	streq	r3, [r1, #0]
 8009ed0:	6053      	strne	r3, [r2, #4]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 ffce 	bl	800ae74 <__malloc_unlock>
 8009ed8:	f104 000b 	add.w	r0, r4, #11
 8009edc:	1d23      	adds	r3, r4, #4
 8009ede:	f020 0007 	bic.w	r0, r0, #7
 8009ee2:	1ac2      	subs	r2, r0, r3
 8009ee4:	d0cc      	beq.n	8009e80 <_malloc_r+0x20>
 8009ee6:	1a1b      	subs	r3, r3, r0
 8009ee8:	50a3      	str	r3, [r4, r2]
 8009eea:	e7c9      	b.n	8009e80 <_malloc_r+0x20>
 8009eec:	4622      	mov	r2, r4
 8009eee:	6864      	ldr	r4, [r4, #4]
 8009ef0:	e7cc      	b.n	8009e8c <_malloc_r+0x2c>
 8009ef2:	1cc4      	adds	r4, r0, #3
 8009ef4:	f024 0403 	bic.w	r4, r4, #3
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d0e3      	beq.n	8009ec4 <_malloc_r+0x64>
 8009efc:	1a21      	subs	r1, r4, r0
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 fc9e 	bl	800a840 <_sbrk_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d1dd      	bne.n	8009ec4 <_malloc_r+0x64>
 8009f08:	e7cf      	b.n	8009eaa <_malloc_r+0x4a>
 8009f0a:	bf00      	nop
 8009f0c:	2000025c 	.word	0x2000025c
 8009f10:	20000260 	.word	0x20000260

08009f14 <__ssputs_r>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	688e      	ldr	r6, [r1, #8]
 8009f1a:	429e      	cmp	r6, r3
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4690      	mov	r8, r2
 8009f22:	461f      	mov	r7, r3
 8009f24:	d838      	bhi.n	8009f98 <__ssputs_r+0x84>
 8009f26:	898a      	ldrh	r2, [r1, #12]
 8009f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f2c:	d032      	beq.n	8009f94 <__ssputs_r+0x80>
 8009f2e:	6825      	ldr	r5, [r4, #0]
 8009f30:	6909      	ldr	r1, [r1, #16]
 8009f32:	eba5 0901 	sub.w	r9, r5, r1
 8009f36:	6965      	ldr	r5, [r4, #20]
 8009f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f40:	3301      	adds	r3, #1
 8009f42:	444b      	add	r3, r9
 8009f44:	106d      	asrs	r5, r5, #1
 8009f46:	429d      	cmp	r5, r3
 8009f48:	bf38      	it	cc
 8009f4a:	461d      	movcc	r5, r3
 8009f4c:	0553      	lsls	r3, r2, #21
 8009f4e:	d531      	bpl.n	8009fb4 <__ssputs_r+0xa0>
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7ff ff85 	bl	8009e60 <_malloc_r>
 8009f56:	4606      	mov	r6, r0
 8009f58:	b950      	cbnz	r0, 8009f70 <__ssputs_r+0x5c>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	f8ca 3000 	str.w	r3, [sl]
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	464a      	mov	r2, r9
 8009f74:	f7ff fa4a 	bl	800940c <memcpy>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6126      	str	r6, [r4, #16]
 8009f86:	6165      	str	r5, [r4, #20]
 8009f88:	444e      	add	r6, r9
 8009f8a:	eba5 0509 	sub.w	r5, r5, r9
 8009f8e:	6026      	str	r6, [r4, #0]
 8009f90:	60a5      	str	r5, [r4, #8]
 8009f92:	463e      	mov	r6, r7
 8009f94:	42be      	cmp	r6, r7
 8009f96:	d900      	bls.n	8009f9a <__ssputs_r+0x86>
 8009f98:	463e      	mov	r6, r7
 8009f9a:	4632      	mov	r2, r6
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	f000 ff48 	bl	800ae34 <memmove>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	1b9b      	subs	r3, r3, r6
 8009faa:	4432      	add	r2, r6
 8009fac:	60a3      	str	r3, [r4, #8]
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7db      	b.n	8009f6c <__ssputs_r+0x58>
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	f000 ff63 	bl	800ae80 <_realloc_r>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d1e1      	bne.n	8009f84 <__ssputs_r+0x70>
 8009fc0:	6921      	ldr	r1, [r4, #16]
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	f7ff fefc 	bl	8009dc0 <_free_r>
 8009fc8:	e7c7      	b.n	8009f5a <__ssputs_r+0x46>
	...

08009fcc <_svfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	4698      	mov	r8, r3
 8009fd2:	898b      	ldrh	r3, [r1, #12]
 8009fd4:	061b      	lsls	r3, r3, #24
 8009fd6:	b09d      	sub	sp, #116	; 0x74
 8009fd8:	4607      	mov	r7, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	4614      	mov	r4, r2
 8009fde:	d50e      	bpl.n	8009ffe <_svfiprintf_r+0x32>
 8009fe0:	690b      	ldr	r3, [r1, #16]
 8009fe2:	b963      	cbnz	r3, 8009ffe <_svfiprintf_r+0x32>
 8009fe4:	2140      	movs	r1, #64	; 0x40
 8009fe6:	f7ff ff3b 	bl	8009e60 <_malloc_r>
 8009fea:	6028      	str	r0, [r5, #0]
 8009fec:	6128      	str	r0, [r5, #16]
 8009fee:	b920      	cbnz	r0, 8009ffa <_svfiprintf_r+0x2e>
 8009ff0:	230c      	movs	r3, #12
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e0d1      	b.n	800a19e <_svfiprintf_r+0x1d2>
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	616b      	str	r3, [r5, #20]
 8009ffe:	2300      	movs	r3, #0
 800a000:	9309      	str	r3, [sp, #36]	; 0x24
 800a002:	2320      	movs	r3, #32
 800a004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a008:	f8cd 800c 	str.w	r8, [sp, #12]
 800a00c:	2330      	movs	r3, #48	; 0x30
 800a00e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1b8 <_svfiprintf_r+0x1ec>
 800a012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a016:	f04f 0901 	mov.w	r9, #1
 800a01a:	4623      	mov	r3, r4
 800a01c:	469a      	mov	sl, r3
 800a01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a022:	b10a      	cbz	r2, 800a028 <_svfiprintf_r+0x5c>
 800a024:	2a25      	cmp	r2, #37	; 0x25
 800a026:	d1f9      	bne.n	800a01c <_svfiprintf_r+0x50>
 800a028:	ebba 0b04 	subs.w	fp, sl, r4
 800a02c:	d00b      	beq.n	800a046 <_svfiprintf_r+0x7a>
 800a02e:	465b      	mov	r3, fp
 800a030:	4622      	mov	r2, r4
 800a032:	4629      	mov	r1, r5
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff ff6d 	bl	8009f14 <__ssputs_r>
 800a03a:	3001      	adds	r0, #1
 800a03c:	f000 80aa 	beq.w	800a194 <_svfiprintf_r+0x1c8>
 800a040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a042:	445a      	add	r2, fp
 800a044:	9209      	str	r2, [sp, #36]	; 0x24
 800a046:	f89a 3000 	ldrb.w	r3, [sl]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80a2 	beq.w	800a194 <_svfiprintf_r+0x1c8>
 800a050:	2300      	movs	r3, #0
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a05a:	f10a 0a01 	add.w	sl, sl, #1
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a066:	931a      	str	r3, [sp, #104]	; 0x68
 800a068:	4654      	mov	r4, sl
 800a06a:	2205      	movs	r2, #5
 800a06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a070:	4851      	ldr	r0, [pc, #324]	; (800a1b8 <_svfiprintf_r+0x1ec>)
 800a072:	f7f6 f8fd 	bl	8000270 <memchr>
 800a076:	9a04      	ldr	r2, [sp, #16]
 800a078:	b9d8      	cbnz	r0, 800a0b2 <_svfiprintf_r+0xe6>
 800a07a:	06d0      	lsls	r0, r2, #27
 800a07c:	bf44      	itt	mi
 800a07e:	2320      	movmi	r3, #32
 800a080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a084:	0711      	lsls	r1, r2, #28
 800a086:	bf44      	itt	mi
 800a088:	232b      	movmi	r3, #43	; 0x2b
 800a08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08e:	f89a 3000 	ldrb.w	r3, [sl]
 800a092:	2b2a      	cmp	r3, #42	; 0x2a
 800a094:	d015      	beq.n	800a0c2 <_svfiprintf_r+0xf6>
 800a096:	9a07      	ldr	r2, [sp, #28]
 800a098:	4654      	mov	r4, sl
 800a09a:	2000      	movs	r0, #0
 800a09c:	f04f 0c0a 	mov.w	ip, #10
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a6:	3b30      	subs	r3, #48	; 0x30
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d94e      	bls.n	800a14a <_svfiprintf_r+0x17e>
 800a0ac:	b1b0      	cbz	r0, 800a0dc <_svfiprintf_r+0x110>
 800a0ae:	9207      	str	r2, [sp, #28]
 800a0b0:	e014      	b.n	800a0dc <_svfiprintf_r+0x110>
 800a0b2:	eba0 0308 	sub.w	r3, r0, r8
 800a0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	46a2      	mov	sl, r4
 800a0c0:	e7d2      	b.n	800a068 <_svfiprintf_r+0x9c>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	1d19      	adds	r1, r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	9103      	str	r1, [sp, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfbb      	ittet	lt
 800a0ce:	425b      	neglt	r3, r3
 800a0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d4:	9307      	strge	r3, [sp, #28]
 800a0d6:	9307      	strlt	r3, [sp, #28]
 800a0d8:	bfb8      	it	lt
 800a0da:	9204      	strlt	r2, [sp, #16]
 800a0dc:	7823      	ldrb	r3, [r4, #0]
 800a0de:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e0:	d10c      	bne.n	800a0fc <_svfiprintf_r+0x130>
 800a0e2:	7863      	ldrb	r3, [r4, #1]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d135      	bne.n	800a154 <_svfiprintf_r+0x188>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9203      	str	r2, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfb8      	it	lt
 800a0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0f8:	3402      	adds	r4, #2
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1c8 <_svfiprintf_r+0x1fc>
 800a100:	7821      	ldrb	r1, [r4, #0]
 800a102:	2203      	movs	r2, #3
 800a104:	4650      	mov	r0, sl
 800a106:	f7f6 f8b3 	bl	8000270 <memchr>
 800a10a:	b140      	cbz	r0, 800a11e <_svfiprintf_r+0x152>
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	eba0 000a 	sub.w	r0, r0, sl
 800a112:	fa03 f000 	lsl.w	r0, r3, r0
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	4303      	orrs	r3, r0
 800a11a:	3401      	adds	r4, #1
 800a11c:	9304      	str	r3, [sp, #16]
 800a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a122:	4826      	ldr	r0, [pc, #152]	; (800a1bc <_svfiprintf_r+0x1f0>)
 800a124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a128:	2206      	movs	r2, #6
 800a12a:	f7f6 f8a1 	bl	8000270 <memchr>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d038      	beq.n	800a1a4 <_svfiprintf_r+0x1d8>
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <_svfiprintf_r+0x1f4>)
 800a134:	bb1b      	cbnz	r3, 800a17e <_svfiprintf_r+0x1b2>
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	3307      	adds	r3, #7
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	3308      	adds	r3, #8
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	4433      	add	r3, r6
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	e767      	b.n	800a01a <_svfiprintf_r+0x4e>
 800a14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a14e:	460c      	mov	r4, r1
 800a150:	2001      	movs	r0, #1
 800a152:	e7a5      	b.n	800a0a0 <_svfiprintf_r+0xd4>
 800a154:	2300      	movs	r3, #0
 800a156:	3401      	adds	r4, #1
 800a158:	9305      	str	r3, [sp, #20]
 800a15a:	4619      	mov	r1, r3
 800a15c:	f04f 0c0a 	mov.w	ip, #10
 800a160:	4620      	mov	r0, r4
 800a162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a166:	3a30      	subs	r2, #48	; 0x30
 800a168:	2a09      	cmp	r2, #9
 800a16a:	d903      	bls.n	800a174 <_svfiprintf_r+0x1a8>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0c5      	beq.n	800a0fc <_svfiprintf_r+0x130>
 800a170:	9105      	str	r1, [sp, #20]
 800a172:	e7c3      	b.n	800a0fc <_svfiprintf_r+0x130>
 800a174:	fb0c 2101 	mla	r1, ip, r1, r2
 800a178:	4604      	mov	r4, r0
 800a17a:	2301      	movs	r3, #1
 800a17c:	e7f0      	b.n	800a160 <_svfiprintf_r+0x194>
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <_svfiprintf_r+0x1f8>)
 800a186:	a904      	add	r1, sp, #16
 800a188:	4638      	mov	r0, r7
 800a18a:	f7fc fa81 	bl	8006690 <_printf_float>
 800a18e:	1c42      	adds	r2, r0, #1
 800a190:	4606      	mov	r6, r0
 800a192:	d1d6      	bne.n	800a142 <_svfiprintf_r+0x176>
 800a194:	89ab      	ldrh	r3, [r5, #12]
 800a196:	065b      	lsls	r3, r3, #25
 800a198:	f53f af2c 	bmi.w	8009ff4 <_svfiprintf_r+0x28>
 800a19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19e:	b01d      	add	sp, #116	; 0x74
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	ab03      	add	r3, sp, #12
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <_svfiprintf_r+0x1f8>)
 800a1ac:	a904      	add	r1, sp, #16
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7fc fcfa 	bl	8006ba8 <_printf_i>
 800a1b4:	e7eb      	b.n	800a18e <_svfiprintf_r+0x1c2>
 800a1b6:	bf00      	nop
 800a1b8:	0800c01c 	.word	0x0800c01c
 800a1bc:	0800c026 	.word	0x0800c026
 800a1c0:	08006691 	.word	0x08006691
 800a1c4:	08009f15 	.word	0x08009f15
 800a1c8:	0800c022 	.word	0x0800c022

0800a1cc <_sungetc_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	1c4b      	adds	r3, r1, #1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	d103      	bne.n	800a1dc <_sungetc_r+0x10>
 800a1d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d8:	4628      	mov	r0, r5
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	8993      	ldrh	r3, [r2, #12]
 800a1de:	f023 0320 	bic.w	r3, r3, #32
 800a1e2:	8193      	strh	r3, [r2, #12]
 800a1e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1e6:	6852      	ldr	r2, [r2, #4]
 800a1e8:	b2cd      	uxtb	r5, r1
 800a1ea:	b18b      	cbz	r3, 800a210 <_sungetc_r+0x44>
 800a1ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	dd08      	ble.n	800a204 <_sungetc_r+0x38>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	1e5a      	subs	r2, r3, #1
 800a1f6:	6022      	str	r2, [r4, #0]
 800a1f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	3301      	adds	r3, #1
 800a200:	6063      	str	r3, [r4, #4]
 800a202:	e7e9      	b.n	800a1d8 <_sungetc_r+0xc>
 800a204:	4621      	mov	r1, r4
 800a206:	f000 fbe3 	bl	800a9d0 <__submore>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0f1      	beq.n	800a1f2 <_sungetc_r+0x26>
 800a20e:	e7e1      	b.n	800a1d4 <_sungetc_r+0x8>
 800a210:	6921      	ldr	r1, [r4, #16]
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	b151      	cbz	r1, 800a22c <_sungetc_r+0x60>
 800a216:	4299      	cmp	r1, r3
 800a218:	d208      	bcs.n	800a22c <_sungetc_r+0x60>
 800a21a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a21e:	42a9      	cmp	r1, r5
 800a220:	d104      	bne.n	800a22c <_sungetc_r+0x60>
 800a222:	3b01      	subs	r3, #1
 800a224:	3201      	adds	r2, #1
 800a226:	6023      	str	r3, [r4, #0]
 800a228:	6062      	str	r2, [r4, #4]
 800a22a:	e7d5      	b.n	800a1d8 <_sungetc_r+0xc>
 800a22c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a234:	6363      	str	r3, [r4, #52]	; 0x34
 800a236:	2303      	movs	r3, #3
 800a238:	63a3      	str	r3, [r4, #56]	; 0x38
 800a23a:	4623      	mov	r3, r4
 800a23c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	2301      	movs	r3, #1
 800a244:	e7dc      	b.n	800a200 <_sungetc_r+0x34>

0800a246 <__ssrefill_r>:
 800a246:	b510      	push	{r4, lr}
 800a248:	460c      	mov	r4, r1
 800a24a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a24c:	b169      	cbz	r1, 800a26a <__ssrefill_r+0x24>
 800a24e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a252:	4299      	cmp	r1, r3
 800a254:	d001      	beq.n	800a25a <__ssrefill_r+0x14>
 800a256:	f7ff fdb3 	bl	8009dc0 <_free_r>
 800a25a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a25c:	6063      	str	r3, [r4, #4]
 800a25e:	2000      	movs	r0, #0
 800a260:	6360      	str	r0, [r4, #52]	; 0x34
 800a262:	b113      	cbz	r3, 800a26a <__ssrefill_r+0x24>
 800a264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	2300      	movs	r3, #0
 800a270:	6063      	str	r3, [r4, #4]
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	f043 0320 	orr.w	r3, r3, #32
 800a278:	81a3      	strh	r3, [r4, #12]
 800a27a:	f04f 30ff 	mov.w	r0, #4294967295
 800a27e:	e7f3      	b.n	800a268 <__ssrefill_r+0x22>

0800a280 <__ssvfiscanf_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a28a:	2100      	movs	r1, #0
 800a28c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a290:	49b2      	ldr	r1, [pc, #712]	; (800a55c <__ssvfiscanf_r+0x2dc>)
 800a292:	91a0      	str	r1, [sp, #640]	; 0x280
 800a294:	f10d 0804 	add.w	r8, sp, #4
 800a298:	49b1      	ldr	r1, [pc, #708]	; (800a560 <__ssvfiscanf_r+0x2e0>)
 800a29a:	4fb2      	ldr	r7, [pc, #712]	; (800a564 <__ssvfiscanf_r+0x2e4>)
 800a29c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a568 <__ssvfiscanf_r+0x2e8>
 800a2a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	f892 a000 	ldrb.w	sl, [r2]
 800a2ae:	f1ba 0f00 	cmp.w	sl, #0
 800a2b2:	f000 8151 	beq.w	800a558 <__ssvfiscanf_r+0x2d8>
 800a2b6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a2ba:	f013 0308 	ands.w	r3, r3, #8
 800a2be:	f102 0501 	add.w	r5, r2, #1
 800a2c2:	d019      	beq.n	800a2f8 <__ssvfiscanf_r+0x78>
 800a2c4:	6863      	ldr	r3, [r4, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd0f      	ble.n	800a2ea <__ssvfiscanf_r+0x6a>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	5cba      	ldrb	r2, [r7, r2]
 800a2d0:	0712      	lsls	r2, r2, #28
 800a2d2:	d401      	bmi.n	800a2d8 <__ssvfiscanf_r+0x58>
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	e7e8      	b.n	800a2aa <__ssvfiscanf_r+0x2a>
 800a2d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2da:	3201      	adds	r2, #1
 800a2dc:	9245      	str	r2, [sp, #276]	; 0x114
 800a2de:	6862      	ldr	r2, [r4, #4]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	3a01      	subs	r2, #1
 800a2e4:	6062      	str	r2, [r4, #4]
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	e7ec      	b.n	800a2c4 <__ssvfiscanf_r+0x44>
 800a2ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4798      	blx	r3
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0e9      	beq.n	800a2ca <__ssvfiscanf_r+0x4a>
 800a2f6:	e7ed      	b.n	800a2d4 <__ssvfiscanf_r+0x54>
 800a2f8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a2fc:	f040 8083 	bne.w	800a406 <__ssvfiscanf_r+0x186>
 800a300:	9341      	str	r3, [sp, #260]	; 0x104
 800a302:	9343      	str	r3, [sp, #268]	; 0x10c
 800a304:	7853      	ldrb	r3, [r2, #1]
 800a306:	2b2a      	cmp	r3, #42	; 0x2a
 800a308:	bf02      	ittt	eq
 800a30a:	2310      	moveq	r3, #16
 800a30c:	1c95      	addeq	r5, r2, #2
 800a30e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a310:	220a      	movs	r2, #10
 800a312:	46ab      	mov	fp, r5
 800a314:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a318:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d91d      	bls.n	800a35c <__ssvfiscanf_r+0xdc>
 800a320:	4891      	ldr	r0, [pc, #580]	; (800a568 <__ssvfiscanf_r+0x2e8>)
 800a322:	2203      	movs	r2, #3
 800a324:	f7f5 ffa4 	bl	8000270 <memchr>
 800a328:	b140      	cbz	r0, 800a33c <__ssvfiscanf_r+0xbc>
 800a32a:	2301      	movs	r3, #1
 800a32c:	eba0 0009 	sub.w	r0, r0, r9
 800a330:	fa03 f000 	lsl.w	r0, r3, r0
 800a334:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a336:	4318      	orrs	r0, r3
 800a338:	9041      	str	r0, [sp, #260]	; 0x104
 800a33a:	465d      	mov	r5, fp
 800a33c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a340:	2b78      	cmp	r3, #120	; 0x78
 800a342:	d806      	bhi.n	800a352 <__ssvfiscanf_r+0xd2>
 800a344:	2b57      	cmp	r3, #87	; 0x57
 800a346:	d810      	bhi.n	800a36a <__ssvfiscanf_r+0xea>
 800a348:	2b25      	cmp	r3, #37	; 0x25
 800a34a:	d05c      	beq.n	800a406 <__ssvfiscanf_r+0x186>
 800a34c:	d856      	bhi.n	800a3fc <__ssvfiscanf_r+0x17c>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d074      	beq.n	800a43c <__ssvfiscanf_r+0x1bc>
 800a352:	2303      	movs	r3, #3
 800a354:	9347      	str	r3, [sp, #284]	; 0x11c
 800a356:	230a      	movs	r3, #10
 800a358:	9342      	str	r3, [sp, #264]	; 0x108
 800a35a:	e081      	b.n	800a460 <__ssvfiscanf_r+0x1e0>
 800a35c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a35e:	fb02 1303 	mla	r3, r2, r3, r1
 800a362:	3b30      	subs	r3, #48	; 0x30
 800a364:	9343      	str	r3, [sp, #268]	; 0x10c
 800a366:	465d      	mov	r5, fp
 800a368:	e7d3      	b.n	800a312 <__ssvfiscanf_r+0x92>
 800a36a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a36e:	2a20      	cmp	r2, #32
 800a370:	d8ef      	bhi.n	800a352 <__ssvfiscanf_r+0xd2>
 800a372:	a101      	add	r1, pc, #4	; (adr r1, 800a378 <__ssvfiscanf_r+0xf8>)
 800a374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a378:	0800a44b 	.word	0x0800a44b
 800a37c:	0800a353 	.word	0x0800a353
 800a380:	0800a353 	.word	0x0800a353
 800a384:	0800a4a9 	.word	0x0800a4a9
 800a388:	0800a353 	.word	0x0800a353
 800a38c:	0800a353 	.word	0x0800a353
 800a390:	0800a353 	.word	0x0800a353
 800a394:	0800a353 	.word	0x0800a353
 800a398:	0800a353 	.word	0x0800a353
 800a39c:	0800a353 	.word	0x0800a353
 800a3a0:	0800a353 	.word	0x0800a353
 800a3a4:	0800a4bf 	.word	0x0800a4bf
 800a3a8:	0800a495 	.word	0x0800a495
 800a3ac:	0800a403 	.word	0x0800a403
 800a3b0:	0800a403 	.word	0x0800a403
 800a3b4:	0800a403 	.word	0x0800a403
 800a3b8:	0800a353 	.word	0x0800a353
 800a3bc:	0800a499 	.word	0x0800a499
 800a3c0:	0800a353 	.word	0x0800a353
 800a3c4:	0800a353 	.word	0x0800a353
 800a3c8:	0800a353 	.word	0x0800a353
 800a3cc:	0800a353 	.word	0x0800a353
 800a3d0:	0800a4cf 	.word	0x0800a4cf
 800a3d4:	0800a4a1 	.word	0x0800a4a1
 800a3d8:	0800a443 	.word	0x0800a443
 800a3dc:	0800a353 	.word	0x0800a353
 800a3e0:	0800a353 	.word	0x0800a353
 800a3e4:	0800a4cb 	.word	0x0800a4cb
 800a3e8:	0800a353 	.word	0x0800a353
 800a3ec:	0800a495 	.word	0x0800a495
 800a3f0:	0800a353 	.word	0x0800a353
 800a3f4:	0800a353 	.word	0x0800a353
 800a3f8:	0800a44b 	.word	0x0800a44b
 800a3fc:	3b45      	subs	r3, #69	; 0x45
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d8a7      	bhi.n	800a352 <__ssvfiscanf_r+0xd2>
 800a402:	2305      	movs	r3, #5
 800a404:	e02b      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd0d      	ble.n	800a428 <__ssvfiscanf_r+0x1a8>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	4552      	cmp	r2, sl
 800a412:	f040 80a1 	bne.w	800a558 <__ssvfiscanf_r+0x2d8>
 800a416:	3301      	adds	r3, #1
 800a418:	6862      	ldr	r2, [r4, #4]
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a41e:	3a01      	subs	r2, #1
 800a420:	3301      	adds	r3, #1
 800a422:	6062      	str	r2, [r4, #4]
 800a424:	9345      	str	r3, [sp, #276]	; 0x114
 800a426:	e755      	b.n	800a2d4 <__ssvfiscanf_r+0x54>
 800a428:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a42a:	4621      	mov	r1, r4
 800a42c:	4630      	mov	r0, r6
 800a42e:	4798      	blx	r3
 800a430:	2800      	cmp	r0, #0
 800a432:	d0eb      	beq.n	800a40c <__ssvfiscanf_r+0x18c>
 800a434:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a436:	2800      	cmp	r0, #0
 800a438:	f040 8084 	bne.w	800a544 <__ssvfiscanf_r+0x2c4>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	e086      	b.n	800a550 <__ssvfiscanf_r+0x2d0>
 800a442:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a444:	f042 0220 	orr.w	r2, r2, #32
 800a448:	9241      	str	r2, [sp, #260]	; 0x104
 800a44a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a44c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a450:	9241      	str	r2, [sp, #260]	; 0x104
 800a452:	2210      	movs	r2, #16
 800a454:	2b6f      	cmp	r3, #111	; 0x6f
 800a456:	9242      	str	r2, [sp, #264]	; 0x108
 800a458:	bf34      	ite	cc
 800a45a:	2303      	movcc	r3, #3
 800a45c:	2304      	movcs	r3, #4
 800a45e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd41      	ble.n	800a4ea <__ssvfiscanf_r+0x26a>
 800a466:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a468:	0659      	lsls	r1, r3, #25
 800a46a:	d404      	bmi.n	800a476 <__ssvfiscanf_r+0x1f6>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	781a      	ldrb	r2, [r3, #0]
 800a470:	5cba      	ldrb	r2, [r7, r2]
 800a472:	0712      	lsls	r2, r2, #28
 800a474:	d440      	bmi.n	800a4f8 <__ssvfiscanf_r+0x278>
 800a476:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a478:	2b02      	cmp	r3, #2
 800a47a:	dc4f      	bgt.n	800a51c <__ssvfiscanf_r+0x29c>
 800a47c:	466b      	mov	r3, sp
 800a47e:	4622      	mov	r2, r4
 800a480:	a941      	add	r1, sp, #260	; 0x104
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f874 	bl	800a570 <_scanf_chars>
 800a488:	2801      	cmp	r0, #1
 800a48a:	d065      	beq.n	800a558 <__ssvfiscanf_r+0x2d8>
 800a48c:	2802      	cmp	r0, #2
 800a48e:	f47f af21 	bne.w	800a2d4 <__ssvfiscanf_r+0x54>
 800a492:	e7cf      	b.n	800a434 <__ssvfiscanf_r+0x1b4>
 800a494:	220a      	movs	r2, #10
 800a496:	e7dd      	b.n	800a454 <__ssvfiscanf_r+0x1d4>
 800a498:	2300      	movs	r3, #0
 800a49a:	9342      	str	r3, [sp, #264]	; 0x108
 800a49c:	2303      	movs	r3, #3
 800a49e:	e7de      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	9342      	str	r3, [sp, #264]	; 0x108
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	e7da      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f000 f9d8 	bl	800a860 <__sccl>
 800a4b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	9341      	str	r3, [sp, #260]	; 0x104
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e7cf      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a4be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c4:	9341      	str	r3, [sp, #260]	; 0x104
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e7c9      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e7c7      	b.n	800a45e <__ssvfiscanf_r+0x1de>
 800a4ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a4d0:	06c3      	lsls	r3, r0, #27
 800a4d2:	f53f aeff 	bmi.w	800a2d4 <__ssvfiscanf_r+0x54>
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4da:	1d19      	adds	r1, r3, #4
 800a4dc:	9100      	str	r1, [sp, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	07c0      	lsls	r0, r0, #31
 800a4e2:	bf4c      	ite	mi
 800a4e4:	801a      	strhmi	r2, [r3, #0]
 800a4e6:	601a      	strpl	r2, [r3, #0]
 800a4e8:	e6f4      	b.n	800a2d4 <__ssvfiscanf_r+0x54>
 800a4ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4798      	blx	r3
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0b7      	beq.n	800a466 <__ssvfiscanf_r+0x1e6>
 800a4f6:	e79d      	b.n	800a434 <__ssvfiscanf_r+0x1b4>
 800a4f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	9245      	str	r2, [sp, #276]	; 0x114
 800a4fe:	6862      	ldr	r2, [r4, #4]
 800a500:	3a01      	subs	r2, #1
 800a502:	2a00      	cmp	r2, #0
 800a504:	6062      	str	r2, [r4, #4]
 800a506:	dd02      	ble.n	800a50e <__ssvfiscanf_r+0x28e>
 800a508:	3301      	adds	r3, #1
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	e7ae      	b.n	800a46c <__ssvfiscanf_r+0x1ec>
 800a50e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a510:	4621      	mov	r1, r4
 800a512:	4630      	mov	r0, r6
 800a514:	4798      	blx	r3
 800a516:	2800      	cmp	r0, #0
 800a518:	d0a8      	beq.n	800a46c <__ssvfiscanf_r+0x1ec>
 800a51a:	e78b      	b.n	800a434 <__ssvfiscanf_r+0x1b4>
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	dc06      	bgt.n	800a52e <__ssvfiscanf_r+0x2ae>
 800a520:	466b      	mov	r3, sp
 800a522:	4622      	mov	r2, r4
 800a524:	a941      	add	r1, sp, #260	; 0x104
 800a526:	4630      	mov	r0, r6
 800a528:	f000 f87a 	bl	800a620 <_scanf_i>
 800a52c:	e7ac      	b.n	800a488 <__ssvfiscanf_r+0x208>
 800a52e:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <__ssvfiscanf_r+0x2ec>)
 800a530:	2b00      	cmp	r3, #0
 800a532:	f43f aecf 	beq.w	800a2d4 <__ssvfiscanf_r+0x54>
 800a536:	466b      	mov	r3, sp
 800a538:	4622      	mov	r2, r4
 800a53a:	a941      	add	r1, sp, #260	; 0x104
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7fc fc59 	bl	8006df4 <_scanf_float>
 800a542:	e7a1      	b.n	800a488 <__ssvfiscanf_r+0x208>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a54a:	bf18      	it	ne
 800a54c:	f04f 30ff 	movne.w	r0, #4294967295
 800a550:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a558:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a55a:	e7f9      	b.n	800a550 <__ssvfiscanf_r+0x2d0>
 800a55c:	0800a1cd 	.word	0x0800a1cd
 800a560:	0800a247 	.word	0x0800a247
 800a564:	0800bca9 	.word	0x0800bca9
 800a568:	0800c022 	.word	0x0800c022
 800a56c:	08006df5 	.word	0x08006df5

0800a570 <_scanf_chars>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	4615      	mov	r5, r2
 800a576:	688a      	ldr	r2, [r1, #8]
 800a578:	4680      	mov	r8, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	b932      	cbnz	r2, 800a58c <_scanf_chars+0x1c>
 800a57e:	698a      	ldr	r2, [r1, #24]
 800a580:	2a00      	cmp	r2, #0
 800a582:	bf0c      	ite	eq
 800a584:	2201      	moveq	r2, #1
 800a586:	f04f 32ff 	movne.w	r2, #4294967295
 800a58a:	608a      	str	r2, [r1, #8]
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a61c <_scanf_chars+0xac>
 800a592:	06d1      	lsls	r1, r2, #27
 800a594:	bf5f      	itttt	pl
 800a596:	681a      	ldrpl	r2, [r3, #0]
 800a598:	1d11      	addpl	r1, r2, #4
 800a59a:	6019      	strpl	r1, [r3, #0]
 800a59c:	6816      	ldrpl	r6, [r2, #0]
 800a59e:	2700      	movs	r7, #0
 800a5a0:	69a0      	ldr	r0, [r4, #24]
 800a5a2:	b188      	cbz	r0, 800a5c8 <_scanf_chars+0x58>
 800a5a4:	2801      	cmp	r0, #1
 800a5a6:	d107      	bne.n	800a5b8 <_scanf_chars+0x48>
 800a5a8:	682b      	ldr	r3, [r5, #0]
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	6963      	ldr	r3, [r4, #20]
 800a5ae:	5c9b      	ldrb	r3, [r3, r2]
 800a5b0:	b953      	cbnz	r3, 800a5c8 <_scanf_chars+0x58>
 800a5b2:	bb27      	cbnz	r7, 800a5fe <_scanf_chars+0x8e>
 800a5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b8:	2802      	cmp	r0, #2
 800a5ba:	d120      	bne.n	800a5fe <_scanf_chars+0x8e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a5c4:	071b      	lsls	r3, r3, #28
 800a5c6:	d41a      	bmi.n	800a5fe <_scanf_chars+0x8e>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	06da      	lsls	r2, r3, #27
 800a5cc:	bf5e      	ittt	pl
 800a5ce:	682b      	ldrpl	r3, [r5, #0]
 800a5d0:	781b      	ldrbpl	r3, [r3, #0]
 800a5d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5d6:	682a      	ldr	r2, [r5, #0]
 800a5d8:	686b      	ldr	r3, [r5, #4]
 800a5da:	3201      	adds	r2, #1
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	68a2      	ldr	r2, [r4, #8]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	3a01      	subs	r2, #1
 800a5e4:	606b      	str	r3, [r5, #4]
 800a5e6:	3701      	adds	r7, #1
 800a5e8:	60a2      	str	r2, [r4, #8]
 800a5ea:	b142      	cbz	r2, 800a5fe <_scanf_chars+0x8e>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dcd7      	bgt.n	800a5a0 <_scanf_chars+0x30>
 800a5f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4798      	blx	r3
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d0d0      	beq.n	800a5a0 <_scanf_chars+0x30>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	f013 0310 	ands.w	r3, r3, #16
 800a604:	d105      	bne.n	800a612 <_scanf_chars+0xa2>
 800a606:	68e2      	ldr	r2, [r4, #12]
 800a608:	3201      	adds	r2, #1
 800a60a:	60e2      	str	r2, [r4, #12]
 800a60c:	69a2      	ldr	r2, [r4, #24]
 800a60e:	b102      	cbz	r2, 800a612 <_scanf_chars+0xa2>
 800a610:	7033      	strb	r3, [r6, #0]
 800a612:	6923      	ldr	r3, [r4, #16]
 800a614:	441f      	add	r7, r3
 800a616:	6127      	str	r7, [r4, #16]
 800a618:	2000      	movs	r0, #0
 800a61a:	e7cb      	b.n	800a5b4 <_scanf_chars+0x44>
 800a61c:	0800bca9 	.word	0x0800bca9

0800a620 <_scanf_i>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	4698      	mov	r8, r3
 800a626:	4b74      	ldr	r3, [pc, #464]	; (800a7f8 <_scanf_i+0x1d8>)
 800a628:	460c      	mov	r4, r1
 800a62a:	4682      	mov	sl, r0
 800a62c:	4616      	mov	r6, r2
 800a62e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a632:	b087      	sub	sp, #28
 800a634:	ab03      	add	r3, sp, #12
 800a636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a63a:	4b70      	ldr	r3, [pc, #448]	; (800a7fc <_scanf_i+0x1dc>)
 800a63c:	69a1      	ldr	r1, [r4, #24]
 800a63e:	4a70      	ldr	r2, [pc, #448]	; (800a800 <_scanf_i+0x1e0>)
 800a640:	2903      	cmp	r1, #3
 800a642:	bf18      	it	ne
 800a644:	461a      	movne	r2, r3
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	1e5a      	subs	r2, r3, #1
 800a64c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a650:	bf88      	it	hi
 800a652:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a656:	4627      	mov	r7, r4
 800a658:	bf82      	ittt	hi
 800a65a:	eb03 0905 	addhi.w	r9, r3, r5
 800a65e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a662:	60a3      	strhi	r3, [r4, #8]
 800a664:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a668:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a66c:	bf98      	it	ls
 800a66e:	f04f 0900 	movls.w	r9, #0
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	463d      	mov	r5, r7
 800a676:	f04f 0b00 	mov.w	fp, #0
 800a67a:	6831      	ldr	r1, [r6, #0]
 800a67c:	ab03      	add	r3, sp, #12
 800a67e:	7809      	ldrb	r1, [r1, #0]
 800a680:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a684:	2202      	movs	r2, #2
 800a686:	f7f5 fdf3 	bl	8000270 <memchr>
 800a68a:	b328      	cbz	r0, 800a6d8 <_scanf_i+0xb8>
 800a68c:	f1bb 0f01 	cmp.w	fp, #1
 800a690:	d159      	bne.n	800a746 <_scanf_i+0x126>
 800a692:	6862      	ldr	r2, [r4, #4]
 800a694:	b92a      	cbnz	r2, 800a6a2 <_scanf_i+0x82>
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	2308      	movs	r3, #8
 800a69a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a69e:	6063      	str	r3, [r4, #4]
 800a6a0:	6022      	str	r2, [r4, #0]
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	68a2      	ldr	r2, [r4, #8]
 800a6ac:	1e51      	subs	r1, r2, #1
 800a6ae:	60a1      	str	r1, [r4, #8]
 800a6b0:	b192      	cbz	r2, 800a6d8 <_scanf_i+0xb8>
 800a6b2:	6832      	ldr	r2, [r6, #0]
 800a6b4:	1c51      	adds	r1, r2, #1
 800a6b6:	6031      	str	r1, [r6, #0]
 800a6b8:	7812      	ldrb	r2, [r2, #0]
 800a6ba:	f805 2b01 	strb.w	r2, [r5], #1
 800a6be:	6872      	ldr	r2, [r6, #4]
 800a6c0:	3a01      	subs	r2, #1
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	6072      	str	r2, [r6, #4]
 800a6c6:	dc07      	bgt.n	800a6d8 <_scanf_i+0xb8>
 800a6c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4650      	mov	r0, sl
 800a6d0:	4790      	blx	r2
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f040 8085 	bne.w	800a7e2 <_scanf_i+0x1c2>
 800a6d8:	f10b 0b01 	add.w	fp, fp, #1
 800a6dc:	f1bb 0f03 	cmp.w	fp, #3
 800a6e0:	d1cb      	bne.n	800a67a <_scanf_i+0x5a>
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	b90b      	cbnz	r3, 800a6ea <_scanf_i+0xca>
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	4945      	ldr	r1, [pc, #276]	; (800a804 <_scanf_i+0x1e4>)
 800a6ee:	6960      	ldr	r0, [r4, #20]
 800a6f0:	1ac9      	subs	r1, r1, r3
 800a6f2:	f000 f8b5 	bl	800a860 <__sccl>
 800a6f6:	f04f 0b00 	mov.w	fp, #0
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	6822      	ldr	r2, [r4, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d03d      	beq.n	800a77e <_scanf_i+0x15e>
 800a702:	6831      	ldr	r1, [r6, #0]
 800a704:	6960      	ldr	r0, [r4, #20]
 800a706:	f891 c000 	ldrb.w	ip, [r1]
 800a70a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a70e:	2800      	cmp	r0, #0
 800a710:	d035      	beq.n	800a77e <_scanf_i+0x15e>
 800a712:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a716:	d124      	bne.n	800a762 <_scanf_i+0x142>
 800a718:	0510      	lsls	r0, r2, #20
 800a71a:	d522      	bpl.n	800a762 <_scanf_i+0x142>
 800a71c:	f10b 0b01 	add.w	fp, fp, #1
 800a720:	f1b9 0f00 	cmp.w	r9, #0
 800a724:	d003      	beq.n	800a72e <_scanf_i+0x10e>
 800a726:	3301      	adds	r3, #1
 800a728:	f109 39ff 	add.w	r9, r9, #4294967295
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	6873      	ldr	r3, [r6, #4]
 800a730:	3b01      	subs	r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	6073      	str	r3, [r6, #4]
 800a736:	dd1b      	ble.n	800a770 <_scanf_i+0x150>
 800a738:	6833      	ldr	r3, [r6, #0]
 800a73a:	3301      	adds	r3, #1
 800a73c:	6033      	str	r3, [r6, #0]
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	3b01      	subs	r3, #1
 800a742:	60a3      	str	r3, [r4, #8]
 800a744:	e7d9      	b.n	800a6fa <_scanf_i+0xda>
 800a746:	f1bb 0f02 	cmp.w	fp, #2
 800a74a:	d1ae      	bne.n	800a6aa <_scanf_i+0x8a>
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a752:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a756:	d1bf      	bne.n	800a6d8 <_scanf_i+0xb8>
 800a758:	2310      	movs	r3, #16
 800a75a:	6063      	str	r3, [r4, #4]
 800a75c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a760:	e7a2      	b.n	800a6a8 <_scanf_i+0x88>
 800a762:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	780b      	ldrb	r3, [r1, #0]
 800a76a:	f805 3b01 	strb.w	r3, [r5], #1
 800a76e:	e7de      	b.n	800a72e <_scanf_i+0x10e>
 800a770:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a774:	4631      	mov	r1, r6
 800a776:	4650      	mov	r0, sl
 800a778:	4798      	blx	r3
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d0df      	beq.n	800a73e <_scanf_i+0x11e>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	05d9      	lsls	r1, r3, #23
 800a782:	d50d      	bpl.n	800a7a0 <_scanf_i+0x180>
 800a784:	42bd      	cmp	r5, r7
 800a786:	d909      	bls.n	800a79c <_scanf_i+0x17c>
 800a788:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a790:	4632      	mov	r2, r6
 800a792:	4650      	mov	r0, sl
 800a794:	4798      	blx	r3
 800a796:	f105 39ff 	add.w	r9, r5, #4294967295
 800a79a:	464d      	mov	r5, r9
 800a79c:	42bd      	cmp	r5, r7
 800a79e:	d028      	beq.n	800a7f2 <_scanf_i+0x1d2>
 800a7a0:	6822      	ldr	r2, [r4, #0]
 800a7a2:	f012 0210 	ands.w	r2, r2, #16
 800a7a6:	d113      	bne.n	800a7d0 <_scanf_i+0x1b0>
 800a7a8:	702a      	strb	r2, [r5, #0]
 800a7aa:	6863      	ldr	r3, [r4, #4]
 800a7ac:	9e01      	ldr	r6, [sp, #4]
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	47b0      	blx	r6
 800a7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b8:	6821      	ldr	r1, [r4, #0]
 800a7ba:	1d1a      	adds	r2, r3, #4
 800a7bc:	f8c8 2000 	str.w	r2, [r8]
 800a7c0:	f011 0f20 	tst.w	r1, #32
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	d00f      	beq.n	800a7e8 <_scanf_i+0x1c8>
 800a7c8:	6018      	str	r0, [r3, #0]
 800a7ca:	68e3      	ldr	r3, [r4, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60e3      	str	r3, [r4, #12]
 800a7d0:	1bed      	subs	r5, r5, r7
 800a7d2:	44ab      	add	fp, r5
 800a7d4:	6925      	ldr	r5, [r4, #16]
 800a7d6:	445d      	add	r5, fp
 800a7d8:	6125      	str	r5, [r4, #16]
 800a7da:	2000      	movs	r0, #0
 800a7dc:	b007      	add	sp, #28
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	f04f 0b00 	mov.w	fp, #0
 800a7e6:	e7ca      	b.n	800a77e <_scanf_i+0x15e>
 800a7e8:	07ca      	lsls	r2, r1, #31
 800a7ea:	bf4c      	ite	mi
 800a7ec:	8018      	strhmi	r0, [r3, #0]
 800a7ee:	6018      	strpl	r0, [r3, #0]
 800a7f0:	e7eb      	b.n	800a7ca <_scanf_i+0x1aa>
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e7f2      	b.n	800a7dc <_scanf_i+0x1bc>
 800a7f6:	bf00      	nop
 800a7f8:	0800bbf4 	.word	0x0800bbf4
 800a7fc:	0800a9cd 	.word	0x0800a9cd
 800a800:	08008069 	.word	0x08008069
 800a804:	0800c046 	.word	0x0800c046

0800a808 <_read_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_read_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f7 fb98 	bl	8001f4c <_read>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_read_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_read_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20010894 	.word	0x20010894
 800a82c:	00000000 	.word	0x00000000

0800a830 <nan>:
 800a830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a838 <nan+0x8>
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	00000000 	.word	0x00000000
 800a83c:	7ff80000 	.word	0x7ff80000

0800a840 <_sbrk_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d06      	ldr	r5, [pc, #24]	; (800a85c <_sbrk_r+0x1c>)
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	602b      	str	r3, [r5, #0]
 800a84c:	f7f7 fbec 	bl	8002028 <_sbrk>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_sbrk_r+0x1a>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_sbrk_r+0x1a>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20010894 	.word	0x20010894

0800a860 <__sccl>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	780b      	ldrb	r3, [r1, #0]
 800a864:	4604      	mov	r4, r0
 800a866:	2b5e      	cmp	r3, #94	; 0x5e
 800a868:	bf0b      	itete	eq
 800a86a:	784b      	ldrbeq	r3, [r1, #1]
 800a86c:	1c48      	addne	r0, r1, #1
 800a86e:	1c88      	addeq	r0, r1, #2
 800a870:	2200      	movne	r2, #0
 800a872:	bf08      	it	eq
 800a874:	2201      	moveq	r2, #1
 800a876:	1e61      	subs	r1, r4, #1
 800a878:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a87c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a880:	42a9      	cmp	r1, r5
 800a882:	d1fb      	bne.n	800a87c <__sccl+0x1c>
 800a884:	b90b      	cbnz	r3, 800a88a <__sccl+0x2a>
 800a886:	3801      	subs	r0, #1
 800a888:	bd70      	pop	{r4, r5, r6, pc}
 800a88a:	f082 0101 	eor.w	r1, r2, #1
 800a88e:	54e1      	strb	r1, [r4, r3]
 800a890:	1c42      	adds	r2, r0, #1
 800a892:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a896:	2d2d      	cmp	r5, #45	; 0x2d
 800a898:	f102 36ff 	add.w	r6, r2, #4294967295
 800a89c:	4610      	mov	r0, r2
 800a89e:	d006      	beq.n	800a8ae <__sccl+0x4e>
 800a8a0:	2d5d      	cmp	r5, #93	; 0x5d
 800a8a2:	d0f1      	beq.n	800a888 <__sccl+0x28>
 800a8a4:	b90d      	cbnz	r5, 800a8aa <__sccl+0x4a>
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	e7ee      	b.n	800a888 <__sccl+0x28>
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	e7ef      	b.n	800a88e <__sccl+0x2e>
 800a8ae:	7816      	ldrb	r6, [r2, #0]
 800a8b0:	2e5d      	cmp	r6, #93	; 0x5d
 800a8b2:	d0fa      	beq.n	800a8aa <__sccl+0x4a>
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	dcf8      	bgt.n	800a8aa <__sccl+0x4a>
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	4286      	cmp	r6, r0
 800a8be:	5421      	strb	r1, [r4, r0]
 800a8c0:	dcfb      	bgt.n	800a8ba <__sccl+0x5a>
 800a8c2:	43d8      	mvns	r0, r3
 800a8c4:	4430      	add	r0, r6
 800a8c6:	1c5d      	adds	r5, r3, #1
 800a8c8:	42b3      	cmp	r3, r6
 800a8ca:	bfa8      	it	ge
 800a8cc:	2000      	movge	r0, #0
 800a8ce:	182b      	adds	r3, r5, r0
 800a8d0:	3202      	adds	r2, #2
 800a8d2:	e7de      	b.n	800a892 <__sccl+0x32>

0800a8d4 <_strtoul_l.isra.0>:
 800a8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	4e3b      	ldr	r6, [pc, #236]	; (800a9c8 <_strtoul_l.isra.0+0xf4>)
 800a8da:	4686      	mov	lr, r0
 800a8dc:	468c      	mov	ip, r1
 800a8de:	4660      	mov	r0, ip
 800a8e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a8e4:	5da5      	ldrb	r5, [r4, r6]
 800a8e6:	f015 0508 	ands.w	r5, r5, #8
 800a8ea:	d1f8      	bne.n	800a8de <_strtoul_l.isra.0+0xa>
 800a8ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a8ee:	d134      	bne.n	800a95a <_strtoul_l.isra.0+0x86>
 800a8f0:	f89c 4000 	ldrb.w	r4, [ip]
 800a8f4:	f04f 0801 	mov.w	r8, #1
 800a8f8:	f100 0c02 	add.w	ip, r0, #2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d05e      	beq.n	800a9be <_strtoul_l.isra.0+0xea>
 800a900:	2b10      	cmp	r3, #16
 800a902:	d10c      	bne.n	800a91e <_strtoul_l.isra.0+0x4a>
 800a904:	2c30      	cmp	r4, #48	; 0x30
 800a906:	d10a      	bne.n	800a91e <_strtoul_l.isra.0+0x4a>
 800a908:	f89c 0000 	ldrb.w	r0, [ip]
 800a90c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a910:	2858      	cmp	r0, #88	; 0x58
 800a912:	d14f      	bne.n	800a9b4 <_strtoul_l.isra.0+0xe0>
 800a914:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a918:	2310      	movs	r3, #16
 800a91a:	f10c 0c02 	add.w	ip, ip, #2
 800a91e:	f04f 37ff 	mov.w	r7, #4294967295
 800a922:	2500      	movs	r5, #0
 800a924:	fbb7 f7f3 	udiv	r7, r7, r3
 800a928:	fb03 f907 	mul.w	r9, r3, r7
 800a92c:	ea6f 0909 	mvn.w	r9, r9
 800a930:	4628      	mov	r0, r5
 800a932:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a936:	2e09      	cmp	r6, #9
 800a938:	d818      	bhi.n	800a96c <_strtoul_l.isra.0+0x98>
 800a93a:	4634      	mov	r4, r6
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	dd24      	ble.n	800a98a <_strtoul_l.isra.0+0xb6>
 800a940:	2d00      	cmp	r5, #0
 800a942:	db1f      	blt.n	800a984 <_strtoul_l.isra.0+0xb0>
 800a944:	4287      	cmp	r7, r0
 800a946:	d31d      	bcc.n	800a984 <_strtoul_l.isra.0+0xb0>
 800a948:	d101      	bne.n	800a94e <_strtoul_l.isra.0+0x7a>
 800a94a:	45a1      	cmp	r9, r4
 800a94c:	db1a      	blt.n	800a984 <_strtoul_l.isra.0+0xb0>
 800a94e:	fb00 4003 	mla	r0, r0, r3, r4
 800a952:	2501      	movs	r5, #1
 800a954:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a958:	e7eb      	b.n	800a932 <_strtoul_l.isra.0+0x5e>
 800a95a:	2c2b      	cmp	r4, #43	; 0x2b
 800a95c:	bf08      	it	eq
 800a95e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a962:	46a8      	mov	r8, r5
 800a964:	bf08      	it	eq
 800a966:	f100 0c02 	addeq.w	ip, r0, #2
 800a96a:	e7c7      	b.n	800a8fc <_strtoul_l.isra.0+0x28>
 800a96c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a970:	2e19      	cmp	r6, #25
 800a972:	d801      	bhi.n	800a978 <_strtoul_l.isra.0+0xa4>
 800a974:	3c37      	subs	r4, #55	; 0x37
 800a976:	e7e1      	b.n	800a93c <_strtoul_l.isra.0+0x68>
 800a978:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a97c:	2e19      	cmp	r6, #25
 800a97e:	d804      	bhi.n	800a98a <_strtoul_l.isra.0+0xb6>
 800a980:	3c57      	subs	r4, #87	; 0x57
 800a982:	e7db      	b.n	800a93c <_strtoul_l.isra.0+0x68>
 800a984:	f04f 35ff 	mov.w	r5, #4294967295
 800a988:	e7e4      	b.n	800a954 <_strtoul_l.isra.0+0x80>
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	da07      	bge.n	800a99e <_strtoul_l.isra.0+0xca>
 800a98e:	2322      	movs	r3, #34	; 0x22
 800a990:	f8ce 3000 	str.w	r3, [lr]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	b942      	cbnz	r2, 800a9ac <_strtoul_l.isra.0+0xd8>
 800a99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a99e:	f1b8 0f00 	cmp.w	r8, #0
 800a9a2:	d000      	beq.n	800a9a6 <_strtoul_l.isra.0+0xd2>
 800a9a4:	4240      	negs	r0, r0
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	d0f7      	beq.n	800a99a <_strtoul_l.isra.0+0xc6>
 800a9aa:	b10d      	cbz	r5, 800a9b0 <_strtoul_l.isra.0+0xdc>
 800a9ac:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a9b0:	6011      	str	r1, [r2, #0]
 800a9b2:	e7f2      	b.n	800a99a <_strtoul_l.isra.0+0xc6>
 800a9b4:	2430      	movs	r4, #48	; 0x30
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1b1      	bne.n	800a91e <_strtoul_l.isra.0+0x4a>
 800a9ba:	2308      	movs	r3, #8
 800a9bc:	e7af      	b.n	800a91e <_strtoul_l.isra.0+0x4a>
 800a9be:	2c30      	cmp	r4, #48	; 0x30
 800a9c0:	d0a2      	beq.n	800a908 <_strtoul_l.isra.0+0x34>
 800a9c2:	230a      	movs	r3, #10
 800a9c4:	e7ab      	b.n	800a91e <_strtoul_l.isra.0+0x4a>
 800a9c6:	bf00      	nop
 800a9c8:	0800bca9 	.word	0x0800bca9

0800a9cc <_strtoul_r>:
 800a9cc:	f7ff bf82 	b.w	800a8d4 <_strtoul_l.isra.0>

0800a9d0 <__submore>:
 800a9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d11d      	bne.n	800aa1c <__submore+0x4c>
 800a9e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9e4:	f7ff fa3c 	bl	8009e60 <_malloc_r>
 800a9e8:	b918      	cbnz	r0, 800a9f2 <__submore+0x22>
 800a9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a9fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aa02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aa06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aa0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aa0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aa12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa16:	6020      	str	r0, [r4, #0]
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7e8      	b.n	800a9ee <__submore+0x1e>
 800aa1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa1e:	0077      	lsls	r7, r6, #1
 800aa20:	463a      	mov	r2, r7
 800aa22:	f000 fa2d 	bl	800ae80 <_realloc_r>
 800aa26:	4605      	mov	r5, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0de      	beq.n	800a9ea <__submore+0x1a>
 800aa2c:	eb00 0806 	add.w	r8, r0, r6
 800aa30:	4601      	mov	r1, r0
 800aa32:	4632      	mov	r2, r6
 800aa34:	4640      	mov	r0, r8
 800aa36:	f7fe fce9 	bl	800940c <memcpy>
 800aa3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aa3e:	f8c4 8000 	str.w	r8, [r4]
 800aa42:	e7e9      	b.n	800aa18 <__submore+0x48>

0800aa44 <__ascii_wctomb>:
 800aa44:	b149      	cbz	r1, 800aa5a <__ascii_wctomb+0x16>
 800aa46:	2aff      	cmp	r2, #255	; 0xff
 800aa48:	bf85      	ittet	hi
 800aa4a:	238a      	movhi	r3, #138	; 0x8a
 800aa4c:	6003      	strhi	r3, [r0, #0]
 800aa4e:	700a      	strbls	r2, [r1, #0]
 800aa50:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa54:	bf98      	it	ls
 800aa56:	2001      	movls	r0, #1
 800aa58:	4770      	bx	lr
 800aa5a:	4608      	mov	r0, r1
 800aa5c:	4770      	bx	lr
	...

0800aa60 <__assert_func>:
 800aa60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa62:	4614      	mov	r4, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <__assert_func+0x2c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	68d8      	ldr	r0, [r3, #12]
 800aa6e:	b14c      	cbz	r4, 800aa84 <__assert_func+0x24>
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <__assert_func+0x30>)
 800aa72:	9100      	str	r1, [sp, #0]
 800aa74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa78:	4906      	ldr	r1, [pc, #24]	; (800aa94 <__assert_func+0x34>)
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	f000 f9a6 	bl	800adcc <fiprintf>
 800aa80:	f000 fc3e 	bl	800b300 <abort>
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <__assert_func+0x38>)
 800aa86:	461c      	mov	r4, r3
 800aa88:	e7f3      	b.n	800aa72 <__assert_func+0x12>
 800aa8a:	bf00      	nop
 800aa8c:	20000060 	.word	0x20000060
 800aa90:	0800c048 	.word	0x0800c048
 800aa94:	0800c055 	.word	0x0800c055
 800aa98:	0800c083 	.word	0x0800c083

0800aa9c <__sflush_r>:
 800aa9c:	898a      	ldrh	r2, [r1, #12]
 800aa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	0710      	lsls	r0, r2, #28
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	d458      	bmi.n	800ab5c <__sflush_r+0xc0>
 800aaaa:	684b      	ldr	r3, [r1, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dc05      	bgt.n	800aabc <__sflush_r+0x20>
 800aab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dc02      	bgt.n	800aabc <__sflush_r+0x20>
 800aab6:	2000      	movs	r0, #0
 800aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	d0f9      	beq.n	800aab6 <__sflush_r+0x1a>
 800aac2:	2300      	movs	r3, #0
 800aac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aac8:	682f      	ldr	r7, [r5, #0]
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	d032      	beq.n	800ab34 <__sflush_r+0x98>
 800aace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	075a      	lsls	r2, r3, #29
 800aad4:	d505      	bpl.n	800aae2 <__sflush_r+0x46>
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	1ac0      	subs	r0, r0, r3
 800aada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aadc:	b10b      	cbz	r3, 800aae2 <__sflush_r+0x46>
 800aade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aae0:	1ac0      	subs	r0, r0, r3
 800aae2:	2300      	movs	r3, #0
 800aae4:	4602      	mov	r2, r0
 800aae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae8:	6a21      	ldr	r1, [r4, #32]
 800aaea:	4628      	mov	r0, r5
 800aaec:	47b0      	blx	r6
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	d106      	bne.n	800ab02 <__sflush_r+0x66>
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	291d      	cmp	r1, #29
 800aaf8:	d82c      	bhi.n	800ab54 <__sflush_r+0xb8>
 800aafa:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <__sflush_r+0x108>)
 800aafc:	40ca      	lsrs	r2, r1
 800aafe:	07d6      	lsls	r6, r2, #31
 800ab00:	d528      	bpl.n	800ab54 <__sflush_r+0xb8>
 800ab02:	2200      	movs	r2, #0
 800ab04:	6062      	str	r2, [r4, #4]
 800ab06:	04d9      	lsls	r1, r3, #19
 800ab08:	6922      	ldr	r2, [r4, #16]
 800ab0a:	6022      	str	r2, [r4, #0]
 800ab0c:	d504      	bpl.n	800ab18 <__sflush_r+0x7c>
 800ab0e:	1c42      	adds	r2, r0, #1
 800ab10:	d101      	bne.n	800ab16 <__sflush_r+0x7a>
 800ab12:	682b      	ldr	r3, [r5, #0]
 800ab14:	b903      	cbnz	r3, 800ab18 <__sflush_r+0x7c>
 800ab16:	6560      	str	r0, [r4, #84]	; 0x54
 800ab18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab1a:	602f      	str	r7, [r5, #0]
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d0ca      	beq.n	800aab6 <__sflush_r+0x1a>
 800ab20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab24:	4299      	cmp	r1, r3
 800ab26:	d002      	beq.n	800ab2e <__sflush_r+0x92>
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff f949 	bl	8009dc0 <_free_r>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	6360      	str	r0, [r4, #52]	; 0x34
 800ab32:	e7c1      	b.n	800aab8 <__sflush_r+0x1c>
 800ab34:	6a21      	ldr	r1, [r4, #32]
 800ab36:	2301      	movs	r3, #1
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b0      	blx	r6
 800ab3c:	1c41      	adds	r1, r0, #1
 800ab3e:	d1c7      	bne.n	800aad0 <__sflush_r+0x34>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0c4      	beq.n	800aad0 <__sflush_r+0x34>
 800ab46:	2b1d      	cmp	r3, #29
 800ab48:	d001      	beq.n	800ab4e <__sflush_r+0xb2>
 800ab4a:	2b16      	cmp	r3, #22
 800ab4c:	d101      	bne.n	800ab52 <__sflush_r+0xb6>
 800ab4e:	602f      	str	r7, [r5, #0]
 800ab50:	e7b1      	b.n	800aab6 <__sflush_r+0x1a>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	e7ad      	b.n	800aab8 <__sflush_r+0x1c>
 800ab5c:	690f      	ldr	r7, [r1, #16]
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	d0a9      	beq.n	800aab6 <__sflush_r+0x1a>
 800ab62:	0793      	lsls	r3, r2, #30
 800ab64:	680e      	ldr	r6, [r1, #0]
 800ab66:	bf08      	it	eq
 800ab68:	694b      	ldreq	r3, [r1, #20]
 800ab6a:	600f      	str	r7, [r1, #0]
 800ab6c:	bf18      	it	ne
 800ab6e:	2300      	movne	r3, #0
 800ab70:	eba6 0807 	sub.w	r8, r6, r7
 800ab74:	608b      	str	r3, [r1, #8]
 800ab76:	f1b8 0f00 	cmp.w	r8, #0
 800ab7a:	dd9c      	ble.n	800aab6 <__sflush_r+0x1a>
 800ab7c:	6a21      	ldr	r1, [r4, #32]
 800ab7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab80:	4643      	mov	r3, r8
 800ab82:	463a      	mov	r2, r7
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b0      	blx	r6
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	dc06      	bgt.n	800ab9a <__sflush_r+0xfe>
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	f04f 30ff 	mov.w	r0, #4294967295
 800ab98:	e78e      	b.n	800aab8 <__sflush_r+0x1c>
 800ab9a:	4407      	add	r7, r0
 800ab9c:	eba8 0800 	sub.w	r8, r8, r0
 800aba0:	e7e9      	b.n	800ab76 <__sflush_r+0xda>
 800aba2:	bf00      	nop
 800aba4:	20400001 	.word	0x20400001

0800aba8 <_fflush_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	690b      	ldr	r3, [r1, #16]
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b913      	cbnz	r3, 800abb8 <_fflush_r+0x10>
 800abb2:	2500      	movs	r5, #0
 800abb4:	4628      	mov	r0, r5
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	b118      	cbz	r0, 800abc2 <_fflush_r+0x1a>
 800abba:	6983      	ldr	r3, [r0, #24]
 800abbc:	b90b      	cbnz	r3, 800abc2 <_fflush_r+0x1a>
 800abbe:	f000 f887 	bl	800acd0 <__sinit>
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <_fflush_r+0x6c>)
 800abc4:	429c      	cmp	r4, r3
 800abc6:	d11b      	bne.n	800ac00 <_fflush_r+0x58>
 800abc8:	686c      	ldr	r4, [r5, #4]
 800abca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0ef      	beq.n	800abb2 <_fflush_r+0xa>
 800abd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abd4:	07d0      	lsls	r0, r2, #31
 800abd6:	d404      	bmi.n	800abe2 <_fflush_r+0x3a>
 800abd8:	0599      	lsls	r1, r3, #22
 800abda:	d402      	bmi.n	800abe2 <_fflush_r+0x3a>
 800abdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abde:	f000 f927 	bl	800ae30 <__retarget_lock_acquire_recursive>
 800abe2:	4628      	mov	r0, r5
 800abe4:	4621      	mov	r1, r4
 800abe6:	f7ff ff59 	bl	800aa9c <__sflush_r>
 800abea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abec:	07da      	lsls	r2, r3, #31
 800abee:	4605      	mov	r5, r0
 800abf0:	d4e0      	bmi.n	800abb4 <_fflush_r+0xc>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	059b      	lsls	r3, r3, #22
 800abf6:	d4dd      	bmi.n	800abb4 <_fflush_r+0xc>
 800abf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfa:	f000 f91a 	bl	800ae32 <__retarget_lock_release_recursive>
 800abfe:	e7d9      	b.n	800abb4 <_fflush_r+0xc>
 800ac00:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <_fflush_r+0x70>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <_fflush_r+0x62>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7df      	b.n	800abca <_fflush_r+0x22>
 800ac0a:	4b04      	ldr	r3, [pc, #16]	; (800ac1c <_fflush_r+0x74>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7da      	b.n	800abca <_fflush_r+0x22>
 800ac14:	0800c0a4 	.word	0x0800c0a4
 800ac18:	0800c0c4 	.word	0x0800c0c4
 800ac1c:	0800c084 	.word	0x0800c084

0800ac20 <std>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b510      	push	{r4, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	8181      	strh	r1, [r0, #12]
 800ac32:	6643      	str	r3, [r0, #100]	; 0x64
 800ac34:	81c2      	strh	r2, [r0, #14]
 800ac36:	6183      	str	r3, [r0, #24]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	305c      	adds	r0, #92	; 0x5c
 800ac3e:	f7fb fc8f 	bl	8006560 <memset>
 800ac42:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <std+0x38>)
 800ac44:	6263      	str	r3, [r4, #36]	; 0x24
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <std+0x3c>)
 800ac48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <std+0x40>)
 800ac4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac4e:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <std+0x44>)
 800ac50:	6224      	str	r4, [r4, #32]
 800ac52:	6323      	str	r3, [r4, #48]	; 0x30
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	bf00      	nop
 800ac58:	080072a1 	.word	0x080072a1
 800ac5c:	080072c7 	.word	0x080072c7
 800ac60:	080072ff 	.word	0x080072ff
 800ac64:	08007323 	.word	0x08007323

0800ac68 <_cleanup_r>:
 800ac68:	4901      	ldr	r1, [pc, #4]	; (800ac70 <_cleanup_r+0x8>)
 800ac6a:	f000 b8c1 	b.w	800adf0 <_fwalk_reent>
 800ac6e:	bf00      	nop
 800ac70:	0800aba9 	.word	0x0800aba9

0800ac74 <__sfmoreglue>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	1e4a      	subs	r2, r1, #1
 800ac78:	2568      	movs	r5, #104	; 0x68
 800ac7a:	4355      	muls	r5, r2
 800ac7c:	460e      	mov	r6, r1
 800ac7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac82:	f7ff f8ed 	bl	8009e60 <_malloc_r>
 800ac86:	4604      	mov	r4, r0
 800ac88:	b140      	cbz	r0, 800ac9c <__sfmoreglue+0x28>
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac90:	300c      	adds	r0, #12
 800ac92:	60a0      	str	r0, [r4, #8]
 800ac94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac98:	f7fb fc62 	bl	8006560 <memset>
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}

0800aca0 <__sfp_lock_acquire>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__sfp_lock_acquire+0x8>)
 800aca2:	f000 b8c5 	b.w	800ae30 <__retarget_lock_acquire_recursive>
 800aca6:	bf00      	nop
 800aca8:	200108a0 	.word	0x200108a0

0800acac <__sfp_lock_release>:
 800acac:	4801      	ldr	r0, [pc, #4]	; (800acb4 <__sfp_lock_release+0x8>)
 800acae:	f000 b8c0 	b.w	800ae32 <__retarget_lock_release_recursive>
 800acb2:	bf00      	nop
 800acb4:	200108a0 	.word	0x200108a0

0800acb8 <__sinit_lock_acquire>:
 800acb8:	4801      	ldr	r0, [pc, #4]	; (800acc0 <__sinit_lock_acquire+0x8>)
 800acba:	f000 b8b9 	b.w	800ae30 <__retarget_lock_acquire_recursive>
 800acbe:	bf00      	nop
 800acc0:	2001089b 	.word	0x2001089b

0800acc4 <__sinit_lock_release>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__sinit_lock_release+0x8>)
 800acc6:	f000 b8b4 	b.w	800ae32 <__retarget_lock_release_recursive>
 800acca:	bf00      	nop
 800accc:	2001089b 	.word	0x2001089b

0800acd0 <__sinit>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4604      	mov	r4, r0
 800acd4:	f7ff fff0 	bl	800acb8 <__sinit_lock_acquire>
 800acd8:	69a3      	ldr	r3, [r4, #24]
 800acda:	b11b      	cbz	r3, 800ace4 <__sinit+0x14>
 800acdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace0:	f7ff bff0 	b.w	800acc4 <__sinit_lock_release>
 800ace4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ace8:	6523      	str	r3, [r4, #80]	; 0x50
 800acea:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <__sinit+0x68>)
 800acec:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <__sinit+0x6c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	bf04      	itt	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	61a3      	streq	r3, [r4, #24]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f820 	bl	800ad40 <__sfp>
 800ad00:	6060      	str	r0, [r4, #4]
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f81c 	bl	800ad40 <__sfp>
 800ad08:	60a0      	str	r0, [r4, #8]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f818 	bl	800ad40 <__sfp>
 800ad10:	2200      	movs	r2, #0
 800ad12:	60e0      	str	r0, [r4, #12]
 800ad14:	2104      	movs	r1, #4
 800ad16:	6860      	ldr	r0, [r4, #4]
 800ad18:	f7ff ff82 	bl	800ac20 <std>
 800ad1c:	68a0      	ldr	r0, [r4, #8]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	2109      	movs	r1, #9
 800ad22:	f7ff ff7d 	bl	800ac20 <std>
 800ad26:	68e0      	ldr	r0, [r4, #12]
 800ad28:	2202      	movs	r2, #2
 800ad2a:	2112      	movs	r1, #18
 800ad2c:	f7ff ff78 	bl	800ac20 <std>
 800ad30:	2301      	movs	r3, #1
 800ad32:	61a3      	str	r3, [r4, #24]
 800ad34:	e7d2      	b.n	800acdc <__sinit+0xc>
 800ad36:	bf00      	nop
 800ad38:	0800bc18 	.word	0x0800bc18
 800ad3c:	0800ac69 	.word	0x0800ac69

0800ad40 <__sfp>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	4607      	mov	r7, r0
 800ad44:	f7ff ffac 	bl	800aca0 <__sfp_lock_acquire>
 800ad48:	4b1e      	ldr	r3, [pc, #120]	; (800adc4 <__sfp+0x84>)
 800ad4a:	681e      	ldr	r6, [r3, #0]
 800ad4c:	69b3      	ldr	r3, [r6, #24]
 800ad4e:	b913      	cbnz	r3, 800ad56 <__sfp+0x16>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff ffbd 	bl	800acd0 <__sinit>
 800ad56:	3648      	adds	r6, #72	; 0x48
 800ad58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	d503      	bpl.n	800ad68 <__sfp+0x28>
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	b30b      	cbz	r3, 800ada8 <__sfp+0x68>
 800ad64:	6836      	ldr	r6, [r6, #0]
 800ad66:	e7f7      	b.n	800ad58 <__sfp+0x18>
 800ad68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad6c:	b9d5      	cbnz	r5, 800ada4 <__sfp+0x64>
 800ad6e:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <__sfp+0x88>)
 800ad70:	60e3      	str	r3, [r4, #12]
 800ad72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad76:	6665      	str	r5, [r4, #100]	; 0x64
 800ad78:	f000 f859 	bl	800ae2e <__retarget_lock_init_recursive>
 800ad7c:	f7ff ff96 	bl	800acac <__sfp_lock_release>
 800ad80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad88:	6025      	str	r5, [r4, #0]
 800ad8a:	61a5      	str	r5, [r4, #24]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad94:	f7fb fbe4 	bl	8006560 <memset>
 800ad98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ada0:	4620      	mov	r0, r4
 800ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada4:	3468      	adds	r4, #104	; 0x68
 800ada6:	e7d9      	b.n	800ad5c <__sfp+0x1c>
 800ada8:	2104      	movs	r1, #4
 800adaa:	4638      	mov	r0, r7
 800adac:	f7ff ff62 	bl	800ac74 <__sfmoreglue>
 800adb0:	4604      	mov	r4, r0
 800adb2:	6030      	str	r0, [r6, #0]
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d1d5      	bne.n	800ad64 <__sfp+0x24>
 800adb8:	f7ff ff78 	bl	800acac <__sfp_lock_release>
 800adbc:	230c      	movs	r3, #12
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	e7ee      	b.n	800ada0 <__sfp+0x60>
 800adc2:	bf00      	nop
 800adc4:	0800bc18 	.word	0x0800bc18
 800adc8:	ffff0001 	.word	0xffff0001

0800adcc <fiprintf>:
 800adcc:	b40e      	push	{r1, r2, r3}
 800adce:	b503      	push	{r0, r1, lr}
 800add0:	4601      	mov	r1, r0
 800add2:	ab03      	add	r3, sp, #12
 800add4:	4805      	ldr	r0, [pc, #20]	; (800adec <fiprintf+0x20>)
 800add6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adda:	6800      	ldr	r0, [r0, #0]
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f000 f89f 	bl	800af20 <_vfiprintf_r>
 800ade2:	b002      	add	sp, #8
 800ade4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade8:	b003      	add	sp, #12
 800adea:	4770      	bx	lr
 800adec:	20000060 	.word	0x20000060

0800adf0 <_fwalk_reent>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	4606      	mov	r6, r0
 800adf6:	4688      	mov	r8, r1
 800adf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adfc:	2700      	movs	r7, #0
 800adfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae02:	f1b9 0901 	subs.w	r9, r9, #1
 800ae06:	d505      	bpl.n	800ae14 <_fwalk_reent+0x24>
 800ae08:	6824      	ldr	r4, [r4, #0]
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d1f7      	bne.n	800adfe <_fwalk_reent+0xe>
 800ae0e:	4638      	mov	r0, r7
 800ae10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae14:	89ab      	ldrh	r3, [r5, #12]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d907      	bls.n	800ae2a <_fwalk_reent+0x3a>
 800ae1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	d003      	beq.n	800ae2a <_fwalk_reent+0x3a>
 800ae22:	4629      	mov	r1, r5
 800ae24:	4630      	mov	r0, r6
 800ae26:	47c0      	blx	r8
 800ae28:	4307      	orrs	r7, r0
 800ae2a:	3568      	adds	r5, #104	; 0x68
 800ae2c:	e7e9      	b.n	800ae02 <_fwalk_reent+0x12>

0800ae2e <__retarget_lock_init_recursive>:
 800ae2e:	4770      	bx	lr

0800ae30 <__retarget_lock_acquire_recursive>:
 800ae30:	4770      	bx	lr

0800ae32 <__retarget_lock_release_recursive>:
 800ae32:	4770      	bx	lr

0800ae34 <memmove>:
 800ae34:	4288      	cmp	r0, r1
 800ae36:	b510      	push	{r4, lr}
 800ae38:	eb01 0402 	add.w	r4, r1, r2
 800ae3c:	d902      	bls.n	800ae44 <memmove+0x10>
 800ae3e:	4284      	cmp	r4, r0
 800ae40:	4623      	mov	r3, r4
 800ae42:	d807      	bhi.n	800ae54 <memmove+0x20>
 800ae44:	1e43      	subs	r3, r0, #1
 800ae46:	42a1      	cmp	r1, r4
 800ae48:	d008      	beq.n	800ae5c <memmove+0x28>
 800ae4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae52:	e7f8      	b.n	800ae46 <memmove+0x12>
 800ae54:	4402      	add	r2, r0
 800ae56:	4601      	mov	r1, r0
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	d100      	bne.n	800ae5e <memmove+0x2a>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae66:	e7f7      	b.n	800ae58 <memmove+0x24>

0800ae68 <__malloc_lock>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__malloc_lock+0x8>)
 800ae6a:	f7ff bfe1 	b.w	800ae30 <__retarget_lock_acquire_recursive>
 800ae6e:	bf00      	nop
 800ae70:	2001089c 	.word	0x2001089c

0800ae74 <__malloc_unlock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_unlock+0x8>)
 800ae76:	f7ff bfdc 	b.w	800ae32 <__retarget_lock_release_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	2001089c 	.word	0x2001089c

0800ae80 <_realloc_r>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	4607      	mov	r7, r0
 800ae84:	4614      	mov	r4, r2
 800ae86:	460e      	mov	r6, r1
 800ae88:	b921      	cbnz	r1, 800ae94 <_realloc_r+0x14>
 800ae8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae8e:	4611      	mov	r1, r2
 800ae90:	f7fe bfe6 	b.w	8009e60 <_malloc_r>
 800ae94:	b922      	cbnz	r2, 800aea0 <_realloc_r+0x20>
 800ae96:	f7fe ff93 	bl	8009dc0 <_free_r>
 800ae9a:	4625      	mov	r5, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea0:	f000 fa9a 	bl	800b3d8 <_malloc_usable_size_r>
 800aea4:	42a0      	cmp	r0, r4
 800aea6:	d20f      	bcs.n	800aec8 <_realloc_r+0x48>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4638      	mov	r0, r7
 800aeac:	f7fe ffd8 	bl	8009e60 <_malloc_r>
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0f2      	beq.n	800ae9c <_realloc_r+0x1c>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4622      	mov	r2, r4
 800aeba:	f7fe faa7 	bl	800940c <memcpy>
 800aebe:	4631      	mov	r1, r6
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7fe ff7d 	bl	8009dc0 <_free_r>
 800aec6:	e7e9      	b.n	800ae9c <_realloc_r+0x1c>
 800aec8:	4635      	mov	r5, r6
 800aeca:	e7e7      	b.n	800ae9c <_realloc_r+0x1c>

0800aecc <__sfputc_r>:
 800aecc:	6893      	ldr	r3, [r2, #8]
 800aece:	3b01      	subs	r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	b410      	push	{r4}
 800aed4:	6093      	str	r3, [r2, #8]
 800aed6:	da08      	bge.n	800aeea <__sfputc_r+0x1e>
 800aed8:	6994      	ldr	r4, [r2, #24]
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	db01      	blt.n	800aee2 <__sfputc_r+0x16>
 800aede:	290a      	cmp	r1, #10
 800aee0:	d103      	bne.n	800aeea <__sfputc_r+0x1e>
 800aee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee6:	f000 b94b 	b.w	800b180 <__swbuf_r>
 800aeea:	6813      	ldr	r3, [r2, #0]
 800aeec:	1c58      	adds	r0, r3, #1
 800aeee:	6010      	str	r0, [r2, #0]
 800aef0:	7019      	strb	r1, [r3, #0]
 800aef2:	4608      	mov	r0, r1
 800aef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <__sfputs_r>:
 800aefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	4614      	mov	r4, r2
 800af02:	18d5      	adds	r5, r2, r3
 800af04:	42ac      	cmp	r4, r5
 800af06:	d101      	bne.n	800af0c <__sfputs_r+0x12>
 800af08:	2000      	movs	r0, #0
 800af0a:	e007      	b.n	800af1c <__sfputs_r+0x22>
 800af0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af10:	463a      	mov	r2, r7
 800af12:	4630      	mov	r0, r6
 800af14:	f7ff ffda 	bl	800aecc <__sfputc_r>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d1f3      	bne.n	800af04 <__sfputs_r+0xa>
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af20 <_vfiprintf_r>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	460d      	mov	r5, r1
 800af26:	b09d      	sub	sp, #116	; 0x74
 800af28:	4614      	mov	r4, r2
 800af2a:	4698      	mov	r8, r3
 800af2c:	4606      	mov	r6, r0
 800af2e:	b118      	cbz	r0, 800af38 <_vfiprintf_r+0x18>
 800af30:	6983      	ldr	r3, [r0, #24]
 800af32:	b90b      	cbnz	r3, 800af38 <_vfiprintf_r+0x18>
 800af34:	f7ff fecc 	bl	800acd0 <__sinit>
 800af38:	4b89      	ldr	r3, [pc, #548]	; (800b160 <_vfiprintf_r+0x240>)
 800af3a:	429d      	cmp	r5, r3
 800af3c:	d11b      	bne.n	800af76 <_vfiprintf_r+0x56>
 800af3e:	6875      	ldr	r5, [r6, #4]
 800af40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	d405      	bmi.n	800af52 <_vfiprintf_r+0x32>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	059a      	lsls	r2, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_vfiprintf_r+0x32>
 800af4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4e:	f7ff ff6f 	bl	800ae30 <__retarget_lock_acquire_recursive>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	071b      	lsls	r3, r3, #28
 800af56:	d501      	bpl.n	800af5c <_vfiprintf_r+0x3c>
 800af58:	692b      	ldr	r3, [r5, #16]
 800af5a:	b9eb      	cbnz	r3, 800af98 <_vfiprintf_r+0x78>
 800af5c:	4629      	mov	r1, r5
 800af5e:	4630      	mov	r0, r6
 800af60:	f000 f960 	bl	800b224 <__swsetup_r>
 800af64:	b1c0      	cbz	r0, 800af98 <_vfiprintf_r+0x78>
 800af66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af68:	07dc      	lsls	r4, r3, #31
 800af6a:	d50e      	bpl.n	800af8a <_vfiprintf_r+0x6a>
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	b01d      	add	sp, #116	; 0x74
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	4b7b      	ldr	r3, [pc, #492]	; (800b164 <_vfiprintf_r+0x244>)
 800af78:	429d      	cmp	r5, r3
 800af7a:	d101      	bne.n	800af80 <_vfiprintf_r+0x60>
 800af7c:	68b5      	ldr	r5, [r6, #8]
 800af7e:	e7df      	b.n	800af40 <_vfiprintf_r+0x20>
 800af80:	4b79      	ldr	r3, [pc, #484]	; (800b168 <_vfiprintf_r+0x248>)
 800af82:	429d      	cmp	r5, r3
 800af84:	bf08      	it	eq
 800af86:	68f5      	ldreq	r5, [r6, #12]
 800af88:	e7da      	b.n	800af40 <_vfiprintf_r+0x20>
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	0598      	lsls	r0, r3, #22
 800af8e:	d4ed      	bmi.n	800af6c <_vfiprintf_r+0x4c>
 800af90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af92:	f7ff ff4e 	bl	800ae32 <__retarget_lock_release_recursive>
 800af96:	e7e9      	b.n	800af6c <_vfiprintf_r+0x4c>
 800af98:	2300      	movs	r3, #0
 800af9a:	9309      	str	r3, [sp, #36]	; 0x24
 800af9c:	2320      	movs	r3, #32
 800af9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa6:	2330      	movs	r3, #48	; 0x30
 800afa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b16c <_vfiprintf_r+0x24c>
 800afac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afb0:	f04f 0901 	mov.w	r9, #1
 800afb4:	4623      	mov	r3, r4
 800afb6:	469a      	mov	sl, r3
 800afb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afbc:	b10a      	cbz	r2, 800afc2 <_vfiprintf_r+0xa2>
 800afbe:	2a25      	cmp	r2, #37	; 0x25
 800afc0:	d1f9      	bne.n	800afb6 <_vfiprintf_r+0x96>
 800afc2:	ebba 0b04 	subs.w	fp, sl, r4
 800afc6:	d00b      	beq.n	800afe0 <_vfiprintf_r+0xc0>
 800afc8:	465b      	mov	r3, fp
 800afca:	4622      	mov	r2, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ff93 	bl	800aefa <__sfputs_r>
 800afd4:	3001      	adds	r0, #1
 800afd6:	f000 80aa 	beq.w	800b12e <_vfiprintf_r+0x20e>
 800afda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afdc:	445a      	add	r2, fp
 800afde:	9209      	str	r2, [sp, #36]	; 0x24
 800afe0:	f89a 3000 	ldrb.w	r3, [sl]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 80a2 	beq.w	800b12e <_vfiprintf_r+0x20e>
 800afea:	2300      	movs	r3, #0
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aff4:	f10a 0a01 	add.w	sl, sl, #1
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b000:	931a      	str	r3, [sp, #104]	; 0x68
 800b002:	4654      	mov	r4, sl
 800b004:	2205      	movs	r2, #5
 800b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00a:	4858      	ldr	r0, [pc, #352]	; (800b16c <_vfiprintf_r+0x24c>)
 800b00c:	f7f5 f930 	bl	8000270 <memchr>
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	b9d8      	cbnz	r0, 800b04c <_vfiprintf_r+0x12c>
 800b014:	06d1      	lsls	r1, r2, #27
 800b016:	bf44      	itt	mi
 800b018:	2320      	movmi	r3, #32
 800b01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b01e:	0713      	lsls	r3, r2, #28
 800b020:	bf44      	itt	mi
 800b022:	232b      	movmi	r3, #43	; 0x2b
 800b024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b028:	f89a 3000 	ldrb.w	r3, [sl]
 800b02c:	2b2a      	cmp	r3, #42	; 0x2a
 800b02e:	d015      	beq.n	800b05c <_vfiprintf_r+0x13c>
 800b030:	9a07      	ldr	r2, [sp, #28]
 800b032:	4654      	mov	r4, sl
 800b034:	2000      	movs	r0, #0
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	4621      	mov	r1, r4
 800b03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b040:	3b30      	subs	r3, #48	; 0x30
 800b042:	2b09      	cmp	r3, #9
 800b044:	d94e      	bls.n	800b0e4 <_vfiprintf_r+0x1c4>
 800b046:	b1b0      	cbz	r0, 800b076 <_vfiprintf_r+0x156>
 800b048:	9207      	str	r2, [sp, #28]
 800b04a:	e014      	b.n	800b076 <_vfiprintf_r+0x156>
 800b04c:	eba0 0308 	sub.w	r3, r0, r8
 800b050:	fa09 f303 	lsl.w	r3, r9, r3
 800b054:	4313      	orrs	r3, r2
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	46a2      	mov	sl, r4
 800b05a:	e7d2      	b.n	800b002 <_vfiprintf_r+0xe2>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	1d19      	adds	r1, r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	9103      	str	r1, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfbb      	ittet	lt
 800b068:	425b      	neglt	r3, r3
 800b06a:	f042 0202 	orrlt.w	r2, r2, #2
 800b06e:	9307      	strge	r3, [sp, #28]
 800b070:	9307      	strlt	r3, [sp, #28]
 800b072:	bfb8      	it	lt
 800b074:	9204      	strlt	r2, [sp, #16]
 800b076:	7823      	ldrb	r3, [r4, #0]
 800b078:	2b2e      	cmp	r3, #46	; 0x2e
 800b07a:	d10c      	bne.n	800b096 <_vfiprintf_r+0x176>
 800b07c:	7863      	ldrb	r3, [r4, #1]
 800b07e:	2b2a      	cmp	r3, #42	; 0x2a
 800b080:	d135      	bne.n	800b0ee <_vfiprintf_r+0x1ce>
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	1d1a      	adds	r2, r3, #4
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	9203      	str	r2, [sp, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bfb8      	it	lt
 800b08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b092:	3402      	adds	r4, #2
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b17c <_vfiprintf_r+0x25c>
 800b09a:	7821      	ldrb	r1, [r4, #0]
 800b09c:	2203      	movs	r2, #3
 800b09e:	4650      	mov	r0, sl
 800b0a0:	f7f5 f8e6 	bl	8000270 <memchr>
 800b0a4:	b140      	cbz	r0, 800b0b8 <_vfiprintf_r+0x198>
 800b0a6:	2340      	movs	r3, #64	; 0x40
 800b0a8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	4303      	orrs	r3, r0
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0bc:	482c      	ldr	r0, [pc, #176]	; (800b170 <_vfiprintf_r+0x250>)
 800b0be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0c2:	2206      	movs	r2, #6
 800b0c4:	f7f5 f8d4 	bl	8000270 <memchr>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d03f      	beq.n	800b14c <_vfiprintf_r+0x22c>
 800b0cc:	4b29      	ldr	r3, [pc, #164]	; (800b174 <_vfiprintf_r+0x254>)
 800b0ce:	bb1b      	cbnz	r3, 800b118 <_vfiprintf_r+0x1f8>
 800b0d0:	9b03      	ldr	r3, [sp, #12]
 800b0d2:	3307      	adds	r3, #7
 800b0d4:	f023 0307 	bic.w	r3, r3, #7
 800b0d8:	3308      	adds	r3, #8
 800b0da:	9303      	str	r3, [sp, #12]
 800b0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0de:	443b      	add	r3, r7
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e2:	e767      	b.n	800afb4 <_vfiprintf_r+0x94>
 800b0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	e7a5      	b.n	800b03a <_vfiprintf_r+0x11a>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	3401      	adds	r4, #1
 800b0f2:	9305      	str	r3, [sp, #20]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f04f 0c0a 	mov.w	ip, #10
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b100:	3a30      	subs	r2, #48	; 0x30
 800b102:	2a09      	cmp	r2, #9
 800b104:	d903      	bls.n	800b10e <_vfiprintf_r+0x1ee>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0c5      	beq.n	800b096 <_vfiprintf_r+0x176>
 800b10a:	9105      	str	r1, [sp, #20]
 800b10c:	e7c3      	b.n	800b096 <_vfiprintf_r+0x176>
 800b10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b112:	4604      	mov	r4, r0
 800b114:	2301      	movs	r3, #1
 800b116:	e7f0      	b.n	800b0fa <_vfiprintf_r+0x1da>
 800b118:	ab03      	add	r3, sp, #12
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	462a      	mov	r2, r5
 800b11e:	4b16      	ldr	r3, [pc, #88]	; (800b178 <_vfiprintf_r+0x258>)
 800b120:	a904      	add	r1, sp, #16
 800b122:	4630      	mov	r0, r6
 800b124:	f7fb fab4 	bl	8006690 <_printf_float>
 800b128:	4607      	mov	r7, r0
 800b12a:	1c78      	adds	r0, r7, #1
 800b12c:	d1d6      	bne.n	800b0dc <_vfiprintf_r+0x1bc>
 800b12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b130:	07d9      	lsls	r1, r3, #31
 800b132:	d405      	bmi.n	800b140 <_vfiprintf_r+0x220>
 800b134:	89ab      	ldrh	r3, [r5, #12]
 800b136:	059a      	lsls	r2, r3, #22
 800b138:	d402      	bmi.n	800b140 <_vfiprintf_r+0x220>
 800b13a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b13c:	f7ff fe79 	bl	800ae32 <__retarget_lock_release_recursive>
 800b140:	89ab      	ldrh	r3, [r5, #12]
 800b142:	065b      	lsls	r3, r3, #25
 800b144:	f53f af12 	bmi.w	800af6c <_vfiprintf_r+0x4c>
 800b148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b14a:	e711      	b.n	800af70 <_vfiprintf_r+0x50>
 800b14c:	ab03      	add	r3, sp, #12
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	462a      	mov	r2, r5
 800b152:	4b09      	ldr	r3, [pc, #36]	; (800b178 <_vfiprintf_r+0x258>)
 800b154:	a904      	add	r1, sp, #16
 800b156:	4630      	mov	r0, r6
 800b158:	f7fb fd26 	bl	8006ba8 <_printf_i>
 800b15c:	e7e4      	b.n	800b128 <_vfiprintf_r+0x208>
 800b15e:	bf00      	nop
 800b160:	0800c0a4 	.word	0x0800c0a4
 800b164:	0800c0c4 	.word	0x0800c0c4
 800b168:	0800c084 	.word	0x0800c084
 800b16c:	0800c01c 	.word	0x0800c01c
 800b170:	0800c026 	.word	0x0800c026
 800b174:	08006691 	.word	0x08006691
 800b178:	0800aefb 	.word	0x0800aefb
 800b17c:	0800c022 	.word	0x0800c022

0800b180 <__swbuf_r>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	460e      	mov	r6, r1
 800b184:	4614      	mov	r4, r2
 800b186:	4605      	mov	r5, r0
 800b188:	b118      	cbz	r0, 800b192 <__swbuf_r+0x12>
 800b18a:	6983      	ldr	r3, [r0, #24]
 800b18c:	b90b      	cbnz	r3, 800b192 <__swbuf_r+0x12>
 800b18e:	f7ff fd9f 	bl	800acd0 <__sinit>
 800b192:	4b21      	ldr	r3, [pc, #132]	; (800b218 <__swbuf_r+0x98>)
 800b194:	429c      	cmp	r4, r3
 800b196:	d12b      	bne.n	800b1f0 <__swbuf_r+0x70>
 800b198:	686c      	ldr	r4, [r5, #4]
 800b19a:	69a3      	ldr	r3, [r4, #24]
 800b19c:	60a3      	str	r3, [r4, #8]
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	071a      	lsls	r2, r3, #28
 800b1a2:	d52f      	bpl.n	800b204 <__swbuf_r+0x84>
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	b36b      	cbz	r3, 800b204 <__swbuf_r+0x84>
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	6820      	ldr	r0, [r4, #0]
 800b1ac:	1ac0      	subs	r0, r0, r3
 800b1ae:	6963      	ldr	r3, [r4, #20]
 800b1b0:	b2f6      	uxtb	r6, r6
 800b1b2:	4283      	cmp	r3, r0
 800b1b4:	4637      	mov	r7, r6
 800b1b6:	dc04      	bgt.n	800b1c2 <__swbuf_r+0x42>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7ff fcf4 	bl	800aba8 <_fflush_r>
 800b1c0:	bb30      	cbnz	r0, 800b210 <__swbuf_r+0x90>
 800b1c2:	68a3      	ldr	r3, [r4, #8]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	60a3      	str	r3, [r4, #8]
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	1c5a      	adds	r2, r3, #1
 800b1cc:	6022      	str	r2, [r4, #0]
 800b1ce:	701e      	strb	r6, [r3, #0]
 800b1d0:	6963      	ldr	r3, [r4, #20]
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	4283      	cmp	r3, r0
 800b1d6:	d004      	beq.n	800b1e2 <__swbuf_r+0x62>
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	07db      	lsls	r3, r3, #31
 800b1dc:	d506      	bpl.n	800b1ec <__swbuf_r+0x6c>
 800b1de:	2e0a      	cmp	r6, #10
 800b1e0:	d104      	bne.n	800b1ec <__swbuf_r+0x6c>
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f7ff fcdf 	bl	800aba8 <_fflush_r>
 800b1ea:	b988      	cbnz	r0, 800b210 <__swbuf_r+0x90>
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <__swbuf_r+0x9c>)
 800b1f2:	429c      	cmp	r4, r3
 800b1f4:	d101      	bne.n	800b1fa <__swbuf_r+0x7a>
 800b1f6:	68ac      	ldr	r4, [r5, #8]
 800b1f8:	e7cf      	b.n	800b19a <__swbuf_r+0x1a>
 800b1fa:	4b09      	ldr	r3, [pc, #36]	; (800b220 <__swbuf_r+0xa0>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	bf08      	it	eq
 800b200:	68ec      	ldreq	r4, [r5, #12]
 800b202:	e7ca      	b.n	800b19a <__swbuf_r+0x1a>
 800b204:	4621      	mov	r1, r4
 800b206:	4628      	mov	r0, r5
 800b208:	f000 f80c 	bl	800b224 <__swsetup_r>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d0cb      	beq.n	800b1a8 <__swbuf_r+0x28>
 800b210:	f04f 37ff 	mov.w	r7, #4294967295
 800b214:	e7ea      	b.n	800b1ec <__swbuf_r+0x6c>
 800b216:	bf00      	nop
 800b218:	0800c0a4 	.word	0x0800c0a4
 800b21c:	0800c0c4 	.word	0x0800c0c4
 800b220:	0800c084 	.word	0x0800c084

0800b224 <__swsetup_r>:
 800b224:	4b32      	ldr	r3, [pc, #200]	; (800b2f0 <__swsetup_r+0xcc>)
 800b226:	b570      	push	{r4, r5, r6, lr}
 800b228:	681d      	ldr	r5, [r3, #0]
 800b22a:	4606      	mov	r6, r0
 800b22c:	460c      	mov	r4, r1
 800b22e:	b125      	cbz	r5, 800b23a <__swsetup_r+0x16>
 800b230:	69ab      	ldr	r3, [r5, #24]
 800b232:	b913      	cbnz	r3, 800b23a <__swsetup_r+0x16>
 800b234:	4628      	mov	r0, r5
 800b236:	f7ff fd4b 	bl	800acd0 <__sinit>
 800b23a:	4b2e      	ldr	r3, [pc, #184]	; (800b2f4 <__swsetup_r+0xd0>)
 800b23c:	429c      	cmp	r4, r3
 800b23e:	d10f      	bne.n	800b260 <__swsetup_r+0x3c>
 800b240:	686c      	ldr	r4, [r5, #4]
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b248:	0719      	lsls	r1, r3, #28
 800b24a:	d42c      	bmi.n	800b2a6 <__swsetup_r+0x82>
 800b24c:	06dd      	lsls	r5, r3, #27
 800b24e:	d411      	bmi.n	800b274 <__swsetup_r+0x50>
 800b250:	2309      	movs	r3, #9
 800b252:	6033      	str	r3, [r6, #0]
 800b254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	f04f 30ff 	mov.w	r0, #4294967295
 800b25e:	e03e      	b.n	800b2de <__swsetup_r+0xba>
 800b260:	4b25      	ldr	r3, [pc, #148]	; (800b2f8 <__swsetup_r+0xd4>)
 800b262:	429c      	cmp	r4, r3
 800b264:	d101      	bne.n	800b26a <__swsetup_r+0x46>
 800b266:	68ac      	ldr	r4, [r5, #8]
 800b268:	e7eb      	b.n	800b242 <__swsetup_r+0x1e>
 800b26a:	4b24      	ldr	r3, [pc, #144]	; (800b2fc <__swsetup_r+0xd8>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	bf08      	it	eq
 800b270:	68ec      	ldreq	r4, [r5, #12]
 800b272:	e7e6      	b.n	800b242 <__swsetup_r+0x1e>
 800b274:	0758      	lsls	r0, r3, #29
 800b276:	d512      	bpl.n	800b29e <__swsetup_r+0x7a>
 800b278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b27a:	b141      	cbz	r1, 800b28e <__swsetup_r+0x6a>
 800b27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b280:	4299      	cmp	r1, r3
 800b282:	d002      	beq.n	800b28a <__swsetup_r+0x66>
 800b284:	4630      	mov	r0, r6
 800b286:	f7fe fd9b 	bl	8009dc0 <_free_r>
 800b28a:	2300      	movs	r3, #0
 800b28c:	6363      	str	r3, [r4, #52]	; 0x34
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	2300      	movs	r3, #0
 800b298:	6063      	str	r3, [r4, #4]
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f043 0308 	orr.w	r3, r3, #8
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	b94b      	cbnz	r3, 800b2be <__swsetup_r+0x9a>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b4:	d003      	beq.n	800b2be <__swsetup_r+0x9a>
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f000 f84d 	bl	800b358 <__smakebuf_r>
 800b2be:	89a0      	ldrh	r0, [r4, #12]
 800b2c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2c4:	f010 0301 	ands.w	r3, r0, #1
 800b2c8:	d00a      	beq.n	800b2e0 <__swsetup_r+0xbc>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60a3      	str	r3, [r4, #8]
 800b2ce:	6963      	ldr	r3, [r4, #20]
 800b2d0:	425b      	negs	r3, r3
 800b2d2:	61a3      	str	r3, [r4, #24]
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	b943      	cbnz	r3, 800b2ea <__swsetup_r+0xc6>
 800b2d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2dc:	d1ba      	bne.n	800b254 <__swsetup_r+0x30>
 800b2de:	bd70      	pop	{r4, r5, r6, pc}
 800b2e0:	0781      	lsls	r1, r0, #30
 800b2e2:	bf58      	it	pl
 800b2e4:	6963      	ldrpl	r3, [r4, #20]
 800b2e6:	60a3      	str	r3, [r4, #8]
 800b2e8:	e7f4      	b.n	800b2d4 <__swsetup_r+0xb0>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e7f7      	b.n	800b2de <__swsetup_r+0xba>
 800b2ee:	bf00      	nop
 800b2f0:	20000060 	.word	0x20000060
 800b2f4:	0800c0a4 	.word	0x0800c0a4
 800b2f8:	0800c0c4 	.word	0x0800c0c4
 800b2fc:	0800c084 	.word	0x0800c084

0800b300 <abort>:
 800b300:	b508      	push	{r3, lr}
 800b302:	2006      	movs	r0, #6
 800b304:	f000 f898 	bl	800b438 <raise>
 800b308:	2001      	movs	r0, #1
 800b30a:	f7f6 fe15 	bl	8001f38 <_exit>

0800b30e <__swhatbuf_r>:
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	460e      	mov	r6, r1
 800b312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b316:	2900      	cmp	r1, #0
 800b318:	b096      	sub	sp, #88	; 0x58
 800b31a:	4614      	mov	r4, r2
 800b31c:	461d      	mov	r5, r3
 800b31e:	da07      	bge.n	800b330 <__swhatbuf_r+0x22>
 800b320:	2300      	movs	r3, #0
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	89b3      	ldrh	r3, [r6, #12]
 800b326:	061a      	lsls	r2, r3, #24
 800b328:	d410      	bmi.n	800b34c <__swhatbuf_r+0x3e>
 800b32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32e:	e00e      	b.n	800b34e <__swhatbuf_r+0x40>
 800b330:	466a      	mov	r2, sp
 800b332:	f000 f89d 	bl	800b470 <_fstat_r>
 800b336:	2800      	cmp	r0, #0
 800b338:	dbf2      	blt.n	800b320 <__swhatbuf_r+0x12>
 800b33a:	9a01      	ldr	r2, [sp, #4]
 800b33c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b344:	425a      	negs	r2, r3
 800b346:	415a      	adcs	r2, r3
 800b348:	602a      	str	r2, [r5, #0]
 800b34a:	e7ee      	b.n	800b32a <__swhatbuf_r+0x1c>
 800b34c:	2340      	movs	r3, #64	; 0x40
 800b34e:	2000      	movs	r0, #0
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	b016      	add	sp, #88	; 0x58
 800b354:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b358 <__smakebuf_r>:
 800b358:	898b      	ldrh	r3, [r1, #12]
 800b35a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b35c:	079d      	lsls	r5, r3, #30
 800b35e:	4606      	mov	r6, r0
 800b360:	460c      	mov	r4, r1
 800b362:	d507      	bpl.n	800b374 <__smakebuf_r+0x1c>
 800b364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	2301      	movs	r3, #1
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	b002      	add	sp, #8
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	ab01      	add	r3, sp, #4
 800b376:	466a      	mov	r2, sp
 800b378:	f7ff ffc9 	bl	800b30e <__swhatbuf_r>
 800b37c:	9900      	ldr	r1, [sp, #0]
 800b37e:	4605      	mov	r5, r0
 800b380:	4630      	mov	r0, r6
 800b382:	f7fe fd6d 	bl	8009e60 <_malloc_r>
 800b386:	b948      	cbnz	r0, 800b39c <__smakebuf_r+0x44>
 800b388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d4ef      	bmi.n	800b370 <__smakebuf_r+0x18>
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7e3      	b.n	800b364 <__smakebuf_r+0xc>
 800b39c:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <__smakebuf_r+0x7c>)
 800b39e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	6020      	str	r0, [r4, #0]
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	6163      	str	r3, [r4, #20]
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	6120      	str	r0, [r4, #16]
 800b3b2:	b15b      	cbz	r3, 800b3cc <__smakebuf_r+0x74>
 800b3b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f000 f86b 	bl	800b494 <_isatty_r>
 800b3be:	b128      	cbz	r0, 800b3cc <__smakebuf_r+0x74>
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f023 0303 	bic.w	r3, r3, #3
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	89a0      	ldrh	r0, [r4, #12]
 800b3ce:	4305      	orrs	r5, r0
 800b3d0:	81a5      	strh	r5, [r4, #12]
 800b3d2:	e7cd      	b.n	800b370 <__smakebuf_r+0x18>
 800b3d4:	0800ac69 	.word	0x0800ac69

0800b3d8 <_malloc_usable_size_r>:
 800b3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3dc:	1f18      	subs	r0, r3, #4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfbc      	itt	lt
 800b3e2:	580b      	ldrlt	r3, [r1, r0]
 800b3e4:	18c0      	addlt	r0, r0, r3
 800b3e6:	4770      	bx	lr

0800b3e8 <_raise_r>:
 800b3e8:	291f      	cmp	r1, #31
 800b3ea:	b538      	push	{r3, r4, r5, lr}
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	d904      	bls.n	800b3fc <_raise_r+0x14>
 800b3f2:	2316      	movs	r3, #22
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3fe:	b112      	cbz	r2, 800b406 <_raise_r+0x1e>
 800b400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b404:	b94b      	cbnz	r3, 800b41a <_raise_r+0x32>
 800b406:	4620      	mov	r0, r4
 800b408:	f000 f830 	bl	800b46c <_getpid_r>
 800b40c:	462a      	mov	r2, r5
 800b40e:	4601      	mov	r1, r0
 800b410:	4620      	mov	r0, r4
 800b412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b416:	f000 b817 	b.w	800b448 <_kill_r>
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d00a      	beq.n	800b434 <_raise_r+0x4c>
 800b41e:	1c59      	adds	r1, r3, #1
 800b420:	d103      	bne.n	800b42a <_raise_r+0x42>
 800b422:	2316      	movs	r3, #22
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	2001      	movs	r0, #1
 800b428:	e7e7      	b.n	800b3fa <_raise_r+0x12>
 800b42a:	2400      	movs	r4, #0
 800b42c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b430:	4628      	mov	r0, r5
 800b432:	4798      	blx	r3
 800b434:	2000      	movs	r0, #0
 800b436:	e7e0      	b.n	800b3fa <_raise_r+0x12>

0800b438 <raise>:
 800b438:	4b02      	ldr	r3, [pc, #8]	; (800b444 <raise+0xc>)
 800b43a:	4601      	mov	r1, r0
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	f7ff bfd3 	b.w	800b3e8 <_raise_r>
 800b442:	bf00      	nop
 800b444:	20000060 	.word	0x20000060

0800b448 <_kill_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d07      	ldr	r5, [pc, #28]	; (800b468 <_kill_r+0x20>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	f7f6 fd5f 	bl	8001f18 <_kill>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_kill_r+0x1c>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	b103      	cbz	r3, 800b464 <_kill_r+0x1c>
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20010894 	.word	0x20010894

0800b46c <_getpid_r>:
 800b46c:	f7f6 bd4c 	b.w	8001f08 <_getpid>

0800b470 <_fstat_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4d07      	ldr	r5, [pc, #28]	; (800b490 <_fstat_r+0x20>)
 800b474:	2300      	movs	r3, #0
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f7f6 fdaa 	bl	8001fd6 <_fstat>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d102      	bne.n	800b48c <_fstat_r+0x1c>
 800b486:	682b      	ldr	r3, [r5, #0]
 800b488:	b103      	cbz	r3, 800b48c <_fstat_r+0x1c>
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	20010894 	.word	0x20010894

0800b494 <_isatty_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d06      	ldr	r5, [pc, #24]	; (800b4b0 <_isatty_r+0x1c>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	f7f6 fda9 	bl	8001ff6 <_isatty>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_isatty_r+0x1a>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_isatty_r+0x1a>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	20010894 	.word	0x20010894

0800b4b4 <_init>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_fini>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr
