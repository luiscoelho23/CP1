
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe4  08004fe4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fec  08004fec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101cc  20000070  08005064  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001023c  08005064  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db94  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e96  00000000  00000000  0002dc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00030320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027477  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bede  00000000  00000000  00057f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a00  00000000  00000000  00063e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  00155858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ce4 	.word	0x08004ce4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004ce4 	.word	0x08004ce4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_GPIO_Init+0x8c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_GPIO_Init+0x8c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2101      	movs	r1, #1
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0x90>)
 800064c:	f000 ffde 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000650:	2301      	movs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x90>)
 8000668:	f000 fe24 	bl	80012b4 <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b0ac      	sub	sp, #176	; 0xb0
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fc16 	bl	8000eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f8f9 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f7ff ffad 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fa83 	bl	8000b98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	496b      	ldr	r1, [pc, #428]	; (8000844 <main+0x1c8>)
 8000696:	486c      	ldr	r0, [pc, #432]	; (8000848 <main+0x1cc>)
 8000698:	f002 f9b6 	bl	8002a08 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(is_ready_read_from_UART())
 800069c:	f000 fb18 	bl	8000cd0 <is_ready_read_from_UART>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0fa      	beq.n	800069c <main+0x20>
	  {
		  uint8_t message[128];
		  read_UART(message);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fb65 	bl	8000d78 <read_UART>

		  //checkCommand(message);

		  if(!strncmp((char*) message, "MR", 2))
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2202      	movs	r2, #2
 80006b2:	4966      	ldr	r1, [pc, #408]	; (800084c <main+0x1d0>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fd14 	bl	80040e2 <strncmp>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f040 8084 	bne.w	80007ca <main+0x14e>
		  {
			  int addr, length;

			  if(sscanf((char*) message, "%*s %x %x", &addr, &length) == 2)
 80006c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80006ca:	1d38      	adds	r0, r7, #4
 80006cc:	4960      	ldr	r1, [pc, #384]	; (8000850 <main+0x1d4>)
 80006ce:	f003 fccb 	bl	8004068 <siscanf>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d174      	bne.n	80007c2 <main+0x146>
			  {
 80006d8:	466b      	mov	r3, sp
 80006da:	461d      	mov	r5, r3
				  char data[length];
 80006dc:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80006e0:	1e63      	subs	r3, r4, #1
 80006e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80006e6:	4623      	mov	r3, r4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f04f 0100 	mov.w	r1, #0
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	00cb      	lsls	r3, r1, #3
 80006f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006fc:	00c2      	lsls	r2, r0, #3
 80006fe:	4623      	mov	r3, r4
 8000700:	4618      	mov	r0, r3
 8000702:	f04f 0100 	mov.w	r1, #0
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	00cb      	lsls	r3, r1, #3
 8000710:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000714:	00c2      	lsls	r2, r0, #3
 8000716:	4623      	mov	r3, r4
 8000718:	3307      	adds	r3, #7
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	ebad 0d03 	sub.w	sp, sp, r3
 8000722:	ab02      	add	r3, sp, #8
 8000724:	3300      	adds	r3, #0
 8000726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

				  if(memory_read(addr, length, data))
 800072a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800072e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000732:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f910 	bl	800095c <memory_read>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d03a      	beq.n	80007b8 <main+0x13c>
				  {
					  strcpy((char*) message, "Memory read: ");
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4a43      	ldr	r2, [pc, #268]	; (8000854 <main+0x1d8>)
 8000746:	461c      	mov	r4, r3
 8000748:	4613      	mov	r3, r2
 800074a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074c:	c407      	stmia	r4!, {r0, r1, r2}
 800074e:	8023      	strh	r3, [r4, #0]
					  char temp[4];

					  for(int i = 0; i < length; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000756:	e024      	b.n	80007a2 <main+0x126>
					  {
						  strcat((char*) message, itoa(data[i], temp, 16));
 8000758:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800075c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800076a:	2210      	movs	r2, #16
 800076c:	4619      	mov	r1, r3
 800076e:	f003 fc71 	bl	8004054 <itoa>
 8000772:	4602      	mov	r2, r0
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fca3 	bl	80040c4 <strcat>
						  strcat((char*) message, " ");
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd5d 	bl	8000240 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4413      	add	r3, r2
 800078e:	4932      	ldr	r1, [pc, #200]	; (8000858 <main+0x1dc>)
 8000790:	461a      	mov	r2, r3
 8000792:	460b      	mov	r3, r1
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	8013      	strh	r3, [r2, #0]
					  for(int i = 0; i < length; i++)
 8000798:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbd4      	blt.n	8000758 <main+0xdc>
					  }
					  send_UART((char*) message);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fab7 	bl	8000d24 <send_UART>
 80007b6:	e002      	b.n	80007be <main+0x142>
				  }
				  else
					  send_UART("Invalid Memory Read instruction argument values.\r");
 80007b8:	4828      	ldr	r0, [pc, #160]	; (800085c <main+0x1e0>)
 80007ba:	f000 fab3 	bl	8000d24 <send_UART>
 80007be:	46ad      	mov	sp, r5
 80007c0:	e036      	b.n	8000830 <main+0x1b4>
			  }
			  else
				  send_UART("Invalid Memory Read instruction syntax.");
 80007c2:	4827      	ldr	r0, [pc, #156]	; (8000860 <main+0x1e4>)
 80007c4:	f000 faae 	bl	8000d24 <send_UART>
 80007c8:	e032      	b.n	8000830 <main+0x1b4>
		  }
		  else if(!strncmp((char*) message, "MW", 2))
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2202      	movs	r2, #2
 80007ce:	4925      	ldr	r1, [pc, #148]	; (8000864 <main+0x1e8>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fc86 	bl	80040e2 <strncmp>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d126      	bne.n	800082a <main+0x1ae>
		  {
			  int addr, length, data;

			  if(sscanf((char*) message, "%*s %x %x %x", &addr, &length, &data) == 3)
 80007dc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80007e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80007e4:	1d38      	adds	r0, r7, #4
 80007e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	460b      	mov	r3, r1
 80007ee:	491e      	ldr	r1, [pc, #120]	; (8000868 <main+0x1ec>)
 80007f0:	f003 fc3a 	bl	8004068 <siscanf>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d113      	bne.n	8000822 <main+0x1a6>
			  {
				  if(memory_write(addr, length, data))
 80007fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007fe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000802:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8e2 	bl	80009d0 <memory_write>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <main+0x19e>
					  send_UART("Success.");
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <main+0x1f0>)
 8000814:	f000 fa86 	bl	8000d24 <send_UART>
 8000818:	e00a      	b.n	8000830 <main+0x1b4>
				  else
					  send_UART("Invalid Memory Write instruction argument values.");
 800081a:	4815      	ldr	r0, [pc, #84]	; (8000870 <main+0x1f4>)
 800081c:	f000 fa82 	bl	8000d24 <send_UART>
 8000820:	e006      	b.n	8000830 <main+0x1b4>
			  }
			  else
				  send_UART("Invalid Memory Write instruction syntax.");
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <main+0x1f8>)
 8000824:	f000 fa7e 	bl	8000d24 <send_UART>
 8000828:	e002      	b.n	8000830 <main+0x1b4>
		  }
		  else
			  send_UART("Invalid instruction.");
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <main+0x1fc>)
 800082c:	f000 fa7a 	bl	8000d24 <send_UART>

		  while(is_transmitting_to_UART());
 8000830:	bf00      	nop
 8000832:	f000 fa59 	bl	8000ce8 <is_transmitting_to_UART>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1fa      	bne.n	8000832 <main+0x1b6>

		  reset_UART();
 800083c:	f000 fa60 	bl	8000d00 <reset_UART>
	  if(is_ready_read_from_UART())
 8000840:	e72c      	b.n	800069c <main+0x20>
 8000842:	bf00      	nop
 8000844:	200000a4 	.word	0x200000a4
 8000848:	200101a4 	.word	0x200101a4
 800084c:	08004cfc 	.word	0x08004cfc
 8000850:	08004d00 	.word	0x08004d00
 8000854:	08004d0c 	.word	0x08004d0c
 8000858:	08004d1c 	.word	0x08004d1c
 800085c:	08004d20 	.word	0x08004d20
 8000860:	08004d54 	.word	0x08004d54
 8000864:	08004d7c 	.word	0x08004d7c
 8000868:	08004d80 	.word	0x08004d80
 800086c:	08004d90 	.word	0x08004d90
 8000870:	08004d9c 	.word	0x08004d9c
 8000874:	08004dd0 	.word	0x08004dd0
 8000878:	08004dfc 	.word	0x08004dfc

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2234      	movs	r2, #52	; 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fbe4 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <SystemClock_Config+0xd8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <SystemClock_Config+0xd8>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <SystemClock_Config+0xd8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <SystemClock_Config+0xdc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c0:	4a25      	ldr	r2, [pc, #148]	; (8000958 <SystemClock_Config+0xdc>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <SystemClock_Config+0xdc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4618      	mov	r0, r3
 8000902:	f000 feed 	bl	80016e0 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 f89e 	bl	8000a4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000910:	f000 fe96 	bl	8001640 <HAL_PWREx_EnableOverDrive>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800091a:	f000 f897 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2103      	movs	r1, #3
 800093a:	4618      	mov	r0, r3
 800093c:	f001 f97e 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000946:	f000 f881 	bl	8000a4c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <memory_read>:

/* USER CODE BEGIN 4 */

bool memory_read(int addr_r, int length, char* data)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	da0b      	bge.n	8000986 <memory_read+0x2a>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000974:	db07      	blt.n	8000986 <memory_read+0x2a>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	da04      	bge.n	8000986 <memory_read+0x2a>
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	dd01      	ble.n	8000986 <memory_read+0x2a>
		return false;
 8000982:	2300      	movs	r3, #0
 8000984:	e01b      	b.n	80009be <memory_read+0x62>

	if((0x10000 - addr_r) < length)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	429a      	cmp	r2, r3
 8000990:	dd01      	ble.n	8000996 <memory_read+0x3a>
		return false;
 8000992:	2300      	movs	r3, #0
 8000994:	e013      	b.n	80009be <memory_read+0x62>

	for(int i = 0; i < length; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e00b      	b.n	80009b4 <memory_read+0x58>
	{
		data[i] = memory[addr_r++];
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60fa      	str	r2, [r7, #12]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	440a      	add	r2, r1
 80009a8:	4908      	ldr	r1, [pc, #32]	; (80009cc <memory_read+0x70>)
 80009aa:	5ccb      	ldrb	r3, [r1, r3]
 80009ac:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbef      	blt.n	800099c <memory_read+0x40>
	}

	return true;
 80009bc:	2301      	movs	r3, #1
}
 80009be:	4618      	mov	r0, r3
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000124 	.word	0x20000124

080009d0 <memory_write>:

bool memory_write(int addr_r, int length, int data)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF && data < 0 && data > 0xFF)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da11      	bge.n	8000a06 <memory_write+0x36>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e8:	db0d      	blt.n	8000a06 <memory_write+0x36>
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da0a      	bge.n	8000a06 <memory_write+0x36>
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	dd07      	ble.n	8000a06 <memory_write+0x36>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	da04      	bge.n	8000a06 <memory_write+0x36>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2bff      	cmp	r3, #255	; 0xff
 8000a00:	dd01      	ble.n	8000a06 <memory_write+0x36>
		return false;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e019      	b.n	8000a3a <memory_write+0x6a>

	if((0x10000 - addr_r) < length)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dd01      	ble.n	8000a16 <memory_write+0x46>
		return false;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e011      	b.n	8000a3a <memory_write+0x6a>

	for(int i = 0; i < length; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e009      	b.n	8000a30 <memory_write+0x60>
	{
		memory[addr_r++] = data;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60fa      	str	r2, [r7, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	b2d1      	uxtb	r1, r2
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <memory_write+0x78>)
 8000a28:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf1      	blt.n	8000a1c <memory_write+0x4c>
	}

	return true;
 8000a38:	2301      	movs	r3, #1
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000124 	.word	0x20000124

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fa1e 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART3_IRQHandler+0x10>)
 8000afa:	f001 ffd3 	bl	8002aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200101a4 	.word	0x200101a4

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f003 fa4a 	bl	8003fd0 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20080000 	.word	0x20080000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	20010240 	.word	0x20010240

08000b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  UART_TX_buffer[0] = '\r';
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_USART3_UART_Init+0x5c>)
 8000b9e:	220d      	movs	r2, #13
 8000ba0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000ba4:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART3_UART_Init+0x64>)
 8000ba6:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000baa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bc4:	220c      	movs	r2, #12
 8000bc6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART3_UART_Init+0x60>)
 8000be2:	f001 fe55 	bl	8002890 <HAL_UART_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bec:	f7ff ff2e 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20010124 	.word	0x20010124
 8000bf8:	200101a4 	.word	0x200101a4
 8000bfc:	40004800 	.word	0x40004800

08000c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0ae      	sub	sp, #184	; 0xb8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2290      	movs	r2, #144	; 0x90
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fa19 	bl	8004058 <memset>
  if(uartHandle->Instance==USART3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d144      	bne.n	8000cba <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f9fe 	bl	8002040 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c4a:	f7ff feff 	bl	8000a4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0xc8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0xcc>)
 8000ca6:	f000 fb05 	bl	80012b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2027      	movs	r0, #39	; 0x27
 8000cb0:	f000 fa37 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cb4:	2027      	movs	r0, #39	; 0x27
 8000cb6:	f000 fa50 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	37b8      	adds	r7, #184	; 0xb8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <is_ready_read_from_UART>:
}

/* USER CODE BEGIN 1 */

bool is_ready_read_from_UART()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	return flagCPP;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <is_ready_read_from_UART+0x14>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000098 	.word	0x20000098

08000ce8 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	return flagCPE;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <is_transmitting_to_UART+0x14>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000099 	.word	0x20000099

08000d00 <reset_UART>:

void reset_UART()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	// clear buffer not needed

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <reset_UART+0x18>)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <reset_UART+0x1c>)
 8000d0a:	f001 fe7d 	bl	8002a08 <HAL_UART_Receive_IT>
	flagCPP = false;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <reset_UART+0x20>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000a4 	.word	0x200000a4
 8000d1c:	200101a4 	.word	0x200101a4
 8000d20:	20000098 	.word	0x20000098

08000d24 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, 128);
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <send_UART+0x44>)
 8000d32:	f003 f9e8 	bl	8004106 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <send_UART+0x44>)
 8000d38:	f7ff fa82 	bl	8000240 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <send_UART+0x44>)
 8000d42:	4413      	add	r3, r2
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <send_UART+0x48>)
 8000d46:	461a      	mov	r2, r3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <send_UART+0x4c>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	4904      	ldr	r1, [pc, #16]	; (8000d68 <send_UART+0x44>)
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <send_UART+0x50>)
 8000d5a:	f001 fde7 	bl	800292c <HAL_UART_Transmit_IT>

	return;
 8000d5e:	bf00      	nop
}
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20010124 	.word	0x20010124
 8000d6c:	08004e14 	.word	0x08004e14
 8000d70:	20000099 	.word	0x20000099
 8000d74:	200101a4 	.word	0x200101a4

08000d78 <read_UART>:

void read_UART(uint8_t* msg_to_read)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	// formatar backspaces

	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, 128);
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	4904      	ldr	r1, [pc, #16]	; (8000d94 <read_UART+0x1c>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f003 f9be 	bl	8004106 <strncpy>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000a4 	.word	0x200000a4

08000d98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_RxCpltCallback+0x50>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_UART_RxCpltCallback+0x48>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r')
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_UART_RxCpltCallback+0x54>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_UART_RxCpltCallback+0x58>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	2b0d      	cmp	r3, #13
 8000db2:	d106      	bne.n	8000dc2 <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_UART_RxCpltCallback+0x54>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_UART_RxCpltCallback+0x50>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}

	return;
 8000dc0:	e00f      	b.n	8000de2 <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_UART_RxCpltCallback+0x54>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_UART_RxCpltCallback+0x54>)
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_UART_RxCpltCallback+0x54>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_UART_RxCpltCallback+0x58>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_UART_RxCpltCallback+0x5c>)
 8000dda:	f001 fe15 	bl	8002a08 <HAL_UART_Receive_IT>
	return;
 8000dde:	e000      	b.n	8000de2 <HAL_UART_RxCpltCallback+0x4a>
		return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000098 	.word	0x20000098
 8000dec:	20000090 	.word	0x20000090
 8000df0:	200000a4 	.word	0x200000a4
 8000df4:	200101a4 	.word	0x200101a4

08000df8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_UART_TxCpltCallback+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f083 0301 	eor.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d11b      	bne.n	8000e46 <HAL_UART_TxCpltCallback+0x4e>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r')
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_TxCpltCallback+0x5c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_UART_TxCpltCallback+0x60>)
 8000e14:	5cd3      	ldrb	r3, [r2, r3]
 8000e16:	2b0d      	cmp	r3, #13
 8000e18:	d106      	bne.n	8000e28 <HAL_UART_TxCpltCallback+0x30>
	{
		UART_TX_index = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_UART_TxCpltCallback+0x5c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_UART_TxCpltCallback+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
	}

	return;
 8000e26:	e00f      	b.n	8000e48 <HAL_UART_TxCpltCallback+0x50>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_UART_TxCpltCallback+0x5c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_UART_TxCpltCallback+0x5c>)
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_UART_TxCpltCallback+0x5c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_UART_TxCpltCallback+0x60>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_UART_TxCpltCallback+0x64>)
 8000e40:	f001 fd74 	bl	800292c <HAL_UART_Transmit_IT>
	return;
 8000e44:	e000      	b.n	8000e48 <HAL_UART_TxCpltCallback+0x50>
		return;
 8000e46:	bf00      	nop
}
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000099 	.word	0x20000099
 8000e54:	20000094 	.word	0x20000094
 8000e58:	20010124 	.word	0x20010124
 8000e5c:	200101a4 	.word	0x200101a4

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff fe73 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f003 f8a5 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fbf3 	bl	800067c <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea4:	08004ff4 	.word	0x08004ff4
  ldr r2, =_sbss
 8000ea8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eac:	2001023c 	.word	0x2001023c

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>

08000eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f928 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f805 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fdc9 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f943 	bl	8001176 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f90b 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20010228 	.word	0x20010228

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20010228 	.word	0x20010228

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <__NVIC_SetPriorityGrouping+0x40>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x40>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	05fa0000 	.word	0x05fa0000

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff3e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff31 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff feda 	bl	8000f54 <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d008      	beq.n	80011c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e052      	b.n	8001266 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0216 	bic.w	r2, r2, #22
 80011ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d103      	bne.n	80011f0 <HAL_DMA_Abort+0x62>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0208 	bic.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e013      	b.n	800123a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fe9f 	bl	8000f54 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d90c      	bls.n	800123a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e015      	b.n	8001266 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e4      	bne.n	8001212 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	223f      	movs	r2, #63	; 0x3f
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d004      	beq.n	800128c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e00c      	b.n	80012a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2205      	movs	r2, #5
 8001290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e175      	b.n	80015c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8164 	bne.w	80015ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x56>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80be 	beq.w	80015ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_GPIO_Init+0x324>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001456:	4a61      	ldr	r2, [pc, #388]	; (80015dc <HAL_GPIO_Init+0x328>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_GPIO_Init+0x32c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d037      	beq.n	80014f2 <HAL_GPIO_Init+0x23e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x330>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d031      	beq.n	80014ee <HAL_GPIO_Init+0x23a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <HAL_GPIO_Init+0x334>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02b      	beq.n	80014ea <HAL_GPIO_Init+0x236>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a55      	ldr	r2, [pc, #340]	; (80015ec <HAL_GPIO_Init+0x338>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x232>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a54      	ldr	r2, [pc, #336]	; (80015f0 <HAL_GPIO_Init+0x33c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x22e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a53      	ldr	r2, [pc, #332]	; (80015f4 <HAL_GPIO_Init+0x340>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x22a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_GPIO_Init+0x344>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x226>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a51      	ldr	r2, [pc, #324]	; (80015fc <HAL_GPIO_Init+0x348>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x222>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a50      	ldr	r2, [pc, #320]	; (8001600 <HAL_GPIO_Init+0x34c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x21e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <HAL_GPIO_Init+0x350>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x21a>
 80014ca:	2309      	movs	r3, #9
 80014cc:	e012      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014ce:	230a      	movs	r3, #10
 80014d0:	e010      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x240>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x328>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <HAL_GPIO_Init+0x354>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a34      	ldr	r2, [pc, #208]	; (8001608 <HAL_GPIO_Init+0x354>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_GPIO_Init+0x354>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a29      	ldr	r2, [pc, #164]	; (8001608 <HAL_GPIO_Init+0x354>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_GPIO_Init+0x354>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x354>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_GPIO_Init+0x354>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_GPIO_Init+0x354>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae86 	bls.w	80012d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40022000 	.word	0x40022000
 8001604:	40022400 	.word	0x40022400
 8001608:	40013c00 	.word	0x40013c00

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166e:	f7ff fc71 	bl	8000f54 <HAL_GetTick>
 8001672:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001674:	e009      	b.n	800168a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001676:	f7ff fc6d 	bl	8000f54 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001684:	d901      	bls.n	800168a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e022      	b.n	80016d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d1ee      	bne.n	8001676 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff fc56 	bl	8000f54 <HAL_GetTick>
 80016a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016aa:	e009      	b.n	80016c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016ac:	f7ff fc52 	bl	8000f54 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ba:	d901      	bls.n	80016c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e007      	b.n	80016d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016cc:	d1ee      	bne.n	80016ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e29b      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8087 	beq.w	8001812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001704:	4b96      	ldr	r3, [pc, #600]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00c      	beq.n	800172a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001710:	4b93      	ldr	r3, [pc, #588]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d112      	bne.n	8001742 <HAL_RCC_OscConfig+0x62>
 800171c:	4b90      	ldr	r3, [pc, #576]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001728:	d10b      	bne.n	8001742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172a:	4b8d      	ldr	r3, [pc, #564]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d06c      	beq.n	8001810 <HAL_RCC_OscConfig+0x130>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d168      	bne.n	8001810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e275      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x7a>
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a83      	ldr	r2, [pc, #524]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e02e      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x9c>
 8001762:	4b7f      	ldr	r3, [pc, #508]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7e      	ldr	r2, [pc, #504]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xc0>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xd8>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbc8 	bl	8000f54 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fbc4 	bl	8000f54 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e229      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe8>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbb4 	bl	8000f54 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbb0 	bl	8000f54 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e215      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x110>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d069      	beq.n	80018f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x190>
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x17a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1e9      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	493d      	ldr	r1, [pc, #244]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e040      	b.n	80018f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a38      	ldr	r2, [pc, #224]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb66 	bl	8000f54 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fb62 	bl	8000f54 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4929      	ldr	r1, [pc, #164]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
 80018be:	e018      	b.n	80018f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb42 	bl	8000f54 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb3e 	bl	8000f54 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1a3      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d038      	beq.n	8001970 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fb1f 	bl	8000f54 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff fb1b 	bl	8000f54 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e180      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x23a>
 8001938:	e01a      	b.n	8001970 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_RCC_OscConfig+0x280>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fb05 	bl	8000f54 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fb01 	bl	8000f54 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d903      	bls.n	8001964 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e166      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
 8001960:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ee      	bne.n	800194e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a4 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197e:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a88      	ldr	r2, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b86      	ldr	r3, [pc, #536]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a6:	4b83      	ldr	r3, [pc, #524]	; (8001bb4 <HAL_RCC_OscConfig+0x4d4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019b2:	4b80      	ldr	r3, [pc, #512]	; (8001bb4 <HAL_RCC_OscConfig+0x4d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7f      	ldr	r2, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x4d4>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fac9 	bl	8000f54 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff fac5 	bl	8000f54 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e12a      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x4d4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x31a>
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_OscConfig+0x376>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x33c>
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	e01c      	b.n	8001a56 <HAL_RCC_OscConfig+0x376>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x35e>
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a61      	ldr	r2, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a5e      	ldr	r2, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x376>
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa79 	bl	8000f54 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa75 	bl	8000f54 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0d8      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ee      	beq.n	8001a66 <HAL_RCC_OscConfig+0x386>
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa63 	bl	8000f54 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fa5f 	bl	8000f54 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0c2      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80ae 	beq.w	8001c2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d06d      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d14b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fa30 	bl	8000f54 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff fa2c 	bl	8000f54 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e091      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	071b      	lsls	r3, r3, #28
 8001b42:	491b      	ldr	r1, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9fe 	bl	8000f54 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f9fa 	bl	8000f54 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e05f      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x47c>
 8001b7a:	e057      	b.n	8001c2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f9e4 	bl	8000f54 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f9e0 	bl	8000f54 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4b0>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x54c>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_RCC_OscConfig+0x558>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d030      	beq.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d129      	bne.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d122      	bne.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be8:	4013      	ands	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d119      	bne.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	3b01      	subs	r3, #1
 8001c02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10f      	bne.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	4965      	ldr	r1, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d040      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e073      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff f910 	bl	8000f54 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f90c 	bl	8000f54 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e053      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d210      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 020f 	bic.w	r2, r3, #15
 8001d76:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1cc>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1d0>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1d4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f86c 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08004e24 	.word	0x08004e24
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	f200 80bd 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e46:	e0b7      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e4a:	60bb      	str	r3, [r7, #8]
      break;
 8001e4c:	e0b7      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e50:	60bb      	str	r3, [r7, #8]
      break;
 8001e52:	e0b4      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04d      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	ea02 0800 	and.w	r8, r2, r0
 8001e82:	ea03 0901 	and.w	r9, r3, r1
 8001e86:	4640      	mov	r0, r8
 8001e88:	4649      	mov	r1, r9
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	014b      	lsls	r3, r1, #5
 8001e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e98:	0142      	lsls	r2, r0, #5
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	ebb0 0008 	subs.w	r0, r0, r8
 8001ea2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eb4:	0182      	lsls	r2, r0, #6
 8001eb6:	1a12      	subs	r2, r2, r0
 8001eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	00d9      	lsls	r1, r3, #3
 8001ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eca:	00d0      	lsls	r0, r2, #3
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	eb12 0208 	adds.w	r2, r2, r8
 8001ed4:	eb43 0309 	adc.w	r3, r3, r9
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	0259      	lsls	r1, r3, #9
 8001ee2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ee6:	0250      	lsls	r0, r2, #9
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f7fe f9fa 	bl	80002f0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e04a      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	ea02 0400 	and.w	r4, r2, r0
 8001f1e:	ea03 0501 	and.w	r5, r3, r1
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	014b      	lsls	r3, r1, #5
 8001f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f34:	0142      	lsls	r2, r0, #5
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	1b00      	subs	r0, r0, r4
 8001f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	018b      	lsls	r3, r1, #6
 8001f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f4e:	0182      	lsls	r2, r0, #6
 8001f50:	1a12      	subs	r2, r2, r0
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	00d9      	lsls	r1, r3, #3
 8001f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f64:	00d0      	lsls	r0, r2, #3
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	1912      	adds	r2, r2, r4
 8001f6c:	eb45 0303 	adc.w	r3, r5, r3
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0299      	lsls	r1, r3, #10
 8001f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f7e:	0290      	lsls	r0, r2, #10
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	f7fe f9ae 	bl	80002f0 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fba:	60bb      	str	r3, [r7, #8]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004e34 	.word	0x08004e34

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff ffdc 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0b5b      	lsrs	r3, r3, #13
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	08004e34 	.word	0x08004e34

08002040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002068:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a68      	ldr	r2, [pc, #416]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	4964      	ldr	r1, [pc, #400]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d017      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	4959      	ldr	r1, [pc, #356]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d017      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	494a      	ldr	r1, [pc, #296]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 808b 	beq.w	800223a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7fe ff04 	bl	8000f54 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe ff00 	bl	8000f54 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e38f      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d035      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d02e      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800218c:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d114      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fec8 	bl	8000f54 <HAL_GetTick>
 80021c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fec4 	bl	8000f54 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e351      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ee      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021f6:	d111      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002206:	400b      	ands	r3, r1
 8002208:	4901      	ldr	r1, [pc, #4]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
 800220e:	e00b      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	0ffffcff 	.word	0x0ffffcff
 800221c:	4bb3      	ldr	r3, [pc, #716]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4ab2      	ldr	r2, [pc, #712]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002222:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	4bb0      	ldr	r3, [pc, #704]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	49ad      	ldr	r1, [pc, #692]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002236:	4313      	orrs	r3, r2
 8002238:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002246:	4ba9      	ldr	r3, [pc, #676]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224c:	4aa7      	ldr	r2, [pc, #668]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002252:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002256:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002258:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	49a2      	ldr	r1, [pc, #648]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002274:	4b9d      	ldr	r3, [pc, #628]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002282:	499a      	ldr	r1, [pc, #616]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002296:	4b95      	ldr	r3, [pc, #596]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a4:	4991      	ldr	r1, [pc, #580]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b8:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c6:	4989      	ldr	r1, [pc, #548]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022da:	4b84      	ldr	r3, [pc, #528]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4980      	ldr	r1, [pc, #512]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4978      	ldr	r1, [pc, #480]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f023 020c 	bic.w	r2, r3, #12
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	496f      	ldr	r1, [pc, #444]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4967      	ldr	r1, [pc, #412]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002362:	4b62      	ldr	r3, [pc, #392]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	4956      	ldr	r1, [pc, #344]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	494d      	ldr	r1, [pc, #308]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	4945      	ldr	r1, [pc, #276]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	493c      	ldr	r1, [pc, #240]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800243c:	492b      	ldr	r1, [pc, #172]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244c:	d101      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247c:	491b      	ldr	r1, [pc, #108]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00b      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a0:	4912      	ldr	r1, [pc, #72]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	4909      	ldr	r1, [pc, #36]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00f      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	e002      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	4986      	ldr	r1, [pc, #536]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002504:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800250a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002514:	497d      	ldr	r1, [pc, #500]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d006      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80d6 	beq.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002530:	4b76      	ldr	r3, [pc, #472]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a75      	ldr	r2, [pc, #468]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800253a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fd0a 	bl	8000f54 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002544:	f7fe fd06 	bl	8000f54 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e195      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d021      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11d      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002576:	4b65      	ldr	r3, [pc, #404]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	0e1b      	lsrs	r3, r3, #24
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	019a      	lsls	r2, r3, #6
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	071b      	lsls	r3, r3, #28
 80025aa:	4958      	ldr	r1, [pc, #352]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02e      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025dc:	d129      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f2:	0f1b      	lsrs	r3, r3, #28
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	019a      	lsls	r2, r3, #6
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	061b      	lsls	r3, r3, #24
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	493e      	ldr	r1, [pc, #248]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002620:	f023 021f 	bic.w	r2, r3, #31
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	3b01      	subs	r3, #1
 800262a:	4938      	ldr	r1, [pc, #224]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01d      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002644:	0e1b      	lsrs	r3, r3, #24
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800264e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	019a      	lsls	r2, r3, #6
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	071b      	lsls	r3, r3, #28
 8002672:	4926      	ldr	r1, [pc, #152]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	019a      	lsls	r2, r3, #6
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	071b      	lsls	r3, r3, #28
 80026a2:	491a      	ldr	r1, [pc, #104]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b6:	f7fe fc4d 	bl	8000f54 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026be:	f7fe fc49 	bl	8000f54 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0d8      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 80ce 	bne.w	8002880 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fc30 	bl	8000f54 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026f6:	e00b      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f8:	f7fe fc2c 	bl	8000f54 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d904      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0bb      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d0ec      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800273a:	2b00      	cmp	r3, #0
 800273c:	d02e      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12a      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002746:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002754:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	0f1b      	lsrs	r3, r3, #28
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	019a      	lsls	r2, r3, #6
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	071b      	lsls	r3, r3, #28
 800277a:	4944      	ldr	r1, [pc, #272]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002782:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002788:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	493d      	ldr	r1, [pc, #244]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d022      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b0:	d11d      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	0e1b      	lsrs	r3, r3, #24
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	0f1b      	lsrs	r3, r3, #28
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	019a      	lsls	r2, r3, #6
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	061b      	lsls	r3, r3, #24
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	4929      	ldr	r1, [pc, #164]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	0e1b      	lsrs	r3, r3, #24
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	019a      	lsls	r2, r3, #6
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	071b      	lsls	r3, r3, #28
 800282e:	4917      	ldr	r1, [pc, #92]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4911      	ldr	r1, [pc, #68]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fb7c 	bl	8000f54 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002860:	f7fe fb78 	bl	8000f54 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e007      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287e:	d1ef      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e040      	b.n	8002924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f9a4 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fbe8 	bl	80030a4 <UART_SetConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fe3e 	bl	8003568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fec5 	bl	80036ac <UART_CheckIdleState>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800292c:	b480      	push	{r7}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293e:	2b20      	cmp	r3, #32
 8002940:	d156      	bne.n	80029f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Transmit_IT+0x22>
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e04f      	b.n	80029f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_UART_Transmit_IT+0x34>
 800295c:	2302      	movs	r3, #2
 800295e:	e048      	b.n	80029f2 <HAL_UART_Transmit_IT+0xc6>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	d107      	bne.n	80029ac <HAL_UART_Transmit_IT+0x80>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_UART_Transmit_IT+0xd4>)
 80029a8:	669a      	str	r2, [r3, #104]	; 0x68
 80029aa:	e002      	b.n	80029b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_UART_Transmit_IT+0xd8>)
 80029b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	613b      	str	r3, [r7, #16]
   return(result);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	69f9      	ldr	r1, [r7, #28]
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e6      	bne.n	80029ba <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	372c      	adds	r7, #44	; 0x2c
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	08003c05 	.word	0x08003c05
 8002a04:	08003b4f 	.word	0x08003b4f

08002a08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d13d      	bne.n	8002a9a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_UART_Receive_IT+0x22>
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e036      	b.n	8002a9c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Receive_IT+0x34>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e02f      	b.n	8002a9c <HAL_UART_Receive_IT+0x94>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d018      	beq.n	8002a8a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	613b      	str	r3, [r7, #16]
   return(result);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	69f9      	ldr	r1, [r7, #28]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e6      	bne.n	8002a58 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 ff19 	bl	80038c8 <UART_Start_Receive_IT>
 8002a96:	4603      	mov	r3, r0
 8002a98:	e000      	b.n	8002a9c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0ba      	sub	sp, #232	; 0xe8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ace:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d115      	bne.n	8002b0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00f      	beq.n	8002b0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 82a4 	beq.w	800304a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      }
      return;
 8002b0a:	e29e      	b.n	800304a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8117 	beq.w	8002d44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <HAL_UART_IRQHandler+0x298>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 810a 	beq.w	8002d44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d011      	beq.n	8002b60 <HAL_UART_IRQHandler+0xbc>
 8002b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d011      	beq.n	8002b90 <HAL_UART_IRQHandler+0xec>
 8002b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d011      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x11c>
 8002b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2204      	movs	r2, #4
 8002bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2208      	movs	r2, #8
 8002bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	f043 0208 	orr.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <HAL_UART_IRQHandler+0x18a>
 8002c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 820a 	beq.w	800304e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d005      	beq.n	8002c86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04f      	beq.n	8002d26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fee8 	bl	8003a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d141      	bne.n	8002d1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1d9      	bne.n	8002c9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_UART_IRQHandler+0x29c>)
 8002cf4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fab7 	bl	800126e <HAL_DMA_Abort_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d10:	4610      	mov	r0, r2
 8002d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00f      	b.n	8002d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9a4 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00b      	b.n	8002d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9a0 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e007      	b.n	8002d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f99c 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d34:	e18b      	b.n	800304e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	bf00      	nop
    return;
 8002d38:	e189      	b.n	800304e <HAL_UART_IRQHandler+0x5aa>
 8002d3a:	bf00      	nop
 8002d3c:	04000120 	.word	0x04000120
 8002d40:	08003b23 	.word	0x08003b23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 8144 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 813d 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8136 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2210      	movs	r2, #16
 8002d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	f040 80b2 	bne.w	8002ee6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 815d 	beq.w	8003052 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f080 8155 	bcs.w	8003052 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	f000 8085 	beq.w	8002eca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1da      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e1      	bne.n	8002e0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3308      	adds	r3, #8
 8002e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e3      	bne.n	8002e46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	f023 0310 	bic.w	r3, r3, #16
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e4      	bne.n	8002e8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f962 	bl	800118e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8ca 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ee4:	e0b5      	b.n	8003052 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80a7 	beq.w	8003056 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a2 	beq.w	8003056 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
 8002f36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e4      	bne.n	8002f12 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	623b      	str	r3, [r7, #32]
   return(result);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f6c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e3      	bne.n	8002f48 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0310 	bic.w	r3, r3, #16
 8002fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e4      	bne.n	8002f92 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f852 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fd4:	e03f      	b.n	8003056 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <HAL_UART_IRQHandler+0x55c>
 8002fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f849 	bl	8003090 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ffe:	e02d      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01c      	beq.n	800305a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
    }
    return;
 8003028:	e017      	b.n	800305a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d012      	beq.n	800305c <HAL_UART_IRQHandler+0x5b8>
 8003036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe3e 	bl	8003cc4 <UART_EndTransmit_IT>
    return;
 8003048:	e008      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
      return;
 800304a:	bf00      	nop
 800304c:	e006      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
    return;
 800304e:	bf00      	nop
 8003050:	e004      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
      return;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
      return;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_UART_IRQHandler+0x5b8>
    return;
 800305a:	bf00      	nop
  }

}
 800305c:	37e8      	adds	r7, #232	; 0xe8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4ba7      	ldr	r3, [pc, #668]	; (800336c <UART_SetConfig+0x2c8>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a95      	ldr	r2, [pc, #596]	; (8003370 <UART_SetConfig+0x2cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d120      	bne.n	8003162 <UART_SetConfig+0xbe>
 8003120:	4b94      	ldr	r3, [pc, #592]	; (8003374 <UART_SetConfig+0x2d0>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b03      	cmp	r3, #3
 800312c:	d816      	bhi.n	800315c <UART_SetConfig+0xb8>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x90>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003145 	.word	0x08003145
 8003138:	08003151 	.word	0x08003151
 800313c:	0800314b 	.word	0x0800314b
 8003140:	08003157 	.word	0x08003157
 8003144:	2301      	movs	r3, #1
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e14f      	b.n	80033ea <UART_SetConfig+0x346>
 800314a:	2302      	movs	r3, #2
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e14c      	b.n	80033ea <UART_SetConfig+0x346>
 8003150:	2304      	movs	r3, #4
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e149      	b.n	80033ea <UART_SetConfig+0x346>
 8003156:	2308      	movs	r3, #8
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e146      	b.n	80033ea <UART_SetConfig+0x346>
 800315c:	2310      	movs	r3, #16
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e143      	b.n	80033ea <UART_SetConfig+0x346>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a84      	ldr	r2, [pc, #528]	; (8003378 <UART_SetConfig+0x2d4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d132      	bne.n	80031d2 <UART_SetConfig+0x12e>
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <UART_SetConfig+0x2d0>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d828      	bhi.n	80031cc <UART_SetConfig+0x128>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <UART_SetConfig+0xdc>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031b5 	.word	0x080031b5
 8003184:	080031cd 	.word	0x080031cd
 8003188:	080031cd 	.word	0x080031cd
 800318c:	080031cd 	.word	0x080031cd
 8003190:	080031c1 	.word	0x080031c1
 8003194:	080031cd 	.word	0x080031cd
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080031cd 	.word	0x080031cd
 80031a0:	080031bb 	.word	0x080031bb
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031cd 	.word	0x080031cd
 80031b0:	080031c7 	.word	0x080031c7
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e117      	b.n	80033ea <UART_SetConfig+0x346>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e114      	b.n	80033ea <UART_SetConfig+0x346>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e111      	b.n	80033ea <UART_SetConfig+0x346>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e10e      	b.n	80033ea <UART_SetConfig+0x346>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e10b      	b.n	80033ea <UART_SetConfig+0x346>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a69      	ldr	r2, [pc, #420]	; (800337c <UART_SetConfig+0x2d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d120      	bne.n	800321e <UART_SetConfig+0x17a>
 80031dc:	4b65      	ldr	r3, [pc, #404]	; (8003374 <UART_SetConfig+0x2d0>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031e6:	2b30      	cmp	r3, #48	; 0x30
 80031e8:	d013      	beq.n	8003212 <UART_SetConfig+0x16e>
 80031ea:	2b30      	cmp	r3, #48	; 0x30
 80031ec:	d814      	bhi.n	8003218 <UART_SetConfig+0x174>
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d009      	beq.n	8003206 <UART_SetConfig+0x162>
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d810      	bhi.n	8003218 <UART_SetConfig+0x174>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x15c>
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d006      	beq.n	800320c <UART_SetConfig+0x168>
 80031fe:	e00b      	b.n	8003218 <UART_SetConfig+0x174>
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e0f1      	b.n	80033ea <UART_SetConfig+0x346>
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e0ee      	b.n	80033ea <UART_SetConfig+0x346>
 800320c:	2304      	movs	r3, #4
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e0eb      	b.n	80033ea <UART_SetConfig+0x346>
 8003212:	2308      	movs	r3, #8
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e0e8      	b.n	80033ea <UART_SetConfig+0x346>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e0e5      	b.n	80033ea <UART_SetConfig+0x346>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a57      	ldr	r2, [pc, #348]	; (8003380 <UART_SetConfig+0x2dc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d120      	bne.n	800326a <UART_SetConfig+0x1c6>
 8003228:	4b52      	ldr	r3, [pc, #328]	; (8003374 <UART_SetConfig+0x2d0>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003232:	2bc0      	cmp	r3, #192	; 0xc0
 8003234:	d013      	beq.n	800325e <UART_SetConfig+0x1ba>
 8003236:	2bc0      	cmp	r3, #192	; 0xc0
 8003238:	d814      	bhi.n	8003264 <UART_SetConfig+0x1c0>
 800323a:	2b80      	cmp	r3, #128	; 0x80
 800323c:	d009      	beq.n	8003252 <UART_SetConfig+0x1ae>
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d810      	bhi.n	8003264 <UART_SetConfig+0x1c0>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <UART_SetConfig+0x1a8>
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d006      	beq.n	8003258 <UART_SetConfig+0x1b4>
 800324a:	e00b      	b.n	8003264 <UART_SetConfig+0x1c0>
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e0cb      	b.n	80033ea <UART_SetConfig+0x346>
 8003252:	2302      	movs	r3, #2
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e0c8      	b.n	80033ea <UART_SetConfig+0x346>
 8003258:	2304      	movs	r3, #4
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e0c5      	b.n	80033ea <UART_SetConfig+0x346>
 800325e:	2308      	movs	r3, #8
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e0c2      	b.n	80033ea <UART_SetConfig+0x346>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e0bf      	b.n	80033ea <UART_SetConfig+0x346>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a45      	ldr	r2, [pc, #276]	; (8003384 <UART_SetConfig+0x2e0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d125      	bne.n	80032c0 <UART_SetConfig+0x21c>
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <UART_SetConfig+0x2d0>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003282:	d017      	beq.n	80032b4 <UART_SetConfig+0x210>
 8003284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003288:	d817      	bhi.n	80032ba <UART_SetConfig+0x216>
 800328a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328e:	d00b      	beq.n	80032a8 <UART_SetConfig+0x204>
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d811      	bhi.n	80032ba <UART_SetConfig+0x216>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <UART_SetConfig+0x1fe>
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d006      	beq.n	80032ae <UART_SetConfig+0x20a>
 80032a0:	e00b      	b.n	80032ba <UART_SetConfig+0x216>
 80032a2:	2300      	movs	r3, #0
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e0a0      	b.n	80033ea <UART_SetConfig+0x346>
 80032a8:	2302      	movs	r3, #2
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e09d      	b.n	80033ea <UART_SetConfig+0x346>
 80032ae:	2304      	movs	r3, #4
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e09a      	b.n	80033ea <UART_SetConfig+0x346>
 80032b4:	2308      	movs	r3, #8
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e097      	b.n	80033ea <UART_SetConfig+0x346>
 80032ba:	2310      	movs	r3, #16
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e094      	b.n	80033ea <UART_SetConfig+0x346>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a30      	ldr	r2, [pc, #192]	; (8003388 <UART_SetConfig+0x2e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d125      	bne.n	8003316 <UART_SetConfig+0x272>
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <UART_SetConfig+0x2d0>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d8:	d017      	beq.n	800330a <UART_SetConfig+0x266>
 80032da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032de:	d817      	bhi.n	8003310 <UART_SetConfig+0x26c>
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d00b      	beq.n	80032fe <UART_SetConfig+0x25a>
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d811      	bhi.n	8003310 <UART_SetConfig+0x26c>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <UART_SetConfig+0x254>
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d006      	beq.n	8003304 <UART_SetConfig+0x260>
 80032f6:	e00b      	b.n	8003310 <UART_SetConfig+0x26c>
 80032f8:	2301      	movs	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e075      	b.n	80033ea <UART_SetConfig+0x346>
 80032fe:	2302      	movs	r3, #2
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e072      	b.n	80033ea <UART_SetConfig+0x346>
 8003304:	2304      	movs	r3, #4
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e06f      	b.n	80033ea <UART_SetConfig+0x346>
 800330a:	2308      	movs	r3, #8
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e06c      	b.n	80033ea <UART_SetConfig+0x346>
 8003310:	2310      	movs	r3, #16
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e069      	b.n	80033ea <UART_SetConfig+0x346>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <UART_SetConfig+0x2e8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d137      	bne.n	8003390 <UART_SetConfig+0x2ec>
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <UART_SetConfig+0x2d0>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800332a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800332e:	d017      	beq.n	8003360 <UART_SetConfig+0x2bc>
 8003330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003334:	d817      	bhi.n	8003366 <UART_SetConfig+0x2c2>
 8003336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333a:	d00b      	beq.n	8003354 <UART_SetConfig+0x2b0>
 800333c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003340:	d811      	bhi.n	8003366 <UART_SetConfig+0x2c2>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <UART_SetConfig+0x2aa>
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d006      	beq.n	800335a <UART_SetConfig+0x2b6>
 800334c:	e00b      	b.n	8003366 <UART_SetConfig+0x2c2>
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e04a      	b.n	80033ea <UART_SetConfig+0x346>
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e047      	b.n	80033ea <UART_SetConfig+0x346>
 800335a:	2304      	movs	r3, #4
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e044      	b.n	80033ea <UART_SetConfig+0x346>
 8003360:	2308      	movs	r3, #8
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e041      	b.n	80033ea <UART_SetConfig+0x346>
 8003366:	2310      	movs	r3, #16
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e03e      	b.n	80033ea <UART_SetConfig+0x346>
 800336c:	efff69f3 	.word	0xefff69f3
 8003370:	40011000 	.word	0x40011000
 8003374:	40023800 	.word	0x40023800
 8003378:	40004400 	.word	0x40004400
 800337c:	40004800 	.word	0x40004800
 8003380:	40004c00 	.word	0x40004c00
 8003384:	40005000 	.word	0x40005000
 8003388:	40011400 	.word	0x40011400
 800338c:	40007800 	.word	0x40007800
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a71      	ldr	r2, [pc, #452]	; (800355c <UART_SetConfig+0x4b8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d125      	bne.n	80033e6 <UART_SetConfig+0x342>
 800339a:	4b71      	ldr	r3, [pc, #452]	; (8003560 <UART_SetConfig+0x4bc>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033a8:	d017      	beq.n	80033da <UART_SetConfig+0x336>
 80033aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ae:	d817      	bhi.n	80033e0 <UART_SetConfig+0x33c>
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b4:	d00b      	beq.n	80033ce <UART_SetConfig+0x32a>
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	d811      	bhi.n	80033e0 <UART_SetConfig+0x33c>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <UART_SetConfig+0x324>
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d006      	beq.n	80033d4 <UART_SetConfig+0x330>
 80033c6:	e00b      	b.n	80033e0 <UART_SetConfig+0x33c>
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e00d      	b.n	80033ea <UART_SetConfig+0x346>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e00a      	b.n	80033ea <UART_SetConfig+0x346>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e007      	b.n	80033ea <UART_SetConfig+0x346>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e004      	b.n	80033ea <UART_SetConfig+0x346>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e001      	b.n	80033ea <UART_SetConfig+0x346>
 80033e6:	2310      	movs	r3, #16
 80033e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d15a      	bne.n	80034aa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d827      	bhi.n	800344a <UART_SetConfig+0x3a6>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0x35c>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003425 	.word	0x08003425
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344b 	.word	0x0800344b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800344b 	.word	0x0800344b
 8003418:	0800344b 	.word	0x0800344b
 800341c:	0800344b 	.word	0x0800344b
 8003420:	08003443 	.word	0x08003443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7fe fde4 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003428:	61b8      	str	r0, [r7, #24]
        break;
 800342a:	e013      	b.n	8003454 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7fe fdf4 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8003430:	61b8      	str	r0, [r7, #24]
        break;
 8003432:	e00f      	b.n	8003454 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <UART_SetConfig+0x4c0>)
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e00c      	b.n	8003454 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343a:	f7fe fceb 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 800343e:	61b8      	str	r0, [r7, #24]
        break;
 8003440:	e008      	b.n	8003454 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e004      	b.n	8003454 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	77bb      	strb	r3, [r7, #30]
        break;
 8003452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d074      	beq.n	8003544 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	005a      	lsls	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	d916      	bls.n	80034a4 <UART_SetConfig+0x400>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d212      	bcs.n	80034a4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f023 030f 	bic.w	r3, r3, #15
 8003486:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	b29b      	uxth	r3, r3
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	b29a      	uxth	r2, r3
 8003494:	89fb      	ldrh	r3, [r7, #14]
 8003496:	4313      	orrs	r3, r2
 8003498:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	89fa      	ldrh	r2, [r7, #14]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	e04f      	b.n	8003544 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77bb      	strb	r3, [r7, #30]
 80034a8:	e04c      	b.n	8003544 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d828      	bhi.n	8003502 <UART_SetConfig+0x45e>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <UART_SetConfig+0x414>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034dd 	.word	0x080034dd
 80034bc:	080034e5 	.word	0x080034e5
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	08003503 	.word	0x08003503
 80034c8:	080034f3 	.word	0x080034f3
 80034cc:	08003503 	.word	0x08003503
 80034d0:	08003503 	.word	0x08003503
 80034d4:	08003503 	.word	0x08003503
 80034d8:	080034fb 	.word	0x080034fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7fe fd88 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80034e0:	61b8      	str	r0, [r7, #24]
        break;
 80034e2:	e013      	b.n	800350c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e4:	f7fe fd98 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 80034e8:	61b8      	str	r0, [r7, #24]
        break;
 80034ea:	e00f      	b.n	800350c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <UART_SetConfig+0x4c0>)
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e00c      	b.n	800350c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f2:	f7fe fc8f 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80034f6:	61b8      	str	r0, [r7, #24]
        break;
 80034f8:	e008      	b.n	800350c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fe:	61bb      	str	r3, [r7, #24]
        break;
 8003500:	e004      	b.n	800350c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	77bb      	strb	r3, [r7, #30]
        break;
 800350a:	bf00      	nop
    }

    if (pclk != 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d018      	beq.n	8003544 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	085a      	lsrs	r2, r3, #1
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	441a      	add	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b0f      	cmp	r3, #15
 800352a:	d909      	bls.n	8003540 <UART_SetConfig+0x49c>
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003532:	d205      	bcs.n	8003540 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e001      	b.n	8003544 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003550:	7fbb      	ldrb	r3, [r7, #30]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40007c00 	.word	0x40007c00
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400

08003568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01a      	beq.n	800367e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d10a      	bne.n	800367e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036bc:	f7fd fc4a 	bl	8000f54 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d10e      	bne.n	80036ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f82d 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e023      	b.n	8003736 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d10e      	bne.n	800371a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f817 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00d      	b.n	8003736 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b09c      	sub	sp, #112	; 0x70
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	e0a5      	b.n	800389c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	f000 80a1 	beq.w	800389c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd fbfb 	bl	8000f54 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <UART_WaitOnFlagUntilTimeout+0x32>
 800376a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13e      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800377e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003784:	667b      	str	r3, [r7, #100]	; 0x64
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003790:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e6      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3308      	adds	r3, #8
 80037c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e067      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d04f      	beq.n	800389c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380a:	d147      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003814:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e6      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3308      	adds	r3, #8
 800384e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	613b      	str	r3, [r7, #16]
   return(result);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003868:	623a      	str	r2, [r7, #32]
 800386a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	6a3a      	ldr	r2, [r7, #32]
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	61bb      	str	r3, [r7, #24]
   return(result);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e010      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f43f af4a 	beq.w	8003750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3770      	adds	r7, #112	; 0x70
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b097      	sub	sp, #92	; 0x5c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d10e      	bne.n	800391a <UART_Start_Receive_IT+0x52>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <UART_Start_Receive_IT+0x48>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f240 12ff 	movw	r2, #511	; 0x1ff
 800390a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800390e:	e02d      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	22ff      	movs	r2, #255	; 0xff
 8003914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003918:	e028      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <UART_Start_Receive_IT+0x76>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <UART_Start_Receive_IT+0x6c>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003932:	e01b      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	227f      	movs	r2, #127	; 0x7f
 8003938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800393c:	e016      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003946:	d10d      	bne.n	8003964 <UART_Start_Receive_IT+0x9c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <UART_Start_Receive_IT+0x92>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	227f      	movs	r2, #127	; 0x7f
 8003954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003958:	e008      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	223f      	movs	r2, #63	; 0x3f
 800395e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003962:	e003      	b.n	800396c <UART_Start_Receive_IT+0xa4>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2222      	movs	r2, #34	; 0x22
 8003978:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	657b      	str	r3, [r7, #84]	; 0x54
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800399a:	64ba      	str	r2, [r7, #72]	; 0x48
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b6:	d107      	bne.n	80039c8 <UART_Start_Receive_IT+0x100>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <UART_Start_Receive_IT+0x18c>)
 80039c4:	665a      	str	r2, [r3, #100]	; 0x64
 80039c6:	e002      	b.n	80039ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <UART_Start_Receive_IT+0x190>)
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d019      	beq.n	8003a12 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e6      	bne.n	80039de <UART_Start_Receive_IT+0x116>
 8003a10:	e018      	b.n	8003a44 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	653b      	str	r3, [r7, #80]	; 0x50
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	375c      	adds	r7, #92	; 0x5c
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	08003e75 	.word	0x08003e75
 8003a58:	08003d19 	.word	0x08003d19

08003a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b095      	sub	sp, #84	; 0x54
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
 8003a84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d118      	bne.n	8003b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	613b      	str	r3, [r7, #16]
   return(result);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e6      	bne.n	8003ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b16:	bf00      	nop
 8003b18:	3754      	adds	r7, #84	; 0x54
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fa8f 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b08f      	sub	sp, #60	; 0x3c
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	2b21      	cmp	r3, #33	; 0x21
 8003b5c:	d14c      	bne.n	8003bf8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d132      	bne.n	8003bd0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e6      	bne.n	8003b6a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6979      	ldr	r1, [r7, #20]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e6      	bne.n	8003b9c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003bce:	e013      	b.n	8003bf8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003bf8:	bf00      	nop
 8003bfa:	373c      	adds	r7, #60	; 0x3c
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b091      	sub	sp, #68	; 0x44
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c10:	2b21      	cmp	r3, #33	; 0x21
 8003c12:	d151      	bne.n	8003cb8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d132      	bne.n	8003c86 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003c84:	e018      	b.n	8003cb8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003cb8:	bf00      	nop
 8003cba:	3744      	adds	r7, #68	; 0x44
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6979      	ldr	r1, [r7, #20]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e6      	bne.n	8003ccc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f874 	bl	8000df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b096      	sub	sp, #88	; 0x58
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2e:	2b22      	cmp	r3, #34	; 0x22
 8003d30:	f040 8094 	bne.w	8003e5c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d3e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d42:	b2d9      	uxtb	r1, r3
 8003d44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	400a      	ands	r2, r1
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d177      	bne.n	8003e6c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d90:	653b      	str	r3, [r7, #80]	; 0x50
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e6      	bne.n	8003d7c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dce:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d12e      	bne.n	8003e54 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
 8003e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	617b      	str	r3, [r7, #20]
   return(result);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d103      	bne.n	8003e44 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2210      	movs	r2, #16
 8003e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff f913 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e52:	e00b      	b.n	8003e6c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fc ff9f 	bl	8000d98 <HAL_UART_RxCpltCallback>
}
 8003e5a:	e007      	b.n	8003e6c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	619a      	str	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	3758      	adds	r7, #88	; 0x58
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b096      	sub	sp, #88	; 0x58
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	f040 8094 	bne.w	8003fb8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ea0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ea4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d177      	bne.n	8003fc8 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e6      	bne.n	8003ed8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d12e      	bne.n	8003fb0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 0310 	bic.w	r3, r3, #16
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d103      	bne.n	8003fa0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff f865 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fae:	e00b      	b.n	8003fc8 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc fef1 	bl	8000d98 <HAL_UART_RxCpltCallback>
}
 8003fb6:	e007      	b.n	8003fc8 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	619a      	str	r2, [r3, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	3758      	adds	r7, #88	; 0x58
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <__errno>:
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <__errno+0x8>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	2000000c 	.word	0x2000000c

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4d0d      	ldr	r5, [pc, #52]	; (8004014 <__libc_init_array+0x38>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <__libc_init_array+0x3c>)
 8003fe2:	1b64      	subs	r4, r4, r5
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	42a6      	cmp	r6, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	4d0b      	ldr	r5, [pc, #44]	; (800401c <__libc_init_array+0x40>)
 8003fee:	4c0c      	ldr	r4, [pc, #48]	; (8004020 <__libc_init_array+0x44>)
 8003ff0:	f000 fe78 	bl	8004ce4 <_init>
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	2600      	movs	r6, #0
 8003ffa:	42a6      	cmp	r6, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	f855 3b04 	ldr.w	r3, [r5], #4
 8004004:	4798      	blx	r3
 8004006:	3601      	adds	r6, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	f855 3b04 	ldr.w	r3, [r5], #4
 800400e:	4798      	blx	r3
 8004010:	3601      	adds	r6, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08004fec 	.word	0x08004fec
 8004018:	08004fec 	.word	0x08004fec
 800401c:	08004fec 	.word	0x08004fec
 8004020:	08004ff0 	.word	0x08004ff0

08004024 <__itoa>:
 8004024:	1e93      	subs	r3, r2, #2
 8004026:	2b22      	cmp	r3, #34	; 0x22
 8004028:	b510      	push	{r4, lr}
 800402a:	460c      	mov	r4, r1
 800402c:	d904      	bls.n	8004038 <__itoa+0x14>
 800402e:	2300      	movs	r3, #0
 8004030:	700b      	strb	r3, [r1, #0]
 8004032:	461c      	mov	r4, r3
 8004034:	4620      	mov	r0, r4
 8004036:	bd10      	pop	{r4, pc}
 8004038:	2a0a      	cmp	r2, #10
 800403a:	d109      	bne.n	8004050 <__itoa+0x2c>
 800403c:	2800      	cmp	r0, #0
 800403e:	da07      	bge.n	8004050 <__itoa+0x2c>
 8004040:	232d      	movs	r3, #45	; 0x2d
 8004042:	700b      	strb	r3, [r1, #0]
 8004044:	4240      	negs	r0, r0
 8004046:	2101      	movs	r1, #1
 8004048:	4421      	add	r1, r4
 800404a:	f000 f86f 	bl	800412c <__utoa>
 800404e:	e7f1      	b.n	8004034 <__itoa+0x10>
 8004050:	2100      	movs	r1, #0
 8004052:	e7f9      	b.n	8004048 <__itoa+0x24>

08004054 <itoa>:
 8004054:	f7ff bfe6 	b.w	8004024 <__itoa>

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <siscanf>:
 8004068:	b40e      	push	{r1, r2, r3}
 800406a:	b510      	push	{r4, lr}
 800406c:	b09f      	sub	sp, #124	; 0x7c
 800406e:	ac21      	add	r4, sp, #132	; 0x84
 8004070:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004074:	f854 2b04 	ldr.w	r2, [r4], #4
 8004078:	9201      	str	r2, [sp, #4]
 800407a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800407e:	9004      	str	r0, [sp, #16]
 8004080:	9008      	str	r0, [sp, #32]
 8004082:	f7fc f8dd 	bl	8000240 <strlen>
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <siscanf+0x50>)
 8004088:	9005      	str	r0, [sp, #20]
 800408a:	9009      	str	r0, [sp, #36]	; 0x24
 800408c:	930d      	str	r3, [sp, #52]	; 0x34
 800408e:	480b      	ldr	r0, [pc, #44]	; (80040bc <siscanf+0x54>)
 8004090:	9a01      	ldr	r2, [sp, #4]
 8004092:	6800      	ldr	r0, [r0, #0]
 8004094:	9403      	str	r4, [sp, #12]
 8004096:	2300      	movs	r3, #0
 8004098:	9311      	str	r3, [sp, #68]	; 0x44
 800409a:	9316      	str	r3, [sp, #88]	; 0x58
 800409c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80040a4:	a904      	add	r1, sp, #16
 80040a6:	4623      	mov	r3, r4
 80040a8:	f000 f8dc 	bl	8004264 <__ssvfiscanf_r>
 80040ac:	b01f      	add	sp, #124	; 0x7c
 80040ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b2:	b003      	add	sp, #12
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	2000000c 	.word	0x2000000c

080040c0 <__seofread>:
 80040c0:	2000      	movs	r0, #0
 80040c2:	4770      	bx	lr

080040c4 <strcat>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	4602      	mov	r2, r0
 80040c8:	7814      	ldrb	r4, [r2, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	3201      	adds	r2, #1
 80040ce:	2c00      	cmp	r4, #0
 80040d0:	d1fa      	bne.n	80040c8 <strcat+0x4>
 80040d2:	3b01      	subs	r3, #1
 80040d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d1f9      	bne.n	80040d4 <strcat+0x10>
 80040e0:	bd10      	pop	{r4, pc}

080040e2 <strncmp>:
 80040e2:	b510      	push	{r4, lr}
 80040e4:	b16a      	cbz	r2, 8004102 <strncmp+0x20>
 80040e6:	3901      	subs	r1, #1
 80040e8:	1884      	adds	r4, r0, r2
 80040ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80040ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d103      	bne.n	80040fe <strncmp+0x1c>
 80040f6:	42a0      	cmp	r0, r4
 80040f8:	d001      	beq.n	80040fe <strncmp+0x1c>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f5      	bne.n	80040ea <strncmp+0x8>
 80040fe:	1a98      	subs	r0, r3, r2
 8004100:	bd10      	pop	{r4, pc}
 8004102:	4610      	mov	r0, r2
 8004104:	e7fc      	b.n	8004100 <strncmp+0x1e>

08004106 <strncpy>:
 8004106:	b510      	push	{r4, lr}
 8004108:	3901      	subs	r1, #1
 800410a:	4603      	mov	r3, r0
 800410c:	b132      	cbz	r2, 800411c <strncpy+0x16>
 800410e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004112:	f803 4b01 	strb.w	r4, [r3], #1
 8004116:	3a01      	subs	r2, #1
 8004118:	2c00      	cmp	r4, #0
 800411a:	d1f7      	bne.n	800410c <strncpy+0x6>
 800411c:	441a      	add	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <strncpy+0x20>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <strncpy+0x1a>

0800412c <__utoa>:
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	4c1f      	ldr	r4, [pc, #124]	; (80041ac <__utoa+0x80>)
 8004130:	b08b      	sub	sp, #44	; 0x2c
 8004132:	4605      	mov	r5, r0
 8004134:	460b      	mov	r3, r1
 8004136:	466e      	mov	r6, sp
 8004138:	f104 0c20 	add.w	ip, r4, #32
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	6861      	ldr	r1, [r4, #4]
 8004140:	4637      	mov	r7, r6
 8004142:	c703      	stmia	r7!, {r0, r1}
 8004144:	3408      	adds	r4, #8
 8004146:	4564      	cmp	r4, ip
 8004148:	463e      	mov	r6, r7
 800414a:	d1f7      	bne.n	800413c <__utoa+0x10>
 800414c:	7921      	ldrb	r1, [r4, #4]
 800414e:	7139      	strb	r1, [r7, #4]
 8004150:	1e91      	subs	r1, r2, #2
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	6038      	str	r0, [r7, #0]
 8004156:	2922      	cmp	r1, #34	; 0x22
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	d904      	bls.n	8004168 <__utoa+0x3c>
 800415e:	7019      	strb	r1, [r3, #0]
 8004160:	460b      	mov	r3, r1
 8004162:	4618      	mov	r0, r3
 8004164:	b00b      	add	sp, #44	; 0x2c
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004168:	1e58      	subs	r0, r3, #1
 800416a:	4684      	mov	ip, r0
 800416c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004170:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004174:	fb02 5617 	mls	r6, r2, r7, r5
 8004178:	4476      	add	r6, lr
 800417a:	460c      	mov	r4, r1
 800417c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004180:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004184:	462e      	mov	r6, r5
 8004186:	42b2      	cmp	r2, r6
 8004188:	f101 0101 	add.w	r1, r1, #1
 800418c:	463d      	mov	r5, r7
 800418e:	d9ed      	bls.n	800416c <__utoa+0x40>
 8004190:	2200      	movs	r2, #0
 8004192:	545a      	strb	r2, [r3, r1]
 8004194:	1919      	adds	r1, r3, r4
 8004196:	1aa5      	subs	r5, r4, r2
 8004198:	42aa      	cmp	r2, r5
 800419a:	dae2      	bge.n	8004162 <__utoa+0x36>
 800419c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80041a0:	780e      	ldrb	r6, [r1, #0]
 80041a2:	7006      	strb	r6, [r0, #0]
 80041a4:	3201      	adds	r2, #1
 80041a6:	f801 5901 	strb.w	r5, [r1], #-1
 80041aa:	e7f4      	b.n	8004196 <__utoa+0x6a>
 80041ac:	08004e3c 	.word	0x08004e3c

080041b0 <_sungetc_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	1c4b      	adds	r3, r1, #1
 80041b4:	4614      	mov	r4, r2
 80041b6:	d103      	bne.n	80041c0 <_sungetc_r+0x10>
 80041b8:	f04f 35ff 	mov.w	r5, #4294967295
 80041bc:	4628      	mov	r0, r5
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	8993      	ldrh	r3, [r2, #12]
 80041c2:	f023 0320 	bic.w	r3, r3, #32
 80041c6:	8193      	strh	r3, [r2, #12]
 80041c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ca:	6852      	ldr	r2, [r2, #4]
 80041cc:	b2cd      	uxtb	r5, r1
 80041ce:	b18b      	cbz	r3, 80041f4 <_sungetc_r+0x44>
 80041d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d2:	4293      	cmp	r3, r2
 80041d4:	dd08      	ble.n	80041e8 <_sungetc_r+0x38>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	1e5a      	subs	r2, r3, #1
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	3301      	adds	r3, #1
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	e7e9      	b.n	80041bc <_sungetc_r+0xc>
 80041e8:	4621      	mov	r1, r4
 80041ea:	f000 fc3d 	bl	8004a68 <__submore>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0f1      	beq.n	80041d6 <_sungetc_r+0x26>
 80041f2:	e7e1      	b.n	80041b8 <_sungetc_r+0x8>
 80041f4:	6921      	ldr	r1, [r4, #16]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	b151      	cbz	r1, 8004210 <_sungetc_r+0x60>
 80041fa:	4299      	cmp	r1, r3
 80041fc:	d208      	bcs.n	8004210 <_sungetc_r+0x60>
 80041fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004202:	42a9      	cmp	r1, r5
 8004204:	d104      	bne.n	8004210 <_sungetc_r+0x60>
 8004206:	3b01      	subs	r3, #1
 8004208:	3201      	adds	r2, #1
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	6062      	str	r2, [r4, #4]
 800420e:	e7d5      	b.n	80041bc <_sungetc_r+0xc>
 8004210:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004218:	6363      	str	r3, [r4, #52]	; 0x34
 800421a:	2303      	movs	r3, #3
 800421c:	63a3      	str	r3, [r4, #56]	; 0x38
 800421e:	4623      	mov	r3, r4
 8004220:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	2301      	movs	r3, #1
 8004228:	e7dc      	b.n	80041e4 <_sungetc_r+0x34>

0800422a <__ssrefill_r>:
 800422a:	b510      	push	{r4, lr}
 800422c:	460c      	mov	r4, r1
 800422e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004230:	b169      	cbz	r1, 800424e <__ssrefill_r+0x24>
 8004232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004236:	4299      	cmp	r1, r3
 8004238:	d001      	beq.n	800423e <__ssrefill_r+0x14>
 800423a:	f000 fc5f 	bl	8004afc <_free_r>
 800423e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	2000      	movs	r0, #0
 8004244:	6360      	str	r0, [r4, #52]	; 0x34
 8004246:	b113      	cbz	r3, 800424e <__ssrefill_r+0x24>
 8004248:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	bd10      	pop	{r4, pc}
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	f043 0320 	orr.w	r3, r3, #32
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	f04f 30ff 	mov.w	r0, #4294967295
 8004262:	e7f3      	b.n	800424c <__ssrefill_r+0x22>

08004264 <__ssvfiscanf_r>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	460c      	mov	r4, r1
 800426a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800426e:	2100      	movs	r1, #0
 8004270:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004274:	49b2      	ldr	r1, [pc, #712]	; (8004540 <__ssvfiscanf_r+0x2dc>)
 8004276:	91a0      	str	r1, [sp, #640]	; 0x280
 8004278:	f10d 0804 	add.w	r8, sp, #4
 800427c:	49b1      	ldr	r1, [pc, #708]	; (8004544 <__ssvfiscanf_r+0x2e0>)
 800427e:	4fb2      	ldr	r7, [pc, #712]	; (8004548 <__ssvfiscanf_r+0x2e4>)
 8004280:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800454c <__ssvfiscanf_r+0x2e8>
 8004284:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004288:	4606      	mov	r6, r0
 800428a:	91a1      	str	r1, [sp, #644]	; 0x284
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	f892 a000 	ldrb.w	sl, [r2]
 8004292:	f1ba 0f00 	cmp.w	sl, #0
 8004296:	f000 8151 	beq.w	800453c <__ssvfiscanf_r+0x2d8>
 800429a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800429e:	f013 0308 	ands.w	r3, r3, #8
 80042a2:	f102 0501 	add.w	r5, r2, #1
 80042a6:	d019      	beq.n	80042dc <__ssvfiscanf_r+0x78>
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dd0f      	ble.n	80042ce <__ssvfiscanf_r+0x6a>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	5cba      	ldrb	r2, [r7, r2]
 80042b4:	0712      	lsls	r2, r2, #28
 80042b6:	d401      	bmi.n	80042bc <__ssvfiscanf_r+0x58>
 80042b8:	462a      	mov	r2, r5
 80042ba:	e7e8      	b.n	800428e <__ssvfiscanf_r+0x2a>
 80042bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042be:	3201      	adds	r2, #1
 80042c0:	9245      	str	r2, [sp, #276]	; 0x114
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	3301      	adds	r3, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	6062      	str	r2, [r4, #4]
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	e7ec      	b.n	80042a8 <__ssvfiscanf_r+0x44>
 80042ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042d0:	4621      	mov	r1, r4
 80042d2:	4630      	mov	r0, r6
 80042d4:	4798      	blx	r3
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d0e9      	beq.n	80042ae <__ssvfiscanf_r+0x4a>
 80042da:	e7ed      	b.n	80042b8 <__ssvfiscanf_r+0x54>
 80042dc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80042e0:	f040 8083 	bne.w	80043ea <__ssvfiscanf_r+0x186>
 80042e4:	9341      	str	r3, [sp, #260]	; 0x104
 80042e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80042e8:	7853      	ldrb	r3, [r2, #1]
 80042ea:	2b2a      	cmp	r3, #42	; 0x2a
 80042ec:	bf02      	ittt	eq
 80042ee:	2310      	moveq	r3, #16
 80042f0:	1c95      	addeq	r5, r2, #2
 80042f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80042f4:	220a      	movs	r2, #10
 80042f6:	46ab      	mov	fp, r5
 80042f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80042fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004300:	2b09      	cmp	r3, #9
 8004302:	d91d      	bls.n	8004340 <__ssvfiscanf_r+0xdc>
 8004304:	4891      	ldr	r0, [pc, #580]	; (800454c <__ssvfiscanf_r+0x2e8>)
 8004306:	2203      	movs	r2, #3
 8004308:	f7fb ffa2 	bl	8000250 <memchr>
 800430c:	b140      	cbz	r0, 8004320 <__ssvfiscanf_r+0xbc>
 800430e:	2301      	movs	r3, #1
 8004310:	eba0 0009 	sub.w	r0, r0, r9
 8004314:	fa03 f000 	lsl.w	r0, r3, r0
 8004318:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800431a:	4318      	orrs	r0, r3
 800431c:	9041      	str	r0, [sp, #260]	; 0x104
 800431e:	465d      	mov	r5, fp
 8004320:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004324:	2b78      	cmp	r3, #120	; 0x78
 8004326:	d806      	bhi.n	8004336 <__ssvfiscanf_r+0xd2>
 8004328:	2b57      	cmp	r3, #87	; 0x57
 800432a:	d810      	bhi.n	800434e <__ssvfiscanf_r+0xea>
 800432c:	2b25      	cmp	r3, #37	; 0x25
 800432e:	d05c      	beq.n	80043ea <__ssvfiscanf_r+0x186>
 8004330:	d856      	bhi.n	80043e0 <__ssvfiscanf_r+0x17c>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d074      	beq.n	8004420 <__ssvfiscanf_r+0x1bc>
 8004336:	2303      	movs	r3, #3
 8004338:	9347      	str	r3, [sp, #284]	; 0x11c
 800433a:	230a      	movs	r3, #10
 800433c:	9342      	str	r3, [sp, #264]	; 0x108
 800433e:	e081      	b.n	8004444 <__ssvfiscanf_r+0x1e0>
 8004340:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004342:	fb02 1303 	mla	r3, r2, r3, r1
 8004346:	3b30      	subs	r3, #48	; 0x30
 8004348:	9343      	str	r3, [sp, #268]	; 0x10c
 800434a:	465d      	mov	r5, fp
 800434c:	e7d3      	b.n	80042f6 <__ssvfiscanf_r+0x92>
 800434e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004352:	2a20      	cmp	r2, #32
 8004354:	d8ef      	bhi.n	8004336 <__ssvfiscanf_r+0xd2>
 8004356:	a101      	add	r1, pc, #4	; (adr r1, 800435c <__ssvfiscanf_r+0xf8>)
 8004358:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800435c:	0800442f 	.word	0x0800442f
 8004360:	08004337 	.word	0x08004337
 8004364:	08004337 	.word	0x08004337
 8004368:	0800448d 	.word	0x0800448d
 800436c:	08004337 	.word	0x08004337
 8004370:	08004337 	.word	0x08004337
 8004374:	08004337 	.word	0x08004337
 8004378:	08004337 	.word	0x08004337
 800437c:	08004337 	.word	0x08004337
 8004380:	08004337 	.word	0x08004337
 8004384:	08004337 	.word	0x08004337
 8004388:	080044a3 	.word	0x080044a3
 800438c:	08004479 	.word	0x08004479
 8004390:	080043e7 	.word	0x080043e7
 8004394:	080043e7 	.word	0x080043e7
 8004398:	080043e7 	.word	0x080043e7
 800439c:	08004337 	.word	0x08004337
 80043a0:	0800447d 	.word	0x0800447d
 80043a4:	08004337 	.word	0x08004337
 80043a8:	08004337 	.word	0x08004337
 80043ac:	08004337 	.word	0x08004337
 80043b0:	08004337 	.word	0x08004337
 80043b4:	080044b3 	.word	0x080044b3
 80043b8:	08004485 	.word	0x08004485
 80043bc:	08004427 	.word	0x08004427
 80043c0:	08004337 	.word	0x08004337
 80043c4:	08004337 	.word	0x08004337
 80043c8:	080044af 	.word	0x080044af
 80043cc:	08004337 	.word	0x08004337
 80043d0:	08004479 	.word	0x08004479
 80043d4:	08004337 	.word	0x08004337
 80043d8:	08004337 	.word	0x08004337
 80043dc:	0800442f 	.word	0x0800442f
 80043e0:	3b45      	subs	r3, #69	; 0x45
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d8a7      	bhi.n	8004336 <__ssvfiscanf_r+0xd2>
 80043e6:	2305      	movs	r3, #5
 80043e8:	e02b      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dd0d      	ble.n	800440c <__ssvfiscanf_r+0x1a8>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	4552      	cmp	r2, sl
 80043f6:	f040 80a1 	bne.w	800453c <__ssvfiscanf_r+0x2d8>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6862      	ldr	r2, [r4, #4]
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004402:	3a01      	subs	r2, #1
 8004404:	3301      	adds	r3, #1
 8004406:	6062      	str	r2, [r4, #4]
 8004408:	9345      	str	r3, [sp, #276]	; 0x114
 800440a:	e755      	b.n	80042b8 <__ssvfiscanf_r+0x54>
 800440c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800440e:	4621      	mov	r1, r4
 8004410:	4630      	mov	r0, r6
 8004412:	4798      	blx	r3
 8004414:	2800      	cmp	r0, #0
 8004416:	d0eb      	beq.n	80043f0 <__ssvfiscanf_r+0x18c>
 8004418:	9844      	ldr	r0, [sp, #272]	; 0x110
 800441a:	2800      	cmp	r0, #0
 800441c:	f040 8084 	bne.w	8004528 <__ssvfiscanf_r+0x2c4>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	e086      	b.n	8004534 <__ssvfiscanf_r+0x2d0>
 8004426:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004428:	f042 0220 	orr.w	r2, r2, #32
 800442c:	9241      	str	r2, [sp, #260]	; 0x104
 800442e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	9241      	str	r2, [sp, #260]	; 0x104
 8004436:	2210      	movs	r2, #16
 8004438:	2b6f      	cmp	r3, #111	; 0x6f
 800443a:	9242      	str	r2, [sp, #264]	; 0x108
 800443c:	bf34      	ite	cc
 800443e:	2303      	movcc	r3, #3
 8004440:	2304      	movcs	r3, #4
 8004442:	9347      	str	r3, [sp, #284]	; 0x11c
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd41      	ble.n	80044ce <__ssvfiscanf_r+0x26a>
 800444a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800444c:	0659      	lsls	r1, r3, #25
 800444e:	d404      	bmi.n	800445a <__ssvfiscanf_r+0x1f6>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	781a      	ldrb	r2, [r3, #0]
 8004454:	5cba      	ldrb	r2, [r7, r2]
 8004456:	0712      	lsls	r2, r2, #28
 8004458:	d440      	bmi.n	80044dc <__ssvfiscanf_r+0x278>
 800445a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800445c:	2b02      	cmp	r3, #2
 800445e:	dc4f      	bgt.n	8004500 <__ssvfiscanf_r+0x29c>
 8004460:	466b      	mov	r3, sp
 8004462:	4622      	mov	r2, r4
 8004464:	a941      	add	r1, sp, #260	; 0x104
 8004466:	4630      	mov	r0, r6
 8004468:	f000 f874 	bl	8004554 <_scanf_chars>
 800446c:	2801      	cmp	r0, #1
 800446e:	d065      	beq.n	800453c <__ssvfiscanf_r+0x2d8>
 8004470:	2802      	cmp	r0, #2
 8004472:	f47f af21 	bne.w	80042b8 <__ssvfiscanf_r+0x54>
 8004476:	e7cf      	b.n	8004418 <__ssvfiscanf_r+0x1b4>
 8004478:	220a      	movs	r2, #10
 800447a:	e7dd      	b.n	8004438 <__ssvfiscanf_r+0x1d4>
 800447c:	2300      	movs	r3, #0
 800447e:	9342      	str	r3, [sp, #264]	; 0x108
 8004480:	2303      	movs	r3, #3
 8004482:	e7de      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 8004484:	2308      	movs	r3, #8
 8004486:	9342      	str	r3, [sp, #264]	; 0x108
 8004488:	2304      	movs	r3, #4
 800448a:	e7da      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 800448c:	4629      	mov	r1, r5
 800448e:	4640      	mov	r0, r8
 8004490:	f000 f9ac 	bl	80047ec <__sccl>
 8004494:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449a:	9341      	str	r3, [sp, #260]	; 0x104
 800449c:	4605      	mov	r5, r0
 800449e:	2301      	movs	r3, #1
 80044a0:	e7cf      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 80044a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80044a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a8:	9341      	str	r3, [sp, #260]	; 0x104
 80044aa:	2300      	movs	r3, #0
 80044ac:	e7c9      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e7c7      	b.n	8004442 <__ssvfiscanf_r+0x1de>
 80044b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80044b4:	06c3      	lsls	r3, r0, #27
 80044b6:	f53f aeff 	bmi.w	80042b8 <__ssvfiscanf_r+0x54>
 80044ba:	9b00      	ldr	r3, [sp, #0]
 80044bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80044be:	1d19      	adds	r1, r3, #4
 80044c0:	9100      	str	r1, [sp, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	07c0      	lsls	r0, r0, #31
 80044c6:	bf4c      	ite	mi
 80044c8:	801a      	strhmi	r2, [r3, #0]
 80044ca:	601a      	strpl	r2, [r3, #0]
 80044cc:	e6f4      	b.n	80042b8 <__ssvfiscanf_r+0x54>
 80044ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044d0:	4621      	mov	r1, r4
 80044d2:	4630      	mov	r0, r6
 80044d4:	4798      	blx	r3
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d0b7      	beq.n	800444a <__ssvfiscanf_r+0x1e6>
 80044da:	e79d      	b.n	8004418 <__ssvfiscanf_r+0x1b4>
 80044dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80044de:	3201      	adds	r2, #1
 80044e0:	9245      	str	r2, [sp, #276]	; 0x114
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	3a01      	subs	r2, #1
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	6062      	str	r2, [r4, #4]
 80044ea:	dd02      	ble.n	80044f2 <__ssvfiscanf_r+0x28e>
 80044ec:	3301      	adds	r3, #1
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	e7ae      	b.n	8004450 <__ssvfiscanf_r+0x1ec>
 80044f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044f4:	4621      	mov	r1, r4
 80044f6:	4630      	mov	r0, r6
 80044f8:	4798      	blx	r3
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d0a8      	beq.n	8004450 <__ssvfiscanf_r+0x1ec>
 80044fe:	e78b      	b.n	8004418 <__ssvfiscanf_r+0x1b4>
 8004500:	2b04      	cmp	r3, #4
 8004502:	dc06      	bgt.n	8004512 <__ssvfiscanf_r+0x2ae>
 8004504:	466b      	mov	r3, sp
 8004506:	4622      	mov	r2, r4
 8004508:	a941      	add	r1, sp, #260	; 0x104
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f87a 	bl	8004604 <_scanf_i>
 8004510:	e7ac      	b.n	800446c <__ssvfiscanf_r+0x208>
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <__ssvfiscanf_r+0x2ec>)
 8004514:	2b00      	cmp	r3, #0
 8004516:	f43f aecf 	beq.w	80042b8 <__ssvfiscanf_r+0x54>
 800451a:	466b      	mov	r3, sp
 800451c:	4622      	mov	r2, r4
 800451e:	a941      	add	r1, sp, #260	; 0x104
 8004520:	4630      	mov	r0, r6
 8004522:	f3af 8000 	nop.w
 8004526:	e7a1      	b.n	800446c <__ssvfiscanf_r+0x208>
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800452e:	bf18      	it	ne
 8004530:	f04f 30ff 	movne.w	r0, #4294967295
 8004534:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800453e:	e7f9      	b.n	8004534 <__ssvfiscanf_r+0x2d0>
 8004540:	080041b1 	.word	0x080041b1
 8004544:	0800422b 	.word	0x0800422b
 8004548:	08004e81 	.word	0x08004e81
 800454c:	08004e61 	.word	0x08004e61
 8004550:	00000000 	.word	0x00000000

08004554 <_scanf_chars>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	4615      	mov	r5, r2
 800455a:	688a      	ldr	r2, [r1, #8]
 800455c:	4680      	mov	r8, r0
 800455e:	460c      	mov	r4, r1
 8004560:	b932      	cbnz	r2, 8004570 <_scanf_chars+0x1c>
 8004562:	698a      	ldr	r2, [r1, #24]
 8004564:	2a00      	cmp	r2, #0
 8004566:	bf0c      	ite	eq
 8004568:	2201      	moveq	r2, #1
 800456a:	f04f 32ff 	movne.w	r2, #4294967295
 800456e:	608a      	str	r2, [r1, #8]
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004600 <_scanf_chars+0xac>
 8004576:	06d1      	lsls	r1, r2, #27
 8004578:	bf5f      	itttt	pl
 800457a:	681a      	ldrpl	r2, [r3, #0]
 800457c:	1d11      	addpl	r1, r2, #4
 800457e:	6019      	strpl	r1, [r3, #0]
 8004580:	6816      	ldrpl	r6, [r2, #0]
 8004582:	2700      	movs	r7, #0
 8004584:	69a0      	ldr	r0, [r4, #24]
 8004586:	b188      	cbz	r0, 80045ac <_scanf_chars+0x58>
 8004588:	2801      	cmp	r0, #1
 800458a:	d107      	bne.n	800459c <_scanf_chars+0x48>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	6963      	ldr	r3, [r4, #20]
 8004592:	5c9b      	ldrb	r3, [r3, r2]
 8004594:	b953      	cbnz	r3, 80045ac <_scanf_chars+0x58>
 8004596:	bb27      	cbnz	r7, 80045e2 <_scanf_chars+0x8e>
 8004598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459c:	2802      	cmp	r0, #2
 800459e:	d120      	bne.n	80045e2 <_scanf_chars+0x8e>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	d41a      	bmi.n	80045e2 <_scanf_chars+0x8e>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	06da      	lsls	r2, r3, #27
 80045b0:	bf5e      	ittt	pl
 80045b2:	682b      	ldrpl	r3, [r5, #0]
 80045b4:	781b      	ldrbpl	r3, [r3, #0]
 80045b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80045ba:	682a      	ldr	r2, [r5, #0]
 80045bc:	686b      	ldr	r3, [r5, #4]
 80045be:	3201      	adds	r2, #1
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	68a2      	ldr	r2, [r4, #8]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	3a01      	subs	r2, #1
 80045c8:	606b      	str	r3, [r5, #4]
 80045ca:	3701      	adds	r7, #1
 80045cc:	60a2      	str	r2, [r4, #8]
 80045ce:	b142      	cbz	r2, 80045e2 <_scanf_chars+0x8e>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dcd7      	bgt.n	8004584 <_scanf_chars+0x30>
 80045d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045d8:	4629      	mov	r1, r5
 80045da:	4640      	mov	r0, r8
 80045dc:	4798      	blx	r3
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0d0      	beq.n	8004584 <_scanf_chars+0x30>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	f013 0310 	ands.w	r3, r3, #16
 80045e8:	d105      	bne.n	80045f6 <_scanf_chars+0xa2>
 80045ea:	68e2      	ldr	r2, [r4, #12]
 80045ec:	3201      	adds	r2, #1
 80045ee:	60e2      	str	r2, [r4, #12]
 80045f0:	69a2      	ldr	r2, [r4, #24]
 80045f2:	b102      	cbz	r2, 80045f6 <_scanf_chars+0xa2>
 80045f4:	7033      	strb	r3, [r6, #0]
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	441f      	add	r7, r3
 80045fa:	6127      	str	r7, [r4, #16]
 80045fc:	2000      	movs	r0, #0
 80045fe:	e7cb      	b.n	8004598 <_scanf_chars+0x44>
 8004600:	08004e81 	.word	0x08004e81

08004604 <_scanf_i>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	4698      	mov	r8, r3
 800460a:	4b74      	ldr	r3, [pc, #464]	; (80047dc <_scanf_i+0x1d8>)
 800460c:	460c      	mov	r4, r1
 800460e:	4682      	mov	sl, r0
 8004610:	4616      	mov	r6, r2
 8004612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004616:	b087      	sub	sp, #28
 8004618:	ab03      	add	r3, sp, #12
 800461a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <_scanf_i+0x1dc>)
 8004620:	69a1      	ldr	r1, [r4, #24]
 8004622:	4a70      	ldr	r2, [pc, #448]	; (80047e4 <_scanf_i+0x1e0>)
 8004624:	2903      	cmp	r1, #3
 8004626:	bf18      	it	ne
 8004628:	461a      	movne	r2, r3
 800462a:	68a3      	ldr	r3, [r4, #8]
 800462c:	9201      	str	r2, [sp, #4]
 800462e:	1e5a      	subs	r2, r3, #1
 8004630:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004634:	bf88      	it	hi
 8004636:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800463a:	4627      	mov	r7, r4
 800463c:	bf82      	ittt	hi
 800463e:	eb03 0905 	addhi.w	r9, r3, r5
 8004642:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004646:	60a3      	strhi	r3, [r4, #8]
 8004648:	f857 3b1c 	ldr.w	r3, [r7], #28
 800464c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004650:	bf98      	it	ls
 8004652:	f04f 0900 	movls.w	r9, #0
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	463d      	mov	r5, r7
 800465a:	f04f 0b00 	mov.w	fp, #0
 800465e:	6831      	ldr	r1, [r6, #0]
 8004660:	ab03      	add	r3, sp, #12
 8004662:	7809      	ldrb	r1, [r1, #0]
 8004664:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004668:	2202      	movs	r2, #2
 800466a:	f7fb fdf1 	bl	8000250 <memchr>
 800466e:	b328      	cbz	r0, 80046bc <_scanf_i+0xb8>
 8004670:	f1bb 0f01 	cmp.w	fp, #1
 8004674:	d159      	bne.n	800472a <_scanf_i+0x126>
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	b92a      	cbnz	r2, 8004686 <_scanf_i+0x82>
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	2308      	movs	r3, #8
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6022      	str	r2, [r4, #0]
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800468c:	6022      	str	r2, [r4, #0]
 800468e:	68a2      	ldr	r2, [r4, #8]
 8004690:	1e51      	subs	r1, r2, #1
 8004692:	60a1      	str	r1, [r4, #8]
 8004694:	b192      	cbz	r2, 80046bc <_scanf_i+0xb8>
 8004696:	6832      	ldr	r2, [r6, #0]
 8004698:	1c51      	adds	r1, r2, #1
 800469a:	6031      	str	r1, [r6, #0]
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	f805 2b01 	strb.w	r2, [r5], #1
 80046a2:	6872      	ldr	r2, [r6, #4]
 80046a4:	3a01      	subs	r2, #1
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	6072      	str	r2, [r6, #4]
 80046aa:	dc07      	bgt.n	80046bc <_scanf_i+0xb8>
 80046ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80046b0:	4631      	mov	r1, r6
 80046b2:	4650      	mov	r0, sl
 80046b4:	4790      	blx	r2
 80046b6:	2800      	cmp	r0, #0
 80046b8:	f040 8085 	bne.w	80047c6 <_scanf_i+0x1c2>
 80046bc:	f10b 0b01 	add.w	fp, fp, #1
 80046c0:	f1bb 0f03 	cmp.w	fp, #3
 80046c4:	d1cb      	bne.n	800465e <_scanf_i+0x5a>
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	b90b      	cbnz	r3, 80046ce <_scanf_i+0xca>
 80046ca:	230a      	movs	r3, #10
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	4945      	ldr	r1, [pc, #276]	; (80047e8 <_scanf_i+0x1e4>)
 80046d2:	6960      	ldr	r0, [r4, #20]
 80046d4:	1ac9      	subs	r1, r1, r3
 80046d6:	f000 f889 	bl	80047ec <__sccl>
 80046da:	f04f 0b00 	mov.w	fp, #0
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03d      	beq.n	8004762 <_scanf_i+0x15e>
 80046e6:	6831      	ldr	r1, [r6, #0]
 80046e8:	6960      	ldr	r0, [r4, #20]
 80046ea:	f891 c000 	ldrb.w	ip, [r1]
 80046ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d035      	beq.n	8004762 <_scanf_i+0x15e>
 80046f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80046fa:	d124      	bne.n	8004746 <_scanf_i+0x142>
 80046fc:	0510      	lsls	r0, r2, #20
 80046fe:	d522      	bpl.n	8004746 <_scanf_i+0x142>
 8004700:	f10b 0b01 	add.w	fp, fp, #1
 8004704:	f1b9 0f00 	cmp.w	r9, #0
 8004708:	d003      	beq.n	8004712 <_scanf_i+0x10e>
 800470a:	3301      	adds	r3, #1
 800470c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004710:	60a3      	str	r3, [r4, #8]
 8004712:	6873      	ldr	r3, [r6, #4]
 8004714:	3b01      	subs	r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	6073      	str	r3, [r6, #4]
 800471a:	dd1b      	ble.n	8004754 <_scanf_i+0x150>
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	3b01      	subs	r3, #1
 8004726:	60a3      	str	r3, [r4, #8]
 8004728:	e7d9      	b.n	80046de <_scanf_i+0xda>
 800472a:	f1bb 0f02 	cmp.w	fp, #2
 800472e:	d1ae      	bne.n	800468e <_scanf_i+0x8a>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004736:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800473a:	d1bf      	bne.n	80046bc <_scanf_i+0xb8>
 800473c:	2310      	movs	r3, #16
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004744:	e7a2      	b.n	800468c <_scanf_i+0x88>
 8004746:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800474a:	6022      	str	r2, [r4, #0]
 800474c:	780b      	ldrb	r3, [r1, #0]
 800474e:	f805 3b01 	strb.w	r3, [r5], #1
 8004752:	e7de      	b.n	8004712 <_scanf_i+0x10e>
 8004754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004758:	4631      	mov	r1, r6
 800475a:	4650      	mov	r0, sl
 800475c:	4798      	blx	r3
 800475e:	2800      	cmp	r0, #0
 8004760:	d0df      	beq.n	8004722 <_scanf_i+0x11e>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	05d9      	lsls	r1, r3, #23
 8004766:	d50d      	bpl.n	8004784 <_scanf_i+0x180>
 8004768:	42bd      	cmp	r5, r7
 800476a:	d909      	bls.n	8004780 <_scanf_i+0x17c>
 800476c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004774:	4632      	mov	r2, r6
 8004776:	4650      	mov	r0, sl
 8004778:	4798      	blx	r3
 800477a:	f105 39ff 	add.w	r9, r5, #4294967295
 800477e:	464d      	mov	r5, r9
 8004780:	42bd      	cmp	r5, r7
 8004782:	d028      	beq.n	80047d6 <_scanf_i+0x1d2>
 8004784:	6822      	ldr	r2, [r4, #0]
 8004786:	f012 0210 	ands.w	r2, r2, #16
 800478a:	d113      	bne.n	80047b4 <_scanf_i+0x1b0>
 800478c:	702a      	strb	r2, [r5, #0]
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	9e01      	ldr	r6, [sp, #4]
 8004792:	4639      	mov	r1, r7
 8004794:	4650      	mov	r0, sl
 8004796:	47b0      	blx	r6
 8004798:	f8d8 3000 	ldr.w	r3, [r8]
 800479c:	6821      	ldr	r1, [r4, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	f8c8 2000 	str.w	r2, [r8]
 80047a4:	f011 0f20 	tst.w	r1, #32
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	d00f      	beq.n	80047cc <_scanf_i+0x1c8>
 80047ac:	6018      	str	r0, [r3, #0]
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60e3      	str	r3, [r4, #12]
 80047b4:	1bed      	subs	r5, r5, r7
 80047b6:	44ab      	add	fp, r5
 80047b8:	6925      	ldr	r5, [r4, #16]
 80047ba:	445d      	add	r5, fp
 80047bc:	6125      	str	r5, [r4, #16]
 80047be:	2000      	movs	r0, #0
 80047c0:	b007      	add	sp, #28
 80047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c6:	f04f 0b00 	mov.w	fp, #0
 80047ca:	e7ca      	b.n	8004762 <_scanf_i+0x15e>
 80047cc:	07ca      	lsls	r2, r1, #31
 80047ce:	bf4c      	ite	mi
 80047d0:	8018      	strhmi	r0, [r3, #0]
 80047d2:	6018      	strpl	r0, [r3, #0]
 80047d4:	e7eb      	b.n	80047ae <_scanf_i+0x1aa>
 80047d6:	2001      	movs	r0, #1
 80047d8:	e7f2      	b.n	80047c0 <_scanf_i+0x1bc>
 80047da:	bf00      	nop
 80047dc:	08004e18 	.word	0x08004e18
 80047e0:	08004a65 	.word	0x08004a65
 80047e4:	08004969 	.word	0x08004969
 80047e8:	08004e7e 	.word	0x08004e7e

080047ec <__sccl>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	780b      	ldrb	r3, [r1, #0]
 80047f0:	4604      	mov	r4, r0
 80047f2:	2b5e      	cmp	r3, #94	; 0x5e
 80047f4:	bf0b      	itete	eq
 80047f6:	784b      	ldrbeq	r3, [r1, #1]
 80047f8:	1c48      	addne	r0, r1, #1
 80047fa:	1c88      	addeq	r0, r1, #2
 80047fc:	2200      	movne	r2, #0
 80047fe:	bf08      	it	eq
 8004800:	2201      	moveq	r2, #1
 8004802:	1e61      	subs	r1, r4, #1
 8004804:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004808:	f801 2f01 	strb.w	r2, [r1, #1]!
 800480c:	42a9      	cmp	r1, r5
 800480e:	d1fb      	bne.n	8004808 <__sccl+0x1c>
 8004810:	b90b      	cbnz	r3, 8004816 <__sccl+0x2a>
 8004812:	3801      	subs	r0, #1
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	f082 0101 	eor.w	r1, r2, #1
 800481a:	54e1      	strb	r1, [r4, r3]
 800481c:	1c42      	adds	r2, r0, #1
 800481e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8004822:	2d2d      	cmp	r5, #45	; 0x2d
 8004824:	f102 36ff 	add.w	r6, r2, #4294967295
 8004828:	4610      	mov	r0, r2
 800482a:	d006      	beq.n	800483a <__sccl+0x4e>
 800482c:	2d5d      	cmp	r5, #93	; 0x5d
 800482e:	d0f1      	beq.n	8004814 <__sccl+0x28>
 8004830:	b90d      	cbnz	r5, 8004836 <__sccl+0x4a>
 8004832:	4630      	mov	r0, r6
 8004834:	e7ee      	b.n	8004814 <__sccl+0x28>
 8004836:	462b      	mov	r3, r5
 8004838:	e7ef      	b.n	800481a <__sccl+0x2e>
 800483a:	7816      	ldrb	r6, [r2, #0]
 800483c:	2e5d      	cmp	r6, #93	; 0x5d
 800483e:	d0fa      	beq.n	8004836 <__sccl+0x4a>
 8004840:	42b3      	cmp	r3, r6
 8004842:	dcf8      	bgt.n	8004836 <__sccl+0x4a>
 8004844:	4618      	mov	r0, r3
 8004846:	3001      	adds	r0, #1
 8004848:	4286      	cmp	r6, r0
 800484a:	5421      	strb	r1, [r4, r0]
 800484c:	dcfb      	bgt.n	8004846 <__sccl+0x5a>
 800484e:	43d8      	mvns	r0, r3
 8004850:	4430      	add	r0, r6
 8004852:	1c5d      	adds	r5, r3, #1
 8004854:	42b3      	cmp	r3, r6
 8004856:	bfa8      	it	ge
 8004858:	2000      	movge	r0, #0
 800485a:	182b      	adds	r3, r5, r0
 800485c:	3202      	adds	r2, #2
 800485e:	e7de      	b.n	800481e <__sccl+0x32>

08004860 <_strtol_l.isra.0>:
 8004860:	2b01      	cmp	r3, #1
 8004862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004866:	d001      	beq.n	800486c <_strtol_l.isra.0+0xc>
 8004868:	2b24      	cmp	r3, #36	; 0x24
 800486a:	d906      	bls.n	800487a <_strtol_l.isra.0+0x1a>
 800486c:	f7ff fbb0 	bl	8003fd0 <__errno>
 8004870:	2316      	movs	r3, #22
 8004872:	6003      	str	r3, [r0, #0]
 8004874:	2000      	movs	r0, #0
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	4f3a      	ldr	r7, [pc, #232]	; (8004964 <_strtol_l.isra.0+0x104>)
 800487c:	468e      	mov	lr, r1
 800487e:	4676      	mov	r6, lr
 8004880:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004884:	5de5      	ldrb	r5, [r4, r7]
 8004886:	f015 0508 	ands.w	r5, r5, #8
 800488a:	d1f8      	bne.n	800487e <_strtol_l.isra.0+0x1e>
 800488c:	2c2d      	cmp	r4, #45	; 0x2d
 800488e:	d134      	bne.n	80048fa <_strtol_l.isra.0+0x9a>
 8004890:	f89e 4000 	ldrb.w	r4, [lr]
 8004894:	f04f 0801 	mov.w	r8, #1
 8004898:	f106 0e02 	add.w	lr, r6, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05c      	beq.n	800495a <_strtol_l.isra.0+0xfa>
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d10c      	bne.n	80048be <_strtol_l.isra.0+0x5e>
 80048a4:	2c30      	cmp	r4, #48	; 0x30
 80048a6:	d10a      	bne.n	80048be <_strtol_l.isra.0+0x5e>
 80048a8:	f89e 4000 	ldrb.w	r4, [lr]
 80048ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048b0:	2c58      	cmp	r4, #88	; 0x58
 80048b2:	d14d      	bne.n	8004950 <_strtol_l.isra.0+0xf0>
 80048b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80048b8:	2310      	movs	r3, #16
 80048ba:	f10e 0e02 	add.w	lr, lr, #2
 80048be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80048c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80048c6:	2600      	movs	r6, #0
 80048c8:	fbbc f9f3 	udiv	r9, ip, r3
 80048cc:	4635      	mov	r5, r6
 80048ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80048d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80048d6:	2f09      	cmp	r7, #9
 80048d8:	d818      	bhi.n	800490c <_strtol_l.isra.0+0xac>
 80048da:	463c      	mov	r4, r7
 80048dc:	42a3      	cmp	r3, r4
 80048de:	dd24      	ble.n	800492a <_strtol_l.isra.0+0xca>
 80048e0:	2e00      	cmp	r6, #0
 80048e2:	db1f      	blt.n	8004924 <_strtol_l.isra.0+0xc4>
 80048e4:	45a9      	cmp	r9, r5
 80048e6:	d31d      	bcc.n	8004924 <_strtol_l.isra.0+0xc4>
 80048e8:	d101      	bne.n	80048ee <_strtol_l.isra.0+0x8e>
 80048ea:	45a2      	cmp	sl, r4
 80048ec:	db1a      	blt.n	8004924 <_strtol_l.isra.0+0xc4>
 80048ee:	fb05 4503 	mla	r5, r5, r3, r4
 80048f2:	2601      	movs	r6, #1
 80048f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80048f8:	e7eb      	b.n	80048d2 <_strtol_l.isra.0+0x72>
 80048fa:	2c2b      	cmp	r4, #43	; 0x2b
 80048fc:	bf08      	it	eq
 80048fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004902:	46a8      	mov	r8, r5
 8004904:	bf08      	it	eq
 8004906:	f106 0e02 	addeq.w	lr, r6, #2
 800490a:	e7c7      	b.n	800489c <_strtol_l.isra.0+0x3c>
 800490c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004910:	2f19      	cmp	r7, #25
 8004912:	d801      	bhi.n	8004918 <_strtol_l.isra.0+0xb8>
 8004914:	3c37      	subs	r4, #55	; 0x37
 8004916:	e7e1      	b.n	80048dc <_strtol_l.isra.0+0x7c>
 8004918:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800491c:	2f19      	cmp	r7, #25
 800491e:	d804      	bhi.n	800492a <_strtol_l.isra.0+0xca>
 8004920:	3c57      	subs	r4, #87	; 0x57
 8004922:	e7db      	b.n	80048dc <_strtol_l.isra.0+0x7c>
 8004924:	f04f 36ff 	mov.w	r6, #4294967295
 8004928:	e7e4      	b.n	80048f4 <_strtol_l.isra.0+0x94>
 800492a:	2e00      	cmp	r6, #0
 800492c:	da05      	bge.n	800493a <_strtol_l.isra.0+0xda>
 800492e:	2322      	movs	r3, #34	; 0x22
 8004930:	6003      	str	r3, [r0, #0]
 8004932:	4665      	mov	r5, ip
 8004934:	b942      	cbnz	r2, 8004948 <_strtol_l.isra.0+0xe8>
 8004936:	4628      	mov	r0, r5
 8004938:	e79d      	b.n	8004876 <_strtol_l.isra.0+0x16>
 800493a:	f1b8 0f00 	cmp.w	r8, #0
 800493e:	d000      	beq.n	8004942 <_strtol_l.isra.0+0xe2>
 8004940:	426d      	negs	r5, r5
 8004942:	2a00      	cmp	r2, #0
 8004944:	d0f7      	beq.n	8004936 <_strtol_l.isra.0+0xd6>
 8004946:	b10e      	cbz	r6, 800494c <_strtol_l.isra.0+0xec>
 8004948:	f10e 31ff 	add.w	r1, lr, #4294967295
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	e7f2      	b.n	8004936 <_strtol_l.isra.0+0xd6>
 8004950:	2430      	movs	r4, #48	; 0x30
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1b3      	bne.n	80048be <_strtol_l.isra.0+0x5e>
 8004956:	2308      	movs	r3, #8
 8004958:	e7b1      	b.n	80048be <_strtol_l.isra.0+0x5e>
 800495a:	2c30      	cmp	r4, #48	; 0x30
 800495c:	d0a4      	beq.n	80048a8 <_strtol_l.isra.0+0x48>
 800495e:	230a      	movs	r3, #10
 8004960:	e7ad      	b.n	80048be <_strtol_l.isra.0+0x5e>
 8004962:	bf00      	nop
 8004964:	08004e81 	.word	0x08004e81

08004968 <_strtol_r>:
 8004968:	f7ff bf7a 	b.w	8004860 <_strtol_l.isra.0>

0800496c <_strtoul_l.isra.0>:
 800496c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004970:	4e3b      	ldr	r6, [pc, #236]	; (8004a60 <_strtoul_l.isra.0+0xf4>)
 8004972:	4686      	mov	lr, r0
 8004974:	468c      	mov	ip, r1
 8004976:	4660      	mov	r0, ip
 8004978:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800497c:	5da5      	ldrb	r5, [r4, r6]
 800497e:	f015 0508 	ands.w	r5, r5, #8
 8004982:	d1f8      	bne.n	8004976 <_strtoul_l.isra.0+0xa>
 8004984:	2c2d      	cmp	r4, #45	; 0x2d
 8004986:	d134      	bne.n	80049f2 <_strtoul_l.isra.0+0x86>
 8004988:	f89c 4000 	ldrb.w	r4, [ip]
 800498c:	f04f 0801 	mov.w	r8, #1
 8004990:	f100 0c02 	add.w	ip, r0, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05e      	beq.n	8004a56 <_strtoul_l.isra.0+0xea>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d10c      	bne.n	80049b6 <_strtoul_l.isra.0+0x4a>
 800499c:	2c30      	cmp	r4, #48	; 0x30
 800499e:	d10a      	bne.n	80049b6 <_strtoul_l.isra.0+0x4a>
 80049a0:	f89c 0000 	ldrb.w	r0, [ip]
 80049a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80049a8:	2858      	cmp	r0, #88	; 0x58
 80049aa:	d14f      	bne.n	8004a4c <_strtoul_l.isra.0+0xe0>
 80049ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80049b0:	2310      	movs	r3, #16
 80049b2:	f10c 0c02 	add.w	ip, ip, #2
 80049b6:	f04f 37ff 	mov.w	r7, #4294967295
 80049ba:	2500      	movs	r5, #0
 80049bc:	fbb7 f7f3 	udiv	r7, r7, r3
 80049c0:	fb03 f907 	mul.w	r9, r3, r7
 80049c4:	ea6f 0909 	mvn.w	r9, r9
 80049c8:	4628      	mov	r0, r5
 80049ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80049ce:	2e09      	cmp	r6, #9
 80049d0:	d818      	bhi.n	8004a04 <_strtoul_l.isra.0+0x98>
 80049d2:	4634      	mov	r4, r6
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	dd24      	ble.n	8004a22 <_strtoul_l.isra.0+0xb6>
 80049d8:	2d00      	cmp	r5, #0
 80049da:	db1f      	blt.n	8004a1c <_strtoul_l.isra.0+0xb0>
 80049dc:	4287      	cmp	r7, r0
 80049de:	d31d      	bcc.n	8004a1c <_strtoul_l.isra.0+0xb0>
 80049e0:	d101      	bne.n	80049e6 <_strtoul_l.isra.0+0x7a>
 80049e2:	45a1      	cmp	r9, r4
 80049e4:	db1a      	blt.n	8004a1c <_strtoul_l.isra.0+0xb0>
 80049e6:	fb00 4003 	mla	r0, r0, r3, r4
 80049ea:	2501      	movs	r5, #1
 80049ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80049f0:	e7eb      	b.n	80049ca <_strtoul_l.isra.0+0x5e>
 80049f2:	2c2b      	cmp	r4, #43	; 0x2b
 80049f4:	bf08      	it	eq
 80049f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80049fa:	46a8      	mov	r8, r5
 80049fc:	bf08      	it	eq
 80049fe:	f100 0c02 	addeq.w	ip, r0, #2
 8004a02:	e7c7      	b.n	8004994 <_strtoul_l.isra.0+0x28>
 8004a04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004a08:	2e19      	cmp	r6, #25
 8004a0a:	d801      	bhi.n	8004a10 <_strtoul_l.isra.0+0xa4>
 8004a0c:	3c37      	subs	r4, #55	; 0x37
 8004a0e:	e7e1      	b.n	80049d4 <_strtoul_l.isra.0+0x68>
 8004a10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004a14:	2e19      	cmp	r6, #25
 8004a16:	d804      	bhi.n	8004a22 <_strtoul_l.isra.0+0xb6>
 8004a18:	3c57      	subs	r4, #87	; 0x57
 8004a1a:	e7db      	b.n	80049d4 <_strtoul_l.isra.0+0x68>
 8004a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a20:	e7e4      	b.n	80049ec <_strtoul_l.isra.0+0x80>
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	da07      	bge.n	8004a36 <_strtoul_l.isra.0+0xca>
 8004a26:	2322      	movs	r3, #34	; 0x22
 8004a28:	f8ce 3000 	str.w	r3, [lr]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	b942      	cbnz	r2, 8004a44 <_strtoul_l.isra.0+0xd8>
 8004a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	d000      	beq.n	8004a3e <_strtoul_l.isra.0+0xd2>
 8004a3c:	4240      	negs	r0, r0
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d0f7      	beq.n	8004a32 <_strtoul_l.isra.0+0xc6>
 8004a42:	b10d      	cbz	r5, 8004a48 <_strtoul_l.isra.0+0xdc>
 8004a44:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7f2      	b.n	8004a32 <_strtoul_l.isra.0+0xc6>
 8004a4c:	2430      	movs	r4, #48	; 0x30
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1b1      	bne.n	80049b6 <_strtoul_l.isra.0+0x4a>
 8004a52:	2308      	movs	r3, #8
 8004a54:	e7af      	b.n	80049b6 <_strtoul_l.isra.0+0x4a>
 8004a56:	2c30      	cmp	r4, #48	; 0x30
 8004a58:	d0a2      	beq.n	80049a0 <_strtoul_l.isra.0+0x34>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e7ab      	b.n	80049b6 <_strtoul_l.isra.0+0x4a>
 8004a5e:	bf00      	nop
 8004a60:	08004e81 	.word	0x08004e81

08004a64 <_strtoul_r>:
 8004a64:	f7ff bf82 	b.w	800496c <_strtoul_l.isra.0>

08004a68 <__submore>:
 8004a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a74:	4299      	cmp	r1, r3
 8004a76:	d11d      	bne.n	8004ab4 <__submore+0x4c>
 8004a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a7c:	f000 f88e 	bl	8004b9c <_malloc_r>
 8004a80:	b918      	cbnz	r0, 8004a8a <__submore+0x22>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004a94:	6360      	str	r0, [r4, #52]	; 0x34
 8004a96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004a9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004a9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004aa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004aa6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004aaa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004aae:	6020      	str	r0, [r4, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e7e8      	b.n	8004a86 <__submore+0x1e>
 8004ab4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ab6:	0077      	lsls	r7, r6, #1
 8004ab8:	463a      	mov	r2, r7
 8004aba:	f000 f8c9 	bl	8004c50 <_realloc_r>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0de      	beq.n	8004a82 <__submore+0x1a>
 8004ac4:	eb00 0806 	add.w	r8, r0, r6
 8004ac8:	4601      	mov	r1, r0
 8004aca:	4632      	mov	r2, r6
 8004acc:	4640      	mov	r0, r8
 8004ace:	f000 f807 	bl	8004ae0 <memcpy>
 8004ad2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004ad6:	f8c4 8000 	str.w	r8, [r4]
 8004ada:	e7e9      	b.n	8004ab0 <__submore+0x48>

08004adc <__retarget_lock_acquire_recursive>:
 8004adc:	4770      	bx	lr

08004ade <__retarget_lock_release_recursive>:
 8004ade:	4770      	bx	lr

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <_free_r>:
 8004afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d048      	beq.n	8004b94 <_free_r+0x98>
 8004b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b06:	9001      	str	r0, [sp, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b0e:	bfb8      	it	lt
 8004b10:	18e4      	addlt	r4, r4, r3
 8004b12:	f000 f8d3 	bl	8004cbc <__malloc_lock>
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <_free_r+0x9c>)
 8004b18:	9801      	ldr	r0, [sp, #4]
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	b933      	cbnz	r3, 8004b2e <_free_r+0x32>
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	6014      	str	r4, [r2, #0]
 8004b24:	b003      	add	sp, #12
 8004b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b2a:	f000 b8cd 	b.w	8004cc8 <__malloc_unlock>
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	d90b      	bls.n	8004b4a <_free_r+0x4e>
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	1862      	adds	r2, r4, r1
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bf04      	itt	eq
 8004b3a:	681a      	ldreq	r2, [r3, #0]
 8004b3c:	685b      	ldreq	r3, [r3, #4]
 8004b3e:	6063      	str	r3, [r4, #4]
 8004b40:	bf04      	itt	eq
 8004b42:	1852      	addeq	r2, r2, r1
 8004b44:	6022      	streq	r2, [r4, #0]
 8004b46:	602c      	str	r4, [r5, #0]
 8004b48:	e7ec      	b.n	8004b24 <_free_r+0x28>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x58>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x4e>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1855      	adds	r5, r2, r1
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x78>
 8004b5c:	6824      	ldr	r4, [r4, #0]
 8004b5e:	4421      	add	r1, r4
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	42a3      	cmp	r3, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1dd      	bne.n	8004b24 <_free_r+0x28>
 8004b68:	681c      	ldr	r4, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4421      	add	r1, r4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	e7d7      	b.n	8004b24 <_free_r+0x28>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x80>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	e7d3      	b.n	8004b24 <_free_r+0x28>
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7c7      	b.n	8004b24 <_free_r+0x28>
 8004b94:	b003      	add	sp, #12
 8004b96:	bd30      	pop	{r4, r5, pc}
 8004b98:	2000009c 	.word	0x2000009c

08004b9c <_malloc_r>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	1ccd      	adds	r5, r1, #3
 8004ba0:	f025 0503 	bic.w	r5, r5, #3
 8004ba4:	3508      	adds	r5, #8
 8004ba6:	2d0c      	cmp	r5, #12
 8004ba8:	bf38      	it	cc
 8004baa:	250c      	movcc	r5, #12
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	4606      	mov	r6, r0
 8004bb0:	db01      	blt.n	8004bb6 <_malloc_r+0x1a>
 8004bb2:	42a9      	cmp	r1, r5
 8004bb4:	d903      	bls.n	8004bbe <_malloc_r+0x22>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	2000      	movs	r0, #0
 8004bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bbe:	f000 f87d 	bl	8004cbc <__malloc_lock>
 8004bc2:	4921      	ldr	r1, [pc, #132]	; (8004c48 <_malloc_r+0xac>)
 8004bc4:	680a      	ldr	r2, [r1, #0]
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	b99c      	cbnz	r4, 8004bf2 <_malloc_r+0x56>
 8004bca:	4f20      	ldr	r7, [pc, #128]	; (8004c4c <_malloc_r+0xb0>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b923      	cbnz	r3, 8004bda <_malloc_r+0x3e>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f862 	bl	8004c9c <_sbrk_r>
 8004bd8:	6038      	str	r0, [r7, #0]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 f85d 	bl	8004c9c <_sbrk_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d123      	bne.n	8004c2e <_malloc_r+0x92>
 8004be6:	230c      	movs	r3, #12
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	4630      	mov	r0, r6
 8004bec:	f000 f86c 	bl	8004cc8 <__malloc_unlock>
 8004bf0:	e7e3      	b.n	8004bba <_malloc_r+0x1e>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	1b5b      	subs	r3, r3, r5
 8004bf6:	d417      	bmi.n	8004c28 <_malloc_r+0x8c>
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d903      	bls.n	8004c04 <_malloc_r+0x68>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	441c      	add	r4, r3
 8004c00:	6025      	str	r5, [r4, #0]
 8004c02:	e004      	b.n	8004c0e <_malloc_r+0x72>
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	42a2      	cmp	r2, r4
 8004c08:	bf0c      	ite	eq
 8004c0a:	600b      	streq	r3, [r1, #0]
 8004c0c:	6053      	strne	r3, [r2, #4]
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 f85a 	bl	8004cc8 <__malloc_unlock>
 8004c14:	f104 000b 	add.w	r0, r4, #11
 8004c18:	1d23      	adds	r3, r4, #4
 8004c1a:	f020 0007 	bic.w	r0, r0, #7
 8004c1e:	1ac2      	subs	r2, r0, r3
 8004c20:	d0cc      	beq.n	8004bbc <_malloc_r+0x20>
 8004c22:	1a1b      	subs	r3, r3, r0
 8004c24:	50a3      	str	r3, [r4, r2]
 8004c26:	e7c9      	b.n	8004bbc <_malloc_r+0x20>
 8004c28:	4622      	mov	r2, r4
 8004c2a:	6864      	ldr	r4, [r4, #4]
 8004c2c:	e7cc      	b.n	8004bc8 <_malloc_r+0x2c>
 8004c2e:	1cc4      	adds	r4, r0, #3
 8004c30:	f024 0403 	bic.w	r4, r4, #3
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d0e3      	beq.n	8004c00 <_malloc_r+0x64>
 8004c38:	1a21      	subs	r1, r4, r0
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 f82e 	bl	8004c9c <_sbrk_r>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d1dd      	bne.n	8004c00 <_malloc_r+0x64>
 8004c44:	e7cf      	b.n	8004be6 <_malloc_r+0x4a>
 8004c46:	bf00      	nop
 8004c48:	2000009c 	.word	0x2000009c
 8004c4c:	200000a0 	.word	0x200000a0

08004c50 <_realloc_r>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	4607      	mov	r7, r0
 8004c54:	4614      	mov	r4, r2
 8004c56:	460e      	mov	r6, r1
 8004c58:	b921      	cbnz	r1, 8004c64 <_realloc_r+0x14>
 8004c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c5e:	4611      	mov	r1, r2
 8004c60:	f7ff bf9c 	b.w	8004b9c <_malloc_r>
 8004c64:	b922      	cbnz	r2, 8004c70 <_realloc_r+0x20>
 8004c66:	f7ff ff49 	bl	8004afc <_free_r>
 8004c6a:	4625      	mov	r5, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	f000 f830 	bl	8004cd4 <_malloc_usable_size_r>
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d20f      	bcs.n	8004c98 <_realloc_r+0x48>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f7ff ff8e 	bl	8004b9c <_malloc_r>
 8004c80:	4605      	mov	r5, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0f2      	beq.n	8004c6c <_realloc_r+0x1c>
 8004c86:	4631      	mov	r1, r6
 8004c88:	4622      	mov	r2, r4
 8004c8a:	f7ff ff29 	bl	8004ae0 <memcpy>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ff33 	bl	8004afc <_free_r>
 8004c96:	e7e9      	b.n	8004c6c <_realloc_r+0x1c>
 8004c98:	4635      	mov	r5, r6
 8004c9a:	e7e7      	b.n	8004c6c <_realloc_r+0x1c>

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_sbrk_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb ff2e 	bl	8000b08 <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	2001022c 	.word	0x2001022c

08004cbc <__malloc_lock>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__malloc_lock+0x8>)
 8004cbe:	f7ff bf0d 	b.w	8004adc <__retarget_lock_acquire_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	20010234 	.word	0x20010234

08004cc8 <__malloc_unlock>:
 8004cc8:	4801      	ldr	r0, [pc, #4]	; (8004cd0 <__malloc_unlock+0x8>)
 8004cca:	f7ff bf08 	b.w	8004ade <__retarget_lock_release_recursive>
 8004cce:	bf00      	nop
 8004cd0:	20010234 	.word	0x20010234

08004cd4 <_malloc_usable_size_r>:
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f18      	subs	r0, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbc      	itt	lt
 8004cde:	580b      	ldrlt	r3, [r1, r0]
 8004ce0:	18c0      	addlt	r0, r0, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
