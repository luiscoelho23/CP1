
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c43c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e5c  0800c640  0800c640  0001c640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d49c  0800d49c  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d49c  0800d49c  0001d49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4a4  0800d4a4  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4a8  0800d4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800d4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018484  2000026c  0800d718  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200186f0  0800d718  000286f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d484  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  0003d71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00040dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00042048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b50c  00000000  00000000  00043180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018741  00000000  00000000  0006e68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104034  00000000  00000000  00086dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ae01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  0018ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000026c 	.word	0x2000026c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c624 	.word	0x0800c624

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000270 	.word	0x20000270
 800023c:	0800c624 	.word	0x0800c624

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC3_Init1>:
bool software;
bool Read;
uint32_t adc_value;

void MX_ADC3_Init1(bool software1)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  software = software1;
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]


  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_ADC3_Init1+0xc0>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a40:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]

  if(software)
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <MX_ADC3_Init1+0x7e>
	  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_ADC3_Init1+0xc4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28


  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a70:	f002 f9f2 	bl	8002e58 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC3_Init1+0x8e>
  {
    Error_Handler();
 8000a7a:	f001 fd11 	bl	80024a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a92:	f002 fc6d 	bl	8003370 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC3_Init1+0xb0>
  {
    Error_Handler();
 8000a9c:	f001 fd00 	bl	80024a0 <Error_Handler>
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200003a1 	.word	0x200003a1
 8000aac:	200103a8 	.word	0x200103a8
 8000ab0:	40012200 	.word	0x40012200
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_ADC3_Init+0xa0>)
 8000ace:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000afa:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b1c:	f002 f99c 	bl	8002e58 <HAL_ADC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000b26:	f001 fcbb 	bl	80024a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b3c:	f002 fc18 	bl	8003370 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000b46:	f001 fcab 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200103a8 	.word	0x200103a8
 8000b58:	40012200 	.word	0x40012200

08000b5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d15c      	bne.n	8000c38 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000bde:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000be2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0xec>)
 8000bf4:	f003 f8a2 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_ADC_MspInit+0xf0>)
 8000c0c:	f003 f896 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c10:	230f      	movs	r3, #15
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xf4>)
 8000c24:	f003 f88a 	bl	8003d3c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f002 fed4 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c32:	2012      	movs	r0, #18
 8000c34:	f002 feed 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40012200 	.word	0x40012200
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <config_ADC+0x38>)
 8000c7e:	f002 fb77 	bl	8003370 <HAL_ADC_ConfigChannel>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200103a8 	.word	0x200103a8

08000c90 <read_ADC>:

uint32_t read_ADC(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	Read = false;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <read_ADC+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <read_ADC+0x38>)
 8000c9c:	f002 f920 	bl	8002ee0 <HAL_ADC_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <read_ADC+0x2c>
	{
	  while(!Read);
 8000ca6:	bf00      	nop
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <read_ADC+0x34>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f8      	bne.n	8000ca8 <read_ADC+0x18>
	  HAL_ADC_Stop_IT(&hadc3);
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <read_ADC+0x38>)
 8000cb8:	f002 f9ea 	bl	8003090 <HAL_ADC_Stop_IT>
	}
	return adc_value;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <read_ADC+0x3c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200003a0 	.word	0x200003a0
 8000cc8:	200103a8 	.word	0x200103a8
 8000ccc:	200103a4 	.word	0x200103a4

08000cd0 <HAL_ADC_ConvCpltCallback>:

	adc_buf_index = 0;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if(software)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_ADC_ConvCpltCallback+0x60>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <HAL_ADC_ConvCpltCallback+0x24>
	{
		adc_value = HAL_ADC_GetValue(&hadc3);
 8000ce0:	4814      	ldr	r0, [pc, #80]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x64>)
 8000ce2:	f002 fb23 	bl	800332c <HAL_ADC_GetValue>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_ADC_ConvCpltCallback+0x68>)
 8000cea:	6013      	str	r3, [r2, #0]
		Read = true;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
		adc_buf[adc_buf_index] = HAL_ADC_GetValue(&hadc3);
		process_buf(adc_buf, adc_buf_index);
		adc_buf_index++;
		adc_buf_index &= ADC_BUF_SIZE;
	}
}
 8000cf2:	e019      	b.n	8000d28 <HAL_ADC_ConvCpltCallback+0x58>
		adc_buf[adc_buf_index] = HAL_ADC_GetValue(&hadc3);
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	480e      	ldr	r0, [pc, #56]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cfa:	f002 fb17 	bl	800332c <HAL_ADC_GetValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000d02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		process_buf(adc_buf, adc_buf_index);
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000d0e:	f001 f92b 	bl	8001f68 <process_buf>
		adc_buf_index++;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d1a:	6013      	str	r3, [r2, #0]
		adc_buf_index &= ADC_BUF_SIZE;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	200003a1 	.word	0x200003a1
 8000d34:	200103a8 	.word	0x200103a8
 8000d38:	200103a4 	.word	0x200103a4
 8000d3c:	200003a0 	.word	0x200003a0
 8000d40:	20000288 	.word	0x20000288
 8000d44:	200104f8 	.word	0x200104f8

08000d48 <check_command>:
unsigned int counter = 0;

float coef[10] = {-0.0416,-0.0865,0.0000,0.2018,0.3742,0.3742,0.2018,0.0000,-0.0865,-0.0416};

unsigned char check_command(char* message)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	char cmd = INV;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000d54:	2203      	movs	r2, #3
 8000d56:	4990      	ldr	r1, [pc, #576]	; (8000f98 <check_command+0x250>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f007 fb9e 	bl	800849a <strncmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <check_command+0x20>
 8000d64:	220b      	movs	r2, #11
 8000d66:	e000      	b.n	8000d6a <check_command+0x22>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FNF", 3)) * FNF;
 8000d70:	2203      	movs	r2, #3
 8000d72:	498a      	ldr	r1, [pc, #552]	; (8000f9c <check_command+0x254>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f007 fb90 	bl	800849a <strncmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <check_command+0x3c>
 8000d80:	2210      	movs	r2, #16
 8000d82:	e000      	b.n	8000d86 <check_command+0x3e>
 8000d84:	2200      	movs	r2, #0
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4413      	add	r3, r2
 8000d8a:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FFF", 3)) * FFF;
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4984      	ldr	r1, [pc, #528]	; (8000fa0 <check_command+0x258>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f007 fb82 	bl	800849a <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <check_command+0x58>
 8000d9c:	2211      	movs	r2, #17
 8000d9e:	e000      	b.n	8000da2 <check_command+0x5a>
 8000da0:	2200      	movs	r2, #0
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4413      	add	r3, r2
 8000da6:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FNI", 3)) * FNI;
 8000da8:	2203      	movs	r2, #3
 8000daa:	497e      	ldr	r1, [pc, #504]	; (8000fa4 <check_command+0x25c>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f007 fb74 	bl	800849a <strncmp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <check_command+0x74>
 8000db8:	220e      	movs	r2, #14
 8000dba:	e000      	b.n	8000dbe <check_command+0x76>
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FFI", 3)) * FFI;
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4978      	ldr	r1, [pc, #480]	; (8000fa8 <check_command+0x260>)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f007 fb66 	bl	800849a <strncmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <check_command+0x90>
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	e000      	b.n	8000dda <check_command+0x92>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	4413      	add	r3, r2
 8000dde:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "ST", 2)) * ST;
 8000de0:	2202      	movs	r2, #2
 8000de2:	4972      	ldr	r1, [pc, #456]	; (8000fac <check_command+0x264>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f007 fb58 	bl	800849a <strncmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <check_command+0xac>
 8000df0:	2213      	movs	r2, #19
 8000df2:	e000      	b.n	8000df6 <check_command+0xae>
 8000df4:	2200      	movs	r2, #0
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4413      	add	r3, r2
 8000dfa:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	496c      	ldr	r1, [pc, #432]	; (8000fb0 <check_command+0x268>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f007 fb4a 	bl	800849a <strncmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4413      	add	r3, r2
 8000e18:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4965      	ldr	r1, [pc, #404]	; (8000fb4 <check_command+0x26c>)
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f007 fb3b 	bl	800849a <strncmp>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <check_command+0xe6>
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	e000      	b.n	8000e30 <check_command+0xe8>
 8000e2e:	2200      	movs	r2, #0
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4413      	add	r3, r2
 8000e34:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000e36:	2202      	movs	r2, #2
 8000e38:	495f      	ldr	r1, [pc, #380]	; (8000fb8 <check_command+0x270>)
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f007 fb2d 	bl	800849a <strncmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <check_command+0x102>
 8000e46:	2203      	movs	r2, #3
 8000e48:	e000      	b.n	8000e4c <check_command+0x104>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4413      	add	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000e52:	2202      	movs	r2, #2
 8000e54:	4959      	ldr	r1, [pc, #356]	; (8000fbc <check_command+0x274>)
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f007 fb1f 	bl	800849a <strncmp>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <check_command+0x11e>
 8000e62:	2204      	movs	r2, #4
 8000e64:	e000      	b.n	8000e68 <check_command+0x120>
 8000e66:	2200      	movs	r2, #0
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4953      	ldr	r1, [pc, #332]	; (8000fc0 <check_command+0x278>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f007 fb11 	bl	800849a <strncmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <check_command+0x13a>
 8000e7e:	2205      	movs	r2, #5
 8000e80:	e000      	b.n	8000e84 <check_command+0x13c>
 8000e82:	2200      	movs	r2, #0
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4413      	add	r3, r2
 8000e88:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	494d      	ldr	r1, [pc, #308]	; (8000fc4 <check_command+0x27c>)
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f007 fb03 	bl	800849a <strncmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <check_command+0x156>
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	e000      	b.n	8000ea0 <check_command+0x158>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4947      	ldr	r1, [pc, #284]	; (8000fc8 <check_command+0x280>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f007 faf5 	bl	800849a <strncmp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <check_command+0x172>
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	e000      	b.n	8000ebc <check_command+0x174>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WA", 2)) * WA;
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4941      	ldr	r1, [pc, #260]	; (8000fcc <check_command+0x284>)
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f007 fae7 	bl	800849a <strncmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <check_command+0x18e>
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	e000      	b.n	8000ed8 <check_command+0x190>
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	4413      	add	r3, r2
 8000edc:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "SP", 2)) * SP;
 8000ede:	2202      	movs	r2, #2
 8000ee0:	493b      	ldr	r1, [pc, #236]	; (8000fd0 <check_command+0x288>)
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f007 fad9 	bl	800849a <strncmp>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <check_command+0x1aa>
 8000eee:	220c      	movs	r2, #12
 8000ef0:	e000      	b.n	8000ef4 <check_command+0x1ac>
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "AC", 2)) * AC;
 8000efa:	2202      	movs	r2, #2
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <check_command+0x28c>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f007 facb 	bl	800849a <strncmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <check_command+0x1c6>
 8000f0a:	220d      	movs	r2, #13
 8000f0c:	e000      	b.n	8000f10 <check_command+0x1c8>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4413      	add	r3, r2
 8000f14:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S ", 2)) * S;
 8000f16:	2202      	movs	r2, #2
 8000f18:	492f      	ldr	r1, [pc, #188]	; (8000fd8 <check_command+0x290>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f007 fabd 	bl	800849a <strncmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <check_command+0x1e2>
 8000f26:	2212      	movs	r2, #18
 8000f28:	e000      	b.n	8000f2c <check_command+0x1e4>
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4413      	add	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S\r", 2)) * S;
 8000f32:	2202      	movs	r2, #2
 8000f34:	4929      	ldr	r1, [pc, #164]	; (8000fdc <check_command+0x294>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f007 faaf 	bl	800849a <strncmp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <check_command+0x1fe>
 8000f42:	2212      	movs	r2, #18
 8000f44:	e000      	b.n	8000f48 <check_command+0x200>
 8000f46:	2200      	movs	r2, #0
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <check_command+0x298>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <check_command+0x218>
 8000f5c:	2209      	movs	r2, #9
 8000f5e:	e000      	b.n	8000f62 <check_command+0x21a>
 8000f60:	2200      	movs	r2, #0
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4413      	add	r3, r2
 8000f66:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <check_command+0x29c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <check_command+0x232>
 8000f76:	220a      	movs	r2, #10
 8000f78:	e000      	b.n	8000f7c <check_command+0x234>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4413      	add	r3, r2
 8000f80:	73fb      	strb	r3, [r7, #15]

	if(cmd > ST)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b13      	cmp	r3, #19
 8000f86:	d901      	bls.n	8000f8c <check_command+0x244>
		cmd = INV;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800c640 	.word	0x0800c640
 8000f9c:	0800c644 	.word	0x0800c644
 8000fa0:	0800c648 	.word	0x0800c648
 8000fa4:	0800c64c 	.word	0x0800c64c
 8000fa8:	0800c650 	.word	0x0800c650
 8000fac:	0800c654 	.word	0x0800c654
 8000fb0:	0800c658 	.word	0x0800c658
 8000fb4:	0800c65c 	.word	0x0800c65c
 8000fb8:	0800c660 	.word	0x0800c660
 8000fbc:	0800c664 	.word	0x0800c664
 8000fc0:	0800c668 	.word	0x0800c668
 8000fc4:	0800c66c 	.word	0x0800c66c
 8000fc8:	0800c670 	.word	0x0800c670
 8000fcc:	0800c674 	.word	0x0800c674
 8000fd0:	0800c678 	.word	0x0800c678
 8000fd4:	0800c67c 	.word	0x0800c67c
 8000fd8:	0800c680 	.word	0x0800c680
 8000fdc:	0800c684 	.word	0x0800c684
 8000fe0:	0800c688 	.word	0x0800c688
 8000fe4:	0800c68c 	.word	0x0800c68c

08000fe8 <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <proc_inv_cmd+0x18>)
 8000ff2:	f001 fdb7 	bl	8002b64 <send_UART>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800c690 	.word	0x0800c690

08001004 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	f107 0210 	add.w	r2, r7, #16
 8001014:	4932      	ldr	r1, [pc, #200]	; (80010e0 <proc_mr_cmd+0xdc>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f007 f9c6 	bl	80083a8 <siscanf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b02      	cmp	r3, #2
 8001020:	d157      	bne.n	80010d2 <proc_mr_cmd+0xce>
	{
 8001022:	466b      	mov	r3, sp
 8001024:	461d      	mov	r5, r3
		char data[length];
 8001026:	68fc      	ldr	r4, [r7, #12]
 8001028:	4623      	mov	r3, r4
 800102a:	3b01      	subs	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4620      	mov	r0, r4
 8001030:	f04f 0100 	mov.w	r1, #0
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	00cb      	lsls	r3, r1, #3
 800103e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001042:	00c2      	lsls	r2, r0, #3
 8001044:	4620      	mov	r0, r4
 8001046:	f04f 0100 	mov.w	r1, #0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00cb      	lsls	r3, r1, #3
 8001054:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001058:	00c2      	lsls	r2, r0, #3
 800105a:	1de3      	adds	r3, r4, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3300      	adds	r3, #0
 8001068:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	68f9      	ldr	r1, [r7, #12]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fd01 	bl	8001a78 <memory_read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d025      	beq.n	80010c8 <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <proc_mr_cmd+0xe0>)
 8001084:	f007 fa1b 	bl	80084be <strncpy>

			sprintf((char*) message, "Memory read: ");
 8001088:	4917      	ldr	r1, [pc, #92]	; (80010e8 <proc_mr_cmd+0xe4>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f007 f96c 	bl	8008368 <siprintf>

			for(int i = 0; i < length; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e010      	b.n	80010b8 <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff f8dc 	bl	8000254 <strlen>
 800109c:	4602      	mov	r2, r0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1898      	adds	r0, r3, r2
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <proc_mr_cmd+0xe8>)
 80010ae:	f007 f95b 	bl	8008368 <siprintf>
			for(int i = 0; i < length; i++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3ea      	bcc.n	8001096 <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fd4f 	bl	8002b64 <send_UART>
 80010c6:	e002      	b.n	80010ce <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <proc_mr_cmd+0xec>)
 80010ca:	f001 fd4b 	bl	8002b64 <send_UART>
 80010ce:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 80010d0:	e002      	b.n	80010d8 <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <proc_mr_cmd+0xf0>)
 80010d4:	f001 fd46 	bl	8002b64 <send_UART>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}
 80010e0:	0800c6b8 	.word	0x0800c6b8
 80010e4:	200144f4 	.word	0x200144f4
 80010e8:	0800c6c4 	.word	0x0800c6c4
 80010ec:	0800c6d4 	.word	0x0800c6d4
 80010f0:	0800c6dc 	.word	0x0800c6dc
 80010f4:	0800c710 	.word	0x0800c710

080010f8 <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8001100:	f107 0110 	add.w	r1, r7, #16
 8001104:	f107 0214 	add.w	r2, r7, #20
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	460b      	mov	r3, r1
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <proc_mw_cmd+0x64>)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f007 f948 	bl	80083a8 <siscanf>
 8001118:	4603      	mov	r3, r0
 800111a:	2b03      	cmp	r3, #3
 800111c:	d116      	bne.n	800114c <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fcdb 	bl	8001ae0 <memory_write>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d009      	beq.n	8001144 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <proc_mw_cmd+0x68>)
 8001138:	f007 f9c1 	bl	80084be <strncpy>
			send_UART("Memory written with success.");
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <proc_mw_cmd+0x6c>)
 800113e:	f001 fd11 	bl	8002b64 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8001142:	e006      	b.n	8001152 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <proc_mw_cmd+0x70>)
 8001146:	f001 fd0d 	bl	8002b64 <send_UART>
}
 800114a:	e002      	b.n	8001152 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <proc_mw_cmd+0x74>)
 800114e:	f001 fd09 	bl	8002b64 <send_UART>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800c738 	.word	0x0800c738
 8001160:	200144f4 	.word	0x200144f4
 8001164:	0800c744 	.word	0x0800c744
 8001168:	0800c764 	.word	0x0800c764
 800116c:	0800c798 	.word	0x0800c798

08001170 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	4918      	ldr	r1, [pc, #96]	; (80011e4 <proc_mi_cmd+0x74>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 f910 	bl	80083a8 <siscanf>
 8001188:	4603      	mov	r3, r0
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f87b 	bl	8002290 <is_GPIO_pin_free>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fcd2 	bl	8001b50 <make_pin_input>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80011b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <proc_mi_cmd+0x78>)
 80011ba:	f007 f980 	bl	80084be <strncpy>
				send_UART("Pin(s) set as input with success.");
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <proc_mi_cmd+0x7c>)
 80011c0:	f001 fcd0 	bl	8002b64 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 80011c4:	e00a      	b.n	80011dc <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <proc_mi_cmd+0x80>)
 80011c8:	f001 fccc 	bl	8002b64 <send_UART>
}
 80011cc:	e006      	b.n	80011dc <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <proc_mi_cmd+0x84>)
 80011d0:	f001 fcc8 	bl	8002b64 <send_UART>
}
 80011d4:	e002      	b.n	80011dc <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <proc_mi_cmd+0x88>)
 80011d8:	f001 fcc4 	bl	8002b64 <send_UART>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800c7c4 	.word	0x0800c7c4
 80011e8:	200144f4 	.word	0x200144f4
 80011ec:	0800c7d0 	.word	0x0800c7d0
 80011f0:	0800c7f4 	.word	0x0800c7f4
 80011f4:	0800c828 	.word	0x0800c828
 80011f8:	0800c860 	.word	0x0800c860

080011fc <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	4918      	ldr	r1, [pc, #96]	; (8001270 <proc_mo_cmd+0x74>)
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f007 f8ca 	bl	80083a8 <siscanf>
 8001214:	4603      	mov	r3, r0
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f001 f835 	bl	8002290 <is_GPIO_pin_free>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd28 	bl	8001c88 <make_pin_output>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800123e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <proc_mo_cmd+0x78>)
 8001246:	f007 f93a 	bl	80084be <strncpy>
				send_UART("Pin(s) set as output with success.");
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <proc_mo_cmd+0x7c>)
 800124c:	f001 fc8a 	bl	8002b64 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8001250:	e00a      	b.n	8001268 <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8001252:	480a      	ldr	r0, [pc, #40]	; (800127c <proc_mo_cmd+0x80>)
 8001254:	f001 fc86 	bl	8002b64 <send_UART>
}
 8001258:	e006      	b.n	8001268 <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <proc_mo_cmd+0x84>)
 800125c:	f001 fc82 	bl	8002b64 <send_UART>
}
 8001260:	e002      	b.n	8001268 <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <proc_mo_cmd+0x88>)
 8001264:	f001 fc7e 	bl	8002b64 <send_UART>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800c88c 	.word	0x0800c88c
 8001274:	200144f4 	.word	0x200144f4
 8001278:	0800c898 	.word	0x0800c898
 800127c:	0800c8bc 	.word	0x0800c8bc
 8001280:	0800c828 	.word	0x0800c828
 8001284:	0800c8f4 	.word	0x0800c8f4

08001288 <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	f107 0220 	add.w	r2, r7, #32
 8001298:	492a      	ldr	r1, [pc, #168]	; (8001344 <proc_rd_cmd+0xbc>)
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f007 f884 	bl	80083a8 <siscanf>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d147      	bne.n	8001336 <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	69f9      	ldr	r1, [r7, #28]
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fd88 	bl	8001dc4 <read_dig_input>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d039      	beq.n	800132e <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80012ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4821      	ldr	r0, [pc, #132]	; (8001348 <proc_rd_cmd+0xc0>)
 80012c2:	f007 f8fc 	bl	80084be <strncpy>

			sprintf((char*) message, "Digital input read: ");
 80012c6:	4921      	ldr	r1, [pc, #132]	; (800134c <proc_rd_cmd+0xc4>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f007 f84d 	bl	8008368 <siprintf>

			for(int i = 15; i >= 0; i--)
 80012ce:	230f      	movs	r3, #15
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	e025      	b.n	8001320 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7fe ffbd 	bl	8000254 <strlen>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1898      	adds	r0, r3, r2
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4918      	ldr	r1, [pc, #96]	; (8001350 <proc_rd_cmd+0xc8>)
 80012ee:	f007 f83b 	bl	8008368 <siprintf>

				if(!(i % 4) && i)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10e      	bne.n	800131a <proc_rd_cmd+0x92>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7fe ffa6 	bl	8000254 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	4910      	ldr	r1, [pc, #64]	; (8001354 <proc_rd_cmd+0xcc>)
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3b01      	subs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	dad6      	bge.n	80012d4 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f001 fc1c 	bl	8002b64 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 800132c:	e006      	b.n	800133c <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <proc_rd_cmd+0xd0>)
 8001330:	f001 fc18 	bl	8002b64 <send_UART>
}
 8001334:	e002      	b.n	800133c <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <proc_rd_cmd+0xd4>)
 8001338:	f001 fc14 	bl	8002b64 <send_UART>
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0800c920 	.word	0x0800c920
 8001348:	200144f4 	.word	0x200144f4
 800134c:	0800c92c 	.word	0x0800c92c
 8001350:	0800c944 	.word	0x0800c944
 8001354:	0800c948 	.word	0x0800c948
 8001358:	0800c94c 	.word	0x0800c94c
 800135c:	0800c984 	.word	0x0800c984

08001360 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 8001368:	f107 0110 	add.w	r1, r7, #16
 800136c:	f107 0214 	add.w	r2, r7, #20
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	4918      	ldr	r1, [pc, #96]	; (80013dc <proc_wd_cmd+0x7c>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f007 f814 	bl	80083a8 <siscanf>
 8001380:	4603      	mov	r3, r0
 8001382:	2b03      	cmp	r3, #3
 8001384:	d123      	bne.n	80013ce <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 ff7f 	bl	8002290 <is_GPIO_pin_free>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d016      	beq.n	80013c6 <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd5a 	bl	8001e58 <write_dig_output>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <proc_wd_cmd+0x80>)
 80013b2:	f007 f884 	bl	80084be <strncpy>
				send_UART("Digital output value wrote with success.");
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <proc_wd_cmd+0x84>)
 80013b8:	f001 fbd4 	bl	8002b64 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 80013bc:	e00a      	b.n	80013d4 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <proc_wd_cmd+0x88>)
 80013c0:	f001 fbd0 	bl	8002b64 <send_UART>
}
 80013c4:	e006      	b.n	80013d4 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <proc_wd_cmd+0x8c>)
 80013c8:	f001 fbcc 	bl	8002b64 <send_UART>
}
 80013cc:	e002      	b.n	80013d4 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <proc_wd_cmd+0x90>)
 80013d0:	f001 fbc8 	bl	8002b64 <send_UART>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800c9b4 	.word	0x0800c9b4
 80013e0:	200144f4 	.word	0x200144f4
 80013e4:	0800c9c0 	.word	0x0800c9c0
 80013e8:	0800c9ec 	.word	0x0800c9ec
 80013ec:	0800c828 	.word	0x0800c828
 80013f0:	0800ca28 	.word	0x0800ca28
 80013f4:	00000000 	.word	0x00000000

080013f8 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	461a      	mov	r2, r3
 8001406:	492c      	ldr	r1, [pc, #176]	; (80014b8 <proc_ra_cmd+0xc0>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f006 ffcd 	bl	80083a8 <siscanf>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d13f      	bne.n	8001494 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fd65 	bl	8001eec <analog_read>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d031      	beq.n	800148c <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <proc_ra_cmd+0xc4>)
 8001430:	f007 f845 	bl	80084be <strncpy>

			float volts = (float) value * 3.3 / 4095;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001442:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80014a8 <proc_ra_cmd+0xb0>
 8001446:	ee27 6b06 	vmul.f64	d6, d7, d6
 800144a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80014b0 <proc_ra_cmd+0xb8>
 800144e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001452:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001456:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800145a:	4919      	ldr	r1, [pc, #100]	; (80014c0 <proc_ra_cmd+0xc8>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f006 ff83 	bl	8008368 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7fe fef6 	bl	8000254 <strlen>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	edd7 7a05 	vldr	s15, [r7, #20]
 8001474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001478:	ed8d 7b00 	vstr	d7, [sp]
 800147c:	4911      	ldr	r1, [pc, #68]	; (80014c4 <proc_ra_cmd+0xcc>)
 800147e:	4618      	mov	r0, r3
 8001480:	f006 ff72 	bl	8008368 <siprintf>

			send_UART((char*) message);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 fb6d 	bl	8002b64 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 800148a:	e006      	b.n	800149a <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <proc_ra_cmd+0xd0>)
 800148e:	f001 fb69 	bl	8002b64 <send_UART>
}
 8001492:	e002      	b.n	800149a <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <proc_ra_cmd+0xd4>)
 8001496:	f001 fb65 	bl	8002b64 <send_UART>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	66666666 	.word	0x66666666
 80014ac:	400a6666 	.word	0x400a6666
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40affe00 	.word	0x40affe00
 80014b8:	0800ca5c 	.word	0x0800ca5c
 80014bc:	200144f4 	.word	0x200144f4
 80014c0:	0800ca64 	.word	0x0800ca64
 80014c4:	0800ca80 	.word	0x0800ca80
 80014c8:	0800ca8c 	.word	0x0800ca8c
 80014cc:	0800cac0 	.word	0x0800cac0

080014d0 <proc_wa_cmd>:

void proc_wa_cmd(char* message)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    unsigned int addr3, volts;

    if(sscanf((char*) message, "WA %x %d", &addr3, &volts) == 2)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	491f      	ldr	r1, [pc, #124]	; (8001560 <proc_wa_cmd+0x90>)
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f006 ff60 	bl	80083a8 <siscanf>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d12d      	bne.n	800154a <proc_wa_cmd+0x7a>
    {
    	float value = (float) volts * 4095 / 3.3;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001564 <proc_wa_cmd+0x94>
 80014fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001500:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001504:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001558 <proc_wa_cmd+0x88>
 8001508:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800150c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001510:	edc7 7a05 	vstr	s15, [r7, #20]

        if(analog_write(addr3, value))
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151e:	ee17 1a90 	vmov	r1, s15
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fcfc 	bl	8001f20 <analog_write>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <proc_wa_cmd+0x72>
        {
            strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <proc_wa_cmd+0x98>)
 8001536:	f006 ffc2 	bl	80084be <strncpy>
            send_UART("Analog value wrote with success.");
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <proc_wa_cmd+0x9c>)
 800153c:	f001 fb12 	bl	8002b64 <send_UART>
        else
            send_UART("Invalid Analog Write instruction argument values.");
    }
    else
        send_UART("Invalid Analog Write instruction syntax.");
}
 8001540:	e006      	b.n	8001550 <proc_wa_cmd+0x80>
            send_UART("Invalid Analog Write instruction argument values.");
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <proc_wa_cmd+0xa0>)
 8001544:	f001 fb0e 	bl	8002b64 <send_UART>
}
 8001548:	e002      	b.n	8001550 <proc_wa_cmd+0x80>
        send_UART("Invalid Analog Write instruction syntax.");
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <proc_wa_cmd+0xa4>)
 800154c:	f001 fb0a 	bl	8002b64 <send_UART>
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	66666666 	.word	0x66666666
 800155c:	400a6666 	.word	0x400a6666
 8001560:	0800cae8 	.word	0x0800cae8
 8001564:	457ff000 	.word	0x457ff000
 8001568:	200144f4 	.word	0x200144f4
 800156c:	0800caf4 	.word	0x0800caf4
 8001570:	0800cb18 	.word	0x0800cb18
 8001574:	0800cb4c 	.word	0x0800cb4c

08001578 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0c4      	sub	sp, #272	; 0x110
 800157c:	af00      	add	r7, sp, #0
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b0d      	cmp	r3, #13
 800158c:	d12a      	bne.n	80015e4 <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001594:	e010      	b.n	80015b8 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <proc_last_cmd+0x7c>)
 8001598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 80015ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80015b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015bc:	2bff      	cmp	r3, #255	; 0xff
 80015be:	ddea      	ble.n	8001596 <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fbbf 	bl	8000d48 <check_command>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 80015d0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <proc_last_cmd+0x80>)
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	f107 0208 	add.w	r2, r7, #8
 80015de:	4610      	mov	r0, r2
 80015e0:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80015e2:	e002      	b.n	80015ea <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <proc_last_cmd+0x84>)
 80015e6:	f001 fabd 	bl	8002b64 <send_UART>
}
 80015ea:	bf00      	nop
 80015ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200144f4 	.word	0x200144f4
 80015f8:	20000000 	.word	0x20000000
 80015fc:	0800cb78 	.word	0x0800cb78

08001600 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0d      	cmp	r3, #13
 8001610:	d109      	bne.n	8001626 <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <proc_help_cmd+0x34>)
 800161a:	f006 ff50 	bl	80084be <strncpy>

		send_UART("MR <addr> <length>\n\r"
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <proc_help_cmd+0x38>)
 8001620:	f001 faa0 	bl	8002b64 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 8001624:	e002      	b.n	800162c <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <proc_help_cmd+0x3c>)
 8001628:	f001 fa9c 	bl	8002b64 <send_UART>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200144f4 	.word	0x200144f4
 8001638:	0800cb98 	.word	0x0800cb98
 800163c:	0800cc54 	.word	0x0800cc54

08001640 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3303      	adds	r3, #3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b0d      	cmp	r3, #13
 8001650:	d113      	bne.n	800167a <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <proc_ver_cmd+0x48>)
 800165a:	f006 ff30 	bl	80084be <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <proc_ver_cmd+0x4c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	4909      	ldr	r1, [pc, #36]	; (800168c <proc_ver_cmd+0x4c>)
 8001666:	600a      	str	r2, [r1, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4909      	ldr	r1, [pc, #36]	; (8001690 <proc_ver_cmd+0x50>)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f006 fe7b 	bl	8008368 <siprintf>
		send_UART((char*) message);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f001 fa76 	bl	8002b64 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001678:	e002      	b.n	8001680 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <proc_ver_cmd+0x54>)
 800167c:	f001 fa72 	bl	8002b64 <send_UART>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200144f4 	.word	0x200144f4
 800168c:	20000290 	.word	0x20000290
 8001690:	0800cc74 	.word	0x0800cc74
 8001694:	0800cca8 	.word	0x0800cca8

08001698 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "SP %s %d", timeunit, &unit) == 2)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	f107 0208 	add.w	r2, r7, #8
 80016a8:	491f      	ldr	r1, [pc, #124]	; (8001728 <proc_sp_cmd+0x90>)
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 fe7c 	bl	80083a8 <siscanf>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d131      	bne.n	800171a <proc_sp_cmd+0x82>
		{
			if(!strcmp(timeunit,"ms") == 0 || !strcmp(timeunit,"s") == 0 || !strcmp(timeunit,"us") == 0)
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	491c      	ldr	r1, [pc, #112]	; (800172c <proc_sp_cmd+0x94>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fdbf 	bl	8000240 <strcmp>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <proc_sp_cmd+0x54>
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4918      	ldr	r1, [pc, #96]	; (8001730 <proc_sp_cmd+0x98>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fdb6 	bl	8000240 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <proc_sp_cmd+0x54>
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <proc_sp_cmd+0x9c>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fdad 	bl	8000240 <strcmp>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <proc_sp_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <proc_sp_cmd+0xa0>)
 80016f4:	f006 fee3 	bl	80084be <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <proc_sp_cmd+0xa4>)
 8001700:	f006 fec3 	bl	800848a <strcpy>
				sp_config.unit = unit;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <proc_sp_cmd+0xa8>)
 8001708:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <proc_sp_cmd+0xac>)
 800170c:	f001 fa2a 	bl	8002b64 <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 8001710:	e006      	b.n	8001720 <proc_sp_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <proc_sp_cmd+0xb0>)
 8001714:	f001 fa26 	bl	8002b64 <send_UART>
}
 8001718:	e002      	b.n	8001720 <proc_sp_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <proc_sp_cmd+0xb4>)
 800171c:	f001 fa22 	bl	8002b64 <send_UART>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800ccc8 	.word	0x0800ccc8
 800172c:	0800ccd4 	.word	0x0800ccd4
 8001730:	0800ccd8 	.word	0x0800ccd8
 8001734:	0800ccdc 	.word	0x0800ccdc
 8001738:	200144f4 	.word	0x200144f4
 800173c:	20000060 	.word	0x20000060
 8001740:	20000054 	.word	0x20000054
 8001744:	0800cce0 	.word	0x0800cce0
 8001748:	0800cd14 	.word	0x0800cd14
 800174c:	0800cd48 	.word	0x0800cd48

08001750 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	461a      	mov	r2, r3
 800175e:	4912      	ldr	r1, [pc, #72]	; (80017a8 <proc_ac_cmd+0x58>)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f006 fe21 	bl	80083a8 <siscanf>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d116      	bne.n	800179a <proc_ac_cmd+0x4a>
	{
		if(addr3 > 0 && addr3 <= 0x0F)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <proc_ac_cmd+0x42>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80c      	bhi.n	8001792 <proc_ac_cmd+0x42>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <proc_ac_cmd+0x5c>)
 8001780:	f006 fe9d 	bl	80084be <strncpy>

			sp_config.addr3 = addr3;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <proc_ac_cmd+0x60>)
 8001788:	6013      	str	r3, [r2, #0]
			send_UART("Analog Channel for Sampling changed with success.");
 800178a:	480a      	ldr	r0, [pc, #40]	; (80017b4 <proc_ac_cmd+0x64>)
 800178c:	f001 f9ea 	bl	8002b64 <send_UART>
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 8001790:	e006      	b.n	80017a0 <proc_ac_cmd+0x50>
			send_UART("Invalid Analog Channel instruction argument values.");
 8001792:	4809      	ldr	r0, [pc, #36]	; (80017b8 <proc_ac_cmd+0x68>)
 8001794:	f001 f9e6 	bl	8002b64 <send_UART>
}
 8001798:	e002      	b.n	80017a0 <proc_ac_cmd+0x50>
		send_UART("Invalid Analog Channel instruction syntax.");
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <proc_ac_cmd+0x6c>)
 800179c:	f001 f9e2 	bl	8002b64 <send_UART>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0800cd74 	.word	0x0800cd74
 80017ac:	200144f4 	.word	0x200144f4
 80017b0:	20000054 	.word	0x20000054
 80017b4:	0800cd7c 	.word	0x0800cd7c
 80017b8:	0800cdb0 	.word	0x0800cdb0
 80017bc:	0800cde4 	.word	0x0800cde4

080017c0 <proc_fni_cmd>:

void proc_fni_cmd(char* message)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3303      	adds	r3, #3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b0d      	cmp	r3, #13
 80017d0:	d10f      	bne.n	80017f2 <proc_fni_cmd+0x32>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <proc_fni_cmd+0x40>)
 80017da:	f006 fe70 	bl	80084be <strncpy>
		sp_config.filter_type = Inf;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <proc_fni_cmd+0x44>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
		sp_config.filter = true;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <proc_fni_cmd+0x44>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <proc_fni_cmd+0x48>)
 80017ec:	f001 f9ba 	bl	8002b64 <send_UART>
	}
	else
		send_UART("Invalid IRR Filter On instruction syntax.");
}
 80017f0:	e002      	b.n	80017f8 <proc_fni_cmd+0x38>
		send_UART("Invalid IRR Filter On instruction syntax.");
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <proc_fni_cmd+0x4c>)
 80017f4:	f001 f9b6 	bl	8002b64 <send_UART>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200144f4 	.word	0x200144f4
 8001804:	20000054 	.word	0x20000054
 8001808:	0800ce10 	.word	0x0800ce10
 800180c:	0800ce1c 	.word	0x0800ce1c

08001810 <proc_ffi_cmd>:

void proc_ffi_cmd(char* message)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3303      	adds	r3, #3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0d      	cmp	r3, #13
 8001820:	d11b      	bne.n	800185a <proc_ffi_cmd+0x4a>
	{
		if(sp_config.filter_type == Inf && sp_config.filter){
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <proc_ffi_cmd+0x58>)
 8001824:	7bdb      	ldrb	r3, [r3, #15]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d113      	bne.n	8001852 <proc_ffi_cmd+0x42>
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <proc_ffi_cmd+0x58>)
 800182c:	7b9b      	ldrb	r3, [r3, #14]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <proc_ffi_cmd+0x42>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <proc_ffi_cmd+0x5c>)
 800183a:	f006 fe40 	bl	80084be <strncpy>
			sp_config.filter_type = Inf;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <proc_ffi_cmd+0x58>)
 8001840:	2201      	movs	r2, #1
 8001842:	73da      	strb	r2, [r3, #15]
			sp_config.filter = false;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <proc_ffi_cmd+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <proc_ffi_cmd+0x60>)
 800184c:	f001 f98a 	bl	8002b64 <send_UART>
		else
			send_UART("IRR Filter is already off.");
	}
	else
		send_UART("Invalid IRR Filter Off instruction syntax.");
}
 8001850:	e006      	b.n	8001860 <proc_ffi_cmd+0x50>
			send_UART("IRR Filter is already off.");
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <proc_ffi_cmd+0x64>)
 8001854:	f001 f986 	bl	8002b64 <send_UART>
}
 8001858:	e002      	b.n	8001860 <proc_ffi_cmd+0x50>
		send_UART("Invalid IRR Filter Off instruction syntax.");
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <proc_ffi_cmd+0x68>)
 800185c:	f001 f982 	bl	8002b64 <send_UART>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000054 	.word	0x20000054
 800186c:	200144f4 	.word	0x200144f4
 8001870:	0800ce48 	.word	0x0800ce48
 8001874:	0800ce54 	.word	0x0800ce54
 8001878:	0800ce70 	.word	0x0800ce70

0800187c <proc_fnf_cmd>:

void proc_fnf_cmd(char* message)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3303      	adds	r3, #3
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b0d      	cmp	r3, #13
 800188c:	d10f      	bne.n	80018ae <proc_fnf_cmd+0x32>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800188e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <proc_fnf_cmd+0x40>)
 8001896:	f006 fe12 	bl	80084be <strncpy>
		sp_config.filter_type = Fin;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <proc_fnf_cmd+0x44>)
 800189c:	2202      	movs	r2, #2
 800189e:	73da      	strb	r2, [r3, #15]
		sp_config.filter = true;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <proc_fnf_cmd+0x44>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <proc_fnf_cmd+0x48>)
 80018a8:	f001 f95c 	bl	8002b64 <send_UART>
	}
	else
		send_UART("Invalid FIR Filter On instruction syntax.");
}
 80018ac:	e002      	b.n	80018b4 <proc_fnf_cmd+0x38>
		send_UART("Invalid FIR Filter On instruction syntax.");
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <proc_fnf_cmd+0x4c>)
 80018b0:	f001 f958 	bl	8002b64 <send_UART>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200144f4 	.word	0x200144f4
 80018c0:	20000054 	.word	0x20000054
 80018c4:	0800ce10 	.word	0x0800ce10
 80018c8:	0800ce9c 	.word	0x0800ce9c

080018cc <proc_fff_cmd>:

void proc_fff_cmd(char* message)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3303      	adds	r3, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b0d      	cmp	r3, #13
 80018dc:	d11b      	bne.n	8001916 <proc_fff_cmd+0x4a>
	{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <proc_fff_cmd+0x58>)
 80018e6:	f006 fdea 	bl	80084be <strncpy>
		if(sp_config.filter_type == Inf && sp_config.filter){
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <proc_fff_cmd+0x5c>)
 80018ec:	7bdb      	ldrb	r3, [r3, #15]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10d      	bne.n	800190e <proc_fff_cmd+0x42>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <proc_fff_cmd+0x5c>)
 80018f4:	7b9b      	ldrb	r3, [r3, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <proc_fff_cmd+0x42>
			sp_config.filter_type = Fin;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <proc_fff_cmd+0x5c>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	73da      	strb	r2, [r3, #15]
			sp_config.filter = false;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <proc_fff_cmd+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <proc_fff_cmd+0x60>)
 8001908:	f001 f92c 	bl	8002b64 <send_UART>
		else
			send_UART("FIR Filter is already off.");
	}
	else
		send_UART("Invalid FIR Filter Off instruction syntax.");
}
 800190c:	e006      	b.n	800191c <proc_fff_cmd+0x50>
			send_UART("FIR Filter is already off.");
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <proc_fff_cmd+0x64>)
 8001910:	f001 f928 	bl	8002b64 <send_UART>
}
 8001914:	e002      	b.n	800191c <proc_fff_cmd+0x50>
		send_UART("Invalid FIR Filter Off instruction syntax.");
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <proc_fff_cmd+0x68>)
 8001918:	f001 f924 	bl	8002b64 <send_UART>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200144f4 	.word	0x200144f4
 8001928:	20000054 	.word	0x20000054
 800192c:	0800ce48 	.word	0x0800ce48
 8001930:	0800cec8 	.word	0x0800cec8
 8001934:	0800cee4 	.word	0x0800cee4

08001938 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[1] == '\r')
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0d      	cmp	r3, #13
 8001948:	d11e      	bne.n	8001988 <proc_s_cmd+0x50>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4825      	ldr	r0, [pc, #148]	; (80019e8 <proc_s_cmd+0xb0>)
 8001952:	f006 fdb4 	bl	80084be <strncpy>

		counter = 0;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <proc_s_cmd+0xb4>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = 0;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <proc_s_cmd+0xb8>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
		MX_ADC3_Init1(false);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff f844 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <proc_s_cmd+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f971 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <proc_s_cmd+0xb8>)
 8001974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001976:	f000 fedd 	bl	8002734 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 800197a:	481e      	ldr	r0, [pc, #120]	; (80019f4 <proc_s_cmd+0xbc>)
 800197c:	f001 fab0 	bl	8002ee0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001980:	481d      	ldr	r0, [pc, #116]	; (80019f8 <proc_s_cmd+0xc0>)
 8001982:	f003 fd53 	bl	800542c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
	}
	else
		send_UART("Invalid Sample instruction syntax.");

}
 8001986:	e02b      	b.n	80019e0 <proc_s_cmd+0xa8>
	else if(sscanf((char*)message, "S %d", &k_values) == 1)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	461a      	mov	r2, r3
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <proc_s_cmd+0xc4>)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f006 fd09 	bl	80083a8 <siscanf>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d11e      	bne.n	80019da <proc_s_cmd+0xa2>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <proc_s_cmd+0xb0>)
 80019a4:	f006 fd8b 	bl	80084be <strncpy>
		counter = 0;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <proc_s_cmd+0xb4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = k_values;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <proc_s_cmd+0xb8>)
 80019b2:	6093      	str	r3, [r2, #8]
		MX_ADC3_Init1(false);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff f81b 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <proc_s_cmd+0xb8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f948 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <proc_s_cmd+0xb8>)
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	f000 feb4 	bl	8002734 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <proc_s_cmd+0xbc>)
 80019ce:	f001 fa87 	bl	8002ee0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <proc_s_cmd+0xc0>)
 80019d4:	f003 fd2a 	bl	800542c <HAL_TIM_Base_Start_IT>
}
 80019d8:	e002      	b.n	80019e0 <proc_s_cmd+0xa8>
		send_UART("Invalid Sample instruction syntax.");
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <proc_s_cmd+0xc8>)
 80019dc:	f001 f8c2 	bl	8002b64 <send_UART>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200144f4 	.word	0x200144f4
 80019ec:	2000028c 	.word	0x2000028c
 80019f0:	20000054 	.word	0x20000054
 80019f4:	200103a8 	.word	0x200103a8
 80019f8:	2001860c 	.word	0x2001860c
 80019fc:	0800cf10 	.word	0x0800cf10
 8001a00:	0800cf18 	.word	0x0800cf18

08001a04 <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if(counter > 0)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <proc_st_cmd+0x58>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <proc_st_cmd+0x48>
	{
		if(message[2] == '\r')
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3302      	adds	r3, #2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b0d      	cmp	r3, #13
 8001a1c:	d112      	bne.n	8001a44 <proc_st_cmd+0x40>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <proc_st_cmd+0x5c>)
 8001a26:	f006 fd4a 	bl	80084be <strncpy>
			counter = 0;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <proc_st_cmd+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc3);
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <proc_st_cmd+0x60>)
 8001a32:	f001 fb2d 	bl	8003090 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <proc_st_cmd+0x64>)
 8001a38:	f003 fd70 	bl	800551c <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <proc_st_cmd+0x68>)
 8001a3e:	f001 f891 	bl	8002b64 <send_UART>
		else
			send_UART("Invalid Stop Sampling instruction syntax.");
	}
	else
		send_UART("Sampling is not running.");
}
 8001a42:	e006      	b.n	8001a52 <proc_st_cmd+0x4e>
			send_UART("Invalid Stop Sampling instruction syntax.");
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <proc_st_cmd+0x6c>)
 8001a46:	f001 f88d 	bl	8002b64 <send_UART>
}
 8001a4a:	e002      	b.n	8001a52 <proc_st_cmd+0x4e>
		send_UART("Sampling is not running.");
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <proc_st_cmd+0x70>)
 8001a4e:	f001 f889 	bl	8002b64 <send_UART>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000028c 	.word	0x2000028c
 8001a60:	200144f4 	.word	0x200144f4
 8001a64:	200103a8 	.word	0x200103a8
 8001a68:	2001860c 	.word	0x2001860c
 8001a6c:	0800cf3c 	.word	0x0800cf3c
 8001a70:	0800cf50 	.word	0x0800cf50
 8001a74:	0800cf7c 	.word	0x0800cf7c

08001a78 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d202      	bcs.n	8001a92 <memory_read+0x1a>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	d901      	bls.n	8001a96 <memory_read+0x1e>
		return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e01b      	b.n	8001ace <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d901      	bls.n	8001aa6 <memory_read+0x2e>
		return false;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e013      	b.n	8001ace <memory_read+0x56>

	for(int i = 0; i < length; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00b      	b.n	8001ac4 <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60fa      	str	r2, [r7, #12]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	440a      	add	r2, r1
 8001ab8:	4908      	ldr	r1, [pc, #32]	; (8001adc <memory_read+0x64>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8ef      	bhi.n	8001aac <memory_read+0x34>
	}

	return true;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200003a4 	.word	0x200003a4

08001ae0 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d208      	bcs.n	8001b06 <memory_write+0x26>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d805      	bhi.n	8001b06 <memory_write+0x26>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db02      	blt.n	8001b06 <memory_write+0x26>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	dd01      	ble.n	8001b0a <memory_write+0x2a>
		return false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e019      	b.n	8001b3e <memory_write+0x5e>

	if((0x10000 - addr) < length)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d901      	bls.n	8001b1a <memory_write+0x3a>
		return false;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e011      	b.n	8001b3e <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e009      	b.n	8001b34 <memory_write+0x54>
	{
		memory[addr++] = data;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60fa      	str	r2, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	b2d1      	uxtb	r1, r2
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <memory_write+0x6c>)
 8001b2c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f1      	bhi.n	8001b20 <memory_write+0x40>
	}

	return true;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200003a4 	.word	0x200003a4

08001b50 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <make_pin_input+0x24>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d806      	bhi.n	8001b74 <make_pin_input+0x24>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <make_pin_input+0x24>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d301      	bcc.n	8001b78 <make_pin_input+0x28>
		return false;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e07f      	b.n	8001c78 <make_pin_input+0x128>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b05      	subs	r3, #5
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d85f      	bhi.n	8001c40 <make_pin_input+0xf0>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <make_pin_input+0x38>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001ba5 	.word	0x08001ba5
 8001b8c:	08001c41 	.word	0x08001c41
 8001b90:	08001bbf 	.word	0x08001bbf
 8001b94:	08001bd9 	.word	0x08001bd9
 8001b98:	08001bf3 	.word	0x08001bf3
 8001b9c:	08001c0d 	.word	0x08001c0d
 8001ba0:	08001c27 	.word	0x08001c27

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <make_pin_input+0x130>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <make_pin_input+0x130>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <make_pin_input+0x130>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	e040      	b.n	8001c40 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <make_pin_input+0x130>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <make_pin_input+0x130>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <make_pin_input+0x130>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	e033      	b.n	8001c40 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <make_pin_input+0x130>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <make_pin_input+0x130>)
 8001bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be2:	6313      	str	r3, [r2, #48]	; 0x30
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <make_pin_input+0x130>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	e026      	b.n	8001c40 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <make_pin_input+0x130>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <make_pin_input+0x130>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <make_pin_input+0x130>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	e019      	b.n	8001c40 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <make_pin_input+0x130>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <make_pin_input+0x130>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <make_pin_input+0x130>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	e00c      	b.n	8001c40 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <make_pin_input+0x130>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <make_pin_input+0x130>)
 8001c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <make_pin_input+0x130>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <make_pin_input+0x134>)
 8001c64:	4413      	add	r3, r2
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f002 f863 	bl	8003d3c <HAL_GPIO_Init>

	return true;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3738      	adds	r7, #56	; 0x38
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	0010007f 	.word	0x0010007f

08001c88 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <make_pin_output+0x24>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d806      	bhi.n	8001cac <make_pin_output+0x24>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <make_pin_output+0x24>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d301      	bcc.n	8001cb0 <make_pin_output+0x28>
		return false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e081      	b.n	8001db4 <make_pin_output+0x12c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	2b06      	cmp	r3, #6
 8001cb6:	d85f      	bhi.n	8001d78 <make_pin_output+0xf0>
 8001cb8:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <make_pin_output+0x38>)
 8001cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cbe:	bf00      	nop
 8001cc0:	08001cdd 	.word	0x08001cdd
 8001cc4:	08001d79 	.word	0x08001d79
 8001cc8:	08001cf7 	.word	0x08001cf7
 8001ccc:	08001d11 	.word	0x08001d11
 8001cd0:	08001d2b 	.word	0x08001d2b
 8001cd4:	08001d45 	.word	0x08001d45
 8001cd8:	08001d5f 	.word	0x08001d5f

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <make_pin_output+0x134>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <make_pin_output+0x134>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <make_pin_output+0x134>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	e040      	b.n	8001d78 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <make_pin_output+0x134>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <make_pin_output+0x134>)
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <make_pin_output+0x134>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	e033      	b.n	8001d78 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <make_pin_output+0x134>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <make_pin_output+0x134>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <make_pin_output+0x134>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	e026      	b.n	8001d78 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <make_pin_output+0x134>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <make_pin_output+0x134>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <make_pin_output+0x134>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	e019      	b.n	8001d78 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <make_pin_output+0x134>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <make_pin_output+0x134>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <make_pin_output+0x134>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	e00c      	b.n	8001d78 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <make_pin_output+0x134>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <make_pin_output+0x134>)
 8001d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <make_pin_output+0x134>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <make_pin_output+0x138>)
 8001da0:	4413      	add	r3, r2
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	461a      	mov	r2, r3
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f001 ffc5 	bl	8003d3c <HAL_GPIO_Init>

	return true;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	0010007f 	.word	0x0010007f

08001dc4 <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <read_dig_input+0x26>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d806      	bhi.n	8001dea <read_dig_input+0x26>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <read_dig_input+0x26>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d301      	bcc.n	8001dee <read_dig_input+0x2a>
		return false;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e02d      	b.n	8001e4a <read_dig_input+0x86>

	int mask = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e024      	b.n	8001e42 <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <read_dig_input+0x90>)
 8001e06:	4413      	add	r3, r2
 8001e08:	029b      	lsls	r3, r3, #10
 8001e0a:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	18d4      	adds	r4, r2, r3
 8001e1c:	8a7b      	ldrh	r3, [r7, #18]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f002 f937 	bl	8004094 <HAL_GPIO_ReadPin>
 8001e26:	4603      	mov	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
 8001e2a:	e004      	b.n	8001e36 <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	ddd7      	ble.n	8001df8 <read_dig_input+0x34>
	}

	return true;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	0010007f 	.word	0x0010007f

08001e58 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <write_dig_output+0x2e>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d80a      	bhi.n	8001e86 <write_dig_output+0x2e>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <write_dig_output+0x2e>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d203      	bcs.n	8001e86 <write_dig_output+0x2e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d301      	bcc.n	8001e8a <write_dig_output+0x32>
		return false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e02a      	b.n	8001ee0 <write_dig_output+0x88>

	int mask = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	e021      	b.n	8001ed8 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d016      	beq.n	8001ecc <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <write_dig_output+0x90>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8001ec0:	7c7a      	ldrb	r2, [r7, #17]
 8001ec2:	8a7b      	ldrh	r3, [r7, #18]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f002 f8fc 	bl	80040c4 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	ddda      	ble.n	8001e94 <write_dig_output+0x3c>
	}

	return true;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0010007f 	.word	0x0010007f

08001eec <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d901      	bls.n	8001f00 <analog_read+0x14>
		return false;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e00b      	b.n	8001f18 <analog_read+0x2c>

	MX_ADC3_Init1(true);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7fe fd75 	bl	80009f0 <MX_ADC3_Init1>
	config_ADC(addr3);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fea4 	bl	8000c54 <config_ADC>
	*value = read_ADC();
 8001f0c:	f7fe fec0 	bl	8000c90 <read_ADC>
 8001f10:	4602      	mov	r2, r0
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	601a      	str	r2, [r3, #0]

	return true;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <analog_write>:

bool analog_write(unsigned int addr3, unsigned int value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x01)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d901      	bls.n	8001f34 <analog_write+0x14>
		return false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e013      	b.n	8001f5c <analog_write+0x3c>

	if(HAL_DAC_Start(&hdac, (addr3 << addr3)) == HAL_OK){
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	409b      	lsls	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480a      	ldr	r0, [pc, #40]	; (8001f64 <analog_write+0x44>)
 8001f3c:	f001 fda5 	bl	8003a8a <HAL_DAC_Start>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <analog_write+0x3a>
	    HAL_DAC_SetValue(&hdac, (addr3 << addr3), DAC_ALIGN_12B_R, value);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	fa03 f103 	lsl.w	r1, r3, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <analog_write+0x44>)
 8001f52:	f001 fdec 	bl	8003b2e <HAL_DAC_SetValue>
	    return true;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <analog_write+0x3c>
	}else
		return false;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200185f8 	.word	0x200185f8

08001f68 <process_buf>:

void process_buf(uint32_t* x_buf, uint32_t n)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	if(sp_config.filter)
 8001f72:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <process_buf+0x160>)
 8001f74:	7b9b      	ldrb	r3, [r3, #14]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06d      	beq.n	8002056 <process_buf+0xee>
	{
		if(sp_config.filter_type == Fin)
 8001f7a:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <process_buf+0x160>)
 8001f7c:	7bdb      	ldrb	r3, [r3, #15]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d136      	bne.n	8001ff0 <process_buf+0x88>
		{
			unsigned int temp = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]

			for(int i = 0 ; i <= M; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	e021      	b.n	8001fd0 <process_buf+0x68>
			{
				temp += coef[i] * x_buf[n-i];
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <process_buf+0x164>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	edd3 6a00 	vldr	s13, [r3]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 3a90 	vmov	r3, s15
 8001fc8:	60fb      	str	r3, [r7, #12]
			for(int i = 0 ; i <= M; i++)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	ddda      	ble.n	8001f8c <process_buf+0x24>
			}
			y_buf[n] = temp;
 8001fd6:	493e      	ldr	r1, [pc, #248]	; (80020d0 <process_buf+0x168>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			analog_write(0,y_buf[n]);
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <process_buf+0x168>)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff ff98 	bl	8001f20 <analog_write>
		}
		if(sp_config.filter_type == Inf)
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <process_buf+0x160>)
 8001ff2:	7bdb      	ldrb	r3, [r3, #15]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d137      	bne.n	8002068 <process_buf+0x100>
		{
			y_buf[(n+1) & ADC_BUF_SIZE] = a*y_buf[n] + (1-a)*x_buf[n];
 8001ff8:	4a35      	ldr	r2, [pc, #212]	; (80020d0 <process_buf+0x168>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002008:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80020b8 <process_buf+0x150>
 800200c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002022:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80020c0 <process_buf+0x158>
 8002026:	ee27 7b05 	vmul.f64	d7, d7, d5
 800202a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203a:	ee17 1a90 	vmov	r1, s15
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <process_buf+0x168>)
 8002040:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			analog_write(0,y_buf[n]);
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <process_buf+0x168>)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	4619      	mov	r1, r3
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff ff66 	bl	8001f20 <analog_write>
 8002054:	e008      	b.n	8002068 <process_buf+0x100>
		}
	}else{
		analog_write(0,x_buf[n]);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff ff5c 	bl	8001f20 <analog_write>
	}
	counter ++;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <process_buf+0x16c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <process_buf+0x16c>)
 8002070:	6013      	str	r3, [r2, #0]

	/*char message[21];
	sprintf(message, "n%d va%lu vf%lu\r", counter , x_buf[n], y_buf[n]);
	send_UART(message);*/

	if(sp_config.sp_limit > 0)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <process_buf+0x160>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <process_buf+0x142>
		if(counter == sp_config.sp_limit)
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <process_buf+0x160>)
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <process_buf+0x16c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d111      	bne.n	80020aa <process_buf+0x142>
		{
			while(is_transmitting_to_UART());
 8002086:	bf00      	nop
 8002088:	f000 fd48 	bl	8002b1c <is_transmitting_to_UART>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1fa      	bne.n	8002088 <process_buf+0x120>
			counter = 0;
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <process_buf+0x16c>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc3);
 8002098:	480f      	ldr	r0, [pc, #60]	; (80020d8 <process_buf+0x170>)
 800209a:	f000 fff9 	bl	8003090 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 800209e:	480f      	ldr	r0, [pc, #60]	; (80020dc <process_buf+0x174>)
 80020a0:	f003 fa3c 	bl	800551c <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 80020a4:	480e      	ldr	r0, [pc, #56]	; (80020e0 <process_buf+0x178>)
 80020a6:	f000 fd5d 	bl	8002b64 <send_UART>
		}
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	f3af 8000 	nop.w
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fd99999 	.word	0x3fd99999
 80020c0:	33333333 	.word	0x33333333
 80020c4:	3fe33333 	.word	0x3fe33333
 80020c8:	20000054 	.word	0x20000054
 80020cc:	20000064 	.word	0x20000064
 80020d0:	200145fc 	.word	0x200145fc
 80020d4:	2000028c 	.word	0x2000028c
 80020d8:	200103a8 	.word	0x200103a8
 80020dc:	2001860c 	.word	0x2001860c
 80020e0:	0800cf3c 	.word	0x0800cf3c

080020e4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_DAC_Init+0x60>)
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <MX_DAC_Init+0x64>)
 80020f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80020f8:	4812      	ldr	r0, [pc, #72]	; (8002144 <MX_DAC_Init+0x60>)
 80020fa:	f001 fca4 	bl	8003a46 <HAL_DAC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002104:	f000 f9cc 	bl	80024a0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	480b      	ldr	r0, [pc, #44]	; (8002144 <MX_DAC_Init+0x60>)
 8002118:	f001 fd2e 	bl	8003b78 <HAL_DAC_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002122:	f000 f9bd 	bl	80024a0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	2210      	movs	r2, #16
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_DAC_Init+0x60>)
 800212e:	f001 fd23 	bl	8003b78 <HAL_DAC_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002138:	f000 f9b2 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200185f8 	.word	0x200185f8
 8002148:	40007400 	.word	0x40007400

0800214c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_DAC_MspInit+0x74>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d123      	bne.n	80021b6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 8002174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_DAC_MspInit+0x78>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800219e:	2330      	movs	r3, #48	; 0x30
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <HAL_DAC_MspInit+0x7c>)
 80021b2:	f001 fdc3 	bl	8003d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40007400 	.word	0x40007400
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000

080021cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <MX_GPIO_Init+0xbc>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a28      	ldr	r2, [pc, #160]	; (8002288 <MX_GPIO_Init+0xbc>)
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <MX_GPIO_Init+0xbc>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <MX_GPIO_Init+0xbc>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a22      	ldr	r2, [pc, #136]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_GPIO_Init+0xbc>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_GPIO_Init+0xbc>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	2101      	movs	r1, #1
 800225e:	480b      	ldr	r0, [pc, #44]	; (800228c <MX_GPIO_Init+0xc0>)
 8002260:	f001 ff30 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_GPIO_Init+0xc0>)
 800227c:	f001 fd5e 	bl	8003d3c <HAL_GPIO_Init>

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020400 	.word	0x40020400

08002290 <is_GPIO_pin_free>:

/* USER CODE BEGIN 2 */

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	//	ADC3 e DAC

	if(port_addr == 1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d107      	bne.n	80022b0 <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x603F)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	f246 033f 	movw	r3, #24639	; 0x603f
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <is_GPIO_pin_free+0x20>
			return false;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e028      	b.n	8002302 <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d106      	bne.n	80022c4 <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <is_GPIO_pin_free+0x34>
			return false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e01e      	b.n	8002302 <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d106      	bne.n	80022d8 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <is_GPIO_pin_free+0x48>
			return false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e014      	b.n	8002302 <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d106      	bne.n	80022ec <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <is_GPIO_pin_free+0x5c>
			return false;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e00a      	b.n	8002302 <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d106      	bne.n	8002300 <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <is_GPIO_pin_free+0x70>
			return false;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <is_GPIO_pin_free+0x72>

	return true;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <blink_LED>:

void blink_LED()
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002314:	2101      	movs	r1, #1
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <blink_LED+0x20>)
 8002318:	f001 feed 	bl	80040f6 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800231c:	20c8      	movs	r0, #200	; 0xc8
 800231e:	f000 fd77 	bl	8002e10 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002322:	2101      	movs	r1, #1
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <blink_LED+0x20>)
 8002326:	f001 fee6 	bl	80040f6 <HAL_GPIO_TogglePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40020400 	.word	0x40020400

08002334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0c2      	sub	sp, #264	; 0x108
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800233a:	f000 fd0c 	bl	8002d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800233e:	f000 f841 	bl	80023c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002342:	f7ff ff43 	bl	80021cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002346:	f000 fb2d 	bl	80029a4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800234a:	f7fe fbb5 	bl	8000ab8 <MX_ADC3_Init>
  MX_TIM1_Init();
 800234e:	f000 fa97 	bl	8002880 <MX_TIM1_Init>
  MX_DAC_Init();
 8002352:	f7ff fec7 	bl	80020e4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002356:	2201      	movs	r2, #1
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <main+0x80>)
 800235a:	4817      	ldr	r0, [pc, #92]	; (80023b8 <main+0x84>)
 800235c:	f003 fea0 	bl	80060a0 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8002360:	4816      	ldr	r0, [pc, #88]	; (80023bc <main+0x88>)
 8002362:	f000 fbff 	bl	8002b64 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 8002366:	f000 fbcd 	bl	8002b04 <has_message_from_UART>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0fa      	beq.n	8002366 <main+0x32>
	  {
		  blink_LED();
 8002370:	f7ff ffce 	bl	8002310 <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fc1e 	bl	8002bb8 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fce2 	bl	8000d48 <check_command>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 800238a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <main+0x8c>)
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	1d3a      	adds	r2, r7, #4
 8002396:	4610      	mov	r0, r2
 8002398:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 800239a:	bf00      	nop
 800239c:	f000 fbbe 	bl	8002b1c <is_transmitting_to_UART>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1fa      	bne.n	800239c <main+0x68>

		  reset_UART();
 80023a6:	f000 fbc5 	bl	8002b34 <reset_UART>
		  send_UART(PROMPT);
 80023aa:	4804      	ldr	r0, [pc, #16]	; (80023bc <main+0x88>)
 80023ac:	f000 fbda 	bl	8002b64 <send_UART>
	  if(has_message_from_UART())
 80023b0:	e7d9      	b.n	8002366 <main+0x32>
 80023b2:	bf00      	nop
 80023b4:	200002a0 	.word	0x200002a0
 80023b8:	20018658 	.word	0x20018658
 80023bc:	0800cf98 	.word	0x0800cf98
 80023c0:	20000000 	.word	0x20000000

080023c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
 80023c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	2234      	movs	r2, #52	; 0x34
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 f972 	bl	80076bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <SystemClock_Config+0xd4>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <SystemClock_Config+0xd4>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <SystemClock_Config+0xd4>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <SystemClock_Config+0xd8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <SystemClock_Config+0xd8>)
 8002406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <SystemClock_Config+0xd8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800241c:	2301      	movs	r3, #1
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002420:	2310      	movs	r3, #16
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002424:	2302      	movs	r3, #2
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800242c:	2308      	movs	r3, #8
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002430:	23c0      	movs	r3, #192	; 0xc0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002434:	2302      	movs	r3, #2
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002438:	2304      	movs	r3, #4
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800243c:	2302      	movs	r3, #2
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4618      	mov	r0, r3
 8002446:	f001 fec1 	bl	80041cc <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002450:	f000 f826 	bl	80024a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002454:	f001 fe6a 	bl	800412c <HAL_PWREx_EnableOverDrive>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800245e:	f000 f81f 	bl	80024a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002462:	230f      	movs	r3, #15
 8002464:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002466:	2302      	movs	r3, #2
 8002468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800246e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002478:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2106      	movs	r1, #6
 8002480:	4618      	mov	r0, r3
 8002482:	f002 f951 	bl	8004728 <HAL_RCC_ClockConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800248c:	f000 f808 	bl	80024a0 <Error_Handler>
  }
}
 8002490:	bf00      	nop
 8002492:	3750      	adds	r7, #80	; 0x50
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <Error_Handler+0x8>
	...

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_MspInit+0x44>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_MspInit+0x44>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_MspInit+0x44>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_MspInit+0x44>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_MspInit+0x44>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_MspInit+0x44>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80024e2:	2006      	movs	r0, #6
 80024e4:	f001 fa6e 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <NMI_Handler+0x4>

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <MemManage_Handler+0x4>

08002506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <UsageFault_Handler+0x4>

08002512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002540:	f000 fc46 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <ADC_IRQHandler+0x10>)
 800254e:	f000 fddd 	bl	800310c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200103a8 	.word	0x200103a8

0800255c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002562:	f003 f80a 	bl	800557a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2001860c 	.word	0x2001860c

08002570 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <USART3_IRQHandler+0x10>)
 8002576:	f003 fde1 	bl	800613c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20018658 	.word	0x20018658

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_kill>:

int _kill(int pid, int sig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259e:	f005 f863 	bl	8007668 <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2216      	movs	r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
	return -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_exit>:

void _exit (int status)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffe7 	bl	8002594 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c6:	e7fe      	b.n	80025c6 <_exit+0x12>

080025c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00a      	b.n	80025f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025da:	f3af 8000 	nop.w
 80025de:	4601      	mov	r1, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf0      	blt.n	80025da <_read+0x12>
	}

return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf1      	blt.n	8002614 <_write+0x12>
	}
	return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_close>:

int _close(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002662:	605a      	str	r2, [r3, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_isatty>:

int _isatty(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	return 1;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f004 ffc8 	bl	8007668 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20080000 	.word	0x20080000
 8002704:	00000400 	.word	0x00000400
 8002708:	20000294 	.word	0x20000294
 800270c:	200186f0 	.word	0x200186f0

08002710 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <MX_TIM1_Init1>:
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void MX_TIM1_Init1(struct sp_config_t sp_config)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b093      	sub	sp, #76	; 0x4c
 8002738:	af00      	add	r7, sp, #0
 800273a:	463c      	mov	r4, r7
 800273c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
 800276e:	2301      	movs	r3, #1
 8002770:	643b      	str	r3, [r7, #64]	; 0x40

	if(!strncmp(sp_config.timeunit,"us",2))
 8002772:	463b      	mov	r3, r7
 8002774:	330c      	adds	r3, #12
 8002776:	2202      	movs	r2, #2
 8002778:	493c      	ldr	r1, [pc, #240]	; (800286c <MX_TIM1_Init1+0x138>)
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fe8d 	bl	800849a <strncmp>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <MX_TIM1_Init1+0x84>
	{
	}
	else if(!strncmp(sp_config.timeunit,"ms",2))
 8002786:	463b      	mov	r3, r7
 8002788:	330c      	adds	r3, #12
 800278a:	2202      	movs	r2, #2
 800278c:	4938      	ldr	r1, [pc, #224]	; (8002870 <MX_TIM1_Init1+0x13c>)
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fe83 	bl	800849a <strncmp>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <MX_TIM1_Init1+0x6e>
	{
		mul1 = 1000;
 800279a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
 80027a0:	e00a      	b.n	80027b8 <MX_TIM1_Init1+0x84>
	}
	else if(!strncmp(sp_config.timeunit,"s",1))
 80027a2:	7b3a      	ldrb	r2, [r7, #12]
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <MX_TIM1_Init1+0x140>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <MX_TIM1_Init1+0x84>
	{
		mul1 = 10000;
 80027ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
		mul2 = 100;
 80027b4:	2364      	movs	r3, #100	; 0x64
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
	}

	htim1.Instance = TIM1;
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <MX_TIM1_Init1+0x148>)
 80027bc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 2 * mul1;
 80027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027c4:	6053      	str	r3, [r2, #4]
  	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  	htim1.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027d0:	fb02 f203 	mul.w	r2, r2, r3
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027e2:	60d3      	str	r3, [r2, #12]
  	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  	htim1.Init.RepetitionCounter = 0;
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
  	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027f6:	4820      	ldr	r0, [pc, #128]	; (8002878 <MX_TIM1_Init1+0x144>)
 80027f8:	f002 fdc0 	bl	800537c <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM1_Init1+0xd2>
  	{
  		Error_Handler();
 8002802:	f7ff fe4d 	bl	80024a0 <Error_Handler>
  	}
  	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800280c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002810:	4619      	mov	r1, r3
 8002812:	4819      	ldr	r0, [pc, #100]	; (8002878 <MX_TIM1_Init1+0x144>)
 8002814:	f002 ffd0 	bl	80057b8 <HAL_TIM_ConfigClockSource>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM1_Init1+0xee>
  	{
  		Error_Handler();
 800281e:	f7ff fe3f 	bl	80024a0 <Error_Handler>
  	}
  	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002826:	2310      	movs	r3, #16
 8002828:	623b      	str	r3, [r7, #32]
  	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4811      	ldr	r0, [pc, #68]	; (8002878 <MX_TIM1_Init1+0x144>)
 8002832:	f003 f88b 	bl	800594c <HAL_TIM_SlaveConfigSynchro>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM1_Init1+0x10c>
  	{
  		Error_Handler();
 800283c:	f7ff fe30 	bl	80024a0 <Error_Handler>
  	}
  	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002840:	2320      	movs	r3, #32
 8002842:	613b      	str	r3, [r7, #16]
  	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
  	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4619      	mov	r1, r3
 8002852:	4809      	ldr	r0, [pc, #36]	; (8002878 <MX_TIM1_Init1+0x144>)
 8002854:	f003 fabc 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM1_Init1+0x12e>
  	{
  		Error_Handler();
 800285e:	f7ff fe1f 	bl	80024a0 <Error_Handler>
  	}
}
 8002862:	bf00      	nop
 8002864:	374c      	adds	r7, #76	; 0x4c
 8002866:	46bd      	mov	sp, r7
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	bf00      	nop
 800286c:	0800cf9c 	.word	0x0800cf9c
 8002870:	0800cfa0 	.word	0x0800cfa0
 8002874:	0800cfa4 	.word	0x0800cfa4
 8002878:	2001860c 	.word	0x2001860c
 800287c:	40010000 	.word	0x40010000

08002880 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a4:	463b      	mov	r3, r7
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028b0:	4a28      	ldr	r2, [pc, #160]	; (8002954 <MX_TIM1_Init+0xd4>)
 80028b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600;
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028dc:	481c      	ldr	r0, [pc, #112]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028de:	f002 fd4d 	bl	800537c <HAL_TIM_Base_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80028e8:	f7ff fdda 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	4619      	mov	r1, r3
 80028f8:	4815      	ldr	r0, [pc, #84]	; (8002950 <MX_TIM1_Init+0xd0>)
 80028fa:	f002 ff5d 	bl	80057b8 <HAL_TIM_ConfigClockSource>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002904:	f7ff fdcc 	bl	80024a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800290c:	2310      	movs	r3, #16
 800290e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4619      	mov	r1, r3
 8002916:	480e      	ldr	r0, [pc, #56]	; (8002950 <MX_TIM1_Init+0xd0>)
 8002918:	f003 f818 	bl	800594c <HAL_TIM_SlaveConfigSynchro>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002922:	f7ff fdbd 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002926:	2320      	movs	r3, #32
 8002928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002932:	463b      	mov	r3, r7
 8002934:	4619      	mov	r1, r3
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <MX_TIM1_Init+0xd0>)
 8002938:	f003 fa4a 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002942:	f7ff fdad 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2001860c 	.word	0x2001860c
 8002954:	40010000 	.word	0x40010000

08002958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_TIM_Base_MspInit+0x44>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_Base_MspInit+0x48>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_TIM_Base_MspInit+0x48>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_TIM_Base_MspInit+0x48>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2101      	movs	r1, #1
 8002986:	2019      	movs	r0, #25
 8002988:	f001 f827 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800298c:	2019      	movs	r0, #25
 800298e:	f001 f840 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40023800 	.word	0x40023800

080029a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_USART3_UART_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <MX_USART3_UART_Init+0x78>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_USART3_UART_Init+0x7c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_USART3_UART_Init+0x80>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <MX_USART3_UART_Init+0x84>)
 80029c2:	220d      	movs	r2, #13
 80029c4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <MX_USART3_UART_Init+0x8c>)
 80029ca:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029ce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029e8:	220c      	movs	r2, #12
 80029ea:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a04:	4809      	ldr	r0, [pc, #36]	; (8002a2c <MX_USART3_UART_Init+0x88>)
 8002a06:	f003 fa8f 	bl	8005f28 <HAL_UART_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002a10:	f7ff fd46 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200103f4 	.word	0x200103f4
 8002a1c:	200145f4 	.word	0x200145f4
 8002a20:	200103f0 	.word	0x200103f0
 8002a24:	200145f8 	.word	0x200145f8
 8002a28:	200103f8 	.word	0x200103f8
 8002a2c:	20018658 	.word	0x20018658
 8002a30:	40004800 	.word	0x40004800

08002a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0ae      	sub	sp, #184	; 0xb8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2290      	movs	r2, #144	; 0x90
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fe31 	bl	80076bc <memset>
  if(uartHandle->Instance==USART3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0xc4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d144      	bne.n	8002aee <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 f85a 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a7e:	f7ff fd0f 	bl	80024a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_UART_MspInit+0xc8>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002acc:	2307      	movs	r3, #7
 8002ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4809      	ldr	r0, [pc, #36]	; (8002b00 <HAL_UART_MspInit+0xcc>)
 8002ada:	f001 f92f 	bl	8003d3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2027      	movs	r0, #39	; 0x27
 8002ae4:	f000 ff79 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae8:	2027      	movs	r0, #39	; 0x27
 8002aea:	f000 ff92 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	37b8      	adds	r7, #184	; 0xb8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40004800 	.word	0x40004800
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020c00 	.word	0x40020c00

08002b04 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
	return flagCPP;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <has_message_from_UART+0x14>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	200103f4 	.word	0x200103f4

08002b1c <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
	return flagCPE;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <is_transmitting_to_UART+0x14>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200145f4 	.word	0x200145f4

08002b34 <reset_UART>:

void reset_UART()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <reset_UART+0x24>)
 8002b40:	f004 fdbc 	bl	80076bc <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002b44:	2201      	movs	r2, #1
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <reset_UART+0x24>)
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <reset_UART+0x28>)
 8002b4a:	f003 faa9 	bl	80060a0 <HAL_UART_Receive_IT>
	flagCPP = false;
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <reset_UART+0x2c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200002a0 	.word	0x200002a0
 8002b5c:	20018658 	.word	0x20018658
 8002b60:	200103f4 	.word	0x200103f4

08002b64 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <send_UART+0x44>)
 8002b74:	f005 fca3 	bl	80084be <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8002b78:	480b      	ldr	r0, [pc, #44]	; (8002ba8 <send_UART+0x44>)
 8002b7a:	f7fd fb6b 	bl	8000254 <strlen>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <send_UART+0x44>)
 8002b84:	4413      	add	r3, r2
 8002b86:	4909      	ldr	r1, [pc, #36]	; (8002bac <send_UART+0x48>)
 8002b88:	461a      	mov	r2, r3
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <send_UART+0x4c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <send_UART+0x44>)
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <send_UART+0x50>)
 8002b9c:	f003 fa12 	bl	8005fc4 <HAL_UART_Transmit_IT>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200103f8 	.word	0x200103f8
 8002bac:	0800cfa8 	.word	0x0800cfa8
 8002bb0:	200145f4 	.word	0x200145f4
 8002bb4:	20018658 	.word	0x20018658

08002bb8 <read_UART>:

void read_UART(char* msg_to_read)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8002bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc4:	4903      	ldr	r1, [pc, #12]	; (8002bd4 <read_UART+0x1c>)
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f005 fc79 	bl	80084be <strncpy>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200002a0 	.word	0x200002a0

08002bd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_UART_RxCpltCallback+0xa8>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d146      	bne.n	8002c76 <HAL_UART_RxCpltCallback+0x9e>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r') //		CARRIAGE RETURN
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	2b0d      	cmp	r3, #13
 8002bf2:	d106      	bne.n	8002c02 <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_UART_RxCpltCallback+0xa8>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e03a      	b.n	8002c78 <HAL_UART_RxCpltCallback+0xa0>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d10e      	bne.n	8002c2c <HAL_UART_RxCpltCallback+0x54>
		{
			if(UART_RX_index == 0)
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_UART_RxCpltCallback+0x4a>
				UART_RX_index--;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e004      	b.n	8002c2c <HAL_UART_RxCpltCallback+0x54>
			else
				UART_RX_index -= 2;
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b02      	subs	r3, #2
 8002c28:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c2a:	6013      	str	r3, [r2, #0]
		}

		if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	2b1b      	cmp	r3, #27
 8002c36:	d103      	bne.n	8002c40 <HAL_UART_RxCpltCallback+0x68>
			UART_RX_index = -1;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3e:	601a      	str	r2, [r3, #0]

		if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b24      	cmp	r3, #36	; 0x24
 8002c4a:	d105      	bne.n	8002c58 <HAL_UART_RxCpltCallback+0x80>
		{
			UART_RX_index = 0;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002c54:	2224      	movs	r2, #36	; 0x24
 8002c56:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_UART_RxCpltCallback+0xac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_UART_RxCpltCallback+0xb0>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4807      	ldr	r0, [pc, #28]	; (8002c8c <HAL_UART_RxCpltCallback+0xb4>)
 8002c70:	f003 fa16 	bl	80060a0 <HAL_UART_Receive_IT>
 8002c74:	e000      	b.n	8002c78 <HAL_UART_RxCpltCallback+0xa0>
		return;
 8002c76:	bf00      	nop
	}
}
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200103f4 	.word	0x200103f4
 8002c84:	200103f0 	.word	0x200103f0
 8002c88:	200002a0 	.word	0x200002a0
 8002c8c:	20018658 	.word	0x20018658

08002c90 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_UART_TxCpltCallback+0x64>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d122      	bne.n	8002cec <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_UART_TxCpltCallback+0x6c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	2b0d      	cmp	r3, #13
 8002cb0:	d10d      	bne.n	8002cce <HAL_UART_TxCpltCallback+0x3e>
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_UART_TxCpltCallback+0x6c>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	2b0a      	cmp	r3, #10
 8002cbe:	d006      	beq.n	8002cce <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_UART_TxCpltCallback+0x64>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e00f      	b.n	8002cee <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_UART_TxCpltCallback+0x68>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_UART_TxCpltCallback+0x6c>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <HAL_UART_TxCpltCallback+0x70>)
 8002ce6:	f003 f96d 	bl	8005fc4 <HAL_UART_Transmit_IT>
 8002cea:	e000      	b.n	8002cee <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002cec:	bf00      	nop
}
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200145f4 	.word	0x200145f4
 8002cf8:	200145f8 	.word	0x200145f8
 8002cfc:	200103f8 	.word	0x200103f8
 8002d00:	20018658 	.word	0x20018658

08002d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d0a:	490e      	ldr	r1, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d20:	4c0b      	ldr	r4, [pc, #44]	; (8002d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d2e:	f7ff fcef 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f004 fc9f 	bl	8007674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d36:	f7ff fafd 	bl	8002334 <main>
  bx  lr    
 8002d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002d48:	0800d4ac 	.word	0x0800d4ac
  ldr r2, =_sbss
 8002d4c:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002d50:	200186f0 	.word	0x200186f0

08002d54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <CAN1_RX0_IRQHandler>

08002d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d5a:	2003      	movs	r0, #3
 8002d5c:	f000 fe32 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 f805 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d66:	f7ff fba1 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fe4d 	bl	8003a2e <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f000 fe15 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000008c 	.word	0x2000008c
 8002dc8:	20000094 	.word	0x20000094
 8002dcc:	20000090 	.word	0x20000090

08002dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000094 	.word	0x20000094
 8002df4:	200186dc 	.word	0x200186dc

08002df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	200186dc 	.word	0x200186dc

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff ffee 	bl	8002df8 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000094 	.word	0x20000094

08002e58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e031      	b.n	8002ed2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fe70 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_ADC_Init+0x84>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fbb8 	bl	800361c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec2:	e001      	b.n	8002ec8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	ffffeefd 	.word	0xffffeefd

08002ee0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Start_IT+0x1a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0b5      	b.n	8003066 <HAL_ADC_Start_IT+0x186>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d018      	beq.n	8002f42 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f20:	4b54      	ldr	r3, [pc, #336]	; (8003074 <HAL_ADC_Start_IT+0x194>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a54      	ldr	r2, [pc, #336]	; (8003078 <HAL_ADC_Start_IT+0x198>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9a      	lsrs	r2, r3, #18
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d17d      	bne.n	800304c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_ADC_Start_IT+0x19c>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d106      	bne.n	8002f9a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f023 0206 	bic.w	r2, r3, #6
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
 8002f98:	e002      	b.n	8002fa0 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fb0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_ADC_Start_IT+0x1a0>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_ADC_Start_IT+0x1a4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d143      	bne.n	8003064 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e03a      	b.n	8003064 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_ADC_Start_IT+0x1a8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d10e      	bne.n	8003016 <HAL_ADC_Start_IT+0x136>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003014:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_ADC_Start_IT+0x1a4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d120      	bne.n	8003064 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_ADC_Start_IT+0x1ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d11b      	bne.n	8003064 <HAL_ADC_Start_IT+0x184>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d114      	bne.n	8003064 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	e00b      	b.n	8003064 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	2000008c 	.word	0x2000008c
 8003078:	431bde83 	.word	0x431bde83
 800307c:	fffff8fe 	.word	0xfffff8fe
 8003080:	04000020 	.word	0x04000020
 8003084:	40012300 	.word	0x40012300
 8003088:	40012000 	.word	0x40012000
 800308c:	40012200 	.word	0x40012200

08003090 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Stop_IT+0x16>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e027      	b.n	80030f6 <HAL_ADC_Stop_IT+0x66>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_ADC_Stop_IT+0x74>)
 80030d8:	400b      	ands	r3, r1
 80030da:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_ADC_Stop_IT+0x78>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	fbffffdf 	.word	0xfbffffdf
 8003108:	ffffeefe 	.word	0xffffeefe

0800310c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d049      	beq.n	80031d6 <HAL_ADC_IRQHandler+0xca>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d046      	beq.n	80031d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d12b      	bne.n	80031c6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003172:	2b00      	cmp	r3, #0
 8003174:	d127      	bne.n	80031c6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800318e:	2b00      	cmp	r3, #0
 8003190:	d119      	bne.n	80031c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0220 	bic.w	r2, r2, #32
 80031a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fd82 	bl	8000cd0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0212 	mvn.w	r2, #18
 80031d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d057      	beq.n	800329c <HAL_ADC_IRQHandler+0x190>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d054      	beq.n	800329c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d139      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003230:	2b00      	cmp	r3, #0
 8003232:	d12b      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d124      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11d      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d119      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003266:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fabf 	bl	8003810 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 020c 	mvn.w	r2, #12
 800329a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <HAL_ADC_IRQHandler+0x1d6>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d014      	beq.n	80032e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10d      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f837 	bl	8003346 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0201 	mvn.w	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_ADC_IRQHandler+0x218>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f06f 0220 	mvn.w	r2, #32
 8003312:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f820 	bl	800335a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0220 	mvn.w	r2, #32
 8003322:	601a      	str	r2, [r3, #0]
  }
}
 8003324:	bf00      	nop
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1c>
 8003388:	2302      	movs	r3, #2
 800338a:	e136      	b.n	80035fa <HAL_ADC_ConfigChannel+0x28a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b09      	cmp	r3, #9
 800339a:	d93a      	bls.n	8003412 <HAL_ADC_ConfigChannel+0xa2>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a4:	d035      	beq.n	8003412 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	3b1e      	subs	r3, #30
 80033bc:	2207      	movs	r2, #7
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a8d      	ldr	r2, [pc, #564]	; (8003608 <HAL_ADC_ConfigChannel+0x298>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	061a      	lsls	r2, r3, #24
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ea:	e035      	b.n	8003458 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	3b1e      	subs	r3, #30
 8003406:	409a      	lsls	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003410:	e022      	b.n	8003458 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6919      	ldr	r1, [r3, #16]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	2207      	movs	r2, #7
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	400a      	ands	r2, r1
 8003434:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	4603      	mov	r3, r0
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4403      	add	r3, r0
 800344e:	409a      	lsls	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d824      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	3b05      	subs	r3, #5
 8003472:	221f      	movs	r2, #31
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b05      	subs	r3, #5
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
 80034a8:	e04c      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d824      	bhi.n	80034fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b23      	subs	r3, #35	; 0x23
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b23      	subs	r3, #35	; 0x23
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
 80034fa:	e023      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b41      	subs	r3, #65	; 0x41
 800350e:	221f      	movs	r2, #31
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3b41      	subs	r3, #65	; 0x41
 8003538:	fa00 f203 	lsl.w	r2, r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_ADC_ConfigChannel+0x29c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10a      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1f4>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003556:	d105      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 800355e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003562:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_ADC_ConfigChannel+0x29c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10f      	bne.n	800358e <HAL_ADC_ConfigChannel+0x21e>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b12      	cmp	r3, #18
 8003574:	d10b      	bne.n	800358e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a25      	ldr	r2, [pc, #148]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 800357c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003580:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800358c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_ADC_ConfigChannel+0x29c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d12b      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x280>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <HAL_ADC_ConfigChannel+0x298>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x23a>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b11      	cmp	r3, #17
 80035a8:	d122      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a18      	ldr	r2, [pc, #96]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 80035b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_ADC_ConfigChannel+0x2a0>)
 80035bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_ADC_ConfigChannel+0x298>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_ADC_ConfigChannel+0x2a4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_ADC_ConfigChannel+0x2a8>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0c9a      	lsrs	r2, r3, #18
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035e2:	e002      	b.n	80035ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f9      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	10000012 	.word	0x10000012
 800360c:	40012000 	.word	0x40012000
 8003610:	40012300 	.word	0x40012300
 8003614:	2000008c 	.word	0x2000008c
 8003618:	431bde83 	.word	0x431bde83

0800361c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <ADC_Init+0x1ec>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a77      	ldr	r2, [pc, #476]	; (8003808 <ADC_Init+0x1ec>)
 800362a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800362e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <ADC_Init+0x1ec>)
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4973      	ldr	r1, [pc, #460]	; (8003808 <ADC_Init+0x1ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800364c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	021a      	lsls	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	4a58      	ldr	r2, [pc, #352]	; (800380c <ADC_Init+0x1f0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e00f      	b.n	8003716 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0202 	bic.w	r2, r2, #2
 8003724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	3b01      	subs	r3, #1
 8003770:	035a      	lsls	r2, r3, #13
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	e007      	b.n	800378c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	051a      	lsls	r2, r3, #20
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037ce:	025a      	lsls	r2, r3, #9
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	029a      	lsls	r2, r3, #10
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40012300 	.word	0x40012300
 800380c:	0f000001 	.word	0x0f000001

08003810 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00
 8003868:	05fa0000 	.word	0x05fa0000

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff29 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ec:	f7ff ff3e 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff ff8e 	bl	8003918 <NVIC_EncodePriority>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff31 	bl	8003888 <__NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff ffa2 	bl	8003980 <SysTick_Config>
 8003a3c:	4603      	mov	r3, r0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e014      	b.n	8003a82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	791b      	ldrb	r3, [r3, #4]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fe fb6f 	bl	800214c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	795b      	ldrb	r3, [r3, #5]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DAC_Start+0x16>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e040      	b.n	8003b22 <HAL_DAC_Start+0x98>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ad4:	2b3c      	cmp	r3, #60	; 0x3c
 8003ad6:	d11d      	bne.n	8003b14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e014      	b.n	8003b14 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	213c      	movs	r1, #60	; 0x3c
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0202 	orr.w	r2, r2, #2
 8003b12:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	3308      	adds	r3, #8
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e004      	b.n	8003b62 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3314      	adds	r3, #20
 8003b60:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	461a      	mov	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	795b      	ldrb	r3, [r3, #5]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_DAC_ConfigChannel+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e03c      	b.n	8003c0a <HAL_DAC_ConfigChannel+0x92>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	22c0      	movs	r2, #192	; 0xc0
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff f8e8 	bl	8002df8 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d008      	beq.n	8003c48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e052      	b.n	8003cee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0216 	bic.w	r2, r2, #22
 8003c56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d103      	bne.n	8003c78 <HAL_DMA_Abort+0x62>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0208 	bic.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c98:	e013      	b.n	8003cc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c9a:	f7ff f8ad 	bl	8002df8 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d90c      	bls.n	8003cc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e015      	b.n	8003cee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e4      	bne.n	8003c9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	223f      	movs	r2, #63	; 0x3f
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d004      	beq.n	8003d14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e00c      	b.n	8003d2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2205      	movs	r2, #5
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e175      	b.n	8004048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f040 8164 	bne.w	8004042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d005      	beq.n	8003d92 <HAL_GPIO_Init+0x56>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d130      	bne.n	8003df4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 0201 	and.w	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d017      	beq.n	8003e30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d123      	bne.n	8003e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80be 	beq.w	8004042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	4b66      	ldr	r3, [pc, #408]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a65      	ldr	r2, [pc, #404]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ede:	4a61      	ldr	r2, [pc, #388]	; (8004064 <HAL_GPIO_Init+0x328>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_GPIO_Init+0x32c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d037      	beq.n	8003f7a <HAL_GPIO_Init+0x23e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a57      	ldr	r2, [pc, #348]	; (800406c <HAL_GPIO_Init+0x330>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_GPIO_Init+0x23a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a56      	ldr	r2, [pc, #344]	; (8004070 <HAL_GPIO_Init+0x334>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <HAL_GPIO_Init+0x236>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a55      	ldr	r2, [pc, #340]	; (8004074 <HAL_GPIO_Init+0x338>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d025      	beq.n	8003f6e <HAL_GPIO_Init+0x232>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a54      	ldr	r2, [pc, #336]	; (8004078 <HAL_GPIO_Init+0x33c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <HAL_GPIO_Init+0x22e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a53      	ldr	r2, [pc, #332]	; (800407c <HAL_GPIO_Init+0x340>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d019      	beq.n	8003f66 <HAL_GPIO_Init+0x22a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_GPIO_Init+0x344>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_Init+0x226>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a51      	ldr	r2, [pc, #324]	; (8004084 <HAL_GPIO_Init+0x348>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <HAL_GPIO_Init+0x222>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a50      	ldr	r2, [pc, #320]	; (8004088 <HAL_GPIO_Init+0x34c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_Init+0x21e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4f      	ldr	r2, [pc, #316]	; (800408c <HAL_GPIO_Init+0x350>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_GPIO_Init+0x21a>
 8003f52:	2309      	movs	r3, #9
 8003f54:	e012      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f56:	230a      	movs	r3, #10
 8003f58:	e010      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	e00e      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f5e:	2307      	movs	r3, #7
 8003f60:	e00c      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f62:	2306      	movs	r3, #6
 8003f64:	e00a      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f66:	2305      	movs	r3, #5
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f8c:	4935      	ldr	r1, [pc, #212]	; (8004064 <HAL_GPIO_Init+0x328>)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_GPIO_Init+0x354>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_GPIO_Init+0x354>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_GPIO_Init+0x354>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <HAL_GPIO_Init+0x354>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_GPIO_Init+0x354>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004012:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_GPIO_Init+0x354>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_GPIO_Init+0x354>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <HAL_GPIO_Init+0x354>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	f67f ae86 	bls.w	8003d5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40013800 	.word	0x40013800
 8004068:	40020000 	.word	0x40020000
 800406c:	40020400 	.word	0x40020400
 8004070:	40020800 	.word	0x40020800
 8004074:	40020c00 	.word	0x40020c00
 8004078:	40021000 	.word	0x40021000
 800407c:	40021400 	.word	0x40021400
 8004080:	40021800 	.word	0x40021800
 8004084:	40021c00 	.word	0x40021c00
 8004088:	40022000 	.word	0x40022000
 800408c:	40022400 	.word	0x40022400
 8004090:	40013c00 	.word	0x40013c00

08004094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e001      	b.n	80040b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040e0:	e003      	b.n	80040ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	041a      	lsls	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	041a      	lsls	r2, r3, #16
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43d9      	mvns	r1, r3
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	400b      	ands	r3, r1
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	619a      	str	r2, [r3, #24]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800415a:	f7fe fe4d 	bl	8002df8 <HAL_GetTick>
 800415e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004160:	e009      	b.n	8004176 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004162:	f7fe fe49 	bl	8002df8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	d901      	bls.n	8004176 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e022      	b.n	80041bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d1ee      	bne.n	8004162 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004190:	f7fe fe32 	bl	8002df8 <HAL_GetTick>
 8004194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004196:	e009      	b.n	80041ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004198:	f7fe fe2e 	bl	8002df8 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a6:	d901      	bls.n	80041ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e007      	b.n	80041bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b8:	d1ee      	bne.n	8004198 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e29b      	b.n	800471a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8087 	beq.w	80042fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f0:	4b96      	ldr	r3, [pc, #600]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d00c      	beq.n	8004216 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fc:	4b93      	ldr	r3, [pc, #588]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b08      	cmp	r3, #8
 8004206:	d112      	bne.n	800422e <HAL_RCC_OscConfig+0x62>
 8004208:	4b90      	ldr	r3, [pc, #576]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004214:	d10b      	bne.n	800422e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d06c      	beq.n	80042fc <HAL_RCC_OscConfig+0x130>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d168      	bne.n	80042fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e275      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x7a>
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a83      	ldr	r2, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e02e      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x9c>
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7e      	ldr	r2, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e01d      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0xc0>
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b73      	ldr	r3, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a72      	ldr	r2, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0xd8>
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6e      	ldr	r2, [pc, #440]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4b6c      	ldr	r3, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6b      	ldr	r2, [pc, #428]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800429e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe fda4 	bl	8002df8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fe fda0 	bl	8002df8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e229      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe fd90 	bl	8002df8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fe fd8c 	bl	8002df8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e215      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x110>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d069      	beq.n	80043de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800430a:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b08      	cmp	r3, #8
 8004320:	d11c      	bne.n	800435c <HAL_RCC_OscConfig+0x190>
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d116      	bne.n	800435c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_RCC_OscConfig+0x17a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e1e9      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	493d      	ldr	r1, [pc, #244]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	e040      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a38      	ldr	r2, [pc, #224]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe fd42 	bl	8002df8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7fe fd3e 	bl	8002df8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1c7      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4929      	ldr	r1, [pc, #164]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
 80043aa:	e018      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe fd1e 	bl	8002df8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fe fd1a 	bl	8002df8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1a3      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d038      	beq.n	800445c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d019      	beq.n	8004426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_RCC_OscConfig+0x280>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fe fcfb 	bl	8002df8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fe fcf7 	bl	8002df8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e180      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x23a>
 8004424:	e01a      	b.n	800445c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_RCC_OscConfig+0x280>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fe fce1 	bl	8002df8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fe fcdd 	bl	8002df8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d903      	bls.n	8004450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e166      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
 800444c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ee      	bne.n	800443a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a4 	beq.w	80045b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b8c      	ldr	r3, [pc, #560]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b89      	ldr	r3, [pc, #548]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a88      	ldr	r2, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	4b86      	ldr	r3, [pc, #536]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	4b83      	ldr	r3, [pc, #524]	; (80046a0 <HAL_RCC_OscConfig+0x4d4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d118      	bne.n	80044d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800449e:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <HAL_RCC_OscConfig+0x4d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7f      	ldr	r2, [pc, #508]	; (80046a0 <HAL_RCC_OscConfig+0x4d4>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fe fca5 	bl	8002df8 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fe fca1 	bl	8002df8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b64      	cmp	r3, #100	; 0x64
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e12a      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <HAL_RCC_OscConfig+0x4d4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x31a>
 80044d8:	4b70      	ldr	r3, [pc, #448]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a6f      	ldr	r2, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	e02d      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x33c>
 80044ee:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a6a      	ldr	r2, [pc, #424]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	4b68      	ldr	r3, [pc, #416]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a67      	ldr	r2, [pc, #412]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e01c      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x35e>
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	4b5f      	ldr	r3, [pc, #380]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a5e      	ldr	r2, [pc, #376]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	e00b      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
 800452a:	4b5c      	ldr	r3, [pc, #368]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a5b      	ldr	r2, [pc, #364]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a58      	ldr	r2, [pc, #352]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe fc55 	bl	8002df8 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fe fc51 	bl	8002df8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0d8      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCC_OscConfig+0x386>
 8004574:	e014      	b.n	80045a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fe fc3f 	bl	8002df8 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fe fc3b 	bl	8002df8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0c2      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a3c      	ldr	r2, [pc, #240]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80ae 	beq.w	8004718 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045bc:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d06d      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d14b      	bne.n	8004668 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a31      	ldr	r2, [pc, #196]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe fc0c 	bl	8002df8 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe fc08 	bl	8002df8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e091      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	491b      	ldr	r1, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fe fbda 	bl	8002df8 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe fbd6 	bl	8002df8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e05f      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x47c>
 8004666:	e057      	b.n	8004718 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 800466e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe fbc0 	bl	8002df8 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe fbbc 	bl	8002df8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e045      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_OscConfig+0x4d0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x4b0>
 800469a:	e03d      	b.n	8004718 <HAL_RCC_OscConfig+0x54c>
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_RCC_OscConfig+0x558>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d030      	beq.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d129      	bne.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d122      	bne.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046dc:	4293      	cmp	r3, r2
 80046de:	d119      	bne.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	3b01      	subs	r3, #1
 80046ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d10f      	bne.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d107      	bne.n	8004714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0d0      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b67      	ldr	r3, [pc, #412]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	4965      	ldr	r1, [pc, #404]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d040      	beq.n	800484c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d115      	bne.n	800480a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e073      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06b      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4936      	ldr	r1, [pc, #216]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fe faec 	bl	8002df8 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	e00a      	b.n	800483a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fe fae8 	bl	8002df8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e053      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 020c 	and.w	r2, r3, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	429a      	cmp	r2, r3
 800484a:	d1eb      	bne.n	8004824 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d210      	bcs.n	800487c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4922      	ldr	r1, [pc, #136]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490a      	ldr	r1, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1cc>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1d0>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1d4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fa48 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	0800cfb8 	.word	0x0800cfb8
 80048f8:	2000008c 	.word	0x2000008c
 80048fc:	20000090 	.word	0x20000090

08004900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004918:	4b67      	ldr	r3, [pc, #412]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d00d      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 8004924:	2b08      	cmp	r3, #8
 8004926:	f200 80bd 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x34>
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x3a>
 8004932:	e0b7      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004936:	60bb      	str	r3, [r7, #8]
      break;
 8004938:	e0b7      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493a:	4b61      	ldr	r3, [pc, #388]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800493c:	60bb      	str	r3, [r7, #8]
      break;
 800493e:	e0b4      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004940:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800494a:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04d      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	461a      	mov	r2, r3
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	ea02 0800 	and.w	r8, r2, r0
 800496e:	ea03 0901 	and.w	r9, r3, r1
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	014b      	lsls	r3, r1, #5
 8004980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004984:	0142      	lsls	r2, r0, #5
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	ebb0 0008 	subs.w	r0, r0, r8
 800498e:	eb61 0109 	sbc.w	r1, r1, r9
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049a0:	0182      	lsls	r2, r0, #6
 80049a2:	1a12      	subs	r2, r2, r0
 80049a4:	eb63 0301 	sbc.w	r3, r3, r1
 80049a8:	f04f 0000 	mov.w	r0, #0
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	00d9      	lsls	r1, r3, #3
 80049b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b6:	00d0      	lsls	r0, r2, #3
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	eb12 0208 	adds.w	r2, r2, r8
 80049c0:	eb43 0309 	adc.w	r3, r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0259      	lsls	r1, r3, #9
 80049ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049d2:	0250      	lsls	r0, r2, #9
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f7fb fe50 	bl	8000688 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e04a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	ea02 0400 	and.w	r4, r2, r0
 8004a0a:	ea03 0501 	and.w	r5, r3, r1
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	014b      	lsls	r3, r1, #5
 8004a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a20:	0142      	lsls	r2, r0, #5
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	1b00      	subs	r0, r0, r4
 8004a28:	eb61 0105 	sbc.w	r1, r1, r5
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3a:	0182      	lsls	r2, r0, #6
 8004a3c:	1a12      	subs	r2, r2, r0
 8004a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	00d9      	lsls	r1, r3, #3
 8004a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a50:	00d0      	lsls	r0, r2, #3
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	1912      	adds	r2, r2, r4
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0299      	lsls	r1, r3, #10
 8004a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6a:	0290      	lsls	r0, r2, #10
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	f7fb fe04 	bl	8000688 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200

08004ac4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2000008c 	.word	0x2000008c

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	0800cfc8 	.word	0x0800cfc8

08004b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b08:	f7ff ffdc 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	0800cfc8 	.word	0x0800cfc8

08004b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b54:	4b69      	ldr	r3, [pc, #420]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a68      	ldr	r2, [pc, #416]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b5e:	6093      	str	r3, [r2, #8]
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	4964      	ldr	r1, [pc, #400]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b76:	2301      	movs	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d017      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b86:	4b5d      	ldr	r3, [pc, #372]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	4959      	ldr	r1, [pc, #356]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d101      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d017      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	494a      	ldr	r1, [pc, #296]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be0:	d101      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 808b 	beq.w	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c10:	4b3a      	ldr	r3, [pc, #232]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4a39      	ldr	r2, [pc, #228]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1c:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a34      	ldr	r2, [pc, #208]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fe f8e0 	bl	8002df8 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fe f8dc 	bl	8002df8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e38f      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c5a:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d035      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d02e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c78:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d114      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fe f8a4 	bl	8002df8 <HAL_GetTick>
 8004cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb2:	e00a      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb4:	f7fe f8a0 	bl	8002df8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e351      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ee      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	4901      	ldr	r1, [pc, #4]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
 8004d04:	0ffffcff 	.word	0x0ffffcff
 8004d08:	4bb3      	ldr	r3, [pc, #716]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4ab2      	ldr	r2, [pc, #712]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	4bb0      	ldr	r3, [pc, #704]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	49ad      	ldr	r1, [pc, #692]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d32:	4ba9      	ldr	r3, [pc, #676]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d38:	4aa7      	ldr	r2, [pc, #668]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d42:	4ba5      	ldr	r3, [pc, #660]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	49a2      	ldr	r1, [pc, #648]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d60:	4b9d      	ldr	r3, [pc, #628]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6e:	499a      	ldr	r1, [pc, #616]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d82:	4b95      	ldr	r3, [pc, #596]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d90:	4991      	ldr	r1, [pc, #580]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da4:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	4989      	ldr	r1, [pc, #548]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc6:	4b84      	ldr	r3, [pc, #528]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	4980      	ldr	r1, [pc, #512]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de8:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	4978      	ldr	r1, [pc, #480]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f023 020c 	bic.w	r2, r3, #12
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	496f      	ldr	r1, [pc, #444]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	4967      	ldr	r1, [pc, #412]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e4e:	4b62      	ldr	r3, [pc, #392]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	495e      	ldr	r1, [pc, #376]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	4956      	ldr	r1, [pc, #344]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e92:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	494d      	ldr	r1, [pc, #308]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004eb4:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	4945      	ldr	r1, [pc, #276]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	493c      	ldr	r1, [pc, #240]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ef8:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f06:	4934      	ldr	r1, [pc, #208]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d011      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f28:	492b      	ldr	r1, [pc, #172]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f68:	491b      	ldr	r1, [pc, #108]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f7c:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8c:	4912      	ldr	r1, [pc, #72]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb0:	4909      	ldr	r1, [pc, #36]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	4986      	ldr	r1, [pc, #536]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00b      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ff0:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	497d      	ldr	r1, [pc, #500]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d006      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80d6 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800501c:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a75      	ldr	r2, [pc, #468]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fd fee6 	bl	8002df8 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005030:	f7fd fee2 	bl	8002df8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e195      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005042:	4b6d      	ldr	r3, [pc, #436]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d021      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11d      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005070:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0e1b      	lsrs	r3, r3, #24
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	019a      	lsls	r2, r3, #6
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	071b      	lsls	r3, r3, #28
 8005096:	4958      	ldr	r1, [pc, #352]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c8:	d129      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050ca:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050d8:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050de:	0f1b      	lsrs	r3, r3, #28
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	019a      	lsls	r2, r3, #6
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	493e      	ldr	r1, [pc, #248]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005106:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510c:	f023 021f 	bic.w	r2, r3, #31
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	3b01      	subs	r3, #1
 8005116:	4938      	ldr	r1, [pc, #224]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01d      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	0e1b      	lsrs	r3, r3, #24
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005138:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513e:	0f1b      	lsrs	r3, r3, #28
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	019a      	lsls	r2, r3, #6
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	041b      	lsls	r3, r3, #16
 8005152:	431a      	orrs	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	061b      	lsls	r3, r3, #24
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	071b      	lsls	r3, r3, #28
 800515e:	4926      	ldr	r1, [pc, #152]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d011      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	019a      	lsls	r2, r3, #6
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	071b      	lsls	r3, r3, #28
 800518e:	491a      	ldr	r1, [pc, #104]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fd fe29 	bl	8002df8 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051aa:	f7fd fe25 	bl	8002df8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b64      	cmp	r3, #100	; 0x64
 80051b6:	d901      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e0d8      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f040 80ce 	bne.w	800536c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fd fe0c 	bl	8002df8 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051e2:	e00b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e4:	f7fd fe08 	bl	8002df8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d904      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0bb      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051fc:	4b5e      	ldr	r3, [pc, #376]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005208:	d0ec      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d12a      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005232:	4b51      	ldr	r3, [pc, #324]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005240:	4b4d      	ldr	r3, [pc, #308]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	0f1b      	lsrs	r3, r3, #28
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	019a      	lsls	r2, r3, #6
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	061b      	lsls	r3, r3, #24
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	071b      	lsls	r3, r3, #28
 8005266:	4944      	ldr	r1, [pc, #272]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800526e:	4b42      	ldr	r3, [pc, #264]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005274:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	3b01      	subs	r3, #1
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	493d      	ldr	r1, [pc, #244]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d022      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529c:	d11d      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052ac:	4b32      	ldr	r3, [pc, #200]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	0f1b      	lsrs	r3, r3, #28
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	019a      	lsls	r2, r3, #6
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	431a      	orrs	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	071b      	lsls	r3, r3, #28
 80052d2:	4929      	ldr	r1, [pc, #164]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d028      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	0e1b      	lsrs	r3, r3, #24
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4917      	ldr	r1, [pc, #92]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4911      	ldr	r1, [pc, #68]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005344:	f7fd fd58 	bl	8002df8 <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800534a:	e008      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800534c:	f7fd fd54 	bl	8002df8 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e007      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536a:	d1ef      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800

0800537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e049      	b.n	8005422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fad8 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fb3a 	bl	8005a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e054      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d01d      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_TIM_Base_Start_IT+0xd4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a21      	ldr	r2, [pc, #132]	; (8005504 <HAL_TIM_Base_Start_IT+0xd8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <HAL_TIM_Base_Start_IT+0xdc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	; (800550c <HAL_TIM_Base_Start_IT+0xe0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_TIM_Base_Start_IT+0xe4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_TIM_Base_Start_IT+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d115      	bne.n	80054d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_TIM_Base_Start_IT+0xec>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d015      	beq.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d011      	beq.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e008      	b.n	80054ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e000      	b.n	80054ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40010400 	.word	0x40010400
 8005510:	40014000 	.word	0x40014000
 8005514:	40001800 	.word	0x40001800
 8005518:	00010007 	.word	0x00010007

0800551c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	f241 1311 	movw	r3, #4369	; 0x1111
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <HAL_TIM_Base_Stop_IT+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f240 4344 	movw	r3, #1092	; 0x444
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_TIM_Base_Stop_IT+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0202 	mvn.w	r2, #2
 80055a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa1b 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fa0d 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa1e 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0204 	mvn.w	r2, #4
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f9f1 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9e3 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9f4 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d122      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11b      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0208 	mvn.w	r2, #8
 800564e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9c7 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 800566a:	e005      	b.n	8005678 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9b9 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9ca 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d122      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0210 	mvn.w	r2, #16
 80056a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2208      	movs	r2, #8
 80056a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f99d 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 80056be:	e005      	b.n	80056cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f98f 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9a0 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10e      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0201 	mvn.w	r2, #1
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f969 	bl	80059d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d10e      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d107      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fbeb 	bl	8005f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fbde 	bl	8005f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f94e 	bl	8005a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b20      	cmp	r3, #32
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0220 	mvn.w	r2, #32
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb9e 	bl	8005eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_ConfigClockSource+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0b4      	b.n	800593e <HAL_TIM_ConfigClockSource+0x186>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <HAL_TIM_ConfigClockSource+0x190>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580c:	d03e      	beq.n	800588c <HAL_TIM_ConfigClockSource+0xd4>
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	f200 8087 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	f000 8086 	beq.w	800592a <HAL_TIM_ConfigClockSource+0x172>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d87f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b70      	cmp	r3, #112	; 0x70
 8005826:	d01a      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xa6>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d87b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d050      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d877      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d03c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d873      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d058      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d86f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d064      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d86b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d060      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d867      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d05a      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	e062      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f000 fa8f 	bl	8005d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
      break;
 800588a:	e04f      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f000 fa78 	bl	8005d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ae:	609a      	str	r2, [r3, #8]
      break;
 80058b0:	e03c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f9ec 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2150      	movs	r1, #80	; 0x50
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fa45 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80058d0:	e02c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 fa0b 	bl	8005cfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2160      	movs	r1, #96	; 0x60
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa35 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 80058f0:	e01c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f9cc 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa25 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 8005910:	e00c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 fa1c 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 8005922:	e003      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e000      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800592a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	fffeff88 	.word	0xfffeff88

0800594c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005960:	2302      	movs	r3, #2
 8005962:	e031      	b.n	80059c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8fc 	bl	8005b74 <TIM_SlaveTimer_SetConfig>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e018      	b.n	80059c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3d      	ldr	r2, [pc, #244]	; (8005b4c <TIM_Base_SetConfig+0x118>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3c      	ldr	r2, [pc, #240]	; (8005b50 <TIM_Base_SetConfig+0x11c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <TIM_Base_SetConfig+0x120>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3a      	ldr	r2, [pc, #232]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2f      	ldr	r2, [pc, #188]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d027      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <TIM_Base_SetConfig+0x118>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d023      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2b      	ldr	r2, [pc, #172]	; (8005b50 <TIM_Base_SetConfig+0x11c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <TIM_Base_SetConfig+0x120>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d017      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <TIM_Base_SetConfig+0x128>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <TIM_Base_SetConfig+0x12c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <TIM_Base_SetConfig+0x130>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a25      	ldr	r2, [pc, #148]	; (8005b68 <TIM_Base_SetConfig+0x134>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	; (8005b6c <TIM_Base_SetConfig+0x138>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <TIM_Base_SetConfig+0x13c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <TIM_Base_SetConfig+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800
 8005b68:	40001800 	.word	0x40001800
 8005b6c:	40001c00 	.word	0x40001c00
 8005b70:	40002000 	.word	0x40002000

08005b74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <TIM_SlaveTimer_SetConfig+0x124>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b70      	cmp	r3, #112	; 0x70
 8005bbc:	d01a      	beq.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x80>
 8005bbe:	2b70      	cmp	r3, #112	; 0x70
 8005bc0:	d860      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005bc2:	2b60      	cmp	r3, #96	; 0x60
 8005bc4:	d054      	beq.n	8005c70 <TIM_SlaveTimer_SetConfig+0xfc>
 8005bc6:	2b60      	cmp	r3, #96	; 0x60
 8005bc8:	d85c      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005bca:	2b50      	cmp	r3, #80	; 0x50
 8005bcc:	d046      	beq.n	8005c5c <TIM_SlaveTimer_SetConfig+0xe8>
 8005bce:	2b50      	cmp	r3, #80	; 0x50
 8005bd0:	d858      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d019      	beq.n	8005c0a <TIM_SlaveTimer_SetConfig+0x96>
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d854      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d055      	beq.n	8005c8a <TIM_SlaveTimer_SetConfig+0x116>
 8005bde:	2b30      	cmp	r3, #48	; 0x30
 8005be0:	d850      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d051      	beq.n	8005c8a <TIM_SlaveTimer_SetConfig+0x116>
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d84c      	bhi.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d04d      	beq.n	8005c8a <TIM_SlaveTimer_SetConfig+0x116>
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d04b      	beq.n	8005c8a <TIM_SlaveTimer_SetConfig+0x116>
 8005bf2:	e047      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68d9      	ldr	r1, [r3, #12]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f000 f8c4 	bl	8005d90 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005c08:	e040      	b.n	8005c8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d101      	bne.n	8005c16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e03b      	b.n	8005c8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
      break;
 8005c5a:	e017      	b.n	8005c8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f000 f817 	bl	8005c9c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c6e:	e00d      	b.n	8005c8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6899      	ldr	r1, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f000 f83c 	bl	8005cfa <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c82:	e003      	b.n	8005c8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	75fb      	strb	r3, [r7, #23]
      break;
 8005c88:	e000      	b.n	8005c8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005c8a:	bf00      	nop
  }

  return status;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	fffefff8 	.word	0xfffefff8

08005c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f043 0307 	orr.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	021a      	lsls	r2, r3, #8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e06d      	b.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a30      	ldr	r2, [pc, #192]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5a:	d01d      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10c      	bne.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40001800 	.word	0x40001800

08005eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e040      	b.n	8005fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc fd72 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fbe8 	bl	800673c <UART_SetConfig>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e022      	b.n	8005fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fe3e 	bl	8006c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fec5 	bl	8006d44 <UART_CheckIdleState>
 8005fba:	4603      	mov	r3, r0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	; 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d156      	bne.n	8006088 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_UART_Transmit_IT+0x22>
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e04f      	b.n	800608a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Transmit_IT+0x34>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e048      	b.n	800608a <HAL_UART_Transmit_IT+0xc6>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2221      	movs	r2, #33	; 0x21
 8006028:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d107      	bne.n	8006044 <HAL_UART_Transmit_IT+0x80>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <HAL_UART_Transmit_IT+0xd4>)
 8006040:	669a      	str	r2, [r3, #104]	; 0x68
 8006042:	e002      	b.n	800604a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <HAL_UART_Transmit_IT+0xd8>)
 8006048:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	613b      	str	r3, [r7, #16]
   return(result);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	69f9      	ldr	r1, [r7, #28]
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	61bb      	str	r3, [r7, #24]
   return(result);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e6      	bne.n	8006052 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	372c      	adds	r7, #44	; 0x2c
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	0800729d 	.word	0x0800729d
 800609c:	080071e7 	.word	0x080071e7

080060a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d13d      	bne.n	8006132 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_UART_Receive_IT+0x22>
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e036      	b.n	8006134 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Receive_IT+0x34>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e02f      	b.n	8006134 <HAL_UART_Receive_IT+0x94>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d018      	beq.n	8006122 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	613b      	str	r3, [r7, #16]
   return(result);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	69f9      	ldr	r1, [r7, #28]
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	61bb      	str	r3, [r7, #24]
   return(result);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	461a      	mov	r2, r3
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 ff19 	bl	8006f60 <UART_Start_Receive_IT>
 800612e:	4603      	mov	r3, r0
 8006130:	e000      	b.n	8006134 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b0ba      	sub	sp, #232	; 0xe8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006162:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006166:	f640 030f 	movw	r3, #2063	; 0x80f
 800616a:	4013      	ands	r3, r2
 800616c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d115      	bne.n	80061a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 82a4 	beq.w	80066e2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
      }
      return;
 80061a2:	e29e      	b.n	80066e2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8117 	beq.w	80063dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061be:	4b85      	ldr	r3, [pc, #532]	; (80063d4 <HAL_UART_IRQHandler+0x298>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 810a 	beq.w	80063dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d011      	beq.n	80061f8 <HAL_UART_IRQHandler+0xbc>
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2201      	movs	r2, #1
 80061e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ee:	f043 0201 	orr.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d011      	beq.n	8006228 <HAL_UART_IRQHandler+0xec>
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2202      	movs	r2, #2
 8006216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621e:	f043 0204 	orr.w	r2, r3, #4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d011      	beq.n	8006258 <HAL_UART_IRQHandler+0x11c>
 8006234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2204      	movs	r2, #4
 8006246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624e:	f043 0202 	orr.w	r2, r3, #2
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d017      	beq.n	8006294 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006274:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2208      	movs	r2, #8
 8006282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628a:	f043 0208 	orr.w	r2, r3, #8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629c:	2b00      	cmp	r3, #0
 800629e:	d012      	beq.n	80062c6 <HAL_UART_IRQHandler+0x18a>
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00c      	beq.n	80062c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 820a 	beq.w	80066e6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00d      	beq.n	80062fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006316:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800631a:	2b00      	cmp	r3, #0
 800631c:	d04f      	beq.n	80063be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fee8 	bl	80070f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d141      	bne.n	80063b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800634c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800635e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800636a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1d9      	bne.n	8006332 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <HAL_UART_IRQHandler+0x29c>)
 800638c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	4618      	mov	r0, r3
 8006394:	f7fd fcaf 	bl	8003cf6 <HAL_DMA_Abort_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d017      	beq.n	80063ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	e00f      	b.n	80063ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9a4 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b4:	e00b      	b.n	80063ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f9a0 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e007      	b.n	80063ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f99c 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063cc:	e18b      	b.n	80066e6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ce:	bf00      	nop
    return;
 80063d0:	e189      	b.n	80066e6 <HAL_UART_IRQHandler+0x5aa>
 80063d2:	bf00      	nop
 80063d4:	04000120 	.word	0x04000120
 80063d8:	080071bb 	.word	0x080071bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f040 8144 	bne.w	800666e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 813d 	beq.w	800666e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8136 	beq.w	800666e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2210      	movs	r2, #16
 8006408:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	f040 80b2 	bne.w	800657e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006426:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 815d 	beq.w	80066ea <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643a:	429a      	cmp	r2, r3
 800643c:	f080 8155 	bcs.w	80066ea <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006446:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006454:	f000 8085 	beq.w	8006562 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800646c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006486:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800648e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800649a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1da      	bne.n	8006458 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e1      	bne.n	80064a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006502:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006504:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006508:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e3      	bne.n	80064de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006544:	65bb      	str	r3, [r7, #88]	; 0x58
 8006546:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800654a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e4      	bne.n	8006522 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fb5a 	bl	8003c16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656e:	b29b      	uxth	r3, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	b29b      	uxth	r3, r3
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8ca 	bl	8006710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800657c:	e0b5      	b.n	80066ea <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800658a:	b29b      	uxth	r3, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80a7 	beq.w	80066ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80065a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80a2 	beq.w	80066ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065cc:	647b      	str	r3, [r7, #68]	; 0x44
 80065ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e4      	bne.n	80065aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	623b      	str	r3, [r7, #32]
   return(result);
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006604:	633a      	str	r2, [r7, #48]	; 0x30
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800660a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e3      	bne.n	80065e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	60fb      	str	r3, [r7, #12]
   return(result);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0310 	bic.w	r3, r3, #16
 800663e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	617b      	str	r3, [r7, #20]
   return(result);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e4      	bne.n	800662a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f852 	bl	8006710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800666c:	e03f      	b.n	80066ee <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <HAL_UART_IRQHandler+0x55c>
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800668e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f849 	bl	8006728 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006696:	e02d      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00e      	beq.n	80066c2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01c      	beq.n	80066f2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
    }
    return;
 80066c0:	e017      	b.n	80066f2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d012      	beq.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
 80066ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fe3e 	bl	800735c <UART_EndTransmit_IT>
    return;
 80066e0:	e008      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066e2:	bf00      	nop
 80066e4:	e006      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80066f2:	bf00      	nop
  }

}
 80066f4:	37e8      	adds	r7, #232	; 0xe8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop

080066fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4ba7      	ldr	r3, [pc, #668]	; (8006a04 <UART_SetConfig+0x2c8>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	430b      	orrs	r3, r1
 8006772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a95      	ldr	r2, [pc, #596]	; (8006a08 <UART_SetConfig+0x2cc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d120      	bne.n	80067fa <UART_SetConfig+0xbe>
 80067b8:	4b94      	ldr	r3, [pc, #592]	; (8006a0c <UART_SetConfig+0x2d0>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d816      	bhi.n	80067f4 <UART_SetConfig+0xb8>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x90>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	080067e3 	.word	0x080067e3
 80067d8:	080067ef 	.word	0x080067ef
 80067dc:	2301      	movs	r3, #1
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e14f      	b.n	8006a82 <UART_SetConfig+0x346>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e14c      	b.n	8006a82 <UART_SetConfig+0x346>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e149      	b.n	8006a82 <UART_SetConfig+0x346>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e146      	b.n	8006a82 <UART_SetConfig+0x346>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e143      	b.n	8006a82 <UART_SetConfig+0x346>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a84      	ldr	r2, [pc, #528]	; (8006a10 <UART_SetConfig+0x2d4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d132      	bne.n	800686a <UART_SetConfig+0x12e>
 8006804:	4b81      	ldr	r3, [pc, #516]	; (8006a0c <UART_SetConfig+0x2d0>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d828      	bhi.n	8006864 <UART_SetConfig+0x128>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0xdc>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	0800684d 	.word	0x0800684d
 800681c:	08006865 	.word	0x08006865
 8006820:	08006865 	.word	0x08006865
 8006824:	08006865 	.word	0x08006865
 8006828:	08006859 	.word	0x08006859
 800682c:	08006865 	.word	0x08006865
 8006830:	08006865 	.word	0x08006865
 8006834:	08006865 	.word	0x08006865
 8006838:	08006853 	.word	0x08006853
 800683c:	08006865 	.word	0x08006865
 8006840:	08006865 	.word	0x08006865
 8006844:	08006865 	.word	0x08006865
 8006848:	0800685f 	.word	0x0800685f
 800684c:	2300      	movs	r3, #0
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e117      	b.n	8006a82 <UART_SetConfig+0x346>
 8006852:	2302      	movs	r3, #2
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e114      	b.n	8006a82 <UART_SetConfig+0x346>
 8006858:	2304      	movs	r3, #4
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e111      	b.n	8006a82 <UART_SetConfig+0x346>
 800685e:	2308      	movs	r3, #8
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e10e      	b.n	8006a82 <UART_SetConfig+0x346>
 8006864:	2310      	movs	r3, #16
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e10b      	b.n	8006a82 <UART_SetConfig+0x346>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a69      	ldr	r2, [pc, #420]	; (8006a14 <UART_SetConfig+0x2d8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d120      	bne.n	80068b6 <UART_SetConfig+0x17a>
 8006874:	4b65      	ldr	r3, [pc, #404]	; (8006a0c <UART_SetConfig+0x2d0>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d013      	beq.n	80068aa <UART_SetConfig+0x16e>
 8006882:	2b30      	cmp	r3, #48	; 0x30
 8006884:	d814      	bhi.n	80068b0 <UART_SetConfig+0x174>
 8006886:	2b20      	cmp	r3, #32
 8006888:	d009      	beq.n	800689e <UART_SetConfig+0x162>
 800688a:	2b20      	cmp	r3, #32
 800688c:	d810      	bhi.n	80068b0 <UART_SetConfig+0x174>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <UART_SetConfig+0x15c>
 8006892:	2b10      	cmp	r3, #16
 8006894:	d006      	beq.n	80068a4 <UART_SetConfig+0x168>
 8006896:	e00b      	b.n	80068b0 <UART_SetConfig+0x174>
 8006898:	2300      	movs	r3, #0
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e0f1      	b.n	8006a82 <UART_SetConfig+0x346>
 800689e:	2302      	movs	r3, #2
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e0ee      	b.n	8006a82 <UART_SetConfig+0x346>
 80068a4:	2304      	movs	r3, #4
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e0eb      	b.n	8006a82 <UART_SetConfig+0x346>
 80068aa:	2308      	movs	r3, #8
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e0e8      	b.n	8006a82 <UART_SetConfig+0x346>
 80068b0:	2310      	movs	r3, #16
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e0e5      	b.n	8006a82 <UART_SetConfig+0x346>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a57      	ldr	r2, [pc, #348]	; (8006a18 <UART_SetConfig+0x2dc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d120      	bne.n	8006902 <UART_SetConfig+0x1c6>
 80068c0:	4b52      	ldr	r3, [pc, #328]	; (8006a0c <UART_SetConfig+0x2d0>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ca:	2bc0      	cmp	r3, #192	; 0xc0
 80068cc:	d013      	beq.n	80068f6 <UART_SetConfig+0x1ba>
 80068ce:	2bc0      	cmp	r3, #192	; 0xc0
 80068d0:	d814      	bhi.n	80068fc <UART_SetConfig+0x1c0>
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d009      	beq.n	80068ea <UART_SetConfig+0x1ae>
 80068d6:	2b80      	cmp	r3, #128	; 0x80
 80068d8:	d810      	bhi.n	80068fc <UART_SetConfig+0x1c0>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <UART_SetConfig+0x1a8>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d006      	beq.n	80068f0 <UART_SetConfig+0x1b4>
 80068e2:	e00b      	b.n	80068fc <UART_SetConfig+0x1c0>
 80068e4:	2300      	movs	r3, #0
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e0cb      	b.n	8006a82 <UART_SetConfig+0x346>
 80068ea:	2302      	movs	r3, #2
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e0c8      	b.n	8006a82 <UART_SetConfig+0x346>
 80068f0:	2304      	movs	r3, #4
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e0c5      	b.n	8006a82 <UART_SetConfig+0x346>
 80068f6:	2308      	movs	r3, #8
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e0c2      	b.n	8006a82 <UART_SetConfig+0x346>
 80068fc:	2310      	movs	r3, #16
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e0bf      	b.n	8006a82 <UART_SetConfig+0x346>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a45      	ldr	r2, [pc, #276]	; (8006a1c <UART_SetConfig+0x2e0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d125      	bne.n	8006958 <UART_SetConfig+0x21c>
 800690c:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <UART_SetConfig+0x2d0>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691a:	d017      	beq.n	800694c <UART_SetConfig+0x210>
 800691c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006920:	d817      	bhi.n	8006952 <UART_SetConfig+0x216>
 8006922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006926:	d00b      	beq.n	8006940 <UART_SetConfig+0x204>
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d811      	bhi.n	8006952 <UART_SetConfig+0x216>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <UART_SetConfig+0x1fe>
 8006932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006936:	d006      	beq.n	8006946 <UART_SetConfig+0x20a>
 8006938:	e00b      	b.n	8006952 <UART_SetConfig+0x216>
 800693a:	2300      	movs	r3, #0
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e0a0      	b.n	8006a82 <UART_SetConfig+0x346>
 8006940:	2302      	movs	r3, #2
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e09d      	b.n	8006a82 <UART_SetConfig+0x346>
 8006946:	2304      	movs	r3, #4
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e09a      	b.n	8006a82 <UART_SetConfig+0x346>
 800694c:	2308      	movs	r3, #8
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e097      	b.n	8006a82 <UART_SetConfig+0x346>
 8006952:	2310      	movs	r3, #16
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e094      	b.n	8006a82 <UART_SetConfig+0x346>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a30      	ldr	r2, [pc, #192]	; (8006a20 <UART_SetConfig+0x2e4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d125      	bne.n	80069ae <UART_SetConfig+0x272>
 8006962:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <UART_SetConfig+0x2d0>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800696c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006970:	d017      	beq.n	80069a2 <UART_SetConfig+0x266>
 8006972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006976:	d817      	bhi.n	80069a8 <UART_SetConfig+0x26c>
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697c:	d00b      	beq.n	8006996 <UART_SetConfig+0x25a>
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d811      	bhi.n	80069a8 <UART_SetConfig+0x26c>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x254>
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d006      	beq.n	800699c <UART_SetConfig+0x260>
 800698e:	e00b      	b.n	80069a8 <UART_SetConfig+0x26c>
 8006990:	2301      	movs	r3, #1
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e075      	b.n	8006a82 <UART_SetConfig+0x346>
 8006996:	2302      	movs	r3, #2
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e072      	b.n	8006a82 <UART_SetConfig+0x346>
 800699c:	2304      	movs	r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e06f      	b.n	8006a82 <UART_SetConfig+0x346>
 80069a2:	2308      	movs	r3, #8
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e06c      	b.n	8006a82 <UART_SetConfig+0x346>
 80069a8:	2310      	movs	r3, #16
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e069      	b.n	8006a82 <UART_SetConfig+0x346>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1c      	ldr	r2, [pc, #112]	; (8006a24 <UART_SetConfig+0x2e8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d137      	bne.n	8006a28 <UART_SetConfig+0x2ec>
 80069b8:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <UART_SetConfig+0x2d0>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069c6:	d017      	beq.n	80069f8 <UART_SetConfig+0x2bc>
 80069c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069cc:	d817      	bhi.n	80069fe <UART_SetConfig+0x2c2>
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d2:	d00b      	beq.n	80069ec <UART_SetConfig+0x2b0>
 80069d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d8:	d811      	bhi.n	80069fe <UART_SetConfig+0x2c2>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <UART_SetConfig+0x2aa>
 80069de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e2:	d006      	beq.n	80069f2 <UART_SetConfig+0x2b6>
 80069e4:	e00b      	b.n	80069fe <UART_SetConfig+0x2c2>
 80069e6:	2300      	movs	r3, #0
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e04a      	b.n	8006a82 <UART_SetConfig+0x346>
 80069ec:	2302      	movs	r3, #2
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e047      	b.n	8006a82 <UART_SetConfig+0x346>
 80069f2:	2304      	movs	r3, #4
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e044      	b.n	8006a82 <UART_SetConfig+0x346>
 80069f8:	2308      	movs	r3, #8
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e041      	b.n	8006a82 <UART_SetConfig+0x346>
 80069fe:	2310      	movs	r3, #16
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e03e      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a04:	efff69f3 	.word	0xefff69f3
 8006a08:	40011000 	.word	0x40011000
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	40004400 	.word	0x40004400
 8006a14:	40004800 	.word	0x40004800
 8006a18:	40004c00 	.word	0x40004c00
 8006a1c:	40005000 	.word	0x40005000
 8006a20:	40011400 	.word	0x40011400
 8006a24:	40007800 	.word	0x40007800
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a71      	ldr	r2, [pc, #452]	; (8006bf4 <UART_SetConfig+0x4b8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d125      	bne.n	8006a7e <UART_SetConfig+0x342>
 8006a32:	4b71      	ldr	r3, [pc, #452]	; (8006bf8 <UART_SetConfig+0x4bc>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a40:	d017      	beq.n	8006a72 <UART_SetConfig+0x336>
 8006a42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a46:	d817      	bhi.n	8006a78 <UART_SetConfig+0x33c>
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4c:	d00b      	beq.n	8006a66 <UART_SetConfig+0x32a>
 8006a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a52:	d811      	bhi.n	8006a78 <UART_SetConfig+0x33c>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <UART_SetConfig+0x324>
 8006a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a5c:	d006      	beq.n	8006a6c <UART_SetConfig+0x330>
 8006a5e:	e00b      	b.n	8006a78 <UART_SetConfig+0x33c>
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a66:	2302      	movs	r3, #2
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e00a      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e007      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a72:	2308      	movs	r3, #8
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e004      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e001      	b.n	8006a82 <UART_SetConfig+0x346>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8a:	d15a      	bne.n	8006b42 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006a8c:	7ffb      	ldrb	r3, [r7, #31]
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d827      	bhi.n	8006ae2 <UART_SetConfig+0x3a6>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x35c>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006ad3 	.word	0x08006ad3
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	08006ae3 	.word	0x08006ae3
 8006ab8:	08006adb 	.word	0x08006adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fe f80e 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8006ac0:	61b8      	str	r0, [r7, #24]
        break;
 8006ac2:	e013      	b.n	8006aec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac4:	f7fe f81e 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 8006ac8:	61b8      	str	r0, [r7, #24]
        break;
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006acc:	4b4b      	ldr	r3, [pc, #300]	; (8006bfc <UART_SetConfig+0x4c0>)
 8006ace:	61bb      	str	r3, [r7, #24]
        break;
 8006ad0:	e00c      	b.n	8006aec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad2:	f7fd ff15 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 8006ad6:	61b8      	str	r0, [r7, #24]
        break;
 8006ad8:	e008      	b.n	8006aec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ade:	61bb      	str	r3, [r7, #24]
        break;
 8006ae0:	e004      	b.n	8006aec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d074      	beq.n	8006bdc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	005a      	lsls	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	441a      	add	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b0f      	cmp	r3, #15
 8006b0c:	d916      	bls.n	8006b3c <UART_SetConfig+0x400>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b14:	d212      	bcs.n	8006b3c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f023 030f 	bic.w	r3, r3, #15
 8006b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	89fb      	ldrh	r3, [r7, #14]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	89fa      	ldrh	r2, [r7, #14]
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	e04f      	b.n	8006bdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77bb      	strb	r3, [r7, #30]
 8006b40:	e04c      	b.n	8006bdc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d828      	bhi.n	8006b9a <UART_SetConfig+0x45e>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x414>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b85 	.word	0x08006b85
 8006b5c:	08006b9b 	.word	0x08006b9b
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b9b 	.word	0x08006b9b
 8006b68:	08006b9b 	.word	0x08006b9b
 8006b6c:	08006b9b 	.word	0x08006b9b
 8006b70:	08006b93 	.word	0x08006b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fd ffb2 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8006b78:	61b8      	str	r0, [r7, #24]
        break;
 8006b7a:	e013      	b.n	8006ba4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7c:	f7fd ffc2 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 8006b80:	61b8      	str	r0, [r7, #24]
        break;
 8006b82:	e00f      	b.n	8006ba4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <UART_SetConfig+0x4c0>)
 8006b86:	61bb      	str	r3, [r7, #24]
        break;
 8006b88:	e00c      	b.n	8006ba4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8a:	f7fd feb9 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 8006b8e:	61b8      	str	r0, [r7, #24]
        break;
 8006b90:	e008      	b.n	8006ba4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b96:	61bb      	str	r3, [r7, #24]
        break;
 8006b98:	e004      	b.n	8006ba4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d018      	beq.n	8006bdc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085a      	lsrs	r2, r3, #1
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d909      	bls.n	8006bd8 <UART_SetConfig+0x49c>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d205      	bcs.n	8006bd8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e001      	b.n	8006bdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40007c00 	.word	0x40007c00
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	00f42400 	.word	0x00f42400

08006c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d10a      	bne.n	8006d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d54:	f7fc f850 	bl	8002df8 <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d10e      	bne.n	8006d86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f82d 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e023      	b.n	8006dce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d10e      	bne.n	8006db2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f817 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00d      	b.n	8006dce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b09c      	sub	sp, #112	; 0x70
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de6:	e0a5      	b.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	f000 80a1 	beq.w	8006f34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fc f801 	bl	8002df8 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d13e      	bne.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e6      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	663b      	str	r3, [r7, #96]	; 0x60
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e067      	b.n	8006f56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d04f      	beq.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea2:	d147      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ece:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f00:	623a      	str	r2, [r7, #32]
 8006f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	69f9      	ldr	r1, [r7, #28]
 8006f06:	6a3a      	ldr	r2, [r7, #32]
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e5      	bne.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e010      	b.n	8006f56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	bf0c      	ite	eq
 8006f44:	2301      	moveq	r3, #1
 8006f46:	2300      	movne	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	f43f af4a 	beq.w	8006de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3770      	adds	r7, #112	; 0x70
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b097      	sub	sp, #92	; 0x5c
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d10e      	bne.n	8006fb2 <UART_Start_Receive_IT+0x52>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <UART_Start_Receive_IT+0x48>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fa6:	e02d      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	22ff      	movs	r2, #255	; 0xff
 8006fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fb0:	e028      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <UART_Start_Receive_IT+0x76>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <UART_Start_Receive_IT+0x6c>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fca:	e01b      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	227f      	movs	r2, #127	; 0x7f
 8006fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fd4:	e016      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fde:	d10d      	bne.n	8006ffc <UART_Start_Receive_IT+0x9c>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <UART_Start_Receive_IT+0x92>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	227f      	movs	r2, #127	; 0x7f
 8006fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ff0:	e008      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	223f      	movs	r2, #63	; 0x3f
 8006ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ffa:	e003      	b.n	8007004 <UART_Start_Receive_IT+0xa4>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2222      	movs	r2, #34	; 0x22
 8007010:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	657b      	str	r3, [r7, #84]	; 0x54
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007032:	64ba      	str	r2, [r7, #72]	; 0x48
 8007034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d107      	bne.n	8007060 <UART_Start_Receive_IT+0x100>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a24      	ldr	r2, [pc, #144]	; (80070ec <UART_Start_Receive_IT+0x18c>)
 800705c:	665a      	str	r2, [r3, #100]	; 0x64
 800705e:	e002      	b.n	8007066 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <UART_Start_Receive_IT+0x190>)
 8007064:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d019      	beq.n	80070aa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800708a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
 8007096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800709a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e6      	bne.n	8007076 <UART_Start_Receive_IT+0x116>
 80070a8:	e018      	b.n	80070dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	613b      	str	r3, [r7, #16]
   return(result);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f043 0320 	orr.w	r3, r3, #32
 80070be:	653b      	str	r3, [r7, #80]	; 0x50
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	375c      	adds	r7, #92	; 0x5c
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	0800750d 	.word	0x0800750d
 80070f0:	080073b1 	.word	0x080073b1

080070f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b095      	sub	sp, #84	; 0x54
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
 800711c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	61fb      	str	r3, [r7, #28]
   return(result);
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	64bb      	str	r3, [r7, #72]	; 0x48
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800714e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007166:	2b01      	cmp	r3, #1
 8007168:	d118      	bne.n	800719c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	60bb      	str	r3, [r7, #8]
   return(result);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6979      	ldr	r1, [r7, #20]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	613b      	str	r3, [r7, #16]
   return(result);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071ae:	bf00      	nop
 80071b0:	3754      	adds	r7, #84	; 0x54
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fa8f 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b08f      	sub	sp, #60	; 0x3c
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f2:	2b21      	cmp	r3, #33	; 0x21
 80071f4:	d14c      	bne.n	8007290 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d132      	bne.n	8007268 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007222:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e6      	bne.n	8007202 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	60bb      	str	r3, [r7, #8]
   return(result);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007248:	633b      	str	r3, [r7, #48]	; 0x30
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	613b      	str	r3, [r7, #16]
   return(result);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007266:	e013      	b.n	8007290 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007290:	bf00      	nop
 8007292:	373c      	adds	r7, #60	; 0x3c
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b091      	sub	sp, #68	; 0x44
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a8:	2b21      	cmp	r3, #33	; 0x21
 80072aa:	d151      	bne.n	8007350 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d132      	bne.n	800731e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	623b      	str	r3, [r7, #32]
   return(result);
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	633b      	str	r3, [r7, #48]	; 0x30
 80072d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e6      	bne.n	80072b8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69b9      	ldr	r1, [r7, #24]
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	617b      	str	r3, [r7, #20]
   return(result);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800731c:	e018      	b.n	8007350 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007332:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007338:	1c9a      	adds	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007350:	bf00      	nop
 8007352:	3744      	adds	r7, #68	; 0x44
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	60bb      	str	r3, [r7, #8]
   return(result);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e6      	bne.n	8007364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb fc74 	bl	8002c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a8:	bf00      	nop
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b096      	sub	sp, #88	; 0x58
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c6:	2b22      	cmp	r3, #34	; 0x22
 80073c8:	f040 8094 	bne.w	80074f4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073da:	b2d9      	uxtb	r1, r3
 80073dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	400a      	ands	r2, r1
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d177      	bne.n	8007504 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007428:	653b      	str	r3, [r7, #80]	; 0x50
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e6      	bne.n	8007414 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	623b      	str	r3, [r7, #32]
   return(result);
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	f023 0301 	bic.w	r3, r3, #1
 800745c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3308      	adds	r3, #8
 8007464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007466:	633a      	str	r2, [r7, #48]	; 0x30
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e5      	bne.n	8007446 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748a:	2b01      	cmp	r3, #1
 800748c:	d12e      	bne.n	80074ec <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 0310 	bic.w	r3, r3, #16
 80074a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	617b      	str	r3, [r7, #20]
   return(result);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e6      	bne.n	8007494 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d103      	bne.n	80074dc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2210      	movs	r2, #16
 80074da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff f913 	bl	8006710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074ea:	e00b      	b.n	8007504 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fb fb73 	bl	8002bd8 <HAL_UART_RxCpltCallback>
}
 80074f2:	e007      	b.n	8007504 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0208 	orr.w	r2, r2, #8
 8007502:	619a      	str	r2, [r3, #24]
}
 8007504:	bf00      	nop
 8007506:	3758      	adds	r7, #88	; 0x58
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b096      	sub	sp, #88	; 0x58
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800751a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007522:	2b22      	cmp	r3, #34	; 0x22
 8007524:	f040 8094 	bne.w	8007650 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007538:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800753c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007540:	4013      	ands	r3, r2
 8007542:	b29a      	uxth	r2, r3
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d177      	bne.n	8007660 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	643b      	str	r3, [r7, #64]	; 0x40
 8007590:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d12e      	bne.n	8007648 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	647b      	str	r3, [r7, #68]	; 0x44
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6979      	ldr	r1, [r7, #20]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	613b      	str	r3, [r7, #16]
   return(result);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b10      	cmp	r3, #16
 800762e:	d103      	bne.n	8007638 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2210      	movs	r2, #16
 8007636:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f865 	bl	8006710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007646:	e00b      	b.n	8007660 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7fb fac5 	bl	8002bd8 <HAL_UART_RxCpltCallback>
}
 800764e:	e007      	b.n	8007660 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0208 	orr.w	r2, r2, #8
 800765e:	619a      	str	r2, [r3, #24]
}
 8007660:	bf00      	nop
 8007662:	3758      	adds	r7, #88	; 0x58
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <__errno>:
 8007668:	4b01      	ldr	r3, [pc, #4]	; (8007670 <__errno+0x8>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000098 	.word	0x20000098

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	4d0d      	ldr	r5, [pc, #52]	; (80076ac <__libc_init_array+0x38>)
 8007678:	4c0d      	ldr	r4, [pc, #52]	; (80076b0 <__libc_init_array+0x3c>)
 800767a:	1b64      	subs	r4, r4, r5
 800767c:	10a4      	asrs	r4, r4, #2
 800767e:	2600      	movs	r6, #0
 8007680:	42a6      	cmp	r6, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	4d0b      	ldr	r5, [pc, #44]	; (80076b4 <__libc_init_array+0x40>)
 8007686:	4c0c      	ldr	r4, [pc, #48]	; (80076b8 <__libc_init_array+0x44>)
 8007688:	f004 ffcc 	bl	800c624 <_init>
 800768c:	1b64      	subs	r4, r4, r5
 800768e:	10a4      	asrs	r4, r4, #2
 8007690:	2600      	movs	r6, #0
 8007692:	42a6      	cmp	r6, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	f855 3b04 	ldr.w	r3, [r5], #4
 800769c:	4798      	blx	r3
 800769e:	3601      	adds	r6, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a6:	4798      	blx	r3
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	0800d4a4 	.word	0x0800d4a4
 80076b0:	0800d4a4 	.word	0x0800d4a4
 80076b4:	0800d4a4 	.word	0x0800d4a4
 80076b8:	0800d4a8 	.word	0x0800d4a8

080076bc <memset>:
 80076bc:	4402      	add	r2, r0
 80076be:	4603      	mov	r3, r0
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d100      	bne.n	80076c6 <memset+0xa>
 80076c4:	4770      	bx	lr
 80076c6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ca:	e7f9      	b.n	80076c0 <memset+0x4>

080076cc <__cvt>:
 80076cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ce:	ed2d 8b02 	vpush	{d8}
 80076d2:	eeb0 8b40 	vmov.f64	d8, d0
 80076d6:	b085      	sub	sp, #20
 80076d8:	4617      	mov	r7, r2
 80076da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80076dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076de:	ee18 2a90 	vmov	r2, s17
 80076e2:	f025 0520 	bic.w	r5, r5, #32
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	bfb6      	itet	lt
 80076ea:	222d      	movlt	r2, #45	; 0x2d
 80076ec:	2200      	movge	r2, #0
 80076ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80076f2:	2d46      	cmp	r5, #70	; 0x46
 80076f4:	460c      	mov	r4, r1
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	d004      	beq.n	8007704 <__cvt+0x38>
 80076fa:	2d45      	cmp	r5, #69	; 0x45
 80076fc:	d100      	bne.n	8007700 <__cvt+0x34>
 80076fe:	3401      	adds	r4, #1
 8007700:	2102      	movs	r1, #2
 8007702:	e000      	b.n	8007706 <__cvt+0x3a>
 8007704:	2103      	movs	r1, #3
 8007706:	ab03      	add	r3, sp, #12
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	ab02      	add	r3, sp, #8
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4622      	mov	r2, r4
 8007710:	4633      	mov	r3, r6
 8007712:	eeb0 0b48 	vmov.f64	d0, d8
 8007716:	f001 fe0f 	bl	8009338 <_dtoa_r>
 800771a:	2d47      	cmp	r5, #71	; 0x47
 800771c:	d109      	bne.n	8007732 <__cvt+0x66>
 800771e:	07fb      	lsls	r3, r7, #31
 8007720:	d407      	bmi.n	8007732 <__cvt+0x66>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007726:	1a1b      	subs	r3, r3, r0
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	b005      	add	sp, #20
 800772c:	ecbd 8b02 	vpop	{d8}
 8007730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007732:	2d46      	cmp	r5, #70	; 0x46
 8007734:	eb00 0204 	add.w	r2, r0, r4
 8007738:	d10c      	bne.n	8007754 <__cvt+0x88>
 800773a:	7803      	ldrb	r3, [r0, #0]
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d107      	bne.n	8007750 <__cvt+0x84>
 8007740:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	bf1c      	itt	ne
 800774a:	f1c4 0401 	rsbne	r4, r4, #1
 800774e:	6034      	strne	r4, [r6, #0]
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	441a      	add	r2, r3
 8007754:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775c:	bf08      	it	eq
 800775e:	9203      	streq	r2, [sp, #12]
 8007760:	2130      	movs	r1, #48	; 0x30
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	4293      	cmp	r3, r2
 8007766:	d2dc      	bcs.n	8007722 <__cvt+0x56>
 8007768:	1c5c      	adds	r4, r3, #1
 800776a:	9403      	str	r4, [sp, #12]
 800776c:	7019      	strb	r1, [r3, #0]
 800776e:	e7f8      	b.n	8007762 <__cvt+0x96>

08007770 <__exponent>:
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	4603      	mov	r3, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	bfb8      	it	lt
 8007778:	4249      	neglt	r1, r1
 800777a:	f803 2b02 	strb.w	r2, [r3], #2
 800777e:	bfb4      	ite	lt
 8007780:	222d      	movlt	r2, #45	; 0x2d
 8007782:	222b      	movge	r2, #43	; 0x2b
 8007784:	2909      	cmp	r1, #9
 8007786:	7042      	strb	r2, [r0, #1]
 8007788:	dd2a      	ble.n	80077e0 <__exponent+0x70>
 800778a:	f10d 0407 	add.w	r4, sp, #7
 800778e:	46a4      	mov	ip, r4
 8007790:	270a      	movs	r7, #10
 8007792:	46a6      	mov	lr, r4
 8007794:	460a      	mov	r2, r1
 8007796:	fb91 f6f7 	sdiv	r6, r1, r7
 800779a:	fb07 1516 	mls	r5, r7, r6, r1
 800779e:	3530      	adds	r5, #48	; 0x30
 80077a0:	2a63      	cmp	r2, #99	; 0x63
 80077a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077aa:	4631      	mov	r1, r6
 80077ac:	dcf1      	bgt.n	8007792 <__exponent+0x22>
 80077ae:	3130      	adds	r1, #48	; 0x30
 80077b0:	f1ae 0502 	sub.w	r5, lr, #2
 80077b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b8:	1c44      	adds	r4, r0, #1
 80077ba:	4629      	mov	r1, r5
 80077bc:	4561      	cmp	r1, ip
 80077be:	d30a      	bcc.n	80077d6 <__exponent+0x66>
 80077c0:	f10d 0209 	add.w	r2, sp, #9
 80077c4:	eba2 020e 	sub.w	r2, r2, lr
 80077c8:	4565      	cmp	r5, ip
 80077ca:	bf88      	it	hi
 80077cc:	2200      	movhi	r2, #0
 80077ce:	4413      	add	r3, r2
 80077d0:	1a18      	subs	r0, r3, r0
 80077d2:	b003      	add	sp, #12
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077de:	e7ed      	b.n	80077bc <__exponent+0x4c>
 80077e0:	2330      	movs	r3, #48	; 0x30
 80077e2:	3130      	adds	r1, #48	; 0x30
 80077e4:	7083      	strb	r3, [r0, #2]
 80077e6:	70c1      	strb	r1, [r0, #3]
 80077e8:	1d03      	adds	r3, r0, #4
 80077ea:	e7f1      	b.n	80077d0 <__exponent+0x60>
 80077ec:	0000      	movs	r0, r0
	...

080077f0 <_printf_float>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	b08b      	sub	sp, #44	; 0x2c
 80077f6:	460c      	mov	r4, r1
 80077f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80077fc:	4616      	mov	r6, r2
 80077fe:	461f      	mov	r7, r3
 8007800:	4605      	mov	r5, r0
 8007802:	f002 fe8b 	bl	800a51c <_localeconv_r>
 8007806:	f8d0 b000 	ldr.w	fp, [r0]
 800780a:	4658      	mov	r0, fp
 800780c:	f7f8 fd22 	bl	8000254 <strlen>
 8007810:	2300      	movs	r3, #0
 8007812:	9308      	str	r3, [sp, #32]
 8007814:	f8d8 3000 	ldr.w	r3, [r8]
 8007818:	f894 9018 	ldrb.w	r9, [r4, #24]
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	3307      	adds	r3, #7
 8007820:	f023 0307 	bic.w	r3, r3, #7
 8007824:	f103 0108 	add.w	r1, r3, #8
 8007828:	f8c8 1000 	str.w	r1, [r8]
 800782c:	4682      	mov	sl, r0
 800782e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007832:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007836:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007a98 <_printf_float+0x2a8>
 800783a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800783e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007842:	eeb4 6b47 	vcmp.f64	d6, d7
 8007846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784a:	dd24      	ble.n	8007896 <_printf_float+0xa6>
 800784c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	d502      	bpl.n	800785c <_printf_float+0x6c>
 8007856:	232d      	movs	r3, #45	; 0x2d
 8007858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800785c:	4b90      	ldr	r3, [pc, #576]	; (8007aa0 <_printf_float+0x2b0>)
 800785e:	4891      	ldr	r0, [pc, #580]	; (8007aa4 <_printf_float+0x2b4>)
 8007860:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007864:	bf94      	ite	ls
 8007866:	4698      	movls	r8, r3
 8007868:	4680      	movhi	r8, r0
 800786a:	2303      	movs	r3, #3
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	f022 0204 	bic.w	r2, r2, #4
 8007872:	2300      	movs	r3, #0
 8007874:	6022      	str	r2, [r4, #0]
 8007876:	9304      	str	r3, [sp, #16]
 8007878:	9700      	str	r7, [sp, #0]
 800787a:	4633      	mov	r3, r6
 800787c:	aa09      	add	r2, sp, #36	; 0x24
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 f9d3 	bl	8007c2c <_printf_common>
 8007886:	3001      	adds	r0, #1
 8007888:	f040 808a 	bne.w	80079a0 <_printf_float+0x1b0>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b00b      	add	sp, #44	; 0x2c
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	eeb4 0b40 	vcmp.f64	d0, d0
 800789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789e:	d709      	bvc.n	80078b4 <_printf_float+0xc4>
 80078a0:	ee10 3a90 	vmov	r3, s1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfbc      	itt	lt
 80078a8:	232d      	movlt	r3, #45	; 0x2d
 80078aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078ae:	487e      	ldr	r0, [pc, #504]	; (8007aa8 <_printf_float+0x2b8>)
 80078b0:	4b7e      	ldr	r3, [pc, #504]	; (8007aac <_printf_float+0x2bc>)
 80078b2:	e7d5      	b.n	8007860 <_printf_float+0x70>
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80078ba:	9104      	str	r1, [sp, #16]
 80078bc:	1c59      	adds	r1, r3, #1
 80078be:	d13c      	bne.n	800793a <_printf_float+0x14a>
 80078c0:	2306      	movs	r3, #6
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	2300      	movs	r3, #0
 80078c6:	9303      	str	r3, [sp, #12]
 80078c8:	ab08      	add	r3, sp, #32
 80078ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80078ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d2:	ab07      	add	r3, sp, #28
 80078d4:	6861      	ldr	r1, [r4, #4]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	6022      	str	r2, [r4, #0]
 80078da:	f10d 031b 	add.w	r3, sp, #27
 80078de:	4628      	mov	r0, r5
 80078e0:	f7ff fef4 	bl	80076cc <__cvt>
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	9907      	ldr	r1, [sp, #28]
 80078e8:	2b47      	cmp	r3, #71	; 0x47
 80078ea:	4680      	mov	r8, r0
 80078ec:	d108      	bne.n	8007900 <_printf_float+0x110>
 80078ee:	1cc8      	adds	r0, r1, #3
 80078f0:	db02      	blt.n	80078f8 <_printf_float+0x108>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	4299      	cmp	r1, r3
 80078f6:	dd41      	ble.n	800797c <_printf_float+0x18c>
 80078f8:	f1a9 0902 	sub.w	r9, r9, #2
 80078fc:	fa5f f989 	uxtb.w	r9, r9
 8007900:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007904:	d820      	bhi.n	8007948 <_printf_float+0x158>
 8007906:	3901      	subs	r1, #1
 8007908:	464a      	mov	r2, r9
 800790a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800790e:	9107      	str	r1, [sp, #28]
 8007910:	f7ff ff2e 	bl	8007770 <__exponent>
 8007914:	9a08      	ldr	r2, [sp, #32]
 8007916:	9004      	str	r0, [sp, #16]
 8007918:	1813      	adds	r3, r2, r0
 800791a:	2a01      	cmp	r2, #1
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	dc02      	bgt.n	8007926 <_printf_float+0x136>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	07d2      	lsls	r2, r2, #31
 8007924:	d501      	bpl.n	800792a <_printf_float+0x13a>
 8007926:	3301      	adds	r3, #1
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0a2      	beq.n	8007878 <_printf_float+0x88>
 8007932:	232d      	movs	r3, #45	; 0x2d
 8007934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007938:	e79e      	b.n	8007878 <_printf_float+0x88>
 800793a:	9904      	ldr	r1, [sp, #16]
 800793c:	2947      	cmp	r1, #71	; 0x47
 800793e:	d1c1      	bne.n	80078c4 <_printf_float+0xd4>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1bf      	bne.n	80078c4 <_printf_float+0xd4>
 8007944:	2301      	movs	r3, #1
 8007946:	e7bc      	b.n	80078c2 <_printf_float+0xd2>
 8007948:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800794c:	d118      	bne.n	8007980 <_printf_float+0x190>
 800794e:	2900      	cmp	r1, #0
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	dd0b      	ble.n	800796c <_printf_float+0x17c>
 8007954:	6121      	str	r1, [r4, #16]
 8007956:	b913      	cbnz	r3, 800795e <_printf_float+0x16e>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	07d0      	lsls	r0, r2, #31
 800795c:	d502      	bpl.n	8007964 <_printf_float+0x174>
 800795e:	3301      	adds	r3, #1
 8007960:	440b      	add	r3, r1
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	2300      	movs	r3, #0
 8007966:	65a1      	str	r1, [r4, #88]	; 0x58
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	e7de      	b.n	800792a <_printf_float+0x13a>
 800796c:	b913      	cbnz	r3, 8007974 <_printf_float+0x184>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d2      	lsls	r2, r2, #31
 8007972:	d501      	bpl.n	8007978 <_printf_float+0x188>
 8007974:	3302      	adds	r3, #2
 8007976:	e7f4      	b.n	8007962 <_printf_float+0x172>
 8007978:	2301      	movs	r3, #1
 800797a:	e7f2      	b.n	8007962 <_printf_float+0x172>
 800797c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	4299      	cmp	r1, r3
 8007984:	db05      	blt.n	8007992 <_printf_float+0x1a2>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	6121      	str	r1, [r4, #16]
 800798a:	07d8      	lsls	r0, r3, #31
 800798c:	d5ea      	bpl.n	8007964 <_printf_float+0x174>
 800798e:	1c4b      	adds	r3, r1, #1
 8007990:	e7e7      	b.n	8007962 <_printf_float+0x172>
 8007992:	2900      	cmp	r1, #0
 8007994:	bfd4      	ite	le
 8007996:	f1c1 0202 	rsble	r2, r1, #2
 800799a:	2201      	movgt	r2, #1
 800799c:	4413      	add	r3, r2
 800799e:	e7e0      	b.n	8007962 <_printf_float+0x172>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	055a      	lsls	r2, r3, #21
 80079a4:	d407      	bmi.n	80079b6 <_printf_float+0x1c6>
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	4642      	mov	r2, r8
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	d12a      	bne.n	8007a0a <_printf_float+0x21a>
 80079b4:	e76a      	b.n	800788c <_printf_float+0x9c>
 80079b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079ba:	f240 80e2 	bls.w	8007b82 <_printf_float+0x392>
 80079be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80079c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	d133      	bne.n	8007a34 <_printf_float+0x244>
 80079cc:	4a38      	ldr	r2, [pc, #224]	; (8007ab0 <_printf_float+0x2c0>)
 80079ce:	2301      	movs	r3, #1
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	f43f af58 	beq.w	800788c <_printf_float+0x9c>
 80079dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	db02      	blt.n	80079ea <_printf_float+0x1fa>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	07d8      	lsls	r0, r3, #31
 80079e8:	d50f      	bpl.n	8007a0a <_printf_float+0x21a>
 80079ea:	4653      	mov	r3, sl
 80079ec:	465a      	mov	r2, fp
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f af49 	beq.w	800788c <_printf_float+0x9c>
 80079fa:	f04f 0800 	mov.w	r8, #0
 80079fe:	f104 091a 	add.w	r9, r4, #26
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	4543      	cmp	r3, r8
 8007a08:	dc09      	bgt.n	8007a1e <_printf_float+0x22e>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	079b      	lsls	r3, r3, #30
 8007a0e:	f100 8108 	bmi.w	8007c22 <_printf_float+0x432>
 8007a12:	68e0      	ldr	r0, [r4, #12]
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	4298      	cmp	r0, r3
 8007a18:	bfb8      	it	lt
 8007a1a:	4618      	movlt	r0, r3
 8007a1c:	e738      	b.n	8007890 <_printf_float+0xa0>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	464a      	mov	r2, r9
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f af2f 	beq.w	800788c <_printf_float+0x9c>
 8007a2e:	f108 0801 	add.w	r8, r8, #1
 8007a32:	e7e6      	b.n	8007a02 <_printf_float+0x212>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dc3c      	bgt.n	8007ab4 <_printf_float+0x2c4>
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <_printf_float+0x2c0>)
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f af21 	beq.w	800788c <_printf_float+0x9c>
 8007a4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	d102      	bne.n	8007a58 <_printf_float+0x268>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	07d9      	lsls	r1, r3, #31
 8007a56:	d5d8      	bpl.n	8007a0a <_printf_float+0x21a>
 8007a58:	4653      	mov	r3, sl
 8007a5a:	465a      	mov	r2, fp
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af12 	beq.w	800788c <_printf_float+0x9c>
 8007a68:	f04f 0900 	mov.w	r9, #0
 8007a6c:	f104 0a1a 	add.w	sl, r4, #26
 8007a70:	9b07      	ldr	r3, [sp, #28]
 8007a72:	425b      	negs	r3, r3
 8007a74:	454b      	cmp	r3, r9
 8007a76:	dc01      	bgt.n	8007a7c <_printf_float+0x28c>
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	e795      	b.n	80079a8 <_printf_float+0x1b8>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4652      	mov	r2, sl
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af00 	beq.w	800788c <_printf_float+0x9c>
 8007a8c:	f109 0901 	add.w	r9, r9, #1
 8007a90:	e7ee      	b.n	8007a70 <_printf_float+0x280>
 8007a92:	bf00      	nop
 8007a94:	f3af 8000 	nop.w
 8007a98:	ffffffff 	.word	0xffffffff
 8007a9c:	7fefffff 	.word	0x7fefffff
 8007aa0:	0800cfd4 	.word	0x0800cfd4
 8007aa4:	0800cfd8 	.word	0x0800cfd8
 8007aa8:	0800cfe0 	.word	0x0800cfe0
 8007aac:	0800cfdc 	.word	0x0800cfdc
 8007ab0:	0800d3e9 	.word	0x0800d3e9
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bfa8      	it	ge
 8007abc:	461a      	movge	r2, r3
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	dc38      	bgt.n	8007b36 <_printf_float+0x346>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9305      	str	r3, [sp, #20]
 8007ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007acc:	f104 021a 	add.w	r2, r4, #26
 8007ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad2:	9905      	ldr	r1, [sp, #20]
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	eba3 0309 	sub.w	r3, r3, r9
 8007ada:	428b      	cmp	r3, r1
 8007adc:	dc33      	bgt.n	8007b46 <_printf_float+0x356>
 8007ade:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	db3c      	blt.n	8007b60 <_printf_float+0x370>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	07da      	lsls	r2, r3, #31
 8007aea:	d439      	bmi.n	8007b60 <_printf_float+0x370>
 8007aec:	9a08      	ldr	r2, [sp, #32]
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	9907      	ldr	r1, [sp, #28]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	eba2 0901 	sub.w	r9, r2, r1
 8007af8:	4599      	cmp	r9, r3
 8007afa:	bfa8      	it	ge
 8007afc:	4699      	movge	r9, r3
 8007afe:	f1b9 0f00 	cmp.w	r9, #0
 8007b02:	dc35      	bgt.n	8007b70 <_printf_float+0x380>
 8007b04:	f04f 0800 	mov.w	r8, #0
 8007b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b0c:	f104 0a1a 	add.w	sl, r4, #26
 8007b10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	eba3 0309 	sub.w	r3, r3, r9
 8007b1a:	4543      	cmp	r3, r8
 8007b1c:	f77f af75 	ble.w	8007a0a <_printf_float+0x21a>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4652      	mov	r2, sl
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f aeae 	beq.w	800788c <_printf_float+0x9c>
 8007b30:	f108 0801 	add.w	r8, r8, #1
 8007b34:	e7ec      	b.n	8007b10 <_printf_float+0x320>
 8007b36:	4613      	mov	r3, r2
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	d1bf      	bne.n	8007ac4 <_printf_float+0x2d4>
 8007b44:	e6a2      	b.n	800788c <_printf_float+0x9c>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	9204      	str	r2, [sp, #16]
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f ae9b 	beq.w	800788c <_printf_float+0x9c>
 8007b56:	9b05      	ldr	r3, [sp, #20]
 8007b58:	9a04      	ldr	r2, [sp, #16]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	e7b7      	b.n	8007ad0 <_printf_float+0x2e0>
 8007b60:	4653      	mov	r3, sl
 8007b62:	465a      	mov	r2, fp
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d1be      	bne.n	8007aec <_printf_float+0x2fc>
 8007b6e:	e68d      	b.n	800788c <_printf_float+0x9c>
 8007b70:	9a04      	ldr	r2, [sp, #16]
 8007b72:	464b      	mov	r3, r9
 8007b74:	4442      	add	r2, r8
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1c1      	bne.n	8007b04 <_printf_float+0x314>
 8007b80:	e684      	b.n	800788c <_printf_float+0x9c>
 8007b82:	9a08      	ldr	r2, [sp, #32]
 8007b84:	2a01      	cmp	r2, #1
 8007b86:	dc01      	bgt.n	8007b8c <_printf_float+0x39c>
 8007b88:	07db      	lsls	r3, r3, #31
 8007b8a:	d537      	bpl.n	8007bfc <_printf_float+0x40c>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4642      	mov	r2, r8
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f ae78 	beq.w	800788c <_printf_float+0x9c>
 8007b9c:	4653      	mov	r3, sl
 8007b9e:	465a      	mov	r2, fp
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f ae70 	beq.w	800788c <_printf_float+0x9c>
 8007bac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007bb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	d01b      	beq.n	8007bf2 <_printf_float+0x402>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	f108 0201 	add.w	r2, r8, #1
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d10e      	bne.n	8007bea <_printf_float+0x3fa>
 8007bcc:	e65e      	b.n	800788c <_printf_float+0x9c>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	464a      	mov	r2, r9
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	f43f ae57 	beq.w	800788c <_printf_float+0x9c>
 8007bde:	f108 0801 	add.w	r8, r8, #1
 8007be2:	9b08      	ldr	r3, [sp, #32]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4543      	cmp	r3, r8
 8007be8:	dcf1      	bgt.n	8007bce <_printf_float+0x3de>
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bf0:	e6db      	b.n	80079aa <_printf_float+0x1ba>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	f104 091a 	add.w	r9, r4, #26
 8007bfa:	e7f2      	b.n	8007be2 <_printf_float+0x3f2>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4642      	mov	r2, r8
 8007c00:	e7df      	b.n	8007bc2 <_printf_float+0x3d2>
 8007c02:	2301      	movs	r3, #1
 8007c04:	464a      	mov	r2, r9
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae3d 	beq.w	800788c <_printf_float+0x9c>
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	4543      	cmp	r3, r8
 8007c1e:	dcf0      	bgt.n	8007c02 <_printf_float+0x412>
 8007c20:	e6f7      	b.n	8007a12 <_printf_float+0x222>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	f104 0919 	add.w	r9, r4, #25
 8007c2a:	e7f4      	b.n	8007c16 <_printf_float+0x426>

08007c2c <_printf_common>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	4616      	mov	r6, r2
 8007c32:	4699      	mov	r9, r3
 8007c34:	688a      	ldr	r2, [r1, #8]
 8007c36:	690b      	ldr	r3, [r1, #16]
 8007c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bfb8      	it	lt
 8007c40:	4613      	movlt	r3, r2
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b10a      	cbz	r2, 8007c52 <_printf_common+0x26>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	0699      	lsls	r1, r3, #26
 8007c56:	bf42      	ittt	mi
 8007c58:	6833      	ldrmi	r3, [r6, #0]
 8007c5a:	3302      	addmi	r3, #2
 8007c5c:	6033      	strmi	r3, [r6, #0]
 8007c5e:	6825      	ldr	r5, [r4, #0]
 8007c60:	f015 0506 	ands.w	r5, r5, #6
 8007c64:	d106      	bne.n	8007c74 <_printf_common+0x48>
 8007c66:	f104 0a19 	add.w	sl, r4, #25
 8007c6a:	68e3      	ldr	r3, [r4, #12]
 8007c6c:	6832      	ldr	r2, [r6, #0]
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	dc26      	bgt.n	8007cc2 <_printf_common+0x96>
 8007c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c78:	1e13      	subs	r3, r2, #0
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	bf18      	it	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	0692      	lsls	r2, r2, #26
 8007c82:	d42b      	bmi.n	8007cdc <_printf_common+0xb0>
 8007c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	47c0      	blx	r8
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d01e      	beq.n	8007cd0 <_printf_common+0xa4>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	68e5      	ldr	r5, [r4, #12]
 8007c96:	6832      	ldr	r2, [r6, #0]
 8007c98:	f003 0306 	and.w	r3, r3, #6
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	bf08      	it	eq
 8007ca0:	1aad      	subeq	r5, r5, r2
 8007ca2:	68a3      	ldr	r3, [r4, #8]
 8007ca4:	6922      	ldr	r2, [r4, #16]
 8007ca6:	bf0c      	ite	eq
 8007ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cac:	2500      	movne	r5, #0
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	bfc4      	itt	gt
 8007cb2:	1a9b      	subgt	r3, r3, r2
 8007cb4:	18ed      	addgt	r5, r5, r3
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	341a      	adds	r4, #26
 8007cba:	42b5      	cmp	r5, r6
 8007cbc:	d11a      	bne.n	8007cf4 <_printf_common+0xc8>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e008      	b.n	8007cd4 <_printf_common+0xa8>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	4638      	mov	r0, r7
 8007cca:	47c0      	blx	r8
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d103      	bne.n	8007cd8 <_printf_common+0xac>
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	3501      	adds	r5, #1
 8007cda:	e7c6      	b.n	8007c6a <_printf_common+0x3e>
 8007cdc:	18e1      	adds	r1, r4, r3
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	2030      	movs	r0, #48	; 0x30
 8007ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ce6:	4422      	add	r2, r4
 8007ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	e7c7      	b.n	8007c84 <_printf_common+0x58>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c0      	blx	r8
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d0e6      	beq.n	8007cd0 <_printf_common+0xa4>
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7d9      	b.n	8007cba <_printf_common+0x8e>
	...

08007d08 <_printf_i>:
 8007d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4691      	mov	r9, r2
 8007d10:	7e27      	ldrb	r7, [r4, #24]
 8007d12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d14:	2f78      	cmp	r7, #120	; 0x78
 8007d16:	4680      	mov	r8, r0
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d1e:	d807      	bhi.n	8007d30 <_printf_i+0x28>
 8007d20:	2f62      	cmp	r7, #98	; 0x62
 8007d22:	d80a      	bhi.n	8007d3a <_printf_i+0x32>
 8007d24:	2f00      	cmp	r7, #0
 8007d26:	f000 80d8 	beq.w	8007eda <_printf_i+0x1d2>
 8007d2a:	2f58      	cmp	r7, #88	; 0x58
 8007d2c:	f000 80a3 	beq.w	8007e76 <_printf_i+0x16e>
 8007d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d38:	e03a      	b.n	8007db0 <_printf_i+0xa8>
 8007d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d3e:	2b15      	cmp	r3, #21
 8007d40:	d8f6      	bhi.n	8007d30 <_printf_i+0x28>
 8007d42:	a001      	add	r0, pc, #4	; (adr r0, 8007d48 <_printf_i+0x40>)
 8007d44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007db5 	.word	0x08007db5
 8007d50:	08007d31 	.word	0x08007d31
 8007d54:	08007d31 	.word	0x08007d31
 8007d58:	08007d31 	.word	0x08007d31
 8007d5c:	08007d31 	.word	0x08007d31
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007d31 	.word	0x08007d31
 8007d68:	08007d31 	.word	0x08007d31
 8007d6c:	08007d31 	.word	0x08007d31
 8007d70:	08007d31 	.word	0x08007d31
 8007d74:	08007ec1 	.word	0x08007ec1
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007ea3 	.word	0x08007ea3
 8007d80:	08007d31 	.word	0x08007d31
 8007d84:	08007d31 	.word	0x08007d31
 8007d88:	08007ee3 	.word	0x08007ee3
 8007d8c:	08007d31 	.word	0x08007d31
 8007d90:	08007de5 	.word	0x08007de5
 8007d94:	08007d31 	.word	0x08007d31
 8007d98:	08007d31 	.word	0x08007d31
 8007d9c:	08007eab 	.word	0x08007eab
 8007da0:	680b      	ldr	r3, [r1, #0]
 8007da2:	1d1a      	adds	r2, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	600a      	str	r2, [r1, #0]
 8007da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0a3      	b.n	8007efc <_printf_i+0x1f4>
 8007db4:	6825      	ldr	r5, [r4, #0]
 8007db6:	6808      	ldr	r0, [r1, #0]
 8007db8:	062e      	lsls	r6, r5, #24
 8007dba:	f100 0304 	add.w	r3, r0, #4
 8007dbe:	d50a      	bpl.n	8007dd6 <_printf_i+0xce>
 8007dc0:	6805      	ldr	r5, [r0, #0]
 8007dc2:	600b      	str	r3, [r1, #0]
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	da03      	bge.n	8007dd0 <_printf_i+0xc8>
 8007dc8:	232d      	movs	r3, #45	; 0x2d
 8007dca:	426d      	negs	r5, r5
 8007dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd0:	485e      	ldr	r0, [pc, #376]	; (8007f4c <_printf_i+0x244>)
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	e019      	b.n	8007e0a <_printf_i+0x102>
 8007dd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dda:	6805      	ldr	r5, [r0, #0]
 8007ddc:	600b      	str	r3, [r1, #0]
 8007dde:	bf18      	it	ne
 8007de0:	b22d      	sxthne	r5, r5
 8007de2:	e7ef      	b.n	8007dc4 <_printf_i+0xbc>
 8007de4:	680b      	ldr	r3, [r1, #0]
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	1d18      	adds	r0, r3, #4
 8007dea:	6008      	str	r0, [r1, #0]
 8007dec:	0628      	lsls	r0, r5, #24
 8007dee:	d501      	bpl.n	8007df4 <_printf_i+0xec>
 8007df0:	681d      	ldr	r5, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <_printf_i+0xf2>
 8007df4:	0669      	lsls	r1, r5, #25
 8007df6:	d5fb      	bpl.n	8007df0 <_printf_i+0xe8>
 8007df8:	881d      	ldrh	r5, [r3, #0]
 8007dfa:	4854      	ldr	r0, [pc, #336]	; (8007f4c <_printf_i+0x244>)
 8007dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dfe:	bf0c      	ite	eq
 8007e00:	2308      	moveq	r3, #8
 8007e02:	230a      	movne	r3, #10
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	60a6      	str	r6, [r4, #8]
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	bfa2      	ittt	ge
 8007e12:	6821      	ldrge	r1, [r4, #0]
 8007e14:	f021 0104 	bicge.w	r1, r1, #4
 8007e18:	6021      	strge	r1, [r4, #0]
 8007e1a:	b90d      	cbnz	r5, 8007e20 <_printf_i+0x118>
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d04d      	beq.n	8007ebc <_printf_i+0x1b4>
 8007e20:	4616      	mov	r6, r2
 8007e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e26:	fb03 5711 	mls	r7, r3, r1, r5
 8007e2a:	5dc7      	ldrb	r7, [r0, r7]
 8007e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e30:	462f      	mov	r7, r5
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	460d      	mov	r5, r1
 8007e36:	d9f4      	bls.n	8007e22 <_printf_i+0x11a>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <_printf_i+0x14c>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07df      	lsls	r7, r3, #31
 8007e40:	d508      	bpl.n	8007e54 <_printf_i+0x14c>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	bfde      	ittt	le
 8007e4a:	2330      	movle	r3, #48	; 0x30
 8007e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e54:	1b92      	subs	r2, r2, r6
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fee2 	bl	8007c2c <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14c      	bne.n	8007f06 <_printf_i+0x1fe>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b004      	add	sp, #16
 8007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e76:	4835      	ldr	r0, [pc, #212]	; (8007f4c <_printf_i+0x244>)
 8007e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	061f      	lsls	r7, r3, #24
 8007e82:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e86:	600e      	str	r6, [r1, #0]
 8007e88:	d514      	bpl.n	8007eb4 <_printf_i+0x1ac>
 8007e8a:	07d9      	lsls	r1, r3, #31
 8007e8c:	bf44      	itt	mi
 8007e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e92:	6023      	strmi	r3, [r4, #0]
 8007e94:	b91d      	cbnz	r5, 8007e9e <_printf_i+0x196>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f023 0320 	bic.w	r3, r3, #32
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	e7b0      	b.n	8007e04 <_printf_i+0xfc>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f043 0320 	orr.w	r3, r3, #32
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	2378      	movs	r3, #120	; 0x78
 8007eac:	4828      	ldr	r0, [pc, #160]	; (8007f50 <_printf_i+0x248>)
 8007eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eb2:	e7e3      	b.n	8007e7c <_printf_i+0x174>
 8007eb4:	065e      	lsls	r6, r3, #25
 8007eb6:	bf48      	it	mi
 8007eb8:	b2ad      	uxthmi	r5, r5
 8007eba:	e7e6      	b.n	8007e8a <_printf_i+0x182>
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	e7bb      	b.n	8007e38 <_printf_i+0x130>
 8007ec0:	680b      	ldr	r3, [r1, #0]
 8007ec2:	6826      	ldr	r6, [r4, #0]
 8007ec4:	6960      	ldr	r0, [r4, #20]
 8007ec6:	1d1d      	adds	r5, r3, #4
 8007ec8:	600d      	str	r5, [r1, #0]
 8007eca:	0635      	lsls	r5, r6, #24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	d501      	bpl.n	8007ed4 <_printf_i+0x1cc>
 8007ed0:	6018      	str	r0, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <_printf_i+0x1d2>
 8007ed4:	0671      	lsls	r1, r6, #25
 8007ed6:	d5fb      	bpl.n	8007ed0 <_printf_i+0x1c8>
 8007ed8:	8018      	strh	r0, [r3, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	4616      	mov	r6, r2
 8007ee0:	e7ba      	b.n	8007e58 <_printf_i+0x150>
 8007ee2:	680b      	ldr	r3, [r1, #0]
 8007ee4:	1d1a      	adds	r2, r3, #4
 8007ee6:	600a      	str	r2, [r1, #0]
 8007ee8:	681e      	ldr	r6, [r3, #0]
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	2100      	movs	r1, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7f8 f9be 	bl	8000270 <memchr>
 8007ef4:	b108      	cbz	r0, 8007efa <_printf_i+0x1f2>
 8007ef6:	1b80      	subs	r0, r0, r6
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	2300      	movs	r3, #0
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f04:	e7a8      	b.n	8007e58 <_printf_i+0x150>
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	4632      	mov	r2, r6
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	47d0      	blx	sl
 8007f10:	3001      	adds	r0, #1
 8007f12:	d0ab      	beq.n	8007e6c <_printf_i+0x164>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	079b      	lsls	r3, r3, #30
 8007f18:	d413      	bmi.n	8007f42 <_printf_i+0x23a>
 8007f1a:	68e0      	ldr	r0, [r4, #12]
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	4298      	cmp	r0, r3
 8007f20:	bfb8      	it	lt
 8007f22:	4618      	movlt	r0, r3
 8007f24:	e7a4      	b.n	8007e70 <_printf_i+0x168>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4632      	mov	r2, r6
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	47d0      	blx	sl
 8007f30:	3001      	adds	r0, #1
 8007f32:	d09b      	beq.n	8007e6c <_printf_i+0x164>
 8007f34:	3501      	adds	r5, #1
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	9903      	ldr	r1, [sp, #12]
 8007f3a:	1a5b      	subs	r3, r3, r1
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dcf2      	bgt.n	8007f26 <_printf_i+0x21e>
 8007f40:	e7eb      	b.n	8007f1a <_printf_i+0x212>
 8007f42:	2500      	movs	r5, #0
 8007f44:	f104 0619 	add.w	r6, r4, #25
 8007f48:	e7f5      	b.n	8007f36 <_printf_i+0x22e>
 8007f4a:	bf00      	nop
 8007f4c:	0800cfe4 	.word	0x0800cfe4
 8007f50:	0800cff5 	.word	0x0800cff5

08007f54 <_scanf_float>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	4617      	mov	r7, r2
 8007f5c:	9303      	str	r3, [sp, #12]
 8007f5e:	688b      	ldr	r3, [r1, #8]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f66:	bf83      	ittte	hi
 8007f68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f6c:	195b      	addhi	r3, r3, r5
 8007f6e:	9302      	strhi	r3, [sp, #8]
 8007f70:	2300      	movls	r3, #0
 8007f72:	bf86      	itte	hi
 8007f74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f78:	608b      	strhi	r3, [r1, #8]
 8007f7a:	9302      	strls	r3, [sp, #8]
 8007f7c:	680b      	ldr	r3, [r1, #0]
 8007f7e:	468b      	mov	fp, r1
 8007f80:	2500      	movs	r5, #0
 8007f82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f86:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f8e:	4680      	mov	r8, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	465e      	mov	r6, fp
 8007f94:	46aa      	mov	sl, r5
 8007f96:	46a9      	mov	r9, r5
 8007f98:	9501      	str	r5, [sp, #4]
 8007f9a:	68a2      	ldr	r2, [r4, #8]
 8007f9c:	b152      	cbz	r2, 8007fb4 <_scanf_float+0x60>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b4e      	cmp	r3, #78	; 0x4e
 8007fa4:	d864      	bhi.n	8008070 <_scanf_float+0x11c>
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d83c      	bhi.n	8008024 <_scanf_float+0xd0>
 8007faa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fae:	b2c8      	uxtb	r0, r1
 8007fb0:	280e      	cmp	r0, #14
 8007fb2:	d93a      	bls.n	800802a <_scanf_float+0xd6>
 8007fb4:	f1b9 0f00 	cmp.w	r9, #0
 8007fb8:	d003      	beq.n	8007fc2 <_scanf_float+0x6e>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fc6:	f1ba 0f01 	cmp.w	sl, #1
 8007fca:	f200 8113 	bhi.w	80081f4 <_scanf_float+0x2a0>
 8007fce:	455e      	cmp	r6, fp
 8007fd0:	f200 8105 	bhi.w	80081de <_scanf_float+0x28a>
 8007fd4:	2501      	movs	r5, #1
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	b007      	add	sp, #28
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007fe2:	2a0d      	cmp	r2, #13
 8007fe4:	d8e6      	bhi.n	8007fb4 <_scanf_float+0x60>
 8007fe6:	a101      	add	r1, pc, #4	; (adr r1, 8007fec <_scanf_float+0x98>)
 8007fe8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fec:	0800812b 	.word	0x0800812b
 8007ff0:	08007fb5 	.word	0x08007fb5
 8007ff4:	08007fb5 	.word	0x08007fb5
 8007ff8:	08007fb5 	.word	0x08007fb5
 8007ffc:	0800818b 	.word	0x0800818b
 8008000:	08008163 	.word	0x08008163
 8008004:	08007fb5 	.word	0x08007fb5
 8008008:	08007fb5 	.word	0x08007fb5
 800800c:	08008139 	.word	0x08008139
 8008010:	08007fb5 	.word	0x08007fb5
 8008014:	08007fb5 	.word	0x08007fb5
 8008018:	08007fb5 	.word	0x08007fb5
 800801c:	08007fb5 	.word	0x08007fb5
 8008020:	080080f1 	.word	0x080080f1
 8008024:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008028:	e7db      	b.n	8007fe2 <_scanf_float+0x8e>
 800802a:	290e      	cmp	r1, #14
 800802c:	d8c2      	bhi.n	8007fb4 <_scanf_float+0x60>
 800802e:	a001      	add	r0, pc, #4	; (adr r0, 8008034 <_scanf_float+0xe0>)
 8008030:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008034:	080080e3 	.word	0x080080e3
 8008038:	08007fb5 	.word	0x08007fb5
 800803c:	080080e3 	.word	0x080080e3
 8008040:	08008177 	.word	0x08008177
 8008044:	08007fb5 	.word	0x08007fb5
 8008048:	08008091 	.word	0x08008091
 800804c:	080080cd 	.word	0x080080cd
 8008050:	080080cd 	.word	0x080080cd
 8008054:	080080cd 	.word	0x080080cd
 8008058:	080080cd 	.word	0x080080cd
 800805c:	080080cd 	.word	0x080080cd
 8008060:	080080cd 	.word	0x080080cd
 8008064:	080080cd 	.word	0x080080cd
 8008068:	080080cd 	.word	0x080080cd
 800806c:	080080cd 	.word	0x080080cd
 8008070:	2b6e      	cmp	r3, #110	; 0x6e
 8008072:	d809      	bhi.n	8008088 <_scanf_float+0x134>
 8008074:	2b60      	cmp	r3, #96	; 0x60
 8008076:	d8b2      	bhi.n	8007fde <_scanf_float+0x8a>
 8008078:	2b54      	cmp	r3, #84	; 0x54
 800807a:	d077      	beq.n	800816c <_scanf_float+0x218>
 800807c:	2b59      	cmp	r3, #89	; 0x59
 800807e:	d199      	bne.n	8007fb4 <_scanf_float+0x60>
 8008080:	2d07      	cmp	r5, #7
 8008082:	d197      	bne.n	8007fb4 <_scanf_float+0x60>
 8008084:	2508      	movs	r5, #8
 8008086:	e029      	b.n	80080dc <_scanf_float+0x188>
 8008088:	2b74      	cmp	r3, #116	; 0x74
 800808a:	d06f      	beq.n	800816c <_scanf_float+0x218>
 800808c:	2b79      	cmp	r3, #121	; 0x79
 800808e:	e7f6      	b.n	800807e <_scanf_float+0x12a>
 8008090:	6821      	ldr	r1, [r4, #0]
 8008092:	05c8      	lsls	r0, r1, #23
 8008094:	d51a      	bpl.n	80080cc <_scanf_float+0x178>
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800809c:	6021      	str	r1, [r4, #0]
 800809e:	f109 0901 	add.w	r9, r9, #1
 80080a2:	b11b      	cbz	r3, 80080ac <_scanf_float+0x158>
 80080a4:	3b01      	subs	r3, #1
 80080a6:	3201      	adds	r2, #1
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	60a2      	str	r2, [r4, #8]
 80080ac:	68a3      	ldr	r3, [r4, #8]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	60a3      	str	r3, [r4, #8]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	3301      	adds	r3, #1
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	f340 8084 	ble.w	80081cc <_scanf_float+0x278>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	e766      	b.n	8007f9a <_scanf_float+0x46>
 80080cc:	eb1a 0f05 	cmn.w	sl, r5
 80080d0:	f47f af70 	bne.w	8007fb4 <_scanf_float+0x60>
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80080da:	6022      	str	r2, [r4, #0]
 80080dc:	f806 3b01 	strb.w	r3, [r6], #1
 80080e0:	e7e4      	b.n	80080ac <_scanf_float+0x158>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	0610      	lsls	r0, r2, #24
 80080e6:	f57f af65 	bpl.w	8007fb4 <_scanf_float+0x60>
 80080ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ee:	e7f4      	b.n	80080da <_scanf_float+0x186>
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	d10e      	bne.n	8008114 <_scanf_float+0x1c0>
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d10e      	bne.n	800811a <_scanf_float+0x1c6>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008102:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008106:	d108      	bne.n	800811a <_scanf_float+0x1c6>
 8008108:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800810c:	6022      	str	r2, [r4, #0]
 800810e:	f04f 0a01 	mov.w	sl, #1
 8008112:	e7e3      	b.n	80080dc <_scanf_float+0x188>
 8008114:	f1ba 0f02 	cmp.w	sl, #2
 8008118:	d055      	beq.n	80081c6 <_scanf_float+0x272>
 800811a:	2d01      	cmp	r5, #1
 800811c:	d002      	beq.n	8008124 <_scanf_float+0x1d0>
 800811e:	2d04      	cmp	r5, #4
 8008120:	f47f af48 	bne.w	8007fb4 <_scanf_float+0x60>
 8008124:	3501      	adds	r5, #1
 8008126:	b2ed      	uxtb	r5, r5
 8008128:	e7d8      	b.n	80080dc <_scanf_float+0x188>
 800812a:	f1ba 0f01 	cmp.w	sl, #1
 800812e:	f47f af41 	bne.w	8007fb4 <_scanf_float+0x60>
 8008132:	f04f 0a02 	mov.w	sl, #2
 8008136:	e7d1      	b.n	80080dc <_scanf_float+0x188>
 8008138:	b97d      	cbnz	r5, 800815a <_scanf_float+0x206>
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	f47f af3c 	bne.w	8007fba <_scanf_float+0x66>
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008148:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800814c:	f47f af39 	bne.w	8007fc2 <_scanf_float+0x6e>
 8008150:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	2501      	movs	r5, #1
 8008158:	e7c0      	b.n	80080dc <_scanf_float+0x188>
 800815a:	2d03      	cmp	r5, #3
 800815c:	d0e2      	beq.n	8008124 <_scanf_float+0x1d0>
 800815e:	2d05      	cmp	r5, #5
 8008160:	e7de      	b.n	8008120 <_scanf_float+0x1cc>
 8008162:	2d02      	cmp	r5, #2
 8008164:	f47f af26 	bne.w	8007fb4 <_scanf_float+0x60>
 8008168:	2503      	movs	r5, #3
 800816a:	e7b7      	b.n	80080dc <_scanf_float+0x188>
 800816c:	2d06      	cmp	r5, #6
 800816e:	f47f af21 	bne.w	8007fb4 <_scanf_float+0x60>
 8008172:	2507      	movs	r5, #7
 8008174:	e7b2      	b.n	80080dc <_scanf_float+0x188>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	0591      	lsls	r1, r2, #22
 800817a:	f57f af1b 	bpl.w	8007fb4 <_scanf_float+0x60>
 800817e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	f8cd 9004 	str.w	r9, [sp, #4]
 8008188:	e7a8      	b.n	80080dc <_scanf_float+0x188>
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008190:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008194:	d006      	beq.n	80081a4 <_scanf_float+0x250>
 8008196:	0550      	lsls	r0, r2, #21
 8008198:	f57f af0c 	bpl.w	8007fb4 <_scanf_float+0x60>
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	f43f af0f 	beq.w	8007fc2 <_scanf_float+0x6e>
 80081a4:	0591      	lsls	r1, r2, #22
 80081a6:	bf58      	it	pl
 80081a8:	9901      	ldrpl	r1, [sp, #4]
 80081aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081ae:	bf58      	it	pl
 80081b0:	eba9 0101 	subpl.w	r1, r9, r1
 80081b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081b8:	bf58      	it	pl
 80081ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	f04f 0900 	mov.w	r9, #0
 80081c4:	e78a      	b.n	80080dc <_scanf_float+0x188>
 80081c6:	f04f 0a03 	mov.w	sl, #3
 80081ca:	e787      	b.n	80080dc <_scanf_float+0x188>
 80081cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081d0:	4639      	mov	r1, r7
 80081d2:	4640      	mov	r0, r8
 80081d4:	4798      	blx	r3
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f aedf 	beq.w	8007f9a <_scanf_float+0x46>
 80081dc:	e6ea      	b.n	8007fb4 <_scanf_float+0x60>
 80081de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081e6:	463a      	mov	r2, r7
 80081e8:	4640      	mov	r0, r8
 80081ea:	4798      	blx	r3
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	e6ec      	b.n	8007fce <_scanf_float+0x7a>
 80081f4:	1e6b      	subs	r3, r5, #1
 80081f6:	2b06      	cmp	r3, #6
 80081f8:	d825      	bhi.n	8008246 <_scanf_float+0x2f2>
 80081fa:	2d02      	cmp	r5, #2
 80081fc:	d836      	bhi.n	800826c <_scanf_float+0x318>
 80081fe:	455e      	cmp	r6, fp
 8008200:	f67f aee8 	bls.w	8007fd4 <_scanf_float+0x80>
 8008204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008208:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800820c:	463a      	mov	r2, r7
 800820e:	4640      	mov	r0, r8
 8008210:	4798      	blx	r3
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	3b01      	subs	r3, #1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	e7f1      	b.n	80081fe <_scanf_float+0x2aa>
 800821a:	9802      	ldr	r0, [sp, #8]
 800821c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008220:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008224:	9002      	str	r0, [sp, #8]
 8008226:	463a      	mov	r2, r7
 8008228:	4640      	mov	r0, r8
 800822a:	4798      	blx	r3
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	3b01      	subs	r3, #1
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008236:	fa5f fa8a 	uxtb.w	sl, sl
 800823a:	f1ba 0f02 	cmp.w	sl, #2
 800823e:	d1ec      	bne.n	800821a <_scanf_float+0x2c6>
 8008240:	3d03      	subs	r5, #3
 8008242:	b2ed      	uxtb	r5, r5
 8008244:	1b76      	subs	r6, r6, r5
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	05da      	lsls	r2, r3, #23
 800824a:	d52f      	bpl.n	80082ac <_scanf_float+0x358>
 800824c:	055b      	lsls	r3, r3, #21
 800824e:	d510      	bpl.n	8008272 <_scanf_float+0x31e>
 8008250:	455e      	cmp	r6, fp
 8008252:	f67f aebf 	bls.w	8007fd4 <_scanf_float+0x80>
 8008256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800825a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800825e:	463a      	mov	r2, r7
 8008260:	4640      	mov	r0, r8
 8008262:	4798      	blx	r3
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	e7f1      	b.n	8008250 <_scanf_float+0x2fc>
 800826c:	46aa      	mov	sl, r5
 800826e:	9602      	str	r6, [sp, #8]
 8008270:	e7df      	b.n	8008232 <_scanf_float+0x2de>
 8008272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	2965      	cmp	r1, #101	; 0x65
 800827a:	f103 33ff 	add.w	r3, r3, #4294967295
 800827e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	d00c      	beq.n	80082a0 <_scanf_float+0x34c>
 8008286:	2945      	cmp	r1, #69	; 0x45
 8008288:	d00a      	beq.n	80082a0 <_scanf_float+0x34c>
 800828a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800828e:	463a      	mov	r2, r7
 8008290:	4640      	mov	r0, r8
 8008292:	4798      	blx	r3
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800829a:	3b01      	subs	r3, #1
 800829c:	1eb5      	subs	r5, r6, #2
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082a4:	463a      	mov	r2, r7
 80082a6:	4640      	mov	r0, r8
 80082a8:	4798      	blx	r3
 80082aa:	462e      	mov	r6, r5
 80082ac:	6825      	ldr	r5, [r4, #0]
 80082ae:	f015 0510 	ands.w	r5, r5, #16
 80082b2:	d14d      	bne.n	8008350 <_scanf_float+0x3fc>
 80082b4:	7035      	strb	r5, [r6, #0]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c0:	d11a      	bne.n	80082f8 <_scanf_float+0x3a4>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	454b      	cmp	r3, r9
 80082c6:	eba3 0209 	sub.w	r2, r3, r9
 80082ca:	d122      	bne.n	8008312 <_scanf_float+0x3be>
 80082cc:	2200      	movs	r2, #0
 80082ce:	4659      	mov	r1, fp
 80082d0:	4640      	mov	r0, r8
 80082d2:	f000 fef7 	bl	80090c4 <_strtod_r>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	6821      	ldr	r1, [r4, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f011 0f02 	tst.w	r1, #2
 80082e0:	f103 0204 	add.w	r2, r3, #4
 80082e4:	d020      	beq.n	8008328 <_scanf_float+0x3d4>
 80082e6:	9903      	ldr	r1, [sp, #12]
 80082e8:	600a      	str	r2, [r1, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	ed83 0b00 	vstr	d0, [r3]
 80082f0:	68e3      	ldr	r3, [r4, #12]
 80082f2:	3301      	adds	r3, #1
 80082f4:	60e3      	str	r3, [r4, #12]
 80082f6:	e66e      	b.n	8007fd6 <_scanf_float+0x82>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0e6      	beq.n	80082cc <_scanf_float+0x378>
 80082fe:	9905      	ldr	r1, [sp, #20]
 8008300:	230a      	movs	r3, #10
 8008302:	462a      	mov	r2, r5
 8008304:	3101      	adds	r1, #1
 8008306:	4640      	mov	r0, r8
 8008308:	f000 ff66 	bl	80091d8 <_strtol_r>
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	9e05      	ldr	r6, [sp, #20]
 8008310:	1ac2      	subs	r2, r0, r3
 8008312:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008316:	429e      	cmp	r6, r3
 8008318:	bf28      	it	cs
 800831a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800831e:	490d      	ldr	r1, [pc, #52]	; (8008354 <_scanf_float+0x400>)
 8008320:	4630      	mov	r0, r6
 8008322:	f000 f821 	bl	8008368 <siprintf>
 8008326:	e7d1      	b.n	80082cc <_scanf_float+0x378>
 8008328:	f011 0f04 	tst.w	r1, #4
 800832c:	9903      	ldr	r1, [sp, #12]
 800832e:	600a      	str	r2, [r1, #0]
 8008330:	d1db      	bne.n	80082ea <_scanf_float+0x396>
 8008332:	eeb4 0b40 	vcmp.f64	d0, d0
 8008336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833a:	681e      	ldr	r6, [r3, #0]
 800833c:	d705      	bvc.n	800834a <_scanf_float+0x3f6>
 800833e:	4806      	ldr	r0, [pc, #24]	; (8008358 <_scanf_float+0x404>)
 8008340:	f000 f80c 	bl	800835c <nanf>
 8008344:	ed86 0a00 	vstr	s0, [r6]
 8008348:	e7d2      	b.n	80082f0 <_scanf_float+0x39c>
 800834a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800834e:	e7f9      	b.n	8008344 <_scanf_float+0x3f0>
 8008350:	2500      	movs	r5, #0
 8008352:	e640      	b.n	8007fd6 <_scanf_float+0x82>
 8008354:	0800d006 	.word	0x0800d006
 8008358:	0800d43b 	.word	0x0800d43b

0800835c <nanf>:
 800835c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008364 <nanf+0x8>
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	7fc00000 	.word	0x7fc00000

08008368 <siprintf>:
 8008368:	b40e      	push	{r1, r2, r3}
 800836a:	b500      	push	{lr}
 800836c:	b09c      	sub	sp, #112	; 0x70
 800836e:	ab1d      	add	r3, sp, #116	; 0x74
 8008370:	9002      	str	r0, [sp, #8]
 8008372:	9006      	str	r0, [sp, #24]
 8008374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008378:	4809      	ldr	r0, [pc, #36]	; (80083a0 <siprintf+0x38>)
 800837a:	9107      	str	r1, [sp, #28]
 800837c:	9104      	str	r1, [sp, #16]
 800837e:	4909      	ldr	r1, [pc, #36]	; (80083a4 <siprintf+0x3c>)
 8008380:	f853 2b04 	ldr.w	r2, [r3], #4
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	a902      	add	r1, sp, #8
 800838c:	f002 fed6 	bl	800b13c <_svfiprintf_r>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	b01c      	add	sp, #112	; 0x70
 8008398:	f85d eb04 	ldr.w	lr, [sp], #4
 800839c:	b003      	add	sp, #12
 800839e:	4770      	bx	lr
 80083a0:	20000098 	.word	0x20000098
 80083a4:	ffff0208 	.word	0xffff0208

080083a8 <siscanf>:
 80083a8:	b40e      	push	{r1, r2, r3}
 80083aa:	b510      	push	{r4, lr}
 80083ac:	b09f      	sub	sp, #124	; 0x7c
 80083ae:	ac21      	add	r4, sp, #132	; 0x84
 80083b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80083b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80083b8:	9201      	str	r2, [sp, #4]
 80083ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80083be:	9004      	str	r0, [sp, #16]
 80083c0:	9008      	str	r0, [sp, #32]
 80083c2:	f7f7 ff47 	bl	8000254 <strlen>
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <siscanf+0x50>)
 80083c8:	9005      	str	r0, [sp, #20]
 80083ca:	9009      	str	r0, [sp, #36]	; 0x24
 80083cc:	930d      	str	r3, [sp, #52]	; 0x34
 80083ce:	480b      	ldr	r0, [pc, #44]	; (80083fc <siscanf+0x54>)
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	6800      	ldr	r0, [r0, #0]
 80083d4:	9403      	str	r4, [sp, #12]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9311      	str	r3, [sp, #68]	; 0x44
 80083da:	9316      	str	r3, [sp, #88]	; 0x58
 80083dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4623      	mov	r3, r4
 80083e8:	f003 f802 	bl	800b3f0 <__ssvfiscanf_r>
 80083ec:	b01f      	add	sp, #124	; 0x7c
 80083ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f2:	b003      	add	sp, #12
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	08008423 	.word	0x08008423
 80083fc:	20000098 	.word	0x20000098

08008400 <__sread>:
 8008400:	b510      	push	{r4, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	f003 fab6 	bl	800b978 <_read_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	bfab      	itete	ge
 8008410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008412:	89a3      	ldrhlt	r3, [r4, #12]
 8008414:	181b      	addge	r3, r3, r0
 8008416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800841a:	bfac      	ite	ge
 800841c:	6563      	strge	r3, [r4, #84]	; 0x54
 800841e:	81a3      	strhlt	r3, [r4, #12]
 8008420:	bd10      	pop	{r4, pc}

08008422 <__seofread>:
 8008422:	2000      	movs	r0, #0
 8008424:	4770      	bx	lr

08008426 <__swrite>:
 8008426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842a:	461f      	mov	r7, r3
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	05db      	lsls	r3, r3, #23
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	4616      	mov	r6, r2
 8008436:	d505      	bpl.n	8008444 <__swrite+0x1e>
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	2302      	movs	r3, #2
 800843e:	2200      	movs	r2, #0
 8008440:	f002 f870 	bl	800a524 <_lseek_r>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	4628      	mov	r0, r5
 8008456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	f000 bebf 	b.w	80091dc <_write_r>

0800845e <__sseek>:
 800845e:	b510      	push	{r4, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008466:	f002 f85d 	bl	800a524 <_lseek_r>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	bf15      	itete	ne
 8008470:	6560      	strne	r0, [r4, #84]	; 0x54
 8008472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800847a:	81a3      	strheq	r3, [r4, #12]
 800847c:	bf18      	it	ne
 800847e:	81a3      	strhne	r3, [r4, #12]
 8008480:	bd10      	pop	{r4, pc}

08008482 <__sclose>:
 8008482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008486:	f000 bebb 	b.w	8009200 <_close_r>

0800848a <strcpy>:
 800848a:	4603      	mov	r3, r0
 800848c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008490:	f803 2b01 	strb.w	r2, [r3], #1
 8008494:	2a00      	cmp	r2, #0
 8008496:	d1f9      	bne.n	800848c <strcpy+0x2>
 8008498:	4770      	bx	lr

0800849a <strncmp>:
 800849a:	b510      	push	{r4, lr}
 800849c:	b16a      	cbz	r2, 80084ba <strncmp+0x20>
 800849e:	3901      	subs	r1, #1
 80084a0:	1884      	adds	r4, r0, r2
 80084a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d103      	bne.n	80084b6 <strncmp+0x1c>
 80084ae:	42a0      	cmp	r0, r4
 80084b0:	d001      	beq.n	80084b6 <strncmp+0x1c>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f5      	bne.n	80084a2 <strncmp+0x8>
 80084b6:	1a98      	subs	r0, r3, r2
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	4610      	mov	r0, r2
 80084bc:	e7fc      	b.n	80084b8 <strncmp+0x1e>

080084be <strncpy>:
 80084be:	b510      	push	{r4, lr}
 80084c0:	3901      	subs	r1, #1
 80084c2:	4603      	mov	r3, r0
 80084c4:	b132      	cbz	r2, 80084d4 <strncpy+0x16>
 80084c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084ca:	f803 4b01 	strb.w	r4, [r3], #1
 80084ce:	3a01      	subs	r2, #1
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	d1f7      	bne.n	80084c4 <strncpy+0x6>
 80084d4:	441a      	add	r2, r3
 80084d6:	2100      	movs	r1, #0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <strncpy+0x20>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <strncpy+0x1a>

080084e4 <sulp>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	460d      	mov	r5, r1
 80084ea:	4616      	mov	r6, r2
 80084ec:	ec45 4b10 	vmov	d0, r4, r5
 80084f0:	f002 fbbe 	bl	800ac70 <__ulp>
 80084f4:	b17e      	cbz	r6, 8008516 <sulp+0x32>
 80084f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dd09      	ble.n	8008516 <sulp+0x32>
 8008502:	051b      	lsls	r3, r3, #20
 8008504:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008508:	2000      	movs	r0, #0
 800850a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800850e:	ec41 0b17 	vmov	d7, r0, r1
 8008512:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008516:	bd70      	pop	{r4, r5, r6, pc}

08008518 <_strtod_l>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	ed2d 8b0c 	vpush	{d8-d13}
 8008520:	b09d      	sub	sp, #116	; 0x74
 8008522:	461f      	mov	r7, r3
 8008524:	2300      	movs	r3, #0
 8008526:	9318      	str	r3, [sp, #96]	; 0x60
 8008528:	4ba6      	ldr	r3, [pc, #664]	; (80087c4 <_strtod_l+0x2ac>)
 800852a:	9213      	str	r2, [sp, #76]	; 0x4c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	9308      	str	r3, [sp, #32]
 8008530:	4604      	mov	r4, r0
 8008532:	4618      	mov	r0, r3
 8008534:	468a      	mov	sl, r1
 8008536:	f7f7 fe8d 	bl	8000254 <strlen>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	4605      	mov	r5, r0
 8008540:	f04f 0900 	mov.w	r9, #0
 8008544:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	2a2b      	cmp	r2, #43	; 0x2b
 800854e:	d04d      	beq.n	80085ec <_strtod_l+0xd4>
 8008550:	d83a      	bhi.n	80085c8 <_strtod_l+0xb0>
 8008552:	2a0d      	cmp	r2, #13
 8008554:	d833      	bhi.n	80085be <_strtod_l+0xa6>
 8008556:	2a08      	cmp	r2, #8
 8008558:	d833      	bhi.n	80085c2 <_strtod_l+0xaa>
 800855a:	2a00      	cmp	r2, #0
 800855c:	d03d      	beq.n	80085da <_strtod_l+0xc2>
 800855e:	2300      	movs	r3, #0
 8008560:	930b      	str	r3, [sp, #44]	; 0x2c
 8008562:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008564:	7833      	ldrb	r3, [r6, #0]
 8008566:	2b30      	cmp	r3, #48	; 0x30
 8008568:	f040 80b6 	bne.w	80086d8 <_strtod_l+0x1c0>
 800856c:	7873      	ldrb	r3, [r6, #1]
 800856e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008572:	2b58      	cmp	r3, #88	; 0x58
 8008574:	d16d      	bne.n	8008652 <_strtod_l+0x13a>
 8008576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	ab18      	add	r3, sp, #96	; 0x60
 800857c:	9702      	str	r7, [sp, #8]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4a91      	ldr	r2, [pc, #580]	; (80087c8 <_strtod_l+0x2b0>)
 8008582:	ab19      	add	r3, sp, #100	; 0x64
 8008584:	a917      	add	r1, sp, #92	; 0x5c
 8008586:	4620      	mov	r0, r4
 8008588:	f001 fcc0 	bl	8009f0c <__gethex>
 800858c:	f010 0507 	ands.w	r5, r0, #7
 8008590:	4607      	mov	r7, r0
 8008592:	d005      	beq.n	80085a0 <_strtod_l+0x88>
 8008594:	2d06      	cmp	r5, #6
 8008596:	d12b      	bne.n	80085f0 <_strtod_l+0xd8>
 8008598:	3601      	adds	r6, #1
 800859a:	2300      	movs	r3, #0
 800859c:	9617      	str	r6, [sp, #92]	; 0x5c
 800859e:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 856e 	bne.w	8009084 <_strtod_l+0xb6c>
 80085a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085aa:	b1e3      	cbz	r3, 80085e6 <_strtod_l+0xce>
 80085ac:	ec49 8b17 	vmov	d7, r8, r9
 80085b0:	eeb1 0b47 	vneg.f64	d0, d7
 80085b4:	b01d      	add	sp, #116	; 0x74
 80085b6:	ecbd 8b0c 	vpop	{d8-d13}
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	2a20      	cmp	r2, #32
 80085c0:	d1cd      	bne.n	800855e <_strtod_l+0x46>
 80085c2:	3301      	adds	r3, #1
 80085c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80085c6:	e7bf      	b.n	8008548 <_strtod_l+0x30>
 80085c8:	2a2d      	cmp	r2, #45	; 0x2d
 80085ca:	d1c8      	bne.n	800855e <_strtod_l+0x46>
 80085cc:	2201      	movs	r2, #1
 80085ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1c3      	bne.n	8008562 <_strtod_l+0x4a>
 80085da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085dc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f040 854d 	bne.w	8009080 <_strtod_l+0xb68>
 80085e6:	ec49 8b10 	vmov	d0, r8, r9
 80085ea:	e7e3      	b.n	80085b4 <_strtod_l+0x9c>
 80085ec:	2200      	movs	r2, #0
 80085ee:	e7ee      	b.n	80085ce <_strtod_l+0xb6>
 80085f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085f2:	b13a      	cbz	r2, 8008604 <_strtod_l+0xec>
 80085f4:	2135      	movs	r1, #53	; 0x35
 80085f6:	a81a      	add	r0, sp, #104	; 0x68
 80085f8:	f002 fc46 	bl	800ae88 <__copybits>
 80085fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085fe:	4620      	mov	r0, r4
 8008600:	f002 f80a 	bl	800a618 <_Bfree>
 8008604:	3d01      	subs	r5, #1
 8008606:	2d05      	cmp	r5, #5
 8008608:	d807      	bhi.n	800861a <_strtod_l+0x102>
 800860a:	e8df f005 	tbb	[pc, r5]
 800860e:	0b0e      	.short	0x0b0e
 8008610:	030e1d18 	.word	0x030e1d18
 8008614:	f04f 0900 	mov.w	r9, #0
 8008618:	46c8      	mov	r8, r9
 800861a:	073b      	lsls	r3, r7, #28
 800861c:	d5c0      	bpl.n	80085a0 <_strtod_l+0x88>
 800861e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008622:	e7bd      	b.n	80085a0 <_strtod_l+0x88>
 8008624:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008628:	e7f7      	b.n	800861a <_strtod_l+0x102>
 800862a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800862e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008630:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008634:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008638:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800863c:	e7ed      	b.n	800861a <_strtod_l+0x102>
 800863e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80087cc <_strtod_l+0x2b4>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	e7e8      	b.n	800861a <_strtod_l+0x102>
 8008648:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800864c:	f04f 38ff 	mov.w	r8, #4294967295
 8008650:	e7e3      	b.n	800861a <_strtod_l+0x102>
 8008652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	9217      	str	r2, [sp, #92]	; 0x5c
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b30      	cmp	r3, #48	; 0x30
 800865c:	d0f9      	beq.n	8008652 <_strtod_l+0x13a>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d09e      	beq.n	80085a0 <_strtod_l+0x88>
 8008662:	2301      	movs	r3, #1
 8008664:	9306      	str	r3, [sp, #24]
 8008666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008668:	930c      	str	r3, [sp, #48]	; 0x30
 800866a:	2300      	movs	r3, #0
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	930a      	str	r3, [sp, #40]	; 0x28
 8008670:	461e      	mov	r6, r3
 8008672:	220a      	movs	r2, #10
 8008674:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008676:	f890 b000 	ldrb.w	fp, [r0]
 800867a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800867e:	b2d9      	uxtb	r1, r3
 8008680:	2909      	cmp	r1, #9
 8008682:	d92b      	bls.n	80086dc <_strtod_l+0x1c4>
 8008684:	9908      	ldr	r1, [sp, #32]
 8008686:	462a      	mov	r2, r5
 8008688:	f7ff ff07 	bl	800849a <strncmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	d035      	beq.n	80086fc <_strtod_l+0x1e4>
 8008690:	2000      	movs	r0, #0
 8008692:	465a      	mov	r2, fp
 8008694:	4633      	mov	r3, r6
 8008696:	4683      	mov	fp, r0
 8008698:	4601      	mov	r1, r0
 800869a:	2a65      	cmp	r2, #101	; 0x65
 800869c:	d001      	beq.n	80086a2 <_strtod_l+0x18a>
 800869e:	2a45      	cmp	r2, #69	; 0x45
 80086a0:	d118      	bne.n	80086d4 <_strtod_l+0x1bc>
 80086a2:	b91b      	cbnz	r3, 80086ac <_strtod_l+0x194>
 80086a4:	9b06      	ldr	r3, [sp, #24]
 80086a6:	4303      	orrs	r3, r0
 80086a8:	d097      	beq.n	80085da <_strtod_l+0xc2>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80086b0:	f10a 0201 	add.w	r2, sl, #1
 80086b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80086b6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80086ba:	2a2b      	cmp	r2, #43	; 0x2b
 80086bc:	d077      	beq.n	80087ae <_strtod_l+0x296>
 80086be:	2a2d      	cmp	r2, #45	; 0x2d
 80086c0:	d07d      	beq.n	80087be <_strtod_l+0x2a6>
 80086c2:	f04f 0e00 	mov.w	lr, #0
 80086c6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80086ca:	2d09      	cmp	r5, #9
 80086cc:	f240 8084 	bls.w	80087d8 <_strtod_l+0x2c0>
 80086d0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80086d4:	2500      	movs	r5, #0
 80086d6:	e09f      	b.n	8008818 <_strtod_l+0x300>
 80086d8:	2300      	movs	r3, #0
 80086da:	e7c3      	b.n	8008664 <_strtod_l+0x14c>
 80086dc:	2e08      	cmp	r6, #8
 80086de:	bfd5      	itete	le
 80086e0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80086e2:	9904      	ldrgt	r1, [sp, #16]
 80086e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80086e8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80086ec:	f100 0001 	add.w	r0, r0, #1
 80086f0:	bfd4      	ite	le
 80086f2:	930a      	strle	r3, [sp, #40]	; 0x28
 80086f4:	9304      	strgt	r3, [sp, #16]
 80086f6:	3601      	adds	r6, #1
 80086f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80086fa:	e7bb      	b.n	8008674 <_strtod_l+0x15c>
 80086fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086fe:	195a      	adds	r2, r3, r5
 8008700:	9217      	str	r2, [sp, #92]	; 0x5c
 8008702:	5d5a      	ldrb	r2, [r3, r5]
 8008704:	b3ae      	cbz	r6, 8008772 <_strtod_l+0x25a>
 8008706:	4683      	mov	fp, r0
 8008708:	4633      	mov	r3, r6
 800870a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800870e:	2909      	cmp	r1, #9
 8008710:	d912      	bls.n	8008738 <_strtod_l+0x220>
 8008712:	2101      	movs	r1, #1
 8008714:	e7c1      	b.n	800869a <_strtod_l+0x182>
 8008716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	9217      	str	r2, [sp, #92]	; 0x5c
 800871c:	785a      	ldrb	r2, [r3, #1]
 800871e:	3001      	adds	r0, #1
 8008720:	2a30      	cmp	r2, #48	; 0x30
 8008722:	d0f8      	beq.n	8008716 <_strtod_l+0x1fe>
 8008724:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008728:	2b08      	cmp	r3, #8
 800872a:	f200 84b0 	bhi.w	800908e <_strtod_l+0xb76>
 800872e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008730:	930c      	str	r3, [sp, #48]	; 0x30
 8008732:	4683      	mov	fp, r0
 8008734:	2000      	movs	r0, #0
 8008736:	4603      	mov	r3, r0
 8008738:	3a30      	subs	r2, #48	; 0x30
 800873a:	f100 0101 	add.w	r1, r0, #1
 800873e:	d012      	beq.n	8008766 <_strtod_l+0x24e>
 8008740:	448b      	add	fp, r1
 8008742:	eb00 0c03 	add.w	ip, r0, r3
 8008746:	4619      	mov	r1, r3
 8008748:	250a      	movs	r5, #10
 800874a:	4561      	cmp	r1, ip
 800874c:	d113      	bne.n	8008776 <_strtod_l+0x25e>
 800874e:	1819      	adds	r1, r3, r0
 8008750:	2908      	cmp	r1, #8
 8008752:	f103 0301 	add.w	r3, r3, #1
 8008756:	4403      	add	r3, r0
 8008758:	dc1d      	bgt.n	8008796 <_strtod_l+0x27e>
 800875a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800875c:	210a      	movs	r1, #10
 800875e:	fb01 2200 	mla	r2, r1, r0, r2
 8008762:	920a      	str	r2, [sp, #40]	; 0x28
 8008764:	2100      	movs	r1, #0
 8008766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008768:	1c50      	adds	r0, r2, #1
 800876a:	9017      	str	r0, [sp, #92]	; 0x5c
 800876c:	7852      	ldrb	r2, [r2, #1]
 800876e:	4608      	mov	r0, r1
 8008770:	e7cb      	b.n	800870a <_strtod_l+0x1f2>
 8008772:	4630      	mov	r0, r6
 8008774:	e7d4      	b.n	8008720 <_strtod_l+0x208>
 8008776:	2908      	cmp	r1, #8
 8008778:	dc04      	bgt.n	8008784 <_strtod_l+0x26c>
 800877a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800877c:	436f      	muls	r7, r5
 800877e:	970a      	str	r7, [sp, #40]	; 0x28
 8008780:	3101      	adds	r1, #1
 8008782:	e7e2      	b.n	800874a <_strtod_l+0x232>
 8008784:	f101 0e01 	add.w	lr, r1, #1
 8008788:	f1be 0f10 	cmp.w	lr, #16
 800878c:	bfde      	ittt	le
 800878e:	9f04      	ldrle	r7, [sp, #16]
 8008790:	436f      	mulle	r7, r5
 8008792:	9704      	strle	r7, [sp, #16]
 8008794:	e7f4      	b.n	8008780 <_strtod_l+0x268>
 8008796:	2b10      	cmp	r3, #16
 8008798:	bfdf      	itttt	le
 800879a:	9804      	ldrle	r0, [sp, #16]
 800879c:	210a      	movle	r1, #10
 800879e:	fb01 2200 	mlale	r2, r1, r0, r2
 80087a2:	9204      	strle	r2, [sp, #16]
 80087a4:	e7de      	b.n	8008764 <_strtod_l+0x24c>
 80087a6:	f04f 0b00 	mov.w	fp, #0
 80087aa:	2101      	movs	r1, #1
 80087ac:	e77a      	b.n	80086a4 <_strtod_l+0x18c>
 80087ae:	f04f 0e00 	mov.w	lr, #0
 80087b2:	f10a 0202 	add.w	r2, sl, #2
 80087b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087b8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80087bc:	e783      	b.n	80086c6 <_strtod_l+0x1ae>
 80087be:	f04f 0e01 	mov.w	lr, #1
 80087c2:	e7f6      	b.n	80087b2 <_strtod_l+0x29a>
 80087c4:	0800d260 	.word	0x0800d260
 80087c8:	0800d00c 	.word	0x0800d00c
 80087cc:	7ff00000 	.word	0x7ff00000
 80087d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087d2:	1c55      	adds	r5, r2, #1
 80087d4:	9517      	str	r5, [sp, #92]	; 0x5c
 80087d6:	7852      	ldrb	r2, [r2, #1]
 80087d8:	2a30      	cmp	r2, #48	; 0x30
 80087da:	d0f9      	beq.n	80087d0 <_strtod_l+0x2b8>
 80087dc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80087e0:	2d08      	cmp	r5, #8
 80087e2:	f63f af77 	bhi.w	80086d4 <_strtod_l+0x1bc>
 80087e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80087ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087ec:	9208      	str	r2, [sp, #32]
 80087ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087f0:	1c55      	adds	r5, r2, #1
 80087f2:	9517      	str	r5, [sp, #92]	; 0x5c
 80087f4:	7852      	ldrb	r2, [r2, #1]
 80087f6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80087fa:	2f09      	cmp	r7, #9
 80087fc:	d937      	bls.n	800886e <_strtod_l+0x356>
 80087fe:	9f08      	ldr	r7, [sp, #32]
 8008800:	1bed      	subs	r5, r5, r7
 8008802:	2d08      	cmp	r5, #8
 8008804:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008808:	dc02      	bgt.n	8008810 <_strtod_l+0x2f8>
 800880a:	4565      	cmp	r5, ip
 800880c:	bfa8      	it	ge
 800880e:	4665      	movge	r5, ip
 8008810:	f1be 0f00 	cmp.w	lr, #0
 8008814:	d000      	beq.n	8008818 <_strtod_l+0x300>
 8008816:	426d      	negs	r5, r5
 8008818:	2b00      	cmp	r3, #0
 800881a:	d14f      	bne.n	80088bc <_strtod_l+0x3a4>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	4303      	orrs	r3, r0
 8008820:	f47f aebe 	bne.w	80085a0 <_strtod_l+0x88>
 8008824:	2900      	cmp	r1, #0
 8008826:	f47f aed8 	bne.w	80085da <_strtod_l+0xc2>
 800882a:	2a69      	cmp	r2, #105	; 0x69
 800882c:	d027      	beq.n	800887e <_strtod_l+0x366>
 800882e:	dc24      	bgt.n	800887a <_strtod_l+0x362>
 8008830:	2a49      	cmp	r2, #73	; 0x49
 8008832:	d024      	beq.n	800887e <_strtod_l+0x366>
 8008834:	2a4e      	cmp	r2, #78	; 0x4e
 8008836:	f47f aed0 	bne.w	80085da <_strtod_l+0xc2>
 800883a:	499b      	ldr	r1, [pc, #620]	; (8008aa8 <_strtod_l+0x590>)
 800883c:	a817      	add	r0, sp, #92	; 0x5c
 800883e:	f001 fdbd 	bl	800a3bc <__match>
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f aec9 	beq.w	80085da <_strtod_l+0xc2>
 8008848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b28      	cmp	r3, #40	; 0x28
 800884e:	d12d      	bne.n	80088ac <_strtod_l+0x394>
 8008850:	4996      	ldr	r1, [pc, #600]	; (8008aac <_strtod_l+0x594>)
 8008852:	aa1a      	add	r2, sp, #104	; 0x68
 8008854:	a817      	add	r0, sp, #92	; 0x5c
 8008856:	f001 fdc5 	bl	800a3e4 <__hexnan>
 800885a:	2805      	cmp	r0, #5
 800885c:	d126      	bne.n	80088ac <_strtod_l+0x394>
 800885e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008860:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008864:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008868:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800886c:	e698      	b.n	80085a0 <_strtod_l+0x88>
 800886e:	250a      	movs	r5, #10
 8008870:	fb05 250c 	mla	r5, r5, ip, r2
 8008874:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008878:	e7b9      	b.n	80087ee <_strtod_l+0x2d6>
 800887a:	2a6e      	cmp	r2, #110	; 0x6e
 800887c:	e7db      	b.n	8008836 <_strtod_l+0x31e>
 800887e:	498c      	ldr	r1, [pc, #560]	; (8008ab0 <_strtod_l+0x598>)
 8008880:	a817      	add	r0, sp, #92	; 0x5c
 8008882:	f001 fd9b 	bl	800a3bc <__match>
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f aea7 	beq.w	80085da <_strtod_l+0xc2>
 800888c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888e:	4989      	ldr	r1, [pc, #548]	; (8008ab4 <_strtod_l+0x59c>)
 8008890:	3b01      	subs	r3, #1
 8008892:	a817      	add	r0, sp, #92	; 0x5c
 8008894:	9317      	str	r3, [sp, #92]	; 0x5c
 8008896:	f001 fd91 	bl	800a3bc <__match>
 800889a:	b910      	cbnz	r0, 80088a2 <_strtod_l+0x38a>
 800889c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889e:	3301      	adds	r3, #1
 80088a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80088a2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008ac8 <_strtod_l+0x5b0>
 80088a6:	f04f 0800 	mov.w	r8, #0
 80088aa:	e679      	b.n	80085a0 <_strtod_l+0x88>
 80088ac:	4882      	ldr	r0, [pc, #520]	; (8008ab8 <_strtod_l+0x5a0>)
 80088ae:	f003 f877 	bl	800b9a0 <nan>
 80088b2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80088b6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80088ba:	e671      	b.n	80085a0 <_strtod_l+0x88>
 80088bc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80088c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80088c4:	eba5 020b 	sub.w	r2, r5, fp
 80088c8:	2e00      	cmp	r6, #0
 80088ca:	bf08      	it	eq
 80088cc:	461e      	moveq	r6, r3
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80088d4:	9206      	str	r2, [sp, #24]
 80088d6:	461a      	mov	r2, r3
 80088d8:	bfa8      	it	ge
 80088da:	2210      	movge	r2, #16
 80088dc:	2b09      	cmp	r3, #9
 80088de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80088e2:	dd0e      	ble.n	8008902 <_strtod_l+0x3ea>
 80088e4:	4975      	ldr	r1, [pc, #468]	; (8008abc <_strtod_l+0x5a4>)
 80088e6:	eddd 7a04 	vldr	s15, [sp, #16]
 80088ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80088ee:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80088f2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80088f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80088fa:	eea5 7b06 	vfma.f64	d7, d5, d6
 80088fe:	ec59 8b17 	vmov	r8, r9, d7
 8008902:	2b0f      	cmp	r3, #15
 8008904:	dc37      	bgt.n	8008976 <_strtod_l+0x45e>
 8008906:	9906      	ldr	r1, [sp, #24]
 8008908:	2900      	cmp	r1, #0
 800890a:	f43f ae49 	beq.w	80085a0 <_strtod_l+0x88>
 800890e:	dd23      	ble.n	8008958 <_strtod_l+0x440>
 8008910:	2916      	cmp	r1, #22
 8008912:	dc0b      	bgt.n	800892c <_strtod_l+0x414>
 8008914:	4b69      	ldr	r3, [pc, #420]	; (8008abc <_strtod_l+0x5a4>)
 8008916:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800891a:	ed93 7b00 	vldr	d7, [r3]
 800891e:	ec49 8b16 	vmov	d6, r8, r9
 8008922:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008926:	ec59 8b17 	vmov	r8, r9, d7
 800892a:	e639      	b.n	80085a0 <_strtod_l+0x88>
 800892c:	9806      	ldr	r0, [sp, #24]
 800892e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008932:	4281      	cmp	r1, r0
 8008934:	db1f      	blt.n	8008976 <_strtod_l+0x45e>
 8008936:	4a61      	ldr	r2, [pc, #388]	; (8008abc <_strtod_l+0x5a4>)
 8008938:	f1c3 030f 	rsb	r3, r3, #15
 800893c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008940:	ed91 7b00 	vldr	d7, [r1]
 8008944:	ec49 8b16 	vmov	d6, r8, r9
 8008948:	1ac3      	subs	r3, r0, r3
 800894a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800894e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008952:	ed92 6b00 	vldr	d6, [r2]
 8008956:	e7e4      	b.n	8008922 <_strtod_l+0x40a>
 8008958:	9906      	ldr	r1, [sp, #24]
 800895a:	3116      	adds	r1, #22
 800895c:	db0b      	blt.n	8008976 <_strtod_l+0x45e>
 800895e:	4b57      	ldr	r3, [pc, #348]	; (8008abc <_strtod_l+0x5a4>)
 8008960:	ebab 0505 	sub.w	r5, fp, r5
 8008964:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008968:	ed95 7b00 	vldr	d7, [r5]
 800896c:	ec49 8b16 	vmov	d6, r8, r9
 8008970:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008974:	e7d7      	b.n	8008926 <_strtod_l+0x40e>
 8008976:	9906      	ldr	r1, [sp, #24]
 8008978:	1a9a      	subs	r2, r3, r2
 800897a:	440a      	add	r2, r1
 800897c:	2a00      	cmp	r2, #0
 800897e:	dd74      	ble.n	8008a6a <_strtod_l+0x552>
 8008980:	f012 000f 	ands.w	r0, r2, #15
 8008984:	d00a      	beq.n	800899c <_strtod_l+0x484>
 8008986:	494d      	ldr	r1, [pc, #308]	; (8008abc <_strtod_l+0x5a4>)
 8008988:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800898c:	ed91 7b00 	vldr	d7, [r1]
 8008990:	ec49 8b16 	vmov	d6, r8, r9
 8008994:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008998:	ec59 8b17 	vmov	r8, r9, d7
 800899c:	f032 020f 	bics.w	r2, r2, #15
 80089a0:	d04f      	beq.n	8008a42 <_strtod_l+0x52a>
 80089a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80089a6:	dd22      	ble.n	80089ee <_strtod_l+0x4d6>
 80089a8:	2500      	movs	r5, #0
 80089aa:	462e      	mov	r6, r5
 80089ac:	950a      	str	r5, [sp, #40]	; 0x28
 80089ae:	462f      	mov	r7, r5
 80089b0:	2322      	movs	r3, #34	; 0x22
 80089b2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008ac8 <_strtod_l+0x5b0>
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	f04f 0800 	mov.w	r8, #0
 80089bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f43f adee 	beq.w	80085a0 <_strtod_l+0x88>
 80089c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089c6:	4620      	mov	r0, r4
 80089c8:	f001 fe26 	bl	800a618 <_Bfree>
 80089cc:	4639      	mov	r1, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	f001 fe22 	bl	800a618 <_Bfree>
 80089d4:	4631      	mov	r1, r6
 80089d6:	4620      	mov	r0, r4
 80089d8:	f001 fe1e 	bl	800a618 <_Bfree>
 80089dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 fe1a 	bl	800a618 <_Bfree>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4620      	mov	r0, r4
 80089e8:	f001 fe16 	bl	800a618 <_Bfree>
 80089ec:	e5d8      	b.n	80085a0 <_strtod_l+0x88>
 80089ee:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80089f2:	2000      	movs	r0, #0
 80089f4:	4f32      	ldr	r7, [pc, #200]	; (8008ac0 <_strtod_l+0x5a8>)
 80089f6:	1112      	asrs	r2, r2, #4
 80089f8:	4601      	mov	r1, r0
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	dc24      	bgt.n	8008a48 <_strtod_l+0x530>
 80089fe:	b108      	cbz	r0, 8008a04 <_strtod_l+0x4ec>
 8008a00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a04:	4a2e      	ldr	r2, [pc, #184]	; (8008ac0 <_strtod_l+0x5a8>)
 8008a06:	482f      	ldr	r0, [pc, #188]	; (8008ac4 <_strtod_l+0x5ac>)
 8008a08:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008a0c:	ed91 7b00 	vldr	d7, [r1]
 8008a10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008a14:	ec49 8b16 	vmov	d6, r8, r9
 8008a18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008a20:	9905      	ldr	r1, [sp, #20]
 8008a22:	4a29      	ldr	r2, [pc, #164]	; (8008ac8 <_strtod_l+0x5b0>)
 8008a24:	400a      	ands	r2, r1
 8008a26:	4282      	cmp	r2, r0
 8008a28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a2c:	d8bc      	bhi.n	80089a8 <_strtod_l+0x490>
 8008a2e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008a32:	4282      	cmp	r2, r0
 8008a34:	bf86      	itte	hi
 8008a36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008acc <_strtod_l+0x5b4>
 8008a3a:	f04f 38ff 	movhi.w	r8, #4294967295
 8008a3e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008a42:	2200      	movs	r2, #0
 8008a44:	9204      	str	r2, [sp, #16]
 8008a46:	e07f      	b.n	8008b48 <_strtod_l+0x630>
 8008a48:	f012 0f01 	tst.w	r2, #1
 8008a4c:	d00a      	beq.n	8008a64 <_strtod_l+0x54c>
 8008a4e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8008a52:	ed90 7b00 	vldr	d7, [r0]
 8008a56:	ed9d 6b04 	vldr	d6, [sp, #16]
 8008a5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008a62:	2001      	movs	r0, #1
 8008a64:	3101      	adds	r1, #1
 8008a66:	1052      	asrs	r2, r2, #1
 8008a68:	e7c7      	b.n	80089fa <_strtod_l+0x4e2>
 8008a6a:	d0ea      	beq.n	8008a42 <_strtod_l+0x52a>
 8008a6c:	4252      	negs	r2, r2
 8008a6e:	f012 000f 	ands.w	r0, r2, #15
 8008a72:	d00a      	beq.n	8008a8a <_strtod_l+0x572>
 8008a74:	4911      	ldr	r1, [pc, #68]	; (8008abc <_strtod_l+0x5a4>)
 8008a76:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008a7a:	ed91 7b00 	vldr	d7, [r1]
 8008a7e:	ec49 8b16 	vmov	d6, r8, r9
 8008a82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a86:	ec59 8b17 	vmov	r8, r9, d7
 8008a8a:	1112      	asrs	r2, r2, #4
 8008a8c:	d0d9      	beq.n	8008a42 <_strtod_l+0x52a>
 8008a8e:	2a1f      	cmp	r2, #31
 8008a90:	dd1e      	ble.n	8008ad0 <_strtod_l+0x5b8>
 8008a92:	2500      	movs	r5, #0
 8008a94:	462e      	mov	r6, r5
 8008a96:	950a      	str	r5, [sp, #40]	; 0x28
 8008a98:	462f      	mov	r7, r5
 8008a9a:	2322      	movs	r3, #34	; 0x22
 8008a9c:	f04f 0800 	mov.w	r8, #0
 8008aa0:	f04f 0900 	mov.w	r9, #0
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	e789      	b.n	80089bc <_strtod_l+0x4a4>
 8008aa8:	0800cfe1 	.word	0x0800cfe1
 8008aac:	0800d020 	.word	0x0800d020
 8008ab0:	0800cfd9 	.word	0x0800cfd9
 8008ab4:	0800d164 	.word	0x0800d164
 8008ab8:	0800d43b 	.word	0x0800d43b
 8008abc:	0800d300 	.word	0x0800d300
 8008ac0:	0800d2d8 	.word	0x0800d2d8
 8008ac4:	7ca00000 	.word	0x7ca00000
 8008ac8:	7ff00000 	.word	0x7ff00000
 8008acc:	7fefffff 	.word	0x7fefffff
 8008ad0:	f012 0110 	ands.w	r1, r2, #16
 8008ad4:	bf18      	it	ne
 8008ad6:	216a      	movne	r1, #106	; 0x6a
 8008ad8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008adc:	9104      	str	r1, [sp, #16]
 8008ade:	49c0      	ldr	r1, [pc, #768]	; (8008de0 <_strtod_l+0x8c8>)
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	07d7      	lsls	r7, r2, #31
 8008ae4:	d508      	bpl.n	8008af8 <_strtod_l+0x5e0>
 8008ae6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8008aea:	ed91 7b00 	vldr	d7, [r1]
 8008aee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008af2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008af6:	2001      	movs	r0, #1
 8008af8:	1052      	asrs	r2, r2, #1
 8008afa:	f101 0108 	add.w	r1, r1, #8
 8008afe:	d1f0      	bne.n	8008ae2 <_strtod_l+0x5ca>
 8008b00:	b108      	cbz	r0, 8008b06 <_strtod_l+0x5ee>
 8008b02:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	b1ba      	cbz	r2, 8008b3a <_strtod_l+0x622>
 8008b0a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008b0e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	4649      	mov	r1, r9
 8008b16:	dd10      	ble.n	8008b3a <_strtod_l+0x622>
 8008b18:	2a1f      	cmp	r2, #31
 8008b1a:	f340 8132 	ble.w	8008d82 <_strtod_l+0x86a>
 8008b1e:	2a34      	cmp	r2, #52	; 0x34
 8008b20:	bfde      	ittt	le
 8008b22:	3a20      	suble	r2, #32
 8008b24:	f04f 30ff 	movle.w	r0, #4294967295
 8008b28:	fa00 f202 	lslle.w	r2, r0, r2
 8008b2c:	f04f 0800 	mov.w	r8, #0
 8008b30:	bfcc      	ite	gt
 8008b32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008b36:	ea02 0901 	andle.w	r9, r2, r1
 8008b3a:	ec49 8b17 	vmov	d7, r8, r9
 8008b3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b46:	d0a4      	beq.n	8008a92 <_strtod_l+0x57a>
 8008b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b4a:	9200      	str	r2, [sp, #0]
 8008b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b4e:	4632      	mov	r2, r6
 8008b50:	4620      	mov	r0, r4
 8008b52:	f001 fdcd 	bl	800a6f0 <__s2b>
 8008b56:	900a      	str	r0, [sp, #40]	; 0x28
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f43f af25 	beq.w	80089a8 <_strtod_l+0x490>
 8008b5e:	9b06      	ldr	r3, [sp, #24]
 8008b60:	ebab 0505 	sub.w	r5, fp, r5
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bfb4      	ite	lt
 8008b68:	462b      	movlt	r3, r5
 8008b6a:	2300      	movge	r3, #0
 8008b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008dc8 <_strtod_l+0x8b0>
 8008b74:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008dd0 <_strtod_l+0x8b8>
 8008b78:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008dd8 <_strtod_l+0x8c0>
 8008b7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b80:	2500      	movs	r5, #0
 8008b82:	9312      	str	r3, [sp, #72]	; 0x48
 8008b84:	462e      	mov	r6, r5
 8008b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b88:	4620      	mov	r0, r4
 8008b8a:	6859      	ldr	r1, [r3, #4]
 8008b8c:	f001 fd04 	bl	800a598 <_Balloc>
 8008b90:	4607      	mov	r7, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	f43f af0c 	beq.w	80089b0 <_strtod_l+0x498>
 8008b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	f103 010c 	add.w	r1, r3, #12
 8008ba2:	0092      	lsls	r2, r2, #2
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f001 fce9 	bl	800a57c <memcpy>
 8008baa:	ec49 8b10 	vmov	d0, r8, r9
 8008bae:	aa1a      	add	r2, sp, #104	; 0x68
 8008bb0:	a919      	add	r1, sp, #100	; 0x64
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008bb8:	f002 f8d6 	bl	800ad68 <__d2b>
 8008bbc:	9018      	str	r0, [sp, #96]	; 0x60
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f aef6 	beq.w	80089b0 <_strtod_l+0x498>
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f001 fe2c 	bl	800a824 <__i2b>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f43f aeee 	beq.w	80089b0 <_strtod_l+0x498>
 8008bd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfab      	itete	ge
 8008bdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008bde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008be0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8008be4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008be8:	bfac      	ite	ge
 8008bea:	eb03 0b02 	addge.w	fp, r3, r2
 8008bee:	eba2 0a03 	sublt.w	sl, r2, r3
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	4a7a      	ldr	r2, [pc, #488]	; (8008de4 <_strtod_l+0x8cc>)
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008c02:	f280 80d1 	bge.w	8008da8 <_strtod_l+0x890>
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	2a1f      	cmp	r2, #31
 8008c0a:	eba1 0102 	sub.w	r1, r1, r2
 8008c0e:	f04f 0001 	mov.w	r0, #1
 8008c12:	f300 80bd 	bgt.w	8008d90 <_strtod_l+0x878>
 8008c16:	fa00 f302 	lsl.w	r3, r0, r2
 8008c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c20:	eb0b 0301 	add.w	r3, fp, r1
 8008c24:	9a04      	ldr	r2, [sp, #16]
 8008c26:	459b      	cmp	fp, r3
 8008c28:	448a      	add	sl, r1
 8008c2a:	4492      	add	sl, r2
 8008c2c:	465a      	mov	r2, fp
 8008c2e:	bfa8      	it	ge
 8008c30:	461a      	movge	r2, r3
 8008c32:	4552      	cmp	r2, sl
 8008c34:	bfa8      	it	ge
 8008c36:	4652      	movge	r2, sl
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	bfc2      	ittt	gt
 8008c3c:	1a9b      	subgt	r3, r3, r2
 8008c3e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008c42:	ebab 0b02 	subgt.w	fp, fp, r2
 8008c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	dd18      	ble.n	8008c7e <_strtod_l+0x766>
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4620      	mov	r0, r4
 8008c50:	9315      	str	r3, [sp, #84]	; 0x54
 8008c52:	f001 fea3 	bl	800a99c <__pow5mult>
 8008c56:	4606      	mov	r6, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f43f aea9 	beq.w	80089b0 <_strtod_l+0x498>
 8008c5e:	4601      	mov	r1, r0
 8008c60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c62:	4620      	mov	r0, r4
 8008c64:	f001 fdf4 	bl	800a850 <__multiply>
 8008c68:	9014      	str	r0, [sp, #80]	; 0x50
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f43f aea0 	beq.w	80089b0 <_strtod_l+0x498>
 8008c70:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c72:	4620      	mov	r0, r4
 8008c74:	f001 fcd0 	bl	800a618 <_Bfree>
 8008c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c7c:	9218      	str	r2, [sp, #96]	; 0x60
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f300 8097 	bgt.w	8008db2 <_strtod_l+0x89a>
 8008c84:	9b06      	ldr	r3, [sp, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dd08      	ble.n	8008c9c <_strtod_l+0x784>
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f001 fe84 	bl	800a99c <__pow5mult>
 8008c94:	4607      	mov	r7, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f ae8a 	beq.w	80089b0 <_strtod_l+0x498>
 8008c9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ca0:	dd08      	ble.n	8008cb4 <_strtod_l+0x79c>
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 fed2 	bl	800aa50 <__lshift>
 8008cac:	4607      	mov	r7, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f ae7e 	beq.w	80089b0 <_strtod_l+0x498>
 8008cb4:	f1bb 0f00 	cmp.w	fp, #0
 8008cb8:	dd08      	ble.n	8008ccc <_strtod_l+0x7b4>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	465a      	mov	r2, fp
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f001 fec6 	bl	800aa50 <__lshift>
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f ae72 	beq.w	80089b0 <_strtod_l+0x498>
 8008ccc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cce:	463a      	mov	r2, r7
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f001 ff45 	bl	800ab60 <__mdiff>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	f43f ae69 	beq.w	80089b0 <_strtod_l+0x498>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008ce4:	60c3      	str	r3, [r0, #12]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	f001 ff1e 	bl	800ab28 <__mcmp>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	da7f      	bge.n	8008df0 <_strtod_l+0x8d8>
 8008cf0:	ea5a 0308 	orrs.w	r3, sl, r8
 8008cf4:	f040 80a5 	bne.w	8008e42 <_strtod_l+0x92a>
 8008cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 80a0 	bne.w	8008e42 <_strtod_l+0x92a>
 8008d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d06:	0d1b      	lsrs	r3, r3, #20
 8008d08:	051b      	lsls	r3, r3, #20
 8008d0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d0e:	f240 8098 	bls.w	8008e42 <_strtod_l+0x92a>
 8008d12:	696b      	ldr	r3, [r5, #20]
 8008d14:	b91b      	cbnz	r3, 8008d1e <_strtod_l+0x806>
 8008d16:	692b      	ldr	r3, [r5, #16]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	f340 8092 	ble.w	8008e42 <_strtod_l+0x92a>
 8008d1e:	4629      	mov	r1, r5
 8008d20:	2201      	movs	r2, #1
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 fe94 	bl	800aa50 <__lshift>
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	f001 fefc 	bl	800ab28 <__mcmp>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f340 8086 	ble.w	8008e42 <_strtod_l+0x92a>
 8008d36:	9904      	ldr	r1, [sp, #16]
 8008d38:	4a2b      	ldr	r2, [pc, #172]	; (8008de8 <_strtod_l+0x8d0>)
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	f000 80a1 	beq.w	8008e84 <_strtod_l+0x96c>
 8008d42:	ea02 0109 	and.w	r1, r2, r9
 8008d46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d4a:	f300 809b 	bgt.w	8008e84 <_strtod_l+0x96c>
 8008d4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d52:	f77f aea2 	ble.w	8008a9a <_strtod_l+0x582>
 8008d56:	4a25      	ldr	r2, [pc, #148]	; (8008dec <_strtod_l+0x8d4>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008d5e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8008d62:	ec49 8b17 	vmov	d7, r8, r9
 8008d66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d6e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	bf08      	it	eq
 8008d76:	2322      	moveq	r3, #34	; 0x22
 8008d78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d7c:	bf08      	it	eq
 8008d7e:	6023      	streq	r3, [r4, #0]
 8008d80:	e620      	b.n	80089c4 <_strtod_l+0x4ac>
 8008d82:	f04f 31ff 	mov.w	r1, #4294967295
 8008d86:	fa01 f202 	lsl.w	r2, r1, r2
 8008d8a:	ea02 0808 	and.w	r8, r2, r8
 8008d8e:	e6d4      	b.n	8008b3a <_strtod_l+0x622>
 8008d90:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008d94:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008d98:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008d9c:	33e2      	adds	r3, #226	; 0xe2
 8008d9e:	fa00 f303 	lsl.w	r3, r0, r3
 8008da2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8008da6:	e73b      	b.n	8008c20 <_strtod_l+0x708>
 8008da8:	2000      	movs	r0, #0
 8008daa:	2301      	movs	r3, #1
 8008dac:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008db0:	e736      	b.n	8008c20 <_strtod_l+0x708>
 8008db2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db4:	461a      	mov	r2, r3
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 fe4a 	bl	800aa50 <__lshift>
 8008dbc:	9018      	str	r0, [sp, #96]	; 0x60
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f47f af60 	bne.w	8008c84 <_strtod_l+0x76c>
 8008dc4:	e5f4      	b.n	80089b0 <_strtod_l+0x498>
 8008dc6:	bf00      	nop
 8008dc8:	94a03595 	.word	0x94a03595
 8008dcc:	3fcfffff 	.word	0x3fcfffff
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fdfffff 	.word	0x3fdfffff
 8008dd8:	35afe535 	.word	0x35afe535
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	0800d038 	.word	0x0800d038
 8008de4:	fffffc02 	.word	0xfffffc02
 8008de8:	7ff00000 	.word	0x7ff00000
 8008dec:	39500000 	.word	0x39500000
 8008df0:	46cb      	mov	fp, r9
 8008df2:	d165      	bne.n	8008ec0 <_strtod_l+0x9a8>
 8008df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008df8:	f1ba 0f00 	cmp.w	sl, #0
 8008dfc:	d02a      	beq.n	8008e54 <_strtod_l+0x93c>
 8008dfe:	4aaa      	ldr	r2, [pc, #680]	; (80090a8 <_strtod_l+0xb90>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d12b      	bne.n	8008e5c <_strtod_l+0x944>
 8008e04:	9b04      	ldr	r3, [sp, #16]
 8008e06:	4641      	mov	r1, r8
 8008e08:	b1fb      	cbz	r3, 8008e4a <_strtod_l+0x932>
 8008e0a:	4aa8      	ldr	r2, [pc, #672]	; (80090ac <_strtod_l+0xb94>)
 8008e0c:	ea09 0202 	and.w	r2, r9, r2
 8008e10:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	d81a      	bhi.n	8008e50 <_strtod_l+0x938>
 8008e1a:	0d12      	lsrs	r2, r2, #20
 8008e1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008e20:	fa00 f303 	lsl.w	r3, r0, r3
 8008e24:	4299      	cmp	r1, r3
 8008e26:	d119      	bne.n	8008e5c <_strtod_l+0x944>
 8008e28:	4ba1      	ldr	r3, [pc, #644]	; (80090b0 <_strtod_l+0xb98>)
 8008e2a:	459b      	cmp	fp, r3
 8008e2c:	d102      	bne.n	8008e34 <_strtod_l+0x91c>
 8008e2e:	3101      	adds	r1, #1
 8008e30:	f43f adbe 	beq.w	80089b0 <_strtod_l+0x498>
 8008e34:	4b9d      	ldr	r3, [pc, #628]	; (80090ac <_strtod_l+0xb94>)
 8008e36:	ea0b 0303 	and.w	r3, fp, r3
 8008e3a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d186      	bne.n	8008d56 <_strtod_l+0x83e>
 8008e48:	e5bc      	b.n	80089c4 <_strtod_l+0x4ac>
 8008e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4e:	e7e9      	b.n	8008e24 <_strtod_l+0x90c>
 8008e50:	4603      	mov	r3, r0
 8008e52:	e7e7      	b.n	8008e24 <_strtod_l+0x90c>
 8008e54:	ea53 0308 	orrs.w	r3, r3, r8
 8008e58:	f43f af6d 	beq.w	8008d36 <_strtod_l+0x81e>
 8008e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5e:	b1db      	cbz	r3, 8008e98 <_strtod_l+0x980>
 8008e60:	ea13 0f0b 	tst.w	r3, fp
 8008e64:	d0ed      	beq.n	8008e42 <_strtod_l+0x92a>
 8008e66:	9a04      	ldr	r2, [sp, #16]
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f1ba 0f00 	cmp.w	sl, #0
 8008e70:	d016      	beq.n	8008ea0 <_strtod_l+0x988>
 8008e72:	f7ff fb37 	bl	80084e4 <sulp>
 8008e76:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008e7a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008e7e:	ec59 8b17 	vmov	r8, r9, d7
 8008e82:	e7de      	b.n	8008e42 <_strtod_l+0x92a>
 8008e84:	4013      	ands	r3, r2
 8008e86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e8a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008e8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008e92:	f04f 38ff 	mov.w	r8, #4294967295
 8008e96:	e7d4      	b.n	8008e42 <_strtod_l+0x92a>
 8008e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e9a:	ea13 0f08 	tst.w	r3, r8
 8008e9e:	e7e1      	b.n	8008e64 <_strtod_l+0x94c>
 8008ea0:	f7ff fb20 	bl	80084e4 <sulp>
 8008ea4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008ea8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008eb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008ebc:	d1c1      	bne.n	8008e42 <_strtod_l+0x92a>
 8008ebe:	e5ec      	b.n	8008a9a <_strtod_l+0x582>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f001 ffac 	bl	800ae20 <__ratio>
 8008ec8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008ecc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed4:	d867      	bhi.n	8008fa6 <_strtod_l+0xa8e>
 8008ed6:	f1ba 0f00 	cmp.w	sl, #0
 8008eda:	d044      	beq.n	8008f66 <_strtod_l+0xa4e>
 8008edc:	4b75      	ldr	r3, [pc, #468]	; (80090b4 <_strtod_l+0xb9c>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008ee4:	4971      	ldr	r1, [pc, #452]	; (80090ac <_strtod_l+0xb94>)
 8008ee6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80090c0 <_strtod_l+0xba8>
 8008eea:	ea0b 0001 	and.w	r0, fp, r1
 8008eee:	4560      	cmp	r0, ip
 8008ef0:	900d      	str	r0, [sp, #52]	; 0x34
 8008ef2:	f040 808b 	bne.w	800900c <_strtod_l+0xaf4>
 8008ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008efa:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008efe:	ec49 8b10 	vmov	d0, r8, r9
 8008f02:	ec43 2b1c 	vmov	d12, r2, r3
 8008f06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f0a:	f001 feb1 	bl	800ac70 <__ulp>
 8008f0e:	ec49 8b1d 	vmov	d13, r8, r9
 8008f12:	eeac db00 	vfma.f64	d13, d12, d0
 8008f16:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8008f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1c:	4963      	ldr	r1, [pc, #396]	; (80090ac <_strtod_l+0xb94>)
 8008f1e:	4a66      	ldr	r2, [pc, #408]	; (80090b8 <_strtod_l+0xba0>)
 8008f20:	4019      	ands	r1, r3
 8008f22:	4291      	cmp	r1, r2
 8008f24:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008f28:	d947      	bls.n	8008fba <_strtod_l+0xaa2>
 8008f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d103      	bne.n	8008f3c <_strtod_l+0xa24>
 8008f34:	9b08      	ldr	r3, [sp, #32]
 8008f36:	3301      	adds	r3, #1
 8008f38:	f43f ad3a 	beq.w	80089b0 <_strtod_l+0x498>
 8008f3c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80090b0 <_strtod_l+0xb98>
 8008f40:	f04f 38ff 	mov.w	r8, #4294967295
 8008f44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f46:	4620      	mov	r0, r4
 8008f48:	f001 fb66 	bl	800a618 <_Bfree>
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 fb62 	bl	800a618 <_Bfree>
 8008f54:	4631      	mov	r1, r6
 8008f56:	4620      	mov	r0, r4
 8008f58:	f001 fb5e 	bl	800a618 <_Bfree>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 fb5a 	bl	800a618 <_Bfree>
 8008f64:	e60f      	b.n	8008b86 <_strtod_l+0x66e>
 8008f66:	f1b8 0f00 	cmp.w	r8, #0
 8008f6a:	d112      	bne.n	8008f92 <_strtod_l+0xa7a>
 8008f6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f70:	b9b3      	cbnz	r3, 8008fa0 <_strtod_l+0xa88>
 8008f72:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008f76:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008f82:	d401      	bmi.n	8008f88 <_strtod_l+0xa70>
 8008f84:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008f88:	eeb1 7b48 	vneg.f64	d7, d8
 8008f8c:	ec53 2b17 	vmov	r2, r3, d7
 8008f90:	e7a8      	b.n	8008ee4 <_strtod_l+0x9cc>
 8008f92:	f1b8 0f01 	cmp.w	r8, #1
 8008f96:	d103      	bne.n	8008fa0 <_strtod_l+0xa88>
 8008f98:	f1b9 0f00 	cmp.w	r9, #0
 8008f9c:	f43f ad7d 	beq.w	8008a9a <_strtod_l+0x582>
 8008fa0:	4b46      	ldr	r3, [pc, #280]	; (80090bc <_strtod_l+0xba4>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	e79c      	b.n	8008ee0 <_strtod_l+0x9c8>
 8008fa6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008faa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008fae:	f1ba 0f00 	cmp.w	sl, #0
 8008fb2:	d0e9      	beq.n	8008f88 <_strtod_l+0xa70>
 8008fb4:	ec53 2b18 	vmov	r2, r3, d8
 8008fb8:	e794      	b.n	8008ee4 <_strtod_l+0x9cc>
 8008fba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1bf      	bne.n	8008f44 <_strtod_l+0xa2c>
 8008fc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fca:	0d1b      	lsrs	r3, r3, #20
 8008fcc:	051b      	lsls	r3, r3, #20
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d1b8      	bne.n	8008f44 <_strtod_l+0xa2c>
 8008fd2:	ec51 0b18 	vmov	r0, r1, d8
 8008fd6:	f7f7 fb6f 	bl	80006b8 <__aeabi_d2lz>
 8008fda:	f7f7 fb27 	bl	800062c <__aeabi_l2d>
 8008fde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fe2:	ec41 0b17 	vmov	d7, r0, r1
 8008fe6:	ea43 0308 	orr.w	r3, r3, r8
 8008fea:	ea53 030a 	orrs.w	r3, r3, sl
 8008fee:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008ff2:	d03e      	beq.n	8009072 <_strtod_l+0xb5a>
 8008ff4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffc:	f53f ace2 	bmi.w	80089c4 <_strtod_l+0x4ac>
 8009000:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009008:	dd9c      	ble.n	8008f44 <_strtod_l+0xa2c>
 800900a:	e4db      	b.n	80089c4 <_strtod_l+0x4ac>
 800900c:	9904      	ldr	r1, [sp, #16]
 800900e:	b301      	cbz	r1, 8009052 <_strtod_l+0xb3a>
 8009010:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009012:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009016:	d81c      	bhi.n	8009052 <_strtod_l+0xb3a>
 8009018:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80090a0 <_strtod_l+0xb88>
 800901c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009024:	d811      	bhi.n	800904a <_strtod_l+0xb32>
 8009026:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800902a:	ee18 3a10 	vmov	r3, s16
 800902e:	2b01      	cmp	r3, #1
 8009030:	bf38      	it	cc
 8009032:	2301      	movcc	r3, #1
 8009034:	ee08 3a10 	vmov	s16, r3
 8009038:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800903c:	f1ba 0f00 	cmp.w	sl, #0
 8009040:	d114      	bne.n	800906c <_strtod_l+0xb54>
 8009042:	eeb1 7b48 	vneg.f64	d7, d8
 8009046:	ec53 2b17 	vmov	r2, r3, d7
 800904a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800904c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009050:	1a0b      	subs	r3, r1, r0
 8009052:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009056:	ec43 2b1c 	vmov	d12, r2, r3
 800905a:	f001 fe09 	bl	800ac70 <__ulp>
 800905e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009062:	eeac 7b00 	vfma.f64	d7, d12, d0
 8009066:	ec59 8b17 	vmov	r8, r9, d7
 800906a:	e7a8      	b.n	8008fbe <_strtod_l+0xaa6>
 800906c:	ec53 2b18 	vmov	r2, r3, d8
 8009070:	e7eb      	b.n	800904a <_strtod_l+0xb32>
 8009072:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907a:	f57f af63 	bpl.w	8008f44 <_strtod_l+0xa2c>
 800907e:	e4a1      	b.n	80089c4 <_strtod_l+0x4ac>
 8009080:	2300      	movs	r3, #0
 8009082:	930b      	str	r3, [sp, #44]	; 0x2c
 8009084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	f7ff ba8d 	b.w	80085a8 <_strtod_l+0x90>
 800908e:	2a65      	cmp	r2, #101	; 0x65
 8009090:	f43f ab89 	beq.w	80087a6 <_strtod_l+0x28e>
 8009094:	2a45      	cmp	r2, #69	; 0x45
 8009096:	f43f ab86 	beq.w	80087a6 <_strtod_l+0x28e>
 800909a:	2101      	movs	r1, #1
 800909c:	f7ff bbbe 	b.w	800881c <_strtod_l+0x304>
 80090a0:	ffc00000 	.word	0xffc00000
 80090a4:	41dfffff 	.word	0x41dfffff
 80090a8:	000fffff 	.word	0x000fffff
 80090ac:	7ff00000 	.word	0x7ff00000
 80090b0:	7fefffff 	.word	0x7fefffff
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	7c9fffff 	.word	0x7c9fffff
 80090bc:	bff00000 	.word	0xbff00000
 80090c0:	7fe00000 	.word	0x7fe00000

080090c4 <_strtod_r>:
 80090c4:	4b01      	ldr	r3, [pc, #4]	; (80090cc <_strtod_r+0x8>)
 80090c6:	f7ff ba27 	b.w	8008518 <_strtod_l>
 80090ca:	bf00      	nop
 80090cc:	20000100 	.word	0x20000100

080090d0 <_strtol_l.isra.0>:
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d6:	d001      	beq.n	80090dc <_strtol_l.isra.0+0xc>
 80090d8:	2b24      	cmp	r3, #36	; 0x24
 80090da:	d906      	bls.n	80090ea <_strtol_l.isra.0+0x1a>
 80090dc:	f7fe fac4 	bl	8007668 <__errno>
 80090e0:	2316      	movs	r3, #22
 80090e2:	6003      	str	r3, [r0, #0]
 80090e4:	2000      	movs	r0, #0
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	4f3a      	ldr	r7, [pc, #232]	; (80091d4 <_strtol_l.isra.0+0x104>)
 80090ec:	468e      	mov	lr, r1
 80090ee:	4676      	mov	r6, lr
 80090f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80090f4:	5de5      	ldrb	r5, [r4, r7]
 80090f6:	f015 0508 	ands.w	r5, r5, #8
 80090fa:	d1f8      	bne.n	80090ee <_strtol_l.isra.0+0x1e>
 80090fc:	2c2d      	cmp	r4, #45	; 0x2d
 80090fe:	d134      	bne.n	800916a <_strtol_l.isra.0+0x9a>
 8009100:	f89e 4000 	ldrb.w	r4, [lr]
 8009104:	f04f 0801 	mov.w	r8, #1
 8009108:	f106 0e02 	add.w	lr, r6, #2
 800910c:	2b00      	cmp	r3, #0
 800910e:	d05c      	beq.n	80091ca <_strtol_l.isra.0+0xfa>
 8009110:	2b10      	cmp	r3, #16
 8009112:	d10c      	bne.n	800912e <_strtol_l.isra.0+0x5e>
 8009114:	2c30      	cmp	r4, #48	; 0x30
 8009116:	d10a      	bne.n	800912e <_strtol_l.isra.0+0x5e>
 8009118:	f89e 4000 	ldrb.w	r4, [lr]
 800911c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009120:	2c58      	cmp	r4, #88	; 0x58
 8009122:	d14d      	bne.n	80091c0 <_strtol_l.isra.0+0xf0>
 8009124:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009128:	2310      	movs	r3, #16
 800912a:	f10e 0e02 	add.w	lr, lr, #2
 800912e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009132:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009136:	2600      	movs	r6, #0
 8009138:	fbbc f9f3 	udiv	r9, ip, r3
 800913c:	4635      	mov	r5, r6
 800913e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009142:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009146:	2f09      	cmp	r7, #9
 8009148:	d818      	bhi.n	800917c <_strtol_l.isra.0+0xac>
 800914a:	463c      	mov	r4, r7
 800914c:	42a3      	cmp	r3, r4
 800914e:	dd24      	ble.n	800919a <_strtol_l.isra.0+0xca>
 8009150:	2e00      	cmp	r6, #0
 8009152:	db1f      	blt.n	8009194 <_strtol_l.isra.0+0xc4>
 8009154:	45a9      	cmp	r9, r5
 8009156:	d31d      	bcc.n	8009194 <_strtol_l.isra.0+0xc4>
 8009158:	d101      	bne.n	800915e <_strtol_l.isra.0+0x8e>
 800915a:	45a2      	cmp	sl, r4
 800915c:	db1a      	blt.n	8009194 <_strtol_l.isra.0+0xc4>
 800915e:	fb05 4503 	mla	r5, r5, r3, r4
 8009162:	2601      	movs	r6, #1
 8009164:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009168:	e7eb      	b.n	8009142 <_strtol_l.isra.0+0x72>
 800916a:	2c2b      	cmp	r4, #43	; 0x2b
 800916c:	bf08      	it	eq
 800916e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009172:	46a8      	mov	r8, r5
 8009174:	bf08      	it	eq
 8009176:	f106 0e02 	addeq.w	lr, r6, #2
 800917a:	e7c7      	b.n	800910c <_strtol_l.isra.0+0x3c>
 800917c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009180:	2f19      	cmp	r7, #25
 8009182:	d801      	bhi.n	8009188 <_strtol_l.isra.0+0xb8>
 8009184:	3c37      	subs	r4, #55	; 0x37
 8009186:	e7e1      	b.n	800914c <_strtol_l.isra.0+0x7c>
 8009188:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800918c:	2f19      	cmp	r7, #25
 800918e:	d804      	bhi.n	800919a <_strtol_l.isra.0+0xca>
 8009190:	3c57      	subs	r4, #87	; 0x57
 8009192:	e7db      	b.n	800914c <_strtol_l.isra.0+0x7c>
 8009194:	f04f 36ff 	mov.w	r6, #4294967295
 8009198:	e7e4      	b.n	8009164 <_strtol_l.isra.0+0x94>
 800919a:	2e00      	cmp	r6, #0
 800919c:	da05      	bge.n	80091aa <_strtol_l.isra.0+0xda>
 800919e:	2322      	movs	r3, #34	; 0x22
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	4665      	mov	r5, ip
 80091a4:	b942      	cbnz	r2, 80091b8 <_strtol_l.isra.0+0xe8>
 80091a6:	4628      	mov	r0, r5
 80091a8:	e79d      	b.n	80090e6 <_strtol_l.isra.0+0x16>
 80091aa:	f1b8 0f00 	cmp.w	r8, #0
 80091ae:	d000      	beq.n	80091b2 <_strtol_l.isra.0+0xe2>
 80091b0:	426d      	negs	r5, r5
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d0f7      	beq.n	80091a6 <_strtol_l.isra.0+0xd6>
 80091b6:	b10e      	cbz	r6, 80091bc <_strtol_l.isra.0+0xec>
 80091b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80091bc:	6011      	str	r1, [r2, #0]
 80091be:	e7f2      	b.n	80091a6 <_strtol_l.isra.0+0xd6>
 80091c0:	2430      	movs	r4, #48	; 0x30
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1b3      	bne.n	800912e <_strtol_l.isra.0+0x5e>
 80091c6:	2308      	movs	r3, #8
 80091c8:	e7b1      	b.n	800912e <_strtol_l.isra.0+0x5e>
 80091ca:	2c30      	cmp	r4, #48	; 0x30
 80091cc:	d0a4      	beq.n	8009118 <_strtol_l.isra.0+0x48>
 80091ce:	230a      	movs	r3, #10
 80091d0:	e7ad      	b.n	800912e <_strtol_l.isra.0+0x5e>
 80091d2:	bf00      	nop
 80091d4:	0800d061 	.word	0x0800d061

080091d8 <_strtol_r>:
 80091d8:	f7ff bf7a 	b.w	80090d0 <_strtol_l.isra.0>

080091dc <_write_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_write_r+0x20>)
 80091e0:	4604      	mov	r4, r0
 80091e2:	4608      	mov	r0, r1
 80091e4:	4611      	mov	r1, r2
 80091e6:	2200      	movs	r2, #0
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f7f9 fa09 	bl	8002602 <_write>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_write_r+0x1e>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_write_r+0x1e>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	200186e0 	.word	0x200186e0

08009200 <_close_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	; (800921c <_close_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f9 fa15 	bl	800263a <_close>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_close_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_close_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	200186e0 	.word	0x200186e0

08009220 <quorem>:
 8009220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	6903      	ldr	r3, [r0, #16]
 8009226:	690c      	ldr	r4, [r1, #16]
 8009228:	42a3      	cmp	r3, r4
 800922a:	4607      	mov	r7, r0
 800922c:	f2c0 8081 	blt.w	8009332 <quorem+0x112>
 8009230:	3c01      	subs	r4, #1
 8009232:	f101 0814 	add.w	r8, r1, #20
 8009236:	f100 0514 	add.w	r5, r0, #20
 800923a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009248:	3301      	adds	r3, #1
 800924a:	429a      	cmp	r2, r3
 800924c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009254:	fbb2 f6f3 	udiv	r6, r2, r3
 8009258:	d331      	bcc.n	80092be <quorem+0x9e>
 800925a:	f04f 0e00 	mov.w	lr, #0
 800925e:	4640      	mov	r0, r8
 8009260:	46ac      	mov	ip, r5
 8009262:	46f2      	mov	sl, lr
 8009264:	f850 2b04 	ldr.w	r2, [r0], #4
 8009268:	b293      	uxth	r3, r2
 800926a:	fb06 e303 	mla	r3, r6, r3, lr
 800926e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009272:	b29b      	uxth	r3, r3
 8009274:	ebaa 0303 	sub.w	r3, sl, r3
 8009278:	0c12      	lsrs	r2, r2, #16
 800927a:	f8dc a000 	ldr.w	sl, [ip]
 800927e:	fb06 e202 	mla	r2, r6, r2, lr
 8009282:	fa13 f38a 	uxtah	r3, r3, sl
 8009286:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800928a:	fa1f fa82 	uxth.w	sl, r2
 800928e:	f8dc 2000 	ldr.w	r2, [ip]
 8009292:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800929a:	b29b      	uxth	r3, r3
 800929c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a0:	4581      	cmp	r9, r0
 80092a2:	f84c 3b04 	str.w	r3, [ip], #4
 80092a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092aa:	d2db      	bcs.n	8009264 <quorem+0x44>
 80092ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80092b0:	b92b      	cbnz	r3, 80092be <quorem+0x9e>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	429d      	cmp	r5, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	d32e      	bcc.n	800931a <quorem+0xfa>
 80092bc:	613c      	str	r4, [r7, #16]
 80092be:	4638      	mov	r0, r7
 80092c0:	f001 fc32 	bl	800ab28 <__mcmp>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	db24      	blt.n	8009312 <quorem+0xf2>
 80092c8:	3601      	adds	r6, #1
 80092ca:	4628      	mov	r0, r5
 80092cc:	f04f 0c00 	mov.w	ip, #0
 80092d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80092d4:	f8d0 e000 	ldr.w	lr, [r0]
 80092d8:	b293      	uxth	r3, r2
 80092da:	ebac 0303 	sub.w	r3, ip, r3
 80092de:	0c12      	lsrs	r2, r2, #16
 80092e0:	fa13 f38e 	uxtah	r3, r3, lr
 80092e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092f2:	45c1      	cmp	r9, r8
 80092f4:	f840 3b04 	str.w	r3, [r0], #4
 80092f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092fc:	d2e8      	bcs.n	80092d0 <quorem+0xb0>
 80092fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009306:	b922      	cbnz	r2, 8009312 <quorem+0xf2>
 8009308:	3b04      	subs	r3, #4
 800930a:	429d      	cmp	r5, r3
 800930c:	461a      	mov	r2, r3
 800930e:	d30a      	bcc.n	8009326 <quorem+0x106>
 8009310:	613c      	str	r4, [r7, #16]
 8009312:	4630      	mov	r0, r6
 8009314:	b003      	add	sp, #12
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	3b04      	subs	r3, #4
 800931e:	2a00      	cmp	r2, #0
 8009320:	d1cc      	bne.n	80092bc <quorem+0x9c>
 8009322:	3c01      	subs	r4, #1
 8009324:	e7c7      	b.n	80092b6 <quorem+0x96>
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	3b04      	subs	r3, #4
 800932a:	2a00      	cmp	r2, #0
 800932c:	d1f0      	bne.n	8009310 <quorem+0xf0>
 800932e:	3c01      	subs	r4, #1
 8009330:	e7eb      	b.n	800930a <quorem+0xea>
 8009332:	2000      	movs	r0, #0
 8009334:	e7ee      	b.n	8009314 <quorem+0xf4>
	...

08009338 <_dtoa_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	ec59 8b10 	vmov	r8, r9, d0
 8009340:	b095      	sub	sp, #84	; 0x54
 8009342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009344:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009346:	9107      	str	r1, [sp, #28]
 8009348:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800934c:	4606      	mov	r6, r0
 800934e:	9209      	str	r2, [sp, #36]	; 0x24
 8009350:	9310      	str	r3, [sp, #64]	; 0x40
 8009352:	b975      	cbnz	r5, 8009372 <_dtoa_r+0x3a>
 8009354:	2010      	movs	r0, #16
 8009356:	f001 f8f7 	bl	800a548 <malloc>
 800935a:	4602      	mov	r2, r0
 800935c:	6270      	str	r0, [r6, #36]	; 0x24
 800935e:	b920      	cbnz	r0, 800936a <_dtoa_r+0x32>
 8009360:	4bab      	ldr	r3, [pc, #684]	; (8009610 <_dtoa_r+0x2d8>)
 8009362:	21ea      	movs	r1, #234	; 0xea
 8009364:	48ab      	ldr	r0, [pc, #684]	; (8009614 <_dtoa_r+0x2dc>)
 8009366:	f002 fc33 	bl	800bbd0 <__assert_func>
 800936a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936e:	6005      	str	r5, [r0, #0]
 8009370:	60c5      	str	r5, [r0, #12]
 8009372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009374:	6819      	ldr	r1, [r3, #0]
 8009376:	b151      	cbz	r1, 800938e <_dtoa_r+0x56>
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	604a      	str	r2, [r1, #4]
 800937c:	2301      	movs	r3, #1
 800937e:	4093      	lsls	r3, r2
 8009380:	608b      	str	r3, [r1, #8]
 8009382:	4630      	mov	r0, r6
 8009384:	f001 f948 	bl	800a618 <_Bfree>
 8009388:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	f1b9 0300 	subs.w	r3, r9, #0
 8009392:	bfbb      	ittet	lt
 8009394:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009398:	9303      	strlt	r3, [sp, #12]
 800939a:	2300      	movge	r3, #0
 800939c:	2201      	movlt	r2, #1
 800939e:	bfac      	ite	ge
 80093a0:	6023      	strge	r3, [r4, #0]
 80093a2:	6022      	strlt	r2, [r4, #0]
 80093a4:	4b9c      	ldr	r3, [pc, #624]	; (8009618 <_dtoa_r+0x2e0>)
 80093a6:	9c03      	ldr	r4, [sp, #12]
 80093a8:	43a3      	bics	r3, r4
 80093aa:	d11a      	bne.n	80093e2 <_dtoa_r+0xaa>
 80093ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80093b8:	ea53 0308 	orrs.w	r3, r3, r8
 80093bc:	f000 8512 	beq.w	8009de4 <_dtoa_r+0xaac>
 80093c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093c2:	b953      	cbnz	r3, 80093da <_dtoa_r+0xa2>
 80093c4:	4b95      	ldr	r3, [pc, #596]	; (800961c <_dtoa_r+0x2e4>)
 80093c6:	e01f      	b.n	8009408 <_dtoa_r+0xd0>
 80093c8:	4b95      	ldr	r3, [pc, #596]	; (8009620 <_dtoa_r+0x2e8>)
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	9800      	ldr	r0, [sp, #0]
 80093d4:	b015      	add	sp, #84	; 0x54
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	4b90      	ldr	r3, [pc, #576]	; (800961c <_dtoa_r+0x2e4>)
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	3303      	adds	r3, #3
 80093e0:	e7f5      	b.n	80093ce <_dtoa_r+0x96>
 80093e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80093f2:	d10b      	bne.n	800940c <_dtoa_r+0xd4>
 80093f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093f6:	2301      	movs	r3, #1
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 84ee 	beq.w	8009dde <_dtoa_r+0xaa6>
 8009402:	4888      	ldr	r0, [pc, #544]	; (8009624 <_dtoa_r+0x2ec>)
 8009404:	6018      	str	r0, [r3, #0]
 8009406:	1e43      	subs	r3, r0, #1
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	e7e2      	b.n	80093d2 <_dtoa_r+0x9a>
 800940c:	a913      	add	r1, sp, #76	; 0x4c
 800940e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009412:	aa12      	add	r2, sp, #72	; 0x48
 8009414:	4630      	mov	r0, r6
 8009416:	f001 fca7 	bl	800ad68 <__d2b>
 800941a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800941e:	4605      	mov	r5, r0
 8009420:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009422:	2900      	cmp	r1, #0
 8009424:	d047      	beq.n	80094b6 <_dtoa_r+0x17e>
 8009426:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009428:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800942c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009430:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009434:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009438:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800943c:	2400      	movs	r4, #0
 800943e:	ec43 2b16 	vmov	d6, r2, r3
 8009442:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009446:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80095f8 <_dtoa_r+0x2c0>
 800944a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800944e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009600 <_dtoa_r+0x2c8>
 8009452:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009456:	eeb0 7b46 	vmov.f64	d7, d6
 800945a:	ee06 1a90 	vmov	s13, r1
 800945e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009462:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009608 <_dtoa_r+0x2d0>
 8009466:	eea5 7b06 	vfma.f64	d7, d5, d6
 800946a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800946e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	ee16 ba90 	vmov	fp, s13
 800947a:	9411      	str	r4, [sp, #68]	; 0x44
 800947c:	d508      	bpl.n	8009490 <_dtoa_r+0x158>
 800947e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009482:	eeb4 6b47 	vcmp.f64	d6, d7
 8009486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948a:	bf18      	it	ne
 800948c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009490:	f1bb 0f16 	cmp.w	fp, #22
 8009494:	d832      	bhi.n	80094fc <_dtoa_r+0x1c4>
 8009496:	4b64      	ldr	r3, [pc, #400]	; (8009628 <_dtoa_r+0x2f0>)
 8009498:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800949c:	ed93 7b00 	vldr	d7, [r3]
 80094a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80094a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ac:	d501      	bpl.n	80094b2 <_dtoa_r+0x17a>
 80094ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094b2:	2300      	movs	r3, #0
 80094b4:	e023      	b.n	80094fe <_dtoa_r+0x1c6>
 80094b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094b8:	4401      	add	r1, r0
 80094ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80094be:	2b20      	cmp	r3, #32
 80094c0:	bfc3      	ittte	gt
 80094c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80094ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80094ce:	f1c3 0320 	rsble	r3, r3, #32
 80094d2:	bfc6      	itte	gt
 80094d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80094d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80094dc:	fa08 f303 	lslle.w	r3, r8, r3
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094e8:	3901      	subs	r1, #1
 80094ea:	ed8d 7b00 	vstr	d7, [sp]
 80094ee:	9c01      	ldr	r4, [sp, #4]
 80094f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80094f8:	2401      	movs	r4, #1
 80094fa:	e7a0      	b.n	800943e <_dtoa_r+0x106>
 80094fc:	2301      	movs	r3, #1
 80094fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009500:	1a43      	subs	r3, r0, r1
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	bf45      	ittet	mi
 8009506:	f1c3 0301 	rsbmi	r3, r3, #1
 800950a:	9305      	strmi	r3, [sp, #20]
 800950c:	2300      	movpl	r3, #0
 800950e:	2300      	movmi	r3, #0
 8009510:	9206      	str	r2, [sp, #24]
 8009512:	bf54      	ite	pl
 8009514:	9305      	strpl	r3, [sp, #20]
 8009516:	9306      	strmi	r3, [sp, #24]
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	db18      	blt.n	8009550 <_dtoa_r+0x218>
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009524:	445b      	add	r3, fp
 8009526:	9306      	str	r3, [sp, #24]
 8009528:	2300      	movs	r3, #0
 800952a:	9a07      	ldr	r2, [sp, #28]
 800952c:	2a09      	cmp	r2, #9
 800952e:	d849      	bhi.n	80095c4 <_dtoa_r+0x28c>
 8009530:	2a05      	cmp	r2, #5
 8009532:	bfc4      	itt	gt
 8009534:	3a04      	subgt	r2, #4
 8009536:	9207      	strgt	r2, [sp, #28]
 8009538:	9a07      	ldr	r2, [sp, #28]
 800953a:	f1a2 0202 	sub.w	r2, r2, #2
 800953e:	bfcc      	ite	gt
 8009540:	2400      	movgt	r4, #0
 8009542:	2401      	movle	r4, #1
 8009544:	2a03      	cmp	r2, #3
 8009546:	d848      	bhi.n	80095da <_dtoa_r+0x2a2>
 8009548:	e8df f002 	tbb	[pc, r2]
 800954c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009550:	9b05      	ldr	r3, [sp, #20]
 8009552:	2200      	movs	r2, #0
 8009554:	eba3 030b 	sub.w	r3, r3, fp
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	920e      	str	r2, [sp, #56]	; 0x38
 800955c:	f1cb 0300 	rsb	r3, fp, #0
 8009560:	e7e3      	b.n	800952a <_dtoa_r+0x1f2>
 8009562:	2200      	movs	r2, #0
 8009564:	9208      	str	r2, [sp, #32]
 8009566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009568:	2a00      	cmp	r2, #0
 800956a:	dc39      	bgt.n	80095e0 <_dtoa_r+0x2a8>
 800956c:	f04f 0a01 	mov.w	sl, #1
 8009570:	46d1      	mov	r9, sl
 8009572:	4652      	mov	r2, sl
 8009574:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009578:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800957a:	2100      	movs	r1, #0
 800957c:	6079      	str	r1, [r7, #4]
 800957e:	2004      	movs	r0, #4
 8009580:	f100 0c14 	add.w	ip, r0, #20
 8009584:	4594      	cmp	ip, r2
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	d92f      	bls.n	80095ea <_dtoa_r+0x2b2>
 800958a:	4630      	mov	r0, r6
 800958c:	930c      	str	r3, [sp, #48]	; 0x30
 800958e:	f001 f803 	bl	800a598 <_Balloc>
 8009592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009594:	9000      	str	r0, [sp, #0]
 8009596:	4602      	mov	r2, r0
 8009598:	2800      	cmp	r0, #0
 800959a:	d149      	bne.n	8009630 <_dtoa_r+0x2f8>
 800959c:	4b23      	ldr	r3, [pc, #140]	; (800962c <_dtoa_r+0x2f4>)
 800959e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095a2:	e6df      	b.n	8009364 <_dtoa_r+0x2c>
 80095a4:	2201      	movs	r2, #1
 80095a6:	e7dd      	b.n	8009564 <_dtoa_r+0x22c>
 80095a8:	2200      	movs	r2, #0
 80095aa:	9208      	str	r2, [sp, #32]
 80095ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ae:	eb0b 0a02 	add.w	sl, fp, r2
 80095b2:	f10a 0901 	add.w	r9, sl, #1
 80095b6:	464a      	mov	r2, r9
 80095b8:	2a01      	cmp	r2, #1
 80095ba:	bfb8      	it	lt
 80095bc:	2201      	movlt	r2, #1
 80095be:	e7db      	b.n	8009578 <_dtoa_r+0x240>
 80095c0:	2201      	movs	r2, #1
 80095c2:	e7f2      	b.n	80095aa <_dtoa_r+0x272>
 80095c4:	2401      	movs	r4, #1
 80095c6:	2200      	movs	r2, #0
 80095c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80095cc:	f04f 3aff 	mov.w	sl, #4294967295
 80095d0:	2100      	movs	r1, #0
 80095d2:	46d1      	mov	r9, sl
 80095d4:	2212      	movs	r2, #18
 80095d6:	9109      	str	r1, [sp, #36]	; 0x24
 80095d8:	e7ce      	b.n	8009578 <_dtoa_r+0x240>
 80095da:	2201      	movs	r2, #1
 80095dc:	9208      	str	r2, [sp, #32]
 80095de:	e7f5      	b.n	80095cc <_dtoa_r+0x294>
 80095e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80095e4:	46d1      	mov	r9, sl
 80095e6:	4652      	mov	r2, sl
 80095e8:	e7c6      	b.n	8009578 <_dtoa_r+0x240>
 80095ea:	3101      	adds	r1, #1
 80095ec:	6079      	str	r1, [r7, #4]
 80095ee:	0040      	lsls	r0, r0, #1
 80095f0:	e7c6      	b.n	8009580 <_dtoa_r+0x248>
 80095f2:	bf00      	nop
 80095f4:	f3af 8000 	nop.w
 80095f8:	636f4361 	.word	0x636f4361
 80095fc:	3fd287a7 	.word	0x3fd287a7
 8009600:	8b60c8b3 	.word	0x8b60c8b3
 8009604:	3fc68a28 	.word	0x3fc68a28
 8009608:	509f79fb 	.word	0x509f79fb
 800960c:	3fd34413 	.word	0x3fd34413
 8009610:	0800d16e 	.word	0x0800d16e
 8009614:	0800d185 	.word	0x0800d185
 8009618:	7ff00000 	.word	0x7ff00000
 800961c:	0800d16a 	.word	0x0800d16a
 8009620:	0800d161 	.word	0x0800d161
 8009624:	0800d3ea 	.word	0x0800d3ea
 8009628:	0800d300 	.word	0x0800d300
 800962c:	0800d1e4 	.word	0x0800d1e4
 8009630:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009632:	9900      	ldr	r1, [sp, #0]
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	f1b9 0f0e 	cmp.w	r9, #14
 800963a:	d872      	bhi.n	8009722 <_dtoa_r+0x3ea>
 800963c:	2c00      	cmp	r4, #0
 800963e:	d070      	beq.n	8009722 <_dtoa_r+0x3ea>
 8009640:	f1bb 0f00 	cmp.w	fp, #0
 8009644:	f340 80a6 	ble.w	8009794 <_dtoa_r+0x45c>
 8009648:	49ca      	ldr	r1, [pc, #808]	; (8009974 <_dtoa_r+0x63c>)
 800964a:	f00b 020f 	and.w	r2, fp, #15
 800964e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009652:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009656:	ed92 7b00 	vldr	d7, [r2]
 800965a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800965e:	f000 808d 	beq.w	800977c <_dtoa_r+0x444>
 8009662:	4ac5      	ldr	r2, [pc, #788]	; (8009978 <_dtoa_r+0x640>)
 8009664:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009668:	ed92 6b08 	vldr	d6, [r2, #32]
 800966c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009670:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009674:	f001 010f 	and.w	r1, r1, #15
 8009678:	2203      	movs	r2, #3
 800967a:	48bf      	ldr	r0, [pc, #764]	; (8009978 <_dtoa_r+0x640>)
 800967c:	2900      	cmp	r1, #0
 800967e:	d17f      	bne.n	8009780 <_dtoa_r+0x448>
 8009680:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009684:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800968c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800968e:	2900      	cmp	r1, #0
 8009690:	f000 80b2 	beq.w	80097f8 <_dtoa_r+0x4c0>
 8009694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800969c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	f140 80a8 	bpl.w	80097f8 <_dtoa_r+0x4c0>
 80096a8:	f1b9 0f00 	cmp.w	r9, #0
 80096ac:	f000 80a4 	beq.w	80097f8 <_dtoa_r+0x4c0>
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	dd31      	ble.n	800971a <_dtoa_r+0x3e2>
 80096b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80096ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80096c6:	3201      	adds	r2, #1
 80096c8:	4650      	mov	r0, sl
 80096ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80096d2:	ee07 2a90 	vmov	s15, r2
 80096d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80096da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80096de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80096e2:	9c03      	ldr	r4, [sp, #12]
 80096e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80096e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 8086 	bne.w	80097fe <_dtoa_r+0x4c6>
 80096f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096fa:	ec42 1b17 	vmov	d7, r1, r2
 80096fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009706:	f300 8272 	bgt.w	8009bee <_dtoa_r+0x8b6>
 800970a:	eeb1 7b47 	vneg.f64	d7, d7
 800970e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009716:	f100 8267 	bmi.w	8009be8 <_dtoa_r+0x8b0>
 800971a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800971e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009724:	2a00      	cmp	r2, #0
 8009726:	f2c0 8129 	blt.w	800997c <_dtoa_r+0x644>
 800972a:	f1bb 0f0e 	cmp.w	fp, #14
 800972e:	f300 8125 	bgt.w	800997c <_dtoa_r+0x644>
 8009732:	4b90      	ldr	r3, [pc, #576]	; (8009974 <_dtoa_r+0x63c>)
 8009734:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009738:	ed93 6b00 	vldr	d6, [r3]
 800973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	f280 80c3 	bge.w	80098ca <_dtoa_r+0x592>
 8009744:	f1b9 0f00 	cmp.w	r9, #0
 8009748:	f300 80bf 	bgt.w	80098ca <_dtoa_r+0x592>
 800974c:	f040 824c 	bne.w	8009be8 <_dtoa_r+0x8b0>
 8009750:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009758:	ed9d 7b02 	vldr	d7, [sp, #8]
 800975c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	464c      	mov	r4, r9
 8009766:	464f      	mov	r7, r9
 8009768:	f280 8222 	bge.w	8009bb0 <_dtoa_r+0x878>
 800976c:	f8dd 8000 	ldr.w	r8, [sp]
 8009770:	2331      	movs	r3, #49	; 0x31
 8009772:	f808 3b01 	strb.w	r3, [r8], #1
 8009776:	f10b 0b01 	add.w	fp, fp, #1
 800977a:	e21e      	b.n	8009bba <_dtoa_r+0x882>
 800977c:	2202      	movs	r2, #2
 800977e:	e77c      	b.n	800967a <_dtoa_r+0x342>
 8009780:	07cc      	lsls	r4, r1, #31
 8009782:	d504      	bpl.n	800978e <_dtoa_r+0x456>
 8009784:	ed90 6b00 	vldr	d6, [r0]
 8009788:	3201      	adds	r2, #1
 800978a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800978e:	1049      	asrs	r1, r1, #1
 8009790:	3008      	adds	r0, #8
 8009792:	e773      	b.n	800967c <_dtoa_r+0x344>
 8009794:	d02e      	beq.n	80097f4 <_dtoa_r+0x4bc>
 8009796:	f1cb 0100 	rsb	r1, fp, #0
 800979a:	4a76      	ldr	r2, [pc, #472]	; (8009974 <_dtoa_r+0x63c>)
 800979c:	f001 000f 	and.w	r0, r1, #15
 80097a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80097a4:	ed92 7b00 	vldr	d7, [r2]
 80097a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80097ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80097b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80097bc:	486e      	ldr	r0, [pc, #440]	; (8009978 <_dtoa_r+0x640>)
 80097be:	1109      	asrs	r1, r1, #4
 80097c0:	2400      	movs	r4, #0
 80097c2:	2202      	movs	r2, #2
 80097c4:	b939      	cbnz	r1, 80097d6 <_dtoa_r+0x49e>
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	f43f af60 	beq.w	800968c <_dtoa_r+0x354>
 80097cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d4:	e75a      	b.n	800968c <_dtoa_r+0x354>
 80097d6:	07cf      	lsls	r7, r1, #31
 80097d8:	d509      	bpl.n	80097ee <_dtoa_r+0x4b6>
 80097da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80097de:	ed90 7b00 	vldr	d7, [r0]
 80097e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097ea:	3201      	adds	r2, #1
 80097ec:	2401      	movs	r4, #1
 80097ee:	1049      	asrs	r1, r1, #1
 80097f0:	3008      	adds	r0, #8
 80097f2:	e7e7      	b.n	80097c4 <_dtoa_r+0x48c>
 80097f4:	2202      	movs	r2, #2
 80097f6:	e749      	b.n	800968c <_dtoa_r+0x354>
 80097f8:	465f      	mov	r7, fp
 80097fa:	4648      	mov	r0, r9
 80097fc:	e765      	b.n	80096ca <_dtoa_r+0x392>
 80097fe:	ec42 1b17 	vmov	d7, r1, r2
 8009802:	4a5c      	ldr	r2, [pc, #368]	; (8009974 <_dtoa_r+0x63c>)
 8009804:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009808:	ed12 4b02 	vldr	d4, [r2, #-8]
 800980c:	9a00      	ldr	r2, [sp, #0]
 800980e:	1814      	adds	r4, r2, r0
 8009810:	9a08      	ldr	r2, [sp, #32]
 8009812:	b352      	cbz	r2, 800986a <_dtoa_r+0x532>
 8009814:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009818:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800981c:	f8dd 8000 	ldr.w	r8, [sp]
 8009820:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009824:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009828:	ee35 7b47 	vsub.f64	d7, d5, d7
 800982c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009830:	ee14 2a90 	vmov	r2, s9
 8009834:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009838:	3230      	adds	r2, #48	; 0x30
 800983a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800983e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	f808 2b01 	strb.w	r2, [r8], #1
 800984a:	d439      	bmi.n	80098c0 <_dtoa_r+0x588>
 800984c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009850:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	d472      	bmi.n	8009940 <_dtoa_r+0x608>
 800985a:	45a0      	cmp	r8, r4
 800985c:	f43f af5d 	beq.w	800971a <_dtoa_r+0x3e2>
 8009860:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009864:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009868:	e7e0      	b.n	800982c <_dtoa_r+0x4f4>
 800986a:	f8dd 8000 	ldr.w	r8, [sp]
 800986e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009872:	4621      	mov	r1, r4
 8009874:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009878:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800987c:	ee14 2a90 	vmov	r2, s9
 8009880:	3230      	adds	r2, #48	; 0x30
 8009882:	f808 2b01 	strb.w	r2, [r8], #1
 8009886:	45a0      	cmp	r8, r4
 8009888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800988c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009890:	d118      	bne.n	80098c4 <_dtoa_r+0x58c>
 8009892:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009896:	ee37 4b05 	vadd.f64	d4, d7, d5
 800989a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	dc4d      	bgt.n	8009940 <_dtoa_r+0x608>
 80098a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	f57f af33 	bpl.w	800971a <_dtoa_r+0x3e2>
 80098b4:	4688      	mov	r8, r1
 80098b6:	3901      	subs	r1, #1
 80098b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80098bc:	2b30      	cmp	r3, #48	; 0x30
 80098be:	d0f9      	beq.n	80098b4 <_dtoa_r+0x57c>
 80098c0:	46bb      	mov	fp, r7
 80098c2:	e02a      	b.n	800991a <_dtoa_r+0x5e2>
 80098c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80098c8:	e7d6      	b.n	8009878 <_dtoa_r+0x540>
 80098ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80098d2:	f8dd 8000 	ldr.w	r8, [sp]
 80098d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80098da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80098de:	ee15 3a10 	vmov	r3, s10
 80098e2:	3330      	adds	r3, #48	; 0x30
 80098e4:	f808 3b01 	strb.w	r3, [r8], #1
 80098e8:	9b00      	ldr	r3, [sp, #0]
 80098ea:	eba8 0303 	sub.w	r3, r8, r3
 80098ee:	4599      	cmp	r9, r3
 80098f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80098f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80098f8:	d133      	bne.n	8009962 <_dtoa_r+0x62a>
 80098fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009906:	dc1a      	bgt.n	800993e <_dtoa_r+0x606>
 8009908:	eeb4 7b46 	vcmp.f64	d7, d6
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	d103      	bne.n	800991a <_dtoa_r+0x5e2>
 8009912:	ee15 3a10 	vmov	r3, s10
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d411      	bmi.n	800993e <_dtoa_r+0x606>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f000 fe7b 	bl	800a618 <_Bfree>
 8009922:	2300      	movs	r3, #0
 8009924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009926:	f888 3000 	strb.w	r3, [r8]
 800992a:	f10b 0301 	add.w	r3, fp, #1
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009932:	2b00      	cmp	r3, #0
 8009934:	f43f ad4d 	beq.w	80093d2 <_dtoa_r+0x9a>
 8009938:	f8c3 8000 	str.w	r8, [r3]
 800993c:	e549      	b.n	80093d2 <_dtoa_r+0x9a>
 800993e:	465f      	mov	r7, fp
 8009940:	4643      	mov	r3, r8
 8009942:	4698      	mov	r8, r3
 8009944:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009948:	2a39      	cmp	r2, #57	; 0x39
 800994a:	d106      	bne.n	800995a <_dtoa_r+0x622>
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d1f7      	bne.n	8009942 <_dtoa_r+0x60a>
 8009952:	9900      	ldr	r1, [sp, #0]
 8009954:	2230      	movs	r2, #48	; 0x30
 8009956:	3701      	adds	r7, #1
 8009958:	700a      	strb	r2, [r1, #0]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	3201      	adds	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e7ae      	b.n	80098c0 <_dtoa_r+0x588>
 8009962:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800996a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996e:	d1b2      	bne.n	80098d6 <_dtoa_r+0x59e>
 8009970:	e7d3      	b.n	800991a <_dtoa_r+0x5e2>
 8009972:	bf00      	nop
 8009974:	0800d300 	.word	0x0800d300
 8009978:	0800d2d8 	.word	0x0800d2d8
 800997c:	9908      	ldr	r1, [sp, #32]
 800997e:	2900      	cmp	r1, #0
 8009980:	f000 80d1 	beq.w	8009b26 <_dtoa_r+0x7ee>
 8009984:	9907      	ldr	r1, [sp, #28]
 8009986:	2901      	cmp	r1, #1
 8009988:	f300 80b4 	bgt.w	8009af4 <_dtoa_r+0x7bc>
 800998c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800998e:	2900      	cmp	r1, #0
 8009990:	f000 80ac 	beq.w	8009aec <_dtoa_r+0x7b4>
 8009994:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009998:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800999c:	461c      	mov	r4, r3
 800999e:	930a      	str	r3, [sp, #40]	; 0x28
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	9b06      	ldr	r3, [sp, #24]
 80099a8:	2101      	movs	r1, #1
 80099aa:	4413      	add	r3, r2
 80099ac:	4630      	mov	r0, r6
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	f000 ff38 	bl	800a824 <__i2b>
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	4607      	mov	r7, r0
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	dd0d      	ble.n	80099da <_dtoa_r+0x6a2>
 80099be:	9a06      	ldr	r2, [sp, #24]
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	dd0a      	ble.n	80099da <_dtoa_r+0x6a2>
 80099c4:	4542      	cmp	r2, r8
 80099c6:	9905      	ldr	r1, [sp, #20]
 80099c8:	bfa8      	it	ge
 80099ca:	4642      	movge	r2, r8
 80099cc:	1a89      	subs	r1, r1, r2
 80099ce:	9105      	str	r1, [sp, #20]
 80099d0:	9906      	ldr	r1, [sp, #24]
 80099d2:	eba8 0802 	sub.w	r8, r8, r2
 80099d6:	1a8a      	subs	r2, r1, r2
 80099d8:	9206      	str	r2, [sp, #24]
 80099da:	b303      	cbz	r3, 8009a1e <_dtoa_r+0x6e6>
 80099dc:	9a08      	ldr	r2, [sp, #32]
 80099de:	2a00      	cmp	r2, #0
 80099e0:	f000 80a6 	beq.w	8009b30 <_dtoa_r+0x7f8>
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	dd13      	ble.n	8009a10 <_dtoa_r+0x6d8>
 80099e8:	4639      	mov	r1, r7
 80099ea:	4622      	mov	r2, r4
 80099ec:	4630      	mov	r0, r6
 80099ee:	930c      	str	r3, [sp, #48]	; 0x30
 80099f0:	f000 ffd4 	bl	800a99c <__pow5mult>
 80099f4:	462a      	mov	r2, r5
 80099f6:	4601      	mov	r1, r0
 80099f8:	4607      	mov	r7, r0
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 ff28 	bl	800a850 <__multiply>
 8009a00:	4629      	mov	r1, r5
 8009a02:	900a      	str	r0, [sp, #40]	; 0x28
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 fe07 	bl	800a618 <_Bfree>
 8009a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a0e:	4615      	mov	r5, r2
 8009a10:	1b1a      	subs	r2, r3, r4
 8009a12:	d004      	beq.n	8009a1e <_dtoa_r+0x6e6>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 ffc0 	bl	800a99c <__pow5mult>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 feff 	bl	800a824 <__i2b>
 8009a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	f340 8082 	ble.w	8009b34 <_dtoa_r+0x7fc>
 8009a30:	461a      	mov	r2, r3
 8009a32:	4601      	mov	r1, r0
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 ffb1 	bl	800a99c <__pow5mult>
 8009a3a:	9b07      	ldr	r3, [sp, #28]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	4604      	mov	r4, r0
 8009a40:	dd7b      	ble.n	8009b3a <_dtoa_r+0x802>
 8009a42:	2300      	movs	r3, #0
 8009a44:	930a      	str	r3, [sp, #40]	; 0x28
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a4c:	6910      	ldr	r0, [r2, #16]
 8009a4e:	f000 fe99 	bl	800a784 <__hi0bits>
 8009a52:	f1c0 0020 	rsb	r0, r0, #32
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	4418      	add	r0, r3
 8009a5a:	f010 001f 	ands.w	r0, r0, #31
 8009a5e:	f000 808d 	beq.w	8009b7c <_dtoa_r+0x844>
 8009a62:	f1c0 0220 	rsb	r2, r0, #32
 8009a66:	2a04      	cmp	r2, #4
 8009a68:	f340 8086 	ble.w	8009b78 <_dtoa_r+0x840>
 8009a6c:	f1c0 001c 	rsb	r0, r0, #28
 8009a70:	9b05      	ldr	r3, [sp, #20]
 8009a72:	4403      	add	r3, r0
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4403      	add	r3, r0
 8009a7a:	4480      	add	r8, r0
 8009a7c:	9306      	str	r3, [sp, #24]
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x758>
 8009a84:	4629      	mov	r1, r5
 8009a86:	461a      	mov	r2, r3
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 ffe1 	bl	800aa50 <__lshift>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dd05      	ble.n	8009aa2 <_dtoa_r+0x76a>
 8009a96:	4621      	mov	r1, r4
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 ffd8 	bl	800aa50 <__lshift>
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d06b      	beq.n	8009b80 <_dtoa_r+0x848>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f001 f83c 	bl	800ab28 <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	da65      	bge.n	8009b80 <_dtoa_r+0x848>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	220a      	movs	r2, #10
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 fdce 	bl	800a65c <__multadd>
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8192 	beq.w	8009df2 <_dtoa_r+0xaba>
 8009ace:	4639      	mov	r1, r7
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 fdc1 	bl	800a65c <__multadd>
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	4607      	mov	r7, r0
 8009ae0:	f300 808e 	bgt.w	8009c00 <_dtoa_r+0x8c8>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	dc51      	bgt.n	8009b8e <_dtoa_r+0x856>
 8009aea:	e089      	b.n	8009c00 <_dtoa_r+0x8c8>
 8009aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009af2:	e751      	b.n	8009998 <_dtoa_r+0x660>
 8009af4:	f109 34ff 	add.w	r4, r9, #4294967295
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	bfbf      	itttt	lt
 8009afc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009afe:	1ae3      	sublt	r3, r4, r3
 8009b00:	18d2      	addlt	r2, r2, r3
 8009b02:	4613      	movlt	r3, r2
 8009b04:	bfb7      	itett	lt
 8009b06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b08:	1b1c      	subge	r4, r3, r4
 8009b0a:	4623      	movlt	r3, r4
 8009b0c:	2400      	movlt	r4, #0
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	bfb5      	itete	lt
 8009b14:	9a05      	ldrlt	r2, [sp, #20]
 8009b16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009b1a:	eba2 0809 	sublt.w	r8, r2, r9
 8009b1e:	464a      	movge	r2, r9
 8009b20:	bfb8      	it	lt
 8009b22:	2200      	movlt	r2, #0
 8009b24:	e73b      	b.n	800999e <_dtoa_r+0x666>
 8009b26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009b2a:	9f08      	ldr	r7, [sp, #32]
 8009b2c:	461c      	mov	r4, r3
 8009b2e:	e743      	b.n	80099b8 <_dtoa_r+0x680>
 8009b30:	461a      	mov	r2, r3
 8009b32:	e76f      	b.n	8009a14 <_dtoa_r+0x6dc>
 8009b34:	9b07      	ldr	r3, [sp, #28]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	dc18      	bgt.n	8009b6c <_dtoa_r+0x834>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	b9b3      	cbnz	r3, 8009b6c <_dtoa_r+0x834>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009b44:	b9a2      	cbnz	r2, 8009b70 <_dtoa_r+0x838>
 8009b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b4a:	0d12      	lsrs	r2, r2, #20
 8009b4c:	0512      	lsls	r2, r2, #20
 8009b4e:	b18a      	cbz	r2, 8009b74 <_dtoa_r+0x83c>
 8009b50:	9b05      	ldr	r3, [sp, #20]
 8009b52:	3301      	adds	r3, #1
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f af6f 	bne.w	8009a46 <_dtoa_r+0x70e>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	e774      	b.n	8009a56 <_dtoa_r+0x71e>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e7f6      	b.n	8009b5e <_dtoa_r+0x826>
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	e7f4      	b.n	8009b5e <_dtoa_r+0x826>
 8009b74:	920a      	str	r2, [sp, #40]	; 0x28
 8009b76:	e7f3      	b.n	8009b60 <_dtoa_r+0x828>
 8009b78:	d081      	beq.n	8009a7e <_dtoa_r+0x746>
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	301c      	adds	r0, #28
 8009b7e:	e777      	b.n	8009a70 <_dtoa_r+0x738>
 8009b80:	f1b9 0f00 	cmp.w	r9, #0
 8009b84:	dc37      	bgt.n	8009bf6 <_dtoa_r+0x8be>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	dd34      	ble.n	8009bf6 <_dtoa_r+0x8be>
 8009b8c:	46ca      	mov	sl, r9
 8009b8e:	f1ba 0f00 	cmp.w	sl, #0
 8009b92:	d10d      	bne.n	8009bb0 <_dtoa_r+0x878>
 8009b94:	4621      	mov	r1, r4
 8009b96:	4653      	mov	r3, sl
 8009b98:	2205      	movs	r2, #5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 fd5e 	bl	800a65c <__multadd>
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 ffbf 	bl	800ab28 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	f73f adde 	bgt.w	800976c <_dtoa_r+0x434>
 8009bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb2:	f8dd 8000 	ldr.w	r8, [sp]
 8009bb6:	ea6f 0b03 	mvn.w	fp, r3
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 fd29 	bl	800a618 <_Bfree>
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	f43f aea7 	beq.w	800991a <_dtoa_r+0x5e2>
 8009bcc:	f1b9 0f00 	cmp.w	r9, #0
 8009bd0:	d005      	beq.n	8009bde <_dtoa_r+0x8a6>
 8009bd2:	45b9      	cmp	r9, r7
 8009bd4:	d003      	beq.n	8009bde <_dtoa_r+0x8a6>
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 fd1d 	bl	800a618 <_Bfree>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 fd19 	bl	800a618 <_Bfree>
 8009be6:	e698      	b.n	800991a <_dtoa_r+0x5e2>
 8009be8:	2400      	movs	r4, #0
 8009bea:	4627      	mov	r7, r4
 8009bec:	e7e0      	b.n	8009bb0 <_dtoa_r+0x878>
 8009bee:	46bb      	mov	fp, r7
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	e5ba      	b.n	800976c <_dtoa_r+0x434>
 8009bf6:	9b08      	ldr	r3, [sp, #32]
 8009bf8:	46ca      	mov	sl, r9
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 8100 	beq.w	8009e00 <_dtoa_r+0xac8>
 8009c00:	f1b8 0f00 	cmp.w	r8, #0
 8009c04:	dd05      	ble.n	8009c12 <_dtoa_r+0x8da>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4642      	mov	r2, r8
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 ff20 	bl	800aa50 <__lshift>
 8009c10:	4607      	mov	r7, r0
 8009c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d05d      	beq.n	8009cd4 <_dtoa_r+0x99c>
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f000 fcbc 	bl	800a598 <_Balloc>
 8009c20:	4680      	mov	r8, r0
 8009c22:	b928      	cbnz	r0, 8009c30 <_dtoa_r+0x8f8>
 8009c24:	4b82      	ldr	r3, [pc, #520]	; (8009e30 <_dtoa_r+0xaf8>)
 8009c26:	4602      	mov	r2, r0
 8009c28:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c2c:	f7ff bb9a 	b.w	8009364 <_dtoa_r+0x2c>
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	3202      	adds	r2, #2
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	f107 010c 	add.w	r1, r7, #12
 8009c3a:	300c      	adds	r0, #12
 8009c3c:	f000 fc9e 	bl	800a57c <memcpy>
 8009c40:	2201      	movs	r2, #1
 8009c42:	4641      	mov	r1, r8
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 ff03 	bl	800aa50 <__lshift>
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	4453      	add	r3, sl
 8009c54:	9309      	str	r3, [sp, #36]	; 0x24
 8009c56:	9b02      	ldr	r3, [sp, #8]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	46b9      	mov	r9, r7
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	4607      	mov	r7, r0
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	4621      	mov	r1, r4
 8009c66:	3b01      	subs	r3, #1
 8009c68:	4628      	mov	r0, r5
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	f7ff fad8 	bl	8009220 <quorem>
 8009c70:	4603      	mov	r3, r0
 8009c72:	3330      	adds	r3, #48	; 0x30
 8009c74:	9006      	str	r0, [sp, #24]
 8009c76:	4649      	mov	r1, r9
 8009c78:	4628      	mov	r0, r5
 8009c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c7c:	f000 ff54 	bl	800ab28 <__mcmp>
 8009c80:	463a      	mov	r2, r7
 8009c82:	4682      	mov	sl, r0
 8009c84:	4621      	mov	r1, r4
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 ff6a 	bl	800ab60 <__mdiff>
 8009c8c:	68c2      	ldr	r2, [r0, #12]
 8009c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c90:	4680      	mov	r8, r0
 8009c92:	bb0a      	cbnz	r2, 8009cd8 <_dtoa_r+0x9a0>
 8009c94:	4601      	mov	r1, r0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 ff46 	bl	800ab28 <__mcmp>
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	920e      	str	r2, [sp, #56]	; 0x38
 8009ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca8:	f000 fcb6 	bl	800a618 <_Bfree>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009cb4:	ea43 0102 	orr.w	r1, r3, r2
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbe:	d10d      	bne.n	8009cdc <_dtoa_r+0x9a4>
 8009cc0:	2b39      	cmp	r3, #57	; 0x39
 8009cc2:	d029      	beq.n	8009d18 <_dtoa_r+0x9e0>
 8009cc4:	f1ba 0f00 	cmp.w	sl, #0
 8009cc8:	dd01      	ble.n	8009cce <_dtoa_r+0x996>
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	3331      	adds	r3, #49	; 0x31
 8009cce:	9a02      	ldr	r2, [sp, #8]
 8009cd0:	7013      	strb	r3, [r2, #0]
 8009cd2:	e774      	b.n	8009bbe <_dtoa_r+0x886>
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	e7b8      	b.n	8009c4a <_dtoa_r+0x912>
 8009cd8:	2201      	movs	r2, #1
 8009cda:	e7e1      	b.n	8009ca0 <_dtoa_r+0x968>
 8009cdc:	f1ba 0f00 	cmp.w	sl, #0
 8009ce0:	db06      	blt.n	8009cf0 <_dtoa_r+0x9b8>
 8009ce2:	9907      	ldr	r1, [sp, #28]
 8009ce4:	ea41 0a0a 	orr.w	sl, r1, sl
 8009ce8:	9908      	ldr	r1, [sp, #32]
 8009cea:	ea5a 0101 	orrs.w	r1, sl, r1
 8009cee:	d120      	bne.n	8009d32 <_dtoa_r+0x9fa>
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	ddec      	ble.n	8009cce <_dtoa_r+0x996>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	f000 fea8 	bl	800aa50 <__lshift>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4605      	mov	r5, r0
 8009d04:	f000 ff10 	bl	800ab28 <__mcmp>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	9b05      	ldr	r3, [sp, #20]
 8009d0c:	dc02      	bgt.n	8009d14 <_dtoa_r+0x9dc>
 8009d0e:	d1de      	bne.n	8009cce <_dtoa_r+0x996>
 8009d10:	07da      	lsls	r2, r3, #31
 8009d12:	d5dc      	bpl.n	8009cce <_dtoa_r+0x996>
 8009d14:	2b39      	cmp	r3, #57	; 0x39
 8009d16:	d1d8      	bne.n	8009cca <_dtoa_r+0x992>
 8009d18:	9a02      	ldr	r2, [sp, #8]
 8009d1a:	2339      	movs	r3, #57	; 0x39
 8009d1c:	7013      	strb	r3, [r2, #0]
 8009d1e:	4643      	mov	r3, r8
 8009d20:	4698      	mov	r8, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009d28:	2a39      	cmp	r2, #57	; 0x39
 8009d2a:	d051      	beq.n	8009dd0 <_dtoa_r+0xa98>
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e745      	b.n	8009bbe <_dtoa_r+0x886>
 8009d32:	2a00      	cmp	r2, #0
 8009d34:	dd03      	ble.n	8009d3e <_dtoa_r+0xa06>
 8009d36:	2b39      	cmp	r3, #57	; 0x39
 8009d38:	d0ee      	beq.n	8009d18 <_dtoa_r+0x9e0>
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	e7c7      	b.n	8009cce <_dtoa_r+0x996>
 8009d3e:	9a05      	ldr	r2, [sp, #20]
 8009d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d46:	428a      	cmp	r2, r1
 8009d48:	d02b      	beq.n	8009da2 <_dtoa_r+0xa6a>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	220a      	movs	r2, #10
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 fc83 	bl	800a65c <__multadd>
 8009d56:	45b9      	cmp	r9, r7
 8009d58:	4605      	mov	r5, r0
 8009d5a:	f04f 0300 	mov.w	r3, #0
 8009d5e:	f04f 020a 	mov.w	r2, #10
 8009d62:	4649      	mov	r1, r9
 8009d64:	4630      	mov	r0, r6
 8009d66:	d107      	bne.n	8009d78 <_dtoa_r+0xa40>
 8009d68:	f000 fc78 	bl	800a65c <__multadd>
 8009d6c:	4681      	mov	r9, r0
 8009d6e:	4607      	mov	r7, r0
 8009d70:	9b05      	ldr	r3, [sp, #20]
 8009d72:	3301      	adds	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	e774      	b.n	8009c62 <_dtoa_r+0x92a>
 8009d78:	f000 fc70 	bl	800a65c <__multadd>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4681      	mov	r9, r0
 8009d80:	2300      	movs	r3, #0
 8009d82:	220a      	movs	r2, #10
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 fc69 	bl	800a65c <__multadd>
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	e7f0      	b.n	8009d70 <_dtoa_r+0xa38>
 8009d8e:	f1ba 0f00 	cmp.w	sl, #0
 8009d92:	9a00      	ldr	r2, [sp, #0]
 8009d94:	bfcc      	ite	gt
 8009d96:	46d0      	movgt	r8, sl
 8009d98:	f04f 0801 	movle.w	r8, #1
 8009d9c:	4490      	add	r8, r2
 8009d9e:	f04f 0900 	mov.w	r9, #0
 8009da2:	4629      	mov	r1, r5
 8009da4:	2201      	movs	r2, #1
 8009da6:	4630      	mov	r0, r6
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	f000 fe51 	bl	800aa50 <__lshift>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4605      	mov	r5, r0
 8009db2:	f000 feb9 	bl	800ab28 <__mcmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	dcb1      	bgt.n	8009d1e <_dtoa_r+0x9e6>
 8009dba:	d102      	bne.n	8009dc2 <_dtoa_r+0xa8a>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	07db      	lsls	r3, r3, #31
 8009dc0:	d4ad      	bmi.n	8009d1e <_dtoa_r+0x9e6>
 8009dc2:	4643      	mov	r3, r8
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dca:	2a30      	cmp	r2, #48	; 0x30
 8009dcc:	d0fa      	beq.n	8009dc4 <_dtoa_r+0xa8c>
 8009dce:	e6f6      	b.n	8009bbe <_dtoa_r+0x886>
 8009dd0:	9a00      	ldr	r2, [sp, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d1a4      	bne.n	8009d20 <_dtoa_r+0x9e8>
 8009dd6:	f10b 0b01 	add.w	fp, fp, #1
 8009dda:	2331      	movs	r3, #49	; 0x31
 8009ddc:	e778      	b.n	8009cd0 <_dtoa_r+0x998>
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <_dtoa_r+0xafc>)
 8009de0:	f7ff bb12 	b.w	8009408 <_dtoa_r+0xd0>
 8009de4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f47f aaee 	bne.w	80093c8 <_dtoa_r+0x90>
 8009dec:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <_dtoa_r+0xb00>)
 8009dee:	f7ff bb0b 	b.w	8009408 <_dtoa_r+0xd0>
 8009df2:	f1ba 0f00 	cmp.w	sl, #0
 8009df6:	dc03      	bgt.n	8009e00 <_dtoa_r+0xac8>
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	f73f aec7 	bgt.w	8009b8e <_dtoa_r+0x856>
 8009e00:	f8dd 8000 	ldr.w	r8, [sp]
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff fa0a 	bl	8009220 <quorem>
 8009e0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e10:	f808 3b01 	strb.w	r3, [r8], #1
 8009e14:	9a00      	ldr	r2, [sp, #0]
 8009e16:	eba8 0202 	sub.w	r2, r8, r2
 8009e1a:	4592      	cmp	sl, r2
 8009e1c:	ddb7      	ble.n	8009d8e <_dtoa_r+0xa56>
 8009e1e:	4629      	mov	r1, r5
 8009e20:	2300      	movs	r3, #0
 8009e22:	220a      	movs	r2, #10
 8009e24:	4630      	mov	r0, r6
 8009e26:	f000 fc19 	bl	800a65c <__multadd>
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	e7ea      	b.n	8009e04 <_dtoa_r+0xacc>
 8009e2e:	bf00      	nop
 8009e30:	0800d1e4 	.word	0x0800d1e4
 8009e34:	0800d3e9 	.word	0x0800d3e9
 8009e38:	0800d161 	.word	0x0800d161

08009e3c <rshift>:
 8009e3c:	6903      	ldr	r3, [r0, #16]
 8009e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e4a:	f100 0414 	add.w	r4, r0, #20
 8009e4e:	dd45      	ble.n	8009edc <rshift+0xa0>
 8009e50:	f011 011f 	ands.w	r1, r1, #31
 8009e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e5c:	d10c      	bne.n	8009e78 <rshift+0x3c>
 8009e5e:	f100 0710 	add.w	r7, r0, #16
 8009e62:	4629      	mov	r1, r5
 8009e64:	42b1      	cmp	r1, r6
 8009e66:	d334      	bcc.n	8009ed2 <rshift+0x96>
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	1eea      	subs	r2, r5, #3
 8009e6e:	4296      	cmp	r6, r2
 8009e70:	bf38      	it	cc
 8009e72:	2300      	movcc	r3, #0
 8009e74:	4423      	add	r3, r4
 8009e76:	e015      	b.n	8009ea4 <rshift+0x68>
 8009e78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e7c:	f1c1 0820 	rsb	r8, r1, #32
 8009e80:	40cf      	lsrs	r7, r1
 8009e82:	f105 0e04 	add.w	lr, r5, #4
 8009e86:	46a1      	mov	r9, r4
 8009e88:	4576      	cmp	r6, lr
 8009e8a:	46f4      	mov	ip, lr
 8009e8c:	d815      	bhi.n	8009eba <rshift+0x7e>
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	009a      	lsls	r2, r3, #2
 8009e92:	3a04      	subs	r2, #4
 8009e94:	3501      	adds	r5, #1
 8009e96:	42ae      	cmp	r6, r5
 8009e98:	bf38      	it	cc
 8009e9a:	2200      	movcc	r2, #0
 8009e9c:	18a3      	adds	r3, r4, r2
 8009e9e:	50a7      	str	r7, [r4, r2]
 8009ea0:	b107      	cbz	r7, 8009ea4 <rshift+0x68>
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	1b1a      	subs	r2, r3, r4
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009eac:	bf08      	it	eq
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	6102      	str	r2, [r0, #16]
 8009eb2:	bf08      	it	eq
 8009eb4:	6143      	streq	r3, [r0, #20]
 8009eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eba:	f8dc c000 	ldr.w	ip, [ip]
 8009ebe:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ec2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ec6:	f849 7b04 	str.w	r7, [r9], #4
 8009eca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ece:	40cf      	lsrs	r7, r1
 8009ed0:	e7da      	b.n	8009e88 <rshift+0x4c>
 8009ed2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ed6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eda:	e7c3      	b.n	8009e64 <rshift+0x28>
 8009edc:	4623      	mov	r3, r4
 8009ede:	e7e1      	b.n	8009ea4 <rshift+0x68>

08009ee0 <__hexdig_fun>:
 8009ee0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d802      	bhi.n	8009eee <__hexdig_fun+0xe>
 8009ee8:	3820      	subs	r0, #32
 8009eea:	b2c0      	uxtb	r0, r0
 8009eec:	4770      	bx	lr
 8009eee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	d801      	bhi.n	8009efa <__hexdig_fun+0x1a>
 8009ef6:	3847      	subs	r0, #71	; 0x47
 8009ef8:	e7f7      	b.n	8009eea <__hexdig_fun+0xa>
 8009efa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d801      	bhi.n	8009f06 <__hexdig_fun+0x26>
 8009f02:	3827      	subs	r0, #39	; 0x27
 8009f04:	e7f1      	b.n	8009eea <__hexdig_fun+0xa>
 8009f06:	2000      	movs	r0, #0
 8009f08:	4770      	bx	lr
	...

08009f0c <__gethex>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	ed2d 8b02 	vpush	{d8}
 8009f14:	b089      	sub	sp, #36	; 0x24
 8009f16:	ee08 0a10 	vmov	s16, r0
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	4bbc      	ldr	r3, [pc, #752]	; (800a210 <__gethex+0x304>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	468b      	mov	fp, r1
 8009f26:	4690      	mov	r8, r2
 8009f28:	f7f6 f994 	bl	8000254 <strlen>
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	f8db 2000 	ldr.w	r2, [fp]
 8009f32:	4403      	add	r3, r0
 8009f34:	4682      	mov	sl, r0
 8009f36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	1c93      	adds	r3, r2, #2
 8009f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f46:	32fe      	adds	r2, #254	; 0xfe
 8009f48:	18d1      	adds	r1, r2, r3
 8009f4a:	461f      	mov	r7, r3
 8009f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f50:	9100      	str	r1, [sp, #0]
 8009f52:	2830      	cmp	r0, #48	; 0x30
 8009f54:	d0f8      	beq.n	8009f48 <__gethex+0x3c>
 8009f56:	f7ff ffc3 	bl	8009ee0 <__hexdig_fun>
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d13a      	bne.n	8009fd6 <__gethex+0xca>
 8009f60:	9901      	ldr	r1, [sp, #4]
 8009f62:	4652      	mov	r2, sl
 8009f64:	4638      	mov	r0, r7
 8009f66:	f7fe fa98 	bl	800849a <strncmp>
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d168      	bne.n	800a042 <__gethex+0x136>
 8009f70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f74:	eb07 060a 	add.w	r6, r7, sl
 8009f78:	f7ff ffb2 	bl	8009ee0 <__hexdig_fun>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d062      	beq.n	800a046 <__gethex+0x13a>
 8009f80:	4633      	mov	r3, r6
 8009f82:	7818      	ldrb	r0, [r3, #0]
 8009f84:	2830      	cmp	r0, #48	; 0x30
 8009f86:	461f      	mov	r7, r3
 8009f88:	f103 0301 	add.w	r3, r3, #1
 8009f8c:	d0f9      	beq.n	8009f82 <__gethex+0x76>
 8009f8e:	f7ff ffa7 	bl	8009ee0 <__hexdig_fun>
 8009f92:	2301      	movs	r3, #1
 8009f94:	fab0 f480 	clz	r4, r0
 8009f98:	0964      	lsrs	r4, r4, #5
 8009f9a:	4635      	mov	r5, r6
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	463a      	mov	r2, r7
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	7830      	ldrb	r0, [r6, #0]
 8009fa6:	f7ff ff9b 	bl	8009ee0 <__hexdig_fun>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d1f8      	bne.n	8009fa0 <__gethex+0x94>
 8009fae:	9901      	ldr	r1, [sp, #4]
 8009fb0:	4652      	mov	r2, sl
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7fe fa71 	bl	800849a <strncmp>
 8009fb8:	b980      	cbnz	r0, 8009fdc <__gethex+0xd0>
 8009fba:	b94d      	cbnz	r5, 8009fd0 <__gethex+0xc4>
 8009fbc:	eb06 050a 	add.w	r5, r6, sl
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	3201      	adds	r2, #1
 8009fc6:	7830      	ldrb	r0, [r6, #0]
 8009fc8:	f7ff ff8a 	bl	8009ee0 <__hexdig_fun>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d1f8      	bne.n	8009fc2 <__gethex+0xb6>
 8009fd0:	1bad      	subs	r5, r5, r6
 8009fd2:	00ad      	lsls	r5, r5, #2
 8009fd4:	e004      	b.n	8009fe0 <__gethex+0xd4>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	4625      	mov	r5, r4
 8009fda:	e7e0      	b.n	8009f9e <__gethex+0x92>
 8009fdc:	2d00      	cmp	r5, #0
 8009fde:	d1f7      	bne.n	8009fd0 <__gethex+0xc4>
 8009fe0:	7833      	ldrb	r3, [r6, #0]
 8009fe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fe6:	2b50      	cmp	r3, #80	; 0x50
 8009fe8:	d13b      	bne.n	800a062 <__gethex+0x156>
 8009fea:	7873      	ldrb	r3, [r6, #1]
 8009fec:	2b2b      	cmp	r3, #43	; 0x2b
 8009fee:	d02c      	beq.n	800a04a <__gethex+0x13e>
 8009ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ff2:	d02e      	beq.n	800a052 <__gethex+0x146>
 8009ff4:	1c71      	adds	r1, r6, #1
 8009ff6:	f04f 0900 	mov.w	r9, #0
 8009ffa:	7808      	ldrb	r0, [r1, #0]
 8009ffc:	f7ff ff70 	bl	8009ee0 <__hexdig_fun>
 800a000:	1e43      	subs	r3, r0, #1
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b18      	cmp	r3, #24
 800a006:	d82c      	bhi.n	800a062 <__gethex+0x156>
 800a008:	f1a0 0210 	sub.w	r2, r0, #16
 800a00c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a010:	f7ff ff66 	bl	8009ee0 <__hexdig_fun>
 800a014:	1e43      	subs	r3, r0, #1
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b18      	cmp	r3, #24
 800a01a:	d91d      	bls.n	800a058 <__gethex+0x14c>
 800a01c:	f1b9 0f00 	cmp.w	r9, #0
 800a020:	d000      	beq.n	800a024 <__gethex+0x118>
 800a022:	4252      	negs	r2, r2
 800a024:	4415      	add	r5, r2
 800a026:	f8cb 1000 	str.w	r1, [fp]
 800a02a:	b1e4      	cbz	r4, 800a066 <__gethex+0x15a>
 800a02c:	9b00      	ldr	r3, [sp, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bf14      	ite	ne
 800a032:	2700      	movne	r7, #0
 800a034:	2706      	moveq	r7, #6
 800a036:	4638      	mov	r0, r7
 800a038:	b009      	add	sp, #36	; 0x24
 800a03a:	ecbd 8b02 	vpop	{d8}
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	463e      	mov	r6, r7
 800a044:	4625      	mov	r5, r4
 800a046:	2401      	movs	r4, #1
 800a048:	e7ca      	b.n	8009fe0 <__gethex+0xd4>
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	1cb1      	adds	r1, r6, #2
 800a050:	e7d3      	b.n	8009ffa <__gethex+0xee>
 800a052:	f04f 0901 	mov.w	r9, #1
 800a056:	e7fa      	b.n	800a04e <__gethex+0x142>
 800a058:	230a      	movs	r3, #10
 800a05a:	fb03 0202 	mla	r2, r3, r2, r0
 800a05e:	3a10      	subs	r2, #16
 800a060:	e7d4      	b.n	800a00c <__gethex+0x100>
 800a062:	4631      	mov	r1, r6
 800a064:	e7df      	b.n	800a026 <__gethex+0x11a>
 800a066:	1bf3      	subs	r3, r6, r7
 800a068:	3b01      	subs	r3, #1
 800a06a:	4621      	mov	r1, r4
 800a06c:	2b07      	cmp	r3, #7
 800a06e:	dc0b      	bgt.n	800a088 <__gethex+0x17c>
 800a070:	ee18 0a10 	vmov	r0, s16
 800a074:	f000 fa90 	bl	800a598 <_Balloc>
 800a078:	4604      	mov	r4, r0
 800a07a:	b940      	cbnz	r0, 800a08e <__gethex+0x182>
 800a07c:	4b65      	ldr	r3, [pc, #404]	; (800a214 <__gethex+0x308>)
 800a07e:	4602      	mov	r2, r0
 800a080:	21de      	movs	r1, #222	; 0xde
 800a082:	4865      	ldr	r0, [pc, #404]	; (800a218 <__gethex+0x30c>)
 800a084:	f001 fda4 	bl	800bbd0 <__assert_func>
 800a088:	3101      	adds	r1, #1
 800a08a:	105b      	asrs	r3, r3, #1
 800a08c:	e7ee      	b.n	800a06c <__gethex+0x160>
 800a08e:	f100 0914 	add.w	r9, r0, #20
 800a092:	f04f 0b00 	mov.w	fp, #0
 800a096:	f1ca 0301 	rsb	r3, sl, #1
 800a09a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a09e:	f8cd b000 	str.w	fp, [sp]
 800a0a2:	9306      	str	r3, [sp, #24]
 800a0a4:	42b7      	cmp	r7, r6
 800a0a6:	d340      	bcc.n	800a12a <__gethex+0x21e>
 800a0a8:	9802      	ldr	r0, [sp, #8]
 800a0aa:	9b00      	ldr	r3, [sp, #0]
 800a0ac:	f840 3b04 	str.w	r3, [r0], #4
 800a0b0:	eba0 0009 	sub.w	r0, r0, r9
 800a0b4:	1080      	asrs	r0, r0, #2
 800a0b6:	0146      	lsls	r6, r0, #5
 800a0b8:	6120      	str	r0, [r4, #16]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fb62 	bl	800a784 <__hi0bits>
 800a0c0:	1a30      	subs	r0, r6, r0
 800a0c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a0c6:	42b0      	cmp	r0, r6
 800a0c8:	dd63      	ble.n	800a192 <__gethex+0x286>
 800a0ca:	1b87      	subs	r7, r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fefd 	bl	800aece <__any_on>
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	b1a8      	cbz	r0, 800a104 <__gethex+0x1f8>
 800a0d8:	1e7b      	subs	r3, r7, #1
 800a0da:	1159      	asrs	r1, r3, #5
 800a0dc:	f003 021f 	and.w	r2, r3, #31
 800a0e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a0e4:	f04f 0a01 	mov.w	sl, #1
 800a0e8:	fa0a f202 	lsl.w	r2, sl, r2
 800a0ec:	420a      	tst	r2, r1
 800a0ee:	d009      	beq.n	800a104 <__gethex+0x1f8>
 800a0f0:	4553      	cmp	r3, sl
 800a0f2:	dd05      	ble.n	800a100 <__gethex+0x1f4>
 800a0f4:	1eb9      	subs	r1, r7, #2
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fee9 	bl	800aece <__any_on>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d145      	bne.n	800a18c <__gethex+0x280>
 800a100:	f04f 0a02 	mov.w	sl, #2
 800a104:	4639      	mov	r1, r7
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff fe98 	bl	8009e3c <rshift>
 800a10c:	443d      	add	r5, r7
 800a10e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a112:	42ab      	cmp	r3, r5
 800a114:	da4c      	bge.n	800a1b0 <__gethex+0x2a4>
 800a116:	ee18 0a10 	vmov	r0, s16
 800a11a:	4621      	mov	r1, r4
 800a11c:	f000 fa7c 	bl	800a618 <_Bfree>
 800a120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a122:	2300      	movs	r3, #0
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	27a3      	movs	r7, #163	; 0xa3
 800a128:	e785      	b.n	800a036 <__gethex+0x12a>
 800a12a:	1e73      	subs	r3, r6, #1
 800a12c:	9a05      	ldr	r2, [sp, #20]
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a134:	4293      	cmp	r3, r2
 800a136:	d019      	beq.n	800a16c <__gethex+0x260>
 800a138:	f1bb 0f20 	cmp.w	fp, #32
 800a13c:	d107      	bne.n	800a14e <__gethex+0x242>
 800a13e:	9b02      	ldr	r3, [sp, #8]
 800a140:	9a00      	ldr	r2, [sp, #0]
 800a142:	f843 2b04 	str.w	r2, [r3], #4
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	469b      	mov	fp, r3
 800a14e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a152:	f7ff fec5 	bl	8009ee0 <__hexdig_fun>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	f000 000f 	and.w	r0, r0, #15
 800a15c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a160:	4303      	orrs	r3, r0
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	f10b 0b04 	add.w	fp, fp, #4
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	e00d      	b.n	800a188 <__gethex+0x27c>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	9a06      	ldr	r2, [sp, #24]
 800a170:	4413      	add	r3, r2
 800a172:	42bb      	cmp	r3, r7
 800a174:	d3e0      	bcc.n	800a138 <__gethex+0x22c>
 800a176:	4618      	mov	r0, r3
 800a178:	9901      	ldr	r1, [sp, #4]
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	4652      	mov	r2, sl
 800a17e:	f7fe f98c 	bl	800849a <strncmp>
 800a182:	9b07      	ldr	r3, [sp, #28]
 800a184:	2800      	cmp	r0, #0
 800a186:	d1d7      	bne.n	800a138 <__gethex+0x22c>
 800a188:	461e      	mov	r6, r3
 800a18a:	e78b      	b.n	800a0a4 <__gethex+0x198>
 800a18c:	f04f 0a03 	mov.w	sl, #3
 800a190:	e7b8      	b.n	800a104 <__gethex+0x1f8>
 800a192:	da0a      	bge.n	800a1aa <__gethex+0x29e>
 800a194:	1a37      	subs	r7, r6, r0
 800a196:	4621      	mov	r1, r4
 800a198:	ee18 0a10 	vmov	r0, s16
 800a19c:	463a      	mov	r2, r7
 800a19e:	f000 fc57 	bl	800aa50 <__lshift>
 800a1a2:	1bed      	subs	r5, r5, r7
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f100 0914 	add.w	r9, r0, #20
 800a1aa:	f04f 0a00 	mov.w	sl, #0
 800a1ae:	e7ae      	b.n	800a10e <__gethex+0x202>
 800a1b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a1b4:	42a8      	cmp	r0, r5
 800a1b6:	dd72      	ble.n	800a29e <__gethex+0x392>
 800a1b8:	1b45      	subs	r5, r0, r5
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	dc36      	bgt.n	800a22c <__gethex+0x320>
 800a1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d02a      	beq.n	800a21c <__gethex+0x310>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d02c      	beq.n	800a224 <__gethex+0x318>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d115      	bne.n	800a1fa <__gethex+0x2ee>
 800a1ce:	42ae      	cmp	r6, r5
 800a1d0:	d113      	bne.n	800a1fa <__gethex+0x2ee>
 800a1d2:	2e01      	cmp	r6, #1
 800a1d4:	d10b      	bne.n	800a1ee <__gethex+0x2e2>
 800a1d6:	9a04      	ldr	r2, [sp, #16]
 800a1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	f8c9 3000 	str.w	r3, [r9]
 800a1e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1e8:	2762      	movs	r7, #98	; 0x62
 800a1ea:	601c      	str	r4, [r3, #0]
 800a1ec:	e723      	b.n	800a036 <__gethex+0x12a>
 800a1ee:	1e71      	subs	r1, r6, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fe6c 	bl	800aece <__any_on>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d1ed      	bne.n	800a1d6 <__gethex+0x2ca>
 800a1fa:	ee18 0a10 	vmov	r0, s16
 800a1fe:	4621      	mov	r1, r4
 800a200:	f000 fa0a 	bl	800a618 <_Bfree>
 800a204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a206:	2300      	movs	r3, #0
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	2750      	movs	r7, #80	; 0x50
 800a20c:	e713      	b.n	800a036 <__gethex+0x12a>
 800a20e:	bf00      	nop
 800a210:	0800d260 	.word	0x0800d260
 800a214:	0800d1e4 	.word	0x0800d1e4
 800a218:	0800d1f5 	.word	0x0800d1f5
 800a21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1eb      	bne.n	800a1fa <__gethex+0x2ee>
 800a222:	e7d8      	b.n	800a1d6 <__gethex+0x2ca>
 800a224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1d5      	bne.n	800a1d6 <__gethex+0x2ca>
 800a22a:	e7e6      	b.n	800a1fa <__gethex+0x2ee>
 800a22c:	1e6f      	subs	r7, r5, #1
 800a22e:	f1ba 0f00 	cmp.w	sl, #0
 800a232:	d131      	bne.n	800a298 <__gethex+0x38c>
 800a234:	b127      	cbz	r7, 800a240 <__gethex+0x334>
 800a236:	4639      	mov	r1, r7
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fe48 	bl	800aece <__any_on>
 800a23e:	4682      	mov	sl, r0
 800a240:	117b      	asrs	r3, r7, #5
 800a242:	2101      	movs	r1, #1
 800a244:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a248:	f007 071f 	and.w	r7, r7, #31
 800a24c:	fa01 f707 	lsl.w	r7, r1, r7
 800a250:	421f      	tst	r7, r3
 800a252:	4629      	mov	r1, r5
 800a254:	4620      	mov	r0, r4
 800a256:	bf18      	it	ne
 800a258:	f04a 0a02 	orrne.w	sl, sl, #2
 800a25c:	1b76      	subs	r6, r6, r5
 800a25e:	f7ff fded 	bl	8009e3c <rshift>
 800a262:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a266:	2702      	movs	r7, #2
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	d048      	beq.n	800a300 <__gethex+0x3f4>
 800a26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d015      	beq.n	800a2a2 <__gethex+0x396>
 800a276:	2b03      	cmp	r3, #3
 800a278:	d017      	beq.n	800a2aa <__gethex+0x39e>
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d109      	bne.n	800a292 <__gethex+0x386>
 800a27e:	f01a 0f02 	tst.w	sl, #2
 800a282:	d006      	beq.n	800a292 <__gethex+0x386>
 800a284:	f8d9 0000 	ldr.w	r0, [r9]
 800a288:	ea4a 0a00 	orr.w	sl, sl, r0
 800a28c:	f01a 0f01 	tst.w	sl, #1
 800a290:	d10e      	bne.n	800a2b0 <__gethex+0x3a4>
 800a292:	f047 0710 	orr.w	r7, r7, #16
 800a296:	e033      	b.n	800a300 <__gethex+0x3f4>
 800a298:	f04f 0a01 	mov.w	sl, #1
 800a29c:	e7d0      	b.n	800a240 <__gethex+0x334>
 800a29e:	2701      	movs	r7, #1
 800a2a0:	e7e2      	b.n	800a268 <__gethex+0x35c>
 800a2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a4:	f1c3 0301 	rsb	r3, r3, #1
 800a2a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0f0      	beq.n	800a292 <__gethex+0x386>
 800a2b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2b4:	f104 0314 	add.w	r3, r4, #20
 800a2b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2c0:	f04f 0c00 	mov.w	ip, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2ce:	d01c      	beq.n	800a30a <__gethex+0x3fe>
 800a2d0:	3201      	adds	r2, #1
 800a2d2:	6002      	str	r2, [r0, #0]
 800a2d4:	2f02      	cmp	r7, #2
 800a2d6:	f104 0314 	add.w	r3, r4, #20
 800a2da:	d13f      	bne.n	800a35c <__gethex+0x450>
 800a2dc:	f8d8 2000 	ldr.w	r2, [r8]
 800a2e0:	3a01      	subs	r2, #1
 800a2e2:	42b2      	cmp	r2, r6
 800a2e4:	d10a      	bne.n	800a2fc <__gethex+0x3f0>
 800a2e6:	1171      	asrs	r1, r6, #5
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ee:	f006 061f 	and.w	r6, r6, #31
 800a2f2:	fa02 f606 	lsl.w	r6, r2, r6
 800a2f6:	421e      	tst	r6, r3
 800a2f8:	bf18      	it	ne
 800a2fa:	4617      	movne	r7, r2
 800a2fc:	f047 0720 	orr.w	r7, r7, #32
 800a300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a302:	601c      	str	r4, [r3, #0]
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	601d      	str	r5, [r3, #0]
 800a308:	e695      	b.n	800a036 <__gethex+0x12a>
 800a30a:	4299      	cmp	r1, r3
 800a30c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a310:	d8d8      	bhi.n	800a2c4 <__gethex+0x3b8>
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	459b      	cmp	fp, r3
 800a316:	db19      	blt.n	800a34c <__gethex+0x440>
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	ee18 0a10 	vmov	r0, s16
 800a31e:	3101      	adds	r1, #1
 800a320:	f000 f93a 	bl	800a598 <_Balloc>
 800a324:	4681      	mov	r9, r0
 800a326:	b918      	cbnz	r0, 800a330 <__gethex+0x424>
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <__gethex+0x488>)
 800a32a:	4602      	mov	r2, r0
 800a32c:	2184      	movs	r1, #132	; 0x84
 800a32e:	e6a8      	b.n	800a082 <__gethex+0x176>
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	3202      	adds	r2, #2
 800a334:	f104 010c 	add.w	r1, r4, #12
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	300c      	adds	r0, #12
 800a33c:	f000 f91e 	bl	800a57c <memcpy>
 800a340:	4621      	mov	r1, r4
 800a342:	ee18 0a10 	vmov	r0, s16
 800a346:	f000 f967 	bl	800a618 <_Bfree>
 800a34a:	464c      	mov	r4, r9
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a354:	6122      	str	r2, [r4, #16]
 800a356:	2201      	movs	r2, #1
 800a358:	615a      	str	r2, [r3, #20]
 800a35a:	e7bb      	b.n	800a2d4 <__gethex+0x3c8>
 800a35c:	6922      	ldr	r2, [r4, #16]
 800a35e:	455a      	cmp	r2, fp
 800a360:	dd0b      	ble.n	800a37a <__gethex+0x46e>
 800a362:	2101      	movs	r1, #1
 800a364:	4620      	mov	r0, r4
 800a366:	f7ff fd69 	bl	8009e3c <rshift>
 800a36a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a36e:	3501      	adds	r5, #1
 800a370:	42ab      	cmp	r3, r5
 800a372:	f6ff aed0 	blt.w	800a116 <__gethex+0x20a>
 800a376:	2701      	movs	r7, #1
 800a378:	e7c0      	b.n	800a2fc <__gethex+0x3f0>
 800a37a:	f016 061f 	ands.w	r6, r6, #31
 800a37e:	d0fa      	beq.n	800a376 <__gethex+0x46a>
 800a380:	449a      	add	sl, r3
 800a382:	f1c6 0620 	rsb	r6, r6, #32
 800a386:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a38a:	f000 f9fb 	bl	800a784 <__hi0bits>
 800a38e:	42b0      	cmp	r0, r6
 800a390:	dbe7      	blt.n	800a362 <__gethex+0x456>
 800a392:	e7f0      	b.n	800a376 <__gethex+0x46a>
 800a394:	0800d1e4 	.word	0x0800d1e4

0800a398 <L_shift>:
 800a398:	f1c2 0208 	rsb	r2, r2, #8
 800a39c:	0092      	lsls	r2, r2, #2
 800a39e:	b570      	push	{r4, r5, r6, lr}
 800a3a0:	f1c2 0620 	rsb	r6, r2, #32
 800a3a4:	6843      	ldr	r3, [r0, #4]
 800a3a6:	6804      	ldr	r4, [r0, #0]
 800a3a8:	fa03 f506 	lsl.w	r5, r3, r6
 800a3ac:	432c      	orrs	r4, r5
 800a3ae:	40d3      	lsrs	r3, r2
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3b6:	4288      	cmp	r0, r1
 800a3b8:	d3f4      	bcc.n	800a3a4 <L_shift+0xc>
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}

0800a3bc <__match>:
 800a3bc:	b530      	push	{r4, r5, lr}
 800a3be:	6803      	ldr	r3, [r0, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c6:	b914      	cbnz	r4, 800a3ce <__match+0x12>
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	bd30      	pop	{r4, r5, pc}
 800a3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3d6:	2d19      	cmp	r5, #25
 800a3d8:	bf98      	it	ls
 800a3da:	3220      	addls	r2, #32
 800a3dc:	42a2      	cmp	r2, r4
 800a3de:	d0f0      	beq.n	800a3c2 <__match+0x6>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7f3      	b.n	800a3cc <__match+0x10>

0800a3e4 <__hexnan>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	680b      	ldr	r3, [r1, #0]
 800a3ea:	6801      	ldr	r1, [r0, #0]
 800a3ec:	115e      	asrs	r6, r3, #5
 800a3ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3f2:	f013 031f 	ands.w	r3, r3, #31
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	bf18      	it	ne
 800a3fa:	3604      	addne	r6, #4
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	1f37      	subs	r7, r6, #4
 800a400:	4682      	mov	sl, r0
 800a402:	4690      	mov	r8, r2
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f846 5c04 	str.w	r5, [r6, #-4]
 800a40a:	46b9      	mov	r9, r7
 800a40c:	463c      	mov	r4, r7
 800a40e:	9502      	str	r5, [sp, #8]
 800a410:	46ab      	mov	fp, r5
 800a412:	784a      	ldrb	r2, [r1, #1]
 800a414:	1c4b      	adds	r3, r1, #1
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	b342      	cbz	r2, 800a46c <__hexnan+0x88>
 800a41a:	4610      	mov	r0, r2
 800a41c:	9105      	str	r1, [sp, #20]
 800a41e:	9204      	str	r2, [sp, #16]
 800a420:	f7ff fd5e 	bl	8009ee0 <__hexdig_fun>
 800a424:	2800      	cmp	r0, #0
 800a426:	d14f      	bne.n	800a4c8 <__hexnan+0xe4>
 800a428:	9a04      	ldr	r2, [sp, #16]
 800a42a:	9905      	ldr	r1, [sp, #20]
 800a42c:	2a20      	cmp	r2, #32
 800a42e:	d818      	bhi.n	800a462 <__hexnan+0x7e>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	459b      	cmp	fp, r3
 800a434:	dd13      	ble.n	800a45e <__hexnan+0x7a>
 800a436:	454c      	cmp	r4, r9
 800a438:	d206      	bcs.n	800a448 <__hexnan+0x64>
 800a43a:	2d07      	cmp	r5, #7
 800a43c:	dc04      	bgt.n	800a448 <__hexnan+0x64>
 800a43e:	462a      	mov	r2, r5
 800a440:	4649      	mov	r1, r9
 800a442:	4620      	mov	r0, r4
 800a444:	f7ff ffa8 	bl	800a398 <L_shift>
 800a448:	4544      	cmp	r4, r8
 800a44a:	d950      	bls.n	800a4ee <__hexnan+0x10a>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f1a4 0904 	sub.w	r9, r4, #4
 800a452:	f844 3c04 	str.w	r3, [r4, #-4]
 800a456:	f8cd b008 	str.w	fp, [sp, #8]
 800a45a:	464c      	mov	r4, r9
 800a45c:	461d      	mov	r5, r3
 800a45e:	9903      	ldr	r1, [sp, #12]
 800a460:	e7d7      	b.n	800a412 <__hexnan+0x2e>
 800a462:	2a29      	cmp	r2, #41	; 0x29
 800a464:	d156      	bne.n	800a514 <__hexnan+0x130>
 800a466:	3102      	adds	r1, #2
 800a468:	f8ca 1000 	str.w	r1, [sl]
 800a46c:	f1bb 0f00 	cmp.w	fp, #0
 800a470:	d050      	beq.n	800a514 <__hexnan+0x130>
 800a472:	454c      	cmp	r4, r9
 800a474:	d206      	bcs.n	800a484 <__hexnan+0xa0>
 800a476:	2d07      	cmp	r5, #7
 800a478:	dc04      	bgt.n	800a484 <__hexnan+0xa0>
 800a47a:	462a      	mov	r2, r5
 800a47c:	4649      	mov	r1, r9
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff ff8a 	bl	800a398 <L_shift>
 800a484:	4544      	cmp	r4, r8
 800a486:	d934      	bls.n	800a4f2 <__hexnan+0x10e>
 800a488:	f1a8 0204 	sub.w	r2, r8, #4
 800a48c:	4623      	mov	r3, r4
 800a48e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a492:	f842 1f04 	str.w	r1, [r2, #4]!
 800a496:	429f      	cmp	r7, r3
 800a498:	d2f9      	bcs.n	800a48e <__hexnan+0xaa>
 800a49a:	1b3b      	subs	r3, r7, r4
 800a49c:	f023 0303 	bic.w	r3, r3, #3
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	3e03      	subs	r6, #3
 800a4a6:	42b4      	cmp	r4, r6
 800a4a8:	bf88      	it	hi
 800a4aa:	2304      	movhi	r3, #4
 800a4ac:	4443      	add	r3, r8
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f843 2b04 	str.w	r2, [r3], #4
 800a4b4:	429f      	cmp	r7, r3
 800a4b6:	d2fb      	bcs.n	800a4b0 <__hexnan+0xcc>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	b91b      	cbnz	r3, 800a4c4 <__hexnan+0xe0>
 800a4bc:	4547      	cmp	r7, r8
 800a4be:	d127      	bne.n	800a510 <__hexnan+0x12c>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	2005      	movs	r0, #5
 800a4c6:	e026      	b.n	800a516 <__hexnan+0x132>
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	2d08      	cmp	r5, #8
 800a4cc:	f10b 0b01 	add.w	fp, fp, #1
 800a4d0:	dd06      	ble.n	800a4e0 <__hexnan+0xfc>
 800a4d2:	4544      	cmp	r4, r8
 800a4d4:	d9c3      	bls.n	800a45e <__hexnan+0x7a>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4dc:	2501      	movs	r5, #1
 800a4de:	3c04      	subs	r4, #4
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	f000 000f 	and.w	r0, r0, #15
 800a4e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a4ea:	6022      	str	r2, [r4, #0]
 800a4ec:	e7b7      	b.n	800a45e <__hexnan+0x7a>
 800a4ee:	2508      	movs	r5, #8
 800a4f0:	e7b5      	b.n	800a45e <__hexnan+0x7a>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0df      	beq.n	800a4b8 <__hexnan+0xd4>
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fc:	f1c3 0320 	rsb	r3, r3, #32
 800a500:	fa22 f303 	lsr.w	r3, r2, r3
 800a504:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a508:	401a      	ands	r2, r3
 800a50a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a50e:	e7d3      	b.n	800a4b8 <__hexnan+0xd4>
 800a510:	3f04      	subs	r7, #4
 800a512:	e7d1      	b.n	800a4b8 <__hexnan+0xd4>
 800a514:	2004      	movs	r0, #4
 800a516:	b007      	add	sp, #28
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a51c <_localeconv_r>:
 800a51c:	4800      	ldr	r0, [pc, #0]	; (800a520 <_localeconv_r+0x4>)
 800a51e:	4770      	bx	lr
 800a520:	200001f0 	.word	0x200001f0

0800a524 <_lseek_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_lseek_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f8 f8a8 	bl	8002688 <_lseek>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_lseek_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_lseek_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	200186e0 	.word	0x200186e0

0800a548 <malloc>:
 800a548:	4b02      	ldr	r3, [pc, #8]	; (800a554 <malloc+0xc>)
 800a54a:	4601      	mov	r1, r0
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	f000 bd3f 	b.w	800afd0 <_malloc_r>
 800a552:	bf00      	nop
 800a554:	20000098 	.word	0x20000098

0800a558 <__ascii_mbtowc>:
 800a558:	b082      	sub	sp, #8
 800a55a:	b901      	cbnz	r1, 800a55e <__ascii_mbtowc+0x6>
 800a55c:	a901      	add	r1, sp, #4
 800a55e:	b142      	cbz	r2, 800a572 <__ascii_mbtowc+0x1a>
 800a560:	b14b      	cbz	r3, 800a576 <__ascii_mbtowc+0x1e>
 800a562:	7813      	ldrb	r3, [r2, #0]
 800a564:	600b      	str	r3, [r1, #0]
 800a566:	7812      	ldrb	r2, [r2, #0]
 800a568:	1e10      	subs	r0, r2, #0
 800a56a:	bf18      	it	ne
 800a56c:	2001      	movne	r0, #1
 800a56e:	b002      	add	sp, #8
 800a570:	4770      	bx	lr
 800a572:	4610      	mov	r0, r2
 800a574:	e7fb      	b.n	800a56e <__ascii_mbtowc+0x16>
 800a576:	f06f 0001 	mvn.w	r0, #1
 800a57a:	e7f8      	b.n	800a56e <__ascii_mbtowc+0x16>

0800a57c <memcpy>:
 800a57c:	440a      	add	r2, r1
 800a57e:	4291      	cmp	r1, r2
 800a580:	f100 33ff 	add.w	r3, r0, #4294967295
 800a584:	d100      	bne.n	800a588 <memcpy+0xc>
 800a586:	4770      	bx	lr
 800a588:	b510      	push	{r4, lr}
 800a58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a592:	4291      	cmp	r1, r2
 800a594:	d1f9      	bne.n	800a58a <memcpy+0xe>
 800a596:	bd10      	pop	{r4, pc}

0800a598 <_Balloc>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a59c:	4604      	mov	r4, r0
 800a59e:	460d      	mov	r5, r1
 800a5a0:	b976      	cbnz	r6, 800a5c0 <_Balloc+0x28>
 800a5a2:	2010      	movs	r0, #16
 800a5a4:	f7ff ffd0 	bl	800a548 <malloc>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a5ac:	b920      	cbnz	r0, 800a5b8 <_Balloc+0x20>
 800a5ae:	4b18      	ldr	r3, [pc, #96]	; (800a610 <_Balloc+0x78>)
 800a5b0:	4818      	ldr	r0, [pc, #96]	; (800a614 <_Balloc+0x7c>)
 800a5b2:	2166      	movs	r1, #102	; 0x66
 800a5b4:	f001 fb0c 	bl	800bbd0 <__assert_func>
 800a5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5bc:	6006      	str	r6, [r0, #0]
 800a5be:	60c6      	str	r6, [r0, #12]
 800a5c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5c2:	68f3      	ldr	r3, [r6, #12]
 800a5c4:	b183      	cbz	r3, 800a5e8 <_Balloc+0x50>
 800a5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5ce:	b9b8      	cbnz	r0, 800a600 <_Balloc+0x68>
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a5d6:	1d72      	adds	r2, r6, #5
 800a5d8:	0092      	lsls	r2, r2, #2
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fc98 	bl	800af10 <_calloc_r>
 800a5e0:	b160      	cbz	r0, 800a5fc <_Balloc+0x64>
 800a5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5e6:	e00e      	b.n	800a606 <_Balloc+0x6e>
 800a5e8:	2221      	movs	r2, #33	; 0x21
 800a5ea:	2104      	movs	r1, #4
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fc8f 	bl	800af10 <_calloc_r>
 800a5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f4:	60f0      	str	r0, [r6, #12]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e4      	bne.n	800a5c6 <_Balloc+0x2e>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	6802      	ldr	r2, [r0, #0]
 800a602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a606:	2300      	movs	r3, #0
 800a608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a60c:	e7f7      	b.n	800a5fe <_Balloc+0x66>
 800a60e:	bf00      	nop
 800a610:	0800d16e 	.word	0x0800d16e
 800a614:	0800d274 	.word	0x0800d274

0800a618 <_Bfree>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a61c:	4605      	mov	r5, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	b976      	cbnz	r6, 800a640 <_Bfree+0x28>
 800a622:	2010      	movs	r0, #16
 800a624:	f7ff ff90 	bl	800a548 <malloc>
 800a628:	4602      	mov	r2, r0
 800a62a:	6268      	str	r0, [r5, #36]	; 0x24
 800a62c:	b920      	cbnz	r0, 800a638 <_Bfree+0x20>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <_Bfree+0x3c>)
 800a630:	4809      	ldr	r0, [pc, #36]	; (800a658 <_Bfree+0x40>)
 800a632:	218a      	movs	r1, #138	; 0x8a
 800a634:	f001 facc 	bl	800bbd0 <__assert_func>
 800a638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a63c:	6006      	str	r6, [r0, #0]
 800a63e:	60c6      	str	r6, [r0, #12]
 800a640:	b13c      	cbz	r4, 800a652 <_Bfree+0x3a>
 800a642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a644:	6862      	ldr	r2, [r4, #4]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a64c:	6021      	str	r1, [r4, #0]
 800a64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	0800d16e 	.word	0x0800d16e
 800a658:	0800d274 	.word	0x0800d274

0800a65c <__multadd>:
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	690e      	ldr	r6, [r1, #16]
 800a662:	4607      	mov	r7, r0
 800a664:	4698      	mov	r8, r3
 800a666:	460c      	mov	r4, r1
 800a668:	f101 0014 	add.w	r0, r1, #20
 800a66c:	2300      	movs	r3, #0
 800a66e:	6805      	ldr	r5, [r0, #0]
 800a670:	b2a9      	uxth	r1, r5
 800a672:	fb02 8101 	mla	r1, r2, r1, r8
 800a676:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a67a:	0c2d      	lsrs	r5, r5, #16
 800a67c:	fb02 c505 	mla	r5, r2, r5, ip
 800a680:	b289      	uxth	r1, r1
 800a682:	3301      	adds	r3, #1
 800a684:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a688:	429e      	cmp	r6, r3
 800a68a:	f840 1b04 	str.w	r1, [r0], #4
 800a68e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a692:	dcec      	bgt.n	800a66e <__multadd+0x12>
 800a694:	f1b8 0f00 	cmp.w	r8, #0
 800a698:	d022      	beq.n	800a6e0 <__multadd+0x84>
 800a69a:	68a3      	ldr	r3, [r4, #8]
 800a69c:	42b3      	cmp	r3, r6
 800a69e:	dc19      	bgt.n	800a6d4 <__multadd+0x78>
 800a6a0:	6861      	ldr	r1, [r4, #4]
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	3101      	adds	r1, #1
 800a6a6:	f7ff ff77 	bl	800a598 <_Balloc>
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	b928      	cbnz	r0, 800a6ba <__multadd+0x5e>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <__multadd+0x8c>)
 800a6b2:	480e      	ldr	r0, [pc, #56]	; (800a6ec <__multadd+0x90>)
 800a6b4:	21b5      	movs	r1, #181	; 0xb5
 800a6b6:	f001 fa8b 	bl	800bbd0 <__assert_func>
 800a6ba:	6922      	ldr	r2, [r4, #16]
 800a6bc:	3202      	adds	r2, #2
 800a6be:	f104 010c 	add.w	r1, r4, #12
 800a6c2:	0092      	lsls	r2, r2, #2
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	f7ff ff59 	bl	800a57c <memcpy>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f7ff ffa3 	bl	800a618 <_Bfree>
 800a6d2:	462c      	mov	r4, r5
 800a6d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a6d8:	3601      	adds	r6, #1
 800a6da:	f8c3 8014 	str.w	r8, [r3, #20]
 800a6de:	6126      	str	r6, [r4, #16]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800d1e4 	.word	0x0800d1e4
 800a6ec:	0800d274 	.word	0x0800d274

0800a6f0 <__s2b>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	4615      	mov	r5, r2
 800a6f8:	461f      	mov	r7, r3
 800a6fa:	2209      	movs	r2, #9
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	4606      	mov	r6, r0
 800a700:	fb93 f3f2 	sdiv	r3, r3, r2
 800a704:	2100      	movs	r1, #0
 800a706:	2201      	movs	r2, #1
 800a708:	429a      	cmp	r2, r3
 800a70a:	db09      	blt.n	800a720 <__s2b+0x30>
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ff43 	bl	800a598 <_Balloc>
 800a712:	b940      	cbnz	r0, 800a726 <__s2b+0x36>
 800a714:	4602      	mov	r2, r0
 800a716:	4b19      	ldr	r3, [pc, #100]	; (800a77c <__s2b+0x8c>)
 800a718:	4819      	ldr	r0, [pc, #100]	; (800a780 <__s2b+0x90>)
 800a71a:	21ce      	movs	r1, #206	; 0xce
 800a71c:	f001 fa58 	bl	800bbd0 <__assert_func>
 800a720:	0052      	lsls	r2, r2, #1
 800a722:	3101      	adds	r1, #1
 800a724:	e7f0      	b.n	800a708 <__s2b+0x18>
 800a726:	9b08      	ldr	r3, [sp, #32]
 800a728:	6143      	str	r3, [r0, #20]
 800a72a:	2d09      	cmp	r5, #9
 800a72c:	f04f 0301 	mov.w	r3, #1
 800a730:	6103      	str	r3, [r0, #16]
 800a732:	dd16      	ble.n	800a762 <__s2b+0x72>
 800a734:	f104 0909 	add.w	r9, r4, #9
 800a738:	46c8      	mov	r8, r9
 800a73a:	442c      	add	r4, r5
 800a73c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a740:	4601      	mov	r1, r0
 800a742:	3b30      	subs	r3, #48	; 0x30
 800a744:	220a      	movs	r2, #10
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff88 	bl	800a65c <__multadd>
 800a74c:	45a0      	cmp	r8, r4
 800a74e:	d1f5      	bne.n	800a73c <__s2b+0x4c>
 800a750:	f1a5 0408 	sub.w	r4, r5, #8
 800a754:	444c      	add	r4, r9
 800a756:	1b2d      	subs	r5, r5, r4
 800a758:	1963      	adds	r3, r4, r5
 800a75a:	42bb      	cmp	r3, r7
 800a75c:	db04      	blt.n	800a768 <__s2b+0x78>
 800a75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a762:	340a      	adds	r4, #10
 800a764:	2509      	movs	r5, #9
 800a766:	e7f6      	b.n	800a756 <__s2b+0x66>
 800a768:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a76c:	4601      	mov	r1, r0
 800a76e:	3b30      	subs	r3, #48	; 0x30
 800a770:	220a      	movs	r2, #10
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff ff72 	bl	800a65c <__multadd>
 800a778:	e7ee      	b.n	800a758 <__s2b+0x68>
 800a77a:	bf00      	nop
 800a77c:	0800d1e4 	.word	0x0800d1e4
 800a780:	0800d274 	.word	0x0800d274

0800a784 <__hi0bits>:
 800a784:	0c03      	lsrs	r3, r0, #16
 800a786:	041b      	lsls	r3, r3, #16
 800a788:	b9d3      	cbnz	r3, 800a7c0 <__hi0bits+0x3c>
 800a78a:	0400      	lsls	r0, r0, #16
 800a78c:	2310      	movs	r3, #16
 800a78e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a792:	bf04      	itt	eq
 800a794:	0200      	lsleq	r0, r0, #8
 800a796:	3308      	addeq	r3, #8
 800a798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a79c:	bf04      	itt	eq
 800a79e:	0100      	lsleq	r0, r0, #4
 800a7a0:	3304      	addeq	r3, #4
 800a7a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7a6:	bf04      	itt	eq
 800a7a8:	0080      	lsleq	r0, r0, #2
 800a7aa:	3302      	addeq	r3, #2
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	db05      	blt.n	800a7bc <__hi0bits+0x38>
 800a7b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7b4:	f103 0301 	add.w	r3, r3, #1
 800a7b8:	bf08      	it	eq
 800a7ba:	2320      	moveq	r3, #32
 800a7bc:	4618      	mov	r0, r3
 800a7be:	4770      	bx	lr
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e7e4      	b.n	800a78e <__hi0bits+0xa>

0800a7c4 <__lo0bits>:
 800a7c4:	6803      	ldr	r3, [r0, #0]
 800a7c6:	f013 0207 	ands.w	r2, r3, #7
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	d00b      	beq.n	800a7e6 <__lo0bits+0x22>
 800a7ce:	07da      	lsls	r2, r3, #31
 800a7d0:	d424      	bmi.n	800a81c <__lo0bits+0x58>
 800a7d2:	0798      	lsls	r0, r3, #30
 800a7d4:	bf49      	itett	mi
 800a7d6:	085b      	lsrmi	r3, r3, #1
 800a7d8:	089b      	lsrpl	r3, r3, #2
 800a7da:	2001      	movmi	r0, #1
 800a7dc:	600b      	strmi	r3, [r1, #0]
 800a7de:	bf5c      	itt	pl
 800a7e0:	600b      	strpl	r3, [r1, #0]
 800a7e2:	2002      	movpl	r0, #2
 800a7e4:	4770      	bx	lr
 800a7e6:	b298      	uxth	r0, r3
 800a7e8:	b9b0      	cbnz	r0, 800a818 <__lo0bits+0x54>
 800a7ea:	0c1b      	lsrs	r3, r3, #16
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7f2:	bf04      	itt	eq
 800a7f4:	0a1b      	lsreq	r3, r3, #8
 800a7f6:	3008      	addeq	r0, #8
 800a7f8:	071a      	lsls	r2, r3, #28
 800a7fa:	bf04      	itt	eq
 800a7fc:	091b      	lsreq	r3, r3, #4
 800a7fe:	3004      	addeq	r0, #4
 800a800:	079a      	lsls	r2, r3, #30
 800a802:	bf04      	itt	eq
 800a804:	089b      	lsreq	r3, r3, #2
 800a806:	3002      	addeq	r0, #2
 800a808:	07da      	lsls	r2, r3, #31
 800a80a:	d403      	bmi.n	800a814 <__lo0bits+0x50>
 800a80c:	085b      	lsrs	r3, r3, #1
 800a80e:	f100 0001 	add.w	r0, r0, #1
 800a812:	d005      	beq.n	800a820 <__lo0bits+0x5c>
 800a814:	600b      	str	r3, [r1, #0]
 800a816:	4770      	bx	lr
 800a818:	4610      	mov	r0, r2
 800a81a:	e7e8      	b.n	800a7ee <__lo0bits+0x2a>
 800a81c:	2000      	movs	r0, #0
 800a81e:	4770      	bx	lr
 800a820:	2020      	movs	r0, #32
 800a822:	4770      	bx	lr

0800a824 <__i2b>:
 800a824:	b510      	push	{r4, lr}
 800a826:	460c      	mov	r4, r1
 800a828:	2101      	movs	r1, #1
 800a82a:	f7ff feb5 	bl	800a598 <_Balloc>
 800a82e:	4602      	mov	r2, r0
 800a830:	b928      	cbnz	r0, 800a83e <__i2b+0x1a>
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <__i2b+0x24>)
 800a834:	4805      	ldr	r0, [pc, #20]	; (800a84c <__i2b+0x28>)
 800a836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a83a:	f001 f9c9 	bl	800bbd0 <__assert_func>
 800a83e:	2301      	movs	r3, #1
 800a840:	6144      	str	r4, [r0, #20]
 800a842:	6103      	str	r3, [r0, #16]
 800a844:	bd10      	pop	{r4, pc}
 800a846:	bf00      	nop
 800a848:	0800d1e4 	.word	0x0800d1e4
 800a84c:	0800d274 	.word	0x0800d274

0800a850 <__multiply>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	4614      	mov	r4, r2
 800a856:	690a      	ldr	r2, [r1, #16]
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	bfb8      	it	lt
 800a85e:	460b      	movlt	r3, r1
 800a860:	460d      	mov	r5, r1
 800a862:	bfbc      	itt	lt
 800a864:	4625      	movlt	r5, r4
 800a866:	461c      	movlt	r4, r3
 800a868:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a86c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a870:	68ab      	ldr	r3, [r5, #8]
 800a872:	6869      	ldr	r1, [r5, #4]
 800a874:	eb0a 0709 	add.w	r7, sl, r9
 800a878:	42bb      	cmp	r3, r7
 800a87a:	b085      	sub	sp, #20
 800a87c:	bfb8      	it	lt
 800a87e:	3101      	addlt	r1, #1
 800a880:	f7ff fe8a 	bl	800a598 <_Balloc>
 800a884:	b930      	cbnz	r0, 800a894 <__multiply+0x44>
 800a886:	4602      	mov	r2, r0
 800a888:	4b42      	ldr	r3, [pc, #264]	; (800a994 <__multiply+0x144>)
 800a88a:	4843      	ldr	r0, [pc, #268]	; (800a998 <__multiply+0x148>)
 800a88c:	f240 115d 	movw	r1, #349	; 0x15d
 800a890:	f001 f99e 	bl	800bbd0 <__assert_func>
 800a894:	f100 0614 	add.w	r6, r0, #20
 800a898:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a89c:	4633      	mov	r3, r6
 800a89e:	2200      	movs	r2, #0
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	d31e      	bcc.n	800a8e2 <__multiply+0x92>
 800a8a4:	f105 0c14 	add.w	ip, r5, #20
 800a8a8:	f104 0314 	add.w	r3, r4, #20
 800a8ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a8b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a8b4:	9202      	str	r2, [sp, #8]
 800a8b6:	ebac 0205 	sub.w	r2, ip, r5
 800a8ba:	3a15      	subs	r2, #21
 800a8bc:	f022 0203 	bic.w	r2, r2, #3
 800a8c0:	3204      	adds	r2, #4
 800a8c2:	f105 0115 	add.w	r1, r5, #21
 800a8c6:	458c      	cmp	ip, r1
 800a8c8:	bf38      	it	cc
 800a8ca:	2204      	movcc	r2, #4
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	9a02      	ldr	r2, [sp, #8]
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d808      	bhi.n	800a8e8 <__multiply+0x98>
 800a8d6:	2f00      	cmp	r7, #0
 800a8d8:	dc55      	bgt.n	800a986 <__multiply+0x136>
 800a8da:	6107      	str	r7, [r0, #16]
 800a8dc:	b005      	add	sp, #20
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	f843 2b04 	str.w	r2, [r3], #4
 800a8e6:	e7db      	b.n	800a8a0 <__multiply+0x50>
 800a8e8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8ec:	f1ba 0f00 	cmp.w	sl, #0
 800a8f0:	d020      	beq.n	800a934 <__multiply+0xe4>
 800a8f2:	f105 0e14 	add.w	lr, r5, #20
 800a8f6:	46b1      	mov	r9, r6
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a8fe:	f8d9 b000 	ldr.w	fp, [r9]
 800a902:	b2a1      	uxth	r1, r4
 800a904:	fa1f fb8b 	uxth.w	fp, fp
 800a908:	fb0a b101 	mla	r1, sl, r1, fp
 800a90c:	4411      	add	r1, r2
 800a90e:	f8d9 2000 	ldr.w	r2, [r9]
 800a912:	0c24      	lsrs	r4, r4, #16
 800a914:	0c12      	lsrs	r2, r2, #16
 800a916:	fb0a 2404 	mla	r4, sl, r4, r2
 800a91a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a91e:	b289      	uxth	r1, r1
 800a920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a924:	45f4      	cmp	ip, lr
 800a926:	f849 1b04 	str.w	r1, [r9], #4
 800a92a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a92e:	d8e4      	bhi.n	800a8fa <__multiply+0xaa>
 800a930:	9901      	ldr	r1, [sp, #4]
 800a932:	5072      	str	r2, [r6, r1]
 800a934:	9a03      	ldr	r2, [sp, #12]
 800a936:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a93a:	3304      	adds	r3, #4
 800a93c:	f1b9 0f00 	cmp.w	r9, #0
 800a940:	d01f      	beq.n	800a982 <__multiply+0x132>
 800a942:	6834      	ldr	r4, [r6, #0]
 800a944:	f105 0114 	add.w	r1, r5, #20
 800a948:	46b6      	mov	lr, r6
 800a94a:	f04f 0a00 	mov.w	sl, #0
 800a94e:	880a      	ldrh	r2, [r1, #0]
 800a950:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a954:	fb09 b202 	mla	r2, r9, r2, fp
 800a958:	4492      	add	sl, r2
 800a95a:	b2a4      	uxth	r4, r4
 800a95c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a960:	f84e 4b04 	str.w	r4, [lr], #4
 800a964:	f851 4b04 	ldr.w	r4, [r1], #4
 800a968:	f8be 2000 	ldrh.w	r2, [lr]
 800a96c:	0c24      	lsrs	r4, r4, #16
 800a96e:	fb09 2404 	mla	r4, r9, r4, r2
 800a972:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a976:	458c      	cmp	ip, r1
 800a978:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a97c:	d8e7      	bhi.n	800a94e <__multiply+0xfe>
 800a97e:	9a01      	ldr	r2, [sp, #4]
 800a980:	50b4      	str	r4, [r6, r2]
 800a982:	3604      	adds	r6, #4
 800a984:	e7a3      	b.n	800a8ce <__multiply+0x7e>
 800a986:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1a5      	bne.n	800a8da <__multiply+0x8a>
 800a98e:	3f01      	subs	r7, #1
 800a990:	e7a1      	b.n	800a8d6 <__multiply+0x86>
 800a992:	bf00      	nop
 800a994:	0800d1e4 	.word	0x0800d1e4
 800a998:	0800d274 	.word	0x0800d274

0800a99c <__pow5mult>:
 800a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a0:	4615      	mov	r5, r2
 800a9a2:	f012 0203 	ands.w	r2, r2, #3
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	d007      	beq.n	800a9bc <__pow5mult+0x20>
 800a9ac:	4c25      	ldr	r4, [pc, #148]	; (800aa44 <__pow5mult+0xa8>)
 800a9ae:	3a01      	subs	r2, #1
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9b6:	f7ff fe51 	bl	800a65c <__multadd>
 800a9ba:	4607      	mov	r7, r0
 800a9bc:	10ad      	asrs	r5, r5, #2
 800a9be:	d03d      	beq.n	800aa3c <__pow5mult+0xa0>
 800a9c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9c2:	b97c      	cbnz	r4, 800a9e4 <__pow5mult+0x48>
 800a9c4:	2010      	movs	r0, #16
 800a9c6:	f7ff fdbf 	bl	800a548 <malloc>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ce:	b928      	cbnz	r0, 800a9dc <__pow5mult+0x40>
 800a9d0:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <__pow5mult+0xac>)
 800a9d2:	481e      	ldr	r0, [pc, #120]	; (800aa4c <__pow5mult+0xb0>)
 800a9d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9d8:	f001 f8fa 	bl	800bbd0 <__assert_func>
 800a9dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e0:	6004      	str	r4, [r0, #0]
 800a9e2:	60c4      	str	r4, [r0, #12]
 800a9e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9ec:	b94c      	cbnz	r4, 800aa02 <__pow5mult+0x66>
 800a9ee:	f240 2171 	movw	r1, #625	; 0x271
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff ff16 	bl	800a824 <__i2b>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9fe:	4604      	mov	r4, r0
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	f04f 0900 	mov.w	r9, #0
 800aa06:	07eb      	lsls	r3, r5, #31
 800aa08:	d50a      	bpl.n	800aa20 <__pow5mult+0x84>
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ff1e 	bl	800a850 <__multiply>
 800aa14:	4639      	mov	r1, r7
 800aa16:	4680      	mov	r8, r0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff fdfd 	bl	800a618 <_Bfree>
 800aa1e:	4647      	mov	r7, r8
 800aa20:	106d      	asrs	r5, r5, #1
 800aa22:	d00b      	beq.n	800aa3c <__pow5mult+0xa0>
 800aa24:	6820      	ldr	r0, [r4, #0]
 800aa26:	b938      	cbnz	r0, 800aa38 <__pow5mult+0x9c>
 800aa28:	4622      	mov	r2, r4
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff ff0f 	bl	800a850 <__multiply>
 800aa32:	6020      	str	r0, [r4, #0]
 800aa34:	f8c0 9000 	str.w	r9, [r0]
 800aa38:	4604      	mov	r4, r0
 800aa3a:	e7e4      	b.n	800aa06 <__pow5mult+0x6a>
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa42:	bf00      	nop
 800aa44:	0800d3c8 	.word	0x0800d3c8
 800aa48:	0800d16e 	.word	0x0800d16e
 800aa4c:	0800d274 	.word	0x0800d274

0800aa50 <__lshift>:
 800aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	460c      	mov	r4, r1
 800aa56:	6849      	ldr	r1, [r1, #4]
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	4607      	mov	r7, r0
 800aa62:	4691      	mov	r9, r2
 800aa64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa68:	f108 0601 	add.w	r6, r8, #1
 800aa6c:	42b3      	cmp	r3, r6
 800aa6e:	db0b      	blt.n	800aa88 <__lshift+0x38>
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff fd91 	bl	800a598 <_Balloc>
 800aa76:	4605      	mov	r5, r0
 800aa78:	b948      	cbnz	r0, 800aa8e <__lshift+0x3e>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	4b28      	ldr	r3, [pc, #160]	; (800ab20 <__lshift+0xd0>)
 800aa7e:	4829      	ldr	r0, [pc, #164]	; (800ab24 <__lshift+0xd4>)
 800aa80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa84:	f001 f8a4 	bl	800bbd0 <__assert_func>
 800aa88:	3101      	adds	r1, #1
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	e7ee      	b.n	800aa6c <__lshift+0x1c>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f100 0114 	add.w	r1, r0, #20
 800aa94:	f100 0210 	add.w	r2, r0, #16
 800aa98:	4618      	mov	r0, r3
 800aa9a:	4553      	cmp	r3, sl
 800aa9c:	db33      	blt.n	800ab06 <__lshift+0xb6>
 800aa9e:	6920      	ldr	r0, [r4, #16]
 800aaa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaa4:	f104 0314 	add.w	r3, r4, #20
 800aaa8:	f019 091f 	ands.w	r9, r9, #31
 800aaac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aab4:	d02b      	beq.n	800ab0e <__lshift+0xbe>
 800aab6:	f1c9 0e20 	rsb	lr, r9, #32
 800aaba:	468a      	mov	sl, r1
 800aabc:	2200      	movs	r2, #0
 800aabe:	6818      	ldr	r0, [r3, #0]
 800aac0:	fa00 f009 	lsl.w	r0, r0, r9
 800aac4:	4302      	orrs	r2, r0
 800aac6:	f84a 2b04 	str.w	r2, [sl], #4
 800aaca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aace:	459c      	cmp	ip, r3
 800aad0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aad4:	d8f3      	bhi.n	800aabe <__lshift+0x6e>
 800aad6:	ebac 0304 	sub.w	r3, ip, r4
 800aada:	3b15      	subs	r3, #21
 800aadc:	f023 0303 	bic.w	r3, r3, #3
 800aae0:	3304      	adds	r3, #4
 800aae2:	f104 0015 	add.w	r0, r4, #21
 800aae6:	4584      	cmp	ip, r0
 800aae8:	bf38      	it	cc
 800aaea:	2304      	movcc	r3, #4
 800aaec:	50ca      	str	r2, [r1, r3]
 800aaee:	b10a      	cbz	r2, 800aaf4 <__lshift+0xa4>
 800aaf0:	f108 0602 	add.w	r6, r8, #2
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	612e      	str	r6, [r5, #16]
 800aafa:	4621      	mov	r1, r4
 800aafc:	f7ff fd8c 	bl	800a618 <_Bfree>
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	e7c5      	b.n	800aa9a <__lshift+0x4a>
 800ab0e:	3904      	subs	r1, #4
 800ab10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab18:	459c      	cmp	ip, r3
 800ab1a:	d8f9      	bhi.n	800ab10 <__lshift+0xc0>
 800ab1c:	e7ea      	b.n	800aaf4 <__lshift+0xa4>
 800ab1e:	bf00      	nop
 800ab20:	0800d1e4 	.word	0x0800d1e4
 800ab24:	0800d274 	.word	0x0800d274

0800ab28 <__mcmp>:
 800ab28:	b530      	push	{r4, r5, lr}
 800ab2a:	6902      	ldr	r2, [r0, #16]
 800ab2c:	690c      	ldr	r4, [r1, #16]
 800ab2e:	1b12      	subs	r2, r2, r4
 800ab30:	d10e      	bne.n	800ab50 <__mcmp+0x28>
 800ab32:	f100 0314 	add.w	r3, r0, #20
 800ab36:	3114      	adds	r1, #20
 800ab38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab48:	42a5      	cmp	r5, r4
 800ab4a:	d003      	beq.n	800ab54 <__mcmp+0x2c>
 800ab4c:	d305      	bcc.n	800ab5a <__mcmp+0x32>
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4610      	mov	r0, r2
 800ab52:	bd30      	pop	{r4, r5, pc}
 800ab54:	4283      	cmp	r3, r0
 800ab56:	d3f3      	bcc.n	800ab40 <__mcmp+0x18>
 800ab58:	e7fa      	b.n	800ab50 <__mcmp+0x28>
 800ab5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5e:	e7f7      	b.n	800ab50 <__mcmp+0x28>

0800ab60 <__mdiff>:
 800ab60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	460c      	mov	r4, r1
 800ab66:	4606      	mov	r6, r0
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4617      	mov	r7, r2
 800ab6e:	f7ff ffdb 	bl	800ab28 <__mcmp>
 800ab72:	1e05      	subs	r5, r0, #0
 800ab74:	d110      	bne.n	800ab98 <__mdiff+0x38>
 800ab76:	4629      	mov	r1, r5
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7ff fd0d 	bl	800a598 <_Balloc>
 800ab7e:	b930      	cbnz	r0, 800ab8e <__mdiff+0x2e>
 800ab80:	4b39      	ldr	r3, [pc, #228]	; (800ac68 <__mdiff+0x108>)
 800ab82:	4602      	mov	r2, r0
 800ab84:	f240 2132 	movw	r1, #562	; 0x232
 800ab88:	4838      	ldr	r0, [pc, #224]	; (800ac6c <__mdiff+0x10c>)
 800ab8a:	f001 f821 	bl	800bbd0 <__assert_func>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab98:	bfa4      	itt	ge
 800ab9a:	463b      	movge	r3, r7
 800ab9c:	4627      	movge	r7, r4
 800ab9e:	4630      	mov	r0, r6
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	bfa6      	itte	ge
 800aba4:	461c      	movge	r4, r3
 800aba6:	2500      	movge	r5, #0
 800aba8:	2501      	movlt	r5, #1
 800abaa:	f7ff fcf5 	bl	800a598 <_Balloc>
 800abae:	b920      	cbnz	r0, 800abba <__mdiff+0x5a>
 800abb0:	4b2d      	ldr	r3, [pc, #180]	; (800ac68 <__mdiff+0x108>)
 800abb2:	4602      	mov	r2, r0
 800abb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abb8:	e7e6      	b.n	800ab88 <__mdiff+0x28>
 800abba:	693e      	ldr	r6, [r7, #16]
 800abbc:	60c5      	str	r5, [r0, #12]
 800abbe:	6925      	ldr	r5, [r4, #16]
 800abc0:	f107 0114 	add.w	r1, r7, #20
 800abc4:	f104 0914 	add.w	r9, r4, #20
 800abc8:	f100 0e14 	add.w	lr, r0, #20
 800abcc:	f107 0210 	add.w	r2, r7, #16
 800abd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800abd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800abd8:	46f2      	mov	sl, lr
 800abda:	2700      	movs	r7, #0
 800abdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800abe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abe4:	fa1f f883 	uxth.w	r8, r3
 800abe8:	fa17 f78b 	uxtah	r7, r7, fp
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	eba7 0808 	sub.w	r8, r7, r8
 800abf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abfa:	fa1f f888 	uxth.w	r8, r8
 800abfe:	141f      	asrs	r7, r3, #16
 800ac00:	454d      	cmp	r5, r9
 800ac02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac06:	f84a 3b04 	str.w	r3, [sl], #4
 800ac0a:	d8e7      	bhi.n	800abdc <__mdiff+0x7c>
 800ac0c:	1b2b      	subs	r3, r5, r4
 800ac0e:	3b15      	subs	r3, #21
 800ac10:	f023 0303 	bic.w	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	3415      	adds	r4, #21
 800ac18:	42a5      	cmp	r5, r4
 800ac1a:	bf38      	it	cc
 800ac1c:	2304      	movcc	r3, #4
 800ac1e:	4419      	add	r1, r3
 800ac20:	4473      	add	r3, lr
 800ac22:	469e      	mov	lr, r3
 800ac24:	460d      	mov	r5, r1
 800ac26:	4565      	cmp	r5, ip
 800ac28:	d30e      	bcc.n	800ac48 <__mdiff+0xe8>
 800ac2a:	f10c 0203 	add.w	r2, ip, #3
 800ac2e:	1a52      	subs	r2, r2, r1
 800ac30:	f022 0203 	bic.w	r2, r2, #3
 800ac34:	3903      	subs	r1, #3
 800ac36:	458c      	cmp	ip, r1
 800ac38:	bf38      	it	cc
 800ac3a:	2200      	movcc	r2, #0
 800ac3c:	441a      	add	r2, r3
 800ac3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac42:	b17b      	cbz	r3, 800ac64 <__mdiff+0x104>
 800ac44:	6106      	str	r6, [r0, #16]
 800ac46:	e7a5      	b.n	800ab94 <__mdiff+0x34>
 800ac48:	f855 8b04 	ldr.w	r8, [r5], #4
 800ac4c:	fa17 f488 	uxtah	r4, r7, r8
 800ac50:	1422      	asrs	r2, r4, #16
 800ac52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ac56:	b2a4      	uxth	r4, r4
 800ac58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ac5c:	f84e 4b04 	str.w	r4, [lr], #4
 800ac60:	1417      	asrs	r7, r2, #16
 800ac62:	e7e0      	b.n	800ac26 <__mdiff+0xc6>
 800ac64:	3e01      	subs	r6, #1
 800ac66:	e7ea      	b.n	800ac3e <__mdiff+0xde>
 800ac68:	0800d1e4 	.word	0x0800d1e4
 800ac6c:	0800d274 	.word	0x0800d274

0800ac70 <__ulp>:
 800ac70:	b082      	sub	sp, #8
 800ac72:	ed8d 0b00 	vstr	d0, [sp]
 800ac76:	9b01      	ldr	r3, [sp, #4]
 800ac78:	4912      	ldr	r1, [pc, #72]	; (800acc4 <__ulp+0x54>)
 800ac7a:	4019      	ands	r1, r3
 800ac7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac80:	2900      	cmp	r1, #0
 800ac82:	dd05      	ble.n	800ac90 <__ulp+0x20>
 800ac84:	2200      	movs	r2, #0
 800ac86:	460b      	mov	r3, r1
 800ac88:	ec43 2b10 	vmov	d0, r2, r3
 800ac8c:	b002      	add	sp, #8
 800ac8e:	4770      	bx	lr
 800ac90:	4249      	negs	r1, r1
 800ac92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac96:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	da04      	bge.n	800acae <__ulp+0x3e>
 800aca4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aca8:	fa41 f300 	asr.w	r3, r1, r0
 800acac:	e7ec      	b.n	800ac88 <__ulp+0x18>
 800acae:	f1a0 0114 	sub.w	r1, r0, #20
 800acb2:	291e      	cmp	r1, #30
 800acb4:	bfda      	itte	le
 800acb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800acba:	fa20 f101 	lsrle.w	r1, r0, r1
 800acbe:	2101      	movgt	r1, #1
 800acc0:	460a      	mov	r2, r1
 800acc2:	e7e1      	b.n	800ac88 <__ulp+0x18>
 800acc4:	7ff00000 	.word	0x7ff00000

0800acc8 <__b2d>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	6905      	ldr	r5, [r0, #16]
 800accc:	f100 0714 	add.w	r7, r0, #20
 800acd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800acd4:	1f2e      	subs	r6, r5, #4
 800acd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800acda:	4620      	mov	r0, r4
 800acdc:	f7ff fd52 	bl	800a784 <__hi0bits>
 800ace0:	f1c0 0320 	rsb	r3, r0, #32
 800ace4:	280a      	cmp	r0, #10
 800ace6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ad64 <__b2d+0x9c>
 800acea:	600b      	str	r3, [r1, #0]
 800acec:	dc14      	bgt.n	800ad18 <__b2d+0x50>
 800acee:	f1c0 0e0b 	rsb	lr, r0, #11
 800acf2:	fa24 f10e 	lsr.w	r1, r4, lr
 800acf6:	42b7      	cmp	r7, r6
 800acf8:	ea41 030c 	orr.w	r3, r1, ip
 800acfc:	bf34      	ite	cc
 800acfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad02:	2100      	movcs	r1, #0
 800ad04:	3015      	adds	r0, #21
 800ad06:	fa04 f000 	lsl.w	r0, r4, r0
 800ad0a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ad0e:	ea40 0201 	orr.w	r2, r0, r1
 800ad12:	ec43 2b10 	vmov	d0, r2, r3
 800ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad18:	42b7      	cmp	r7, r6
 800ad1a:	bf3a      	itte	cc
 800ad1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad20:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad24:	2100      	movcs	r1, #0
 800ad26:	380b      	subs	r0, #11
 800ad28:	d017      	beq.n	800ad5a <__b2d+0x92>
 800ad2a:	f1c0 0c20 	rsb	ip, r0, #32
 800ad2e:	fa04 f500 	lsl.w	r5, r4, r0
 800ad32:	42be      	cmp	r6, r7
 800ad34:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad38:	ea45 0504 	orr.w	r5, r5, r4
 800ad3c:	bf8c      	ite	hi
 800ad3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad42:	2400      	movls	r4, #0
 800ad44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad48:	fa01 f000 	lsl.w	r0, r1, r0
 800ad4c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad54:	ea40 0204 	orr.w	r2, r0, r4
 800ad58:	e7db      	b.n	800ad12 <__b2d+0x4a>
 800ad5a:	ea44 030c 	orr.w	r3, r4, ip
 800ad5e:	460a      	mov	r2, r1
 800ad60:	e7d7      	b.n	800ad12 <__b2d+0x4a>
 800ad62:	bf00      	nop
 800ad64:	3ff00000 	.word	0x3ff00000

0800ad68 <__d2b>:
 800ad68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4689      	mov	r9, r1
 800ad6e:	2101      	movs	r1, #1
 800ad70:	ec57 6b10 	vmov	r6, r7, d0
 800ad74:	4690      	mov	r8, r2
 800ad76:	f7ff fc0f 	bl	800a598 <_Balloc>
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	b930      	cbnz	r0, 800ad8c <__d2b+0x24>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4b25      	ldr	r3, [pc, #148]	; (800ae18 <__d2b+0xb0>)
 800ad82:	4826      	ldr	r0, [pc, #152]	; (800ae1c <__d2b+0xb4>)
 800ad84:	f240 310a 	movw	r1, #778	; 0x30a
 800ad88:	f000 ff22 	bl	800bbd0 <__assert_func>
 800ad8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad94:	bb35      	cbnz	r5, 800ade4 <__d2b+0x7c>
 800ad96:	2e00      	cmp	r6, #0
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	d028      	beq.n	800adee <__d2b+0x86>
 800ad9c:	4668      	mov	r0, sp
 800ad9e:	9600      	str	r6, [sp, #0]
 800ada0:	f7ff fd10 	bl	800a7c4 <__lo0bits>
 800ada4:	9900      	ldr	r1, [sp, #0]
 800ada6:	b300      	cbz	r0, 800adea <__d2b+0x82>
 800ada8:	9a01      	ldr	r2, [sp, #4]
 800adaa:	f1c0 0320 	rsb	r3, r0, #32
 800adae:	fa02 f303 	lsl.w	r3, r2, r3
 800adb2:	430b      	orrs	r3, r1
 800adb4:	40c2      	lsrs	r2, r0
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	9201      	str	r2, [sp, #4]
 800adba:	9b01      	ldr	r3, [sp, #4]
 800adbc:	61a3      	str	r3, [r4, #24]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2202      	movne	r2, #2
 800adc4:	2201      	moveq	r2, #1
 800adc6:	6122      	str	r2, [r4, #16]
 800adc8:	b1d5      	cbz	r5, 800ae00 <__d2b+0x98>
 800adca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adce:	4405      	add	r5, r0
 800add0:	f8c9 5000 	str.w	r5, [r9]
 800add4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800add8:	f8c8 0000 	str.w	r0, [r8]
 800addc:	4620      	mov	r0, r4
 800adde:	b003      	add	sp, #12
 800ade0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ade4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ade8:	e7d5      	b.n	800ad96 <__d2b+0x2e>
 800adea:	6161      	str	r1, [r4, #20]
 800adec:	e7e5      	b.n	800adba <__d2b+0x52>
 800adee:	a801      	add	r0, sp, #4
 800adf0:	f7ff fce8 	bl	800a7c4 <__lo0bits>
 800adf4:	9b01      	ldr	r3, [sp, #4]
 800adf6:	6163      	str	r3, [r4, #20]
 800adf8:	2201      	movs	r2, #1
 800adfa:	6122      	str	r2, [r4, #16]
 800adfc:	3020      	adds	r0, #32
 800adfe:	e7e3      	b.n	800adc8 <__d2b+0x60>
 800ae00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae08:	f8c9 0000 	str.w	r0, [r9]
 800ae0c:	6918      	ldr	r0, [r3, #16]
 800ae0e:	f7ff fcb9 	bl	800a784 <__hi0bits>
 800ae12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae16:	e7df      	b.n	800add8 <__d2b+0x70>
 800ae18:	0800d1e4 	.word	0x0800d1e4
 800ae1c:	0800d274 	.word	0x0800d274

0800ae20 <__ratio>:
 800ae20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	468a      	mov	sl, r1
 800ae26:	4669      	mov	r1, sp
 800ae28:	4683      	mov	fp, r0
 800ae2a:	f7ff ff4d 	bl	800acc8 <__b2d>
 800ae2e:	a901      	add	r1, sp, #4
 800ae30:	4650      	mov	r0, sl
 800ae32:	ec59 8b10 	vmov	r8, r9, d0
 800ae36:	ee10 6a10 	vmov	r6, s0
 800ae3a:	f7ff ff45 	bl	800acc8 <__b2d>
 800ae3e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ae42:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ae46:	eba3 0c02 	sub.w	ip, r3, r2
 800ae4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae54:	ec55 4b10 	vmov	r4, r5, d0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	ee10 0a10 	vmov	r0, s0
 800ae5e:	bfce      	itee	gt
 800ae60:	464a      	movgt	r2, r9
 800ae62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae66:	462a      	movle	r2, r5
 800ae68:	464f      	mov	r7, r9
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	bfcc      	ite	gt
 800ae6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ae72:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ae76:	ec47 6b17 	vmov	d7, r6, r7
 800ae7a:	ec41 0b16 	vmov	d6, r0, r1
 800ae7e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800ae82:	b003      	add	sp, #12
 800ae84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae88 <__copybits>:
 800ae88:	3901      	subs	r1, #1
 800ae8a:	b570      	push	{r4, r5, r6, lr}
 800ae8c:	1149      	asrs	r1, r1, #5
 800ae8e:	6914      	ldr	r4, [r2, #16]
 800ae90:	3101      	adds	r1, #1
 800ae92:	f102 0314 	add.w	r3, r2, #20
 800ae96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae9e:	1f05      	subs	r5, r0, #4
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d30c      	bcc.n	800aebe <__copybits+0x36>
 800aea4:	1aa3      	subs	r3, r4, r2
 800aea6:	3b11      	subs	r3, #17
 800aea8:	f023 0303 	bic.w	r3, r3, #3
 800aeac:	3211      	adds	r2, #17
 800aeae:	42a2      	cmp	r2, r4
 800aeb0:	bf88      	it	hi
 800aeb2:	2300      	movhi	r3, #0
 800aeb4:	4418      	add	r0, r3
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	4288      	cmp	r0, r1
 800aeba:	d305      	bcc.n	800aec8 <__copybits+0x40>
 800aebc:	bd70      	pop	{r4, r5, r6, pc}
 800aebe:	f853 6b04 	ldr.w	r6, [r3], #4
 800aec2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aec6:	e7eb      	b.n	800aea0 <__copybits+0x18>
 800aec8:	f840 3b04 	str.w	r3, [r0], #4
 800aecc:	e7f4      	b.n	800aeb8 <__copybits+0x30>

0800aece <__any_on>:
 800aece:	f100 0214 	add.w	r2, r0, #20
 800aed2:	6900      	ldr	r0, [r0, #16]
 800aed4:	114b      	asrs	r3, r1, #5
 800aed6:	4298      	cmp	r0, r3
 800aed8:	b510      	push	{r4, lr}
 800aeda:	db11      	blt.n	800af00 <__any_on+0x32>
 800aedc:	dd0a      	ble.n	800aef4 <__any_on+0x26>
 800aede:	f011 011f 	ands.w	r1, r1, #31
 800aee2:	d007      	beq.n	800aef4 <__any_on+0x26>
 800aee4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aee8:	fa24 f001 	lsr.w	r0, r4, r1
 800aeec:	fa00 f101 	lsl.w	r1, r0, r1
 800aef0:	428c      	cmp	r4, r1
 800aef2:	d10b      	bne.n	800af0c <__any_on+0x3e>
 800aef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d803      	bhi.n	800af04 <__any_on+0x36>
 800aefc:	2000      	movs	r0, #0
 800aefe:	bd10      	pop	{r4, pc}
 800af00:	4603      	mov	r3, r0
 800af02:	e7f7      	b.n	800aef4 <__any_on+0x26>
 800af04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af08:	2900      	cmp	r1, #0
 800af0a:	d0f5      	beq.n	800aef8 <__any_on+0x2a>
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7f6      	b.n	800aefe <__any_on+0x30>

0800af10 <_calloc_r>:
 800af10:	b513      	push	{r0, r1, r4, lr}
 800af12:	434a      	muls	r2, r1
 800af14:	4611      	mov	r1, r2
 800af16:	9201      	str	r2, [sp, #4]
 800af18:	f000 f85a 	bl	800afd0 <_malloc_r>
 800af1c:	4604      	mov	r4, r0
 800af1e:	b118      	cbz	r0, 800af28 <_calloc_r+0x18>
 800af20:	9a01      	ldr	r2, [sp, #4]
 800af22:	2100      	movs	r1, #0
 800af24:	f7fc fbca 	bl	80076bc <memset>
 800af28:	4620      	mov	r0, r4
 800af2a:	b002      	add	sp, #8
 800af2c:	bd10      	pop	{r4, pc}
	...

0800af30 <_free_r>:
 800af30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af32:	2900      	cmp	r1, #0
 800af34:	d048      	beq.n	800afc8 <_free_r+0x98>
 800af36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f1a1 0404 	sub.w	r4, r1, #4
 800af42:	bfb8      	it	lt
 800af44:	18e4      	addlt	r4, r4, r3
 800af46:	f001 f847 	bl	800bfd8 <__malloc_lock>
 800af4a:	4a20      	ldr	r2, [pc, #128]	; (800afcc <_free_r+0x9c>)
 800af4c:	9801      	ldr	r0, [sp, #4]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	4615      	mov	r5, r2
 800af52:	b933      	cbnz	r3, 800af62 <_free_r+0x32>
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	6014      	str	r4, [r2, #0]
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af5e:	f001 b841 	b.w	800bfe4 <__malloc_unlock>
 800af62:	42a3      	cmp	r3, r4
 800af64:	d90b      	bls.n	800af7e <_free_r+0x4e>
 800af66:	6821      	ldr	r1, [r4, #0]
 800af68:	1862      	adds	r2, r4, r1
 800af6a:	4293      	cmp	r3, r2
 800af6c:	bf04      	itt	eq
 800af6e:	681a      	ldreq	r2, [r3, #0]
 800af70:	685b      	ldreq	r3, [r3, #4]
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	bf04      	itt	eq
 800af76:	1852      	addeq	r2, r2, r1
 800af78:	6022      	streq	r2, [r4, #0]
 800af7a:	602c      	str	r4, [r5, #0]
 800af7c:	e7ec      	b.n	800af58 <_free_r+0x28>
 800af7e:	461a      	mov	r2, r3
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b10b      	cbz	r3, 800af88 <_free_r+0x58>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d9fa      	bls.n	800af7e <_free_r+0x4e>
 800af88:	6811      	ldr	r1, [r2, #0]
 800af8a:	1855      	adds	r5, r2, r1
 800af8c:	42a5      	cmp	r5, r4
 800af8e:	d10b      	bne.n	800afa8 <_free_r+0x78>
 800af90:	6824      	ldr	r4, [r4, #0]
 800af92:	4421      	add	r1, r4
 800af94:	1854      	adds	r4, r2, r1
 800af96:	42a3      	cmp	r3, r4
 800af98:	6011      	str	r1, [r2, #0]
 800af9a:	d1dd      	bne.n	800af58 <_free_r+0x28>
 800af9c:	681c      	ldr	r4, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	6053      	str	r3, [r2, #4]
 800afa2:	4421      	add	r1, r4
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	e7d7      	b.n	800af58 <_free_r+0x28>
 800afa8:	d902      	bls.n	800afb0 <_free_r+0x80>
 800afaa:	230c      	movs	r3, #12
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	e7d3      	b.n	800af58 <_free_r+0x28>
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf04      	itt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	bf04      	itt	eq
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	6054      	str	r4, [r2, #4]
 800afc6:	e7c7      	b.n	800af58 <_free_r+0x28>
 800afc8:	b003      	add	sp, #12
 800afca:	bd30      	pop	{r4, r5, pc}
 800afcc:	20000298 	.word	0x20000298

0800afd0 <_malloc_r>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	1ccd      	adds	r5, r1, #3
 800afd4:	f025 0503 	bic.w	r5, r5, #3
 800afd8:	3508      	adds	r5, #8
 800afda:	2d0c      	cmp	r5, #12
 800afdc:	bf38      	it	cc
 800afde:	250c      	movcc	r5, #12
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	4606      	mov	r6, r0
 800afe4:	db01      	blt.n	800afea <_malloc_r+0x1a>
 800afe6:	42a9      	cmp	r1, r5
 800afe8:	d903      	bls.n	800aff2 <_malloc_r+0x22>
 800afea:	230c      	movs	r3, #12
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	2000      	movs	r0, #0
 800aff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff2:	f000 fff1 	bl	800bfd8 <__malloc_lock>
 800aff6:	4921      	ldr	r1, [pc, #132]	; (800b07c <_malloc_r+0xac>)
 800aff8:	680a      	ldr	r2, [r1, #0]
 800affa:	4614      	mov	r4, r2
 800affc:	b99c      	cbnz	r4, 800b026 <_malloc_r+0x56>
 800affe:	4f20      	ldr	r7, [pc, #128]	; (800b080 <_malloc_r+0xb0>)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	b923      	cbnz	r3, 800b00e <_malloc_r+0x3e>
 800b004:	4621      	mov	r1, r4
 800b006:	4630      	mov	r0, r6
 800b008:	f000 fcd2 	bl	800b9b0 <_sbrk_r>
 800b00c:	6038      	str	r0, [r7, #0]
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f000 fccd 	bl	800b9b0 <_sbrk_r>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d123      	bne.n	800b062 <_malloc_r+0x92>
 800b01a:	230c      	movs	r3, #12
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	4630      	mov	r0, r6
 800b020:	f000 ffe0 	bl	800bfe4 <__malloc_unlock>
 800b024:	e7e3      	b.n	800afee <_malloc_r+0x1e>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	1b5b      	subs	r3, r3, r5
 800b02a:	d417      	bmi.n	800b05c <_malloc_r+0x8c>
 800b02c:	2b0b      	cmp	r3, #11
 800b02e:	d903      	bls.n	800b038 <_malloc_r+0x68>
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	441c      	add	r4, r3
 800b034:	6025      	str	r5, [r4, #0]
 800b036:	e004      	b.n	800b042 <_malloc_r+0x72>
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	42a2      	cmp	r2, r4
 800b03c:	bf0c      	ite	eq
 800b03e:	600b      	streq	r3, [r1, #0]
 800b040:	6053      	strne	r3, [r2, #4]
 800b042:	4630      	mov	r0, r6
 800b044:	f000 ffce 	bl	800bfe4 <__malloc_unlock>
 800b048:	f104 000b 	add.w	r0, r4, #11
 800b04c:	1d23      	adds	r3, r4, #4
 800b04e:	f020 0007 	bic.w	r0, r0, #7
 800b052:	1ac2      	subs	r2, r0, r3
 800b054:	d0cc      	beq.n	800aff0 <_malloc_r+0x20>
 800b056:	1a1b      	subs	r3, r3, r0
 800b058:	50a3      	str	r3, [r4, r2]
 800b05a:	e7c9      	b.n	800aff0 <_malloc_r+0x20>
 800b05c:	4622      	mov	r2, r4
 800b05e:	6864      	ldr	r4, [r4, #4]
 800b060:	e7cc      	b.n	800affc <_malloc_r+0x2c>
 800b062:	1cc4      	adds	r4, r0, #3
 800b064:	f024 0403 	bic.w	r4, r4, #3
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d0e3      	beq.n	800b034 <_malloc_r+0x64>
 800b06c:	1a21      	subs	r1, r4, r0
 800b06e:	4630      	mov	r0, r6
 800b070:	f000 fc9e 	bl	800b9b0 <_sbrk_r>
 800b074:	3001      	adds	r0, #1
 800b076:	d1dd      	bne.n	800b034 <_malloc_r+0x64>
 800b078:	e7cf      	b.n	800b01a <_malloc_r+0x4a>
 800b07a:	bf00      	nop
 800b07c:	20000298 	.word	0x20000298
 800b080:	2000029c 	.word	0x2000029c

0800b084 <__ssputs_r>:
 800b084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b088:	688e      	ldr	r6, [r1, #8]
 800b08a:	429e      	cmp	r6, r3
 800b08c:	4682      	mov	sl, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	4690      	mov	r8, r2
 800b092:	461f      	mov	r7, r3
 800b094:	d838      	bhi.n	800b108 <__ssputs_r+0x84>
 800b096:	898a      	ldrh	r2, [r1, #12]
 800b098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b09c:	d032      	beq.n	800b104 <__ssputs_r+0x80>
 800b09e:	6825      	ldr	r5, [r4, #0]
 800b0a0:	6909      	ldr	r1, [r1, #16]
 800b0a2:	eba5 0901 	sub.w	r9, r5, r1
 800b0a6:	6965      	ldr	r5, [r4, #20]
 800b0a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	444b      	add	r3, r9
 800b0b4:	106d      	asrs	r5, r5, #1
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	bf38      	it	cc
 800b0ba:	461d      	movcc	r5, r3
 800b0bc:	0553      	lsls	r3, r2, #21
 800b0be:	d531      	bpl.n	800b124 <__ssputs_r+0xa0>
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7ff ff85 	bl	800afd0 <_malloc_r>
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	b950      	cbnz	r0, 800b0e0 <__ssputs_r+0x5c>
 800b0ca:	230c      	movs	r3, #12
 800b0cc:	f8ca 3000 	str.w	r3, [sl]
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e0:	6921      	ldr	r1, [r4, #16]
 800b0e2:	464a      	mov	r2, r9
 800b0e4:	f7ff fa4a 	bl	800a57c <memcpy>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	6126      	str	r6, [r4, #16]
 800b0f6:	6165      	str	r5, [r4, #20]
 800b0f8:	444e      	add	r6, r9
 800b0fa:	eba5 0509 	sub.w	r5, r5, r9
 800b0fe:	6026      	str	r6, [r4, #0]
 800b100:	60a5      	str	r5, [r4, #8]
 800b102:	463e      	mov	r6, r7
 800b104:	42be      	cmp	r6, r7
 800b106:	d900      	bls.n	800b10a <__ssputs_r+0x86>
 800b108:	463e      	mov	r6, r7
 800b10a:	4632      	mov	r2, r6
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	4641      	mov	r1, r8
 800b110:	f000 ff48 	bl	800bfa4 <memmove>
 800b114:	68a3      	ldr	r3, [r4, #8]
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	1b9b      	subs	r3, r3, r6
 800b11a:	4432      	add	r2, r6
 800b11c:	60a3      	str	r3, [r4, #8]
 800b11e:	6022      	str	r2, [r4, #0]
 800b120:	2000      	movs	r0, #0
 800b122:	e7db      	b.n	800b0dc <__ssputs_r+0x58>
 800b124:	462a      	mov	r2, r5
 800b126:	f000 ff63 	bl	800bff0 <_realloc_r>
 800b12a:	4606      	mov	r6, r0
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d1e1      	bne.n	800b0f4 <__ssputs_r+0x70>
 800b130:	6921      	ldr	r1, [r4, #16]
 800b132:	4650      	mov	r0, sl
 800b134:	f7ff fefc 	bl	800af30 <_free_r>
 800b138:	e7c7      	b.n	800b0ca <__ssputs_r+0x46>
	...

0800b13c <_svfiprintf_r>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4698      	mov	r8, r3
 800b142:	898b      	ldrh	r3, [r1, #12]
 800b144:	061b      	lsls	r3, r3, #24
 800b146:	b09d      	sub	sp, #116	; 0x74
 800b148:	4607      	mov	r7, r0
 800b14a:	460d      	mov	r5, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	d50e      	bpl.n	800b16e <_svfiprintf_r+0x32>
 800b150:	690b      	ldr	r3, [r1, #16]
 800b152:	b963      	cbnz	r3, 800b16e <_svfiprintf_r+0x32>
 800b154:	2140      	movs	r1, #64	; 0x40
 800b156:	f7ff ff3b 	bl	800afd0 <_malloc_r>
 800b15a:	6028      	str	r0, [r5, #0]
 800b15c:	6128      	str	r0, [r5, #16]
 800b15e:	b920      	cbnz	r0, 800b16a <_svfiprintf_r+0x2e>
 800b160:	230c      	movs	r3, #12
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	f04f 30ff 	mov.w	r0, #4294967295
 800b168:	e0d1      	b.n	800b30e <_svfiprintf_r+0x1d2>
 800b16a:	2340      	movs	r3, #64	; 0x40
 800b16c:	616b      	str	r3, [r5, #20]
 800b16e:	2300      	movs	r3, #0
 800b170:	9309      	str	r3, [sp, #36]	; 0x24
 800b172:	2320      	movs	r3, #32
 800b174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b178:	f8cd 800c 	str.w	r8, [sp, #12]
 800b17c:	2330      	movs	r3, #48	; 0x30
 800b17e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b328 <_svfiprintf_r+0x1ec>
 800b182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b186:	f04f 0901 	mov.w	r9, #1
 800b18a:	4623      	mov	r3, r4
 800b18c:	469a      	mov	sl, r3
 800b18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b192:	b10a      	cbz	r2, 800b198 <_svfiprintf_r+0x5c>
 800b194:	2a25      	cmp	r2, #37	; 0x25
 800b196:	d1f9      	bne.n	800b18c <_svfiprintf_r+0x50>
 800b198:	ebba 0b04 	subs.w	fp, sl, r4
 800b19c:	d00b      	beq.n	800b1b6 <_svfiprintf_r+0x7a>
 800b19e:	465b      	mov	r3, fp
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	f7ff ff6d 	bl	800b084 <__ssputs_r>
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	f000 80aa 	beq.w	800b304 <_svfiprintf_r+0x1c8>
 800b1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b2:	445a      	add	r2, fp
 800b1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f000 80a2 	beq.w	800b304 <_svfiprintf_r+0x1c8>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1ca:	f10a 0a01 	add.w	sl, sl, #1
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	9307      	str	r3, [sp, #28]
 800b1d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d8:	4654      	mov	r4, sl
 800b1da:	2205      	movs	r2, #5
 800b1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e0:	4851      	ldr	r0, [pc, #324]	; (800b328 <_svfiprintf_r+0x1ec>)
 800b1e2:	f7f5 f845 	bl	8000270 <memchr>
 800b1e6:	9a04      	ldr	r2, [sp, #16]
 800b1e8:	b9d8      	cbnz	r0, 800b222 <_svfiprintf_r+0xe6>
 800b1ea:	06d0      	lsls	r0, r2, #27
 800b1ec:	bf44      	itt	mi
 800b1ee:	2320      	movmi	r3, #32
 800b1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f4:	0711      	lsls	r1, r2, #28
 800b1f6:	bf44      	itt	mi
 800b1f8:	232b      	movmi	r3, #43	; 0x2b
 800b1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b202:	2b2a      	cmp	r3, #42	; 0x2a
 800b204:	d015      	beq.n	800b232 <_svfiprintf_r+0xf6>
 800b206:	9a07      	ldr	r2, [sp, #28]
 800b208:	4654      	mov	r4, sl
 800b20a:	2000      	movs	r0, #0
 800b20c:	f04f 0c0a 	mov.w	ip, #10
 800b210:	4621      	mov	r1, r4
 800b212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b216:	3b30      	subs	r3, #48	; 0x30
 800b218:	2b09      	cmp	r3, #9
 800b21a:	d94e      	bls.n	800b2ba <_svfiprintf_r+0x17e>
 800b21c:	b1b0      	cbz	r0, 800b24c <_svfiprintf_r+0x110>
 800b21e:	9207      	str	r2, [sp, #28]
 800b220:	e014      	b.n	800b24c <_svfiprintf_r+0x110>
 800b222:	eba0 0308 	sub.w	r3, r0, r8
 800b226:	fa09 f303 	lsl.w	r3, r9, r3
 800b22a:	4313      	orrs	r3, r2
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	46a2      	mov	sl, r4
 800b230:	e7d2      	b.n	800b1d8 <_svfiprintf_r+0x9c>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	1d19      	adds	r1, r3, #4
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	9103      	str	r1, [sp, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bfbb      	ittet	lt
 800b23e:	425b      	neglt	r3, r3
 800b240:	f042 0202 	orrlt.w	r2, r2, #2
 800b244:	9307      	strge	r3, [sp, #28]
 800b246:	9307      	strlt	r3, [sp, #28]
 800b248:	bfb8      	it	lt
 800b24a:	9204      	strlt	r2, [sp, #16]
 800b24c:	7823      	ldrb	r3, [r4, #0]
 800b24e:	2b2e      	cmp	r3, #46	; 0x2e
 800b250:	d10c      	bne.n	800b26c <_svfiprintf_r+0x130>
 800b252:	7863      	ldrb	r3, [r4, #1]
 800b254:	2b2a      	cmp	r3, #42	; 0x2a
 800b256:	d135      	bne.n	800b2c4 <_svfiprintf_r+0x188>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	9203      	str	r2, [sp, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfb8      	it	lt
 800b264:	f04f 33ff 	movlt.w	r3, #4294967295
 800b268:	3402      	adds	r4, #2
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b338 <_svfiprintf_r+0x1fc>
 800b270:	7821      	ldrb	r1, [r4, #0]
 800b272:	2203      	movs	r2, #3
 800b274:	4650      	mov	r0, sl
 800b276:	f7f4 fffb 	bl	8000270 <memchr>
 800b27a:	b140      	cbz	r0, 800b28e <_svfiprintf_r+0x152>
 800b27c:	2340      	movs	r3, #64	; 0x40
 800b27e:	eba0 000a 	sub.w	r0, r0, sl
 800b282:	fa03 f000 	lsl.w	r0, r3, r0
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	4303      	orrs	r3, r0
 800b28a:	3401      	adds	r4, #1
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b292:	4826      	ldr	r0, [pc, #152]	; (800b32c <_svfiprintf_r+0x1f0>)
 800b294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b298:	2206      	movs	r2, #6
 800b29a:	f7f4 ffe9 	bl	8000270 <memchr>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d038      	beq.n	800b314 <_svfiprintf_r+0x1d8>
 800b2a2:	4b23      	ldr	r3, [pc, #140]	; (800b330 <_svfiprintf_r+0x1f4>)
 800b2a4:	bb1b      	cbnz	r3, 800b2ee <_svfiprintf_r+0x1b2>
 800b2a6:	9b03      	ldr	r3, [sp, #12]
 800b2a8:	3307      	adds	r3, #7
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	9303      	str	r3, [sp, #12]
 800b2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b4:	4433      	add	r3, r6
 800b2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b8:	e767      	b.n	800b18a <_svfiprintf_r+0x4e>
 800b2ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2be:	460c      	mov	r4, r1
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	e7a5      	b.n	800b210 <_svfiprintf_r+0xd4>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	9305      	str	r3, [sp, #20]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	f04f 0c0a 	mov.w	ip, #10
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d6:	3a30      	subs	r2, #48	; 0x30
 800b2d8:	2a09      	cmp	r2, #9
 800b2da:	d903      	bls.n	800b2e4 <_svfiprintf_r+0x1a8>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0c5      	beq.n	800b26c <_svfiprintf_r+0x130>
 800b2e0:	9105      	str	r1, [sp, #20]
 800b2e2:	e7c3      	b.n	800b26c <_svfiprintf_r+0x130>
 800b2e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e7f0      	b.n	800b2d0 <_svfiprintf_r+0x194>
 800b2ee:	ab03      	add	r3, sp, #12
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <_svfiprintf_r+0x1f8>)
 800b2f6:	a904      	add	r1, sp, #16
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7fc fa79 	bl	80077f0 <_printf_float>
 800b2fe:	1c42      	adds	r2, r0, #1
 800b300:	4606      	mov	r6, r0
 800b302:	d1d6      	bne.n	800b2b2 <_svfiprintf_r+0x176>
 800b304:	89ab      	ldrh	r3, [r5, #12]
 800b306:	065b      	lsls	r3, r3, #25
 800b308:	f53f af2c 	bmi.w	800b164 <_svfiprintf_r+0x28>
 800b30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b30e:	b01d      	add	sp, #116	; 0x74
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	ab03      	add	r3, sp, #12
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	462a      	mov	r2, r5
 800b31a:	4b06      	ldr	r3, [pc, #24]	; (800b334 <_svfiprintf_r+0x1f8>)
 800b31c:	a904      	add	r1, sp, #16
 800b31e:	4638      	mov	r0, r7
 800b320:	f7fc fcf2 	bl	8007d08 <_printf_i>
 800b324:	e7eb      	b.n	800b2fe <_svfiprintf_r+0x1c2>
 800b326:	bf00      	nop
 800b328:	0800d3d4 	.word	0x0800d3d4
 800b32c:	0800d3de 	.word	0x0800d3de
 800b330:	080077f1 	.word	0x080077f1
 800b334:	0800b085 	.word	0x0800b085
 800b338:	0800d3da 	.word	0x0800d3da

0800b33c <_sungetc_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	1c4b      	adds	r3, r1, #1
 800b340:	4614      	mov	r4, r2
 800b342:	d103      	bne.n	800b34c <_sungetc_r+0x10>
 800b344:	f04f 35ff 	mov.w	r5, #4294967295
 800b348:	4628      	mov	r0, r5
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	8993      	ldrh	r3, [r2, #12]
 800b34e:	f023 0320 	bic.w	r3, r3, #32
 800b352:	8193      	strh	r3, [r2, #12]
 800b354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b356:	6852      	ldr	r2, [r2, #4]
 800b358:	b2cd      	uxtb	r5, r1
 800b35a:	b18b      	cbz	r3, 800b380 <_sungetc_r+0x44>
 800b35c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b35e:	4293      	cmp	r3, r2
 800b360:	dd08      	ble.n	800b374 <_sungetc_r+0x38>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	6022      	str	r2, [r4, #0]
 800b368:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b36c:	6863      	ldr	r3, [r4, #4]
 800b36e:	3301      	adds	r3, #1
 800b370:	6063      	str	r3, [r4, #4]
 800b372:	e7e9      	b.n	800b348 <_sungetc_r+0xc>
 800b374:	4621      	mov	r1, r4
 800b376:	f000 fbe3 	bl	800bb40 <__submore>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0f1      	beq.n	800b362 <_sungetc_r+0x26>
 800b37e:	e7e1      	b.n	800b344 <_sungetc_r+0x8>
 800b380:	6921      	ldr	r1, [r4, #16]
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	b151      	cbz	r1, 800b39c <_sungetc_r+0x60>
 800b386:	4299      	cmp	r1, r3
 800b388:	d208      	bcs.n	800b39c <_sungetc_r+0x60>
 800b38a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b38e:	42a9      	cmp	r1, r5
 800b390:	d104      	bne.n	800b39c <_sungetc_r+0x60>
 800b392:	3b01      	subs	r3, #1
 800b394:	3201      	adds	r2, #1
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	6062      	str	r2, [r4, #4]
 800b39a:	e7d5      	b.n	800b348 <_sungetc_r+0xc>
 800b39c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b3aa:	4623      	mov	r3, r4
 800b3ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e7dc      	b.n	800b370 <_sungetc_r+0x34>

0800b3b6 <__ssrefill_r>:
 800b3b6:	b510      	push	{r4, lr}
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b3bc:	b169      	cbz	r1, 800b3da <__ssrefill_r+0x24>
 800b3be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c2:	4299      	cmp	r1, r3
 800b3c4:	d001      	beq.n	800b3ca <__ssrefill_r+0x14>
 800b3c6:	f7ff fdb3 	bl	800af30 <_free_r>
 800b3ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3cc:	6063      	str	r3, [r4, #4]
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3d2:	b113      	cbz	r3, 800b3da <__ssrefill_r+0x24>
 800b3d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b3d6:	6023      	str	r3, [r4, #0]
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	6923      	ldr	r3, [r4, #16]
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	6063      	str	r3, [r4, #4]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0320 	orr.w	r3, r3, #32
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	e7f3      	b.n	800b3d8 <__ssrefill_r+0x22>

0800b3f0 <__ssvfiscanf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b400:	49b2      	ldr	r1, [pc, #712]	; (800b6cc <__ssvfiscanf_r+0x2dc>)
 800b402:	91a0      	str	r1, [sp, #640]	; 0x280
 800b404:	f10d 0804 	add.w	r8, sp, #4
 800b408:	49b1      	ldr	r1, [pc, #708]	; (800b6d0 <__ssvfiscanf_r+0x2e0>)
 800b40a:	4fb2      	ldr	r7, [pc, #712]	; (800b6d4 <__ssvfiscanf_r+0x2e4>)
 800b40c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b6d8 <__ssvfiscanf_r+0x2e8>
 800b410:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b414:	4606      	mov	r6, r0
 800b416:	91a1      	str	r1, [sp, #644]	; 0x284
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	f892 a000 	ldrb.w	sl, [r2]
 800b41e:	f1ba 0f00 	cmp.w	sl, #0
 800b422:	f000 8151 	beq.w	800b6c8 <__ssvfiscanf_r+0x2d8>
 800b426:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b42a:	f013 0308 	ands.w	r3, r3, #8
 800b42e:	f102 0501 	add.w	r5, r2, #1
 800b432:	d019      	beq.n	800b468 <__ssvfiscanf_r+0x78>
 800b434:	6863      	ldr	r3, [r4, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	dd0f      	ble.n	800b45a <__ssvfiscanf_r+0x6a>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	781a      	ldrb	r2, [r3, #0]
 800b43e:	5cba      	ldrb	r2, [r7, r2]
 800b440:	0712      	lsls	r2, r2, #28
 800b442:	d401      	bmi.n	800b448 <__ssvfiscanf_r+0x58>
 800b444:	462a      	mov	r2, r5
 800b446:	e7e8      	b.n	800b41a <__ssvfiscanf_r+0x2a>
 800b448:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b44a:	3201      	adds	r2, #1
 800b44c:	9245      	str	r2, [sp, #276]	; 0x114
 800b44e:	6862      	ldr	r2, [r4, #4]
 800b450:	3301      	adds	r3, #1
 800b452:	3a01      	subs	r2, #1
 800b454:	6062      	str	r2, [r4, #4]
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	e7ec      	b.n	800b434 <__ssvfiscanf_r+0x44>
 800b45a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b45c:	4621      	mov	r1, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	4798      	blx	r3
 800b462:	2800      	cmp	r0, #0
 800b464:	d0e9      	beq.n	800b43a <__ssvfiscanf_r+0x4a>
 800b466:	e7ed      	b.n	800b444 <__ssvfiscanf_r+0x54>
 800b468:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b46c:	f040 8083 	bne.w	800b576 <__ssvfiscanf_r+0x186>
 800b470:	9341      	str	r3, [sp, #260]	; 0x104
 800b472:	9343      	str	r3, [sp, #268]	; 0x10c
 800b474:	7853      	ldrb	r3, [r2, #1]
 800b476:	2b2a      	cmp	r3, #42	; 0x2a
 800b478:	bf02      	ittt	eq
 800b47a:	2310      	moveq	r3, #16
 800b47c:	1c95      	addeq	r5, r2, #2
 800b47e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b480:	220a      	movs	r2, #10
 800b482:	46ab      	mov	fp, r5
 800b484:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b488:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b48c:	2b09      	cmp	r3, #9
 800b48e:	d91d      	bls.n	800b4cc <__ssvfiscanf_r+0xdc>
 800b490:	4891      	ldr	r0, [pc, #580]	; (800b6d8 <__ssvfiscanf_r+0x2e8>)
 800b492:	2203      	movs	r2, #3
 800b494:	f7f4 feec 	bl	8000270 <memchr>
 800b498:	b140      	cbz	r0, 800b4ac <__ssvfiscanf_r+0xbc>
 800b49a:	2301      	movs	r3, #1
 800b49c:	eba0 0009 	sub.w	r0, r0, r9
 800b4a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4a6:	4318      	orrs	r0, r3
 800b4a8:	9041      	str	r0, [sp, #260]	; 0x104
 800b4aa:	465d      	mov	r5, fp
 800b4ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b4b0:	2b78      	cmp	r3, #120	; 0x78
 800b4b2:	d806      	bhi.n	800b4c2 <__ssvfiscanf_r+0xd2>
 800b4b4:	2b57      	cmp	r3, #87	; 0x57
 800b4b6:	d810      	bhi.n	800b4da <__ssvfiscanf_r+0xea>
 800b4b8:	2b25      	cmp	r3, #37	; 0x25
 800b4ba:	d05c      	beq.n	800b576 <__ssvfiscanf_r+0x186>
 800b4bc:	d856      	bhi.n	800b56c <__ssvfiscanf_r+0x17c>
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d074      	beq.n	800b5ac <__ssvfiscanf_r+0x1bc>
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	9342      	str	r3, [sp, #264]	; 0x108
 800b4ca:	e081      	b.n	800b5d0 <__ssvfiscanf_r+0x1e0>
 800b4cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b4ce:	fb02 1303 	mla	r3, r2, r3, r1
 800b4d2:	3b30      	subs	r3, #48	; 0x30
 800b4d4:	9343      	str	r3, [sp, #268]	; 0x10c
 800b4d6:	465d      	mov	r5, fp
 800b4d8:	e7d3      	b.n	800b482 <__ssvfiscanf_r+0x92>
 800b4da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b4de:	2a20      	cmp	r2, #32
 800b4e0:	d8ef      	bhi.n	800b4c2 <__ssvfiscanf_r+0xd2>
 800b4e2:	a101      	add	r1, pc, #4	; (adr r1, 800b4e8 <__ssvfiscanf_r+0xf8>)
 800b4e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4e8:	0800b5bb 	.word	0x0800b5bb
 800b4ec:	0800b4c3 	.word	0x0800b4c3
 800b4f0:	0800b4c3 	.word	0x0800b4c3
 800b4f4:	0800b619 	.word	0x0800b619
 800b4f8:	0800b4c3 	.word	0x0800b4c3
 800b4fc:	0800b4c3 	.word	0x0800b4c3
 800b500:	0800b4c3 	.word	0x0800b4c3
 800b504:	0800b4c3 	.word	0x0800b4c3
 800b508:	0800b4c3 	.word	0x0800b4c3
 800b50c:	0800b4c3 	.word	0x0800b4c3
 800b510:	0800b4c3 	.word	0x0800b4c3
 800b514:	0800b62f 	.word	0x0800b62f
 800b518:	0800b605 	.word	0x0800b605
 800b51c:	0800b573 	.word	0x0800b573
 800b520:	0800b573 	.word	0x0800b573
 800b524:	0800b573 	.word	0x0800b573
 800b528:	0800b4c3 	.word	0x0800b4c3
 800b52c:	0800b609 	.word	0x0800b609
 800b530:	0800b4c3 	.word	0x0800b4c3
 800b534:	0800b4c3 	.word	0x0800b4c3
 800b538:	0800b4c3 	.word	0x0800b4c3
 800b53c:	0800b4c3 	.word	0x0800b4c3
 800b540:	0800b63f 	.word	0x0800b63f
 800b544:	0800b611 	.word	0x0800b611
 800b548:	0800b5b3 	.word	0x0800b5b3
 800b54c:	0800b4c3 	.word	0x0800b4c3
 800b550:	0800b4c3 	.word	0x0800b4c3
 800b554:	0800b63b 	.word	0x0800b63b
 800b558:	0800b4c3 	.word	0x0800b4c3
 800b55c:	0800b605 	.word	0x0800b605
 800b560:	0800b4c3 	.word	0x0800b4c3
 800b564:	0800b4c3 	.word	0x0800b4c3
 800b568:	0800b5bb 	.word	0x0800b5bb
 800b56c:	3b45      	subs	r3, #69	; 0x45
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d8a7      	bhi.n	800b4c2 <__ssvfiscanf_r+0xd2>
 800b572:	2305      	movs	r3, #5
 800b574:	e02b      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b576:	6863      	ldr	r3, [r4, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dd0d      	ble.n	800b598 <__ssvfiscanf_r+0x1a8>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	4552      	cmp	r2, sl
 800b582:	f040 80a1 	bne.w	800b6c8 <__ssvfiscanf_r+0x2d8>
 800b586:	3301      	adds	r3, #1
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b58e:	3a01      	subs	r2, #1
 800b590:	3301      	adds	r3, #1
 800b592:	6062      	str	r2, [r4, #4]
 800b594:	9345      	str	r3, [sp, #276]	; 0x114
 800b596:	e755      	b.n	800b444 <__ssvfiscanf_r+0x54>
 800b598:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	4798      	blx	r3
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0eb      	beq.n	800b57c <__ssvfiscanf_r+0x18c>
 800b5a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f040 8084 	bne.w	800b6b4 <__ssvfiscanf_r+0x2c4>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e086      	b.n	800b6c0 <__ssvfiscanf_r+0x2d0>
 800b5b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b5b4:	f042 0220 	orr.w	r2, r2, #32
 800b5b8:	9241      	str	r2, [sp, #260]	; 0x104
 800b5ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b5bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b5c2:	2210      	movs	r2, #16
 800b5c4:	2b6f      	cmp	r3, #111	; 0x6f
 800b5c6:	9242      	str	r2, [sp, #264]	; 0x108
 800b5c8:	bf34      	ite	cc
 800b5ca:	2303      	movcc	r3, #3
 800b5cc:	2304      	movcs	r3, #4
 800b5ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dd41      	ble.n	800b65a <__ssvfiscanf_r+0x26a>
 800b5d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5d8:	0659      	lsls	r1, r3, #25
 800b5da:	d404      	bmi.n	800b5e6 <__ssvfiscanf_r+0x1f6>
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	5cba      	ldrb	r2, [r7, r2]
 800b5e2:	0712      	lsls	r2, r2, #28
 800b5e4:	d440      	bmi.n	800b668 <__ssvfiscanf_r+0x278>
 800b5e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	dc4f      	bgt.n	800b68c <__ssvfiscanf_r+0x29c>
 800b5ec:	466b      	mov	r3, sp
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	a941      	add	r1, sp, #260	; 0x104
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f000 f874 	bl	800b6e0 <_scanf_chars>
 800b5f8:	2801      	cmp	r0, #1
 800b5fa:	d065      	beq.n	800b6c8 <__ssvfiscanf_r+0x2d8>
 800b5fc:	2802      	cmp	r0, #2
 800b5fe:	f47f af21 	bne.w	800b444 <__ssvfiscanf_r+0x54>
 800b602:	e7cf      	b.n	800b5a4 <__ssvfiscanf_r+0x1b4>
 800b604:	220a      	movs	r2, #10
 800b606:	e7dd      	b.n	800b5c4 <__ssvfiscanf_r+0x1d4>
 800b608:	2300      	movs	r3, #0
 800b60a:	9342      	str	r3, [sp, #264]	; 0x108
 800b60c:	2303      	movs	r3, #3
 800b60e:	e7de      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b610:	2308      	movs	r3, #8
 800b612:	9342      	str	r3, [sp, #264]	; 0x108
 800b614:	2304      	movs	r3, #4
 800b616:	e7da      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b618:	4629      	mov	r1, r5
 800b61a:	4640      	mov	r0, r8
 800b61c:	f000 f9d8 	bl	800b9d0 <__sccl>
 800b620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b626:	9341      	str	r3, [sp, #260]	; 0x104
 800b628:	4605      	mov	r5, r0
 800b62a:	2301      	movs	r3, #1
 800b62c:	e7cf      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b62e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	9341      	str	r3, [sp, #260]	; 0x104
 800b636:	2300      	movs	r3, #0
 800b638:	e7c9      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e7c7      	b.n	800b5ce <__ssvfiscanf_r+0x1de>
 800b63e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b640:	06c3      	lsls	r3, r0, #27
 800b642:	f53f aeff 	bmi.w	800b444 <__ssvfiscanf_r+0x54>
 800b646:	9b00      	ldr	r3, [sp, #0]
 800b648:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b64a:	1d19      	adds	r1, r3, #4
 800b64c:	9100      	str	r1, [sp, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	07c0      	lsls	r0, r0, #31
 800b652:	bf4c      	ite	mi
 800b654:	801a      	strhmi	r2, [r3, #0]
 800b656:	601a      	strpl	r2, [r3, #0]
 800b658:	e6f4      	b.n	800b444 <__ssvfiscanf_r+0x54>
 800b65a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b65c:	4621      	mov	r1, r4
 800b65e:	4630      	mov	r0, r6
 800b660:	4798      	blx	r3
 800b662:	2800      	cmp	r0, #0
 800b664:	d0b7      	beq.n	800b5d6 <__ssvfiscanf_r+0x1e6>
 800b666:	e79d      	b.n	800b5a4 <__ssvfiscanf_r+0x1b4>
 800b668:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b66a:	3201      	adds	r2, #1
 800b66c:	9245      	str	r2, [sp, #276]	; 0x114
 800b66e:	6862      	ldr	r2, [r4, #4]
 800b670:	3a01      	subs	r2, #1
 800b672:	2a00      	cmp	r2, #0
 800b674:	6062      	str	r2, [r4, #4]
 800b676:	dd02      	ble.n	800b67e <__ssvfiscanf_r+0x28e>
 800b678:	3301      	adds	r3, #1
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	e7ae      	b.n	800b5dc <__ssvfiscanf_r+0x1ec>
 800b67e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b680:	4621      	mov	r1, r4
 800b682:	4630      	mov	r0, r6
 800b684:	4798      	blx	r3
 800b686:	2800      	cmp	r0, #0
 800b688:	d0a8      	beq.n	800b5dc <__ssvfiscanf_r+0x1ec>
 800b68a:	e78b      	b.n	800b5a4 <__ssvfiscanf_r+0x1b4>
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	dc06      	bgt.n	800b69e <__ssvfiscanf_r+0x2ae>
 800b690:	466b      	mov	r3, sp
 800b692:	4622      	mov	r2, r4
 800b694:	a941      	add	r1, sp, #260	; 0x104
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f87a 	bl	800b790 <_scanf_i>
 800b69c:	e7ac      	b.n	800b5f8 <__ssvfiscanf_r+0x208>
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <__ssvfiscanf_r+0x2ec>)
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f43f aecf 	beq.w	800b444 <__ssvfiscanf_r+0x54>
 800b6a6:	466b      	mov	r3, sp
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	a941      	add	r1, sp, #260	; 0x104
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7fc fc51 	bl	8007f54 <_scanf_float>
 800b6b2:	e7a1      	b.n	800b5f8 <__ssvfiscanf_r+0x208>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b6ba:	bf18      	it	ne
 800b6bc:	f04f 30ff 	movne.w	r0, #4294967295
 800b6c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6ca:	e7f9      	b.n	800b6c0 <__ssvfiscanf_r+0x2d0>
 800b6cc:	0800b33d 	.word	0x0800b33d
 800b6d0:	0800b3b7 	.word	0x0800b3b7
 800b6d4:	0800d061 	.word	0x0800d061
 800b6d8:	0800d3da 	.word	0x0800d3da
 800b6dc:	08007f55 	.word	0x08007f55

0800b6e0 <_scanf_chars>:
 800b6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e4:	4615      	mov	r5, r2
 800b6e6:	688a      	ldr	r2, [r1, #8]
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	b932      	cbnz	r2, 800b6fc <_scanf_chars+0x1c>
 800b6ee:	698a      	ldr	r2, [r1, #24]
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	bf0c      	ite	eq
 800b6f4:	2201      	moveq	r2, #1
 800b6f6:	f04f 32ff 	movne.w	r2, #4294967295
 800b6fa:	608a      	str	r2, [r1, #8]
 800b6fc:	6822      	ldr	r2, [r4, #0]
 800b6fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b78c <_scanf_chars+0xac>
 800b702:	06d1      	lsls	r1, r2, #27
 800b704:	bf5f      	itttt	pl
 800b706:	681a      	ldrpl	r2, [r3, #0]
 800b708:	1d11      	addpl	r1, r2, #4
 800b70a:	6019      	strpl	r1, [r3, #0]
 800b70c:	6816      	ldrpl	r6, [r2, #0]
 800b70e:	2700      	movs	r7, #0
 800b710:	69a0      	ldr	r0, [r4, #24]
 800b712:	b188      	cbz	r0, 800b738 <_scanf_chars+0x58>
 800b714:	2801      	cmp	r0, #1
 800b716:	d107      	bne.n	800b728 <_scanf_chars+0x48>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	781a      	ldrb	r2, [r3, #0]
 800b71c:	6963      	ldr	r3, [r4, #20]
 800b71e:	5c9b      	ldrb	r3, [r3, r2]
 800b720:	b953      	cbnz	r3, 800b738 <_scanf_chars+0x58>
 800b722:	bb27      	cbnz	r7, 800b76e <_scanf_chars+0x8e>
 800b724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b728:	2802      	cmp	r0, #2
 800b72a:	d120      	bne.n	800b76e <_scanf_chars+0x8e>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b734:	071b      	lsls	r3, r3, #28
 800b736:	d41a      	bmi.n	800b76e <_scanf_chars+0x8e>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	06da      	lsls	r2, r3, #27
 800b73c:	bf5e      	ittt	pl
 800b73e:	682b      	ldrpl	r3, [r5, #0]
 800b740:	781b      	ldrbpl	r3, [r3, #0]
 800b742:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b746:	682a      	ldr	r2, [r5, #0]
 800b748:	686b      	ldr	r3, [r5, #4]
 800b74a:	3201      	adds	r2, #1
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	68a2      	ldr	r2, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	3a01      	subs	r2, #1
 800b754:	606b      	str	r3, [r5, #4]
 800b756:	3701      	adds	r7, #1
 800b758:	60a2      	str	r2, [r4, #8]
 800b75a:	b142      	cbz	r2, 800b76e <_scanf_chars+0x8e>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dcd7      	bgt.n	800b710 <_scanf_chars+0x30>
 800b760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b764:	4629      	mov	r1, r5
 800b766:	4640      	mov	r0, r8
 800b768:	4798      	blx	r3
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d0d0      	beq.n	800b710 <_scanf_chars+0x30>
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	f013 0310 	ands.w	r3, r3, #16
 800b774:	d105      	bne.n	800b782 <_scanf_chars+0xa2>
 800b776:	68e2      	ldr	r2, [r4, #12]
 800b778:	3201      	adds	r2, #1
 800b77a:	60e2      	str	r2, [r4, #12]
 800b77c:	69a2      	ldr	r2, [r4, #24]
 800b77e:	b102      	cbz	r2, 800b782 <_scanf_chars+0xa2>
 800b780:	7033      	strb	r3, [r6, #0]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	441f      	add	r7, r3
 800b786:	6127      	str	r7, [r4, #16]
 800b788:	2000      	movs	r0, #0
 800b78a:	e7cb      	b.n	800b724 <_scanf_chars+0x44>
 800b78c:	0800d061 	.word	0x0800d061

0800b790 <_scanf_i>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	4698      	mov	r8, r3
 800b796:	4b74      	ldr	r3, [pc, #464]	; (800b968 <_scanf_i+0x1d8>)
 800b798:	460c      	mov	r4, r1
 800b79a:	4682      	mov	sl, r0
 800b79c:	4616      	mov	r6, r2
 800b79e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	ab03      	add	r3, sp, #12
 800b7a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b7aa:	4b70      	ldr	r3, [pc, #448]	; (800b96c <_scanf_i+0x1dc>)
 800b7ac:	69a1      	ldr	r1, [r4, #24]
 800b7ae:	4a70      	ldr	r2, [pc, #448]	; (800b970 <_scanf_i+0x1e0>)
 800b7b0:	2903      	cmp	r1, #3
 800b7b2:	bf18      	it	ne
 800b7b4:	461a      	movne	r2, r3
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	9201      	str	r2, [sp, #4]
 800b7ba:	1e5a      	subs	r2, r3, #1
 800b7bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b7c0:	bf88      	it	hi
 800b7c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b7c6:	4627      	mov	r7, r4
 800b7c8:	bf82      	ittt	hi
 800b7ca:	eb03 0905 	addhi.w	r9, r3, r5
 800b7ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b7d2:	60a3      	strhi	r3, [r4, #8]
 800b7d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b7d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b7dc:	bf98      	it	ls
 800b7de:	f04f 0900 	movls.w	r9, #0
 800b7e2:	6023      	str	r3, [r4, #0]
 800b7e4:	463d      	mov	r5, r7
 800b7e6:	f04f 0b00 	mov.w	fp, #0
 800b7ea:	6831      	ldr	r1, [r6, #0]
 800b7ec:	ab03      	add	r3, sp, #12
 800b7ee:	7809      	ldrb	r1, [r1, #0]
 800b7f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	f7f4 fd3b 	bl	8000270 <memchr>
 800b7fa:	b328      	cbz	r0, 800b848 <_scanf_i+0xb8>
 800b7fc:	f1bb 0f01 	cmp.w	fp, #1
 800b800:	d159      	bne.n	800b8b6 <_scanf_i+0x126>
 800b802:	6862      	ldr	r2, [r4, #4]
 800b804:	b92a      	cbnz	r2, 800b812 <_scanf_i+0x82>
 800b806:	6822      	ldr	r2, [r4, #0]
 800b808:	2308      	movs	r3, #8
 800b80a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b80e:	6063      	str	r3, [r4, #4]
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b818:	6022      	str	r2, [r4, #0]
 800b81a:	68a2      	ldr	r2, [r4, #8]
 800b81c:	1e51      	subs	r1, r2, #1
 800b81e:	60a1      	str	r1, [r4, #8]
 800b820:	b192      	cbz	r2, 800b848 <_scanf_i+0xb8>
 800b822:	6832      	ldr	r2, [r6, #0]
 800b824:	1c51      	adds	r1, r2, #1
 800b826:	6031      	str	r1, [r6, #0]
 800b828:	7812      	ldrb	r2, [r2, #0]
 800b82a:	f805 2b01 	strb.w	r2, [r5], #1
 800b82e:	6872      	ldr	r2, [r6, #4]
 800b830:	3a01      	subs	r2, #1
 800b832:	2a00      	cmp	r2, #0
 800b834:	6072      	str	r2, [r6, #4]
 800b836:	dc07      	bgt.n	800b848 <_scanf_i+0xb8>
 800b838:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b83c:	4631      	mov	r1, r6
 800b83e:	4650      	mov	r0, sl
 800b840:	4790      	blx	r2
 800b842:	2800      	cmp	r0, #0
 800b844:	f040 8085 	bne.w	800b952 <_scanf_i+0x1c2>
 800b848:	f10b 0b01 	add.w	fp, fp, #1
 800b84c:	f1bb 0f03 	cmp.w	fp, #3
 800b850:	d1cb      	bne.n	800b7ea <_scanf_i+0x5a>
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	b90b      	cbnz	r3, 800b85a <_scanf_i+0xca>
 800b856:	230a      	movs	r3, #10
 800b858:	6063      	str	r3, [r4, #4]
 800b85a:	6863      	ldr	r3, [r4, #4]
 800b85c:	4945      	ldr	r1, [pc, #276]	; (800b974 <_scanf_i+0x1e4>)
 800b85e:	6960      	ldr	r0, [r4, #20]
 800b860:	1ac9      	subs	r1, r1, r3
 800b862:	f000 f8b5 	bl	800b9d0 <__sccl>
 800b866:	f04f 0b00 	mov.w	fp, #0
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	6822      	ldr	r2, [r4, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d03d      	beq.n	800b8ee <_scanf_i+0x15e>
 800b872:	6831      	ldr	r1, [r6, #0]
 800b874:	6960      	ldr	r0, [r4, #20]
 800b876:	f891 c000 	ldrb.w	ip, [r1]
 800b87a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b87e:	2800      	cmp	r0, #0
 800b880:	d035      	beq.n	800b8ee <_scanf_i+0x15e>
 800b882:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b886:	d124      	bne.n	800b8d2 <_scanf_i+0x142>
 800b888:	0510      	lsls	r0, r2, #20
 800b88a:	d522      	bpl.n	800b8d2 <_scanf_i+0x142>
 800b88c:	f10b 0b01 	add.w	fp, fp, #1
 800b890:	f1b9 0f00 	cmp.w	r9, #0
 800b894:	d003      	beq.n	800b89e <_scanf_i+0x10e>
 800b896:	3301      	adds	r3, #1
 800b898:	f109 39ff 	add.w	r9, r9, #4294967295
 800b89c:	60a3      	str	r3, [r4, #8]
 800b89e:	6873      	ldr	r3, [r6, #4]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	6073      	str	r3, [r6, #4]
 800b8a6:	dd1b      	ble.n	800b8e0 <_scanf_i+0x150>
 800b8a8:	6833      	ldr	r3, [r6, #0]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	6033      	str	r3, [r6, #0]
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	60a3      	str	r3, [r4, #8]
 800b8b4:	e7d9      	b.n	800b86a <_scanf_i+0xda>
 800b8b6:	f1bb 0f02 	cmp.w	fp, #2
 800b8ba:	d1ae      	bne.n	800b81a <_scanf_i+0x8a>
 800b8bc:	6822      	ldr	r2, [r4, #0]
 800b8be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b8c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b8c6:	d1bf      	bne.n	800b848 <_scanf_i+0xb8>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	6063      	str	r3, [r4, #4]
 800b8cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8d0:	e7a2      	b.n	800b818 <_scanf_i+0x88>
 800b8d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	780b      	ldrb	r3, [r1, #0]
 800b8da:	f805 3b01 	strb.w	r3, [r5], #1
 800b8de:	e7de      	b.n	800b89e <_scanf_i+0x10e>
 800b8e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	4798      	blx	r3
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0df      	beq.n	800b8ae <_scanf_i+0x11e>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	05d9      	lsls	r1, r3, #23
 800b8f2:	d50d      	bpl.n	800b910 <_scanf_i+0x180>
 800b8f4:	42bd      	cmp	r5, r7
 800b8f6:	d909      	bls.n	800b90c <_scanf_i+0x17c>
 800b8f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b900:	4632      	mov	r2, r6
 800b902:	4650      	mov	r0, sl
 800b904:	4798      	blx	r3
 800b906:	f105 39ff 	add.w	r9, r5, #4294967295
 800b90a:	464d      	mov	r5, r9
 800b90c:	42bd      	cmp	r5, r7
 800b90e:	d028      	beq.n	800b962 <_scanf_i+0x1d2>
 800b910:	6822      	ldr	r2, [r4, #0]
 800b912:	f012 0210 	ands.w	r2, r2, #16
 800b916:	d113      	bne.n	800b940 <_scanf_i+0x1b0>
 800b918:	702a      	strb	r2, [r5, #0]
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	9e01      	ldr	r6, [sp, #4]
 800b91e:	4639      	mov	r1, r7
 800b920:	4650      	mov	r0, sl
 800b922:	47b0      	blx	r6
 800b924:	f8d8 3000 	ldr.w	r3, [r8]
 800b928:	6821      	ldr	r1, [r4, #0]
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	f8c8 2000 	str.w	r2, [r8]
 800b930:	f011 0f20 	tst.w	r1, #32
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	d00f      	beq.n	800b958 <_scanf_i+0x1c8>
 800b938:	6018      	str	r0, [r3, #0]
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60e3      	str	r3, [r4, #12]
 800b940:	1bed      	subs	r5, r5, r7
 800b942:	44ab      	add	fp, r5
 800b944:	6925      	ldr	r5, [r4, #16]
 800b946:	445d      	add	r5, fp
 800b948:	6125      	str	r5, [r4, #16]
 800b94a:	2000      	movs	r0, #0
 800b94c:	b007      	add	sp, #28
 800b94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b952:	f04f 0b00 	mov.w	fp, #0
 800b956:	e7ca      	b.n	800b8ee <_scanf_i+0x15e>
 800b958:	07ca      	lsls	r2, r1, #31
 800b95a:	bf4c      	ite	mi
 800b95c:	8018      	strhmi	r0, [r3, #0]
 800b95e:	6018      	strpl	r0, [r3, #0]
 800b960:	e7eb      	b.n	800b93a <_scanf_i+0x1aa>
 800b962:	2001      	movs	r0, #1
 800b964:	e7f2      	b.n	800b94c <_scanf_i+0x1bc>
 800b966:	bf00      	nop
 800b968:	0800cfac 	.word	0x0800cfac
 800b96c:	0800bb3d 	.word	0x0800bb3d
 800b970:	080091d9 	.word	0x080091d9
 800b974:	0800d3fe 	.word	0x0800d3fe

0800b978 <_read_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d07      	ldr	r5, [pc, #28]	; (800b998 <_read_r+0x20>)
 800b97c:	4604      	mov	r4, r0
 800b97e:	4608      	mov	r0, r1
 800b980:	4611      	mov	r1, r2
 800b982:	2200      	movs	r2, #0
 800b984:	602a      	str	r2, [r5, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	f7f6 fe1e 	bl	80025c8 <_read>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_read_r+0x1e>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_read_r+0x1e>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	200186e0 	.word	0x200186e0
 800b99c:	00000000 	.word	0x00000000

0800b9a0 <nan>:
 800b9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9a8 <nan+0x8>
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	00000000 	.word	0x00000000
 800b9ac:	7ff80000 	.word	0x7ff80000

0800b9b0 <_sbrk_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d06      	ldr	r5, [pc, #24]	; (800b9cc <_sbrk_r+0x1c>)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f6 fe72 	bl	80026a4 <_sbrk>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_sbrk_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_sbrk_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	200186e0 	.word	0x200186e0

0800b9d0 <__sccl>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	780b      	ldrb	r3, [r1, #0]
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	2b5e      	cmp	r3, #94	; 0x5e
 800b9d8:	bf0b      	itete	eq
 800b9da:	784b      	ldrbeq	r3, [r1, #1]
 800b9dc:	1c48      	addne	r0, r1, #1
 800b9de:	1c88      	addeq	r0, r1, #2
 800b9e0:	2200      	movne	r2, #0
 800b9e2:	bf08      	it	eq
 800b9e4:	2201      	moveq	r2, #1
 800b9e6:	1e61      	subs	r1, r4, #1
 800b9e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b9ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b9f0:	42a9      	cmp	r1, r5
 800b9f2:	d1fb      	bne.n	800b9ec <__sccl+0x1c>
 800b9f4:	b90b      	cbnz	r3, 800b9fa <__sccl+0x2a>
 800b9f6:	3801      	subs	r0, #1
 800b9f8:	bd70      	pop	{r4, r5, r6, pc}
 800b9fa:	f082 0101 	eor.w	r1, r2, #1
 800b9fe:	54e1      	strb	r1, [r4, r3]
 800ba00:	1c42      	adds	r2, r0, #1
 800ba02:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ba06:	2d2d      	cmp	r5, #45	; 0x2d
 800ba08:	f102 36ff 	add.w	r6, r2, #4294967295
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	d006      	beq.n	800ba1e <__sccl+0x4e>
 800ba10:	2d5d      	cmp	r5, #93	; 0x5d
 800ba12:	d0f1      	beq.n	800b9f8 <__sccl+0x28>
 800ba14:	b90d      	cbnz	r5, 800ba1a <__sccl+0x4a>
 800ba16:	4630      	mov	r0, r6
 800ba18:	e7ee      	b.n	800b9f8 <__sccl+0x28>
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	e7ef      	b.n	800b9fe <__sccl+0x2e>
 800ba1e:	7816      	ldrb	r6, [r2, #0]
 800ba20:	2e5d      	cmp	r6, #93	; 0x5d
 800ba22:	d0fa      	beq.n	800ba1a <__sccl+0x4a>
 800ba24:	42b3      	cmp	r3, r6
 800ba26:	dcf8      	bgt.n	800ba1a <__sccl+0x4a>
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	4286      	cmp	r6, r0
 800ba2e:	5421      	strb	r1, [r4, r0]
 800ba30:	dcfb      	bgt.n	800ba2a <__sccl+0x5a>
 800ba32:	43d8      	mvns	r0, r3
 800ba34:	4430      	add	r0, r6
 800ba36:	1c5d      	adds	r5, r3, #1
 800ba38:	42b3      	cmp	r3, r6
 800ba3a:	bfa8      	it	ge
 800ba3c:	2000      	movge	r0, #0
 800ba3e:	182b      	adds	r3, r5, r0
 800ba40:	3202      	adds	r2, #2
 800ba42:	e7de      	b.n	800ba02 <__sccl+0x32>

0800ba44 <_strtoul_l.isra.0>:
 800ba44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba48:	4e3b      	ldr	r6, [pc, #236]	; (800bb38 <_strtoul_l.isra.0+0xf4>)
 800ba4a:	4686      	mov	lr, r0
 800ba4c:	468c      	mov	ip, r1
 800ba4e:	4660      	mov	r0, ip
 800ba50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ba54:	5da5      	ldrb	r5, [r4, r6]
 800ba56:	f015 0508 	ands.w	r5, r5, #8
 800ba5a:	d1f8      	bne.n	800ba4e <_strtoul_l.isra.0+0xa>
 800ba5c:	2c2d      	cmp	r4, #45	; 0x2d
 800ba5e:	d134      	bne.n	800baca <_strtoul_l.isra.0+0x86>
 800ba60:	f89c 4000 	ldrb.w	r4, [ip]
 800ba64:	f04f 0801 	mov.w	r8, #1
 800ba68:	f100 0c02 	add.w	ip, r0, #2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d05e      	beq.n	800bb2e <_strtoul_l.isra.0+0xea>
 800ba70:	2b10      	cmp	r3, #16
 800ba72:	d10c      	bne.n	800ba8e <_strtoul_l.isra.0+0x4a>
 800ba74:	2c30      	cmp	r4, #48	; 0x30
 800ba76:	d10a      	bne.n	800ba8e <_strtoul_l.isra.0+0x4a>
 800ba78:	f89c 0000 	ldrb.w	r0, [ip]
 800ba7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba80:	2858      	cmp	r0, #88	; 0x58
 800ba82:	d14f      	bne.n	800bb24 <_strtoul_l.isra.0+0xe0>
 800ba84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ba88:	2310      	movs	r3, #16
 800ba8a:	f10c 0c02 	add.w	ip, ip, #2
 800ba8e:	f04f 37ff 	mov.w	r7, #4294967295
 800ba92:	2500      	movs	r5, #0
 800ba94:	fbb7 f7f3 	udiv	r7, r7, r3
 800ba98:	fb03 f907 	mul.w	r9, r3, r7
 800ba9c:	ea6f 0909 	mvn.w	r9, r9
 800baa0:	4628      	mov	r0, r5
 800baa2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800baa6:	2e09      	cmp	r6, #9
 800baa8:	d818      	bhi.n	800badc <_strtoul_l.isra.0+0x98>
 800baaa:	4634      	mov	r4, r6
 800baac:	42a3      	cmp	r3, r4
 800baae:	dd24      	ble.n	800bafa <_strtoul_l.isra.0+0xb6>
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	db1f      	blt.n	800baf4 <_strtoul_l.isra.0+0xb0>
 800bab4:	4287      	cmp	r7, r0
 800bab6:	d31d      	bcc.n	800baf4 <_strtoul_l.isra.0+0xb0>
 800bab8:	d101      	bne.n	800babe <_strtoul_l.isra.0+0x7a>
 800baba:	45a1      	cmp	r9, r4
 800babc:	db1a      	blt.n	800baf4 <_strtoul_l.isra.0+0xb0>
 800babe:	fb00 4003 	mla	r0, r0, r3, r4
 800bac2:	2501      	movs	r5, #1
 800bac4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bac8:	e7eb      	b.n	800baa2 <_strtoul_l.isra.0+0x5e>
 800baca:	2c2b      	cmp	r4, #43	; 0x2b
 800bacc:	bf08      	it	eq
 800bace:	f89c 4000 	ldrbeq.w	r4, [ip]
 800bad2:	46a8      	mov	r8, r5
 800bad4:	bf08      	it	eq
 800bad6:	f100 0c02 	addeq.w	ip, r0, #2
 800bada:	e7c7      	b.n	800ba6c <_strtoul_l.isra.0+0x28>
 800badc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800bae0:	2e19      	cmp	r6, #25
 800bae2:	d801      	bhi.n	800bae8 <_strtoul_l.isra.0+0xa4>
 800bae4:	3c37      	subs	r4, #55	; 0x37
 800bae6:	e7e1      	b.n	800baac <_strtoul_l.isra.0+0x68>
 800bae8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800baec:	2e19      	cmp	r6, #25
 800baee:	d804      	bhi.n	800bafa <_strtoul_l.isra.0+0xb6>
 800baf0:	3c57      	subs	r4, #87	; 0x57
 800baf2:	e7db      	b.n	800baac <_strtoul_l.isra.0+0x68>
 800baf4:	f04f 35ff 	mov.w	r5, #4294967295
 800baf8:	e7e4      	b.n	800bac4 <_strtoul_l.isra.0+0x80>
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	da07      	bge.n	800bb0e <_strtoul_l.isra.0+0xca>
 800bafe:	2322      	movs	r3, #34	; 0x22
 800bb00:	f8ce 3000 	str.w	r3, [lr]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	b942      	cbnz	r2, 800bb1c <_strtoul_l.isra.0+0xd8>
 800bb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb0e:	f1b8 0f00 	cmp.w	r8, #0
 800bb12:	d000      	beq.n	800bb16 <_strtoul_l.isra.0+0xd2>
 800bb14:	4240      	negs	r0, r0
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d0f7      	beq.n	800bb0a <_strtoul_l.isra.0+0xc6>
 800bb1a:	b10d      	cbz	r5, 800bb20 <_strtoul_l.isra.0+0xdc>
 800bb1c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bb20:	6011      	str	r1, [r2, #0]
 800bb22:	e7f2      	b.n	800bb0a <_strtoul_l.isra.0+0xc6>
 800bb24:	2430      	movs	r4, #48	; 0x30
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1b1      	bne.n	800ba8e <_strtoul_l.isra.0+0x4a>
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	e7af      	b.n	800ba8e <_strtoul_l.isra.0+0x4a>
 800bb2e:	2c30      	cmp	r4, #48	; 0x30
 800bb30:	d0a2      	beq.n	800ba78 <_strtoul_l.isra.0+0x34>
 800bb32:	230a      	movs	r3, #10
 800bb34:	e7ab      	b.n	800ba8e <_strtoul_l.isra.0+0x4a>
 800bb36:	bf00      	nop
 800bb38:	0800d061 	.word	0x0800d061

0800bb3c <_strtoul_r>:
 800bb3c:	f7ff bf82 	b.w	800ba44 <_strtoul_l.isra.0>

0800bb40 <__submore>:
 800bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb44:	460c      	mov	r4, r1
 800bb46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb4c:	4299      	cmp	r1, r3
 800bb4e:	d11d      	bne.n	800bb8c <__submore+0x4c>
 800bb50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb54:	f7ff fa3c 	bl	800afd0 <_malloc_r>
 800bb58:	b918      	cbnz	r0, 800bb62 <__submore+0x22>
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb66:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bb7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bb82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	2000      	movs	r0, #0
 800bb8a:	e7e8      	b.n	800bb5e <__submore+0x1e>
 800bb8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb8e:	0077      	lsls	r7, r6, #1
 800bb90:	463a      	mov	r2, r7
 800bb92:	f000 fa2d 	bl	800bff0 <_realloc_r>
 800bb96:	4605      	mov	r5, r0
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0de      	beq.n	800bb5a <__submore+0x1a>
 800bb9c:	eb00 0806 	add.w	r8, r0, r6
 800bba0:	4601      	mov	r1, r0
 800bba2:	4632      	mov	r2, r6
 800bba4:	4640      	mov	r0, r8
 800bba6:	f7fe fce9 	bl	800a57c <memcpy>
 800bbaa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bbae:	f8c4 8000 	str.w	r8, [r4]
 800bbb2:	e7e9      	b.n	800bb88 <__submore+0x48>

0800bbb4 <__ascii_wctomb>:
 800bbb4:	b149      	cbz	r1, 800bbca <__ascii_wctomb+0x16>
 800bbb6:	2aff      	cmp	r2, #255	; 0xff
 800bbb8:	bf85      	ittet	hi
 800bbba:	238a      	movhi	r3, #138	; 0x8a
 800bbbc:	6003      	strhi	r3, [r0, #0]
 800bbbe:	700a      	strbls	r2, [r1, #0]
 800bbc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbc4:	bf98      	it	ls
 800bbc6:	2001      	movls	r0, #1
 800bbc8:	4770      	bx	lr
 800bbca:	4608      	mov	r0, r1
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <__assert_func>:
 800bbd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4b09      	ldr	r3, [pc, #36]	; (800bbfc <__assert_func+0x2c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4605      	mov	r5, r0
 800bbdc:	68d8      	ldr	r0, [r3, #12]
 800bbde:	b14c      	cbz	r4, 800bbf4 <__assert_func+0x24>
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <__assert_func+0x30>)
 800bbe2:	9100      	str	r1, [sp, #0]
 800bbe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbe8:	4906      	ldr	r1, [pc, #24]	; (800bc04 <__assert_func+0x34>)
 800bbea:	462b      	mov	r3, r5
 800bbec:	f000 f9a6 	bl	800bf3c <fiprintf>
 800bbf0:	f000 fc3e 	bl	800c470 <abort>
 800bbf4:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <__assert_func+0x38>)
 800bbf6:	461c      	mov	r4, r3
 800bbf8:	e7f3      	b.n	800bbe2 <__assert_func+0x12>
 800bbfa:	bf00      	nop
 800bbfc:	20000098 	.word	0x20000098
 800bc00:	0800d400 	.word	0x0800d400
 800bc04:	0800d40d 	.word	0x0800d40d
 800bc08:	0800d43b 	.word	0x0800d43b

0800bc0c <__sflush_r>:
 800bc0c:	898a      	ldrh	r2, [r1, #12]
 800bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc12:	4605      	mov	r5, r0
 800bc14:	0710      	lsls	r0, r2, #28
 800bc16:	460c      	mov	r4, r1
 800bc18:	d458      	bmi.n	800bccc <__sflush_r+0xc0>
 800bc1a:	684b      	ldr	r3, [r1, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc05      	bgt.n	800bc2c <__sflush_r+0x20>
 800bc20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dc02      	bgt.n	800bc2c <__sflush_r+0x20>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d0f9      	beq.n	800bc26 <__sflush_r+0x1a>
 800bc32:	2300      	movs	r3, #0
 800bc34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc38:	682f      	ldr	r7, [r5, #0]
 800bc3a:	602b      	str	r3, [r5, #0]
 800bc3c:	d032      	beq.n	800bca4 <__sflush_r+0x98>
 800bc3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	075a      	lsls	r2, r3, #29
 800bc44:	d505      	bpl.n	800bc52 <__sflush_r+0x46>
 800bc46:	6863      	ldr	r3, [r4, #4]
 800bc48:	1ac0      	subs	r0, r0, r3
 800bc4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc4c:	b10b      	cbz	r3, 800bc52 <__sflush_r+0x46>
 800bc4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc50:	1ac0      	subs	r0, r0, r3
 800bc52:	2300      	movs	r3, #0
 800bc54:	4602      	mov	r2, r0
 800bc56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc58:	6a21      	ldr	r1, [r4, #32]
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b0      	blx	r6
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	d106      	bne.n	800bc72 <__sflush_r+0x66>
 800bc64:	6829      	ldr	r1, [r5, #0]
 800bc66:	291d      	cmp	r1, #29
 800bc68:	d82c      	bhi.n	800bcc4 <__sflush_r+0xb8>
 800bc6a:	4a2a      	ldr	r2, [pc, #168]	; (800bd14 <__sflush_r+0x108>)
 800bc6c:	40ca      	lsrs	r2, r1
 800bc6e:	07d6      	lsls	r6, r2, #31
 800bc70:	d528      	bpl.n	800bcc4 <__sflush_r+0xb8>
 800bc72:	2200      	movs	r2, #0
 800bc74:	6062      	str	r2, [r4, #4]
 800bc76:	04d9      	lsls	r1, r3, #19
 800bc78:	6922      	ldr	r2, [r4, #16]
 800bc7a:	6022      	str	r2, [r4, #0]
 800bc7c:	d504      	bpl.n	800bc88 <__sflush_r+0x7c>
 800bc7e:	1c42      	adds	r2, r0, #1
 800bc80:	d101      	bne.n	800bc86 <__sflush_r+0x7a>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b903      	cbnz	r3, 800bc88 <__sflush_r+0x7c>
 800bc86:	6560      	str	r0, [r4, #84]	; 0x54
 800bc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc8a:	602f      	str	r7, [r5, #0]
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	d0ca      	beq.n	800bc26 <__sflush_r+0x1a>
 800bc90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc94:	4299      	cmp	r1, r3
 800bc96:	d002      	beq.n	800bc9e <__sflush_r+0x92>
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f7ff f949 	bl	800af30 <_free_r>
 800bc9e:	2000      	movs	r0, #0
 800bca0:	6360      	str	r0, [r4, #52]	; 0x34
 800bca2:	e7c1      	b.n	800bc28 <__sflush_r+0x1c>
 800bca4:	6a21      	ldr	r1, [r4, #32]
 800bca6:	2301      	movs	r3, #1
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b0      	blx	r6
 800bcac:	1c41      	adds	r1, r0, #1
 800bcae:	d1c7      	bne.n	800bc40 <__sflush_r+0x34>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0c4      	beq.n	800bc40 <__sflush_r+0x34>
 800bcb6:	2b1d      	cmp	r3, #29
 800bcb8:	d001      	beq.n	800bcbe <__sflush_r+0xb2>
 800bcba:	2b16      	cmp	r3, #22
 800bcbc:	d101      	bne.n	800bcc2 <__sflush_r+0xb6>
 800bcbe:	602f      	str	r7, [r5, #0]
 800bcc0:	e7b1      	b.n	800bc26 <__sflush_r+0x1a>
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	e7ad      	b.n	800bc28 <__sflush_r+0x1c>
 800bccc:	690f      	ldr	r7, [r1, #16]
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	d0a9      	beq.n	800bc26 <__sflush_r+0x1a>
 800bcd2:	0793      	lsls	r3, r2, #30
 800bcd4:	680e      	ldr	r6, [r1, #0]
 800bcd6:	bf08      	it	eq
 800bcd8:	694b      	ldreq	r3, [r1, #20]
 800bcda:	600f      	str	r7, [r1, #0]
 800bcdc:	bf18      	it	ne
 800bcde:	2300      	movne	r3, #0
 800bce0:	eba6 0807 	sub.w	r8, r6, r7
 800bce4:	608b      	str	r3, [r1, #8]
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	dd9c      	ble.n	800bc26 <__sflush_r+0x1a>
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcf0:	4643      	mov	r3, r8
 800bcf2:	463a      	mov	r2, r7
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	47b0      	blx	r6
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	dc06      	bgt.n	800bd0a <__sflush_r+0xfe>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	f04f 30ff 	mov.w	r0, #4294967295
 800bd08:	e78e      	b.n	800bc28 <__sflush_r+0x1c>
 800bd0a:	4407      	add	r7, r0
 800bd0c:	eba8 0800 	sub.w	r8, r8, r0
 800bd10:	e7e9      	b.n	800bce6 <__sflush_r+0xda>
 800bd12:	bf00      	nop
 800bd14:	20400001 	.word	0x20400001

0800bd18 <_fflush_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	690b      	ldr	r3, [r1, #16]
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	b913      	cbnz	r3, 800bd28 <_fflush_r+0x10>
 800bd22:	2500      	movs	r5, #0
 800bd24:	4628      	mov	r0, r5
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	b118      	cbz	r0, 800bd32 <_fflush_r+0x1a>
 800bd2a:	6983      	ldr	r3, [r0, #24]
 800bd2c:	b90b      	cbnz	r3, 800bd32 <_fflush_r+0x1a>
 800bd2e:	f000 f887 	bl	800be40 <__sinit>
 800bd32:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <_fflush_r+0x6c>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	d11b      	bne.n	800bd70 <_fflush_r+0x58>
 800bd38:	686c      	ldr	r4, [r5, #4]
 800bd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0ef      	beq.n	800bd22 <_fflush_r+0xa>
 800bd42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd44:	07d0      	lsls	r0, r2, #31
 800bd46:	d404      	bmi.n	800bd52 <_fflush_r+0x3a>
 800bd48:	0599      	lsls	r1, r3, #22
 800bd4a:	d402      	bmi.n	800bd52 <_fflush_r+0x3a>
 800bd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd4e:	f000 f927 	bl	800bfa0 <__retarget_lock_acquire_recursive>
 800bd52:	4628      	mov	r0, r5
 800bd54:	4621      	mov	r1, r4
 800bd56:	f7ff ff59 	bl	800bc0c <__sflush_r>
 800bd5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd5c:	07da      	lsls	r2, r3, #31
 800bd5e:	4605      	mov	r5, r0
 800bd60:	d4e0      	bmi.n	800bd24 <_fflush_r+0xc>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	059b      	lsls	r3, r3, #22
 800bd66:	d4dd      	bmi.n	800bd24 <_fflush_r+0xc>
 800bd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6a:	f000 f91a 	bl	800bfa2 <__retarget_lock_release_recursive>
 800bd6e:	e7d9      	b.n	800bd24 <_fflush_r+0xc>
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <_fflush_r+0x70>)
 800bd72:	429c      	cmp	r4, r3
 800bd74:	d101      	bne.n	800bd7a <_fflush_r+0x62>
 800bd76:	68ac      	ldr	r4, [r5, #8]
 800bd78:	e7df      	b.n	800bd3a <_fflush_r+0x22>
 800bd7a:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <_fflush_r+0x74>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	bf08      	it	eq
 800bd80:	68ec      	ldreq	r4, [r5, #12]
 800bd82:	e7da      	b.n	800bd3a <_fflush_r+0x22>
 800bd84:	0800d45c 	.word	0x0800d45c
 800bd88:	0800d47c 	.word	0x0800d47c
 800bd8c:	0800d43c 	.word	0x0800d43c

0800bd90 <std>:
 800bd90:	2300      	movs	r3, #0
 800bd92:	b510      	push	{r4, lr}
 800bd94:	4604      	mov	r4, r0
 800bd96:	e9c0 3300 	strd	r3, r3, [r0]
 800bd9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd9e:	6083      	str	r3, [r0, #8]
 800bda0:	8181      	strh	r1, [r0, #12]
 800bda2:	6643      	str	r3, [r0, #100]	; 0x64
 800bda4:	81c2      	strh	r2, [r0, #14]
 800bda6:	6183      	str	r3, [r0, #24]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	2208      	movs	r2, #8
 800bdac:	305c      	adds	r0, #92	; 0x5c
 800bdae:	f7fb fc85 	bl	80076bc <memset>
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <std+0x38>)
 800bdb4:	6263      	str	r3, [r4, #36]	; 0x24
 800bdb6:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <std+0x3c>)
 800bdb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdba:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <std+0x40>)
 800bdbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdbe:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <std+0x44>)
 800bdc0:	6224      	str	r4, [r4, #32]
 800bdc2:	6323      	str	r3, [r4, #48]	; 0x30
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	08008401 	.word	0x08008401
 800bdcc:	08008427 	.word	0x08008427
 800bdd0:	0800845f 	.word	0x0800845f
 800bdd4:	08008483 	.word	0x08008483

0800bdd8 <_cleanup_r>:
 800bdd8:	4901      	ldr	r1, [pc, #4]	; (800bde0 <_cleanup_r+0x8>)
 800bdda:	f000 b8c1 	b.w	800bf60 <_fwalk_reent>
 800bdde:	bf00      	nop
 800bde0:	0800bd19 	.word	0x0800bd19

0800bde4 <__sfmoreglue>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	1e4a      	subs	r2, r1, #1
 800bde8:	2568      	movs	r5, #104	; 0x68
 800bdea:	4355      	muls	r5, r2
 800bdec:	460e      	mov	r6, r1
 800bdee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdf2:	f7ff f8ed 	bl	800afd0 <_malloc_r>
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	b140      	cbz	r0, 800be0c <__sfmoreglue+0x28>
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	e9c0 1600 	strd	r1, r6, [r0]
 800be00:	300c      	adds	r0, #12
 800be02:	60a0      	str	r0, [r4, #8]
 800be04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be08:	f7fb fc58 	bl	80076bc <memset>
 800be0c:	4620      	mov	r0, r4
 800be0e:	bd70      	pop	{r4, r5, r6, pc}

0800be10 <__sfp_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	; (800be18 <__sfp_lock_acquire+0x8>)
 800be12:	f000 b8c5 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	200186ec 	.word	0x200186ec

0800be1c <__sfp_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__sfp_lock_release+0x8>)
 800be1e:	f000 b8c0 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	200186ec 	.word	0x200186ec

0800be28 <__sinit_lock_acquire>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__sinit_lock_acquire+0x8>)
 800be2a:	f000 b8b9 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	200186e7 	.word	0x200186e7

0800be34 <__sinit_lock_release>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__sinit_lock_release+0x8>)
 800be36:	f000 b8b4 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	200186e7 	.word	0x200186e7

0800be40 <__sinit>:
 800be40:	b510      	push	{r4, lr}
 800be42:	4604      	mov	r4, r0
 800be44:	f7ff fff0 	bl	800be28 <__sinit_lock_acquire>
 800be48:	69a3      	ldr	r3, [r4, #24]
 800be4a:	b11b      	cbz	r3, 800be54 <__sinit+0x14>
 800be4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be50:	f7ff bff0 	b.w	800be34 <__sinit_lock_release>
 800be54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be58:	6523      	str	r3, [r4, #80]	; 0x50
 800be5a:	4b13      	ldr	r3, [pc, #76]	; (800bea8 <__sinit+0x68>)
 800be5c:	4a13      	ldr	r2, [pc, #76]	; (800beac <__sinit+0x6c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	62a2      	str	r2, [r4, #40]	; 0x28
 800be62:	42a3      	cmp	r3, r4
 800be64:	bf04      	itt	eq
 800be66:	2301      	moveq	r3, #1
 800be68:	61a3      	streq	r3, [r4, #24]
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 f820 	bl	800beb0 <__sfp>
 800be70:	6060      	str	r0, [r4, #4]
 800be72:	4620      	mov	r0, r4
 800be74:	f000 f81c 	bl	800beb0 <__sfp>
 800be78:	60a0      	str	r0, [r4, #8]
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 f818 	bl	800beb0 <__sfp>
 800be80:	2200      	movs	r2, #0
 800be82:	60e0      	str	r0, [r4, #12]
 800be84:	2104      	movs	r1, #4
 800be86:	6860      	ldr	r0, [r4, #4]
 800be88:	f7ff ff82 	bl	800bd90 <std>
 800be8c:	68a0      	ldr	r0, [r4, #8]
 800be8e:	2201      	movs	r2, #1
 800be90:	2109      	movs	r1, #9
 800be92:	f7ff ff7d 	bl	800bd90 <std>
 800be96:	68e0      	ldr	r0, [r4, #12]
 800be98:	2202      	movs	r2, #2
 800be9a:	2112      	movs	r1, #18
 800be9c:	f7ff ff78 	bl	800bd90 <std>
 800bea0:	2301      	movs	r3, #1
 800bea2:	61a3      	str	r3, [r4, #24]
 800bea4:	e7d2      	b.n	800be4c <__sinit+0xc>
 800bea6:	bf00      	nop
 800bea8:	0800cfd0 	.word	0x0800cfd0
 800beac:	0800bdd9 	.word	0x0800bdd9

0800beb0 <__sfp>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	4607      	mov	r7, r0
 800beb4:	f7ff ffac 	bl	800be10 <__sfp_lock_acquire>
 800beb8:	4b1e      	ldr	r3, [pc, #120]	; (800bf34 <__sfp+0x84>)
 800beba:	681e      	ldr	r6, [r3, #0]
 800bebc:	69b3      	ldr	r3, [r6, #24]
 800bebe:	b913      	cbnz	r3, 800bec6 <__sfp+0x16>
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff ffbd 	bl	800be40 <__sinit>
 800bec6:	3648      	adds	r6, #72	; 0x48
 800bec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800becc:	3b01      	subs	r3, #1
 800bece:	d503      	bpl.n	800bed8 <__sfp+0x28>
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	b30b      	cbz	r3, 800bf18 <__sfp+0x68>
 800bed4:	6836      	ldr	r6, [r6, #0]
 800bed6:	e7f7      	b.n	800bec8 <__sfp+0x18>
 800bed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bedc:	b9d5      	cbnz	r5, 800bf14 <__sfp+0x64>
 800bede:	4b16      	ldr	r3, [pc, #88]	; (800bf38 <__sfp+0x88>)
 800bee0:	60e3      	str	r3, [r4, #12]
 800bee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bee6:	6665      	str	r5, [r4, #100]	; 0x64
 800bee8:	f000 f859 	bl	800bf9e <__retarget_lock_init_recursive>
 800beec:	f7ff ff96 	bl	800be1c <__sfp_lock_release>
 800bef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bef8:	6025      	str	r5, [r4, #0]
 800befa:	61a5      	str	r5, [r4, #24]
 800befc:	2208      	movs	r2, #8
 800befe:	4629      	mov	r1, r5
 800bf00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf04:	f7fb fbda 	bl	80076bc <memset>
 800bf08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf10:	4620      	mov	r0, r4
 800bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf14:	3468      	adds	r4, #104	; 0x68
 800bf16:	e7d9      	b.n	800becc <__sfp+0x1c>
 800bf18:	2104      	movs	r1, #4
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	f7ff ff62 	bl	800bde4 <__sfmoreglue>
 800bf20:	4604      	mov	r4, r0
 800bf22:	6030      	str	r0, [r6, #0]
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d1d5      	bne.n	800bed4 <__sfp+0x24>
 800bf28:	f7ff ff78 	bl	800be1c <__sfp_lock_release>
 800bf2c:	230c      	movs	r3, #12
 800bf2e:	603b      	str	r3, [r7, #0]
 800bf30:	e7ee      	b.n	800bf10 <__sfp+0x60>
 800bf32:	bf00      	nop
 800bf34:	0800cfd0 	.word	0x0800cfd0
 800bf38:	ffff0001 	.word	0xffff0001

0800bf3c <fiprintf>:
 800bf3c:	b40e      	push	{r1, r2, r3}
 800bf3e:	b503      	push	{r0, r1, lr}
 800bf40:	4601      	mov	r1, r0
 800bf42:	ab03      	add	r3, sp, #12
 800bf44:	4805      	ldr	r0, [pc, #20]	; (800bf5c <fiprintf+0x20>)
 800bf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	f000 f89f 	bl	800c090 <_vfiprintf_r>
 800bf52:	b002      	add	sp, #8
 800bf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf58:	b003      	add	sp, #12
 800bf5a:	4770      	bx	lr
 800bf5c:	20000098 	.word	0x20000098

0800bf60 <_fwalk_reent>:
 800bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	4606      	mov	r6, r0
 800bf66:	4688      	mov	r8, r1
 800bf68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf6c:	2700      	movs	r7, #0
 800bf6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf72:	f1b9 0901 	subs.w	r9, r9, #1
 800bf76:	d505      	bpl.n	800bf84 <_fwalk_reent+0x24>
 800bf78:	6824      	ldr	r4, [r4, #0]
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	d1f7      	bne.n	800bf6e <_fwalk_reent+0xe>
 800bf7e:	4638      	mov	r0, r7
 800bf80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf84:	89ab      	ldrh	r3, [r5, #12]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d907      	bls.n	800bf9a <_fwalk_reent+0x3a>
 800bf8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	d003      	beq.n	800bf9a <_fwalk_reent+0x3a>
 800bf92:	4629      	mov	r1, r5
 800bf94:	4630      	mov	r0, r6
 800bf96:	47c0      	blx	r8
 800bf98:	4307      	orrs	r7, r0
 800bf9a:	3568      	adds	r5, #104	; 0x68
 800bf9c:	e7e9      	b.n	800bf72 <_fwalk_reent+0x12>

0800bf9e <__retarget_lock_init_recursive>:
 800bf9e:	4770      	bx	lr

0800bfa0 <__retarget_lock_acquire_recursive>:
 800bfa0:	4770      	bx	lr

0800bfa2 <__retarget_lock_release_recursive>:
 800bfa2:	4770      	bx	lr

0800bfa4 <memmove>:
 800bfa4:	4288      	cmp	r0, r1
 800bfa6:	b510      	push	{r4, lr}
 800bfa8:	eb01 0402 	add.w	r4, r1, r2
 800bfac:	d902      	bls.n	800bfb4 <memmove+0x10>
 800bfae:	4284      	cmp	r4, r0
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	d807      	bhi.n	800bfc4 <memmove+0x20>
 800bfb4:	1e43      	subs	r3, r0, #1
 800bfb6:	42a1      	cmp	r1, r4
 800bfb8:	d008      	beq.n	800bfcc <memmove+0x28>
 800bfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfc2:	e7f8      	b.n	800bfb6 <memmove+0x12>
 800bfc4:	4402      	add	r2, r0
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	428a      	cmp	r2, r1
 800bfca:	d100      	bne.n	800bfce <memmove+0x2a>
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfd6:	e7f7      	b.n	800bfc8 <memmove+0x24>

0800bfd8 <__malloc_lock>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__malloc_lock+0x8>)
 800bfda:	f7ff bfe1 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800bfde:	bf00      	nop
 800bfe0:	200186e8 	.word	0x200186e8

0800bfe4 <__malloc_unlock>:
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <__malloc_unlock+0x8>)
 800bfe6:	f7ff bfdc 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800bfea:	bf00      	nop
 800bfec:	200186e8 	.word	0x200186e8

0800bff0 <_realloc_r>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	4607      	mov	r7, r0
 800bff4:	4614      	mov	r4, r2
 800bff6:	460e      	mov	r6, r1
 800bff8:	b921      	cbnz	r1, 800c004 <_realloc_r+0x14>
 800bffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bffe:	4611      	mov	r1, r2
 800c000:	f7fe bfe6 	b.w	800afd0 <_malloc_r>
 800c004:	b922      	cbnz	r2, 800c010 <_realloc_r+0x20>
 800c006:	f7fe ff93 	bl	800af30 <_free_r>
 800c00a:	4625      	mov	r5, r4
 800c00c:	4628      	mov	r0, r5
 800c00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c010:	f000 fa9a 	bl	800c548 <_malloc_usable_size_r>
 800c014:	42a0      	cmp	r0, r4
 800c016:	d20f      	bcs.n	800c038 <_realloc_r+0x48>
 800c018:	4621      	mov	r1, r4
 800c01a:	4638      	mov	r0, r7
 800c01c:	f7fe ffd8 	bl	800afd0 <_malloc_r>
 800c020:	4605      	mov	r5, r0
 800c022:	2800      	cmp	r0, #0
 800c024:	d0f2      	beq.n	800c00c <_realloc_r+0x1c>
 800c026:	4631      	mov	r1, r6
 800c028:	4622      	mov	r2, r4
 800c02a:	f7fe faa7 	bl	800a57c <memcpy>
 800c02e:	4631      	mov	r1, r6
 800c030:	4638      	mov	r0, r7
 800c032:	f7fe ff7d 	bl	800af30 <_free_r>
 800c036:	e7e9      	b.n	800c00c <_realloc_r+0x1c>
 800c038:	4635      	mov	r5, r6
 800c03a:	e7e7      	b.n	800c00c <_realloc_r+0x1c>

0800c03c <__sfputc_r>:
 800c03c:	6893      	ldr	r3, [r2, #8]
 800c03e:	3b01      	subs	r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	b410      	push	{r4}
 800c044:	6093      	str	r3, [r2, #8]
 800c046:	da08      	bge.n	800c05a <__sfputc_r+0x1e>
 800c048:	6994      	ldr	r4, [r2, #24]
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	db01      	blt.n	800c052 <__sfputc_r+0x16>
 800c04e:	290a      	cmp	r1, #10
 800c050:	d103      	bne.n	800c05a <__sfputc_r+0x1e>
 800c052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c056:	f000 b94b 	b.w	800c2f0 <__swbuf_r>
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	1c58      	adds	r0, r3, #1
 800c05e:	6010      	str	r0, [r2, #0]
 800c060:	7019      	strb	r1, [r3, #0]
 800c062:	4608      	mov	r0, r1
 800c064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <__sfputs_r>:
 800c06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06c:	4606      	mov	r6, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	4614      	mov	r4, r2
 800c072:	18d5      	adds	r5, r2, r3
 800c074:	42ac      	cmp	r4, r5
 800c076:	d101      	bne.n	800c07c <__sfputs_r+0x12>
 800c078:	2000      	movs	r0, #0
 800c07a:	e007      	b.n	800c08c <__sfputs_r+0x22>
 800c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c080:	463a      	mov	r2, r7
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff ffda 	bl	800c03c <__sfputc_r>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d1f3      	bne.n	800c074 <__sfputs_r+0xa>
 800c08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c090 <_vfiprintf_r>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	460d      	mov	r5, r1
 800c096:	b09d      	sub	sp, #116	; 0x74
 800c098:	4614      	mov	r4, r2
 800c09a:	4698      	mov	r8, r3
 800c09c:	4606      	mov	r6, r0
 800c09e:	b118      	cbz	r0, 800c0a8 <_vfiprintf_r+0x18>
 800c0a0:	6983      	ldr	r3, [r0, #24]
 800c0a2:	b90b      	cbnz	r3, 800c0a8 <_vfiprintf_r+0x18>
 800c0a4:	f7ff fecc 	bl	800be40 <__sinit>
 800c0a8:	4b89      	ldr	r3, [pc, #548]	; (800c2d0 <_vfiprintf_r+0x240>)
 800c0aa:	429d      	cmp	r5, r3
 800c0ac:	d11b      	bne.n	800c0e6 <_vfiprintf_r+0x56>
 800c0ae:	6875      	ldr	r5, [r6, #4]
 800c0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	d405      	bmi.n	800c0c2 <_vfiprintf_r+0x32>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	059a      	lsls	r2, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_vfiprintf_r+0x32>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0be:	f7ff ff6f 	bl	800bfa0 <__retarget_lock_acquire_recursive>
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	071b      	lsls	r3, r3, #28
 800c0c6:	d501      	bpl.n	800c0cc <_vfiprintf_r+0x3c>
 800c0c8:	692b      	ldr	r3, [r5, #16]
 800c0ca:	b9eb      	cbnz	r3, 800c108 <_vfiprintf_r+0x78>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f000 f960 	bl	800c394 <__swsetup_r>
 800c0d4:	b1c0      	cbz	r0, 800c108 <_vfiprintf_r+0x78>
 800c0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0d8:	07dc      	lsls	r4, r3, #31
 800c0da:	d50e      	bpl.n	800c0fa <_vfiprintf_r+0x6a>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	b01d      	add	sp, #116	; 0x74
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e6:	4b7b      	ldr	r3, [pc, #492]	; (800c2d4 <_vfiprintf_r+0x244>)
 800c0e8:	429d      	cmp	r5, r3
 800c0ea:	d101      	bne.n	800c0f0 <_vfiprintf_r+0x60>
 800c0ec:	68b5      	ldr	r5, [r6, #8]
 800c0ee:	e7df      	b.n	800c0b0 <_vfiprintf_r+0x20>
 800c0f0:	4b79      	ldr	r3, [pc, #484]	; (800c2d8 <_vfiprintf_r+0x248>)
 800c0f2:	429d      	cmp	r5, r3
 800c0f4:	bf08      	it	eq
 800c0f6:	68f5      	ldreq	r5, [r6, #12]
 800c0f8:	e7da      	b.n	800c0b0 <_vfiprintf_r+0x20>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	0598      	lsls	r0, r3, #22
 800c0fe:	d4ed      	bmi.n	800c0dc <_vfiprintf_r+0x4c>
 800c100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c102:	f7ff ff4e 	bl	800bfa2 <__retarget_lock_release_recursive>
 800c106:	e7e9      	b.n	800c0dc <_vfiprintf_r+0x4c>
 800c108:	2300      	movs	r3, #0
 800c10a:	9309      	str	r3, [sp, #36]	; 0x24
 800c10c:	2320      	movs	r3, #32
 800c10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c112:	f8cd 800c 	str.w	r8, [sp, #12]
 800c116:	2330      	movs	r3, #48	; 0x30
 800c118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c2dc <_vfiprintf_r+0x24c>
 800c11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c120:	f04f 0901 	mov.w	r9, #1
 800c124:	4623      	mov	r3, r4
 800c126:	469a      	mov	sl, r3
 800c128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12c:	b10a      	cbz	r2, 800c132 <_vfiprintf_r+0xa2>
 800c12e:	2a25      	cmp	r2, #37	; 0x25
 800c130:	d1f9      	bne.n	800c126 <_vfiprintf_r+0x96>
 800c132:	ebba 0b04 	subs.w	fp, sl, r4
 800c136:	d00b      	beq.n	800c150 <_vfiprintf_r+0xc0>
 800c138:	465b      	mov	r3, fp
 800c13a:	4622      	mov	r2, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff ff93 	bl	800c06a <__sfputs_r>
 800c144:	3001      	adds	r0, #1
 800c146:	f000 80aa 	beq.w	800c29e <_vfiprintf_r+0x20e>
 800c14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14c:	445a      	add	r2, fp
 800c14e:	9209      	str	r2, [sp, #36]	; 0x24
 800c150:	f89a 3000 	ldrb.w	r3, [sl]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 80a2 	beq.w	800c29e <_vfiprintf_r+0x20e>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295
 800c160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c164:	f10a 0a01 	add.w	sl, sl, #1
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	9307      	str	r3, [sp, #28]
 800c16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c170:	931a      	str	r3, [sp, #104]	; 0x68
 800c172:	4654      	mov	r4, sl
 800c174:	2205      	movs	r2, #5
 800c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17a:	4858      	ldr	r0, [pc, #352]	; (800c2dc <_vfiprintf_r+0x24c>)
 800c17c:	f7f4 f878 	bl	8000270 <memchr>
 800c180:	9a04      	ldr	r2, [sp, #16]
 800c182:	b9d8      	cbnz	r0, 800c1bc <_vfiprintf_r+0x12c>
 800c184:	06d1      	lsls	r1, r2, #27
 800c186:	bf44      	itt	mi
 800c188:	2320      	movmi	r3, #32
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	0713      	lsls	r3, r2, #28
 800c190:	bf44      	itt	mi
 800c192:	232b      	movmi	r3, #43	; 0x2b
 800c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c198:	f89a 3000 	ldrb.w	r3, [sl]
 800c19c:	2b2a      	cmp	r3, #42	; 0x2a
 800c19e:	d015      	beq.n	800c1cc <_vfiprintf_r+0x13c>
 800c1a0:	9a07      	ldr	r2, [sp, #28]
 800c1a2:	4654      	mov	r4, sl
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f04f 0c0a 	mov.w	ip, #10
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b0:	3b30      	subs	r3, #48	; 0x30
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	d94e      	bls.n	800c254 <_vfiprintf_r+0x1c4>
 800c1b6:	b1b0      	cbz	r0, 800c1e6 <_vfiprintf_r+0x156>
 800c1b8:	9207      	str	r2, [sp, #28]
 800c1ba:	e014      	b.n	800c1e6 <_vfiprintf_r+0x156>
 800c1bc:	eba0 0308 	sub.w	r3, r0, r8
 800c1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	46a2      	mov	sl, r4
 800c1ca:	e7d2      	b.n	800c172 <_vfiprintf_r+0xe2>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	1d19      	adds	r1, r3, #4
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bfbb      	ittet	lt
 800c1d8:	425b      	neglt	r3, r3
 800c1da:	f042 0202 	orrlt.w	r2, r2, #2
 800c1de:	9307      	strge	r3, [sp, #28]
 800c1e0:	9307      	strlt	r3, [sp, #28]
 800c1e2:	bfb8      	it	lt
 800c1e4:	9204      	strlt	r2, [sp, #16]
 800c1e6:	7823      	ldrb	r3, [r4, #0]
 800c1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ea:	d10c      	bne.n	800c206 <_vfiprintf_r+0x176>
 800c1ec:	7863      	ldrb	r3, [r4, #1]
 800c1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f0:	d135      	bne.n	800c25e <_vfiprintf_r+0x1ce>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	9203      	str	r2, [sp, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfb8      	it	lt
 800c1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800c202:	3402      	adds	r4, #2
 800c204:	9305      	str	r3, [sp, #20]
 800c206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c2ec <_vfiprintf_r+0x25c>
 800c20a:	7821      	ldrb	r1, [r4, #0]
 800c20c:	2203      	movs	r2, #3
 800c20e:	4650      	mov	r0, sl
 800c210:	f7f4 f82e 	bl	8000270 <memchr>
 800c214:	b140      	cbz	r0, 800c228 <_vfiprintf_r+0x198>
 800c216:	2340      	movs	r3, #64	; 0x40
 800c218:	eba0 000a 	sub.w	r0, r0, sl
 800c21c:	fa03 f000 	lsl.w	r0, r3, r0
 800c220:	9b04      	ldr	r3, [sp, #16]
 800c222:	4303      	orrs	r3, r0
 800c224:	3401      	adds	r4, #1
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22c:	482c      	ldr	r0, [pc, #176]	; (800c2e0 <_vfiprintf_r+0x250>)
 800c22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c232:	2206      	movs	r2, #6
 800c234:	f7f4 f81c 	bl	8000270 <memchr>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d03f      	beq.n	800c2bc <_vfiprintf_r+0x22c>
 800c23c:	4b29      	ldr	r3, [pc, #164]	; (800c2e4 <_vfiprintf_r+0x254>)
 800c23e:	bb1b      	cbnz	r3, 800c288 <_vfiprintf_r+0x1f8>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	3307      	adds	r3, #7
 800c244:	f023 0307 	bic.w	r3, r3, #7
 800c248:	3308      	adds	r3, #8
 800c24a:	9303      	str	r3, [sp, #12]
 800c24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c24e:	443b      	add	r3, r7
 800c250:	9309      	str	r3, [sp, #36]	; 0x24
 800c252:	e767      	b.n	800c124 <_vfiprintf_r+0x94>
 800c254:	fb0c 3202 	mla	r2, ip, r2, r3
 800c258:	460c      	mov	r4, r1
 800c25a:	2001      	movs	r0, #1
 800c25c:	e7a5      	b.n	800c1aa <_vfiprintf_r+0x11a>
 800c25e:	2300      	movs	r3, #0
 800c260:	3401      	adds	r4, #1
 800c262:	9305      	str	r3, [sp, #20]
 800c264:	4619      	mov	r1, r3
 800c266:	f04f 0c0a 	mov.w	ip, #10
 800c26a:	4620      	mov	r0, r4
 800c26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c270:	3a30      	subs	r2, #48	; 0x30
 800c272:	2a09      	cmp	r2, #9
 800c274:	d903      	bls.n	800c27e <_vfiprintf_r+0x1ee>
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0c5      	beq.n	800c206 <_vfiprintf_r+0x176>
 800c27a:	9105      	str	r1, [sp, #20]
 800c27c:	e7c3      	b.n	800c206 <_vfiprintf_r+0x176>
 800c27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c282:	4604      	mov	r4, r0
 800c284:	2301      	movs	r3, #1
 800c286:	e7f0      	b.n	800c26a <_vfiprintf_r+0x1da>
 800c288:	ab03      	add	r3, sp, #12
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	462a      	mov	r2, r5
 800c28e:	4b16      	ldr	r3, [pc, #88]	; (800c2e8 <_vfiprintf_r+0x258>)
 800c290:	a904      	add	r1, sp, #16
 800c292:	4630      	mov	r0, r6
 800c294:	f7fb faac 	bl	80077f0 <_printf_float>
 800c298:	4607      	mov	r7, r0
 800c29a:	1c78      	adds	r0, r7, #1
 800c29c:	d1d6      	bne.n	800c24c <_vfiprintf_r+0x1bc>
 800c29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a0:	07d9      	lsls	r1, r3, #31
 800c2a2:	d405      	bmi.n	800c2b0 <_vfiprintf_r+0x220>
 800c2a4:	89ab      	ldrh	r3, [r5, #12]
 800c2a6:	059a      	lsls	r2, r3, #22
 800c2a8:	d402      	bmi.n	800c2b0 <_vfiprintf_r+0x220>
 800c2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ac:	f7ff fe79 	bl	800bfa2 <__retarget_lock_release_recursive>
 800c2b0:	89ab      	ldrh	r3, [r5, #12]
 800c2b2:	065b      	lsls	r3, r3, #25
 800c2b4:	f53f af12 	bmi.w	800c0dc <_vfiprintf_r+0x4c>
 800c2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ba:	e711      	b.n	800c0e0 <_vfiprintf_r+0x50>
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <_vfiprintf_r+0x258>)
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fb fd1e 	bl	8007d08 <_printf_i>
 800c2cc:	e7e4      	b.n	800c298 <_vfiprintf_r+0x208>
 800c2ce:	bf00      	nop
 800c2d0:	0800d45c 	.word	0x0800d45c
 800c2d4:	0800d47c 	.word	0x0800d47c
 800c2d8:	0800d43c 	.word	0x0800d43c
 800c2dc:	0800d3d4 	.word	0x0800d3d4
 800c2e0:	0800d3de 	.word	0x0800d3de
 800c2e4:	080077f1 	.word	0x080077f1
 800c2e8:	0800c06b 	.word	0x0800c06b
 800c2ec:	0800d3da 	.word	0x0800d3da

0800c2f0 <__swbuf_r>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	460e      	mov	r6, r1
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	b118      	cbz	r0, 800c302 <__swbuf_r+0x12>
 800c2fa:	6983      	ldr	r3, [r0, #24]
 800c2fc:	b90b      	cbnz	r3, 800c302 <__swbuf_r+0x12>
 800c2fe:	f7ff fd9f 	bl	800be40 <__sinit>
 800c302:	4b21      	ldr	r3, [pc, #132]	; (800c388 <__swbuf_r+0x98>)
 800c304:	429c      	cmp	r4, r3
 800c306:	d12b      	bne.n	800c360 <__swbuf_r+0x70>
 800c308:	686c      	ldr	r4, [r5, #4]
 800c30a:	69a3      	ldr	r3, [r4, #24]
 800c30c:	60a3      	str	r3, [r4, #8]
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	071a      	lsls	r2, r3, #28
 800c312:	d52f      	bpl.n	800c374 <__swbuf_r+0x84>
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	b36b      	cbz	r3, 800c374 <__swbuf_r+0x84>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	6820      	ldr	r0, [r4, #0]
 800c31c:	1ac0      	subs	r0, r0, r3
 800c31e:	6963      	ldr	r3, [r4, #20]
 800c320:	b2f6      	uxtb	r6, r6
 800c322:	4283      	cmp	r3, r0
 800c324:	4637      	mov	r7, r6
 800c326:	dc04      	bgt.n	800c332 <__swbuf_r+0x42>
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f7ff fcf4 	bl	800bd18 <_fflush_r>
 800c330:	bb30      	cbnz	r0, 800c380 <__swbuf_r+0x90>
 800c332:	68a3      	ldr	r3, [r4, #8]
 800c334:	3b01      	subs	r3, #1
 800c336:	60a3      	str	r3, [r4, #8]
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	6022      	str	r2, [r4, #0]
 800c33e:	701e      	strb	r6, [r3, #0]
 800c340:	6963      	ldr	r3, [r4, #20]
 800c342:	3001      	adds	r0, #1
 800c344:	4283      	cmp	r3, r0
 800c346:	d004      	beq.n	800c352 <__swbuf_r+0x62>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	07db      	lsls	r3, r3, #31
 800c34c:	d506      	bpl.n	800c35c <__swbuf_r+0x6c>
 800c34e:	2e0a      	cmp	r6, #10
 800c350:	d104      	bne.n	800c35c <__swbuf_r+0x6c>
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f7ff fcdf 	bl	800bd18 <_fflush_r>
 800c35a:	b988      	cbnz	r0, 800c380 <__swbuf_r+0x90>
 800c35c:	4638      	mov	r0, r7
 800c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <__swbuf_r+0x9c>)
 800c362:	429c      	cmp	r4, r3
 800c364:	d101      	bne.n	800c36a <__swbuf_r+0x7a>
 800c366:	68ac      	ldr	r4, [r5, #8]
 800c368:	e7cf      	b.n	800c30a <__swbuf_r+0x1a>
 800c36a:	4b09      	ldr	r3, [pc, #36]	; (800c390 <__swbuf_r+0xa0>)
 800c36c:	429c      	cmp	r4, r3
 800c36e:	bf08      	it	eq
 800c370:	68ec      	ldreq	r4, [r5, #12]
 800c372:	e7ca      	b.n	800c30a <__swbuf_r+0x1a>
 800c374:	4621      	mov	r1, r4
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f80c 	bl	800c394 <__swsetup_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d0cb      	beq.n	800c318 <__swbuf_r+0x28>
 800c380:	f04f 37ff 	mov.w	r7, #4294967295
 800c384:	e7ea      	b.n	800c35c <__swbuf_r+0x6c>
 800c386:	bf00      	nop
 800c388:	0800d45c 	.word	0x0800d45c
 800c38c:	0800d47c 	.word	0x0800d47c
 800c390:	0800d43c 	.word	0x0800d43c

0800c394 <__swsetup_r>:
 800c394:	4b32      	ldr	r3, [pc, #200]	; (800c460 <__swsetup_r+0xcc>)
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	681d      	ldr	r5, [r3, #0]
 800c39a:	4606      	mov	r6, r0
 800c39c:	460c      	mov	r4, r1
 800c39e:	b125      	cbz	r5, 800c3aa <__swsetup_r+0x16>
 800c3a0:	69ab      	ldr	r3, [r5, #24]
 800c3a2:	b913      	cbnz	r3, 800c3aa <__swsetup_r+0x16>
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f7ff fd4b 	bl	800be40 <__sinit>
 800c3aa:	4b2e      	ldr	r3, [pc, #184]	; (800c464 <__swsetup_r+0xd0>)
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	d10f      	bne.n	800c3d0 <__swsetup_r+0x3c>
 800c3b0:	686c      	ldr	r4, [r5, #4]
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b8:	0719      	lsls	r1, r3, #28
 800c3ba:	d42c      	bmi.n	800c416 <__swsetup_r+0x82>
 800c3bc:	06dd      	lsls	r5, r3, #27
 800c3be:	d411      	bmi.n	800c3e4 <__swsetup_r+0x50>
 800c3c0:	2309      	movs	r3, #9
 800c3c2:	6033      	str	r3, [r6, #0]
 800c3c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	e03e      	b.n	800c44e <__swsetup_r+0xba>
 800c3d0:	4b25      	ldr	r3, [pc, #148]	; (800c468 <__swsetup_r+0xd4>)
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	d101      	bne.n	800c3da <__swsetup_r+0x46>
 800c3d6:	68ac      	ldr	r4, [r5, #8]
 800c3d8:	e7eb      	b.n	800c3b2 <__swsetup_r+0x1e>
 800c3da:	4b24      	ldr	r3, [pc, #144]	; (800c46c <__swsetup_r+0xd8>)
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	bf08      	it	eq
 800c3e0:	68ec      	ldreq	r4, [r5, #12]
 800c3e2:	e7e6      	b.n	800c3b2 <__swsetup_r+0x1e>
 800c3e4:	0758      	lsls	r0, r3, #29
 800c3e6:	d512      	bpl.n	800c40e <__swsetup_r+0x7a>
 800c3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ea:	b141      	cbz	r1, 800c3fe <__swsetup_r+0x6a>
 800c3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d002      	beq.n	800c3fa <__swsetup_r+0x66>
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7fe fd9b 	bl	800af30 <_free_r>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	2300      	movs	r3, #0
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	6923      	ldr	r3, [r4, #16]
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0308 	orr.w	r3, r3, #8
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	b94b      	cbnz	r3, 800c42e <__swsetup_r+0x9a>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c424:	d003      	beq.n	800c42e <__swsetup_r+0x9a>
 800c426:	4621      	mov	r1, r4
 800c428:	4630      	mov	r0, r6
 800c42a:	f000 f84d 	bl	800c4c8 <__smakebuf_r>
 800c42e:	89a0      	ldrh	r0, [r4, #12]
 800c430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c434:	f010 0301 	ands.w	r3, r0, #1
 800c438:	d00a      	beq.n	800c450 <__swsetup_r+0xbc>
 800c43a:	2300      	movs	r3, #0
 800c43c:	60a3      	str	r3, [r4, #8]
 800c43e:	6963      	ldr	r3, [r4, #20]
 800c440:	425b      	negs	r3, r3
 800c442:	61a3      	str	r3, [r4, #24]
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	b943      	cbnz	r3, 800c45a <__swsetup_r+0xc6>
 800c448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c44c:	d1ba      	bne.n	800c3c4 <__swsetup_r+0x30>
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	0781      	lsls	r1, r0, #30
 800c452:	bf58      	it	pl
 800c454:	6963      	ldrpl	r3, [r4, #20]
 800c456:	60a3      	str	r3, [r4, #8]
 800c458:	e7f4      	b.n	800c444 <__swsetup_r+0xb0>
 800c45a:	2000      	movs	r0, #0
 800c45c:	e7f7      	b.n	800c44e <__swsetup_r+0xba>
 800c45e:	bf00      	nop
 800c460:	20000098 	.word	0x20000098
 800c464:	0800d45c 	.word	0x0800d45c
 800c468:	0800d47c 	.word	0x0800d47c
 800c46c:	0800d43c 	.word	0x0800d43c

0800c470 <abort>:
 800c470:	b508      	push	{r3, lr}
 800c472:	2006      	movs	r0, #6
 800c474:	f000 f898 	bl	800c5a8 <raise>
 800c478:	2001      	movs	r0, #1
 800c47a:	f7f6 f89b 	bl	80025b4 <_exit>

0800c47e <__swhatbuf_r>:
 800c47e:	b570      	push	{r4, r5, r6, lr}
 800c480:	460e      	mov	r6, r1
 800c482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c486:	2900      	cmp	r1, #0
 800c488:	b096      	sub	sp, #88	; 0x58
 800c48a:	4614      	mov	r4, r2
 800c48c:	461d      	mov	r5, r3
 800c48e:	da07      	bge.n	800c4a0 <__swhatbuf_r+0x22>
 800c490:	2300      	movs	r3, #0
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	89b3      	ldrh	r3, [r6, #12]
 800c496:	061a      	lsls	r2, r3, #24
 800c498:	d410      	bmi.n	800c4bc <__swhatbuf_r+0x3e>
 800c49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c49e:	e00e      	b.n	800c4be <__swhatbuf_r+0x40>
 800c4a0:	466a      	mov	r2, sp
 800c4a2:	f000 f89d 	bl	800c5e0 <_fstat_r>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	dbf2      	blt.n	800c490 <__swhatbuf_r+0x12>
 800c4aa:	9a01      	ldr	r2, [sp, #4]
 800c4ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4b4:	425a      	negs	r2, r3
 800c4b6:	415a      	adcs	r2, r3
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	e7ee      	b.n	800c49a <__swhatbuf_r+0x1c>
 800c4bc:	2340      	movs	r3, #64	; 0x40
 800c4be:	2000      	movs	r0, #0
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	b016      	add	sp, #88	; 0x58
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4c8 <__smakebuf_r>:
 800c4c8:	898b      	ldrh	r3, [r1, #12]
 800c4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4cc:	079d      	lsls	r5, r3, #30
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	d507      	bpl.n	800c4e4 <__smakebuf_r+0x1c>
 800c4d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	2301      	movs	r3, #1
 800c4de:	6163      	str	r3, [r4, #20]
 800c4e0:	b002      	add	sp, #8
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	ab01      	add	r3, sp, #4
 800c4e6:	466a      	mov	r2, sp
 800c4e8:	f7ff ffc9 	bl	800c47e <__swhatbuf_r>
 800c4ec:	9900      	ldr	r1, [sp, #0]
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7fe fd6d 	bl	800afd0 <_malloc_r>
 800c4f6:	b948      	cbnz	r0, 800c50c <__smakebuf_r+0x44>
 800c4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fc:	059a      	lsls	r2, r3, #22
 800c4fe:	d4ef      	bmi.n	800c4e0 <__smakebuf_r+0x18>
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	f043 0302 	orr.w	r3, r3, #2
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	e7e3      	b.n	800c4d4 <__smakebuf_r+0xc>
 800c50c:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <__smakebuf_r+0x7c>)
 800c50e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	6020      	str	r0, [r4, #0]
 800c514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c518:	81a3      	strh	r3, [r4, #12]
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	6163      	str	r3, [r4, #20]
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	6120      	str	r0, [r4, #16]
 800c522:	b15b      	cbz	r3, 800c53c <__smakebuf_r+0x74>
 800c524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 f86b 	bl	800c604 <_isatty_r>
 800c52e:	b128      	cbz	r0, 800c53c <__smakebuf_r+0x74>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	89a0      	ldrh	r0, [r4, #12]
 800c53e:	4305      	orrs	r5, r0
 800c540:	81a5      	strh	r5, [r4, #12]
 800c542:	e7cd      	b.n	800c4e0 <__smakebuf_r+0x18>
 800c544:	0800bdd9 	.word	0x0800bdd9

0800c548 <_malloc_usable_size_r>:
 800c548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54c:	1f18      	subs	r0, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfbc      	itt	lt
 800c552:	580b      	ldrlt	r3, [r1, r0]
 800c554:	18c0      	addlt	r0, r0, r3
 800c556:	4770      	bx	lr

0800c558 <_raise_r>:
 800c558:	291f      	cmp	r1, #31
 800c55a:	b538      	push	{r3, r4, r5, lr}
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
 800c560:	d904      	bls.n	800c56c <_raise_r+0x14>
 800c562:	2316      	movs	r3, #22
 800c564:	6003      	str	r3, [r0, #0]
 800c566:	f04f 30ff 	mov.w	r0, #4294967295
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c56e:	b112      	cbz	r2, 800c576 <_raise_r+0x1e>
 800c570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c574:	b94b      	cbnz	r3, 800c58a <_raise_r+0x32>
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f830 	bl	800c5dc <_getpid_r>
 800c57c:	462a      	mov	r2, r5
 800c57e:	4601      	mov	r1, r0
 800c580:	4620      	mov	r0, r4
 800c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c586:	f000 b817 	b.w	800c5b8 <_kill_r>
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d00a      	beq.n	800c5a4 <_raise_r+0x4c>
 800c58e:	1c59      	adds	r1, r3, #1
 800c590:	d103      	bne.n	800c59a <_raise_r+0x42>
 800c592:	2316      	movs	r3, #22
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	2001      	movs	r0, #1
 800c598:	e7e7      	b.n	800c56a <_raise_r+0x12>
 800c59a:	2400      	movs	r4, #0
 800c59c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	4798      	blx	r3
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e7e0      	b.n	800c56a <_raise_r+0x12>

0800c5a8 <raise>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <raise+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f7ff bfd3 	b.w	800c558 <_raise_r>
 800c5b2:	bf00      	nop
 800c5b4:	20000098 	.word	0x20000098

0800c5b8 <_kill_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	; (800c5d8 <_kill_r+0x20>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f7f5 ffe5 	bl	8002594 <_kill>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <_kill_r+0x1c>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	b103      	cbz	r3, 800c5d4 <_kill_r+0x1c>
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200186e0 	.word	0x200186e0

0800c5dc <_getpid_r>:
 800c5dc:	f7f5 bfd2 	b.w	8002584 <_getpid>

0800c5e0 <_fstat_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d07      	ldr	r5, [pc, #28]	; (800c600 <_fstat_r+0x20>)
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	f7f6 f830 	bl	8002652 <_fstat>
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d102      	bne.n	800c5fc <_fstat_r+0x1c>
 800c5f6:	682b      	ldr	r3, [r5, #0]
 800c5f8:	b103      	cbz	r3, 800c5fc <_fstat_r+0x1c>
 800c5fa:	6023      	str	r3, [r4, #0]
 800c5fc:	bd38      	pop	{r3, r4, r5, pc}
 800c5fe:	bf00      	nop
 800c600:	200186e0 	.word	0x200186e0

0800c604 <_isatty_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4d06      	ldr	r5, [pc, #24]	; (800c620 <_isatty_r+0x1c>)
 800c608:	2300      	movs	r3, #0
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	f7f6 f82f 	bl	8002672 <_isatty>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_isatty_r+0x1a>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_isatty_r+0x1a>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	200186e0 	.word	0x200186e0

0800c624 <_init>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	bf00      	nop
 800c628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62a:	bc08      	pop	{r3}
 800c62c:	469e      	mov	lr, r3
 800c62e:	4770      	bx	lr

0800c630 <_fini>:
 800c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c632:	bf00      	nop
 800c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c636:	bc08      	pop	{r3}
 800c638:	469e      	mov	lr, r3
 800c63a:	4770      	bx	lr
