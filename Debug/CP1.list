
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0800ac70  0800ac70  0001ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b734  0800b734  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b73c  0800b73c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b740  0800b740  0001b740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010424  2000020c  0800b950  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010630  0800b950  00020630  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013646  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab2  00000000  00000000  00033880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00036338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00036eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029364  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101d5  00000000  00000000  00060c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8503  00000000  00000000  00070e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001693b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000020c 	.word	0x2000020c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ac54 	.word	0x0800ac54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000210 	.word	0x20000210
 800023c:	0800ac54 	.word	0x0800ac54

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_ADC3_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_ADC3_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a32:	f001 fbf1 	bl	8002218 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f001 f852 	bl	8001ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a52:	f001 fe6d 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f001 f842 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000240 	.word	0x20000240
 8000a6c:	40012200 	.word	0x40012200
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_ADC_MspInit+0xe4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d15c      	bne.n	8000b50 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000af6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000afa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_ADC_MspInit+0xec>)
 8000b0c:	f002 fa0e 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	230f      	movs	r3, #15
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0xf0>)
 8000b24:	f002 fa02 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <HAL_ADC_MspInit+0xf4>)
 8000b3c:	f002 f9f6 	bl	8002f2c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2012      	movs	r0, #18
 8000b46:	f002 f928 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b4a:	2012      	movs	r0, #18
 8000b4c:	f002 f941 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000b50:	bf00      	nop
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40012200 	.word	0x40012200
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021400 	.word	0x40021400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000

08000b6c <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <config_ADC+0x38>)
 8000b96:	f001 fdcb 	bl	8002730 <HAL_ADC_ConfigChannel>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000240 	.word	0x20000240

08000ba8 <read_ADC>:

uint32_t read_ADC(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000bac:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <read_ADC+0x30>)
 8000bae:	f001 fb77 	bl	80022a0 <HAL_ADC_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10a      	bne.n	8000bce <read_ADC+0x26>
	{
	  while(!Read);
 8000bb8:	bf00      	nop
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <read_ADC+0x34>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f083 0301 	eor.w	r3, r3, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f8      	bne.n	8000bba <read_ADC+0x12>
	  HAL_ADC_Stop_IT(&hadc3);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <read_ADC+0x30>)
 8000bca:	f001 fc41 	bl	8002450 <HAL_ADC_Stop_IT>
	}

	return adc_value;
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <read_ADC+0x38>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000240 	.word	0x20000240
 8000bdc:	20000238 	.word	0x20000238
 8000be0:	2000023c 	.word	0x2000023c

08000be4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(&hadc3);
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <HAL_ADC_ConvCpltCallback+0x24>)
 8000bee:	f001 fd7d 	bl	80026ec <HAL_ADC_GetValue>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <HAL_ADC_ConvCpltCallback+0x28>)
 8000bf6:	6013      	str	r3, [r2, #0]
	Read = true;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000240 	.word	0x20000240
 8000c0c:	2000023c 	.word	0x2000023c
 8000c10:	20000238 	.word	0x20000238

08000c14 <check_command>:
#include "commands.h"


unsigned char check_command(char* message)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	char cmd = INV;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000c20:	2202      	movs	r2, #2
 8000c22:	4947      	ldr	r1, [pc, #284]	; (8000d40 <check_command+0x12c>)
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f005 ff50 	bl	8006aca <strncmp>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf0c      	ite	eq
 8000c30:	2301      	moveq	r3, #1
 8000c32:	2300      	movne	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4940      	ldr	r1, [pc, #256]	; (8000d44 <check_command+0x130>)
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f005 ff41 	bl	8006aca <strncmp>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <check_command+0x3e>
 8000c4e:	2202      	movs	r2, #2
 8000c50:	e000      	b.n	8000c54 <check_command+0x40>
 8000c52:	2200      	movs	r2, #0
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4413      	add	r3, r2
 8000c58:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	493a      	ldr	r1, [pc, #232]	; (8000d48 <check_command+0x134>)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f005 ff33 	bl	8006aca <strncmp>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <check_command+0x5a>
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	e000      	b.n	8000c70 <check_command+0x5c>
 8000c6e:	2200      	movs	r2, #0
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4413      	add	r3, r2
 8000c74:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000c76:	2202      	movs	r2, #2
 8000c78:	4934      	ldr	r1, [pc, #208]	; (8000d4c <check_command+0x138>)
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f005 ff25 	bl	8006aca <strncmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <check_command+0x76>
 8000c86:	2204      	movs	r2, #4
 8000c88:	e000      	b.n	8000c8c <check_command+0x78>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4413      	add	r3, r2
 8000c90:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000c92:	2202      	movs	r2, #2
 8000c94:	492e      	ldr	r1, [pc, #184]	; (8000d50 <check_command+0x13c>)
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f005 ff17 	bl	8006aca <strncmp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <check_command+0x92>
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	e000      	b.n	8000ca8 <check_command+0x94>
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	4413      	add	r3, r2
 8000cac:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4928      	ldr	r1, [pc, #160]	; (8000d54 <check_command+0x140>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f005 ff09 	bl	8006aca <strncmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <check_command+0xae>
 8000cbe:	2206      	movs	r2, #6
 8000cc0:	e000      	b.n	8000cc4 <check_command+0xb0>
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4922      	ldr	r1, [pc, #136]	; (8000d58 <check_command+0x144>)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f005 fefb 	bl	8006aca <strncmp>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <check_command+0xca>
 8000cda:	2207      	movs	r2, #7
 8000cdc:	e000      	b.n	8000ce0 <check_command+0xcc>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <check_command+0x148>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <check_command+0xe4>
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	e000      	b.n	8000cfa <check_command+0xe6>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <check_command+0x14c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <check_command+0xfe>
 8000d0e:	2209      	movs	r2, #9
 8000d10:	e000      	b.n	8000d14 <check_command+0x100>
 8000d12:	2200      	movs	r2, #0
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	4413      	add	r3, r2
 8000d18:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4911      	ldr	r1, [pc, #68]	; (8000d64 <check_command+0x150>)
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f005 fed3 	bl	8006aca <strncmp>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <check_command+0x11a>
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	e000      	b.n	8000d30 <check_command+0x11c>
 8000d2e:	2200      	movs	r2, #0
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4413      	add	r3, r2
 8000d34:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0800ac70 	.word	0x0800ac70
 8000d44:	0800ac74 	.word	0x0800ac74
 8000d48:	0800ac78 	.word	0x0800ac78
 8000d4c:	0800ac7c 	.word	0x0800ac7c
 8000d50:	0800ac80 	.word	0x0800ac80
 8000d54:	0800ac84 	.word	0x0800ac84
 8000d58:	0800ac88 	.word	0x0800ac88
 8000d5c:	0800ac8c 	.word	0x0800ac8c
 8000d60:	0800ac90 	.word	0x0800ac90
 8000d64:	0800ac94 	.word	0x0800ac94

08000d68 <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <proc_inv_cmd+0x18>)
 8000d72:	f001 f8d7 	bl	8001f24 <send_UART>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	0800ac98 	.word	0x0800ac98

08000d84 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	4932      	ldr	r1, [pc, #200]	; (8000e60 <proc_mr_cmd+0xdc>)
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f005 fe26 	bl	80069e8 <siscanf>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d157      	bne.n	8000e52 <proc_mr_cmd+0xce>
	{
 8000da2:	466b      	mov	r3, sp
 8000da4:	461d      	mov	r5, r3
		char data[length];
 8000da6:	68fc      	ldr	r4, [r7, #12]
 8000da8:	4623      	mov	r3, r4
 8000daa:	3b01      	subs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4620      	mov	r0, r4
 8000db0:	f04f 0100 	mov.w	r1, #0
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	00cb      	lsls	r3, r1, #3
 8000dbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dc2:	00c2      	lsls	r2, r0, #3
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	00cb      	lsls	r3, r1, #3
 8000dd4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dd8:	00c2      	lsls	r2, r0, #3
 8000dda:	1de3      	adds	r3, r4, #7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	ebad 0d03 	sub.w	sp, sp, r3
 8000de4:	466b      	mov	r3, sp
 8000de6:	3300      	adds	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	68f9      	ldr	r1, [r7, #12]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fabd 	bl	8001370 <memory_read>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d025      	beq.n	8000e48 <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <proc_mr_cmd+0xe0>)
 8000e04:	f005 fe73 	bl	8006aee <strncpy>

			sprintf((char*) message, "Memory read: ");
 8000e08:	4917      	ldr	r1, [pc, #92]	; (8000e68 <proc_mr_cmd+0xe4>)
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f005 fdcc 	bl	80069a8 <siprintf>

			for(int i = 0; i < length; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e010      	b.n	8000e38 <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fa12 	bl	8000240 <strlen>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1898      	adds	r0, r3, r2
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	490f      	ldr	r1, [pc, #60]	; (8000e6c <proc_mr_cmd+0xe8>)
 8000e2e:	f005 fdbb 	bl	80069a8 <siprintf>
			for(int i = 0; i < length; i++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3ea      	bcc.n	8000e16 <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f001 f86f 	bl	8001f24 <send_UART>
 8000e46:	e002      	b.n	8000e4e <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <proc_mr_cmd+0xec>)
 8000e4a:	f001 f86b 	bl	8001f24 <send_UART>
 8000e4e:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 8000e50:	e002      	b.n	8000e58 <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <proc_mr_cmd+0xf0>)
 8000e54:	f001 f866 	bl	8001f24 <send_UART>
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e60:	0800acc0 	.word	0x0800acc0
 8000e64:	20010490 	.word	0x20010490
 8000e68:	0800accc 	.word	0x0800accc
 8000e6c:	0800acdc 	.word	0x0800acdc
 8000e70:	0800ace4 	.word	0x0800ace4
 8000e74:	0800ad18 	.word	0x0800ad18

08000e78 <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8000e80:	f107 0110 	add.w	r1, r7, #16
 8000e84:	f107 0214 	add.w	r2, r7, #20
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4912      	ldr	r1, [pc, #72]	; (8000edc <proc_mw_cmd+0x64>)
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f005 fda8 	bl	80069e8 <siscanf>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d116      	bne.n	8000ecc <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fa97 	bl	80013d8 <memory_write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <proc_mw_cmd+0x68>)
 8000eb8:	f005 fe19 	bl	8006aee <strncpy>
			send_UART("Memory written with success.");
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <proc_mw_cmd+0x6c>)
 8000ebe:	f001 f831 	bl	8001f24 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8000ec2:	e006      	b.n	8000ed2 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <proc_mw_cmd+0x70>)
 8000ec6:	f001 f82d 	bl	8001f24 <send_UART>
}
 8000eca:	e002      	b.n	8000ed2 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <proc_mw_cmd+0x74>)
 8000ece:	f001 f829 	bl	8001f24 <send_UART>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	0800ad40 	.word	0x0800ad40
 8000ee0:	20010490 	.word	0x20010490
 8000ee4:	0800ad4c 	.word	0x0800ad4c
 8000ee8:	0800ad6c 	.word	0x0800ad6c
 8000eec:	0800ada0 	.word	0x0800ada0

08000ef0 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	4918      	ldr	r1, [pc, #96]	; (8000f64 <proc_mi_cmd+0x74>)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f005 fd70 	bl	80069e8 <siscanf>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fcdf 	bl	80018d8 <is_GPIO_pin_free>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d016      	beq.n	8000f4e <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa8e 	bl	8001448 <make_pin_input>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d009      	beq.n	8000f46 <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <proc_mi_cmd+0x78>)
 8000f3a:	f005 fdd8 	bl	8006aee <strncpy>
				send_UART("Pin(s) set as input with success.");
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <proc_mi_cmd+0x7c>)
 8000f40:	f000 fff0 	bl	8001f24 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 8000f44:	e00a      	b.n	8000f5c <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <proc_mi_cmd+0x80>)
 8000f48:	f000 ffec 	bl	8001f24 <send_UART>
}
 8000f4c:	e006      	b.n	8000f5c <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8000f4e:	4809      	ldr	r0, [pc, #36]	; (8000f74 <proc_mi_cmd+0x84>)
 8000f50:	f000 ffe8 	bl	8001f24 <send_UART>
}
 8000f54:	e002      	b.n	8000f5c <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <proc_mi_cmd+0x88>)
 8000f58:	f000 ffe4 	bl	8001f24 <send_UART>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	0800adcc 	.word	0x0800adcc
 8000f68:	20010490 	.word	0x20010490
 8000f6c:	0800add8 	.word	0x0800add8
 8000f70:	0800adfc 	.word	0x0800adfc
 8000f74:	0800ae30 	.word	0x0800ae30
 8000f78:	0800ae68 	.word	0x0800ae68

08000f7c <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	f107 020c 	add.w	r2, r7, #12
 8000f8c:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <proc_mo_cmd+0x74>)
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f005 fd2a 	bl	80069e8 <siscanf>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d123      	bne.n	8000fe2 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fc99 	bl	80018d8 <is_GPIO_pin_free>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d016      	beq.n	8000fda <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fae4 	bl	8001580 <make_pin_output>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <proc_mo_cmd+0x78>)
 8000fc6:	f005 fd92 	bl	8006aee <strncpy>
				send_UART("Pin(s) set as output with success.");
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <proc_mo_cmd+0x7c>)
 8000fcc:	f000 ffaa 	bl	8001f24 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8000fd0:	e00a      	b.n	8000fe8 <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <proc_mo_cmd+0x80>)
 8000fd4:	f000 ffa6 	bl	8001f24 <send_UART>
}
 8000fd8:	e006      	b.n	8000fe8 <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <proc_mo_cmd+0x84>)
 8000fdc:	f000 ffa2 	bl	8001f24 <send_UART>
}
 8000fe0:	e002      	b.n	8000fe8 <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <proc_mo_cmd+0x88>)
 8000fe4:	f000 ff9e 	bl	8001f24 <send_UART>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0800ae94 	.word	0x0800ae94
 8000ff4:	20010490 	.word	0x20010490
 8000ff8:	0800aea0 	.word	0x0800aea0
 8000ffc:	0800aec4 	.word	0x0800aec4
 8001000:	0800ae30 	.word	0x0800ae30
 8001004:	0800aefc 	.word	0x0800aefc

08001008 <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	f107 0220 	add.w	r2, r7, #32
 8001018:	492a      	ldr	r1, [pc, #168]	; (80010c4 <proc_rd_cmd+0xbc>)
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 fce4 	bl	80069e8 <siscanf>
 8001020:	4603      	mov	r3, r0
 8001022:	2b02      	cmp	r3, #2
 8001024:	d147      	bne.n	80010b6 <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	69f9      	ldr	r1, [r7, #28]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fb44 	bl	80016bc <read_dig_input>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d039      	beq.n	80010ae <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800103a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4821      	ldr	r0, [pc, #132]	; (80010c8 <proc_rd_cmd+0xc0>)
 8001042:	f005 fd54 	bl	8006aee <strncpy>

			sprintf((char*) message, "Digital input read: ");
 8001046:	4921      	ldr	r1, [pc, #132]	; (80010cc <proc_rd_cmd+0xc4>)
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f005 fcad 	bl	80069a8 <siprintf>

			for(int i = 15; i >= 0; i--)
 800104e:	230f      	movs	r3, #15
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
 8001052:	e025      	b.n	80010a0 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff f8f3 	bl	8000240 <strlen>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1898      	adds	r0, r3, r2
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4918      	ldr	r1, [pc, #96]	; (80010d0 <proc_rd_cmd+0xc8>)
 800106e:	f005 fc9b 	bl	80069a8 <siprintf>

				if(!(i % 4) && i)
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10e      	bne.n	800109a <proc_rd_cmd+0x92>
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff f8dc 	bl	8000240 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	4910      	ldr	r1, [pc, #64]	; (80010d4 <proc_rd_cmd+0xcc>)
 8001092:	461a      	mov	r2, r3
 8001094:	460b      	mov	r3, r1
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	3b01      	subs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dad6      	bge.n	8001054 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 ff3c 	bl	8001f24 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 80010ac:	e006      	b.n	80010bc <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 80010ae:	480a      	ldr	r0, [pc, #40]	; (80010d8 <proc_rd_cmd+0xd0>)
 80010b0:	f000 ff38 	bl	8001f24 <send_UART>
}
 80010b4:	e002      	b.n	80010bc <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <proc_rd_cmd+0xd4>)
 80010b8:	f000 ff34 	bl	8001f24 <send_UART>
}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	0800af28 	.word	0x0800af28
 80010c8:	20010490 	.word	0x20010490
 80010cc:	0800af34 	.word	0x0800af34
 80010d0:	0800af4c 	.word	0x0800af4c
 80010d4:	0800af50 	.word	0x0800af50
 80010d8:	0800af54 	.word	0x0800af54
 80010dc:	0800af8c 	.word	0x0800af8c

080010e0 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 80010e8:	f107 0110 	add.w	r1, r7, #16
 80010ec:	f107 0214 	add.w	r2, r7, #20
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	460b      	mov	r3, r1
 80010f8:	4918      	ldr	r1, [pc, #96]	; (800115c <proc_wd_cmd+0x7c>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f005 fc74 	bl	80069e8 <siscanf>
 8001100:	4603      	mov	r3, r0
 8001102:	2b03      	cmp	r3, #3
 8001104:	d123      	bne.n	800114e <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fbe3 	bl	80018d8 <is_GPIO_pin_free>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d016      	beq.n	8001146 <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fb16 	bl	8001750 <write_dig_output>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <proc_wd_cmd+0x80>)
 8001132:	f005 fcdc 	bl	8006aee <strncpy>
				send_UART("Digital output value wrote with success.");
 8001136:	480b      	ldr	r0, [pc, #44]	; (8001164 <proc_wd_cmd+0x84>)
 8001138:	f000 fef4 	bl	8001f24 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 800113c:	e00a      	b.n	8001154 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <proc_wd_cmd+0x88>)
 8001140:	f000 fef0 	bl	8001f24 <send_UART>
}
 8001144:	e006      	b.n	8001154 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <proc_wd_cmd+0x8c>)
 8001148:	f000 feec 	bl	8001f24 <send_UART>
}
 800114c:	e002      	b.n	8001154 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <proc_wd_cmd+0x90>)
 8001150:	f000 fee8 	bl	8001f24 <send_UART>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800afbc 	.word	0x0800afbc
 8001160:	20010490 	.word	0x20010490
 8001164:	0800afc8 	.word	0x0800afc8
 8001168:	0800aff4 	.word	0x0800aff4
 800116c:	0800ae30 	.word	0x0800ae30
 8001170:	0800b030 	.word	0x0800b030
 8001174:	00000000 	.word	0x00000000

08001178 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	461a      	mov	r2, r3
 8001186:	492c      	ldr	r1, [pc, #176]	; (8001238 <proc_ra_cmd+0xc0>)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f005 fc2d 	bl	80069e8 <siscanf>
 800118e:	4603      	mov	r3, r0
 8001190:	2b01      	cmp	r3, #1
 8001192:	d13f      	bne.n	8001214 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fb21 	bl	80017e4 <analog_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d031      	beq.n	800120c <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80011a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <proc_ra_cmd+0xc4>)
 80011b0:	f005 fc9d 	bl	8006aee <strncpy>

			float volts = (float) value * 3.3 / 4095;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001228 <proc_ra_cmd+0xb0>
 80011c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ca:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001230 <proc_ra_cmd+0xb8>
 80011ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011d6:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 80011da:	4919      	ldr	r1, [pc, #100]	; (8001240 <proc_ra_cmd+0xc8>)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f005 fbe3 	bl	80069a8 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f82c 	bl	8000240 <strlen>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f8:	ed8d 7b00 	vstr	d7, [sp]
 80011fc:	4911      	ldr	r1, [pc, #68]	; (8001244 <proc_ra_cmd+0xcc>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 fbd2 	bl	80069a8 <siprintf>

			send_UART((char*) message);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fe8d 	bl	8001f24 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 800120a:	e006      	b.n	800121a <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <proc_ra_cmd+0xd0>)
 800120e:	f000 fe89 	bl	8001f24 <send_UART>
}
 8001212:	e002      	b.n	800121a <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <proc_ra_cmd+0xd4>)
 8001216:	f000 fe85 	bl	8001f24 <send_UART>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	66666666 	.word	0x66666666
 800122c:	400a6666 	.word	0x400a6666
 8001230:	00000000 	.word	0x00000000
 8001234:	40affe00 	.word	0x40affe00
 8001238:	0800b064 	.word	0x0800b064
 800123c:	20010490 	.word	0x20010490
 8001240:	0800b06c 	.word	0x0800b06c
 8001244:	0800b088 	.word	0x0800b088
 8001248:	0800b094 	.word	0x0800b094
 800124c:	0800b0c8 	.word	0x0800b0c8

08001250 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0c4      	sub	sp, #272	; 0x110
 8001254:	af00      	add	r7, sp, #0
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b0d      	cmp	r3, #13
 8001264:	d12a      	bne.n	80012bc <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800126c:	e010      	b.n	8001290 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <proc_last_cmd+0x7c>)
 8001270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001274:	4413      	add	r3, r2
 8001276:	7819      	ldrb	r1, [r3, #0]
 8001278:	f107 0208 	add.w	r2, r7, #8
 800127c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 8001286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800128a:	3301      	adds	r3, #1
 800128c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	ddea      	ble.n	800126e <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fcb9 	bl	8000c14 <check_command>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 80012a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <proc_last_cmd+0x80>)
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	4610      	mov	r0, r2
 80012b8:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80012ba:	e002      	b.n	80012c2 <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <proc_last_cmd+0x84>)
 80012be:	f000 fe31 	bl	8001f24 <send_UART>
}
 80012c2:	bf00      	nop
 80012c4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20010490 	.word	0x20010490
 80012d0:	20000000 	.word	0x20000000
 80012d4:	0800b0f0 	.word	0x0800b0f0

080012d8 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b0d      	cmp	r3, #13
 80012e8:	d109      	bne.n	80012fe <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80012ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <proc_help_cmd+0x34>)
 80012f2:	f005 fbfc 	bl	8006aee <strncpy>

		send_UART("MR <addr> <length>\n\r"
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <proc_help_cmd+0x38>)
 80012f8:	f000 fe14 	bl	8001f24 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 80012fc:	e002      	b.n	8001304 <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <proc_help_cmd+0x3c>)
 8001300:	f000 fe10 	bl	8001f24 <send_UART>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20010490 	.word	0x20010490
 8001310:	0800b110 	.word	0x0800b110
 8001314:	0800b1cc 	.word	0x0800b1cc

08001318 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3303      	adds	r3, #3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b0d      	cmp	r3, #13
 8001328:	d113      	bne.n	8001352 <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800132a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <proc_ver_cmd+0x48>)
 8001332:	f005 fbdc 	bl	8006aee <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <proc_ver_cmd+0x4c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	4909      	ldr	r1, [pc, #36]	; (8001364 <proc_ver_cmd+0x4c>)
 800133e:	600a      	str	r2, [r1, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4909      	ldr	r1, [pc, #36]	; (8001368 <proc_ver_cmd+0x50>)
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f005 fb2f 	bl	80069a8 <siprintf>
		send_UART((char*) message);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fdea 	bl	8001f24 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001350:	e002      	b.n	8001358 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <proc_ver_cmd+0x54>)
 8001354:	f000 fde6 	bl	8001f24 <send_UART>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20010490 	.word	0x20010490
 8001364:	20000228 	.word	0x20000228
 8001368:	0800b1ec 	.word	0x0800b1ec
 800136c:	0800b220 	.word	0x0800b220

08001370 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001382:	d202      	bcs.n	800138a <memory_read+0x1a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d901      	bls.n	800138e <memory_read+0x1e>
		return false;
 800138a:	2300      	movs	r3, #0
 800138c:	e01b      	b.n	80013c6 <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	429a      	cmp	r2, r3
 8001398:	d901      	bls.n	800139e <memory_read+0x2e>
		return false;
 800139a:	2300      	movs	r3, #0
 800139c:	e013      	b.n	80013c6 <memory_read+0x56>

	for(int i = 0; i < length; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e00b      	b.n	80013bc <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60fa      	str	r2, [r7, #12]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	440a      	add	r2, r1
 80013b0:	4908      	ldr	r1, [pc, #32]	; (80013d4 <memory_read+0x64>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8ef      	bhi.n	80013a4 <memory_read+0x34>
	}

	return true;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000388 	.word	0x20000388

080013d8 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d208      	bcs.n	80013fe <memory_write+0x26>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d805      	bhi.n	80013fe <memory_write+0x26>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db02      	blt.n	80013fe <memory_write+0x26>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	dd01      	ble.n	8001402 <memory_write+0x2a>
		return false;
 80013fe:	2300      	movs	r3, #0
 8001400:	e019      	b.n	8001436 <memory_write+0x5e>

	if((0x10000 - addr) < length)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	429a      	cmp	r2, r3
 800140c:	d901      	bls.n	8001412 <memory_write+0x3a>
		return false;
 800140e:	2300      	movs	r3, #0
 8001410:	e011      	b.n	8001436 <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <memory_write+0x54>
	{
		memory[addr++] = data;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60fa      	str	r2, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	b2d1      	uxtb	r1, r2
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <memory_write+0x6c>)
 8001424:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f1      	bhi.n	8001418 <memory_write+0x40>
	}

	return true;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000388 	.word	0x20000388

08001448 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <make_pin_input+0x24>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d806      	bhi.n	800146c <make_pin_input+0x24>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <make_pin_input+0x24>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d301      	bcc.n	8001470 <make_pin_input+0x28>
		return false;
 800146c:	2300      	movs	r3, #0
 800146e:	e07f      	b.n	8001570 <make_pin_input+0x128>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b05      	subs	r3, #5
 8001474:	2b06      	cmp	r3, #6
 8001476:	d85f      	bhi.n	8001538 <make_pin_input+0xf0>
 8001478:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <make_pin_input+0x38>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	0800149d 	.word	0x0800149d
 8001484:	08001539 	.word	0x08001539
 8001488:	080014b7 	.word	0x080014b7
 800148c:	080014d1 	.word	0x080014d1
 8001490:	080014eb 	.word	0x080014eb
 8001494:	08001505 	.word	0x08001505
 8001498:	0800151f 	.word	0x0800151f

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <make_pin_input+0x130>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a35      	ldr	r2, [pc, #212]	; (8001578 <make_pin_input+0x130>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <make_pin_input+0x130>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	e040      	b.n	8001538 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <make_pin_input+0x130>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <make_pin_input+0x130>)
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <make_pin_input+0x130>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	e033      	b.n	8001538 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <make_pin_input+0x130>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a28      	ldr	r2, [pc, #160]	; (8001578 <make_pin_input+0x130>)
 80014d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <make_pin_input+0x130>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	e026      	b.n	8001538 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80014ea:	4b23      	ldr	r3, [pc, #140]	; (8001578 <make_pin_input+0x130>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <make_pin_input+0x130>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <make_pin_input+0x130>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	e019      	b.n	8001538 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <make_pin_input+0x130>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <make_pin_input+0x130>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <make_pin_input+0x130>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	e00c      	b.n	8001538 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <make_pin_input+0x130>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <make_pin_input+0x130>)
 8001524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <make_pin_input+0x130>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <make_pin_input+0x134>)
 800155c:	4413      	add	r3, r2
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	461a      	mov	r2, r3
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f001 fcdf 	bl	8002f2c <HAL_GPIO_Init>

	return true;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3738      	adds	r7, #56	; 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	0010007f 	.word	0x0010007f

08001580 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	; 0x38
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <make_pin_output+0x24>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d806      	bhi.n	80015a4 <make_pin_output+0x24>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <make_pin_output+0x24>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a2:	d301      	bcc.n	80015a8 <make_pin_output+0x28>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e081      	b.n	80016ac <make_pin_output+0x12c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b05      	subs	r3, #5
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d85f      	bhi.n	8001670 <make_pin_output+0xf0>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <make_pin_output+0x38>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015d5 	.word	0x080015d5
 80015bc:	08001671 	.word	0x08001671
 80015c0:	080015ef 	.word	0x080015ef
 80015c4:	08001609 	.word	0x08001609
 80015c8:	08001623 	.word	0x08001623
 80015cc:	0800163d 	.word	0x0800163d
 80015d0:	08001657 	.word	0x08001657

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80015d4:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <make_pin_output+0x134>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <make_pin_output+0x134>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <make_pin_output+0x134>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	e040      	b.n	8001670 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <make_pin_output+0x134>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <make_pin_output+0x134>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <make_pin_output+0x134>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	e033      	b.n	8001670 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <make_pin_output+0x134>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <make_pin_output+0x134>)
 800160e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <make_pin_output+0x134>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	e026      	b.n	8001670 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <make_pin_output+0x134>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <make_pin_output+0x134>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <make_pin_output+0x134>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	e019      	b.n	8001670 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <make_pin_output+0x134>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <make_pin_output+0x134>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <make_pin_output+0x134>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	e00c      	b.n	8001670 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <make_pin_output+0x134>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <make_pin_output+0x134>)
 800165c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <make_pin_output+0x134>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <make_pin_output+0x138>)
 8001698:	4413      	add	r3, r2
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	461a      	mov	r2, r3
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f001 fc41 	bl	8002f2c <HAL_GPIO_Init>

	return true;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3738      	adds	r7, #56	; 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	0010007f 	.word	0x0010007f

080016bc <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <read_dig_input+0x26>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d806      	bhi.n	80016e2 <read_dig_input+0x26>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <read_dig_input+0x26>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d301      	bcc.n	80016e6 <read_dig_input+0x2a>
		return false;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e02d      	b.n	8001742 <read_dig_input+0x86>

	int mask = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	e024      	b.n	800173a <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d014      	beq.n	8001724 <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <read_dig_input+0x90>)
 80016fe:	4413      	add	r3, r2
 8001700:	029b      	lsls	r3, r3, #10
 8001702:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001704:	2201      	movs	r2, #1
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	18d4      	adds	r4, r2, r3
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	4619      	mov	r1, r3
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f001 fdb3 	bl	8003284 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	7023      	strb	r3, [r4, #0]
 8001722:	e004      	b.n	800172e <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3301      	adds	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	ddd7      	ble.n	80016f0 <read_dig_input+0x34>
	}

	return true;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	0010007f 	.word	0x0010007f

08001750 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <write_dig_output+0x2e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d80a      	bhi.n	800177e <write_dig_output+0x2e>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <write_dig_output+0x2e>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d203      	bcs.n	800177e <write_dig_output+0x2e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d301      	bcc.n	8001782 <write_dig_output+0x32>
		return false;
 800177e:	2300      	movs	r3, #0
 8001780:	e02a      	b.n	80017d8 <write_dig_output+0x88>

	int mask = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	e021      	b.n	80017d0 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <write_dig_output+0x90>)
 800179a:	4413      	add	r3, r2
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 80017a0:	2201      	movs	r2, #1
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	401a      	ands	r2, r3
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80017b8:	7c7a      	ldrb	r2, [r7, #17]
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	4619      	mov	r1, r3
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f001 fd78 	bl	80032b4 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	ddda      	ble.n	800178c <write_dig_output+0x3c>
	}

	return true;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0010007f 	.word	0x0010007f

080017e4 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d901      	bls.n	80017f8 <analog_read+0x14>
		return false;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e008      	b.n	800180a <analog_read+0x26>

	config_ADC(addr3);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff f9b7 	bl	8000b6c <config_ADC>
	*value = read_ADC();
 80017fe:	f7ff f9d3 	bl	8000ba8 <read_ADC>
 8001802:	4602      	mov	r2, r0
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	601a      	str	r2, [r3, #0]

	return true;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <MX_GPIO_Init+0xbc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_GPIO_Init+0xbc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_GPIO_Init+0xbc>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_GPIO_Init+0xbc>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2101      	movs	r1, #1
 80018a6:	480b      	ldr	r0, [pc, #44]	; (80018d4 <MX_GPIO_Init+0xc0>)
 80018a8:	f001 fd04 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ac:	2301      	movs	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_GPIO_Init+0xc0>)
 80018c4:	f001 fb32 	bl	8002f2c <HAL_GPIO_Init>

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020400 	.word	0x40020400

080018d8 <is_GPIO_pin_free>:

/* USER CODE BEGIN 2 */

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	//	ADC3

	if(port_addr == 1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x600F)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	f246 030f 	movw	r3, #24591	; 0x600f
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <is_GPIO_pin_free+0x20>
			return false;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e028      	b.n	800194a <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d106      	bne.n	800190c <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <is_GPIO_pin_free+0x34>
			return false;
 8001908:	2300      	movs	r3, #0
 800190a:	e01e      	b.n	800194a <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d106      	bne.n	8001920 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <is_GPIO_pin_free+0x48>
			return false;
 800191c:	2300      	movs	r3, #0
 800191e:	e014      	b.n	800194a <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d106      	bne.n	8001934 <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <is_GPIO_pin_free+0x5c>
			return false;
 8001930:	2300      	movs	r3, #0
 8001932:	e00a      	b.n	800194a <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d106      	bne.n	8001948 <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <is_GPIO_pin_free+0x70>
			return false;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <is_GPIO_pin_free+0x72>

	return true;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <blink_LED>:

void blink_LED()
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800195c:	2101      	movs	r1, #1
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <blink_LED+0x20>)
 8001960:	f001 fcc1 	bl	80032e6 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001964:	20c8      	movs	r0, #200	; 0xc8
 8001966:	f000 fc33 	bl	80021d0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800196a:	2101      	movs	r1, #1
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <blink_LED+0x20>)
 800196e:	f001 fcba 	bl	80032e6 <HAL_GPIO_TogglePin>
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020400 	.word	0x40020400

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0c2      	sub	sp, #264	; 0x108
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 fbc8 	bl	8002116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f83d 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198a:	f7ff ff43 	bl	8001814 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800198e:	f000 f9e9 	bl	8001d64 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001992:	f7ff f81d 	bl	80009d0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <main+0x78>)
 800199a:	4817      	ldr	r0, [pc, #92]	; (80019f8 <main+0x7c>)
 800199c:	f002 fea2 	bl	80046e4 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <main+0x80>)
 80019a2:	f000 fabf 	bl	8001f24 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 80019a6:	f000 fa8d 	bl	8001ec4 <has_message_from_UART>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0fa      	beq.n	80019a6 <main+0x2a>
	  {
		  blink_LED();
 80019b0:	f7ff ffd2 	bl	8001958 <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fade 	bl	8001f78 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f928 	bl	8000c14 <check_command>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 80019ca:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <main+0x84>)
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	1d3a      	adds	r2, r7, #4
 80019d6:	4610      	mov	r0, r2
 80019d8:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 80019da:	bf00      	nop
 80019dc:	f000 fa7e 	bl	8001edc <is_transmitting_to_UART>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1fa      	bne.n	80019dc <main+0x60>

		  reset_UART();
 80019e6:	f000 fa85 	bl	8001ef4 <reset_UART>
		  send_UART(PROMPT);
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <main+0x80>)
 80019ec:	f000 fa9a 	bl	8001f24 <send_UART>
	  if(has_message_from_UART())
 80019f0:	e7d9      	b.n	80019a6 <main+0x2a>
 80019f2:	bf00      	nop
 80019f4:	20000288 	.word	0x20000288
 80019f8:	20010598 	.word	0x20010598
 80019fc:	0800b240 	.word	0x0800b240
 8001a00:	20000000 	.word	0x20000000

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2234      	movs	r2, #52	; 0x34
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 f974 	bl	8005d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <SystemClock_Config+0xd8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <SystemClock_Config+0xd8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <SystemClock_Config+0xd8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <SystemClock_Config+0xdc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a48:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <SystemClock_Config+0xdc>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <SystemClock_Config+0xdc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a64:	2310      	movs	r3, #16
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a70:	2308      	movs	r3, #8
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a74:	2360      	movs	r3, #96	; 0x60
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fc97 	bl	80033bc <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a94:	f000 f826 	bl	8001ae4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a98:	f001 fc40 	bl	800331c <HAL_PWREx_EnableOverDrive>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001aa2:	f000 f81f 	bl	8001ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 ff28 	bl	8003918 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ace:	f000 f809 	bl	8001ae4 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3750      	adds	r7, #80	; 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	e7fe      	b.n	8001aec <Error_Handler+0x8>
	...

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 fb04 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <ADC_IRQHandler+0x10>)
 8001b92:	f000 fc9b 	bl	80024cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000240 	.word	0x20000240

08001ba0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <USART3_IRQHandler+0x10>)
 8001ba6:	f002 fdeb 	bl	8004780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20010598 	.word	0x20010598

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
	return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bce:	f004 f86d 	bl	8005cac <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf6:	e7fe      	b.n	8001bf6 <_exit+0x12>

08001bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
	}

return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
	}
	return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	605a      	str	r2, [r3, #4]
	return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f003 ffd2 	bl	8005cac <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20080000 	.word	0x20080000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	2000022c 	.word	0x2000022c
 8001d3c:	20010630 	.word	0x20010630

08001d40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_USART3_UART_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_USART3_UART_Init+0x78>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_USART3_UART_Init+0x7c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_USART3_UART_Init+0x80>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <MX_USART3_UART_Init+0x84>)
 8001d82:	220d      	movs	r2, #13
 8001d84:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <MX_USART3_UART_Init+0x8c>)
 8001d8a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001d8e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d92:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001da8:	220c      	movs	r2, #12
 8001daa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <MX_USART3_UART_Init+0x88>)
 8001dc6:	f002 fbd1 	bl	800456c <HAL_UART_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f7ff fe88 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2001038c 	.word	0x2001038c
 8001ddc:	20010590 	.word	0x20010590
 8001de0:	20010388 	.word	0x20010388
 8001de4:	20010594 	.word	0x20010594
 8001de8:	20010390 	.word	0x20010390
 8001dec:	20010598 	.word	0x20010598
 8001df0:	40004800 	.word	0x40004800

08001df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ae      	sub	sp, #184	; 0xb8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2290      	movs	r2, #144	; 0x90
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 ff73 	bl	8005d00 <memset>
  if(uartHandle->Instance==USART3)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_UART_MspInit+0xc4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d144      	bne.n	8001eae <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 ff72 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e3e:	f7ff fe51 	bl	8001ae4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_UART_MspInit+0xc8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <HAL_UART_MspInit+0xcc>)
 8001e9a:	f001 f847 	bl	8002f2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2027      	movs	r0, #39	; 0x27
 8001ea4:	f000 ff79 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ea8:	2027      	movs	r0, #39	; 0x27
 8001eaa:	f000 ff92 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	37b8      	adds	r7, #184	; 0xb8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40004800 	.word	0x40004800
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020c00 	.word	0x40020c00

08001ec4 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	return flagCPP;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <has_message_from_UART+0x14>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	2001038c 	.word	0x2001038c

08001edc <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return flagCPE;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <is_transmitting_to_UART+0x14>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20010590 	.word	0x20010590

08001ef4 <reset_UART>:

void reset_UART()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8001ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efc:	2100      	movs	r1, #0
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <reset_UART+0x24>)
 8001f00:	f003 fefe 	bl	8005d00 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	4904      	ldr	r1, [pc, #16]	; (8001f18 <reset_UART+0x24>)
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <reset_UART+0x28>)
 8001f0a:	f002 fbeb 	bl	80046e4 <HAL_UART_Receive_IT>
	flagCPP = false;
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <reset_UART+0x2c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000288 	.word	0x20000288
 8001f1c:	20010598 	.word	0x20010598
 8001f20:	2001038c 	.word	0x2001038c

08001f24 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8001f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <send_UART+0x44>)
 8001f34:	f004 fddb 	bl	8006aee <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <send_UART+0x44>)
 8001f3a:	f7fe f981 	bl	8000240 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <send_UART+0x44>)
 8001f44:	4413      	add	r3, r2
 8001f46:	4909      	ldr	r1, [pc, #36]	; (8001f6c <send_UART+0x48>)
 8001f48:	461a      	mov	r2, r3
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <send_UART+0x4c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <send_UART+0x44>)
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <send_UART+0x50>)
 8001f5c:	f002 fb54 	bl	8004608 <HAL_UART_Transmit_IT>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20010390 	.word	0x20010390
 8001f6c:	0800b244 	.word	0x0800b244
 8001f70:	20010590 	.word	0x20010590
 8001f74:	20010598 	.word	0x20010598

08001f78 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <read_UART+0x1c>)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f004 fdb1 	bl	8006aee <strncpy>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000288 	.word	0x20000288

08001f98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_UART_RxCpltCallback+0xa8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d146      	bne.n	8002036 <HAL_UART_RxCpltCallback+0x9e>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r') //		CARRIAGE RETURN
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	2b0d      	cmp	r3, #13
 8001fb2:	d106      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_UART_RxCpltCallback+0xa8>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e03a      	b.n	8002038 <HAL_UART_RxCpltCallback+0xa0>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a20      	ldr	r2, [pc, #128]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d10e      	bne.n	8001fec <HAL_UART_RxCpltCallback+0x54>
		{
			if(UART_RX_index == 0)
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x4a>
				UART_RX_index--;
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e004      	b.n	8001fec <HAL_UART_RxCpltCallback+0x54>
			else
				UART_RX_index -= 2;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3b02      	subs	r3, #2
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fea:	6013      	str	r3, [r2, #0]
		}

		if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	2b1b      	cmp	r3, #27
 8001ff6:	d103      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x68>
			UART_RX_index = -1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	601a      	str	r2, [r3, #0]

		if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	2b24      	cmp	r3, #36	; 0x24
 800200a:	d105      	bne.n	8002018 <HAL_UART_RxCpltCallback+0x80>
		{
			UART_RX_index = 0;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8002014:	2224      	movs	r2, #36	; 0x24
 8002016:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_UART_RxCpltCallback+0xac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_UART_RxCpltCallback+0xb0>)
 8002028:	4413      	add	r3, r2
 800202a:	2201      	movs	r2, #1
 800202c:	4619      	mov	r1, r3
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <HAL_UART_RxCpltCallback+0xb4>)
 8002030:	f002 fb58 	bl	80046e4 <HAL_UART_Receive_IT>
 8002034:	e000      	b.n	8002038 <HAL_UART_RxCpltCallback+0xa0>
		return;
 8002036:	bf00      	nop
	}
}
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2001038c 	.word	0x2001038c
 8002044:	20010388 	.word	0x20010388
 8002048:	20000288 	.word	0x20000288
 800204c:	20010598 	.word	0x20010598

08002050 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_UART_TxCpltCallback+0x64>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d122      	bne.n	80020ac <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_UART_TxCpltCallback+0x6c>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	2b0d      	cmp	r3, #13
 8002070:	d10d      	bne.n	800208e <HAL_UART_TxCpltCallback+0x3e>
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_UART_TxCpltCallback+0x6c>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	2b0a      	cmp	r3, #10
 800207e:	d006      	beq.n	800208e <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_UART_TxCpltCallback+0x64>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e00f      	b.n	80020ae <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_UART_TxCpltCallback+0x68>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_UART_TxCpltCallback+0x6c>)
 800209e:	4413      	add	r3, r2
 80020a0:	2201      	movs	r2, #1
 80020a2:	4619      	mov	r1, r3
 80020a4:	4806      	ldr	r0, [pc, #24]	; (80020c0 <HAL_UART_TxCpltCallback+0x70>)
 80020a6:	f002 faaf 	bl	8004608 <HAL_UART_Transmit_IT>
 80020aa:	e000      	b.n	80020ae <HAL_UART_TxCpltCallback+0x5e>
		return;
 80020ac:	bf00      	nop
}
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20010590 	.word	0x20010590
 80020b8:	20010594 	.word	0x20010594
 80020bc:	20010390 	.word	0x20010390
 80020c0:	20010598 	.word	0x20010598

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ee:	f7ff fe27 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f003 fde1 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7ff fc41 	bl	800197c <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002108:	0800b744 	.word	0x0800b744
  ldr r2, =_sbss
 800210c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002110:	20010630 	.word	0x20010630

08002114 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <CAN1_RX0_IRQHandler>

08002116 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211a:	2003      	movs	r0, #3
 800211c:	f000 fe32 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f805 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002126:	f7ff fce3 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fe4d 	bl	8002dee <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 fe15 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000002c 	.word	0x2000002c
 8002188:	20000034 	.word	0x20000034
 800218c:	20000030 	.word	0x20000030

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000034 	.word	0x20000034
 80021b4:	2001061c 	.word	0x2001061c

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	2001061c 	.word	0x2001061c

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000034 	.word	0x20000034

08002218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e031      	b.n	8002292 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fc1c 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_ADC_Init+0x84>)
 800225c:	4013      	ands	r3, r2
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fbb8 	bl	80029dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
 8002282:	e001      	b.n	8002288 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	ffffeefd 	.word	0xffffeefd

080022a0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Start_IT+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0b5      	b.n	8002426 <HAL_ADC_Start_IT+0x186>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d018      	beq.n	8002302 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80022e0:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_ADC_Start_IT+0x194>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a54      	ldr	r2, [pc, #336]	; (8002438 <HAL_ADC_Start_IT+0x198>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9a      	lsrs	r2, r3, #18
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d17d      	bne.n	800240c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002314:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_ADC_Start_IT+0x19c>)
 8002316:	4013      	ands	r3, r2
 8002318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d106      	bne.n	800235a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f023 0206 	bic.w	r2, r3, #6
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
 8002358:	e002      	b.n	8002360 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002370:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_ADC_Start_IT+0x1a0>)
 800237e:	430b      	orrs	r3, r1
 8002380:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002382:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_ADC_Start_IT+0x1a4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d143      	bne.n	8002424 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e03a      	b.n	8002424 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_ADC_Start_IT+0x1a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10e      	bne.n	80023d6 <HAL_ADC_Start_IT+0x136>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023d4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_ADC_Start_IT+0x1a4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d120      	bne.n	8002424 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_ADC_Start_IT+0x1ac>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d11b      	bne.n	8002424 <HAL_ADC_Start_IT+0x184>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	e00b      	b.n	8002424 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2000002c 	.word	0x2000002c
 8002438:	431bde83 	.word	0x431bde83
 800243c:	fffff8fe 	.word	0xfffff8fe
 8002440:	04000020 	.word	0x04000020
 8002444:	40012300 	.word	0x40012300
 8002448:	40012000 	.word	0x40012000
 800244c:	40012200 	.word	0x40012200

08002450 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Stop_IT+0x16>
 8002462:	2302      	movs	r3, #2
 8002464:	e027      	b.n	80024b6 <HAL_ADC_Stop_IT+0x66>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_ADC_Stop_IT+0x74>)
 8002498:	400b      	ands	r3, r1
 800249a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_ADC_Stop_IT+0x78>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	fbffffdf 	.word	0xfbffffdf
 80024c8:	ffffeefe 	.word	0xffffeefe

080024cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d049      	beq.n	8002596 <HAL_ADC_IRQHandler+0xca>
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d046      	beq.n	8002596 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12b      	bne.n	8002586 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d127      	bne.n	8002586 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0220 	bic.w	r2, r2, #32
 8002560:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fb2c 	bl	8000be4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0212 	mvn.w	r2, #18
 8002594:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d057      	beq.n	800265c <HAL_ADC_IRQHandler+0x190>
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d054      	beq.n	800265c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12b      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d124      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11d      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d119      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002626:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fabf 	bl	8002bd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f06f 020c 	mvn.w	r2, #12
 800265a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d017      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x1d6>
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10d      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f837 	bl	8002706 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0201 	mvn.w	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x218>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f043 0202 	orr.w	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0220 	mvn.w	r2, #32
 80026d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f820 	bl	800271a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f06f 0220 	mvn.w	r2, #32
 80026e2:	601a      	str	r2, [r3, #0]
  }
}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e136      	b.n	80029ba <HAL_ADC_ConfigChannel+0x28a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d93a      	bls.n	80027d2 <HAL_ADC_ConfigChannel+0xa2>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002764:	d035      	beq.n	80027d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	3b1e      	subs	r3, #30
 800277c:	2207      	movs	r2, #7
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a8d      	ldr	r2, [pc, #564]	; (80029c8 <HAL_ADC_ConfigChannel+0x298>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	061a      	lsls	r2, r3, #24
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027aa:	e035      	b.n	8002818 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4403      	add	r3, r0
 80027c4:	3b1e      	subs	r3, #30
 80027c6:	409a      	lsls	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d0:	e022      	b.n	8002818 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	2207      	movs	r2, #7
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	400a      	ands	r2, r1
 80027f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6919      	ldr	r1, [r3, #16]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	4603      	mov	r3, r0
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4403      	add	r3, r0
 800280e:	409a      	lsls	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d824      	bhi.n	800286a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b05      	subs	r3, #5
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b05      	subs	r3, #5
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
 8002868:	e04c      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d824      	bhi.n	80028bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b23      	subs	r3, #35	; 0x23
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	400a      	ands	r2, r1
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b23      	subs	r3, #35	; 0x23
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ba:	e023      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b41      	subs	r3, #65	; 0x41
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b41      	subs	r3, #65	; 0x41
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_ADC_ConfigChannel+0x29c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1f4>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002916:	d105      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800291e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002922:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_ADC_ConfigChannel+0x29c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10f      	bne.n	800294e <HAL_ADC_ConfigChannel+0x21e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b12      	cmp	r3, #18
 8002934:	d10b      	bne.n	800294e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800293c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002940:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_ADC_ConfigChannel+0x29c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d12b      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x280>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_ADC_ConfigChannel+0x298>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <HAL_ADC_ConfigChannel+0x23a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b11      	cmp	r3, #17
 8002968:	d122      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002970:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002974:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800297c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002980:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_ADC_ConfigChannel+0x298>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9a      	lsrs	r2, r3, #18
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029a2:	e002      	b.n	80029aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f9      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	10000012 	.word	0x10000012
 80029cc:	40012000 	.word	0x40012000
 80029d0:	40012300 	.word	0x40012300
 80029d4:	2000002c 	.word	0x2000002c
 80029d8:	431bde83 	.word	0x431bde83

080029dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029e4:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <ADC_Init+0x1ec>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a77      	ldr	r2, [pc, #476]	; (8002bc8 <ADC_Init+0x1ec>)
 80029ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029f0:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <ADC_Init+0x1ec>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4973      	ldr	r1, [pc, #460]	; (8002bc8 <ADC_Init+0x1ec>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <ADC_Init+0x1f0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e00f      	b.n	8002ad6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0202 	bic.w	r2, r2, #2
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	035a      	lsls	r2, r3, #13
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	051a      	lsls	r2, r3, #20
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	025a      	lsls	r2, r3, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	0f000001 	.word	0x0f000001

08002bd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <__NVIC_SetPriorityGrouping+0x40>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <__NVIC_SetPriorityGrouping+0x40>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	60d3      	str	r3, [r2, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	05fa0000 	.word	0x05fa0000

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff3e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff8e 	bl	8002cd8 <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff31 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff f9d0 	bl	80021b8 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e052      	b.n	8002ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0216 	bic.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_DMA_Abort+0x62>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0208 	bic.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e013      	b.n	8002eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff f995 	bl	80021b8 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d90c      	bls.n	8002eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e015      	b.n	8002ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e4      	bne.n	8002e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e00c      	b.n	8002f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e175      	b.n	8003238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8164 	bne.w	8003232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x56>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80be 	beq.w	8003232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ce:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_GPIO_Init+0x328>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d037      	beq.n	800316a <HAL_GPIO_Init+0x23e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_GPIO_Init+0x330>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_GPIO_Init+0x23a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x236>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_GPIO_Init+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x232>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_GPIO_Init+0x33c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x22e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x340>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x22a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x344>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x34c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x350>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x21a>
 8003142:	2309      	movs	r3, #9
 8003144:	e012      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003146:	230a      	movs	r3, #10
 8003148:	e010      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314a:	2308      	movs	r3, #8
 800314c:	e00e      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314e:	2307      	movs	r3, #7
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003152:	2306      	movs	r3, #6
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x240>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <HAL_GPIO_Init+0x328>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_GPIO_Init+0x354>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x354>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f ae86 	bls.w	8002f4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40022000 	.word	0x40022000
 800327c:	40022400 	.word	0x40022400
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43d9      	mvns	r1, r3
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	400b      	ands	r3, r1
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800334a:	f7fe ff35 	bl	80021b8 <HAL_GetTick>
 800334e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003350:	e009      	b.n	8003366 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003352:	f7fe ff31 	bl	80021b8 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003360:	d901      	bls.n	8003366 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e022      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d1ee      	bne.n	8003352 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003380:	f7fe ff1a 	bl	80021b8 <HAL_GetTick>
 8003384:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003386:	e009      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003388:	f7fe ff16 	bl	80021b8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003396:	d901      	bls.n	800339c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e007      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a8:	d1ee      	bne.n	8003388 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e29b      	b.n	800390a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e0:	4b96      	ldr	r3, [pc, #600]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d00c      	beq.n	8003406 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ec:	4b93      	ldr	r3, [pc, #588]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d112      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033f8:	4b90      	ldr	r3, [pc, #576]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003404:	d10b      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	4b8d      	ldr	r3, [pc, #564]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06c      	beq.n	80034ec <HAL_RCC_OscConfig+0x130>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d168      	bne.n	80034ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e275      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x7a>
 8003428:	4b84      	ldr	r3, [pc, #528]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e02e      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x9c>
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b7c      	ldr	r3, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7b      	ldr	r2, [pc, #492]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0xc0>
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a75      	ldr	r2, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a72      	ldr	r2, [pc, #456]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6e      	ldr	r2, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6b      	ldr	r2, [pc, #428]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fe8c 	bl	80021b8 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fe88 	bl	80021b8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e229      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fe78 	bl	80021b8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe fe74 	bl	80021b8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e215      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x110>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d069      	beq.n	80035ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b4d      	ldr	r3, [pc, #308]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x190>
 8003512:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x17a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1e9      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	493d      	ldr	r1, [pc, #244]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e040      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fe2a 	bl	80021b8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fe26 	bl	80021b8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1c7      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
 800359a:	e018      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fe06 	bl	80021b8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe fe02 	bl	80021b8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1a3      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d038      	beq.n	800364c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fe fde3 	bl	80021b8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f6:	f7fe fddf 	bl	80021b8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e180      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x23a>
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe fdc9 	bl	80021b8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362a:	f7fe fdc5 	bl	80021b8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d903      	bls.n	8003640 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e166      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
 800363c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b92      	ldr	r3, [pc, #584]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a4 	beq.w	80037a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4b8c      	ldr	r3, [pc, #560]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a88      	ldr	r2, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003682:	4b83      	ldr	r3, [pc, #524]	; (8003890 <HAL_RCC_OscConfig+0x4d4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800368e:	4b80      	ldr	r3, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x4d4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7f      	ldr	r2, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x4d4>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fd8d 	bl	80021b8 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe fd89 	bl	80021b8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	; 0x64
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e12a      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x4d4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x31a>
 80036c8:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	e02d      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x33c>
 80036de:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a6a      	ldr	r2, [pc, #424]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a67      	ldr	r2, [pc, #412]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	e01c      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	d10c      	bne.n	800371a <HAL_RCC_OscConfig+0x35e>
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a61      	ldr	r2, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003706:	f043 0304 	orr.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a5e      	ldr	r2, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a5b      	ldr	r2, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d015      	beq.n	8003766 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fd3d 	bl	80021b8 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fd39 	bl	80021b8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0d8      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ee      	beq.n	8003742 <HAL_RCC_OscConfig+0x386>
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe fd27 	bl	80021b8 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe fd23 	bl	80021b8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0c2      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ee      	bne.n	800376e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80ae 	beq.w	8003908 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ac:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d06d      	beq.n	8003894 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d14b      	bne.n	8003858 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fcf4 	bl	80021b8 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fcf0 	bl	80021b8 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e091      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	019b      	lsls	r3, r3, #6
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	071b      	lsls	r3, r3, #28
 800381e:	491b      	ldr	r1, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fcc2 	bl	80021b8 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fcbe 	bl	80021b8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e05f      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x47c>
 8003856:	e057      	b.n	8003908 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fca8 	bl	80021b8 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe fca4 	bl	80021b8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e045      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x4b0>
 800388a:	e03d      	b.n	8003908 <HAL_RCC_OscConfig+0x54c>
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003894:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <HAL_RCC_OscConfig+0x558>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d030      	beq.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d129      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d122      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d119      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	3b01      	subs	r3, #1
 80038de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10f      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0d0      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d910      	bls.n	8003960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 020f 	bic.w	r2, r3, #15
 8003946:	4965      	ldr	r1, [pc, #404]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800399a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d040      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e073      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06b      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fbd4 	bl	80021b8 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fe fbd0 	bl	80021b8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e053      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d210      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 020f 	bic.w	r2, r3, #15
 8003a52:	4922      	ldr	r1, [pc, #136]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1d4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fb30 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800b254 	.word	0x0800b254
 8003ae8:	2000002c 	.word	0x2000002c
 8003aec:	20000030 	.word	0x20000030

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b08:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x40>
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f200 80bd 	bhi.w	8003c94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b22:	e0b7      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b61      	ldr	r3, [pc, #388]	; (8003cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b26:	60bb      	str	r3, [r7, #8]
      break;
 8003b28:	e0b7      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b2c:	60bb      	str	r3, [r7, #8]
      break;
 8003b2e:	e0b4      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b30:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04d      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	ea02 0800 	and.w	r8, r2, r0
 8003b5e:	ea03 0901 	and.w	r9, r3, r1
 8003b62:	4640      	mov	r0, r8
 8003b64:	4649      	mov	r1, r9
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	014b      	lsls	r3, r1, #5
 8003b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b74:	0142      	lsls	r2, r0, #5
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	ebb0 0008 	subs.w	r0, r0, r8
 8003b7e:	eb61 0109 	sbc.w	r1, r1, r9
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	018b      	lsls	r3, r1, #6
 8003b8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b90:	0182      	lsls	r2, r0, #6
 8003b92:	1a12      	subs	r2, r2, r0
 8003b94:	eb63 0301 	sbc.w	r3, r3, r1
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	00d9      	lsls	r1, r3, #3
 8003ba2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ba6:	00d0      	lsls	r0, r2, #3
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	eb12 0208 	adds.w	r2, r2, r8
 8003bb0:	eb43 0309 	adc.w	r3, r3, r9
 8003bb4:	f04f 0000 	mov.w	r0, #0
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	0259      	lsls	r1, r3, #9
 8003bbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bc2:	0250      	lsls	r0, r2, #9
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	f7fc fd48 	bl	8000668 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e04a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	ea02 0400 	and.w	r4, r2, r0
 8003bfa:	ea03 0501 	and.w	r5, r3, r1
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	014b      	lsls	r3, r1, #5
 8003c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c10:	0142      	lsls	r2, r0, #5
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	1b00      	subs	r0, r0, r4
 8003c18:	eb61 0105 	sbc.w	r1, r1, r5
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	018b      	lsls	r3, r1, #6
 8003c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c2a:	0182      	lsls	r2, r0, #6
 8003c2c:	1a12      	subs	r2, r2, r0
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	00d9      	lsls	r1, r3, #3
 8003c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c40:	00d0      	lsls	r0, r2, #3
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	1912      	adds	r2, r2, r4
 8003c48:	eb45 0303 	adc.w	r3, r5, r3
 8003c4c:	f04f 0000 	mov.w	r0, #0
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	0299      	lsls	r1, r3, #10
 8003c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c5a:	0290      	lsls	r0, r2, #10
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f7fc fcfc 	bl	8000668 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	60bb      	str	r3, [r7, #8]
      break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c96:	60bb      	str	r3, [r7, #8]
      break;
 8003c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	007a1200 	.word	0x007a1200

08003cb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	2000002c 	.word	0x2000002c

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	0800b264 	.word	0x0800b264

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf8:	f7ff ffdc 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0b5b      	lsrs	r3, r3, #13
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	0800b264 	.word	0x0800b264

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d012      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d44:	4b69      	ldr	r3, [pc, #420]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a68      	ldr	r2, [pc, #416]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	4964      	ldr	r1, [pc, #400]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d017      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d76:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	4959      	ldr	r1, [pc, #356]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003db2:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	494a      	ldr	r1, [pc, #296]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 808b 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4a39      	ldr	r2, [pc, #228]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0c:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fe f9c8 	bl	80021b8 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fe f9c4 	bl	80021b8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e38f      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e4a:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d035      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d02e      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d114      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f98c 	bl	80021b8 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fe f988 	bl	80021b8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e351      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ee      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed2:	d111      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	4901      	ldr	r1, [pc, #4]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	0ffffcff 	.word	0x0ffffcff
 8003ef8:	4bb3      	ldr	r3, [pc, #716]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4ab2      	ldr	r2, [pc, #712]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f02:	6093      	str	r3, [r2, #8]
 8003f04:	4bb0      	ldr	r3, [pc, #704]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	49ad      	ldr	r1, [pc, #692]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f22:	4ba9      	ldr	r3, [pc, #676]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	4aa7      	ldr	r2, [pc, #668]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f32:	4ba5      	ldr	r3, [pc, #660]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	49a2      	ldr	r1, [pc, #648]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f50:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	499a      	ldr	r1, [pc, #616]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f72:	4b95      	ldr	r3, [pc, #596]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f80:	4991      	ldr	r1, [pc, #580]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f94:	4b8c      	ldr	r3, [pc, #560]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa2:	4989      	ldr	r1, [pc, #548]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb6:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4980      	ldr	r1, [pc, #512]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd8:	4b7b      	ldr	r3, [pc, #492]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4978      	ldr	r1, [pc, #480]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ffa:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f023 020c 	bic.w	r2, r3, #12
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	496f      	ldr	r1, [pc, #444]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800401c:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	4967      	ldr	r1, [pc, #412]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800403e:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	495e      	ldr	r1, [pc, #376]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	4956      	ldr	r1, [pc, #344]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004082:	4b51      	ldr	r3, [pc, #324]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	494d      	ldr	r1, [pc, #308]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040a4:	4b48      	ldr	r3, [pc, #288]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4945      	ldr	r1, [pc, #276]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040c6:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	493c      	ldr	r1, [pc, #240]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040e8:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f6:	4934      	ldr	r1, [pc, #208]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d011      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800410a:	4b2f      	ldr	r3, [pc, #188]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004118:	492b      	ldr	r1, [pc, #172]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	491b      	ldr	r1, [pc, #108]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	4912      	ldr	r1, [pc, #72]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	4909      	ldr	r1, [pc, #36]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	4986      	ldr	r1, [pc, #536]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041e0:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f0:	497d      	ldr	r1, [pc, #500]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d006      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80d6 	beq.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800420c:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fd ffce 	bl	80021b8 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004220:	f7fd ffca 	bl	80021b8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e195      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004232:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d021      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11d      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004252:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004260:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	0e1b      	lsrs	r3, r3, #24
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	4958      	ldr	r1, [pc, #352]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02e      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b8:	d129      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042ba:	4b4b      	ldr	r3, [pc, #300]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c8:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	0f1b      	lsrs	r3, r3, #28
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	019a      	lsls	r2, r3, #6
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	493e      	ldr	r1, [pc, #248]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042f6:	4b3c      	ldr	r3, [pc, #240]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f023 021f 	bic.w	r2, r3, #31
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	3b01      	subs	r3, #1
 8004306:	4938      	ldr	r1, [pc, #224]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004328:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4926      	ldr	r1, [pc, #152]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d011      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	019a      	lsls	r2, r3, #6
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	071b      	lsls	r3, r3, #28
 800437e:	491a      	ldr	r1, [pc, #104]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fd ff11 	bl	80021b8 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800439a:	f7fd ff0d 	bl	80021b8 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	; 0x64
 80043a6:	d901      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0d8      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f040 80ce 	bne.w	800455c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fd fef4 	bl	80021b8 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d2:	e00b      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d4:	f7fd fef0 	bl	80021b8 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d904      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0bb      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ec:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d0ec      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02e      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004430:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	0f1b      	lsrs	r3, r3, #28
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	4944      	ldr	r1, [pc, #272]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800445e:	4b42      	ldr	r3, [pc, #264]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	493d      	ldr	r1, [pc, #244]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d022      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448c:	d11d      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800449c:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	431a      	orrs	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	4929      	ldr	r1, [pc, #164]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d028      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	019a      	lsls	r2, r3, #6
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	431a      	orrs	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	071b      	lsls	r3, r3, #28
 800450a:	4917      	ldr	r1, [pc, #92]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4911      	ldr	r1, [pc, #68]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fe40 	bl	80021b8 <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800453c:	f7fd fe3c 	bl	80021b8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e007      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455a:	d1ef      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e040      	b.n	8004600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fc30 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fbe8 	bl	8004d80 <UART_SetConfig>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e022      	b.n	8004600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fe3e 	bl	8005244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fec5 	bl	8005388 <UART_CheckIdleState>
 80045fe:	4603      	mov	r3, r0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004608:	b480      	push	{r7}
 800460a:	b08b      	sub	sp, #44	; 0x2c
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461a:	2b20      	cmp	r3, #32
 800461c:	d156      	bne.n	80046cc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_UART_Transmit_IT+0x22>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e04f      	b.n	80046ce <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_UART_Transmit_IT+0x34>
 8004638:	2302      	movs	r3, #2
 800463a:	e048      	b.n	80046ce <HAL_UART_Transmit_IT+0xc6>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d107      	bne.n	8004688 <HAL_UART_Transmit_IT+0x80>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_UART_Transmit_IT+0xd4>)
 8004684:	669a      	str	r2, [r3, #104]	; 0x68
 8004686:	e002      	b.n	800468e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_UART_Transmit_IT+0xd8>)
 800468c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	613b      	str	r3, [r7, #16]
   return(result);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	372c      	adds	r7, #44	; 0x2c
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	080058e1 	.word	0x080058e1
 80046e0:	0800582b 	.word	0x0800582b

080046e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d13d      	bne.n	8004776 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_UART_Receive_IT+0x22>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e036      	b.n	8004778 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_UART_Receive_IT+0x34>
 8004714:	2302      	movs	r3, #2
 8004716:	e02f      	b.n	8004778 <HAL_UART_Receive_IT+0x94>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	613b      	str	r3, [r7, #16]
   return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	461a      	mov	r2, r3
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 ff19 	bl	80055a4 <UART_Start_Receive_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	e000      	b.n	8004778 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b0ba      	sub	sp, #232	; 0xe8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ae:	4013      	ands	r3, r2
 80047b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 82a4 	beq.w	8004d26 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
      }
      return;
 80047e6:	e29e      	b.n	8004d26 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8117 	beq.w	8004a20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_UART_IRQHandler+0x298>)
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 810a 	beq.w	8004a20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_UART_IRQHandler+0xbc>
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <HAL_UART_IRQHandler+0xec>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2202      	movs	r2, #2
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_UART_IRQHandler+0x11c>
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2204      	movs	r2, #4
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d017      	beq.n	80048d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ce:	f043 0208 	orr.w	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d012      	beq.n	800490a <HAL_UART_IRQHandler+0x18a>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00c      	beq.n	800490a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 820a 	beq.w	8004d2a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d005      	beq.n	8004962 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04f      	beq.n	8004a02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fee8 	bl	8005738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d141      	bne.n	80049fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800498c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1d9      	bne.n	8004976 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <HAL_UART_IRQHandler+0x29c>)
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fa85 	bl	8002ee6 <HAL_DMA_Abort_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d017      	beq.n	8004a12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00f      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9a4 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e00b      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9a0 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e007      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f99c 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a10:	e18b      	b.n	8004d2a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	bf00      	nop
    return;
 8004a14:	e189      	b.n	8004d2a <HAL_UART_IRQHandler+0x5aa>
 8004a16:	bf00      	nop
 8004a18:	04000120 	.word	0x04000120
 8004a1c:	080057ff 	.word	0x080057ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 8144 	bne.w	8004cb2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 813d 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8136 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	f040 80b2 	bne.w	8004bc2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 815d 	beq.w	8004d2e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f080 8155 	bcs.w	8004d2e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	f000 8085 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1da      	bne.n	8004a9c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3308      	adds	r3, #8
 8004aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e1      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e3      	bne.n	8004b22 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b76:	f023 0310 	bic.w	r3, r3, #16
 8004b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e4      	bne.n	8004b66 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe f930 	bl	8002e06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8ca 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc0:	e0b5      	b.n	8004d2e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80a7 	beq.w	8004d32 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a2 	beq.w	8004d32 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
 8004c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e4      	bne.n	8004bee <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	623b      	str	r3, [r7, #32]
   return(result);
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c48:	633a      	str	r2, [r7, #48]	; 0x30
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e3      	bne.n	8004c24 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e4      	bne.n	8004c6e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f852 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb0:	e03f      	b.n	8004d32 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <HAL_UART_IRQHandler+0x55c>
 8004cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f849 	bl	8004d6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cda:	e02d      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01c      	beq.n	8004d36 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
    }
    return;
 8004d04:	e017      	b.n	8004d36 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fe3e 	bl	80059a0 <UART_EndTransmit_IT>
    return;
 8004d24:	e008      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d26:	bf00      	nop
 8004d28:	e006      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d36:	bf00      	nop
  }

}
 8004d38:	37e8      	adds	r7, #232	; 0xe8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4ba7      	ldr	r3, [pc, #668]	; (8005048 <UART_SetConfig+0x2c8>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a95      	ldr	r2, [pc, #596]	; (800504c <UART_SetConfig+0x2cc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d120      	bne.n	8004e3e <UART_SetConfig+0xbe>
 8004dfc:	4b94      	ldr	r3, [pc, #592]	; (8005050 <UART_SetConfig+0x2d0>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d816      	bhi.n	8004e38 <UART_SetConfig+0xb8>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x90>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e27 	.word	0x08004e27
 8004e1c:	08004e33 	.word	0x08004e33
 8004e20:	2301      	movs	r3, #1
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e14f      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e26:	2302      	movs	r3, #2
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e14c      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e149      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e32:	2308      	movs	r3, #8
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e146      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e143      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a84      	ldr	r2, [pc, #528]	; (8005054 <UART_SetConfig+0x2d4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d132      	bne.n	8004eae <UART_SetConfig+0x12e>
 8004e48:	4b81      	ldr	r3, [pc, #516]	; (8005050 <UART_SetConfig+0x2d0>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d828      	bhi.n	8004ea8 <UART_SetConfig+0x128>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0xdc>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004ea9 	.word	0x08004ea9
 8004e64:	08004ea9 	.word	0x08004ea9
 8004e68:	08004ea9 	.word	0x08004ea9
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004ea9 	.word	0x08004ea9
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08004ea9 	.word	0x08004ea9
 8004e7c:	08004e97 	.word	0x08004e97
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004ea3 	.word	0x08004ea3
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e117      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e114      	b.n	80050c6 <UART_SetConfig+0x346>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e111      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e10e      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e10b      	b.n	80050c6 <UART_SetConfig+0x346>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a69      	ldr	r2, [pc, #420]	; (8005058 <UART_SetConfig+0x2d8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d120      	bne.n	8004efa <UART_SetConfig+0x17a>
 8004eb8:	4b65      	ldr	r3, [pc, #404]	; (8005050 <UART_SetConfig+0x2d0>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d013      	beq.n	8004eee <UART_SetConfig+0x16e>
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d814      	bhi.n	8004ef4 <UART_SetConfig+0x174>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d009      	beq.n	8004ee2 <UART_SetConfig+0x162>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d810      	bhi.n	8004ef4 <UART_SetConfig+0x174>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <UART_SetConfig+0x15c>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d006      	beq.n	8004ee8 <UART_SetConfig+0x168>
 8004eda:	e00b      	b.n	8004ef4 <UART_SetConfig+0x174>
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e0f1      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e0ee      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e0eb      	b.n	80050c6 <UART_SetConfig+0x346>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e0e8      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e0e5      	b.n	80050c6 <UART_SetConfig+0x346>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a57      	ldr	r2, [pc, #348]	; (800505c <UART_SetConfig+0x2dc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d120      	bne.n	8004f46 <UART_SetConfig+0x1c6>
 8004f04:	4b52      	ldr	r3, [pc, #328]	; (8005050 <UART_SetConfig+0x2d0>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f10:	d013      	beq.n	8004f3a <UART_SetConfig+0x1ba>
 8004f12:	2bc0      	cmp	r3, #192	; 0xc0
 8004f14:	d814      	bhi.n	8004f40 <UART_SetConfig+0x1c0>
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d009      	beq.n	8004f2e <UART_SetConfig+0x1ae>
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d810      	bhi.n	8004f40 <UART_SetConfig+0x1c0>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x1a8>
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d006      	beq.n	8004f34 <UART_SetConfig+0x1b4>
 8004f26:	e00b      	b.n	8004f40 <UART_SetConfig+0x1c0>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e0cb      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e0c8      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f34:	2304      	movs	r3, #4
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e0c5      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e0c2      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f40:	2310      	movs	r3, #16
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e0bf      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a45      	ldr	r2, [pc, #276]	; (8005060 <UART_SetConfig+0x2e0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d125      	bne.n	8004f9c <UART_SetConfig+0x21c>
 8004f50:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <UART_SetConfig+0x2d0>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5e:	d017      	beq.n	8004f90 <UART_SetConfig+0x210>
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f64:	d817      	bhi.n	8004f96 <UART_SetConfig+0x216>
 8004f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6a:	d00b      	beq.n	8004f84 <UART_SetConfig+0x204>
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f70:	d811      	bhi.n	8004f96 <UART_SetConfig+0x216>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <UART_SetConfig+0x1fe>
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d006      	beq.n	8004f8a <UART_SetConfig+0x20a>
 8004f7c:	e00b      	b.n	8004f96 <UART_SetConfig+0x216>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e0a0      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f84:	2302      	movs	r3, #2
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e09d      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e09a      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f90:	2308      	movs	r3, #8
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e097      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f96:	2310      	movs	r3, #16
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e094      	b.n	80050c6 <UART_SetConfig+0x346>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <UART_SetConfig+0x2e4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d125      	bne.n	8004ff2 <UART_SetConfig+0x272>
 8004fa6:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <UART_SetConfig+0x2d0>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb4:	d017      	beq.n	8004fe6 <UART_SetConfig+0x266>
 8004fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0x26c>
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc0:	d00b      	beq.n	8004fda <UART_SetConfig+0x25a>
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc6:	d811      	bhi.n	8004fec <UART_SetConfig+0x26c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x254>
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x260>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x26c>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e075      	b.n	80050c6 <UART_SetConfig+0x346>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e072      	b.n	80050c6 <UART_SetConfig+0x346>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e06f      	b.n	80050c6 <UART_SetConfig+0x346>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e06c      	b.n	80050c6 <UART_SetConfig+0x346>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e069      	b.n	80050c6 <UART_SetConfig+0x346>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <UART_SetConfig+0x2e8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d137      	bne.n	800506c <UART_SetConfig+0x2ec>
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <UART_SetConfig+0x2d0>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800500a:	d017      	beq.n	800503c <UART_SetConfig+0x2bc>
 800500c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005010:	d817      	bhi.n	8005042 <UART_SetConfig+0x2c2>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	d00b      	beq.n	8005030 <UART_SetConfig+0x2b0>
 8005018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501c:	d811      	bhi.n	8005042 <UART_SetConfig+0x2c2>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <UART_SetConfig+0x2aa>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d006      	beq.n	8005036 <UART_SetConfig+0x2b6>
 8005028:	e00b      	b.n	8005042 <UART_SetConfig+0x2c2>
 800502a:	2300      	movs	r3, #0
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e04a      	b.n	80050c6 <UART_SetConfig+0x346>
 8005030:	2302      	movs	r3, #2
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e047      	b.n	80050c6 <UART_SetConfig+0x346>
 8005036:	2304      	movs	r3, #4
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e044      	b.n	80050c6 <UART_SetConfig+0x346>
 800503c:	2308      	movs	r3, #8
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e041      	b.n	80050c6 <UART_SetConfig+0x346>
 8005042:	2310      	movs	r3, #16
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e03e      	b.n	80050c6 <UART_SetConfig+0x346>
 8005048:	efff69f3 	.word	0xefff69f3
 800504c:	40011000 	.word	0x40011000
 8005050:	40023800 	.word	0x40023800
 8005054:	40004400 	.word	0x40004400
 8005058:	40004800 	.word	0x40004800
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40005000 	.word	0x40005000
 8005064:	40011400 	.word	0x40011400
 8005068:	40007800 	.word	0x40007800
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a71      	ldr	r2, [pc, #452]	; (8005238 <UART_SetConfig+0x4b8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d125      	bne.n	80050c2 <UART_SetConfig+0x342>
 8005076:	4b71      	ldr	r3, [pc, #452]	; (800523c <UART_SetConfig+0x4bc>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005080:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005084:	d017      	beq.n	80050b6 <UART_SetConfig+0x336>
 8005086:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800508a:	d817      	bhi.n	80050bc <UART_SetConfig+0x33c>
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005090:	d00b      	beq.n	80050aa <UART_SetConfig+0x32a>
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005096:	d811      	bhi.n	80050bc <UART_SetConfig+0x33c>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <UART_SetConfig+0x324>
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a0:	d006      	beq.n	80050b0 <UART_SetConfig+0x330>
 80050a2:	e00b      	b.n	80050bc <UART_SetConfig+0x33c>
 80050a4:	2300      	movs	r3, #0
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e00d      	b.n	80050c6 <UART_SetConfig+0x346>
 80050aa:	2302      	movs	r3, #2
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e00a      	b.n	80050c6 <UART_SetConfig+0x346>
 80050b0:	2304      	movs	r3, #4
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e007      	b.n	80050c6 <UART_SetConfig+0x346>
 80050b6:	2308      	movs	r3, #8
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e004      	b.n	80050c6 <UART_SetConfig+0x346>
 80050bc:	2310      	movs	r3, #16
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e001      	b.n	80050c6 <UART_SetConfig+0x346>
 80050c2:	2310      	movs	r3, #16
 80050c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ce:	d15a      	bne.n	8005186 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d827      	bhi.n	8005126 <UART_SetConfig+0x3a6>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x35c>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005127 	.word	0x08005127
 80050fc:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fe fde4 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8005104:	61b8      	str	r0, [r7, #24]
        break;
 8005106:	e013      	b.n	8005130 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe fdf4 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e00f      	b.n	8005130 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <UART_SetConfig+0x4c0>)
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e00c      	b.n	8005130 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe fceb 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 800511a:	61b8      	str	r0, [r7, #24]
        break;
 800511c:	e008      	b.n	8005130 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e004      	b.n	8005130 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	77bb      	strb	r3, [r7, #30]
        break;
 800512e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d074      	beq.n	8005220 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	005a      	lsls	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b0f      	cmp	r3, #15
 8005150:	d916      	bls.n	8005180 <UART_SetConfig+0x400>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d212      	bcs.n	8005180 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f023 030f 	bic.w	r3, r3, #15
 8005162:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	b29b      	uxth	r3, r3
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b29a      	uxth	r2, r3
 8005170:	89fb      	ldrh	r3, [r7, #14]
 8005172:	4313      	orrs	r3, r2
 8005174:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	89fa      	ldrh	r2, [r7, #14]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e04f      	b.n	8005220 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	77bb      	strb	r3, [r7, #30]
 8005184:	e04c      	b.n	8005220 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d828      	bhi.n	80051de <UART_SetConfig+0x45e>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x414>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051df 	.word	0x080051df
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fe fd88 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80051bc:	61b8      	str	r0, [r7, #24]
        break;
 80051be:	e013      	b.n	80051e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe fd98 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 80051c4:	61b8      	str	r0, [r7, #24]
        break;
 80051c6:	e00f      	b.n	80051e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <UART_SetConfig+0x4c0>)
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e00c      	b.n	80051e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fe fc8f 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 80051d2:	61b8      	str	r0, [r7, #24]
        break;
 80051d4:	e008      	b.n	80051e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e004      	b.n	80051e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77bb      	strb	r3, [r7, #30]
        break;
 80051e6:	bf00      	nop
    }

    if (pclk != 0U)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085a      	lsrs	r2, r3, #1
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b0f      	cmp	r3, #15
 8005206:	d909      	bls.n	800521c <UART_SetConfig+0x49c>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d205      	bcs.n	800521c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e001      	b.n	8005220 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800522c:	7fbb      	ldrb	r3, [r7, #30]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40007c00 	.word	0x40007c00
 800523c:	40023800 	.word	0x40023800
 8005240:	00f42400 	.word	0x00f42400

08005244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005342:	d10a      	bne.n	800535a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af02      	add	r7, sp, #8
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005398:	f7fc ff0e 	bl	80021b8 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d10e      	bne.n	80053ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f82d 	bl	800541a <UART_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e023      	b.n	8005412 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d10e      	bne.n	80053f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f817 	bl	800541a <UART_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e00d      	b.n	8005412 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b09c      	sub	sp, #112	; 0x70
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542a:	e0a5      	b.n	8005578 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	f000 80a1 	beq.w	8005578 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fc febf 	bl	80021b8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <UART_WaitOnFlagUntilTimeout+0x32>
 8005446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005448:	2b00      	cmp	r3, #0
 800544a:	d13e      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800545a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005460:	667b      	str	r3, [r7, #100]	; 0x64
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e6      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	663b      	str	r3, [r7, #96]	; 0x60
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3308      	adds	r3, #8
 800549c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800549e:	64ba      	str	r2, [r7, #72]	; 0x48
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e067      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d04f      	beq.n	8005578 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e6:	d147      	bne.n	8005578 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
 8005512:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e6      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	613b      	str	r3, [r7, #16]
   return(result);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	66bb      	str	r3, [r7, #104]	; 0x68
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3308      	adds	r3, #8
 8005542:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005544:	623a      	str	r2, [r7, #32]
 8005546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	61bb      	str	r3, [r7, #24]
   return(result);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e010      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4013      	ands	r3, r2
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	429a      	cmp	r2, r3
 8005594:	f43f af4a 	beq.w	800542c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3770      	adds	r7, #112	; 0x70
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b097      	sub	sp, #92	; 0x5c
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d10e      	bne.n	80055f6 <UART_Start_Receive_IT+0x52>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <UART_Start_Receive_IT+0x48>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ea:	e02d      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	22ff      	movs	r2, #255	; 0xff
 80055f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f4:	e028      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10d      	bne.n	800561a <UART_Start_Receive_IT+0x76>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <UART_Start_Receive_IT+0x6c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560e:	e01b      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	227f      	movs	r2, #127	; 0x7f
 8005614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005618:	e016      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005622:	d10d      	bne.n	8005640 <UART_Start_Receive_IT+0x9c>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <UART_Start_Receive_IT+0x92>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	227f      	movs	r2, #127	; 0x7f
 8005630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005634:	e008      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	223f      	movs	r2, #63	; 0x3f
 800563a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563e:	e003      	b.n	8005648 <UART_Start_Receive_IT+0xa4>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2222      	movs	r2, #34	; 0x22
 8005654:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	657b      	str	r3, [r7, #84]	; 0x54
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005676:	64ba      	str	r2, [r7, #72]	; 0x48
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d107      	bne.n	80056a4 <UART_Start_Receive_IT+0x100>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a24      	ldr	r2, [pc, #144]	; (8005730 <UART_Start_Receive_IT+0x18c>)
 80056a0:	665a      	str	r2, [r3, #100]	; 0x64
 80056a2:	e002      	b.n	80056aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a23      	ldr	r2, [pc, #140]	; (8005734 <UART_Start_Receive_IT+0x190>)
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_Start_Receive_IT+0x116>
 80056ec:	e018      	b.n	8005720 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	613b      	str	r3, [r7, #16]
   return(result);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	653b      	str	r3, [r7, #80]	; 0x50
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	61bb      	str	r3, [r7, #24]
   return(result);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	375c      	adds	r7, #92	; 0x5c
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	08005b51 	.word	0x08005b51
 8005734:	080059f5 	.word	0x080059f5

08005738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b095      	sub	sp, #84	; 0x54
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	643b      	str	r3, [r7, #64]	; 0x40
 8005760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	61fb      	str	r3, [r7, #28]
   return(result);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	64bb      	str	r3, [r7, #72]	; 0x48
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d118      	bne.n	80057e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	613b      	str	r3, [r7, #16]
   return(result);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80057f2:	bf00      	nop
 80057f4:	3754      	adds	r7, #84	; 0x54
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff fa8f 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800582a:	b480      	push	{r7}
 800582c:	b08f      	sub	sp, #60	; 0x3c
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005836:	2b21      	cmp	r3, #33	; 0x21
 8005838:	d14c      	bne.n	80058d4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d132      	bne.n	80058ac <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	61fb      	str	r3, [r7, #28]
   return(result);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005866:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e6      	bne.n	8005846 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60bb      	str	r3, [r7, #8]
   return(result);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6979      	ldr	r1, [r7, #20]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80058aa:	e013      	b.n	80058d4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058d4:	bf00      	nop
 80058d6:	373c      	adds	r7, #60	; 0x3c
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b091      	sub	sp, #68	; 0x44
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ec:	2b21      	cmp	r3, #33	; 0x21
 80058ee:	d151      	bne.n	8005994 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d132      	bne.n	8005962 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	623b      	str	r3, [r7, #32]
   return(result);
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
 800591c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60fb      	str	r3, [r7, #12]
   return(result);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	617b      	str	r3, [r7, #20]
   return(result);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005960:	e018      	b.n	8005994 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005994:	bf00      	nop
 8005996:	3744      	adds	r7, #68	; 0x44
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6979      	ldr	r1, [r7, #20]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	613b      	str	r3, [r7, #16]
   return(result);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e6      	bne.n	80059a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fb32 	bl	8002050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ec:	bf00      	nop
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b096      	sub	sp, #88	; 0x58
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	2b22      	cmp	r3, #34	; 0x22
 8005a0c:	f040 8094 	bne.w	8005b38 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a1e:	b2d9      	uxtb	r1, r3
 8005a20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d177      	bne.n	8005b48 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44
 8005a78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e6      	bne.n	8005a58 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d12e      	bne.n	8005b30 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
 8005aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	617b      	str	r3, [r7, #20]
   return(result);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e6      	bne.n	8005ad8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d103      	bne.n	8005b20 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2210      	movs	r2, #16
 8005b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff f913 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b2e:	e00b      	b.n	8005b48 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fc fa31 	bl	8001f98 <HAL_UART_RxCpltCallback>
}
 8005b36:	e007      	b.n	8005b48 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	619a      	str	r2, [r3, #24]
}
 8005b48:	bf00      	nop
 8005b4a:	3758      	adds	r7, #88	; 0x58
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b096      	sub	sp, #88	; 0x58
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b66:	2b22      	cmp	r3, #34	; 0x22
 8005b68:	f040 8094 	bne.w	8005c94 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b7c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b84:	4013      	ands	r3, r2
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d177      	bne.n	8005ca4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e6      	bne.n	8005bb4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12e      	bne.n	8005c8c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d103      	bne.n	8005c7c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff f865 	bl	8004d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c8a:	e00b      	b.n	8005ca4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fc f983 	bl	8001f98 <HAL_UART_RxCpltCallback>
}
 8005c92:	e007      	b.n	8005ca4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	619a      	str	r2, [r3, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	3758      	adds	r7, #88	; 0x58
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000038 	.word	0x20000038

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f004 ffc2 	bl	800ac54 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	0800b73c 	.word	0x0800b73c
 8005cf4:	0800b73c 	.word	0x0800b73c
 8005cf8:	0800b73c 	.word	0x0800b73c
 8005cfc:	0800b740 	.word	0x0800b740

08005d00 <memset>:
 8005d00:	4402      	add	r2, r0
 8005d02:	4603      	mov	r3, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <memset+0xa>
 8005d08:	4770      	bx	lr
 8005d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0e:	e7f9      	b.n	8005d04 <memset+0x4>

08005d10 <__cvt>:
 8005d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d12:	ed2d 8b02 	vpush	{d8}
 8005d16:	eeb0 8b40 	vmov.f64	d8, d0
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	4617      	mov	r7, r2
 8005d1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005d20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d22:	ee18 2a90 	vmov	r2, s17
 8005d26:	f025 0520 	bic.w	r5, r5, #32
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	bfb6      	itet	lt
 8005d2e:	222d      	movlt	r2, #45	; 0x2d
 8005d30:	2200      	movge	r2, #0
 8005d32:	eeb1 8b40 	vneglt.f64	d8, d0
 8005d36:	2d46      	cmp	r5, #70	; 0x46
 8005d38:	460c      	mov	r4, r1
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	d004      	beq.n	8005d48 <__cvt+0x38>
 8005d3e:	2d45      	cmp	r5, #69	; 0x45
 8005d40:	d100      	bne.n	8005d44 <__cvt+0x34>
 8005d42:	3401      	adds	r4, #1
 8005d44:	2102      	movs	r1, #2
 8005d46:	e000      	b.n	8005d4a <__cvt+0x3a>
 8005d48:	2103      	movs	r1, #3
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	ab02      	add	r3, sp, #8
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4622      	mov	r2, r4
 8005d54:	4633      	mov	r3, r6
 8005d56:	eeb0 0b48 	vmov.f64	d0, d8
 8005d5a:	f001 fe05 	bl	8007968 <_dtoa_r>
 8005d5e:	2d47      	cmp	r5, #71	; 0x47
 8005d60:	d109      	bne.n	8005d76 <__cvt+0x66>
 8005d62:	07fb      	lsls	r3, r7, #31
 8005d64:	d407      	bmi.n	8005d76 <__cvt+0x66>
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d6a:	1a1b      	subs	r3, r3, r0
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	b005      	add	sp, #20
 8005d70:	ecbd 8b02 	vpop	{d8}
 8005d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d76:	2d46      	cmp	r5, #70	; 0x46
 8005d78:	eb00 0204 	add.w	r2, r0, r4
 8005d7c:	d10c      	bne.n	8005d98 <__cvt+0x88>
 8005d7e:	7803      	ldrb	r3, [r0, #0]
 8005d80:	2b30      	cmp	r3, #48	; 0x30
 8005d82:	d107      	bne.n	8005d94 <__cvt+0x84>
 8005d84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	bf1c      	itt	ne
 8005d8e:	f1c4 0401 	rsbne	r4, r4, #1
 8005d92:	6034      	strne	r4, [r6, #0]
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	441a      	add	r2, r3
 8005d98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da0:	bf08      	it	eq
 8005da2:	9203      	streq	r2, [sp, #12]
 8005da4:	2130      	movs	r1, #48	; 0x30
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d2dc      	bcs.n	8005d66 <__cvt+0x56>
 8005dac:	1c5c      	adds	r4, r3, #1
 8005dae:	9403      	str	r4, [sp, #12]
 8005db0:	7019      	strb	r1, [r3, #0]
 8005db2:	e7f8      	b.n	8005da6 <__cvt+0x96>

08005db4 <__exponent>:
 8005db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db6:	4603      	mov	r3, r0
 8005db8:	2900      	cmp	r1, #0
 8005dba:	bfb8      	it	lt
 8005dbc:	4249      	neglt	r1, r1
 8005dbe:	f803 2b02 	strb.w	r2, [r3], #2
 8005dc2:	bfb4      	ite	lt
 8005dc4:	222d      	movlt	r2, #45	; 0x2d
 8005dc6:	222b      	movge	r2, #43	; 0x2b
 8005dc8:	2909      	cmp	r1, #9
 8005dca:	7042      	strb	r2, [r0, #1]
 8005dcc:	dd2a      	ble.n	8005e24 <__exponent+0x70>
 8005dce:	f10d 0407 	add.w	r4, sp, #7
 8005dd2:	46a4      	mov	ip, r4
 8005dd4:	270a      	movs	r7, #10
 8005dd6:	46a6      	mov	lr, r4
 8005dd8:	460a      	mov	r2, r1
 8005dda:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dde:	fb07 1516 	mls	r5, r7, r6, r1
 8005de2:	3530      	adds	r5, #48	; 0x30
 8005de4:	2a63      	cmp	r2, #99	; 0x63
 8005de6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dee:	4631      	mov	r1, r6
 8005df0:	dcf1      	bgt.n	8005dd6 <__exponent+0x22>
 8005df2:	3130      	adds	r1, #48	; 0x30
 8005df4:	f1ae 0502 	sub.w	r5, lr, #2
 8005df8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005dfc:	1c44      	adds	r4, r0, #1
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4561      	cmp	r1, ip
 8005e02:	d30a      	bcc.n	8005e1a <__exponent+0x66>
 8005e04:	f10d 0209 	add.w	r2, sp, #9
 8005e08:	eba2 020e 	sub.w	r2, r2, lr
 8005e0c:	4565      	cmp	r5, ip
 8005e0e:	bf88      	it	hi
 8005e10:	2200      	movhi	r2, #0
 8005e12:	4413      	add	r3, r2
 8005e14:	1a18      	subs	r0, r3, r0
 8005e16:	b003      	add	sp, #12
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e22:	e7ed      	b.n	8005e00 <__exponent+0x4c>
 8005e24:	2330      	movs	r3, #48	; 0x30
 8005e26:	3130      	adds	r1, #48	; 0x30
 8005e28:	7083      	strb	r3, [r0, #2]
 8005e2a:	70c1      	strb	r1, [r0, #3]
 8005e2c:	1d03      	adds	r3, r0, #4
 8005e2e:	e7f1      	b.n	8005e14 <__exponent+0x60>

08005e30 <_printf_float>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	b08b      	sub	sp, #44	; 0x2c
 8005e36:	460c      	mov	r4, r1
 8005e38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005e3c:	4616      	mov	r6, r2
 8005e3e:	461f      	mov	r7, r3
 8005e40:	4605      	mov	r5, r0
 8005e42:	f002 fe83 	bl	8008b4c <_localeconv_r>
 8005e46:	f8d0 b000 	ldr.w	fp, [r0]
 8005e4a:	4658      	mov	r0, fp
 8005e4c:	f7fa f9f8 	bl	8000240 <strlen>
 8005e50:	2300      	movs	r3, #0
 8005e52:	9308      	str	r3, [sp, #32]
 8005e54:	f8d8 3000 	ldr.w	r3, [r8]
 8005e58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	3307      	adds	r3, #7
 8005e60:	f023 0307 	bic.w	r3, r3, #7
 8005e64:	f103 0108 	add.w	r1, r3, #8
 8005e68:	f8c8 1000 	str.w	r1, [r8]
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005e76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80060d8 <_printf_float+0x2a8>
 8005e7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005e7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005e82:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8a:	dd24      	ble.n	8005ed6 <_printf_float+0xa6>
 8005e8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	d502      	bpl.n	8005e9c <_printf_float+0x6c>
 8005e96:	232d      	movs	r3, #45	; 0x2d
 8005e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e9c:	4b90      	ldr	r3, [pc, #576]	; (80060e0 <_printf_float+0x2b0>)
 8005e9e:	4891      	ldr	r0, [pc, #580]	; (80060e4 <_printf_float+0x2b4>)
 8005ea0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ea4:	bf94      	ite	ls
 8005ea6:	4698      	movls	r8, r3
 8005ea8:	4680      	movhi	r8, r0
 8005eaa:	2303      	movs	r3, #3
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9700      	str	r7, [sp, #0]
 8005eba:	4633      	mov	r3, r6
 8005ebc:	aa09      	add	r2, sp, #36	; 0x24
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f9d3 	bl	800626c <_printf_common>
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	f040 808a 	bne.w	8005fe0 <_printf_float+0x1b0>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	b00b      	add	sp, #44	; 0x2c
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	eeb4 0b40 	vcmp.f64	d0, d0
 8005eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ede:	d709      	bvc.n	8005ef4 <_printf_float+0xc4>
 8005ee0:	ee10 3a90 	vmov	r3, s1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bfbc      	itt	lt
 8005ee8:	232d      	movlt	r3, #45	; 0x2d
 8005eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eee:	487e      	ldr	r0, [pc, #504]	; (80060e8 <_printf_float+0x2b8>)
 8005ef0:	4b7e      	ldr	r3, [pc, #504]	; (80060ec <_printf_float+0x2bc>)
 8005ef2:	e7d5      	b.n	8005ea0 <_printf_float+0x70>
 8005ef4:	6863      	ldr	r3, [r4, #4]
 8005ef6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005efa:	9104      	str	r1, [sp, #16]
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	d13c      	bne.n	8005f7a <_printf_float+0x14a>
 8005f00:	2306      	movs	r3, #6
 8005f02:	6063      	str	r3, [r4, #4]
 8005f04:	2300      	movs	r3, #0
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	ab08      	add	r3, sp, #32
 8005f0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f12:	ab07      	add	r3, sp, #28
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	f10d 031b 	add.w	r3, sp, #27
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f7ff fef6 	bl	8005d10 <__cvt>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	9907      	ldr	r1, [sp, #28]
 8005f28:	2b47      	cmp	r3, #71	; 0x47
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	d108      	bne.n	8005f40 <_printf_float+0x110>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x108>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd41      	ble.n	8005fbc <_printf_float+0x18c>
 8005f38:	f1a9 0902 	sub.w	r9, r9, #2
 8005f3c:	fa5f f989 	uxtb.w	r9, r9
 8005f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f44:	d820      	bhi.n	8005f88 <_printf_float+0x158>
 8005f46:	3901      	subs	r1, #1
 8005f48:	464a      	mov	r2, r9
 8005f4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f4e:	9107      	str	r1, [sp, #28]
 8005f50:	f7ff ff30 	bl	8005db4 <__exponent>
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	9004      	str	r0, [sp, #16]
 8005f58:	1813      	adds	r3, r2, r0
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	dc02      	bgt.n	8005f66 <_printf_float+0x136>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	07d2      	lsls	r2, r2, #31
 8005f64:	d501      	bpl.n	8005f6a <_printf_float+0x13a>
 8005f66:	3301      	adds	r3, #1
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0a2      	beq.n	8005eb8 <_printf_float+0x88>
 8005f72:	232d      	movs	r3, #45	; 0x2d
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f78:	e79e      	b.n	8005eb8 <_printf_float+0x88>
 8005f7a:	9904      	ldr	r1, [sp, #16]
 8005f7c:	2947      	cmp	r1, #71	; 0x47
 8005f7e:	d1c1      	bne.n	8005f04 <_printf_float+0xd4>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1bf      	bne.n	8005f04 <_printf_float+0xd4>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e7bc      	b.n	8005f02 <_printf_float+0xd2>
 8005f88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f8c:	d118      	bne.n	8005fc0 <_printf_float+0x190>
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	dd0b      	ble.n	8005fac <_printf_float+0x17c>
 8005f94:	6121      	str	r1, [r4, #16]
 8005f96:	b913      	cbnz	r3, 8005f9e <_printf_float+0x16e>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d0      	lsls	r0, r2, #31
 8005f9c:	d502      	bpl.n	8005fa4 <_printf_float+0x174>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	440b      	add	r3, r1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	e7de      	b.n	8005f6a <_printf_float+0x13a>
 8005fac:	b913      	cbnz	r3, 8005fb4 <_printf_float+0x184>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	07d2      	lsls	r2, r2, #31
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_float+0x188>
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x172>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f2      	b.n	8005fa2 <_printf_float+0x172>
 8005fbc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fc0:	9b08      	ldr	r3, [sp, #32]
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	db05      	blt.n	8005fd2 <_printf_float+0x1a2>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	6121      	str	r1, [r4, #16]
 8005fca:	07d8      	lsls	r0, r3, #31
 8005fcc:	d5ea      	bpl.n	8005fa4 <_printf_float+0x174>
 8005fce:	1c4b      	adds	r3, r1, #1
 8005fd0:	e7e7      	b.n	8005fa2 <_printf_float+0x172>
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	bfd4      	ite	le
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	2201      	movgt	r2, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	e7e0      	b.n	8005fa2 <_printf_float+0x172>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	055a      	lsls	r2, r3, #21
 8005fe4:	d407      	bmi.n	8005ff6 <_printf_float+0x1c6>
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	4642      	mov	r2, r8
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d12a      	bne.n	800604a <_printf_float+0x21a>
 8005ff4:	e76a      	b.n	8005ecc <_printf_float+0x9c>
 8005ff6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ffa:	f240 80e2 	bls.w	80061c2 <_printf_float+0x392>
 8005ffe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006002:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600a:	d133      	bne.n	8006074 <_printf_float+0x244>
 800600c:	4a38      	ldr	r2, [pc, #224]	; (80060f0 <_printf_float+0x2c0>)
 800600e:	2301      	movs	r3, #1
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af58 	beq.w	8005ecc <_printf_float+0x9c>
 800601c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006020:	429a      	cmp	r2, r3
 8006022:	db02      	blt.n	800602a <_printf_float+0x1fa>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07d8      	lsls	r0, r3, #31
 8006028:	d50f      	bpl.n	800604a <_printf_float+0x21a>
 800602a:	4653      	mov	r3, sl
 800602c:	465a      	mov	r2, fp
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af49 	beq.w	8005ecc <_printf_float+0x9c>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 091a 	add.w	r9, r4, #26
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	3b01      	subs	r3, #1
 8006046:	4543      	cmp	r3, r8
 8006048:	dc09      	bgt.n	800605e <_printf_float+0x22e>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	f100 8108 	bmi.w	8006262 <_printf_float+0x432>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e738      	b.n	8005ed0 <_printf_float+0xa0>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f af2f 	beq.w	8005ecc <_printf_float+0x9c>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	e7e6      	b.n	8006042 <_printf_float+0x212>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc3c      	bgt.n	80060f4 <_printf_float+0x2c4>
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <_printf_float+0x2c0>)
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af21 	beq.w	8005ecc <_printf_float+0x9c>
 800608a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800608e:	4313      	orrs	r3, r2
 8006090:	d102      	bne.n	8006098 <_printf_float+0x268>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d9      	lsls	r1, r3, #31
 8006096:	d5d8      	bpl.n	800604a <_printf_float+0x21a>
 8006098:	4653      	mov	r3, sl
 800609a:	465a      	mov	r2, fp
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af12 	beq.w	8005ecc <_printf_float+0x9c>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f104 0a1a 	add.w	sl, r4, #26
 80060b0:	9b07      	ldr	r3, [sp, #28]
 80060b2:	425b      	negs	r3, r3
 80060b4:	454b      	cmp	r3, r9
 80060b6:	dc01      	bgt.n	80060bc <_printf_float+0x28c>
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	e795      	b.n	8005fe8 <_printf_float+0x1b8>
 80060bc:	2301      	movs	r3, #1
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af00 	beq.w	8005ecc <_printf_float+0x9c>
 80060cc:	f109 0901 	add.w	r9, r9, #1
 80060d0:	e7ee      	b.n	80060b0 <_printf_float+0x280>
 80060d2:	bf00      	nop
 80060d4:	f3af 8000 	nop.w
 80060d8:	ffffffff 	.word	0xffffffff
 80060dc:	7fefffff 	.word	0x7fefffff
 80060e0:	0800b270 	.word	0x0800b270
 80060e4:	0800b274 	.word	0x0800b274
 80060e8:	0800b27c 	.word	0x0800b27c
 80060ec:	0800b278 	.word	0x0800b278
 80060f0:	0800b681 	.word	0x0800b681
 80060f4:	9a08      	ldr	r2, [sp, #32]
 80060f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060f8:	429a      	cmp	r2, r3
 80060fa:	bfa8      	it	ge
 80060fc:	461a      	movge	r2, r3
 80060fe:	2a00      	cmp	r2, #0
 8006100:	4691      	mov	r9, r2
 8006102:	dc38      	bgt.n	8006176 <_printf_float+0x346>
 8006104:	2300      	movs	r3, #0
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800610c:	f104 021a 	add.w	r2, r4, #26
 8006110:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006112:	9905      	ldr	r1, [sp, #20]
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	eba3 0309 	sub.w	r3, r3, r9
 800611a:	428b      	cmp	r3, r1
 800611c:	dc33      	bgt.n	8006186 <_printf_float+0x356>
 800611e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006122:	429a      	cmp	r2, r3
 8006124:	db3c      	blt.n	80061a0 <_printf_float+0x370>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07da      	lsls	r2, r3, #31
 800612a:	d439      	bmi.n	80061a0 <_printf_float+0x370>
 800612c:	9a08      	ldr	r2, [sp, #32]
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	9907      	ldr	r1, [sp, #28]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	eba2 0901 	sub.w	r9, r2, r1
 8006138:	4599      	cmp	r9, r3
 800613a:	bfa8      	it	ge
 800613c:	4699      	movge	r9, r3
 800613e:	f1b9 0f00 	cmp.w	r9, #0
 8006142:	dc35      	bgt.n	80061b0 <_printf_float+0x380>
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800614c:	f104 0a1a 	add.w	sl, r4, #26
 8006150:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	eba3 0309 	sub.w	r3, r3, r9
 800615a:	4543      	cmp	r3, r8
 800615c:	f77f af75 	ble.w	800604a <_printf_float+0x21a>
 8006160:	2301      	movs	r3, #1
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f aeae 	beq.w	8005ecc <_printf_float+0x9c>
 8006170:	f108 0801 	add.w	r8, r8, #1
 8006174:	e7ec      	b.n	8006150 <_printf_float+0x320>
 8006176:	4613      	mov	r3, r2
 8006178:	4631      	mov	r1, r6
 800617a:	4642      	mov	r2, r8
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	d1bf      	bne.n	8006104 <_printf_float+0x2d4>
 8006184:	e6a2      	b.n	8005ecc <_printf_float+0x9c>
 8006186:	2301      	movs	r3, #1
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	9204      	str	r2, [sp, #16]
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae9b 	beq.w	8005ecc <_printf_float+0x9c>
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	9a04      	ldr	r2, [sp, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	9305      	str	r3, [sp, #20]
 800619e:	e7b7      	b.n	8006110 <_printf_float+0x2e0>
 80061a0:	4653      	mov	r3, sl
 80061a2:	465a      	mov	r2, fp
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	d1be      	bne.n	800612c <_printf_float+0x2fc>
 80061ae:	e68d      	b.n	8005ecc <_printf_float+0x9c>
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	464b      	mov	r3, r9
 80061b4:	4442      	add	r2, r8
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	d1c1      	bne.n	8006144 <_printf_float+0x314>
 80061c0:	e684      	b.n	8005ecc <_printf_float+0x9c>
 80061c2:	9a08      	ldr	r2, [sp, #32]
 80061c4:	2a01      	cmp	r2, #1
 80061c6:	dc01      	bgt.n	80061cc <_printf_float+0x39c>
 80061c8:	07db      	lsls	r3, r3, #31
 80061ca:	d537      	bpl.n	800623c <_printf_float+0x40c>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4642      	mov	r2, r8
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f ae78 	beq.w	8005ecc <_printf_float+0x9c>
 80061dc:	4653      	mov	r3, sl
 80061de:	465a      	mov	r2, fp
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f ae70 	beq.w	8005ecc <_printf_float+0x9c>
 80061ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80061f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	d01b      	beq.n	8006232 <_printf_float+0x402>
 80061fa:	9b08      	ldr	r3, [sp, #32]
 80061fc:	f108 0201 	add.w	r2, r8, #1
 8006200:	3b01      	subs	r3, #1
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	d10e      	bne.n	800622a <_printf_float+0x3fa>
 800620c:	e65e      	b.n	8005ecc <_printf_float+0x9c>
 800620e:	2301      	movs	r3, #1
 8006210:	464a      	mov	r2, r9
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae57 	beq.w	8005ecc <_printf_float+0x9c>
 800621e:	f108 0801 	add.w	r8, r8, #1
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	3b01      	subs	r3, #1
 8006226:	4543      	cmp	r3, r8
 8006228:	dcf1      	bgt.n	800620e <_printf_float+0x3de>
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006230:	e6db      	b.n	8005fea <_printf_float+0x1ba>
 8006232:	f04f 0800 	mov.w	r8, #0
 8006236:	f104 091a 	add.w	r9, r4, #26
 800623a:	e7f2      	b.n	8006222 <_printf_float+0x3f2>
 800623c:	2301      	movs	r3, #1
 800623e:	4642      	mov	r2, r8
 8006240:	e7df      	b.n	8006202 <_printf_float+0x3d2>
 8006242:	2301      	movs	r3, #1
 8006244:	464a      	mov	r2, r9
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae3d 	beq.w	8005ecc <_printf_float+0x9c>
 8006252:	f108 0801 	add.w	r8, r8, #1
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	9909      	ldr	r1, [sp, #36]	; 0x24
 800625a:	1a5b      	subs	r3, r3, r1
 800625c:	4543      	cmp	r3, r8
 800625e:	dcf0      	bgt.n	8006242 <_printf_float+0x412>
 8006260:	e6f7      	b.n	8006052 <_printf_float+0x222>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	f104 0919 	add.w	r9, r4, #25
 800626a:	e7f4      	b.n	8006256 <_printf_float+0x426>

0800626c <_printf_common>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	4616      	mov	r6, r2
 8006272:	4699      	mov	r9, r3
 8006274:	688a      	ldr	r2, [r1, #8]
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800627c:	4293      	cmp	r3, r2
 800627e:	bfb8      	it	lt
 8006280:	4613      	movlt	r3, r2
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006288:	4607      	mov	r7, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b10a      	cbz	r2, 8006292 <_printf_common+0x26>
 800628e:	3301      	adds	r3, #1
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	6833      	ldrmi	r3, [r6, #0]
 800629a:	3302      	addmi	r3, #2
 800629c:	6033      	strmi	r3, [r6, #0]
 800629e:	6825      	ldr	r5, [r4, #0]
 80062a0:	f015 0506 	ands.w	r5, r5, #6
 80062a4:	d106      	bne.n	80062b4 <_printf_common+0x48>
 80062a6:	f104 0a19 	add.w	sl, r4, #25
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	6832      	ldr	r2, [r6, #0]
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dc26      	bgt.n	8006302 <_printf_common+0x96>
 80062b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b8:	1e13      	subs	r3, r2, #0
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	bf18      	it	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	0692      	lsls	r2, r2, #26
 80062c2:	d42b      	bmi.n	800631c <_printf_common+0xb0>
 80062c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d01e      	beq.n	8006310 <_printf_common+0xa4>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	68e5      	ldr	r5, [r4, #12]
 80062d6:	6832      	ldr	r2, [r6, #0]
 80062d8:	f003 0306 	and.w	r3, r3, #6
 80062dc:	2b04      	cmp	r3, #4
 80062de:	bf08      	it	eq
 80062e0:	1aad      	subeq	r5, r5, r2
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	6922      	ldr	r2, [r4, #16]
 80062e6:	bf0c      	ite	eq
 80062e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ec:	2500      	movne	r5, #0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bfc4      	itt	gt
 80062f2:	1a9b      	subgt	r3, r3, r2
 80062f4:	18ed      	addgt	r5, r5, r3
 80062f6:	2600      	movs	r6, #0
 80062f8:	341a      	adds	r4, #26
 80062fa:	42b5      	cmp	r5, r6
 80062fc:	d11a      	bne.n	8006334 <_printf_common+0xc8>
 80062fe:	2000      	movs	r0, #0
 8006300:	e008      	b.n	8006314 <_printf_common+0xa8>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4649      	mov	r1, r9
 8006308:	4638      	mov	r0, r7
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d103      	bne.n	8006318 <_printf_common+0xac>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	3501      	adds	r5, #1
 800631a:	e7c6      	b.n	80062aa <_printf_common+0x3e>
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	2030      	movs	r0, #48	; 0x30
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006326:	4422      	add	r2, r4
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006330:	3302      	adds	r3, #2
 8006332:	e7c7      	b.n	80062c4 <_printf_common+0x58>
 8006334:	2301      	movs	r3, #1
 8006336:	4622      	mov	r2, r4
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xa4>
 8006342:	3601      	adds	r6, #1
 8006344:	e7d9      	b.n	80062fa <_printf_common+0x8e>
	...

08006348 <_printf_i>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	460c      	mov	r4, r1
 800634e:	4691      	mov	r9, r2
 8006350:	7e27      	ldrb	r7, [r4, #24]
 8006352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006354:	2f78      	cmp	r7, #120	; 0x78
 8006356:	4680      	mov	r8, r0
 8006358:	469a      	mov	sl, r3
 800635a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800635e:	d807      	bhi.n	8006370 <_printf_i+0x28>
 8006360:	2f62      	cmp	r7, #98	; 0x62
 8006362:	d80a      	bhi.n	800637a <_printf_i+0x32>
 8006364:	2f00      	cmp	r7, #0
 8006366:	f000 80d8 	beq.w	800651a <_printf_i+0x1d2>
 800636a:	2f58      	cmp	r7, #88	; 0x58
 800636c:	f000 80a3 	beq.w	80064b6 <_printf_i+0x16e>
 8006370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006378:	e03a      	b.n	80063f0 <_printf_i+0xa8>
 800637a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637e:	2b15      	cmp	r3, #21
 8006380:	d8f6      	bhi.n	8006370 <_printf_i+0x28>
 8006382:	a001      	add	r0, pc, #4	; (adr r0, 8006388 <_printf_i+0x40>)
 8006384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063f5 	.word	0x080063f5
 8006390:	08006371 	.word	0x08006371
 8006394:	08006371 	.word	0x08006371
 8006398:	08006371 	.word	0x08006371
 800639c:	08006371 	.word	0x08006371
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006371 	.word	0x08006371
 80063a8:	08006371 	.word	0x08006371
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	08006501 	.word	0x08006501
 80063b8:	08006425 	.word	0x08006425
 80063bc:	080064e3 	.word	0x080064e3
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	08006523 	.word	0x08006523
 80063cc:	08006371 	.word	0x08006371
 80063d0:	08006425 	.word	0x08006425
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064eb 	.word	0x080064eb
 80063e0:	680b      	ldr	r3, [r1, #0]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	600a      	str	r2, [r1, #0]
 80063e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0a3      	b.n	800653c <_printf_i+0x1f4>
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	6808      	ldr	r0, [r1, #0]
 80063f8:	062e      	lsls	r6, r5, #24
 80063fa:	f100 0304 	add.w	r3, r0, #4
 80063fe:	d50a      	bpl.n	8006416 <_printf_i+0xce>
 8006400:	6805      	ldr	r5, [r0, #0]
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	2d00      	cmp	r5, #0
 8006406:	da03      	bge.n	8006410 <_printf_i+0xc8>
 8006408:	232d      	movs	r3, #45	; 0x2d
 800640a:	426d      	negs	r5, r5
 800640c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006410:	485e      	ldr	r0, [pc, #376]	; (800658c <_printf_i+0x244>)
 8006412:	230a      	movs	r3, #10
 8006414:	e019      	b.n	800644a <_printf_i+0x102>
 8006416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800641a:	6805      	ldr	r5, [r0, #0]
 800641c:	600b      	str	r3, [r1, #0]
 800641e:	bf18      	it	ne
 8006420:	b22d      	sxthne	r5, r5
 8006422:	e7ef      	b.n	8006404 <_printf_i+0xbc>
 8006424:	680b      	ldr	r3, [r1, #0]
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	1d18      	adds	r0, r3, #4
 800642a:	6008      	str	r0, [r1, #0]
 800642c:	0628      	lsls	r0, r5, #24
 800642e:	d501      	bpl.n	8006434 <_printf_i+0xec>
 8006430:	681d      	ldr	r5, [r3, #0]
 8006432:	e002      	b.n	800643a <_printf_i+0xf2>
 8006434:	0669      	lsls	r1, r5, #25
 8006436:	d5fb      	bpl.n	8006430 <_printf_i+0xe8>
 8006438:	881d      	ldrh	r5, [r3, #0]
 800643a:	4854      	ldr	r0, [pc, #336]	; (800658c <_printf_i+0x244>)
 800643c:	2f6f      	cmp	r7, #111	; 0x6f
 800643e:	bf0c      	ite	eq
 8006440:	2308      	moveq	r3, #8
 8006442:	230a      	movne	r3, #10
 8006444:	2100      	movs	r1, #0
 8006446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800644a:	6866      	ldr	r6, [r4, #4]
 800644c:	60a6      	str	r6, [r4, #8]
 800644e:	2e00      	cmp	r6, #0
 8006450:	bfa2      	ittt	ge
 8006452:	6821      	ldrge	r1, [r4, #0]
 8006454:	f021 0104 	bicge.w	r1, r1, #4
 8006458:	6021      	strge	r1, [r4, #0]
 800645a:	b90d      	cbnz	r5, 8006460 <_printf_i+0x118>
 800645c:	2e00      	cmp	r6, #0
 800645e:	d04d      	beq.n	80064fc <_printf_i+0x1b4>
 8006460:	4616      	mov	r6, r2
 8006462:	fbb5 f1f3 	udiv	r1, r5, r3
 8006466:	fb03 5711 	mls	r7, r3, r1, r5
 800646a:	5dc7      	ldrb	r7, [r0, r7]
 800646c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006470:	462f      	mov	r7, r5
 8006472:	42bb      	cmp	r3, r7
 8006474:	460d      	mov	r5, r1
 8006476:	d9f4      	bls.n	8006462 <_printf_i+0x11a>
 8006478:	2b08      	cmp	r3, #8
 800647a:	d10b      	bne.n	8006494 <_printf_i+0x14c>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	07df      	lsls	r7, r3, #31
 8006480:	d508      	bpl.n	8006494 <_printf_i+0x14c>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4299      	cmp	r1, r3
 8006488:	bfde      	ittt	le
 800648a:	2330      	movle	r3, #48	; 0x30
 800648c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006494:	1b92      	subs	r2, r2, r6
 8006496:	6122      	str	r2, [r4, #16]
 8006498:	f8cd a000 	str.w	sl, [sp]
 800649c:	464b      	mov	r3, r9
 800649e:	aa03      	add	r2, sp, #12
 80064a0:	4621      	mov	r1, r4
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff fee2 	bl	800626c <_printf_common>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d14c      	bne.n	8006546 <_printf_i+0x1fe>
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	b004      	add	sp, #16
 80064b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b6:	4835      	ldr	r0, [pc, #212]	; (800658c <_printf_i+0x244>)
 80064b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	680e      	ldr	r6, [r1, #0]
 80064c0:	061f      	lsls	r7, r3, #24
 80064c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80064c6:	600e      	str	r6, [r1, #0]
 80064c8:	d514      	bpl.n	80064f4 <_printf_i+0x1ac>
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	bf44      	itt	mi
 80064ce:	f043 0320 	orrmi.w	r3, r3, #32
 80064d2:	6023      	strmi	r3, [r4, #0]
 80064d4:	b91d      	cbnz	r5, 80064de <_printf_i+0x196>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f023 0320 	bic.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2310      	movs	r3, #16
 80064e0:	e7b0      	b.n	8006444 <_printf_i+0xfc>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	f043 0320 	orr.w	r3, r3, #32
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	2378      	movs	r3, #120	; 0x78
 80064ec:	4828      	ldr	r0, [pc, #160]	; (8006590 <_printf_i+0x248>)
 80064ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064f2:	e7e3      	b.n	80064bc <_printf_i+0x174>
 80064f4:	065e      	lsls	r6, r3, #25
 80064f6:	bf48      	it	mi
 80064f8:	b2ad      	uxthmi	r5, r5
 80064fa:	e7e6      	b.n	80064ca <_printf_i+0x182>
 80064fc:	4616      	mov	r6, r2
 80064fe:	e7bb      	b.n	8006478 <_printf_i+0x130>
 8006500:	680b      	ldr	r3, [r1, #0]
 8006502:	6826      	ldr	r6, [r4, #0]
 8006504:	6960      	ldr	r0, [r4, #20]
 8006506:	1d1d      	adds	r5, r3, #4
 8006508:	600d      	str	r5, [r1, #0]
 800650a:	0635      	lsls	r5, r6, #24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	d501      	bpl.n	8006514 <_printf_i+0x1cc>
 8006510:	6018      	str	r0, [r3, #0]
 8006512:	e002      	b.n	800651a <_printf_i+0x1d2>
 8006514:	0671      	lsls	r1, r6, #25
 8006516:	d5fb      	bpl.n	8006510 <_printf_i+0x1c8>
 8006518:	8018      	strh	r0, [r3, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	4616      	mov	r6, r2
 8006520:	e7ba      	b.n	8006498 <_printf_i+0x150>
 8006522:	680b      	ldr	r3, [r1, #0]
 8006524:	1d1a      	adds	r2, r3, #4
 8006526:	600a      	str	r2, [r1, #0]
 8006528:	681e      	ldr	r6, [r3, #0]
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	2100      	movs	r1, #0
 800652e:	4630      	mov	r0, r6
 8006530:	f7f9 fe8e 	bl	8000250 <memchr>
 8006534:	b108      	cbz	r0, 800653a <_printf_i+0x1f2>
 8006536:	1b80      	subs	r0, r0, r6
 8006538:	6060      	str	r0, [r4, #4]
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	2300      	movs	r3, #0
 8006540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006544:	e7a8      	b.n	8006498 <_printf_i+0x150>
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	4632      	mov	r2, r6
 800654a:	4649      	mov	r1, r9
 800654c:	4640      	mov	r0, r8
 800654e:	47d0      	blx	sl
 8006550:	3001      	adds	r0, #1
 8006552:	d0ab      	beq.n	80064ac <_printf_i+0x164>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	079b      	lsls	r3, r3, #30
 8006558:	d413      	bmi.n	8006582 <_printf_i+0x23a>
 800655a:	68e0      	ldr	r0, [r4, #12]
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	4298      	cmp	r0, r3
 8006560:	bfb8      	it	lt
 8006562:	4618      	movlt	r0, r3
 8006564:	e7a4      	b.n	80064b0 <_printf_i+0x168>
 8006566:	2301      	movs	r3, #1
 8006568:	4632      	mov	r2, r6
 800656a:	4649      	mov	r1, r9
 800656c:	4640      	mov	r0, r8
 800656e:	47d0      	blx	sl
 8006570:	3001      	adds	r0, #1
 8006572:	d09b      	beq.n	80064ac <_printf_i+0x164>
 8006574:	3501      	adds	r5, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	9903      	ldr	r1, [sp, #12]
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	42ab      	cmp	r3, r5
 800657e:	dcf2      	bgt.n	8006566 <_printf_i+0x21e>
 8006580:	e7eb      	b.n	800655a <_printf_i+0x212>
 8006582:	2500      	movs	r5, #0
 8006584:	f104 0619 	add.w	r6, r4, #25
 8006588:	e7f5      	b.n	8006576 <_printf_i+0x22e>
 800658a:	bf00      	nop
 800658c:	0800b280 	.word	0x0800b280
 8006590:	0800b291 	.word	0x0800b291

08006594 <_scanf_float>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	b087      	sub	sp, #28
 800659a:	4617      	mov	r7, r2
 800659c:	9303      	str	r3, [sp, #12]
 800659e:	688b      	ldr	r3, [r1, #8]
 80065a0:	1e5a      	subs	r2, r3, #1
 80065a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80065a6:	bf83      	ittte	hi
 80065a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065ac:	195b      	addhi	r3, r3, r5
 80065ae:	9302      	strhi	r3, [sp, #8]
 80065b0:	2300      	movls	r3, #0
 80065b2:	bf86      	itte	hi
 80065b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065b8:	608b      	strhi	r3, [r1, #8]
 80065ba:	9302      	strls	r3, [sp, #8]
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	468b      	mov	fp, r1
 80065c0:	2500      	movs	r5, #0
 80065c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80065ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065ce:	4680      	mov	r8, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	465e      	mov	r6, fp
 80065d4:	46aa      	mov	sl, r5
 80065d6:	46a9      	mov	r9, r5
 80065d8:	9501      	str	r5, [sp, #4]
 80065da:	68a2      	ldr	r2, [r4, #8]
 80065dc:	b152      	cbz	r2, 80065f4 <_scanf_float+0x60>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b4e      	cmp	r3, #78	; 0x4e
 80065e4:	d864      	bhi.n	80066b0 <_scanf_float+0x11c>
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d83c      	bhi.n	8006664 <_scanf_float+0xd0>
 80065ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065ee:	b2c8      	uxtb	r0, r1
 80065f0:	280e      	cmp	r0, #14
 80065f2:	d93a      	bls.n	800666a <_scanf_float+0xd6>
 80065f4:	f1b9 0f00 	cmp.w	r9, #0
 80065f8:	d003      	beq.n	8006602 <_scanf_float+0x6e>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006606:	f1ba 0f01 	cmp.w	sl, #1
 800660a:	f200 8113 	bhi.w	8006834 <_scanf_float+0x2a0>
 800660e:	455e      	cmp	r6, fp
 8006610:	f200 8105 	bhi.w	800681e <_scanf_float+0x28a>
 8006614:	2501      	movs	r5, #1
 8006616:	4628      	mov	r0, r5
 8006618:	b007      	add	sp, #28
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006622:	2a0d      	cmp	r2, #13
 8006624:	d8e6      	bhi.n	80065f4 <_scanf_float+0x60>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_scanf_float+0x98>)
 8006628:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800662c:	0800676b 	.word	0x0800676b
 8006630:	080065f5 	.word	0x080065f5
 8006634:	080065f5 	.word	0x080065f5
 8006638:	080065f5 	.word	0x080065f5
 800663c:	080067cb 	.word	0x080067cb
 8006640:	080067a3 	.word	0x080067a3
 8006644:	080065f5 	.word	0x080065f5
 8006648:	080065f5 	.word	0x080065f5
 800664c:	08006779 	.word	0x08006779
 8006650:	080065f5 	.word	0x080065f5
 8006654:	080065f5 	.word	0x080065f5
 8006658:	080065f5 	.word	0x080065f5
 800665c:	080065f5 	.word	0x080065f5
 8006660:	08006731 	.word	0x08006731
 8006664:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006668:	e7db      	b.n	8006622 <_scanf_float+0x8e>
 800666a:	290e      	cmp	r1, #14
 800666c:	d8c2      	bhi.n	80065f4 <_scanf_float+0x60>
 800666e:	a001      	add	r0, pc, #4	; (adr r0, 8006674 <_scanf_float+0xe0>)
 8006670:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006674:	08006723 	.word	0x08006723
 8006678:	080065f5 	.word	0x080065f5
 800667c:	08006723 	.word	0x08006723
 8006680:	080067b7 	.word	0x080067b7
 8006684:	080065f5 	.word	0x080065f5
 8006688:	080066d1 	.word	0x080066d1
 800668c:	0800670d 	.word	0x0800670d
 8006690:	0800670d 	.word	0x0800670d
 8006694:	0800670d 	.word	0x0800670d
 8006698:	0800670d 	.word	0x0800670d
 800669c:	0800670d 	.word	0x0800670d
 80066a0:	0800670d 	.word	0x0800670d
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	0800670d 	.word	0x0800670d
 80066b0:	2b6e      	cmp	r3, #110	; 0x6e
 80066b2:	d809      	bhi.n	80066c8 <_scanf_float+0x134>
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d8b2      	bhi.n	800661e <_scanf_float+0x8a>
 80066b8:	2b54      	cmp	r3, #84	; 0x54
 80066ba:	d077      	beq.n	80067ac <_scanf_float+0x218>
 80066bc:	2b59      	cmp	r3, #89	; 0x59
 80066be:	d199      	bne.n	80065f4 <_scanf_float+0x60>
 80066c0:	2d07      	cmp	r5, #7
 80066c2:	d197      	bne.n	80065f4 <_scanf_float+0x60>
 80066c4:	2508      	movs	r5, #8
 80066c6:	e029      	b.n	800671c <_scanf_float+0x188>
 80066c8:	2b74      	cmp	r3, #116	; 0x74
 80066ca:	d06f      	beq.n	80067ac <_scanf_float+0x218>
 80066cc:	2b79      	cmp	r3, #121	; 0x79
 80066ce:	e7f6      	b.n	80066be <_scanf_float+0x12a>
 80066d0:	6821      	ldr	r1, [r4, #0]
 80066d2:	05c8      	lsls	r0, r1, #23
 80066d4:	d51a      	bpl.n	800670c <_scanf_float+0x178>
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066dc:	6021      	str	r1, [r4, #0]
 80066de:	f109 0901 	add.w	r9, r9, #1
 80066e2:	b11b      	cbz	r3, 80066ec <_scanf_float+0x158>
 80066e4:	3b01      	subs	r3, #1
 80066e6:	3201      	adds	r2, #1
 80066e8:	9302      	str	r3, [sp, #8]
 80066ea:	60a2      	str	r2, [r4, #8]
 80066ec:	68a3      	ldr	r3, [r4, #8]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	3301      	adds	r3, #1
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	f340 8084 	ble.w	800680c <_scanf_float+0x278>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	603b      	str	r3, [r7, #0]
 800670a:	e766      	b.n	80065da <_scanf_float+0x46>
 800670c:	eb1a 0f05 	cmn.w	sl, r5
 8006710:	f47f af70 	bne.w	80065f4 <_scanf_float+0x60>
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800671a:	6022      	str	r2, [r4, #0]
 800671c:	f806 3b01 	strb.w	r3, [r6], #1
 8006720:	e7e4      	b.n	80066ec <_scanf_float+0x158>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	0610      	lsls	r0, r2, #24
 8006726:	f57f af65 	bpl.w	80065f4 <_scanf_float+0x60>
 800672a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672e:	e7f4      	b.n	800671a <_scanf_float+0x186>
 8006730:	f1ba 0f00 	cmp.w	sl, #0
 8006734:	d10e      	bne.n	8006754 <_scanf_float+0x1c0>
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d10e      	bne.n	800675a <_scanf_float+0x1c6>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006742:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006746:	d108      	bne.n	800675a <_scanf_float+0x1c6>
 8006748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800674c:	6022      	str	r2, [r4, #0]
 800674e:	f04f 0a01 	mov.w	sl, #1
 8006752:	e7e3      	b.n	800671c <_scanf_float+0x188>
 8006754:	f1ba 0f02 	cmp.w	sl, #2
 8006758:	d055      	beq.n	8006806 <_scanf_float+0x272>
 800675a:	2d01      	cmp	r5, #1
 800675c:	d002      	beq.n	8006764 <_scanf_float+0x1d0>
 800675e:	2d04      	cmp	r5, #4
 8006760:	f47f af48 	bne.w	80065f4 <_scanf_float+0x60>
 8006764:	3501      	adds	r5, #1
 8006766:	b2ed      	uxtb	r5, r5
 8006768:	e7d8      	b.n	800671c <_scanf_float+0x188>
 800676a:	f1ba 0f01 	cmp.w	sl, #1
 800676e:	f47f af41 	bne.w	80065f4 <_scanf_float+0x60>
 8006772:	f04f 0a02 	mov.w	sl, #2
 8006776:	e7d1      	b.n	800671c <_scanf_float+0x188>
 8006778:	b97d      	cbnz	r5, 800679a <_scanf_float+0x206>
 800677a:	f1b9 0f00 	cmp.w	r9, #0
 800677e:	f47f af3c 	bne.w	80065fa <_scanf_float+0x66>
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006788:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800678c:	f47f af39 	bne.w	8006602 <_scanf_float+0x6e>
 8006790:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	2501      	movs	r5, #1
 8006798:	e7c0      	b.n	800671c <_scanf_float+0x188>
 800679a:	2d03      	cmp	r5, #3
 800679c:	d0e2      	beq.n	8006764 <_scanf_float+0x1d0>
 800679e:	2d05      	cmp	r5, #5
 80067a0:	e7de      	b.n	8006760 <_scanf_float+0x1cc>
 80067a2:	2d02      	cmp	r5, #2
 80067a4:	f47f af26 	bne.w	80065f4 <_scanf_float+0x60>
 80067a8:	2503      	movs	r5, #3
 80067aa:	e7b7      	b.n	800671c <_scanf_float+0x188>
 80067ac:	2d06      	cmp	r5, #6
 80067ae:	f47f af21 	bne.w	80065f4 <_scanf_float+0x60>
 80067b2:	2507      	movs	r5, #7
 80067b4:	e7b2      	b.n	800671c <_scanf_float+0x188>
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	0591      	lsls	r1, r2, #22
 80067ba:	f57f af1b 	bpl.w	80065f4 <_scanf_float+0x60>
 80067be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80067c8:	e7a8      	b.n	800671c <_scanf_float+0x188>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067d4:	d006      	beq.n	80067e4 <_scanf_float+0x250>
 80067d6:	0550      	lsls	r0, r2, #21
 80067d8:	f57f af0c 	bpl.w	80065f4 <_scanf_float+0x60>
 80067dc:	f1b9 0f00 	cmp.w	r9, #0
 80067e0:	f43f af0f 	beq.w	8006602 <_scanf_float+0x6e>
 80067e4:	0591      	lsls	r1, r2, #22
 80067e6:	bf58      	it	pl
 80067e8:	9901      	ldrpl	r1, [sp, #4]
 80067ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067ee:	bf58      	it	pl
 80067f0:	eba9 0101 	subpl.w	r1, r9, r1
 80067f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067f8:	bf58      	it	pl
 80067fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	f04f 0900 	mov.w	r9, #0
 8006804:	e78a      	b.n	800671c <_scanf_float+0x188>
 8006806:	f04f 0a03 	mov.w	sl, #3
 800680a:	e787      	b.n	800671c <_scanf_float+0x188>
 800680c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006810:	4639      	mov	r1, r7
 8006812:	4640      	mov	r0, r8
 8006814:	4798      	blx	r3
 8006816:	2800      	cmp	r0, #0
 8006818:	f43f aedf 	beq.w	80065da <_scanf_float+0x46>
 800681c:	e6ea      	b.n	80065f4 <_scanf_float+0x60>
 800681e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006826:	463a      	mov	r2, r7
 8006828:	4640      	mov	r0, r8
 800682a:	4798      	blx	r3
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	3b01      	subs	r3, #1
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	e6ec      	b.n	800660e <_scanf_float+0x7a>
 8006834:	1e6b      	subs	r3, r5, #1
 8006836:	2b06      	cmp	r3, #6
 8006838:	d825      	bhi.n	8006886 <_scanf_float+0x2f2>
 800683a:	2d02      	cmp	r5, #2
 800683c:	d836      	bhi.n	80068ac <_scanf_float+0x318>
 800683e:	455e      	cmp	r6, fp
 8006840:	f67f aee8 	bls.w	8006614 <_scanf_float+0x80>
 8006844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006848:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800684c:	463a      	mov	r2, r7
 800684e:	4640      	mov	r0, r8
 8006850:	4798      	blx	r3
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	3b01      	subs	r3, #1
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	e7f1      	b.n	800683e <_scanf_float+0x2aa>
 800685a:	9802      	ldr	r0, [sp, #8]
 800685c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006860:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	463a      	mov	r2, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	3b01      	subs	r3, #1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006876:	fa5f fa8a 	uxtb.w	sl, sl
 800687a:	f1ba 0f02 	cmp.w	sl, #2
 800687e:	d1ec      	bne.n	800685a <_scanf_float+0x2c6>
 8006880:	3d03      	subs	r5, #3
 8006882:	b2ed      	uxtb	r5, r5
 8006884:	1b76      	subs	r6, r6, r5
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	05da      	lsls	r2, r3, #23
 800688a:	d52f      	bpl.n	80068ec <_scanf_float+0x358>
 800688c:	055b      	lsls	r3, r3, #21
 800688e:	d510      	bpl.n	80068b2 <_scanf_float+0x31e>
 8006890:	455e      	cmp	r6, fp
 8006892:	f67f aebf 	bls.w	8006614 <_scanf_float+0x80>
 8006896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800689a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800689e:	463a      	mov	r2, r7
 80068a0:	4640      	mov	r0, r8
 80068a2:	4798      	blx	r3
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	6123      	str	r3, [r4, #16]
 80068aa:	e7f1      	b.n	8006890 <_scanf_float+0x2fc>
 80068ac:	46aa      	mov	sl, r5
 80068ae:	9602      	str	r6, [sp, #8]
 80068b0:	e7df      	b.n	8006872 <_scanf_float+0x2de>
 80068b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	2965      	cmp	r1, #101	; 0x65
 80068ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80068be:	f106 35ff 	add.w	r5, r6, #4294967295
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	d00c      	beq.n	80068e0 <_scanf_float+0x34c>
 80068c6:	2945      	cmp	r1, #69	; 0x45
 80068c8:	d00a      	beq.n	80068e0 <_scanf_float+0x34c>
 80068ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068ce:	463a      	mov	r2, r7
 80068d0:	4640      	mov	r0, r8
 80068d2:	4798      	blx	r3
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068da:	3b01      	subs	r3, #1
 80068dc:	1eb5      	subs	r5, r6, #2
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e4:	463a      	mov	r2, r7
 80068e6:	4640      	mov	r0, r8
 80068e8:	4798      	blx	r3
 80068ea:	462e      	mov	r6, r5
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	f015 0510 	ands.w	r5, r5, #16
 80068f2:	d14d      	bne.n	8006990 <_scanf_float+0x3fc>
 80068f4:	7035      	strb	r5, [r6, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006900:	d11a      	bne.n	8006938 <_scanf_float+0x3a4>
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	454b      	cmp	r3, r9
 8006906:	eba3 0209 	sub.w	r2, r3, r9
 800690a:	d122      	bne.n	8006952 <_scanf_float+0x3be>
 800690c:	2200      	movs	r2, #0
 800690e:	4659      	mov	r1, fp
 8006910:	4640      	mov	r0, r8
 8006912:	f000 feef 	bl	80076f4 <_strtod_r>
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	6821      	ldr	r1, [r4, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f011 0f02 	tst.w	r1, #2
 8006920:	f103 0204 	add.w	r2, r3, #4
 8006924:	d020      	beq.n	8006968 <_scanf_float+0x3d4>
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	600a      	str	r2, [r1, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	ed83 0b00 	vstr	d0, [r3]
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60e3      	str	r3, [r4, #12]
 8006936:	e66e      	b.n	8006616 <_scanf_float+0x82>
 8006938:	9b04      	ldr	r3, [sp, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0e6      	beq.n	800690c <_scanf_float+0x378>
 800693e:	9905      	ldr	r1, [sp, #20]
 8006940:	230a      	movs	r3, #10
 8006942:	462a      	mov	r2, r5
 8006944:	3101      	adds	r1, #1
 8006946:	4640      	mov	r0, r8
 8006948:	f000 ff5e 	bl	8007808 <_strtol_r>
 800694c:	9b04      	ldr	r3, [sp, #16]
 800694e:	9e05      	ldr	r6, [sp, #20]
 8006950:	1ac2      	subs	r2, r0, r3
 8006952:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006956:	429e      	cmp	r6, r3
 8006958:	bf28      	it	cs
 800695a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800695e:	490d      	ldr	r1, [pc, #52]	; (8006994 <_scanf_float+0x400>)
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f821 	bl	80069a8 <siprintf>
 8006966:	e7d1      	b.n	800690c <_scanf_float+0x378>
 8006968:	f011 0f04 	tst.w	r1, #4
 800696c:	9903      	ldr	r1, [sp, #12]
 800696e:	600a      	str	r2, [r1, #0]
 8006970:	d1db      	bne.n	800692a <_scanf_float+0x396>
 8006972:	eeb4 0b40 	vcmp.f64	d0, d0
 8006976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697a:	681e      	ldr	r6, [r3, #0]
 800697c:	d705      	bvc.n	800698a <_scanf_float+0x3f6>
 800697e:	4806      	ldr	r0, [pc, #24]	; (8006998 <_scanf_float+0x404>)
 8006980:	f000 f80c 	bl	800699c <nanf>
 8006984:	ed86 0a00 	vstr	s0, [r6]
 8006988:	e7d2      	b.n	8006930 <_scanf_float+0x39c>
 800698a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800698e:	e7f9      	b.n	8006984 <_scanf_float+0x3f0>
 8006990:	2500      	movs	r5, #0
 8006992:	e640      	b.n	8006616 <_scanf_float+0x82>
 8006994:	0800b2a2 	.word	0x0800b2a2
 8006998:	0800b6d3 	.word	0x0800b6d3

0800699c <nanf>:
 800699c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80069a4 <nanf+0x8>
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	7fc00000 	.word	0x7fc00000

080069a8 <siprintf>:
 80069a8:	b40e      	push	{r1, r2, r3}
 80069aa:	b500      	push	{lr}
 80069ac:	b09c      	sub	sp, #112	; 0x70
 80069ae:	ab1d      	add	r3, sp, #116	; 0x74
 80069b0:	9002      	str	r0, [sp, #8]
 80069b2:	9006      	str	r0, [sp, #24]
 80069b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b8:	4809      	ldr	r0, [pc, #36]	; (80069e0 <siprintf+0x38>)
 80069ba:	9107      	str	r1, [sp, #28]
 80069bc:	9104      	str	r1, [sp, #16]
 80069be:	4909      	ldr	r1, [pc, #36]	; (80069e4 <siprintf+0x3c>)
 80069c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c4:	9105      	str	r1, [sp, #20]
 80069c6:	6800      	ldr	r0, [r0, #0]
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	a902      	add	r1, sp, #8
 80069cc:	f002 fece 	bl	800976c <_svfiprintf_r>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	b01c      	add	sp, #112	; 0x70
 80069d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069dc:	b003      	add	sp, #12
 80069de:	4770      	bx	lr
 80069e0:	20000038 	.word	0x20000038
 80069e4:	ffff0208 	.word	0xffff0208

080069e8 <siscanf>:
 80069e8:	b40e      	push	{r1, r2, r3}
 80069ea:	b510      	push	{r4, lr}
 80069ec:	b09f      	sub	sp, #124	; 0x7c
 80069ee:	ac21      	add	r4, sp, #132	; 0x84
 80069f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80069f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80069f8:	9201      	str	r2, [sp, #4]
 80069fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80069fe:	9004      	str	r0, [sp, #16]
 8006a00:	9008      	str	r0, [sp, #32]
 8006a02:	f7f9 fc1d 	bl	8000240 <strlen>
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <siscanf+0x50>)
 8006a08:	9005      	str	r0, [sp, #20]
 8006a0a:	9009      	str	r0, [sp, #36]	; 0x24
 8006a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a0e:	480b      	ldr	r0, [pc, #44]	; (8006a3c <siscanf+0x54>)
 8006a10:	9a01      	ldr	r2, [sp, #4]
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9403      	str	r4, [sp, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	9311      	str	r3, [sp, #68]	; 0x44
 8006a1a:	9316      	str	r3, [sp, #88]	; 0x58
 8006a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	4623      	mov	r3, r4
 8006a28:	f002 fffa 	bl	8009a20 <__ssvfiscanf_r>
 8006a2c:	b01f      	add	sp, #124	; 0x7c
 8006a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a32:	b003      	add	sp, #12
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	08006a63 	.word	0x08006a63
 8006a3c:	20000038 	.word	0x20000038

08006a40 <__sread>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	f003 faae 	bl	8009fa8 <_read_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	bfab      	itete	ge
 8006a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a52:	89a3      	ldrhlt	r3, [r4, #12]
 8006a54:	181b      	addge	r3, r3, r0
 8006a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a5a:	bfac      	ite	ge
 8006a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a5e:	81a3      	strhlt	r3, [r4, #12]
 8006a60:	bd10      	pop	{r4, pc}

08006a62 <__seofread>:
 8006a62:	2000      	movs	r0, #0
 8006a64:	4770      	bx	lr

08006a66 <__swrite>:
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	461f      	mov	r7, r3
 8006a6c:	898b      	ldrh	r3, [r1, #12]
 8006a6e:	05db      	lsls	r3, r3, #23
 8006a70:	4605      	mov	r5, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4616      	mov	r6, r2
 8006a76:	d505      	bpl.n	8006a84 <__swrite+0x1e>
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f002 f868 	bl	8008b54 <_lseek_r>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	f000 beb7 	b.w	800780c <_write_r>

08006a9e <__sseek>:
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa6:	f002 f855 	bl	8008b54 <_lseek_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	bf15      	itete	ne
 8006ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aba:	81a3      	strheq	r3, [r4, #12]
 8006abc:	bf18      	it	ne
 8006abe:	81a3      	strhne	r3, [r4, #12]
 8006ac0:	bd10      	pop	{r4, pc}

08006ac2 <__sclose>:
 8006ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac6:	f000 beb3 	b.w	8007830 <_close_r>

08006aca <strncmp>:
 8006aca:	b510      	push	{r4, lr}
 8006acc:	b16a      	cbz	r2, 8006aea <strncmp+0x20>
 8006ace:	3901      	subs	r1, #1
 8006ad0:	1884      	adds	r4, r0, r2
 8006ad2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ad6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d103      	bne.n	8006ae6 <strncmp+0x1c>
 8006ade:	42a0      	cmp	r0, r4
 8006ae0:	d001      	beq.n	8006ae6 <strncmp+0x1c>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f5      	bne.n	8006ad2 <strncmp+0x8>
 8006ae6:	1a98      	subs	r0, r3, r2
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	4610      	mov	r0, r2
 8006aec:	e7fc      	b.n	8006ae8 <strncmp+0x1e>

08006aee <strncpy>:
 8006aee:	b510      	push	{r4, lr}
 8006af0:	3901      	subs	r1, #1
 8006af2:	4603      	mov	r3, r0
 8006af4:	b132      	cbz	r2, 8006b04 <strncpy+0x16>
 8006af6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006afa:	f803 4b01 	strb.w	r4, [r3], #1
 8006afe:	3a01      	subs	r2, #1
 8006b00:	2c00      	cmp	r4, #0
 8006b02:	d1f7      	bne.n	8006af4 <strncpy+0x6>
 8006b04:	441a      	add	r2, r3
 8006b06:	2100      	movs	r1, #0
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d100      	bne.n	8006b0e <strncpy+0x20>
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b12:	e7f9      	b.n	8006b08 <strncpy+0x1a>

08006b14 <sulp>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	ec45 4b10 	vmov	d0, r4, r5
 8006b20:	f002 fbbe 	bl	80092a0 <__ulp>
 8006b24:	b17e      	cbz	r6, 8006b46 <sulp+0x32>
 8006b26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd09      	ble.n	8006b46 <sulp+0x32>
 8006b32:	051b      	lsls	r3, r3, #20
 8006b34:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006b3e:	ec41 0b17 	vmov	d7, r0, r1
 8006b42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006b46:	bd70      	pop	{r4, r5, r6, pc}

08006b48 <_strtod_l>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	ed2d 8b0c 	vpush	{d8-d13}
 8006b50:	b09d      	sub	sp, #116	; 0x74
 8006b52:	461f      	mov	r7, r3
 8006b54:	2300      	movs	r3, #0
 8006b56:	9318      	str	r3, [sp, #96]	; 0x60
 8006b58:	4ba6      	ldr	r3, [pc, #664]	; (8006df4 <_strtod_l+0x2ac>)
 8006b5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	9308      	str	r3, [sp, #32]
 8006b60:	4604      	mov	r4, r0
 8006b62:	4618      	mov	r0, r3
 8006b64:	468a      	mov	sl, r1
 8006b66:	f7f9 fb6b 	bl	8000240 <strlen>
 8006b6a:	f04f 0800 	mov.w	r8, #0
 8006b6e:	4605      	mov	r5, r0
 8006b70:	f04f 0900 	mov.w	r9, #0
 8006b74:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	2a2b      	cmp	r2, #43	; 0x2b
 8006b7e:	d04d      	beq.n	8006c1c <_strtod_l+0xd4>
 8006b80:	d83a      	bhi.n	8006bf8 <_strtod_l+0xb0>
 8006b82:	2a0d      	cmp	r2, #13
 8006b84:	d833      	bhi.n	8006bee <_strtod_l+0xa6>
 8006b86:	2a08      	cmp	r2, #8
 8006b88:	d833      	bhi.n	8006bf2 <_strtod_l+0xaa>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	d03d      	beq.n	8006c0a <_strtod_l+0xc2>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006b94:	7833      	ldrb	r3, [r6, #0]
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	f040 80b6 	bne.w	8006d08 <_strtod_l+0x1c0>
 8006b9c:	7873      	ldrb	r3, [r6, #1]
 8006b9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ba2:	2b58      	cmp	r3, #88	; 0x58
 8006ba4:	d16d      	bne.n	8006c82 <_strtod_l+0x13a>
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	ab18      	add	r3, sp, #96	; 0x60
 8006bac:	9702      	str	r7, [sp, #8]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4a91      	ldr	r2, [pc, #580]	; (8006df8 <_strtod_l+0x2b0>)
 8006bb2:	ab19      	add	r3, sp, #100	; 0x64
 8006bb4:	a917      	add	r1, sp, #92	; 0x5c
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f001 fcc0 	bl	800853c <__gethex>
 8006bbc:	f010 0507 	ands.w	r5, r0, #7
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	d005      	beq.n	8006bd0 <_strtod_l+0x88>
 8006bc4:	2d06      	cmp	r5, #6
 8006bc6:	d12b      	bne.n	8006c20 <_strtod_l+0xd8>
 8006bc8:	3601      	adds	r6, #1
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 856e 	bne.w	80076b4 <_strtod_l+0xb6c>
 8006bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bda:	b1e3      	cbz	r3, 8006c16 <_strtod_l+0xce>
 8006bdc:	ec49 8b17 	vmov	d7, r8, r9
 8006be0:	eeb1 0b47 	vneg.f64	d0, d7
 8006be4:	b01d      	add	sp, #116	; 0x74
 8006be6:	ecbd 8b0c 	vpop	{d8-d13}
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	2a20      	cmp	r2, #32
 8006bf0:	d1cd      	bne.n	8006b8e <_strtod_l+0x46>
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006bf6:	e7bf      	b.n	8006b78 <_strtod_l+0x30>
 8006bf8:	2a2d      	cmp	r2, #45	; 0x2d
 8006bfa:	d1c8      	bne.n	8006b8e <_strtod_l+0x46>
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1c3      	bne.n	8006b92 <_strtod_l+0x4a>
 8006c0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c0c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 854d 	bne.w	80076b0 <_strtod_l+0xb68>
 8006c16:	ec49 8b10 	vmov	d0, r8, r9
 8006c1a:	e7e3      	b.n	8006be4 <_strtod_l+0x9c>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	e7ee      	b.n	8006bfe <_strtod_l+0xb6>
 8006c20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c22:	b13a      	cbz	r2, 8006c34 <_strtod_l+0xec>
 8006c24:	2135      	movs	r1, #53	; 0x35
 8006c26:	a81a      	add	r0, sp, #104	; 0x68
 8006c28:	f002 fc46 	bl	80094b8 <__copybits>
 8006c2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f002 f80a 	bl	8008c48 <_Bfree>
 8006c34:	3d01      	subs	r5, #1
 8006c36:	2d05      	cmp	r5, #5
 8006c38:	d807      	bhi.n	8006c4a <_strtod_l+0x102>
 8006c3a:	e8df f005 	tbb	[pc, r5]
 8006c3e:	0b0e      	.short	0x0b0e
 8006c40:	030e1d18 	.word	0x030e1d18
 8006c44:	f04f 0900 	mov.w	r9, #0
 8006c48:	46c8      	mov	r8, r9
 8006c4a:	073b      	lsls	r3, r7, #28
 8006c4c:	d5c0      	bpl.n	8006bd0 <_strtod_l+0x88>
 8006c4e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006c52:	e7bd      	b.n	8006bd0 <_strtod_l+0x88>
 8006c54:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006c58:	e7f7      	b.n	8006c4a <_strtod_l+0x102>
 8006c5a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006c5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006c6c:	e7ed      	b.n	8006c4a <_strtod_l+0x102>
 8006c6e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006dfc <_strtod_l+0x2b4>
 8006c72:	f04f 0800 	mov.w	r8, #0
 8006c76:	e7e8      	b.n	8006c4a <_strtod_l+0x102>
 8006c78:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006c7c:	f04f 38ff 	mov.w	r8, #4294967295
 8006c80:	e7e3      	b.n	8006c4a <_strtod_l+0x102>
 8006c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d0f9      	beq.n	8006c82 <_strtod_l+0x13a>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d09e      	beq.n	8006bd0 <_strtod_l+0x88>
 8006c92:	2301      	movs	r3, #1
 8006c94:	9306      	str	r3, [sp, #24]
 8006c96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c98:	930c      	str	r3, [sp, #48]	; 0x30
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca0:	461e      	mov	r6, r3
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ca6:	f890 b000 	ldrb.w	fp, [r0]
 8006caa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006cae:	b2d9      	uxtb	r1, r3
 8006cb0:	2909      	cmp	r1, #9
 8006cb2:	d92b      	bls.n	8006d0c <_strtod_l+0x1c4>
 8006cb4:	9908      	ldr	r1, [sp, #32]
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	f7ff ff07 	bl	8006aca <strncmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d035      	beq.n	8006d2c <_strtod_l+0x1e4>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	465a      	mov	r2, fp
 8006cc4:	4633      	mov	r3, r6
 8006cc6:	4683      	mov	fp, r0
 8006cc8:	4601      	mov	r1, r0
 8006cca:	2a65      	cmp	r2, #101	; 0x65
 8006ccc:	d001      	beq.n	8006cd2 <_strtod_l+0x18a>
 8006cce:	2a45      	cmp	r2, #69	; 0x45
 8006cd0:	d118      	bne.n	8006d04 <_strtod_l+0x1bc>
 8006cd2:	b91b      	cbnz	r3, 8006cdc <_strtod_l+0x194>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	4303      	orrs	r3, r0
 8006cd8:	d097      	beq.n	8006c0a <_strtod_l+0xc2>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006ce0:	f10a 0201 	add.w	r2, sl, #1
 8006ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ce6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006cea:	2a2b      	cmp	r2, #43	; 0x2b
 8006cec:	d077      	beq.n	8006dde <_strtod_l+0x296>
 8006cee:	2a2d      	cmp	r2, #45	; 0x2d
 8006cf0:	d07d      	beq.n	8006dee <_strtod_l+0x2a6>
 8006cf2:	f04f 0e00 	mov.w	lr, #0
 8006cf6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006cfa:	2d09      	cmp	r5, #9
 8006cfc:	f240 8084 	bls.w	8006e08 <_strtod_l+0x2c0>
 8006d00:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006d04:	2500      	movs	r5, #0
 8006d06:	e09f      	b.n	8006e48 <_strtod_l+0x300>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7c3      	b.n	8006c94 <_strtod_l+0x14c>
 8006d0c:	2e08      	cmp	r6, #8
 8006d0e:	bfd5      	itete	le
 8006d10:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006d12:	9904      	ldrgt	r1, [sp, #16]
 8006d14:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d18:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d1c:	f100 0001 	add.w	r0, r0, #1
 8006d20:	bfd4      	ite	le
 8006d22:	930a      	strle	r3, [sp, #40]	; 0x28
 8006d24:	9304      	strgt	r3, [sp, #16]
 8006d26:	3601      	adds	r6, #1
 8006d28:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d2a:	e7bb      	b.n	8006ca4 <_strtod_l+0x15c>
 8006d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d2e:	195a      	adds	r2, r3, r5
 8006d30:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d32:	5d5a      	ldrb	r2, [r3, r5]
 8006d34:	b3ae      	cbz	r6, 8006da2 <_strtod_l+0x25a>
 8006d36:	4683      	mov	fp, r0
 8006d38:	4633      	mov	r3, r6
 8006d3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d3e:	2909      	cmp	r1, #9
 8006d40:	d912      	bls.n	8006d68 <_strtod_l+0x220>
 8006d42:	2101      	movs	r1, #1
 8006d44:	e7c1      	b.n	8006cca <_strtod_l+0x182>
 8006d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d4c:	785a      	ldrb	r2, [r3, #1]
 8006d4e:	3001      	adds	r0, #1
 8006d50:	2a30      	cmp	r2, #48	; 0x30
 8006d52:	d0f8      	beq.n	8006d46 <_strtod_l+0x1fe>
 8006d54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	f200 84b0 	bhi.w	80076be <_strtod_l+0xb76>
 8006d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d60:	930c      	str	r3, [sp, #48]	; 0x30
 8006d62:	4683      	mov	fp, r0
 8006d64:	2000      	movs	r0, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	3a30      	subs	r2, #48	; 0x30
 8006d6a:	f100 0101 	add.w	r1, r0, #1
 8006d6e:	d012      	beq.n	8006d96 <_strtod_l+0x24e>
 8006d70:	448b      	add	fp, r1
 8006d72:	eb00 0c03 	add.w	ip, r0, r3
 8006d76:	4619      	mov	r1, r3
 8006d78:	250a      	movs	r5, #10
 8006d7a:	4561      	cmp	r1, ip
 8006d7c:	d113      	bne.n	8006da6 <_strtod_l+0x25e>
 8006d7e:	1819      	adds	r1, r3, r0
 8006d80:	2908      	cmp	r1, #8
 8006d82:	f103 0301 	add.w	r3, r3, #1
 8006d86:	4403      	add	r3, r0
 8006d88:	dc1d      	bgt.n	8006dc6 <_strtod_l+0x27e>
 8006d8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	fb01 2200 	mla	r2, r1, r0, r2
 8006d92:	920a      	str	r2, [sp, #40]	; 0x28
 8006d94:	2100      	movs	r1, #0
 8006d96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d98:	1c50      	adds	r0, r2, #1
 8006d9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d9c:	7852      	ldrb	r2, [r2, #1]
 8006d9e:	4608      	mov	r0, r1
 8006da0:	e7cb      	b.n	8006d3a <_strtod_l+0x1f2>
 8006da2:	4630      	mov	r0, r6
 8006da4:	e7d4      	b.n	8006d50 <_strtod_l+0x208>
 8006da6:	2908      	cmp	r1, #8
 8006da8:	dc04      	bgt.n	8006db4 <_strtod_l+0x26c>
 8006daa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006dac:	436f      	muls	r7, r5
 8006dae:	970a      	str	r7, [sp, #40]	; 0x28
 8006db0:	3101      	adds	r1, #1
 8006db2:	e7e2      	b.n	8006d7a <_strtod_l+0x232>
 8006db4:	f101 0e01 	add.w	lr, r1, #1
 8006db8:	f1be 0f10 	cmp.w	lr, #16
 8006dbc:	bfde      	ittt	le
 8006dbe:	9f04      	ldrle	r7, [sp, #16]
 8006dc0:	436f      	mulle	r7, r5
 8006dc2:	9704      	strle	r7, [sp, #16]
 8006dc4:	e7f4      	b.n	8006db0 <_strtod_l+0x268>
 8006dc6:	2b10      	cmp	r3, #16
 8006dc8:	bfdf      	itttt	le
 8006dca:	9804      	ldrle	r0, [sp, #16]
 8006dcc:	210a      	movle	r1, #10
 8006dce:	fb01 2200 	mlale	r2, r1, r0, r2
 8006dd2:	9204      	strle	r2, [sp, #16]
 8006dd4:	e7de      	b.n	8006d94 <_strtod_l+0x24c>
 8006dd6:	f04f 0b00 	mov.w	fp, #0
 8006dda:	2101      	movs	r1, #1
 8006ddc:	e77a      	b.n	8006cd4 <_strtod_l+0x18c>
 8006dde:	f04f 0e00 	mov.w	lr, #0
 8006de2:	f10a 0202 	add.w	r2, sl, #2
 8006de6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006de8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006dec:	e783      	b.n	8006cf6 <_strtod_l+0x1ae>
 8006dee:	f04f 0e01 	mov.w	lr, #1
 8006df2:	e7f6      	b.n	8006de2 <_strtod_l+0x29a>
 8006df4:	0800b4f8 	.word	0x0800b4f8
 8006df8:	0800b2a8 	.word	0x0800b2a8
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e02:	1c55      	adds	r5, r2, #1
 8006e04:	9517      	str	r5, [sp, #92]	; 0x5c
 8006e06:	7852      	ldrb	r2, [r2, #1]
 8006e08:	2a30      	cmp	r2, #48	; 0x30
 8006e0a:	d0f9      	beq.n	8006e00 <_strtod_l+0x2b8>
 8006e0c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006e10:	2d08      	cmp	r5, #8
 8006e12:	f63f af77 	bhi.w	8006d04 <_strtod_l+0x1bc>
 8006e16:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e1c:	9208      	str	r2, [sp, #32]
 8006e1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e20:	1c55      	adds	r5, r2, #1
 8006e22:	9517      	str	r5, [sp, #92]	; 0x5c
 8006e24:	7852      	ldrb	r2, [r2, #1]
 8006e26:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006e2a:	2f09      	cmp	r7, #9
 8006e2c:	d937      	bls.n	8006e9e <_strtod_l+0x356>
 8006e2e:	9f08      	ldr	r7, [sp, #32]
 8006e30:	1bed      	subs	r5, r5, r7
 8006e32:	2d08      	cmp	r5, #8
 8006e34:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006e38:	dc02      	bgt.n	8006e40 <_strtod_l+0x2f8>
 8006e3a:	4565      	cmp	r5, ip
 8006e3c:	bfa8      	it	ge
 8006e3e:	4665      	movge	r5, ip
 8006e40:	f1be 0f00 	cmp.w	lr, #0
 8006e44:	d000      	beq.n	8006e48 <_strtod_l+0x300>
 8006e46:	426d      	negs	r5, r5
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d14f      	bne.n	8006eec <_strtod_l+0x3a4>
 8006e4c:	9b06      	ldr	r3, [sp, #24]
 8006e4e:	4303      	orrs	r3, r0
 8006e50:	f47f aebe 	bne.w	8006bd0 <_strtod_l+0x88>
 8006e54:	2900      	cmp	r1, #0
 8006e56:	f47f aed8 	bne.w	8006c0a <_strtod_l+0xc2>
 8006e5a:	2a69      	cmp	r2, #105	; 0x69
 8006e5c:	d027      	beq.n	8006eae <_strtod_l+0x366>
 8006e5e:	dc24      	bgt.n	8006eaa <_strtod_l+0x362>
 8006e60:	2a49      	cmp	r2, #73	; 0x49
 8006e62:	d024      	beq.n	8006eae <_strtod_l+0x366>
 8006e64:	2a4e      	cmp	r2, #78	; 0x4e
 8006e66:	f47f aed0 	bne.w	8006c0a <_strtod_l+0xc2>
 8006e6a:	499b      	ldr	r1, [pc, #620]	; (80070d8 <_strtod_l+0x590>)
 8006e6c:	a817      	add	r0, sp, #92	; 0x5c
 8006e6e:	f001 fdbd 	bl	80089ec <__match>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	f43f aec9 	beq.w	8006c0a <_strtod_l+0xc2>
 8006e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b28      	cmp	r3, #40	; 0x28
 8006e7e:	d12d      	bne.n	8006edc <_strtod_l+0x394>
 8006e80:	4996      	ldr	r1, [pc, #600]	; (80070dc <_strtod_l+0x594>)
 8006e82:	aa1a      	add	r2, sp, #104	; 0x68
 8006e84:	a817      	add	r0, sp, #92	; 0x5c
 8006e86:	f001 fdc5 	bl	8008a14 <__hexnan>
 8006e8a:	2805      	cmp	r0, #5
 8006e8c:	d126      	bne.n	8006edc <_strtod_l+0x394>
 8006e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006e98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006e9c:	e698      	b.n	8006bd0 <_strtod_l+0x88>
 8006e9e:	250a      	movs	r5, #10
 8006ea0:	fb05 250c 	mla	r5, r5, ip, r2
 8006ea4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006ea8:	e7b9      	b.n	8006e1e <_strtod_l+0x2d6>
 8006eaa:	2a6e      	cmp	r2, #110	; 0x6e
 8006eac:	e7db      	b.n	8006e66 <_strtod_l+0x31e>
 8006eae:	498c      	ldr	r1, [pc, #560]	; (80070e0 <_strtod_l+0x598>)
 8006eb0:	a817      	add	r0, sp, #92	; 0x5c
 8006eb2:	f001 fd9b 	bl	80089ec <__match>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f aea7 	beq.w	8006c0a <_strtod_l+0xc2>
 8006ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ebe:	4989      	ldr	r1, [pc, #548]	; (80070e4 <_strtod_l+0x59c>)
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	a817      	add	r0, sp, #92	; 0x5c
 8006ec4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ec6:	f001 fd91 	bl	80089ec <__match>
 8006eca:	b910      	cbnz	r0, 8006ed2 <_strtod_l+0x38a>
 8006ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ed2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80070f8 <_strtod_l+0x5b0>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	e679      	b.n	8006bd0 <_strtod_l+0x88>
 8006edc:	4882      	ldr	r0, [pc, #520]	; (80070e8 <_strtod_l+0x5a0>)
 8006ede:	f003 f877 	bl	8009fd0 <nan>
 8006ee2:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006ee6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006eea:	e671      	b.n	8006bd0 <_strtod_l+0x88>
 8006eec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006ef0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006ef4:	eba5 020b 	sub.w	r2, r5, fp
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	bf08      	it	eq
 8006efc:	461e      	moveq	r6, r3
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f04:	9206      	str	r2, [sp, #24]
 8006f06:	461a      	mov	r2, r3
 8006f08:	bfa8      	it	ge
 8006f0a:	2210      	movge	r2, #16
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006f12:	dd0e      	ble.n	8006f32 <_strtod_l+0x3ea>
 8006f14:	4975      	ldr	r1, [pc, #468]	; (80070ec <_strtod_l+0x5a4>)
 8006f16:	eddd 7a04 	vldr	s15, [sp, #16]
 8006f1a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006f1e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006f22:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006f26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f2a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006f2e:	ec59 8b17 	vmov	r8, r9, d7
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	dc37      	bgt.n	8006fa6 <_strtod_l+0x45e>
 8006f36:	9906      	ldr	r1, [sp, #24]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	f43f ae49 	beq.w	8006bd0 <_strtod_l+0x88>
 8006f3e:	dd23      	ble.n	8006f88 <_strtod_l+0x440>
 8006f40:	2916      	cmp	r1, #22
 8006f42:	dc0b      	bgt.n	8006f5c <_strtod_l+0x414>
 8006f44:	4b69      	ldr	r3, [pc, #420]	; (80070ec <_strtod_l+0x5a4>)
 8006f46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006f4a:	ed93 7b00 	vldr	d7, [r3]
 8006f4e:	ec49 8b16 	vmov	d6, r8, r9
 8006f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f56:	ec59 8b17 	vmov	r8, r9, d7
 8006f5a:	e639      	b.n	8006bd0 <_strtod_l+0x88>
 8006f5c:	9806      	ldr	r0, [sp, #24]
 8006f5e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006f62:	4281      	cmp	r1, r0
 8006f64:	db1f      	blt.n	8006fa6 <_strtod_l+0x45e>
 8006f66:	4a61      	ldr	r2, [pc, #388]	; (80070ec <_strtod_l+0x5a4>)
 8006f68:	f1c3 030f 	rsb	r3, r3, #15
 8006f6c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006f70:	ed91 7b00 	vldr	d7, [r1]
 8006f74:	ec49 8b16 	vmov	d6, r8, r9
 8006f78:	1ac3      	subs	r3, r0, r3
 8006f7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f82:	ed92 6b00 	vldr	d6, [r2]
 8006f86:	e7e4      	b.n	8006f52 <_strtod_l+0x40a>
 8006f88:	9906      	ldr	r1, [sp, #24]
 8006f8a:	3116      	adds	r1, #22
 8006f8c:	db0b      	blt.n	8006fa6 <_strtod_l+0x45e>
 8006f8e:	4b57      	ldr	r3, [pc, #348]	; (80070ec <_strtod_l+0x5a4>)
 8006f90:	ebab 0505 	sub.w	r5, fp, r5
 8006f94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f98:	ed95 7b00 	vldr	d7, [r5]
 8006f9c:	ec49 8b16 	vmov	d6, r8, r9
 8006fa0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006fa4:	e7d7      	b.n	8006f56 <_strtod_l+0x40e>
 8006fa6:	9906      	ldr	r1, [sp, #24]
 8006fa8:	1a9a      	subs	r2, r3, r2
 8006faa:	440a      	add	r2, r1
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	dd74      	ble.n	800709a <_strtod_l+0x552>
 8006fb0:	f012 000f 	ands.w	r0, r2, #15
 8006fb4:	d00a      	beq.n	8006fcc <_strtod_l+0x484>
 8006fb6:	494d      	ldr	r1, [pc, #308]	; (80070ec <_strtod_l+0x5a4>)
 8006fb8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006fbc:	ed91 7b00 	vldr	d7, [r1]
 8006fc0:	ec49 8b16 	vmov	d6, r8, r9
 8006fc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fc8:	ec59 8b17 	vmov	r8, r9, d7
 8006fcc:	f032 020f 	bics.w	r2, r2, #15
 8006fd0:	d04f      	beq.n	8007072 <_strtod_l+0x52a>
 8006fd2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006fd6:	dd22      	ble.n	800701e <_strtod_l+0x4d6>
 8006fd8:	2500      	movs	r5, #0
 8006fda:	462e      	mov	r6, r5
 8006fdc:	950a      	str	r5, [sp, #40]	; 0x28
 8006fde:	462f      	mov	r7, r5
 8006fe0:	2322      	movs	r3, #34	; 0x22
 8006fe2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80070f8 <_strtod_l+0x5b0>
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	f04f 0800 	mov.w	r8, #0
 8006fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f43f adee 	beq.w	8006bd0 <_strtod_l+0x88>
 8006ff4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 fe26 	bl	8008c48 <_Bfree>
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 fe22 	bl	8008c48 <_Bfree>
 8007004:	4631      	mov	r1, r6
 8007006:	4620      	mov	r0, r4
 8007008:	f001 fe1e 	bl	8008c48 <_Bfree>
 800700c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800700e:	4620      	mov	r0, r4
 8007010:	f001 fe1a 	bl	8008c48 <_Bfree>
 8007014:	4629      	mov	r1, r5
 8007016:	4620      	mov	r0, r4
 8007018:	f001 fe16 	bl	8008c48 <_Bfree>
 800701c:	e5d8      	b.n	8006bd0 <_strtod_l+0x88>
 800701e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007022:	2000      	movs	r0, #0
 8007024:	4f32      	ldr	r7, [pc, #200]	; (80070f0 <_strtod_l+0x5a8>)
 8007026:	1112      	asrs	r2, r2, #4
 8007028:	4601      	mov	r1, r0
 800702a:	2a01      	cmp	r2, #1
 800702c:	dc24      	bgt.n	8007078 <_strtod_l+0x530>
 800702e:	b108      	cbz	r0, 8007034 <_strtod_l+0x4ec>
 8007030:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007034:	4a2e      	ldr	r2, [pc, #184]	; (80070f0 <_strtod_l+0x5a8>)
 8007036:	482f      	ldr	r0, [pc, #188]	; (80070f4 <_strtod_l+0x5ac>)
 8007038:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800703c:	ed91 7b00 	vldr	d7, [r1]
 8007040:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007044:	ec49 8b16 	vmov	d6, r8, r9
 8007048:	ee27 7b06 	vmul.f64	d7, d7, d6
 800704c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007050:	9905      	ldr	r1, [sp, #20]
 8007052:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <_strtod_l+0x5b0>)
 8007054:	400a      	ands	r2, r1
 8007056:	4282      	cmp	r2, r0
 8007058:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800705c:	d8bc      	bhi.n	8006fd8 <_strtod_l+0x490>
 800705e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007062:	4282      	cmp	r2, r0
 8007064:	bf86      	itte	hi
 8007066:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80070fc <_strtod_l+0x5b4>
 800706a:	f04f 38ff 	movhi.w	r8, #4294967295
 800706e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007072:	2200      	movs	r2, #0
 8007074:	9204      	str	r2, [sp, #16]
 8007076:	e07f      	b.n	8007178 <_strtod_l+0x630>
 8007078:	f012 0f01 	tst.w	r2, #1
 800707c:	d00a      	beq.n	8007094 <_strtod_l+0x54c>
 800707e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8007082:	ed90 7b00 	vldr	d7, [r0]
 8007086:	ed9d 6b04 	vldr	d6, [sp, #16]
 800708a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800708e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007092:	2001      	movs	r0, #1
 8007094:	3101      	adds	r1, #1
 8007096:	1052      	asrs	r2, r2, #1
 8007098:	e7c7      	b.n	800702a <_strtod_l+0x4e2>
 800709a:	d0ea      	beq.n	8007072 <_strtod_l+0x52a>
 800709c:	4252      	negs	r2, r2
 800709e:	f012 000f 	ands.w	r0, r2, #15
 80070a2:	d00a      	beq.n	80070ba <_strtod_l+0x572>
 80070a4:	4911      	ldr	r1, [pc, #68]	; (80070ec <_strtod_l+0x5a4>)
 80070a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80070aa:	ed91 7b00 	vldr	d7, [r1]
 80070ae:	ec49 8b16 	vmov	d6, r8, r9
 80070b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80070b6:	ec59 8b17 	vmov	r8, r9, d7
 80070ba:	1112      	asrs	r2, r2, #4
 80070bc:	d0d9      	beq.n	8007072 <_strtod_l+0x52a>
 80070be:	2a1f      	cmp	r2, #31
 80070c0:	dd1e      	ble.n	8007100 <_strtod_l+0x5b8>
 80070c2:	2500      	movs	r5, #0
 80070c4:	462e      	mov	r6, r5
 80070c6:	950a      	str	r5, [sp, #40]	; 0x28
 80070c8:	462f      	mov	r7, r5
 80070ca:	2322      	movs	r3, #34	; 0x22
 80070cc:	f04f 0800 	mov.w	r8, #0
 80070d0:	f04f 0900 	mov.w	r9, #0
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	e789      	b.n	8006fec <_strtod_l+0x4a4>
 80070d8:	0800b27d 	.word	0x0800b27d
 80070dc:	0800b2bc 	.word	0x0800b2bc
 80070e0:	0800b275 	.word	0x0800b275
 80070e4:	0800b3fc 	.word	0x0800b3fc
 80070e8:	0800b6d3 	.word	0x0800b6d3
 80070ec:	0800b598 	.word	0x0800b598
 80070f0:	0800b570 	.word	0x0800b570
 80070f4:	7ca00000 	.word	0x7ca00000
 80070f8:	7ff00000 	.word	0x7ff00000
 80070fc:	7fefffff 	.word	0x7fefffff
 8007100:	f012 0110 	ands.w	r1, r2, #16
 8007104:	bf18      	it	ne
 8007106:	216a      	movne	r1, #106	; 0x6a
 8007108:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800710c:	9104      	str	r1, [sp, #16]
 800710e:	49c0      	ldr	r1, [pc, #768]	; (8007410 <_strtod_l+0x8c8>)
 8007110:	2000      	movs	r0, #0
 8007112:	07d7      	lsls	r7, r2, #31
 8007114:	d508      	bpl.n	8007128 <_strtod_l+0x5e0>
 8007116:	ed9d 6b08 	vldr	d6, [sp, #32]
 800711a:	ed91 7b00 	vldr	d7, [r1]
 800711e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007122:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007126:	2001      	movs	r0, #1
 8007128:	1052      	asrs	r2, r2, #1
 800712a:	f101 0108 	add.w	r1, r1, #8
 800712e:	d1f0      	bne.n	8007112 <_strtod_l+0x5ca>
 8007130:	b108      	cbz	r0, 8007136 <_strtod_l+0x5ee>
 8007132:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007136:	9a04      	ldr	r2, [sp, #16]
 8007138:	b1ba      	cbz	r2, 800716a <_strtod_l+0x622>
 800713a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800713e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007142:	2a00      	cmp	r2, #0
 8007144:	4649      	mov	r1, r9
 8007146:	dd10      	ble.n	800716a <_strtod_l+0x622>
 8007148:	2a1f      	cmp	r2, #31
 800714a:	f340 8132 	ble.w	80073b2 <_strtod_l+0x86a>
 800714e:	2a34      	cmp	r2, #52	; 0x34
 8007150:	bfde      	ittt	le
 8007152:	3a20      	suble	r2, #32
 8007154:	f04f 30ff 	movle.w	r0, #4294967295
 8007158:	fa00 f202 	lslle.w	r2, r0, r2
 800715c:	f04f 0800 	mov.w	r8, #0
 8007160:	bfcc      	ite	gt
 8007162:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007166:	ea02 0901 	andle.w	r9, r2, r1
 800716a:	ec49 8b17 	vmov	d7, r8, r9
 800716e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	d0a4      	beq.n	80070c2 <_strtod_l+0x57a>
 8007178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717a:	9200      	str	r2, [sp, #0]
 800717c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800717e:	4632      	mov	r2, r6
 8007180:	4620      	mov	r0, r4
 8007182:	f001 fdcd 	bl	8008d20 <__s2b>
 8007186:	900a      	str	r0, [sp, #40]	; 0x28
 8007188:	2800      	cmp	r0, #0
 800718a:	f43f af25 	beq.w	8006fd8 <_strtod_l+0x490>
 800718e:	9b06      	ldr	r3, [sp, #24]
 8007190:	ebab 0505 	sub.w	r5, fp, r5
 8007194:	2b00      	cmp	r3, #0
 8007196:	bfb4      	ite	lt
 8007198:	462b      	movlt	r3, r5
 800719a:	2300      	movge	r3, #0
 800719c:	930c      	str	r3, [sp, #48]	; 0x30
 800719e:	9b06      	ldr	r3, [sp, #24]
 80071a0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80073f8 <_strtod_l+0x8b0>
 80071a4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007400 <_strtod_l+0x8b8>
 80071a8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007408 <_strtod_l+0x8c0>
 80071ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071b0:	2500      	movs	r5, #0
 80071b2:	9312      	str	r3, [sp, #72]	; 0x48
 80071b4:	462e      	mov	r6, r5
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	4620      	mov	r0, r4
 80071ba:	6859      	ldr	r1, [r3, #4]
 80071bc:	f001 fd04 	bl	8008bc8 <_Balloc>
 80071c0:	4607      	mov	r7, r0
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f43f af0c 	beq.w	8006fe0 <_strtod_l+0x498>
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	f103 010c 	add.w	r1, r3, #12
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	300c      	adds	r0, #12
 80071d6:	f001 fce9 	bl	8008bac <memcpy>
 80071da:	ec49 8b10 	vmov	d0, r8, r9
 80071de:	aa1a      	add	r2, sp, #104	; 0x68
 80071e0:	a919      	add	r1, sp, #100	; 0x64
 80071e2:	4620      	mov	r0, r4
 80071e4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80071e8:	f002 f8d6 	bl	8009398 <__d2b>
 80071ec:	9018      	str	r0, [sp, #96]	; 0x60
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f43f aef6 	beq.w	8006fe0 <_strtod_l+0x498>
 80071f4:	2101      	movs	r1, #1
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 fe2c 	bl	8008e54 <__i2b>
 80071fc:	4606      	mov	r6, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f aeee 	beq.w	8006fe0 <_strtod_l+0x498>
 8007204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007206:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfab      	itete	ge
 800720c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800720e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007210:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007214:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007218:	bfac      	ite	ge
 800721a:	eb03 0b02 	addge.w	fp, r3, r2
 800721e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	440b      	add	r3, r1
 8007228:	4a7a      	ldr	r2, [pc, #488]	; (8007414 <_strtod_l+0x8cc>)
 800722a:	3b01      	subs	r3, #1
 800722c:	4293      	cmp	r3, r2
 800722e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007232:	f280 80d1 	bge.w	80073d8 <_strtod_l+0x890>
 8007236:	1ad2      	subs	r2, r2, r3
 8007238:	2a1f      	cmp	r2, #31
 800723a:	eba1 0102 	sub.w	r1, r1, r2
 800723e:	f04f 0001 	mov.w	r0, #1
 8007242:	f300 80bd 	bgt.w	80073c0 <_strtod_l+0x878>
 8007246:	fa00 f302 	lsl.w	r3, r0, r2
 800724a:	930e      	str	r3, [sp, #56]	; 0x38
 800724c:	2300      	movs	r3, #0
 800724e:	930d      	str	r3, [sp, #52]	; 0x34
 8007250:	eb0b 0301 	add.w	r3, fp, r1
 8007254:	9a04      	ldr	r2, [sp, #16]
 8007256:	459b      	cmp	fp, r3
 8007258:	448a      	add	sl, r1
 800725a:	4492      	add	sl, r2
 800725c:	465a      	mov	r2, fp
 800725e:	bfa8      	it	ge
 8007260:	461a      	movge	r2, r3
 8007262:	4552      	cmp	r2, sl
 8007264:	bfa8      	it	ge
 8007266:	4652      	movge	r2, sl
 8007268:	2a00      	cmp	r2, #0
 800726a:	bfc2      	ittt	gt
 800726c:	1a9b      	subgt	r3, r3, r2
 800726e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007272:	ebab 0b02 	subgt.w	fp, fp, r2
 8007276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007278:	2a00      	cmp	r2, #0
 800727a:	dd18      	ble.n	80072ae <_strtod_l+0x766>
 800727c:	4631      	mov	r1, r6
 800727e:	4620      	mov	r0, r4
 8007280:	9315      	str	r3, [sp, #84]	; 0x54
 8007282:	f001 fea3 	bl	8008fcc <__pow5mult>
 8007286:	4606      	mov	r6, r0
 8007288:	2800      	cmp	r0, #0
 800728a:	f43f aea9 	beq.w	8006fe0 <_strtod_l+0x498>
 800728e:	4601      	mov	r1, r0
 8007290:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007292:	4620      	mov	r0, r4
 8007294:	f001 fdf4 	bl	8008e80 <__multiply>
 8007298:	9014      	str	r0, [sp, #80]	; 0x50
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aea0 	beq.w	8006fe0 <_strtod_l+0x498>
 80072a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072a2:	4620      	mov	r0, r4
 80072a4:	f001 fcd0 	bl	8008c48 <_Bfree>
 80072a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072ac:	9218      	str	r2, [sp, #96]	; 0x60
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f300 8097 	bgt.w	80073e2 <_strtod_l+0x89a>
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd08      	ble.n	80072cc <_strtod_l+0x784>
 80072ba:	4639      	mov	r1, r7
 80072bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072be:	4620      	mov	r0, r4
 80072c0:	f001 fe84 	bl	8008fcc <__pow5mult>
 80072c4:	4607      	mov	r7, r0
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f43f ae8a 	beq.w	8006fe0 <_strtod_l+0x498>
 80072cc:	f1ba 0f00 	cmp.w	sl, #0
 80072d0:	dd08      	ble.n	80072e4 <_strtod_l+0x79c>
 80072d2:	4639      	mov	r1, r7
 80072d4:	4652      	mov	r2, sl
 80072d6:	4620      	mov	r0, r4
 80072d8:	f001 fed2 	bl	8009080 <__lshift>
 80072dc:	4607      	mov	r7, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	f43f ae7e 	beq.w	8006fe0 <_strtod_l+0x498>
 80072e4:	f1bb 0f00 	cmp.w	fp, #0
 80072e8:	dd08      	ble.n	80072fc <_strtod_l+0x7b4>
 80072ea:	4631      	mov	r1, r6
 80072ec:	465a      	mov	r2, fp
 80072ee:	4620      	mov	r0, r4
 80072f0:	f001 fec6 	bl	8009080 <__lshift>
 80072f4:	4606      	mov	r6, r0
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f ae72 	beq.w	8006fe0 <_strtod_l+0x498>
 80072fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072fe:	463a      	mov	r2, r7
 8007300:	4620      	mov	r0, r4
 8007302:	f001 ff45 	bl	8009190 <__mdiff>
 8007306:	4605      	mov	r5, r0
 8007308:	2800      	cmp	r0, #0
 800730a:	f43f ae69 	beq.w	8006fe0 <_strtod_l+0x498>
 800730e:	2300      	movs	r3, #0
 8007310:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007314:	60c3      	str	r3, [r0, #12]
 8007316:	4631      	mov	r1, r6
 8007318:	f001 ff1e 	bl	8009158 <__mcmp>
 800731c:	2800      	cmp	r0, #0
 800731e:	da7f      	bge.n	8007420 <_strtod_l+0x8d8>
 8007320:	ea5a 0308 	orrs.w	r3, sl, r8
 8007324:	f040 80a5 	bne.w	8007472 <_strtod_l+0x92a>
 8007328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 80a0 	bne.w	8007472 <_strtod_l+0x92a>
 8007332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007336:	0d1b      	lsrs	r3, r3, #20
 8007338:	051b      	lsls	r3, r3, #20
 800733a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800733e:	f240 8098 	bls.w	8007472 <_strtod_l+0x92a>
 8007342:	696b      	ldr	r3, [r5, #20]
 8007344:	b91b      	cbnz	r3, 800734e <_strtod_l+0x806>
 8007346:	692b      	ldr	r3, [r5, #16]
 8007348:	2b01      	cmp	r3, #1
 800734a:	f340 8092 	ble.w	8007472 <_strtod_l+0x92a>
 800734e:	4629      	mov	r1, r5
 8007350:	2201      	movs	r2, #1
 8007352:	4620      	mov	r0, r4
 8007354:	f001 fe94 	bl	8009080 <__lshift>
 8007358:	4631      	mov	r1, r6
 800735a:	4605      	mov	r5, r0
 800735c:	f001 fefc 	bl	8009158 <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	f340 8086 	ble.w	8007472 <_strtod_l+0x92a>
 8007366:	9904      	ldr	r1, [sp, #16]
 8007368:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <_strtod_l+0x8d0>)
 800736a:	464b      	mov	r3, r9
 800736c:	2900      	cmp	r1, #0
 800736e:	f000 80a1 	beq.w	80074b4 <_strtod_l+0x96c>
 8007372:	ea02 0109 	and.w	r1, r2, r9
 8007376:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800737a:	f300 809b 	bgt.w	80074b4 <_strtod_l+0x96c>
 800737e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007382:	f77f aea2 	ble.w	80070ca <_strtod_l+0x582>
 8007386:	4a25      	ldr	r2, [pc, #148]	; (800741c <_strtod_l+0x8d4>)
 8007388:	2300      	movs	r3, #0
 800738a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800738e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007392:	ec49 8b17 	vmov	d7, r8, r9
 8007396:	ee27 7b06 	vmul.f64	d7, d7, d6
 800739a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800739e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	bf08      	it	eq
 80073a6:	2322      	moveq	r3, #34	; 0x22
 80073a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073ac:	bf08      	it	eq
 80073ae:	6023      	streq	r3, [r4, #0]
 80073b0:	e620      	b.n	8006ff4 <_strtod_l+0x4ac>
 80073b2:	f04f 31ff 	mov.w	r1, #4294967295
 80073b6:	fa01 f202 	lsl.w	r2, r1, r2
 80073ba:	ea02 0808 	and.w	r8, r2, r8
 80073be:	e6d4      	b.n	800716a <_strtod_l+0x622>
 80073c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80073c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80073c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80073cc:	33e2      	adds	r3, #226	; 0xe2
 80073ce:	fa00 f303 	lsl.w	r3, r0, r3
 80073d2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80073d6:	e73b      	b.n	8007250 <_strtod_l+0x708>
 80073d8:	2000      	movs	r0, #0
 80073da:	2301      	movs	r3, #1
 80073dc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80073e0:	e736      	b.n	8007250 <_strtod_l+0x708>
 80073e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073e4:	461a      	mov	r2, r3
 80073e6:	4620      	mov	r0, r4
 80073e8:	f001 fe4a 	bl	8009080 <__lshift>
 80073ec:	9018      	str	r0, [sp, #96]	; 0x60
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f47f af60 	bne.w	80072b4 <_strtod_l+0x76c>
 80073f4:	e5f4      	b.n	8006fe0 <_strtod_l+0x498>
 80073f6:	bf00      	nop
 80073f8:	94a03595 	.word	0x94a03595
 80073fc:	3fcfffff 	.word	0x3fcfffff
 8007400:	94a03595 	.word	0x94a03595
 8007404:	3fdfffff 	.word	0x3fdfffff
 8007408:	35afe535 	.word	0x35afe535
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	0800b2d0 	.word	0x0800b2d0
 8007414:	fffffc02 	.word	0xfffffc02
 8007418:	7ff00000 	.word	0x7ff00000
 800741c:	39500000 	.word	0x39500000
 8007420:	46cb      	mov	fp, r9
 8007422:	d165      	bne.n	80074f0 <_strtod_l+0x9a8>
 8007424:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007428:	f1ba 0f00 	cmp.w	sl, #0
 800742c:	d02a      	beq.n	8007484 <_strtod_l+0x93c>
 800742e:	4aaa      	ldr	r2, [pc, #680]	; (80076d8 <_strtod_l+0xb90>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d12b      	bne.n	800748c <_strtod_l+0x944>
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	4641      	mov	r1, r8
 8007438:	b1fb      	cbz	r3, 800747a <_strtod_l+0x932>
 800743a:	4aa8      	ldr	r2, [pc, #672]	; (80076dc <_strtod_l+0xb94>)
 800743c:	ea09 0202 	and.w	r2, r9, r2
 8007440:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	d81a      	bhi.n	8007480 <_strtod_l+0x938>
 800744a:	0d12      	lsrs	r2, r2, #20
 800744c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007450:	fa00 f303 	lsl.w	r3, r0, r3
 8007454:	4299      	cmp	r1, r3
 8007456:	d119      	bne.n	800748c <_strtod_l+0x944>
 8007458:	4ba1      	ldr	r3, [pc, #644]	; (80076e0 <_strtod_l+0xb98>)
 800745a:	459b      	cmp	fp, r3
 800745c:	d102      	bne.n	8007464 <_strtod_l+0x91c>
 800745e:	3101      	adds	r1, #1
 8007460:	f43f adbe 	beq.w	8006fe0 <_strtod_l+0x498>
 8007464:	4b9d      	ldr	r3, [pc, #628]	; (80076dc <_strtod_l+0xb94>)
 8007466:	ea0b 0303 	and.w	r3, fp, r3
 800746a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d186      	bne.n	8007386 <_strtod_l+0x83e>
 8007478:	e5bc      	b.n	8006ff4 <_strtod_l+0x4ac>
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	e7e9      	b.n	8007454 <_strtod_l+0x90c>
 8007480:	4603      	mov	r3, r0
 8007482:	e7e7      	b.n	8007454 <_strtod_l+0x90c>
 8007484:	ea53 0308 	orrs.w	r3, r3, r8
 8007488:	f43f af6d 	beq.w	8007366 <_strtod_l+0x81e>
 800748c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748e:	b1db      	cbz	r3, 80074c8 <_strtod_l+0x980>
 8007490:	ea13 0f0b 	tst.w	r3, fp
 8007494:	d0ed      	beq.n	8007472 <_strtod_l+0x92a>
 8007496:	9a04      	ldr	r2, [sp, #16]
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f1ba 0f00 	cmp.w	sl, #0
 80074a0:	d016      	beq.n	80074d0 <_strtod_l+0x988>
 80074a2:	f7ff fb37 	bl	8006b14 <sulp>
 80074a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80074aa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80074ae:	ec59 8b17 	vmov	r8, r9, d7
 80074b2:	e7de      	b.n	8007472 <_strtod_l+0x92a>
 80074b4:	4013      	ands	r3, r2
 80074b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80074ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80074be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80074c2:	f04f 38ff 	mov.w	r8, #4294967295
 80074c6:	e7d4      	b.n	8007472 <_strtod_l+0x92a>
 80074c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ca:	ea13 0f08 	tst.w	r3, r8
 80074ce:	e7e1      	b.n	8007494 <_strtod_l+0x94c>
 80074d0:	f7ff fb20 	bl	8006b14 <sulp>
 80074d4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80074d8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80074dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80074ec:	d1c1      	bne.n	8007472 <_strtod_l+0x92a>
 80074ee:	e5ec      	b.n	80070ca <_strtod_l+0x582>
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	f001 ffac 	bl	8009450 <__ratio>
 80074f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80074fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d867      	bhi.n	80075d6 <_strtod_l+0xa8e>
 8007506:	f1ba 0f00 	cmp.w	sl, #0
 800750a:	d044      	beq.n	8007596 <_strtod_l+0xa4e>
 800750c:	4b75      	ldr	r3, [pc, #468]	; (80076e4 <_strtod_l+0xb9c>)
 800750e:	2200      	movs	r2, #0
 8007510:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007514:	4971      	ldr	r1, [pc, #452]	; (80076dc <_strtod_l+0xb94>)
 8007516:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80076f0 <_strtod_l+0xba8>
 800751a:	ea0b 0001 	and.w	r0, fp, r1
 800751e:	4560      	cmp	r0, ip
 8007520:	900d      	str	r0, [sp, #52]	; 0x34
 8007522:	f040 808b 	bne.w	800763c <_strtod_l+0xaf4>
 8007526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800752a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800752e:	ec49 8b10 	vmov	d0, r8, r9
 8007532:	ec43 2b1c 	vmov	d12, r2, r3
 8007536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800753a:	f001 feb1 	bl	80092a0 <__ulp>
 800753e:	ec49 8b1d 	vmov	d13, r8, r9
 8007542:	eeac db00 	vfma.f64	d13, d12, d0
 8007546:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800754a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800754c:	4963      	ldr	r1, [pc, #396]	; (80076dc <_strtod_l+0xb94>)
 800754e:	4a66      	ldr	r2, [pc, #408]	; (80076e8 <_strtod_l+0xba0>)
 8007550:	4019      	ands	r1, r3
 8007552:	4291      	cmp	r1, r2
 8007554:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007558:	d947      	bls.n	80075ea <_strtod_l+0xaa2>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007560:	4293      	cmp	r3, r2
 8007562:	d103      	bne.n	800756c <_strtod_l+0xa24>
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	3301      	adds	r3, #1
 8007568:	f43f ad3a 	beq.w	8006fe0 <_strtod_l+0x498>
 800756c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80076e0 <_strtod_l+0xb98>
 8007570:	f04f 38ff 	mov.w	r8, #4294967295
 8007574:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007576:	4620      	mov	r0, r4
 8007578:	f001 fb66 	bl	8008c48 <_Bfree>
 800757c:	4639      	mov	r1, r7
 800757e:	4620      	mov	r0, r4
 8007580:	f001 fb62 	bl	8008c48 <_Bfree>
 8007584:	4631      	mov	r1, r6
 8007586:	4620      	mov	r0, r4
 8007588:	f001 fb5e 	bl	8008c48 <_Bfree>
 800758c:	4629      	mov	r1, r5
 800758e:	4620      	mov	r0, r4
 8007590:	f001 fb5a 	bl	8008c48 <_Bfree>
 8007594:	e60f      	b.n	80071b6 <_strtod_l+0x66e>
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	d112      	bne.n	80075c2 <_strtod_l+0xa7a>
 800759c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075a0:	b9b3      	cbnz	r3, 80075d0 <_strtod_l+0xa88>
 80075a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80075a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80075b2:	d401      	bmi.n	80075b8 <_strtod_l+0xa70>
 80075b4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80075b8:	eeb1 7b48 	vneg.f64	d7, d8
 80075bc:	ec53 2b17 	vmov	r2, r3, d7
 80075c0:	e7a8      	b.n	8007514 <_strtod_l+0x9cc>
 80075c2:	f1b8 0f01 	cmp.w	r8, #1
 80075c6:	d103      	bne.n	80075d0 <_strtod_l+0xa88>
 80075c8:	f1b9 0f00 	cmp.w	r9, #0
 80075cc:	f43f ad7d 	beq.w	80070ca <_strtod_l+0x582>
 80075d0:	4b46      	ldr	r3, [pc, #280]	; (80076ec <_strtod_l+0xba4>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	e79c      	b.n	8007510 <_strtod_l+0x9c8>
 80075d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80075da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80075de:	f1ba 0f00 	cmp.w	sl, #0
 80075e2:	d0e9      	beq.n	80075b8 <_strtod_l+0xa70>
 80075e4:	ec53 2b18 	vmov	r2, r3, d8
 80075e8:	e794      	b.n	8007514 <_strtod_l+0x9cc>
 80075ea:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1bf      	bne.n	8007574 <_strtod_l+0xa2c>
 80075f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075fa:	0d1b      	lsrs	r3, r3, #20
 80075fc:	051b      	lsls	r3, r3, #20
 80075fe:	429a      	cmp	r2, r3
 8007600:	d1b8      	bne.n	8007574 <_strtod_l+0xa2c>
 8007602:	ec51 0b18 	vmov	r0, r1, d8
 8007606:	f7f9 f847 	bl	8000698 <__aeabi_d2lz>
 800760a:	f7f8 ffff 	bl	800060c <__aeabi_l2d>
 800760e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007612:	ec41 0b17 	vmov	d7, r0, r1
 8007616:	ea43 0308 	orr.w	r3, r3, r8
 800761a:	ea53 030a 	orrs.w	r3, r3, sl
 800761e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007622:	d03e      	beq.n	80076a2 <_strtod_l+0xb5a>
 8007624:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	f53f ace2 	bmi.w	8006ff4 <_strtod_l+0x4ac>
 8007630:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007638:	dd9c      	ble.n	8007574 <_strtod_l+0xa2c>
 800763a:	e4db      	b.n	8006ff4 <_strtod_l+0x4ac>
 800763c:	9904      	ldr	r1, [sp, #16]
 800763e:	b301      	cbz	r1, 8007682 <_strtod_l+0xb3a>
 8007640:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007642:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007646:	d81c      	bhi.n	8007682 <_strtod_l+0xb3a>
 8007648:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80076d0 <_strtod_l+0xb88>
 800764c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007654:	d811      	bhi.n	800767a <_strtod_l+0xb32>
 8007656:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800765a:	ee18 3a10 	vmov	r3, s16
 800765e:	2b01      	cmp	r3, #1
 8007660:	bf38      	it	cc
 8007662:	2301      	movcc	r3, #1
 8007664:	ee08 3a10 	vmov	s16, r3
 8007668:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800766c:	f1ba 0f00 	cmp.w	sl, #0
 8007670:	d114      	bne.n	800769c <_strtod_l+0xb54>
 8007672:	eeb1 7b48 	vneg.f64	d7, d8
 8007676:	ec53 2b17 	vmov	r2, r3, d7
 800767a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800767c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007680:	1a0b      	subs	r3, r1, r0
 8007682:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007686:	ec43 2b1c 	vmov	d12, r2, r3
 800768a:	f001 fe09 	bl	80092a0 <__ulp>
 800768e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007692:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007696:	ec59 8b17 	vmov	r8, r9, d7
 800769a:	e7a8      	b.n	80075ee <_strtod_l+0xaa6>
 800769c:	ec53 2b18 	vmov	r2, r3, d8
 80076a0:	e7eb      	b.n	800767a <_strtod_l+0xb32>
 80076a2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80076a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076aa:	f57f af63 	bpl.w	8007574 <_strtod_l+0xa2c>
 80076ae:	e4a1      	b.n	8006ff4 <_strtod_l+0x4ac>
 80076b0:	2300      	movs	r3, #0
 80076b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	f7ff ba8d 	b.w	8006bd8 <_strtod_l+0x90>
 80076be:	2a65      	cmp	r2, #101	; 0x65
 80076c0:	f43f ab89 	beq.w	8006dd6 <_strtod_l+0x28e>
 80076c4:	2a45      	cmp	r2, #69	; 0x45
 80076c6:	f43f ab86 	beq.w	8006dd6 <_strtod_l+0x28e>
 80076ca:	2101      	movs	r1, #1
 80076cc:	f7ff bbbe 	b.w	8006e4c <_strtod_l+0x304>
 80076d0:	ffc00000 	.word	0xffc00000
 80076d4:	41dfffff 	.word	0x41dfffff
 80076d8:	000fffff 	.word	0x000fffff
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	7fefffff 	.word	0x7fefffff
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	7c9fffff 	.word	0x7c9fffff
 80076ec:	bff00000 	.word	0xbff00000
 80076f0:	7fe00000 	.word	0x7fe00000

080076f4 <_strtod_r>:
 80076f4:	4b01      	ldr	r3, [pc, #4]	; (80076fc <_strtod_r+0x8>)
 80076f6:	f7ff ba27 	b.w	8006b48 <_strtod_l>
 80076fa:	bf00      	nop
 80076fc:	200000a0 	.word	0x200000a0

08007700 <_strtol_l.isra.0>:
 8007700:	2b01      	cmp	r3, #1
 8007702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007706:	d001      	beq.n	800770c <_strtol_l.isra.0+0xc>
 8007708:	2b24      	cmp	r3, #36	; 0x24
 800770a:	d906      	bls.n	800771a <_strtol_l.isra.0+0x1a>
 800770c:	f7fe face 	bl	8005cac <__errno>
 8007710:	2316      	movs	r3, #22
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	2000      	movs	r0, #0
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	4f3a      	ldr	r7, [pc, #232]	; (8007804 <_strtol_l.isra.0+0x104>)
 800771c:	468e      	mov	lr, r1
 800771e:	4676      	mov	r6, lr
 8007720:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007724:	5de5      	ldrb	r5, [r4, r7]
 8007726:	f015 0508 	ands.w	r5, r5, #8
 800772a:	d1f8      	bne.n	800771e <_strtol_l.isra.0+0x1e>
 800772c:	2c2d      	cmp	r4, #45	; 0x2d
 800772e:	d134      	bne.n	800779a <_strtol_l.isra.0+0x9a>
 8007730:	f89e 4000 	ldrb.w	r4, [lr]
 8007734:	f04f 0801 	mov.w	r8, #1
 8007738:	f106 0e02 	add.w	lr, r6, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d05c      	beq.n	80077fa <_strtol_l.isra.0+0xfa>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d10c      	bne.n	800775e <_strtol_l.isra.0+0x5e>
 8007744:	2c30      	cmp	r4, #48	; 0x30
 8007746:	d10a      	bne.n	800775e <_strtol_l.isra.0+0x5e>
 8007748:	f89e 4000 	ldrb.w	r4, [lr]
 800774c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007750:	2c58      	cmp	r4, #88	; 0x58
 8007752:	d14d      	bne.n	80077f0 <_strtol_l.isra.0+0xf0>
 8007754:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007758:	2310      	movs	r3, #16
 800775a:	f10e 0e02 	add.w	lr, lr, #2
 800775e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007762:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007766:	2600      	movs	r6, #0
 8007768:	fbbc f9f3 	udiv	r9, ip, r3
 800776c:	4635      	mov	r5, r6
 800776e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007772:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007776:	2f09      	cmp	r7, #9
 8007778:	d818      	bhi.n	80077ac <_strtol_l.isra.0+0xac>
 800777a:	463c      	mov	r4, r7
 800777c:	42a3      	cmp	r3, r4
 800777e:	dd24      	ble.n	80077ca <_strtol_l.isra.0+0xca>
 8007780:	2e00      	cmp	r6, #0
 8007782:	db1f      	blt.n	80077c4 <_strtol_l.isra.0+0xc4>
 8007784:	45a9      	cmp	r9, r5
 8007786:	d31d      	bcc.n	80077c4 <_strtol_l.isra.0+0xc4>
 8007788:	d101      	bne.n	800778e <_strtol_l.isra.0+0x8e>
 800778a:	45a2      	cmp	sl, r4
 800778c:	db1a      	blt.n	80077c4 <_strtol_l.isra.0+0xc4>
 800778e:	fb05 4503 	mla	r5, r5, r3, r4
 8007792:	2601      	movs	r6, #1
 8007794:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007798:	e7eb      	b.n	8007772 <_strtol_l.isra.0+0x72>
 800779a:	2c2b      	cmp	r4, #43	; 0x2b
 800779c:	bf08      	it	eq
 800779e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80077a2:	46a8      	mov	r8, r5
 80077a4:	bf08      	it	eq
 80077a6:	f106 0e02 	addeq.w	lr, r6, #2
 80077aa:	e7c7      	b.n	800773c <_strtol_l.isra.0+0x3c>
 80077ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80077b0:	2f19      	cmp	r7, #25
 80077b2:	d801      	bhi.n	80077b8 <_strtol_l.isra.0+0xb8>
 80077b4:	3c37      	subs	r4, #55	; 0x37
 80077b6:	e7e1      	b.n	800777c <_strtol_l.isra.0+0x7c>
 80077b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80077bc:	2f19      	cmp	r7, #25
 80077be:	d804      	bhi.n	80077ca <_strtol_l.isra.0+0xca>
 80077c0:	3c57      	subs	r4, #87	; 0x57
 80077c2:	e7db      	b.n	800777c <_strtol_l.isra.0+0x7c>
 80077c4:	f04f 36ff 	mov.w	r6, #4294967295
 80077c8:	e7e4      	b.n	8007794 <_strtol_l.isra.0+0x94>
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	da05      	bge.n	80077da <_strtol_l.isra.0+0xda>
 80077ce:	2322      	movs	r3, #34	; 0x22
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	4665      	mov	r5, ip
 80077d4:	b942      	cbnz	r2, 80077e8 <_strtol_l.isra.0+0xe8>
 80077d6:	4628      	mov	r0, r5
 80077d8:	e79d      	b.n	8007716 <_strtol_l.isra.0+0x16>
 80077da:	f1b8 0f00 	cmp.w	r8, #0
 80077de:	d000      	beq.n	80077e2 <_strtol_l.isra.0+0xe2>
 80077e0:	426d      	negs	r5, r5
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d0f7      	beq.n	80077d6 <_strtol_l.isra.0+0xd6>
 80077e6:	b10e      	cbz	r6, 80077ec <_strtol_l.isra.0+0xec>
 80077e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80077ec:	6011      	str	r1, [r2, #0]
 80077ee:	e7f2      	b.n	80077d6 <_strtol_l.isra.0+0xd6>
 80077f0:	2430      	movs	r4, #48	; 0x30
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1b3      	bne.n	800775e <_strtol_l.isra.0+0x5e>
 80077f6:	2308      	movs	r3, #8
 80077f8:	e7b1      	b.n	800775e <_strtol_l.isra.0+0x5e>
 80077fa:	2c30      	cmp	r4, #48	; 0x30
 80077fc:	d0a4      	beq.n	8007748 <_strtol_l.isra.0+0x48>
 80077fe:	230a      	movs	r3, #10
 8007800:	e7ad      	b.n	800775e <_strtol_l.isra.0+0x5e>
 8007802:	bf00      	nop
 8007804:	0800b2f9 	.word	0x0800b2f9

08007808 <_strtol_r>:
 8007808:	f7ff bf7a 	b.w	8007700 <_strtol_l.isra.0>

0800780c <_write_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d07      	ldr	r5, [pc, #28]	; (800782c <_write_r+0x20>)
 8007810:	4604      	mov	r4, r0
 8007812:	4608      	mov	r0, r1
 8007814:	4611      	mov	r1, r2
 8007816:	2200      	movs	r2, #0
 8007818:	602a      	str	r2, [r5, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f7fa fa09 	bl	8001c32 <_write>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_write_r+0x1e>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_write_r+0x1e>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20010620 	.word	0x20010620

08007830 <_close_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	; (800784c <_close_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7fa fa15 	bl	8001c6a <_close>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_close_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_close_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20010620 	.word	0x20010620

08007850 <quorem>:
 8007850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	6903      	ldr	r3, [r0, #16]
 8007856:	690c      	ldr	r4, [r1, #16]
 8007858:	42a3      	cmp	r3, r4
 800785a:	4607      	mov	r7, r0
 800785c:	f2c0 8081 	blt.w	8007962 <quorem+0x112>
 8007860:	3c01      	subs	r4, #1
 8007862:	f101 0814 	add.w	r8, r1, #20
 8007866:	f100 0514 	add.w	r5, r0, #20
 800786a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007878:	3301      	adds	r3, #1
 800787a:	429a      	cmp	r2, r3
 800787c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007884:	fbb2 f6f3 	udiv	r6, r2, r3
 8007888:	d331      	bcc.n	80078ee <quorem+0x9e>
 800788a:	f04f 0e00 	mov.w	lr, #0
 800788e:	4640      	mov	r0, r8
 8007890:	46ac      	mov	ip, r5
 8007892:	46f2      	mov	sl, lr
 8007894:	f850 2b04 	ldr.w	r2, [r0], #4
 8007898:	b293      	uxth	r3, r2
 800789a:	fb06 e303 	mla	r3, r6, r3, lr
 800789e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ebaa 0303 	sub.w	r3, sl, r3
 80078a8:	0c12      	lsrs	r2, r2, #16
 80078aa:	f8dc a000 	ldr.w	sl, [ip]
 80078ae:	fb06 e202 	mla	r2, r6, r2, lr
 80078b2:	fa13 f38a 	uxtah	r3, r3, sl
 80078b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078ba:	fa1f fa82 	uxth.w	sl, r2
 80078be:	f8dc 2000 	ldr.w	r2, [ip]
 80078c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80078c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078d0:	4581      	cmp	r9, r0
 80078d2:	f84c 3b04 	str.w	r3, [ip], #4
 80078d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078da:	d2db      	bcs.n	8007894 <quorem+0x44>
 80078dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80078e0:	b92b      	cbnz	r3, 80078ee <quorem+0x9e>
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	3b04      	subs	r3, #4
 80078e6:	429d      	cmp	r5, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	d32e      	bcc.n	800794a <quorem+0xfa>
 80078ec:	613c      	str	r4, [r7, #16]
 80078ee:	4638      	mov	r0, r7
 80078f0:	f001 fc32 	bl	8009158 <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	db24      	blt.n	8007942 <quorem+0xf2>
 80078f8:	3601      	adds	r6, #1
 80078fa:	4628      	mov	r0, r5
 80078fc:	f04f 0c00 	mov.w	ip, #0
 8007900:	f858 2b04 	ldr.w	r2, [r8], #4
 8007904:	f8d0 e000 	ldr.w	lr, [r0]
 8007908:	b293      	uxth	r3, r2
 800790a:	ebac 0303 	sub.w	r3, ip, r3
 800790e:	0c12      	lsrs	r2, r2, #16
 8007910:	fa13 f38e 	uxtah	r3, r3, lr
 8007914:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007922:	45c1      	cmp	r9, r8
 8007924:	f840 3b04 	str.w	r3, [r0], #4
 8007928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800792c:	d2e8      	bcs.n	8007900 <quorem+0xb0>
 800792e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007936:	b922      	cbnz	r2, 8007942 <quorem+0xf2>
 8007938:	3b04      	subs	r3, #4
 800793a:	429d      	cmp	r5, r3
 800793c:	461a      	mov	r2, r3
 800793e:	d30a      	bcc.n	8007956 <quorem+0x106>
 8007940:	613c      	str	r4, [r7, #16]
 8007942:	4630      	mov	r0, r6
 8007944:	b003      	add	sp, #12
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	6812      	ldr	r2, [r2, #0]
 800794c:	3b04      	subs	r3, #4
 800794e:	2a00      	cmp	r2, #0
 8007950:	d1cc      	bne.n	80078ec <quorem+0x9c>
 8007952:	3c01      	subs	r4, #1
 8007954:	e7c7      	b.n	80078e6 <quorem+0x96>
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	3b04      	subs	r3, #4
 800795a:	2a00      	cmp	r2, #0
 800795c:	d1f0      	bne.n	8007940 <quorem+0xf0>
 800795e:	3c01      	subs	r4, #1
 8007960:	e7eb      	b.n	800793a <quorem+0xea>
 8007962:	2000      	movs	r0, #0
 8007964:	e7ee      	b.n	8007944 <quorem+0xf4>
	...

08007968 <_dtoa_r>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ec59 8b10 	vmov	r8, r9, d0
 8007970:	b095      	sub	sp, #84	; 0x54
 8007972:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007974:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007976:	9107      	str	r1, [sp, #28]
 8007978:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800797c:	4606      	mov	r6, r0
 800797e:	9209      	str	r2, [sp, #36]	; 0x24
 8007980:	9310      	str	r3, [sp, #64]	; 0x40
 8007982:	b975      	cbnz	r5, 80079a2 <_dtoa_r+0x3a>
 8007984:	2010      	movs	r0, #16
 8007986:	f001 f8f7 	bl	8008b78 <malloc>
 800798a:	4602      	mov	r2, r0
 800798c:	6270      	str	r0, [r6, #36]	; 0x24
 800798e:	b920      	cbnz	r0, 800799a <_dtoa_r+0x32>
 8007990:	4bab      	ldr	r3, [pc, #684]	; (8007c40 <_dtoa_r+0x2d8>)
 8007992:	21ea      	movs	r1, #234	; 0xea
 8007994:	48ab      	ldr	r0, [pc, #684]	; (8007c44 <_dtoa_r+0x2dc>)
 8007996:	f002 fc33 	bl	800a200 <__assert_func>
 800799a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800799e:	6005      	str	r5, [r0, #0]
 80079a0:	60c5      	str	r5, [r0, #12]
 80079a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	b151      	cbz	r1, 80079be <_dtoa_r+0x56>
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	604a      	str	r2, [r1, #4]
 80079ac:	2301      	movs	r3, #1
 80079ae:	4093      	lsls	r3, r2
 80079b0:	608b      	str	r3, [r1, #8]
 80079b2:	4630      	mov	r0, r6
 80079b4:	f001 f948 	bl	8008c48 <_Bfree>
 80079b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f1b9 0300 	subs.w	r3, r9, #0
 80079c2:	bfbb      	ittet	lt
 80079c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	9303      	strlt	r3, [sp, #12]
 80079ca:	2300      	movge	r3, #0
 80079cc:	2201      	movlt	r2, #1
 80079ce:	bfac      	ite	ge
 80079d0:	6023      	strge	r3, [r4, #0]
 80079d2:	6022      	strlt	r2, [r4, #0]
 80079d4:	4b9c      	ldr	r3, [pc, #624]	; (8007c48 <_dtoa_r+0x2e0>)
 80079d6:	9c03      	ldr	r4, [sp, #12]
 80079d8:	43a3      	bics	r3, r4
 80079da:	d11a      	bne.n	8007a12 <_dtoa_r+0xaa>
 80079dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079de:	f242 730f 	movw	r3, #9999	; 0x270f
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80079e8:	ea53 0308 	orrs.w	r3, r3, r8
 80079ec:	f000 8512 	beq.w	8008414 <_dtoa_r+0xaac>
 80079f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079f2:	b953      	cbnz	r3, 8007a0a <_dtoa_r+0xa2>
 80079f4:	4b95      	ldr	r3, [pc, #596]	; (8007c4c <_dtoa_r+0x2e4>)
 80079f6:	e01f      	b.n	8007a38 <_dtoa_r+0xd0>
 80079f8:	4b95      	ldr	r3, [pc, #596]	; (8007c50 <_dtoa_r+0x2e8>)
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	9800      	ldr	r0, [sp, #0]
 8007a04:	b015      	add	sp, #84	; 0x54
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	4b90      	ldr	r3, [pc, #576]	; (8007c4c <_dtoa_r+0x2e4>)
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	3303      	adds	r3, #3
 8007a10:	e7f5      	b.n	80079fe <_dtoa_r+0x96>
 8007a12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a22:	d10b      	bne.n	8007a3c <_dtoa_r+0xd4>
 8007a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a26:	2301      	movs	r3, #1
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 84ee 	beq.w	800840e <_dtoa_r+0xaa6>
 8007a32:	4888      	ldr	r0, [pc, #544]	; (8007c54 <_dtoa_r+0x2ec>)
 8007a34:	6018      	str	r0, [r3, #0]
 8007a36:	1e43      	subs	r3, r0, #1
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	e7e2      	b.n	8007a02 <_dtoa_r+0x9a>
 8007a3c:	a913      	add	r1, sp, #76	; 0x4c
 8007a3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a42:	aa12      	add	r2, sp, #72	; 0x48
 8007a44:	4630      	mov	r0, r6
 8007a46:	f001 fca7 	bl	8009398 <__d2b>
 8007a4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007a4e:	4605      	mov	r5, r0
 8007a50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a52:	2900      	cmp	r1, #0
 8007a54:	d047      	beq.n	8007ae6 <_dtoa_r+0x17e>
 8007a56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007a58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007a64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007a6c:	2400      	movs	r4, #0
 8007a6e:	ec43 2b16 	vmov	d6, r2, r3
 8007a72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007a76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007c28 <_dtoa_r+0x2c0>
 8007a7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007c30 <_dtoa_r+0x2c8>
 8007a82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007a86:	eeb0 7b46 	vmov.f64	d7, d6
 8007a8a:	ee06 1a90 	vmov	s13, r1
 8007a8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007a92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007c38 <_dtoa_r+0x2d0>
 8007a96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007a9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007a9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	ee16 ba90 	vmov	fp, s13
 8007aaa:	9411      	str	r4, [sp, #68]	; 0x44
 8007aac:	d508      	bpl.n	8007ac0 <_dtoa_r+0x158>
 8007aae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ab2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aba:	bf18      	it	ne
 8007abc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007ac0:	f1bb 0f16 	cmp.w	fp, #22
 8007ac4:	d832      	bhi.n	8007b2c <_dtoa_r+0x1c4>
 8007ac6:	4b64      	ldr	r3, [pc, #400]	; (8007c58 <_dtoa_r+0x2f0>)
 8007ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007acc:	ed93 7b00 	vldr	d7, [r3]
 8007ad0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007ad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007adc:	d501      	bpl.n	8007ae2 <_dtoa_r+0x17a>
 8007ade:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e023      	b.n	8007b2e <_dtoa_r+0x1c6>
 8007ae6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ae8:	4401      	add	r1, r0
 8007aea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	bfc3      	ittte	gt
 8007af2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007af6:	fa04 f303 	lslgt.w	r3, r4, r3
 8007afa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007afe:	f1c3 0320 	rsble	r3, r3, #32
 8007b02:	bfc6      	itte	gt
 8007b04:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007b08:	ea43 0308 	orrgt.w	r3, r3, r8
 8007b0c:	fa08 f303 	lslle.w	r3, r8, r3
 8007b10:	ee07 3a90 	vmov	s15, r3
 8007b14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b18:	3901      	subs	r1, #1
 8007b1a:	ed8d 7b00 	vstr	d7, [sp]
 8007b1e:	9c01      	ldr	r4, [sp, #4]
 8007b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007b28:	2401      	movs	r4, #1
 8007b2a:	e7a0      	b.n	8007a6e <_dtoa_r+0x106>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b30:	1a43      	subs	r3, r0, r1
 8007b32:	1e5a      	subs	r2, r3, #1
 8007b34:	bf45      	ittet	mi
 8007b36:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b3a:	9305      	strmi	r3, [sp, #20]
 8007b3c:	2300      	movpl	r3, #0
 8007b3e:	2300      	movmi	r3, #0
 8007b40:	9206      	str	r2, [sp, #24]
 8007b42:	bf54      	ite	pl
 8007b44:	9305      	strpl	r3, [sp, #20]
 8007b46:	9306      	strmi	r3, [sp, #24]
 8007b48:	f1bb 0f00 	cmp.w	fp, #0
 8007b4c:	db18      	blt.n	8007b80 <_dtoa_r+0x218>
 8007b4e:	9b06      	ldr	r3, [sp, #24]
 8007b50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007b54:	445b      	add	r3, fp
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9a07      	ldr	r2, [sp, #28]
 8007b5c:	2a09      	cmp	r2, #9
 8007b5e:	d849      	bhi.n	8007bf4 <_dtoa_r+0x28c>
 8007b60:	2a05      	cmp	r2, #5
 8007b62:	bfc4      	itt	gt
 8007b64:	3a04      	subgt	r2, #4
 8007b66:	9207      	strgt	r2, [sp, #28]
 8007b68:	9a07      	ldr	r2, [sp, #28]
 8007b6a:	f1a2 0202 	sub.w	r2, r2, #2
 8007b6e:	bfcc      	ite	gt
 8007b70:	2400      	movgt	r4, #0
 8007b72:	2401      	movle	r4, #1
 8007b74:	2a03      	cmp	r2, #3
 8007b76:	d848      	bhi.n	8007c0a <_dtoa_r+0x2a2>
 8007b78:	e8df f002 	tbb	[pc, r2]
 8007b7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007b80:	9b05      	ldr	r3, [sp, #20]
 8007b82:	2200      	movs	r2, #0
 8007b84:	eba3 030b 	sub.w	r3, r3, fp
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8007b8c:	f1cb 0300 	rsb	r3, fp, #0
 8007b90:	e7e3      	b.n	8007b5a <_dtoa_r+0x1f2>
 8007b92:	2200      	movs	r2, #0
 8007b94:	9208      	str	r2, [sp, #32]
 8007b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	dc39      	bgt.n	8007c10 <_dtoa_r+0x2a8>
 8007b9c:	f04f 0a01 	mov.w	sl, #1
 8007ba0:	46d1      	mov	r9, sl
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ba8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007baa:	2100      	movs	r1, #0
 8007bac:	6079      	str	r1, [r7, #4]
 8007bae:	2004      	movs	r0, #4
 8007bb0:	f100 0c14 	add.w	ip, r0, #20
 8007bb4:	4594      	cmp	ip, r2
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	d92f      	bls.n	8007c1a <_dtoa_r+0x2b2>
 8007bba:	4630      	mov	r0, r6
 8007bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8007bbe:	f001 f803 	bl	8008bc8 <_Balloc>
 8007bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bc4:	9000      	str	r0, [sp, #0]
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d149      	bne.n	8007c60 <_dtoa_r+0x2f8>
 8007bcc:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <_dtoa_r+0x2f4>)
 8007bce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bd2:	e6df      	b.n	8007994 <_dtoa_r+0x2c>
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	e7dd      	b.n	8007b94 <_dtoa_r+0x22c>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	9208      	str	r2, [sp, #32]
 8007bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bde:	eb0b 0a02 	add.w	sl, fp, r2
 8007be2:	f10a 0901 	add.w	r9, sl, #1
 8007be6:	464a      	mov	r2, r9
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	bfb8      	it	lt
 8007bec:	2201      	movlt	r2, #1
 8007bee:	e7db      	b.n	8007ba8 <_dtoa_r+0x240>
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	e7f2      	b.n	8007bda <_dtoa_r+0x272>
 8007bf4:	2401      	movs	r4, #1
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007bfc:	f04f 3aff 	mov.w	sl, #4294967295
 8007c00:	2100      	movs	r1, #0
 8007c02:	46d1      	mov	r9, sl
 8007c04:	2212      	movs	r2, #18
 8007c06:	9109      	str	r1, [sp, #36]	; 0x24
 8007c08:	e7ce      	b.n	8007ba8 <_dtoa_r+0x240>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	9208      	str	r2, [sp, #32]
 8007c0e:	e7f5      	b.n	8007bfc <_dtoa_r+0x294>
 8007c10:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007c14:	46d1      	mov	r9, sl
 8007c16:	4652      	mov	r2, sl
 8007c18:	e7c6      	b.n	8007ba8 <_dtoa_r+0x240>
 8007c1a:	3101      	adds	r1, #1
 8007c1c:	6079      	str	r1, [r7, #4]
 8007c1e:	0040      	lsls	r0, r0, #1
 8007c20:	e7c6      	b.n	8007bb0 <_dtoa_r+0x248>
 8007c22:	bf00      	nop
 8007c24:	f3af 8000 	nop.w
 8007c28:	636f4361 	.word	0x636f4361
 8007c2c:	3fd287a7 	.word	0x3fd287a7
 8007c30:	8b60c8b3 	.word	0x8b60c8b3
 8007c34:	3fc68a28 	.word	0x3fc68a28
 8007c38:	509f79fb 	.word	0x509f79fb
 8007c3c:	3fd34413 	.word	0x3fd34413
 8007c40:	0800b406 	.word	0x0800b406
 8007c44:	0800b41d 	.word	0x0800b41d
 8007c48:	7ff00000 	.word	0x7ff00000
 8007c4c:	0800b402 	.word	0x0800b402
 8007c50:	0800b3f9 	.word	0x0800b3f9
 8007c54:	0800b682 	.word	0x0800b682
 8007c58:	0800b598 	.word	0x0800b598
 8007c5c:	0800b47c 	.word	0x0800b47c
 8007c60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007c62:	9900      	ldr	r1, [sp, #0]
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	f1b9 0f0e 	cmp.w	r9, #14
 8007c6a:	d872      	bhi.n	8007d52 <_dtoa_r+0x3ea>
 8007c6c:	2c00      	cmp	r4, #0
 8007c6e:	d070      	beq.n	8007d52 <_dtoa_r+0x3ea>
 8007c70:	f1bb 0f00 	cmp.w	fp, #0
 8007c74:	f340 80a6 	ble.w	8007dc4 <_dtoa_r+0x45c>
 8007c78:	49ca      	ldr	r1, [pc, #808]	; (8007fa4 <_dtoa_r+0x63c>)
 8007c7a:	f00b 020f 	and.w	r2, fp, #15
 8007c7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007c82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007c86:	ed92 7b00 	vldr	d7, [r2]
 8007c8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007c8e:	f000 808d 	beq.w	8007dac <_dtoa_r+0x444>
 8007c92:	4ac5      	ldr	r2, [pc, #788]	; (8007fa8 <_dtoa_r+0x640>)
 8007c94:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007c98:	ed92 6b08 	vldr	d6, [r2, #32]
 8007c9c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007ca0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007ca4:	f001 010f 	and.w	r1, r1, #15
 8007ca8:	2203      	movs	r2, #3
 8007caa:	48bf      	ldr	r0, [pc, #764]	; (8007fa8 <_dtoa_r+0x640>)
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d17f      	bne.n	8007db0 <_dtoa_r+0x448>
 8007cb0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007cb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	f000 80b2 	beq.w	8007e28 <_dtoa_r+0x4c0>
 8007cc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ccc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd4:	f140 80a8 	bpl.w	8007e28 <_dtoa_r+0x4c0>
 8007cd8:	f1b9 0f00 	cmp.w	r9, #0
 8007cdc:	f000 80a4 	beq.w	8007e28 <_dtoa_r+0x4c0>
 8007ce0:	f1ba 0f00 	cmp.w	sl, #0
 8007ce4:	dd31      	ble.n	8007d4a <_dtoa_r+0x3e2>
 8007ce6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007cea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cf2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007cf6:	3201      	adds	r2, #1
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007cfe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007d02:	ee07 2a90 	vmov	s15, r2
 8007d06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007d0e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007d12:	9c03      	ldr	r4, [sp, #12]
 8007d14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007d18:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f040 8086 	bne.w	8007e2e <_dtoa_r+0x4c6>
 8007d22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007d26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007d2a:	ec42 1b17 	vmov	d7, r1, r2
 8007d2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d36:	f300 8272 	bgt.w	800821e <_dtoa_r+0x8b6>
 8007d3a:	eeb1 7b47 	vneg.f64	d7, d7
 8007d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	f100 8267 	bmi.w	8008218 <_dtoa_r+0x8b0>
 8007d4a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007d4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007d52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	f2c0 8129 	blt.w	8007fac <_dtoa_r+0x644>
 8007d5a:	f1bb 0f0e 	cmp.w	fp, #14
 8007d5e:	f300 8125 	bgt.w	8007fac <_dtoa_r+0x644>
 8007d62:	4b90      	ldr	r3, [pc, #576]	; (8007fa4 <_dtoa_r+0x63c>)
 8007d64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d68:	ed93 6b00 	vldr	d6, [r3]
 8007d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f280 80c3 	bge.w	8007efa <_dtoa_r+0x592>
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	f300 80bf 	bgt.w	8007efa <_dtoa_r+0x592>
 8007d7c:	f040 824c 	bne.w	8008218 <_dtoa_r+0x8b0>
 8007d80:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007d84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	464c      	mov	r4, r9
 8007d96:	464f      	mov	r7, r9
 8007d98:	f280 8222 	bge.w	80081e0 <_dtoa_r+0x878>
 8007d9c:	f8dd 8000 	ldr.w	r8, [sp]
 8007da0:	2331      	movs	r3, #49	; 0x31
 8007da2:	f808 3b01 	strb.w	r3, [r8], #1
 8007da6:	f10b 0b01 	add.w	fp, fp, #1
 8007daa:	e21e      	b.n	80081ea <_dtoa_r+0x882>
 8007dac:	2202      	movs	r2, #2
 8007dae:	e77c      	b.n	8007caa <_dtoa_r+0x342>
 8007db0:	07cc      	lsls	r4, r1, #31
 8007db2:	d504      	bpl.n	8007dbe <_dtoa_r+0x456>
 8007db4:	ed90 6b00 	vldr	d6, [r0]
 8007db8:	3201      	adds	r2, #1
 8007dba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dbe:	1049      	asrs	r1, r1, #1
 8007dc0:	3008      	adds	r0, #8
 8007dc2:	e773      	b.n	8007cac <_dtoa_r+0x344>
 8007dc4:	d02e      	beq.n	8007e24 <_dtoa_r+0x4bc>
 8007dc6:	f1cb 0100 	rsb	r1, fp, #0
 8007dca:	4a76      	ldr	r2, [pc, #472]	; (8007fa4 <_dtoa_r+0x63c>)
 8007dcc:	f001 000f 	and.w	r0, r1, #15
 8007dd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007dd4:	ed92 7b00 	vldr	d7, [r2]
 8007dd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007ddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007de0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007de4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007de8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007dec:	486e      	ldr	r0, [pc, #440]	; (8007fa8 <_dtoa_r+0x640>)
 8007dee:	1109      	asrs	r1, r1, #4
 8007df0:	2400      	movs	r4, #0
 8007df2:	2202      	movs	r2, #2
 8007df4:	b939      	cbnz	r1, 8007e06 <_dtoa_r+0x49e>
 8007df6:	2c00      	cmp	r4, #0
 8007df8:	f43f af60 	beq.w	8007cbc <_dtoa_r+0x354>
 8007dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e04:	e75a      	b.n	8007cbc <_dtoa_r+0x354>
 8007e06:	07cf      	lsls	r7, r1, #31
 8007e08:	d509      	bpl.n	8007e1e <_dtoa_r+0x4b6>
 8007e0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007e0e:	ed90 7b00 	vldr	d7, [r0]
 8007e12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007e1a:	3201      	adds	r2, #1
 8007e1c:	2401      	movs	r4, #1
 8007e1e:	1049      	asrs	r1, r1, #1
 8007e20:	3008      	adds	r0, #8
 8007e22:	e7e7      	b.n	8007df4 <_dtoa_r+0x48c>
 8007e24:	2202      	movs	r2, #2
 8007e26:	e749      	b.n	8007cbc <_dtoa_r+0x354>
 8007e28:	465f      	mov	r7, fp
 8007e2a:	4648      	mov	r0, r9
 8007e2c:	e765      	b.n	8007cfa <_dtoa_r+0x392>
 8007e2e:	ec42 1b17 	vmov	d7, r1, r2
 8007e32:	4a5c      	ldr	r2, [pc, #368]	; (8007fa4 <_dtoa_r+0x63c>)
 8007e34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007e38:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007e3c:	9a00      	ldr	r2, [sp, #0]
 8007e3e:	1814      	adds	r4, r2, r0
 8007e40:	9a08      	ldr	r2, [sp, #32]
 8007e42:	b352      	cbz	r2, 8007e9a <_dtoa_r+0x532>
 8007e44:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007e48:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007e4c:	f8dd 8000 	ldr.w	r8, [sp]
 8007e50:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007e54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007e58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007e5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007e60:	ee14 2a90 	vmov	r2, s9
 8007e64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007e68:	3230      	adds	r2, #48	; 0x30
 8007e6a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007e6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e76:	f808 2b01 	strb.w	r2, [r8], #1
 8007e7a:	d439      	bmi.n	8007ef0 <_dtoa_r+0x588>
 8007e7c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007e80:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	d472      	bmi.n	8007f70 <_dtoa_r+0x608>
 8007e8a:	45a0      	cmp	r8, r4
 8007e8c:	f43f af5d 	beq.w	8007d4a <_dtoa_r+0x3e2>
 8007e90:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007e94:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007e98:	e7e0      	b.n	8007e5c <_dtoa_r+0x4f4>
 8007e9a:	f8dd 8000 	ldr.w	r8, [sp]
 8007e9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ea8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007eac:	ee14 2a90 	vmov	r2, s9
 8007eb0:	3230      	adds	r2, #48	; 0x30
 8007eb2:	f808 2b01 	strb.w	r2, [r8], #1
 8007eb6:	45a0      	cmp	r8, r4
 8007eb8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ebc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ec0:	d118      	bne.n	8007ef4 <_dtoa_r+0x58c>
 8007ec2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007ec6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007eca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed2:	dc4d      	bgt.n	8007f70 <_dtoa_r+0x608>
 8007ed4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee0:	f57f af33 	bpl.w	8007d4a <_dtoa_r+0x3e2>
 8007ee4:	4688      	mov	r8, r1
 8007ee6:	3901      	subs	r1, #1
 8007ee8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007eec:	2b30      	cmp	r3, #48	; 0x30
 8007eee:	d0f9      	beq.n	8007ee4 <_dtoa_r+0x57c>
 8007ef0:	46bb      	mov	fp, r7
 8007ef2:	e02a      	b.n	8007f4a <_dtoa_r+0x5e2>
 8007ef4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ef8:	e7d6      	b.n	8007ea8 <_dtoa_r+0x540>
 8007efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007efe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007f02:	f8dd 8000 	ldr.w	r8, [sp]
 8007f06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f0e:	ee15 3a10 	vmov	r3, s10
 8007f12:	3330      	adds	r3, #48	; 0x30
 8007f14:	f808 3b01 	strb.w	r3, [r8], #1
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	eba8 0303 	sub.w	r3, r8, r3
 8007f1e:	4599      	cmp	r9, r3
 8007f20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f24:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f28:	d133      	bne.n	8007f92 <_dtoa_r+0x62a>
 8007f2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	dc1a      	bgt.n	8007f6e <_dtoa_r+0x606>
 8007f38:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f40:	d103      	bne.n	8007f4a <_dtoa_r+0x5e2>
 8007f42:	ee15 3a10 	vmov	r3, s10
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d411      	bmi.n	8007f6e <_dtoa_r+0x606>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 fe7b 	bl	8008c48 <_Bfree>
 8007f52:	2300      	movs	r3, #0
 8007f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f56:	f888 3000 	strb.w	r3, [r8]
 8007f5a:	f10b 0301 	add.w	r3, fp, #1
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f43f ad4d 	beq.w	8007a02 <_dtoa_r+0x9a>
 8007f68:	f8c3 8000 	str.w	r8, [r3]
 8007f6c:	e549      	b.n	8007a02 <_dtoa_r+0x9a>
 8007f6e:	465f      	mov	r7, fp
 8007f70:	4643      	mov	r3, r8
 8007f72:	4698      	mov	r8, r3
 8007f74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f78:	2a39      	cmp	r2, #57	; 0x39
 8007f7a:	d106      	bne.n	8007f8a <_dtoa_r+0x622>
 8007f7c:	9a00      	ldr	r2, [sp, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d1f7      	bne.n	8007f72 <_dtoa_r+0x60a>
 8007f82:	9900      	ldr	r1, [sp, #0]
 8007f84:	2230      	movs	r2, #48	; 0x30
 8007f86:	3701      	adds	r7, #1
 8007f88:	700a      	strb	r2, [r1, #0]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e7ae      	b.n	8007ef0 <_dtoa_r+0x588>
 8007f92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9e:	d1b2      	bne.n	8007f06 <_dtoa_r+0x59e>
 8007fa0:	e7d3      	b.n	8007f4a <_dtoa_r+0x5e2>
 8007fa2:	bf00      	nop
 8007fa4:	0800b598 	.word	0x0800b598
 8007fa8:	0800b570 	.word	0x0800b570
 8007fac:	9908      	ldr	r1, [sp, #32]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	f000 80d1 	beq.w	8008156 <_dtoa_r+0x7ee>
 8007fb4:	9907      	ldr	r1, [sp, #28]
 8007fb6:	2901      	cmp	r1, #1
 8007fb8:	f300 80b4 	bgt.w	8008124 <_dtoa_r+0x7bc>
 8007fbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	f000 80ac 	beq.w	800811c <_dtoa_r+0x7b4>
 8007fc4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007fc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007fcc:	461c      	mov	r4, r3
 8007fce:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	9b06      	ldr	r3, [sp, #24]
 8007fd8:	2101      	movs	r1, #1
 8007fda:	4413      	add	r3, r2
 8007fdc:	4630      	mov	r0, r6
 8007fde:	9306      	str	r3, [sp, #24]
 8007fe0:	f000 ff38 	bl	8008e54 <__i2b>
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f1b8 0f00 	cmp.w	r8, #0
 8007fec:	dd0d      	ble.n	800800a <_dtoa_r+0x6a2>
 8007fee:	9a06      	ldr	r2, [sp, #24]
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	dd0a      	ble.n	800800a <_dtoa_r+0x6a2>
 8007ff4:	4542      	cmp	r2, r8
 8007ff6:	9905      	ldr	r1, [sp, #20]
 8007ff8:	bfa8      	it	ge
 8007ffa:	4642      	movge	r2, r8
 8007ffc:	1a89      	subs	r1, r1, r2
 8007ffe:	9105      	str	r1, [sp, #20]
 8008000:	9906      	ldr	r1, [sp, #24]
 8008002:	eba8 0802 	sub.w	r8, r8, r2
 8008006:	1a8a      	subs	r2, r1, r2
 8008008:	9206      	str	r2, [sp, #24]
 800800a:	b303      	cbz	r3, 800804e <_dtoa_r+0x6e6>
 800800c:	9a08      	ldr	r2, [sp, #32]
 800800e:	2a00      	cmp	r2, #0
 8008010:	f000 80a6 	beq.w	8008160 <_dtoa_r+0x7f8>
 8008014:	2c00      	cmp	r4, #0
 8008016:	dd13      	ble.n	8008040 <_dtoa_r+0x6d8>
 8008018:	4639      	mov	r1, r7
 800801a:	4622      	mov	r2, r4
 800801c:	4630      	mov	r0, r6
 800801e:	930c      	str	r3, [sp, #48]	; 0x30
 8008020:	f000 ffd4 	bl	8008fcc <__pow5mult>
 8008024:	462a      	mov	r2, r5
 8008026:	4601      	mov	r1, r0
 8008028:	4607      	mov	r7, r0
 800802a:	4630      	mov	r0, r6
 800802c:	f000 ff28 	bl	8008e80 <__multiply>
 8008030:	4629      	mov	r1, r5
 8008032:	900a      	str	r0, [sp, #40]	; 0x28
 8008034:	4630      	mov	r0, r6
 8008036:	f000 fe07 	bl	8008c48 <_Bfree>
 800803a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800803c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800803e:	4615      	mov	r5, r2
 8008040:	1b1a      	subs	r2, r3, r4
 8008042:	d004      	beq.n	800804e <_dtoa_r+0x6e6>
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f000 ffc0 	bl	8008fcc <__pow5mult>
 800804c:	4605      	mov	r5, r0
 800804e:	2101      	movs	r1, #1
 8008050:	4630      	mov	r0, r6
 8008052:	f000 feff 	bl	8008e54 <__i2b>
 8008056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	f340 8082 	ble.w	8008164 <_dtoa_r+0x7fc>
 8008060:	461a      	mov	r2, r3
 8008062:	4601      	mov	r1, r0
 8008064:	4630      	mov	r0, r6
 8008066:	f000 ffb1 	bl	8008fcc <__pow5mult>
 800806a:	9b07      	ldr	r3, [sp, #28]
 800806c:	2b01      	cmp	r3, #1
 800806e:	4604      	mov	r4, r0
 8008070:	dd7b      	ble.n	800816a <_dtoa_r+0x802>
 8008072:	2300      	movs	r3, #0
 8008074:	930a      	str	r3, [sp, #40]	; 0x28
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800807c:	6910      	ldr	r0, [r2, #16]
 800807e:	f000 fe99 	bl	8008db4 <__hi0bits>
 8008082:	f1c0 0020 	rsb	r0, r0, #32
 8008086:	9b06      	ldr	r3, [sp, #24]
 8008088:	4418      	add	r0, r3
 800808a:	f010 001f 	ands.w	r0, r0, #31
 800808e:	f000 808d 	beq.w	80081ac <_dtoa_r+0x844>
 8008092:	f1c0 0220 	rsb	r2, r0, #32
 8008096:	2a04      	cmp	r2, #4
 8008098:	f340 8086 	ble.w	80081a8 <_dtoa_r+0x840>
 800809c:	f1c0 001c 	rsb	r0, r0, #28
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	4403      	add	r3, r0
 80080a4:	9305      	str	r3, [sp, #20]
 80080a6:	9b06      	ldr	r3, [sp, #24]
 80080a8:	4403      	add	r3, r0
 80080aa:	4480      	add	r8, r0
 80080ac:	9306      	str	r3, [sp, #24]
 80080ae:	9b05      	ldr	r3, [sp, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dd05      	ble.n	80080c0 <_dtoa_r+0x758>
 80080b4:	4629      	mov	r1, r5
 80080b6:	461a      	mov	r2, r3
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 ffe1 	bl	8009080 <__lshift>
 80080be:	4605      	mov	r5, r0
 80080c0:	9b06      	ldr	r3, [sp, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dd05      	ble.n	80080d2 <_dtoa_r+0x76a>
 80080c6:	4621      	mov	r1, r4
 80080c8:	461a      	mov	r2, r3
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 ffd8 	bl	8009080 <__lshift>
 80080d0:	4604      	mov	r4, r0
 80080d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d06b      	beq.n	80081b0 <_dtoa_r+0x848>
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f001 f83c 	bl	8009158 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	da65      	bge.n	80081b0 <_dtoa_r+0x848>
 80080e4:	2300      	movs	r3, #0
 80080e6:	4629      	mov	r1, r5
 80080e8:	220a      	movs	r2, #10
 80080ea:	4630      	mov	r0, r6
 80080ec:	f000 fdce 	bl	8008c8c <__multadd>
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080f6:	4605      	mov	r5, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8192 	beq.w	8008422 <_dtoa_r+0xaba>
 80080fe:	4639      	mov	r1, r7
 8008100:	2300      	movs	r3, #0
 8008102:	220a      	movs	r2, #10
 8008104:	4630      	mov	r0, r6
 8008106:	f000 fdc1 	bl	8008c8c <__multadd>
 800810a:	f1ba 0f00 	cmp.w	sl, #0
 800810e:	4607      	mov	r7, r0
 8008110:	f300 808e 	bgt.w	8008230 <_dtoa_r+0x8c8>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	2b02      	cmp	r3, #2
 8008118:	dc51      	bgt.n	80081be <_dtoa_r+0x856>
 800811a:	e089      	b.n	8008230 <_dtoa_r+0x8c8>
 800811c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800811e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008122:	e751      	b.n	8007fc8 <_dtoa_r+0x660>
 8008124:	f109 34ff 	add.w	r4, r9, #4294967295
 8008128:	42a3      	cmp	r3, r4
 800812a:	bfbf      	itttt	lt
 800812c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800812e:	1ae3      	sublt	r3, r4, r3
 8008130:	18d2      	addlt	r2, r2, r3
 8008132:	4613      	movlt	r3, r2
 8008134:	bfb7      	itett	lt
 8008136:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008138:	1b1c      	subge	r4, r3, r4
 800813a:	4623      	movlt	r3, r4
 800813c:	2400      	movlt	r4, #0
 800813e:	f1b9 0f00 	cmp.w	r9, #0
 8008142:	bfb5      	itete	lt
 8008144:	9a05      	ldrlt	r2, [sp, #20]
 8008146:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800814a:	eba2 0809 	sublt.w	r8, r2, r9
 800814e:	464a      	movge	r2, r9
 8008150:	bfb8      	it	lt
 8008152:	2200      	movlt	r2, #0
 8008154:	e73b      	b.n	8007fce <_dtoa_r+0x666>
 8008156:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800815a:	9f08      	ldr	r7, [sp, #32]
 800815c:	461c      	mov	r4, r3
 800815e:	e743      	b.n	8007fe8 <_dtoa_r+0x680>
 8008160:	461a      	mov	r2, r3
 8008162:	e76f      	b.n	8008044 <_dtoa_r+0x6dc>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	2b01      	cmp	r3, #1
 8008168:	dc18      	bgt.n	800819c <_dtoa_r+0x834>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	b9b3      	cbnz	r3, 800819c <_dtoa_r+0x834>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008174:	b9a2      	cbnz	r2, 80081a0 <_dtoa_r+0x838>
 8008176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800817a:	0d12      	lsrs	r2, r2, #20
 800817c:	0512      	lsls	r2, r2, #20
 800817e:	b18a      	cbz	r2, 80081a4 <_dtoa_r+0x83c>
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	3301      	adds	r3, #1
 8008184:	9305      	str	r3, [sp, #20]
 8008186:	9b06      	ldr	r3, [sp, #24]
 8008188:	3301      	adds	r3, #1
 800818a:	9306      	str	r3, [sp, #24]
 800818c:	2301      	movs	r3, #1
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008192:	2b00      	cmp	r3, #0
 8008194:	f47f af6f 	bne.w	8008076 <_dtoa_r+0x70e>
 8008198:	2001      	movs	r0, #1
 800819a:	e774      	b.n	8008086 <_dtoa_r+0x71e>
 800819c:	2300      	movs	r3, #0
 800819e:	e7f6      	b.n	800818e <_dtoa_r+0x826>
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	e7f4      	b.n	800818e <_dtoa_r+0x826>
 80081a4:	920a      	str	r2, [sp, #40]	; 0x28
 80081a6:	e7f3      	b.n	8008190 <_dtoa_r+0x828>
 80081a8:	d081      	beq.n	80080ae <_dtoa_r+0x746>
 80081aa:	4610      	mov	r0, r2
 80081ac:	301c      	adds	r0, #28
 80081ae:	e777      	b.n	80080a0 <_dtoa_r+0x738>
 80081b0:	f1b9 0f00 	cmp.w	r9, #0
 80081b4:	dc37      	bgt.n	8008226 <_dtoa_r+0x8be>
 80081b6:	9b07      	ldr	r3, [sp, #28]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	dd34      	ble.n	8008226 <_dtoa_r+0x8be>
 80081bc:	46ca      	mov	sl, r9
 80081be:	f1ba 0f00 	cmp.w	sl, #0
 80081c2:	d10d      	bne.n	80081e0 <_dtoa_r+0x878>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4653      	mov	r3, sl
 80081c8:	2205      	movs	r2, #5
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 fd5e 	bl	8008c8c <__multadd>
 80081d0:	4601      	mov	r1, r0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 ffbf 	bl	8009158 <__mcmp>
 80081da:	2800      	cmp	r0, #0
 80081dc:	f73f adde 	bgt.w	8007d9c <_dtoa_r+0x434>
 80081e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e2:	f8dd 8000 	ldr.w	r8, [sp]
 80081e6:	ea6f 0b03 	mvn.w	fp, r3
 80081ea:	f04f 0900 	mov.w	r9, #0
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fd29 	bl	8008c48 <_Bfree>
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	f43f aea7 	beq.w	8007f4a <_dtoa_r+0x5e2>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	d005      	beq.n	800820e <_dtoa_r+0x8a6>
 8008202:	45b9      	cmp	r9, r7
 8008204:	d003      	beq.n	800820e <_dtoa_r+0x8a6>
 8008206:	4649      	mov	r1, r9
 8008208:	4630      	mov	r0, r6
 800820a:	f000 fd1d 	bl	8008c48 <_Bfree>
 800820e:	4639      	mov	r1, r7
 8008210:	4630      	mov	r0, r6
 8008212:	f000 fd19 	bl	8008c48 <_Bfree>
 8008216:	e698      	b.n	8007f4a <_dtoa_r+0x5e2>
 8008218:	2400      	movs	r4, #0
 800821a:	4627      	mov	r7, r4
 800821c:	e7e0      	b.n	80081e0 <_dtoa_r+0x878>
 800821e:	46bb      	mov	fp, r7
 8008220:	4604      	mov	r4, r0
 8008222:	4607      	mov	r7, r0
 8008224:	e5ba      	b.n	8007d9c <_dtoa_r+0x434>
 8008226:	9b08      	ldr	r3, [sp, #32]
 8008228:	46ca      	mov	sl, r9
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8100 	beq.w	8008430 <_dtoa_r+0xac8>
 8008230:	f1b8 0f00 	cmp.w	r8, #0
 8008234:	dd05      	ble.n	8008242 <_dtoa_r+0x8da>
 8008236:	4639      	mov	r1, r7
 8008238:	4642      	mov	r2, r8
 800823a:	4630      	mov	r0, r6
 800823c:	f000 ff20 	bl	8009080 <__lshift>
 8008240:	4607      	mov	r7, r0
 8008242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d05d      	beq.n	8008304 <_dtoa_r+0x99c>
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4630      	mov	r0, r6
 800824c:	f000 fcbc 	bl	8008bc8 <_Balloc>
 8008250:	4680      	mov	r8, r0
 8008252:	b928      	cbnz	r0, 8008260 <_dtoa_r+0x8f8>
 8008254:	4b82      	ldr	r3, [pc, #520]	; (8008460 <_dtoa_r+0xaf8>)
 8008256:	4602      	mov	r2, r0
 8008258:	f240 21ea 	movw	r1, #746	; 0x2ea
 800825c:	f7ff bb9a 	b.w	8007994 <_dtoa_r+0x2c>
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	3202      	adds	r2, #2
 8008264:	0092      	lsls	r2, r2, #2
 8008266:	f107 010c 	add.w	r1, r7, #12
 800826a:	300c      	adds	r0, #12
 800826c:	f000 fc9e 	bl	8008bac <memcpy>
 8008270:	2201      	movs	r2, #1
 8008272:	4641      	mov	r1, r8
 8008274:	4630      	mov	r0, r6
 8008276:	f000 ff03 	bl	8009080 <__lshift>
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	4453      	add	r3, sl
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	46b9      	mov	r9, r7
 800828e:	9308      	str	r3, [sp, #32]
 8008290:	4607      	mov	r7, r0
 8008292:	9b05      	ldr	r3, [sp, #20]
 8008294:	4621      	mov	r1, r4
 8008296:	3b01      	subs	r3, #1
 8008298:	4628      	mov	r0, r5
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	f7ff fad8 	bl	8007850 <quorem>
 80082a0:	4603      	mov	r3, r0
 80082a2:	3330      	adds	r3, #48	; 0x30
 80082a4:	9006      	str	r0, [sp, #24]
 80082a6:	4649      	mov	r1, r9
 80082a8:	4628      	mov	r0, r5
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	f000 ff54 	bl	8009158 <__mcmp>
 80082b0:	463a      	mov	r2, r7
 80082b2:	4682      	mov	sl, r0
 80082b4:	4621      	mov	r1, r4
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 ff6a 	bl	8009190 <__mdiff>
 80082bc:	68c2      	ldr	r2, [r0, #12]
 80082be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c0:	4680      	mov	r8, r0
 80082c2:	bb0a      	cbnz	r2, 8008308 <_dtoa_r+0x9a0>
 80082c4:	4601      	mov	r1, r0
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 ff46 	bl	8009158 <__mcmp>
 80082cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ce:	4602      	mov	r2, r0
 80082d0:	4641      	mov	r1, r8
 80082d2:	4630      	mov	r0, r6
 80082d4:	920e      	str	r2, [sp, #56]	; 0x38
 80082d6:	930a      	str	r3, [sp, #40]	; 0x28
 80082d8:	f000 fcb6 	bl	8008c48 <_Bfree>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80082e4:	ea43 0102 	orr.w	r1, r3, r2
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	430b      	orrs	r3, r1
 80082ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ee:	d10d      	bne.n	800830c <_dtoa_r+0x9a4>
 80082f0:	2b39      	cmp	r3, #57	; 0x39
 80082f2:	d029      	beq.n	8008348 <_dtoa_r+0x9e0>
 80082f4:	f1ba 0f00 	cmp.w	sl, #0
 80082f8:	dd01      	ble.n	80082fe <_dtoa_r+0x996>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	3331      	adds	r3, #49	; 0x31
 80082fe:	9a02      	ldr	r2, [sp, #8]
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e774      	b.n	80081ee <_dtoa_r+0x886>
 8008304:	4638      	mov	r0, r7
 8008306:	e7b8      	b.n	800827a <_dtoa_r+0x912>
 8008308:	2201      	movs	r2, #1
 800830a:	e7e1      	b.n	80082d0 <_dtoa_r+0x968>
 800830c:	f1ba 0f00 	cmp.w	sl, #0
 8008310:	db06      	blt.n	8008320 <_dtoa_r+0x9b8>
 8008312:	9907      	ldr	r1, [sp, #28]
 8008314:	ea41 0a0a 	orr.w	sl, r1, sl
 8008318:	9908      	ldr	r1, [sp, #32]
 800831a:	ea5a 0101 	orrs.w	r1, sl, r1
 800831e:	d120      	bne.n	8008362 <_dtoa_r+0x9fa>
 8008320:	2a00      	cmp	r2, #0
 8008322:	ddec      	ble.n	80082fe <_dtoa_r+0x996>
 8008324:	4629      	mov	r1, r5
 8008326:	2201      	movs	r2, #1
 8008328:	4630      	mov	r0, r6
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f000 fea8 	bl	8009080 <__lshift>
 8008330:	4621      	mov	r1, r4
 8008332:	4605      	mov	r5, r0
 8008334:	f000 ff10 	bl	8009158 <__mcmp>
 8008338:	2800      	cmp	r0, #0
 800833a:	9b05      	ldr	r3, [sp, #20]
 800833c:	dc02      	bgt.n	8008344 <_dtoa_r+0x9dc>
 800833e:	d1de      	bne.n	80082fe <_dtoa_r+0x996>
 8008340:	07da      	lsls	r2, r3, #31
 8008342:	d5dc      	bpl.n	80082fe <_dtoa_r+0x996>
 8008344:	2b39      	cmp	r3, #57	; 0x39
 8008346:	d1d8      	bne.n	80082fa <_dtoa_r+0x992>
 8008348:	9a02      	ldr	r2, [sp, #8]
 800834a:	2339      	movs	r3, #57	; 0x39
 800834c:	7013      	strb	r3, [r2, #0]
 800834e:	4643      	mov	r3, r8
 8008350:	4698      	mov	r8, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008358:	2a39      	cmp	r2, #57	; 0x39
 800835a:	d051      	beq.n	8008400 <_dtoa_r+0xa98>
 800835c:	3201      	adds	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e745      	b.n	80081ee <_dtoa_r+0x886>
 8008362:	2a00      	cmp	r2, #0
 8008364:	dd03      	ble.n	800836e <_dtoa_r+0xa06>
 8008366:	2b39      	cmp	r3, #57	; 0x39
 8008368:	d0ee      	beq.n	8008348 <_dtoa_r+0x9e0>
 800836a:	3301      	adds	r3, #1
 800836c:	e7c7      	b.n	80082fe <_dtoa_r+0x996>
 800836e:	9a05      	ldr	r2, [sp, #20]
 8008370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008372:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008376:	428a      	cmp	r2, r1
 8008378:	d02b      	beq.n	80083d2 <_dtoa_r+0xa6a>
 800837a:	4629      	mov	r1, r5
 800837c:	2300      	movs	r3, #0
 800837e:	220a      	movs	r2, #10
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fc83 	bl	8008c8c <__multadd>
 8008386:	45b9      	cmp	r9, r7
 8008388:	4605      	mov	r5, r0
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	f04f 020a 	mov.w	r2, #10
 8008392:	4649      	mov	r1, r9
 8008394:	4630      	mov	r0, r6
 8008396:	d107      	bne.n	80083a8 <_dtoa_r+0xa40>
 8008398:	f000 fc78 	bl	8008c8c <__multadd>
 800839c:	4681      	mov	r9, r0
 800839e:	4607      	mov	r7, r0
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	3301      	adds	r3, #1
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	e774      	b.n	8008292 <_dtoa_r+0x92a>
 80083a8:	f000 fc70 	bl	8008c8c <__multadd>
 80083ac:	4639      	mov	r1, r7
 80083ae:	4681      	mov	r9, r0
 80083b0:	2300      	movs	r3, #0
 80083b2:	220a      	movs	r2, #10
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 fc69 	bl	8008c8c <__multadd>
 80083ba:	4607      	mov	r7, r0
 80083bc:	e7f0      	b.n	80083a0 <_dtoa_r+0xa38>
 80083be:	f1ba 0f00 	cmp.w	sl, #0
 80083c2:	9a00      	ldr	r2, [sp, #0]
 80083c4:	bfcc      	ite	gt
 80083c6:	46d0      	movgt	r8, sl
 80083c8:	f04f 0801 	movle.w	r8, #1
 80083cc:	4490      	add	r8, r2
 80083ce:	f04f 0900 	mov.w	r9, #0
 80083d2:	4629      	mov	r1, r5
 80083d4:	2201      	movs	r2, #1
 80083d6:	4630      	mov	r0, r6
 80083d8:	9302      	str	r3, [sp, #8]
 80083da:	f000 fe51 	bl	8009080 <__lshift>
 80083de:	4621      	mov	r1, r4
 80083e0:	4605      	mov	r5, r0
 80083e2:	f000 feb9 	bl	8009158 <__mcmp>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	dcb1      	bgt.n	800834e <_dtoa_r+0x9e6>
 80083ea:	d102      	bne.n	80083f2 <_dtoa_r+0xa8a>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	07db      	lsls	r3, r3, #31
 80083f0:	d4ad      	bmi.n	800834e <_dtoa_r+0x9e6>
 80083f2:	4643      	mov	r3, r8
 80083f4:	4698      	mov	r8, r3
 80083f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083fa:	2a30      	cmp	r2, #48	; 0x30
 80083fc:	d0fa      	beq.n	80083f4 <_dtoa_r+0xa8c>
 80083fe:	e6f6      	b.n	80081ee <_dtoa_r+0x886>
 8008400:	9a00      	ldr	r2, [sp, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d1a4      	bne.n	8008350 <_dtoa_r+0x9e8>
 8008406:	f10b 0b01 	add.w	fp, fp, #1
 800840a:	2331      	movs	r3, #49	; 0x31
 800840c:	e778      	b.n	8008300 <_dtoa_r+0x998>
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <_dtoa_r+0xafc>)
 8008410:	f7ff bb12 	b.w	8007a38 <_dtoa_r+0xd0>
 8008414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008416:	2b00      	cmp	r3, #0
 8008418:	f47f aaee 	bne.w	80079f8 <_dtoa_r+0x90>
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <_dtoa_r+0xb00>)
 800841e:	f7ff bb0b 	b.w	8007a38 <_dtoa_r+0xd0>
 8008422:	f1ba 0f00 	cmp.w	sl, #0
 8008426:	dc03      	bgt.n	8008430 <_dtoa_r+0xac8>
 8008428:	9b07      	ldr	r3, [sp, #28]
 800842a:	2b02      	cmp	r3, #2
 800842c:	f73f aec7 	bgt.w	80081be <_dtoa_r+0x856>
 8008430:	f8dd 8000 	ldr.w	r8, [sp]
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f7ff fa0a 	bl	8007850 <quorem>
 800843c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008440:	f808 3b01 	strb.w	r3, [r8], #1
 8008444:	9a00      	ldr	r2, [sp, #0]
 8008446:	eba8 0202 	sub.w	r2, r8, r2
 800844a:	4592      	cmp	sl, r2
 800844c:	ddb7      	ble.n	80083be <_dtoa_r+0xa56>
 800844e:	4629      	mov	r1, r5
 8008450:	2300      	movs	r3, #0
 8008452:	220a      	movs	r2, #10
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fc19 	bl	8008c8c <__multadd>
 800845a:	4605      	mov	r5, r0
 800845c:	e7ea      	b.n	8008434 <_dtoa_r+0xacc>
 800845e:	bf00      	nop
 8008460:	0800b47c 	.word	0x0800b47c
 8008464:	0800b681 	.word	0x0800b681
 8008468:	0800b3f9 	.word	0x0800b3f9

0800846c <rshift>:
 800846c:	6903      	ldr	r3, [r0, #16]
 800846e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800847a:	f100 0414 	add.w	r4, r0, #20
 800847e:	dd45      	ble.n	800850c <rshift+0xa0>
 8008480:	f011 011f 	ands.w	r1, r1, #31
 8008484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800848c:	d10c      	bne.n	80084a8 <rshift+0x3c>
 800848e:	f100 0710 	add.w	r7, r0, #16
 8008492:	4629      	mov	r1, r5
 8008494:	42b1      	cmp	r1, r6
 8008496:	d334      	bcc.n	8008502 <rshift+0x96>
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	1eea      	subs	r2, r5, #3
 800849e:	4296      	cmp	r6, r2
 80084a0:	bf38      	it	cc
 80084a2:	2300      	movcc	r3, #0
 80084a4:	4423      	add	r3, r4
 80084a6:	e015      	b.n	80084d4 <rshift+0x68>
 80084a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084ac:	f1c1 0820 	rsb	r8, r1, #32
 80084b0:	40cf      	lsrs	r7, r1
 80084b2:	f105 0e04 	add.w	lr, r5, #4
 80084b6:	46a1      	mov	r9, r4
 80084b8:	4576      	cmp	r6, lr
 80084ba:	46f4      	mov	ip, lr
 80084bc:	d815      	bhi.n	80084ea <rshift+0x7e>
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	009a      	lsls	r2, r3, #2
 80084c2:	3a04      	subs	r2, #4
 80084c4:	3501      	adds	r5, #1
 80084c6:	42ae      	cmp	r6, r5
 80084c8:	bf38      	it	cc
 80084ca:	2200      	movcc	r2, #0
 80084cc:	18a3      	adds	r3, r4, r2
 80084ce:	50a7      	str	r7, [r4, r2]
 80084d0:	b107      	cbz	r7, 80084d4 <rshift+0x68>
 80084d2:	3304      	adds	r3, #4
 80084d4:	1b1a      	subs	r2, r3, r4
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084dc:	bf08      	it	eq
 80084de:	2300      	moveq	r3, #0
 80084e0:	6102      	str	r2, [r0, #16]
 80084e2:	bf08      	it	eq
 80084e4:	6143      	streq	r3, [r0, #20]
 80084e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ea:	f8dc c000 	ldr.w	ip, [ip]
 80084ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80084f2:	ea4c 0707 	orr.w	r7, ip, r7
 80084f6:	f849 7b04 	str.w	r7, [r9], #4
 80084fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084fe:	40cf      	lsrs	r7, r1
 8008500:	e7da      	b.n	80084b8 <rshift+0x4c>
 8008502:	f851 cb04 	ldr.w	ip, [r1], #4
 8008506:	f847 cf04 	str.w	ip, [r7, #4]!
 800850a:	e7c3      	b.n	8008494 <rshift+0x28>
 800850c:	4623      	mov	r3, r4
 800850e:	e7e1      	b.n	80084d4 <rshift+0x68>

08008510 <__hexdig_fun>:
 8008510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008514:	2b09      	cmp	r3, #9
 8008516:	d802      	bhi.n	800851e <__hexdig_fun+0xe>
 8008518:	3820      	subs	r0, #32
 800851a:	b2c0      	uxtb	r0, r0
 800851c:	4770      	bx	lr
 800851e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008522:	2b05      	cmp	r3, #5
 8008524:	d801      	bhi.n	800852a <__hexdig_fun+0x1a>
 8008526:	3847      	subs	r0, #71	; 0x47
 8008528:	e7f7      	b.n	800851a <__hexdig_fun+0xa>
 800852a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800852e:	2b05      	cmp	r3, #5
 8008530:	d801      	bhi.n	8008536 <__hexdig_fun+0x26>
 8008532:	3827      	subs	r0, #39	; 0x27
 8008534:	e7f1      	b.n	800851a <__hexdig_fun+0xa>
 8008536:	2000      	movs	r0, #0
 8008538:	4770      	bx	lr
	...

0800853c <__gethex>:
 800853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	ed2d 8b02 	vpush	{d8}
 8008544:	b089      	sub	sp, #36	; 0x24
 8008546:	ee08 0a10 	vmov	s16, r0
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	4bbc      	ldr	r3, [pc, #752]	; (8008840 <__gethex+0x304>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	468b      	mov	fp, r1
 8008556:	4690      	mov	r8, r2
 8008558:	f7f7 fe72 	bl	8000240 <strlen>
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	f8db 2000 	ldr.w	r2, [fp]
 8008562:	4403      	add	r3, r0
 8008564:	4682      	mov	sl, r0
 8008566:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	1c93      	adds	r3, r2, #2
 800856e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008572:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008576:	32fe      	adds	r2, #254	; 0xfe
 8008578:	18d1      	adds	r1, r2, r3
 800857a:	461f      	mov	r7, r3
 800857c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008580:	9100      	str	r1, [sp, #0]
 8008582:	2830      	cmp	r0, #48	; 0x30
 8008584:	d0f8      	beq.n	8008578 <__gethex+0x3c>
 8008586:	f7ff ffc3 	bl	8008510 <__hexdig_fun>
 800858a:	4604      	mov	r4, r0
 800858c:	2800      	cmp	r0, #0
 800858e:	d13a      	bne.n	8008606 <__gethex+0xca>
 8008590:	9901      	ldr	r1, [sp, #4]
 8008592:	4652      	mov	r2, sl
 8008594:	4638      	mov	r0, r7
 8008596:	f7fe fa98 	bl	8006aca <strncmp>
 800859a:	4605      	mov	r5, r0
 800859c:	2800      	cmp	r0, #0
 800859e:	d168      	bne.n	8008672 <__gethex+0x136>
 80085a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80085a4:	eb07 060a 	add.w	r6, r7, sl
 80085a8:	f7ff ffb2 	bl	8008510 <__hexdig_fun>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d062      	beq.n	8008676 <__gethex+0x13a>
 80085b0:	4633      	mov	r3, r6
 80085b2:	7818      	ldrb	r0, [r3, #0]
 80085b4:	2830      	cmp	r0, #48	; 0x30
 80085b6:	461f      	mov	r7, r3
 80085b8:	f103 0301 	add.w	r3, r3, #1
 80085bc:	d0f9      	beq.n	80085b2 <__gethex+0x76>
 80085be:	f7ff ffa7 	bl	8008510 <__hexdig_fun>
 80085c2:	2301      	movs	r3, #1
 80085c4:	fab0 f480 	clz	r4, r0
 80085c8:	0964      	lsrs	r4, r4, #5
 80085ca:	4635      	mov	r5, r6
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	463a      	mov	r2, r7
 80085d0:	4616      	mov	r6, r2
 80085d2:	3201      	adds	r2, #1
 80085d4:	7830      	ldrb	r0, [r6, #0]
 80085d6:	f7ff ff9b 	bl	8008510 <__hexdig_fun>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d1f8      	bne.n	80085d0 <__gethex+0x94>
 80085de:	9901      	ldr	r1, [sp, #4]
 80085e0:	4652      	mov	r2, sl
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7fe fa71 	bl	8006aca <strncmp>
 80085e8:	b980      	cbnz	r0, 800860c <__gethex+0xd0>
 80085ea:	b94d      	cbnz	r5, 8008600 <__gethex+0xc4>
 80085ec:	eb06 050a 	add.w	r5, r6, sl
 80085f0:	462a      	mov	r2, r5
 80085f2:	4616      	mov	r6, r2
 80085f4:	3201      	adds	r2, #1
 80085f6:	7830      	ldrb	r0, [r6, #0]
 80085f8:	f7ff ff8a 	bl	8008510 <__hexdig_fun>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1f8      	bne.n	80085f2 <__gethex+0xb6>
 8008600:	1bad      	subs	r5, r5, r6
 8008602:	00ad      	lsls	r5, r5, #2
 8008604:	e004      	b.n	8008610 <__gethex+0xd4>
 8008606:	2400      	movs	r4, #0
 8008608:	4625      	mov	r5, r4
 800860a:	e7e0      	b.n	80085ce <__gethex+0x92>
 800860c:	2d00      	cmp	r5, #0
 800860e:	d1f7      	bne.n	8008600 <__gethex+0xc4>
 8008610:	7833      	ldrb	r3, [r6, #0]
 8008612:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008616:	2b50      	cmp	r3, #80	; 0x50
 8008618:	d13b      	bne.n	8008692 <__gethex+0x156>
 800861a:	7873      	ldrb	r3, [r6, #1]
 800861c:	2b2b      	cmp	r3, #43	; 0x2b
 800861e:	d02c      	beq.n	800867a <__gethex+0x13e>
 8008620:	2b2d      	cmp	r3, #45	; 0x2d
 8008622:	d02e      	beq.n	8008682 <__gethex+0x146>
 8008624:	1c71      	adds	r1, r6, #1
 8008626:	f04f 0900 	mov.w	r9, #0
 800862a:	7808      	ldrb	r0, [r1, #0]
 800862c:	f7ff ff70 	bl	8008510 <__hexdig_fun>
 8008630:	1e43      	subs	r3, r0, #1
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b18      	cmp	r3, #24
 8008636:	d82c      	bhi.n	8008692 <__gethex+0x156>
 8008638:	f1a0 0210 	sub.w	r2, r0, #16
 800863c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008640:	f7ff ff66 	bl	8008510 <__hexdig_fun>
 8008644:	1e43      	subs	r3, r0, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b18      	cmp	r3, #24
 800864a:	d91d      	bls.n	8008688 <__gethex+0x14c>
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	d000      	beq.n	8008654 <__gethex+0x118>
 8008652:	4252      	negs	r2, r2
 8008654:	4415      	add	r5, r2
 8008656:	f8cb 1000 	str.w	r1, [fp]
 800865a:	b1e4      	cbz	r4, 8008696 <__gethex+0x15a>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	bf14      	ite	ne
 8008662:	2700      	movne	r7, #0
 8008664:	2706      	moveq	r7, #6
 8008666:	4638      	mov	r0, r7
 8008668:	b009      	add	sp, #36	; 0x24
 800866a:	ecbd 8b02 	vpop	{d8}
 800866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008672:	463e      	mov	r6, r7
 8008674:	4625      	mov	r5, r4
 8008676:	2401      	movs	r4, #1
 8008678:	e7ca      	b.n	8008610 <__gethex+0xd4>
 800867a:	f04f 0900 	mov.w	r9, #0
 800867e:	1cb1      	adds	r1, r6, #2
 8008680:	e7d3      	b.n	800862a <__gethex+0xee>
 8008682:	f04f 0901 	mov.w	r9, #1
 8008686:	e7fa      	b.n	800867e <__gethex+0x142>
 8008688:	230a      	movs	r3, #10
 800868a:	fb03 0202 	mla	r2, r3, r2, r0
 800868e:	3a10      	subs	r2, #16
 8008690:	e7d4      	b.n	800863c <__gethex+0x100>
 8008692:	4631      	mov	r1, r6
 8008694:	e7df      	b.n	8008656 <__gethex+0x11a>
 8008696:	1bf3      	subs	r3, r6, r7
 8008698:	3b01      	subs	r3, #1
 800869a:	4621      	mov	r1, r4
 800869c:	2b07      	cmp	r3, #7
 800869e:	dc0b      	bgt.n	80086b8 <__gethex+0x17c>
 80086a0:	ee18 0a10 	vmov	r0, s16
 80086a4:	f000 fa90 	bl	8008bc8 <_Balloc>
 80086a8:	4604      	mov	r4, r0
 80086aa:	b940      	cbnz	r0, 80086be <__gethex+0x182>
 80086ac:	4b65      	ldr	r3, [pc, #404]	; (8008844 <__gethex+0x308>)
 80086ae:	4602      	mov	r2, r0
 80086b0:	21de      	movs	r1, #222	; 0xde
 80086b2:	4865      	ldr	r0, [pc, #404]	; (8008848 <__gethex+0x30c>)
 80086b4:	f001 fda4 	bl	800a200 <__assert_func>
 80086b8:	3101      	adds	r1, #1
 80086ba:	105b      	asrs	r3, r3, #1
 80086bc:	e7ee      	b.n	800869c <__gethex+0x160>
 80086be:	f100 0914 	add.w	r9, r0, #20
 80086c2:	f04f 0b00 	mov.w	fp, #0
 80086c6:	f1ca 0301 	rsb	r3, sl, #1
 80086ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80086ce:	f8cd b000 	str.w	fp, [sp]
 80086d2:	9306      	str	r3, [sp, #24]
 80086d4:	42b7      	cmp	r7, r6
 80086d6:	d340      	bcc.n	800875a <__gethex+0x21e>
 80086d8:	9802      	ldr	r0, [sp, #8]
 80086da:	9b00      	ldr	r3, [sp, #0]
 80086dc:	f840 3b04 	str.w	r3, [r0], #4
 80086e0:	eba0 0009 	sub.w	r0, r0, r9
 80086e4:	1080      	asrs	r0, r0, #2
 80086e6:	0146      	lsls	r6, r0, #5
 80086e8:	6120      	str	r0, [r4, #16]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fb62 	bl	8008db4 <__hi0bits>
 80086f0:	1a30      	subs	r0, r6, r0
 80086f2:	f8d8 6000 	ldr.w	r6, [r8]
 80086f6:	42b0      	cmp	r0, r6
 80086f8:	dd63      	ble.n	80087c2 <__gethex+0x286>
 80086fa:	1b87      	subs	r7, r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 fefd 	bl	80094fe <__any_on>
 8008704:	4682      	mov	sl, r0
 8008706:	b1a8      	cbz	r0, 8008734 <__gethex+0x1f8>
 8008708:	1e7b      	subs	r3, r7, #1
 800870a:	1159      	asrs	r1, r3, #5
 800870c:	f003 021f 	and.w	r2, r3, #31
 8008710:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008714:	f04f 0a01 	mov.w	sl, #1
 8008718:	fa0a f202 	lsl.w	r2, sl, r2
 800871c:	420a      	tst	r2, r1
 800871e:	d009      	beq.n	8008734 <__gethex+0x1f8>
 8008720:	4553      	cmp	r3, sl
 8008722:	dd05      	ble.n	8008730 <__gethex+0x1f4>
 8008724:	1eb9      	subs	r1, r7, #2
 8008726:	4620      	mov	r0, r4
 8008728:	f000 fee9 	bl	80094fe <__any_on>
 800872c:	2800      	cmp	r0, #0
 800872e:	d145      	bne.n	80087bc <__gethex+0x280>
 8008730:	f04f 0a02 	mov.w	sl, #2
 8008734:	4639      	mov	r1, r7
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff fe98 	bl	800846c <rshift>
 800873c:	443d      	add	r5, r7
 800873e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008742:	42ab      	cmp	r3, r5
 8008744:	da4c      	bge.n	80087e0 <__gethex+0x2a4>
 8008746:	ee18 0a10 	vmov	r0, s16
 800874a:	4621      	mov	r1, r4
 800874c:	f000 fa7c 	bl	8008c48 <_Bfree>
 8008750:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008752:	2300      	movs	r3, #0
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	27a3      	movs	r7, #163	; 0xa3
 8008758:	e785      	b.n	8008666 <__gethex+0x12a>
 800875a:	1e73      	subs	r3, r6, #1
 800875c:	9a05      	ldr	r2, [sp, #20]
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008764:	4293      	cmp	r3, r2
 8008766:	d019      	beq.n	800879c <__gethex+0x260>
 8008768:	f1bb 0f20 	cmp.w	fp, #32
 800876c:	d107      	bne.n	800877e <__gethex+0x242>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	9a00      	ldr	r2, [sp, #0]
 8008772:	f843 2b04 	str.w	r2, [r3], #4
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	2300      	movs	r3, #0
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	469b      	mov	fp, r3
 800877e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008782:	f7ff fec5 	bl	8008510 <__hexdig_fun>
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	f000 000f 	and.w	r0, r0, #15
 800878c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008790:	4303      	orrs	r3, r0
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	f10b 0b04 	add.w	fp, fp, #4
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	e00d      	b.n	80087b8 <__gethex+0x27c>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	9a06      	ldr	r2, [sp, #24]
 80087a0:	4413      	add	r3, r2
 80087a2:	42bb      	cmp	r3, r7
 80087a4:	d3e0      	bcc.n	8008768 <__gethex+0x22c>
 80087a6:	4618      	mov	r0, r3
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	4652      	mov	r2, sl
 80087ae:	f7fe f98c 	bl	8006aca <strncmp>
 80087b2:	9b07      	ldr	r3, [sp, #28]
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d1d7      	bne.n	8008768 <__gethex+0x22c>
 80087b8:	461e      	mov	r6, r3
 80087ba:	e78b      	b.n	80086d4 <__gethex+0x198>
 80087bc:	f04f 0a03 	mov.w	sl, #3
 80087c0:	e7b8      	b.n	8008734 <__gethex+0x1f8>
 80087c2:	da0a      	bge.n	80087da <__gethex+0x29e>
 80087c4:	1a37      	subs	r7, r6, r0
 80087c6:	4621      	mov	r1, r4
 80087c8:	ee18 0a10 	vmov	r0, s16
 80087cc:	463a      	mov	r2, r7
 80087ce:	f000 fc57 	bl	8009080 <__lshift>
 80087d2:	1bed      	subs	r5, r5, r7
 80087d4:	4604      	mov	r4, r0
 80087d6:	f100 0914 	add.w	r9, r0, #20
 80087da:	f04f 0a00 	mov.w	sl, #0
 80087de:	e7ae      	b.n	800873e <__gethex+0x202>
 80087e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087e4:	42a8      	cmp	r0, r5
 80087e6:	dd72      	ble.n	80088ce <__gethex+0x392>
 80087e8:	1b45      	subs	r5, r0, r5
 80087ea:	42ae      	cmp	r6, r5
 80087ec:	dc36      	bgt.n	800885c <__gethex+0x320>
 80087ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d02a      	beq.n	800884c <__gethex+0x310>
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d02c      	beq.n	8008854 <__gethex+0x318>
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d115      	bne.n	800882a <__gethex+0x2ee>
 80087fe:	42ae      	cmp	r6, r5
 8008800:	d113      	bne.n	800882a <__gethex+0x2ee>
 8008802:	2e01      	cmp	r6, #1
 8008804:	d10b      	bne.n	800881e <__gethex+0x2e2>
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	2301      	movs	r3, #1
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	f8c9 3000 	str.w	r3, [r9]
 8008816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008818:	2762      	movs	r7, #98	; 0x62
 800881a:	601c      	str	r4, [r3, #0]
 800881c:	e723      	b.n	8008666 <__gethex+0x12a>
 800881e:	1e71      	subs	r1, r6, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fe6c 	bl	80094fe <__any_on>
 8008826:	2800      	cmp	r0, #0
 8008828:	d1ed      	bne.n	8008806 <__gethex+0x2ca>
 800882a:	ee18 0a10 	vmov	r0, s16
 800882e:	4621      	mov	r1, r4
 8008830:	f000 fa0a 	bl	8008c48 <_Bfree>
 8008834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008836:	2300      	movs	r3, #0
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	2750      	movs	r7, #80	; 0x50
 800883c:	e713      	b.n	8008666 <__gethex+0x12a>
 800883e:	bf00      	nop
 8008840:	0800b4f8 	.word	0x0800b4f8
 8008844:	0800b47c 	.word	0x0800b47c
 8008848:	0800b48d 	.word	0x0800b48d
 800884c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1eb      	bne.n	800882a <__gethex+0x2ee>
 8008852:	e7d8      	b.n	8008806 <__gethex+0x2ca>
 8008854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1d5      	bne.n	8008806 <__gethex+0x2ca>
 800885a:	e7e6      	b.n	800882a <__gethex+0x2ee>
 800885c:	1e6f      	subs	r7, r5, #1
 800885e:	f1ba 0f00 	cmp.w	sl, #0
 8008862:	d131      	bne.n	80088c8 <__gethex+0x38c>
 8008864:	b127      	cbz	r7, 8008870 <__gethex+0x334>
 8008866:	4639      	mov	r1, r7
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fe48 	bl	80094fe <__any_on>
 800886e:	4682      	mov	sl, r0
 8008870:	117b      	asrs	r3, r7, #5
 8008872:	2101      	movs	r1, #1
 8008874:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008878:	f007 071f 	and.w	r7, r7, #31
 800887c:	fa01 f707 	lsl.w	r7, r1, r7
 8008880:	421f      	tst	r7, r3
 8008882:	4629      	mov	r1, r5
 8008884:	4620      	mov	r0, r4
 8008886:	bf18      	it	ne
 8008888:	f04a 0a02 	orrne.w	sl, sl, #2
 800888c:	1b76      	subs	r6, r6, r5
 800888e:	f7ff fded 	bl	800846c <rshift>
 8008892:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008896:	2702      	movs	r7, #2
 8008898:	f1ba 0f00 	cmp.w	sl, #0
 800889c:	d048      	beq.n	8008930 <__gethex+0x3f4>
 800889e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d015      	beq.n	80088d2 <__gethex+0x396>
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d017      	beq.n	80088da <__gethex+0x39e>
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d109      	bne.n	80088c2 <__gethex+0x386>
 80088ae:	f01a 0f02 	tst.w	sl, #2
 80088b2:	d006      	beq.n	80088c2 <__gethex+0x386>
 80088b4:	f8d9 0000 	ldr.w	r0, [r9]
 80088b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80088bc:	f01a 0f01 	tst.w	sl, #1
 80088c0:	d10e      	bne.n	80088e0 <__gethex+0x3a4>
 80088c2:	f047 0710 	orr.w	r7, r7, #16
 80088c6:	e033      	b.n	8008930 <__gethex+0x3f4>
 80088c8:	f04f 0a01 	mov.w	sl, #1
 80088cc:	e7d0      	b.n	8008870 <__gethex+0x334>
 80088ce:	2701      	movs	r7, #1
 80088d0:	e7e2      	b.n	8008898 <__gethex+0x35c>
 80088d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088d4:	f1c3 0301 	rsb	r3, r3, #1
 80088d8:	9315      	str	r3, [sp, #84]	; 0x54
 80088da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <__gethex+0x386>
 80088e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088e4:	f104 0314 	add.w	r3, r4, #20
 80088e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088f0:	f04f 0c00 	mov.w	ip, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088fe:	d01c      	beq.n	800893a <__gethex+0x3fe>
 8008900:	3201      	adds	r2, #1
 8008902:	6002      	str	r2, [r0, #0]
 8008904:	2f02      	cmp	r7, #2
 8008906:	f104 0314 	add.w	r3, r4, #20
 800890a:	d13f      	bne.n	800898c <__gethex+0x450>
 800890c:	f8d8 2000 	ldr.w	r2, [r8]
 8008910:	3a01      	subs	r2, #1
 8008912:	42b2      	cmp	r2, r6
 8008914:	d10a      	bne.n	800892c <__gethex+0x3f0>
 8008916:	1171      	asrs	r1, r6, #5
 8008918:	2201      	movs	r2, #1
 800891a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800891e:	f006 061f 	and.w	r6, r6, #31
 8008922:	fa02 f606 	lsl.w	r6, r2, r6
 8008926:	421e      	tst	r6, r3
 8008928:	bf18      	it	ne
 800892a:	4617      	movne	r7, r2
 800892c:	f047 0720 	orr.w	r7, r7, #32
 8008930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008932:	601c      	str	r4, [r3, #0]
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	601d      	str	r5, [r3, #0]
 8008938:	e695      	b.n	8008666 <__gethex+0x12a>
 800893a:	4299      	cmp	r1, r3
 800893c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008940:	d8d8      	bhi.n	80088f4 <__gethex+0x3b8>
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	459b      	cmp	fp, r3
 8008946:	db19      	blt.n	800897c <__gethex+0x440>
 8008948:	6861      	ldr	r1, [r4, #4]
 800894a:	ee18 0a10 	vmov	r0, s16
 800894e:	3101      	adds	r1, #1
 8008950:	f000 f93a 	bl	8008bc8 <_Balloc>
 8008954:	4681      	mov	r9, r0
 8008956:	b918      	cbnz	r0, 8008960 <__gethex+0x424>
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <__gethex+0x488>)
 800895a:	4602      	mov	r2, r0
 800895c:	2184      	movs	r1, #132	; 0x84
 800895e:	e6a8      	b.n	80086b2 <__gethex+0x176>
 8008960:	6922      	ldr	r2, [r4, #16]
 8008962:	3202      	adds	r2, #2
 8008964:	f104 010c 	add.w	r1, r4, #12
 8008968:	0092      	lsls	r2, r2, #2
 800896a:	300c      	adds	r0, #12
 800896c:	f000 f91e 	bl	8008bac <memcpy>
 8008970:	4621      	mov	r1, r4
 8008972:	ee18 0a10 	vmov	r0, s16
 8008976:	f000 f967 	bl	8008c48 <_Bfree>
 800897a:	464c      	mov	r4, r9
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008984:	6122      	str	r2, [r4, #16]
 8008986:	2201      	movs	r2, #1
 8008988:	615a      	str	r2, [r3, #20]
 800898a:	e7bb      	b.n	8008904 <__gethex+0x3c8>
 800898c:	6922      	ldr	r2, [r4, #16]
 800898e:	455a      	cmp	r2, fp
 8008990:	dd0b      	ble.n	80089aa <__gethex+0x46e>
 8008992:	2101      	movs	r1, #1
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff fd69 	bl	800846c <rshift>
 800899a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800899e:	3501      	adds	r5, #1
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	f6ff aed0 	blt.w	8008746 <__gethex+0x20a>
 80089a6:	2701      	movs	r7, #1
 80089a8:	e7c0      	b.n	800892c <__gethex+0x3f0>
 80089aa:	f016 061f 	ands.w	r6, r6, #31
 80089ae:	d0fa      	beq.n	80089a6 <__gethex+0x46a>
 80089b0:	449a      	add	sl, r3
 80089b2:	f1c6 0620 	rsb	r6, r6, #32
 80089b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80089ba:	f000 f9fb 	bl	8008db4 <__hi0bits>
 80089be:	42b0      	cmp	r0, r6
 80089c0:	dbe7      	blt.n	8008992 <__gethex+0x456>
 80089c2:	e7f0      	b.n	80089a6 <__gethex+0x46a>
 80089c4:	0800b47c 	.word	0x0800b47c

080089c8 <L_shift>:
 80089c8:	f1c2 0208 	rsb	r2, r2, #8
 80089cc:	0092      	lsls	r2, r2, #2
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	f1c2 0620 	rsb	r6, r2, #32
 80089d4:	6843      	ldr	r3, [r0, #4]
 80089d6:	6804      	ldr	r4, [r0, #0]
 80089d8:	fa03 f506 	lsl.w	r5, r3, r6
 80089dc:	432c      	orrs	r4, r5
 80089de:	40d3      	lsrs	r3, r2
 80089e0:	6004      	str	r4, [r0, #0]
 80089e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80089e6:	4288      	cmp	r0, r1
 80089e8:	d3f4      	bcc.n	80089d4 <L_shift+0xc>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}

080089ec <__match>:
 80089ec:	b530      	push	{r4, r5, lr}
 80089ee:	6803      	ldr	r3, [r0, #0]
 80089f0:	3301      	adds	r3, #1
 80089f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f6:	b914      	cbnz	r4, 80089fe <__match+0x12>
 80089f8:	6003      	str	r3, [r0, #0]
 80089fa:	2001      	movs	r0, #1
 80089fc:	bd30      	pop	{r4, r5, pc}
 80089fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a06:	2d19      	cmp	r5, #25
 8008a08:	bf98      	it	ls
 8008a0a:	3220      	addls	r2, #32
 8008a0c:	42a2      	cmp	r2, r4
 8008a0e:	d0f0      	beq.n	80089f2 <__match+0x6>
 8008a10:	2000      	movs	r0, #0
 8008a12:	e7f3      	b.n	80089fc <__match+0x10>

08008a14 <__hexnan>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	680b      	ldr	r3, [r1, #0]
 8008a1a:	6801      	ldr	r1, [r0, #0]
 8008a1c:	115e      	asrs	r6, r3, #5
 8008a1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a22:	f013 031f 	ands.w	r3, r3, #31
 8008a26:	b087      	sub	sp, #28
 8008a28:	bf18      	it	ne
 8008a2a:	3604      	addne	r6, #4
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	1f37      	subs	r7, r6, #4
 8008a30:	4682      	mov	sl, r0
 8008a32:	4690      	mov	r8, r2
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a3a:	46b9      	mov	r9, r7
 8008a3c:	463c      	mov	r4, r7
 8008a3e:	9502      	str	r5, [sp, #8]
 8008a40:	46ab      	mov	fp, r5
 8008a42:	784a      	ldrb	r2, [r1, #1]
 8008a44:	1c4b      	adds	r3, r1, #1
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	b342      	cbz	r2, 8008a9c <__hexnan+0x88>
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	9105      	str	r1, [sp, #20]
 8008a4e:	9204      	str	r2, [sp, #16]
 8008a50:	f7ff fd5e 	bl	8008510 <__hexdig_fun>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d14f      	bne.n	8008af8 <__hexnan+0xe4>
 8008a58:	9a04      	ldr	r2, [sp, #16]
 8008a5a:	9905      	ldr	r1, [sp, #20]
 8008a5c:	2a20      	cmp	r2, #32
 8008a5e:	d818      	bhi.n	8008a92 <__hexnan+0x7e>
 8008a60:	9b02      	ldr	r3, [sp, #8]
 8008a62:	459b      	cmp	fp, r3
 8008a64:	dd13      	ble.n	8008a8e <__hexnan+0x7a>
 8008a66:	454c      	cmp	r4, r9
 8008a68:	d206      	bcs.n	8008a78 <__hexnan+0x64>
 8008a6a:	2d07      	cmp	r5, #7
 8008a6c:	dc04      	bgt.n	8008a78 <__hexnan+0x64>
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4649      	mov	r1, r9
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ffa8 	bl	80089c8 <L_shift>
 8008a78:	4544      	cmp	r4, r8
 8008a7a:	d950      	bls.n	8008b1e <__hexnan+0x10a>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f1a4 0904 	sub.w	r9, r4, #4
 8008a82:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a86:	f8cd b008 	str.w	fp, [sp, #8]
 8008a8a:	464c      	mov	r4, r9
 8008a8c:	461d      	mov	r5, r3
 8008a8e:	9903      	ldr	r1, [sp, #12]
 8008a90:	e7d7      	b.n	8008a42 <__hexnan+0x2e>
 8008a92:	2a29      	cmp	r2, #41	; 0x29
 8008a94:	d156      	bne.n	8008b44 <__hexnan+0x130>
 8008a96:	3102      	adds	r1, #2
 8008a98:	f8ca 1000 	str.w	r1, [sl]
 8008a9c:	f1bb 0f00 	cmp.w	fp, #0
 8008aa0:	d050      	beq.n	8008b44 <__hexnan+0x130>
 8008aa2:	454c      	cmp	r4, r9
 8008aa4:	d206      	bcs.n	8008ab4 <__hexnan+0xa0>
 8008aa6:	2d07      	cmp	r5, #7
 8008aa8:	dc04      	bgt.n	8008ab4 <__hexnan+0xa0>
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4649      	mov	r1, r9
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7ff ff8a 	bl	80089c8 <L_shift>
 8008ab4:	4544      	cmp	r4, r8
 8008ab6:	d934      	bls.n	8008b22 <__hexnan+0x10e>
 8008ab8:	f1a8 0204 	sub.w	r2, r8, #4
 8008abc:	4623      	mov	r3, r4
 8008abe:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ac2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ac6:	429f      	cmp	r7, r3
 8008ac8:	d2f9      	bcs.n	8008abe <__hexnan+0xaa>
 8008aca:	1b3b      	subs	r3, r7, r4
 8008acc:	f023 0303 	bic.w	r3, r3, #3
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	3401      	adds	r4, #1
 8008ad4:	3e03      	subs	r6, #3
 8008ad6:	42b4      	cmp	r4, r6
 8008ad8:	bf88      	it	hi
 8008ada:	2304      	movhi	r3, #4
 8008adc:	4443      	add	r3, r8
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f843 2b04 	str.w	r2, [r3], #4
 8008ae4:	429f      	cmp	r7, r3
 8008ae6:	d2fb      	bcs.n	8008ae0 <__hexnan+0xcc>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	b91b      	cbnz	r3, 8008af4 <__hexnan+0xe0>
 8008aec:	4547      	cmp	r7, r8
 8008aee:	d127      	bne.n	8008b40 <__hexnan+0x12c>
 8008af0:	2301      	movs	r3, #1
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	2005      	movs	r0, #5
 8008af6:	e026      	b.n	8008b46 <__hexnan+0x132>
 8008af8:	3501      	adds	r5, #1
 8008afa:	2d08      	cmp	r5, #8
 8008afc:	f10b 0b01 	add.w	fp, fp, #1
 8008b00:	dd06      	ble.n	8008b10 <__hexnan+0xfc>
 8008b02:	4544      	cmp	r4, r8
 8008b04:	d9c3      	bls.n	8008a8e <__hexnan+0x7a>
 8008b06:	2300      	movs	r3, #0
 8008b08:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b0c:	2501      	movs	r5, #1
 8008b0e:	3c04      	subs	r4, #4
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	f000 000f 	and.w	r0, r0, #15
 8008b16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	e7b7      	b.n	8008a8e <__hexnan+0x7a>
 8008b1e:	2508      	movs	r5, #8
 8008b20:	e7b5      	b.n	8008a8e <__hexnan+0x7a>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0df      	beq.n	8008ae8 <__hexnan+0xd4>
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	f1c3 0320 	rsb	r3, r3, #32
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
 8008b34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b38:	401a      	ands	r2, r3
 8008b3a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b3e:	e7d3      	b.n	8008ae8 <__hexnan+0xd4>
 8008b40:	3f04      	subs	r7, #4
 8008b42:	e7d1      	b.n	8008ae8 <__hexnan+0xd4>
 8008b44:	2004      	movs	r0, #4
 8008b46:	b007      	add	sp, #28
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b4c <_localeconv_r>:
 8008b4c:	4800      	ldr	r0, [pc, #0]	; (8008b50 <_localeconv_r+0x4>)
 8008b4e:	4770      	bx	lr
 8008b50:	20000190 	.word	0x20000190

08008b54 <_lseek_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4d07      	ldr	r5, [pc, #28]	; (8008b74 <_lseek_r+0x20>)
 8008b58:	4604      	mov	r4, r0
 8008b5a:	4608      	mov	r0, r1
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	2200      	movs	r2, #0
 8008b60:	602a      	str	r2, [r5, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f7f9 f8a8 	bl	8001cb8 <_lseek>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_lseek_r+0x1e>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_lseek_r+0x1e>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	20010620 	.word	0x20010620

08008b78 <malloc>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <malloc+0xc>)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f000 bd3f 	b.w	8009600 <_malloc_r>
 8008b82:	bf00      	nop
 8008b84:	20000038 	.word	0x20000038

08008b88 <__ascii_mbtowc>:
 8008b88:	b082      	sub	sp, #8
 8008b8a:	b901      	cbnz	r1, 8008b8e <__ascii_mbtowc+0x6>
 8008b8c:	a901      	add	r1, sp, #4
 8008b8e:	b142      	cbz	r2, 8008ba2 <__ascii_mbtowc+0x1a>
 8008b90:	b14b      	cbz	r3, 8008ba6 <__ascii_mbtowc+0x1e>
 8008b92:	7813      	ldrb	r3, [r2, #0]
 8008b94:	600b      	str	r3, [r1, #0]
 8008b96:	7812      	ldrb	r2, [r2, #0]
 8008b98:	1e10      	subs	r0, r2, #0
 8008b9a:	bf18      	it	ne
 8008b9c:	2001      	movne	r0, #1
 8008b9e:	b002      	add	sp, #8
 8008ba0:	4770      	bx	lr
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	e7fb      	b.n	8008b9e <__ascii_mbtowc+0x16>
 8008ba6:	f06f 0001 	mvn.w	r0, #1
 8008baa:	e7f8      	b.n	8008b9e <__ascii_mbtowc+0x16>

08008bac <memcpy>:
 8008bac:	440a      	add	r2, r1
 8008bae:	4291      	cmp	r1, r2
 8008bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb4:	d100      	bne.n	8008bb8 <memcpy+0xc>
 8008bb6:	4770      	bx	lr
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	d1f9      	bne.n	8008bba <memcpy+0xe>
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <_Balloc>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	b976      	cbnz	r6, 8008bf0 <_Balloc+0x28>
 8008bd2:	2010      	movs	r0, #16
 8008bd4:	f7ff ffd0 	bl	8008b78 <malloc>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6260      	str	r0, [r4, #36]	; 0x24
 8008bdc:	b920      	cbnz	r0, 8008be8 <_Balloc+0x20>
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <_Balloc+0x78>)
 8008be0:	4818      	ldr	r0, [pc, #96]	; (8008c44 <_Balloc+0x7c>)
 8008be2:	2166      	movs	r1, #102	; 0x66
 8008be4:	f001 fb0c 	bl	800a200 <__assert_func>
 8008be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bec:	6006      	str	r6, [r0, #0]
 8008bee:	60c6      	str	r6, [r0, #12]
 8008bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bf2:	68f3      	ldr	r3, [r6, #12]
 8008bf4:	b183      	cbz	r3, 8008c18 <_Balloc+0x50>
 8008bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bfe:	b9b8      	cbnz	r0, 8008c30 <_Balloc+0x68>
 8008c00:	2101      	movs	r1, #1
 8008c02:	fa01 f605 	lsl.w	r6, r1, r5
 8008c06:	1d72      	adds	r2, r6, #5
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 fc98 	bl	8009540 <_calloc_r>
 8008c10:	b160      	cbz	r0, 8008c2c <_Balloc+0x64>
 8008c12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c16:	e00e      	b.n	8008c36 <_Balloc+0x6e>
 8008c18:	2221      	movs	r2, #33	; 0x21
 8008c1a:	2104      	movs	r1, #4
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fc8f 	bl	8009540 <_calloc_r>
 8008c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c24:	60f0      	str	r0, [r6, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e4      	bne.n	8008bf6 <_Balloc+0x2e>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	6802      	ldr	r2, [r0, #0]
 8008c32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c36:	2300      	movs	r3, #0
 8008c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c3c:	e7f7      	b.n	8008c2e <_Balloc+0x66>
 8008c3e:	bf00      	nop
 8008c40:	0800b406 	.word	0x0800b406
 8008c44:	0800b50c 	.word	0x0800b50c

08008c48 <_Bfree>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	b976      	cbnz	r6, 8008c70 <_Bfree+0x28>
 8008c52:	2010      	movs	r0, #16
 8008c54:	f7ff ff90 	bl	8008b78 <malloc>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6268      	str	r0, [r5, #36]	; 0x24
 8008c5c:	b920      	cbnz	r0, 8008c68 <_Bfree+0x20>
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_Bfree+0x3c>)
 8008c60:	4809      	ldr	r0, [pc, #36]	; (8008c88 <_Bfree+0x40>)
 8008c62:	218a      	movs	r1, #138	; 0x8a
 8008c64:	f001 facc 	bl	800a200 <__assert_func>
 8008c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c6c:	6006      	str	r6, [r0, #0]
 8008c6e:	60c6      	str	r6, [r0, #12]
 8008c70:	b13c      	cbz	r4, 8008c82 <_Bfree+0x3a>
 8008c72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c74:	6862      	ldr	r2, [r4, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c7c:	6021      	str	r1, [r4, #0]
 8008c7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	0800b406 	.word	0x0800b406
 8008c88:	0800b50c 	.word	0x0800b50c

08008c8c <__multadd>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	690e      	ldr	r6, [r1, #16]
 8008c92:	4607      	mov	r7, r0
 8008c94:	4698      	mov	r8, r3
 8008c96:	460c      	mov	r4, r1
 8008c98:	f101 0014 	add.w	r0, r1, #20
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6805      	ldr	r5, [r0, #0]
 8008ca0:	b2a9      	uxth	r1, r5
 8008ca2:	fb02 8101 	mla	r1, r2, r1, r8
 8008ca6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008caa:	0c2d      	lsrs	r5, r5, #16
 8008cac:	fb02 c505 	mla	r5, r2, r5, ip
 8008cb0:	b289      	uxth	r1, r1
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008cb8:	429e      	cmp	r6, r3
 8008cba:	f840 1b04 	str.w	r1, [r0], #4
 8008cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008cc2:	dcec      	bgt.n	8008c9e <__multadd+0x12>
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	d022      	beq.n	8008d10 <__multadd+0x84>
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	42b3      	cmp	r3, r6
 8008cce:	dc19      	bgt.n	8008d04 <__multadd+0x78>
 8008cd0:	6861      	ldr	r1, [r4, #4]
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	3101      	adds	r1, #1
 8008cd6:	f7ff ff77 	bl	8008bc8 <_Balloc>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b928      	cbnz	r0, 8008cea <__multadd+0x5e>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <__multadd+0x8c>)
 8008ce2:	480e      	ldr	r0, [pc, #56]	; (8008d1c <__multadd+0x90>)
 8008ce4:	21b5      	movs	r1, #181	; 0xb5
 8008ce6:	f001 fa8b 	bl	800a200 <__assert_func>
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	3202      	adds	r2, #2
 8008cee:	f104 010c 	add.w	r1, r4, #12
 8008cf2:	0092      	lsls	r2, r2, #2
 8008cf4:	300c      	adds	r0, #12
 8008cf6:	f7ff ff59 	bl	8008bac <memcpy>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff ffa3 	bl	8008c48 <_Bfree>
 8008d02:	462c      	mov	r4, r5
 8008d04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008d08:	3601      	adds	r6, #1
 8008d0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008d0e:	6126      	str	r6, [r4, #16]
 8008d10:	4620      	mov	r0, r4
 8008d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d16:	bf00      	nop
 8008d18:	0800b47c 	.word	0x0800b47c
 8008d1c:	0800b50c 	.word	0x0800b50c

08008d20 <__s2b>:
 8008d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	4615      	mov	r5, r2
 8008d28:	461f      	mov	r7, r3
 8008d2a:	2209      	movs	r2, #9
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	4606      	mov	r6, r0
 8008d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d34:	2100      	movs	r1, #0
 8008d36:	2201      	movs	r2, #1
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	db09      	blt.n	8008d50 <__s2b+0x30>
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff ff43 	bl	8008bc8 <_Balloc>
 8008d42:	b940      	cbnz	r0, 8008d56 <__s2b+0x36>
 8008d44:	4602      	mov	r2, r0
 8008d46:	4b19      	ldr	r3, [pc, #100]	; (8008dac <__s2b+0x8c>)
 8008d48:	4819      	ldr	r0, [pc, #100]	; (8008db0 <__s2b+0x90>)
 8008d4a:	21ce      	movs	r1, #206	; 0xce
 8008d4c:	f001 fa58 	bl	800a200 <__assert_func>
 8008d50:	0052      	lsls	r2, r2, #1
 8008d52:	3101      	adds	r1, #1
 8008d54:	e7f0      	b.n	8008d38 <__s2b+0x18>
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	6143      	str	r3, [r0, #20]
 8008d5a:	2d09      	cmp	r5, #9
 8008d5c:	f04f 0301 	mov.w	r3, #1
 8008d60:	6103      	str	r3, [r0, #16]
 8008d62:	dd16      	ble.n	8008d92 <__s2b+0x72>
 8008d64:	f104 0909 	add.w	r9, r4, #9
 8008d68:	46c8      	mov	r8, r9
 8008d6a:	442c      	add	r4, r5
 8008d6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d70:	4601      	mov	r1, r0
 8008d72:	3b30      	subs	r3, #48	; 0x30
 8008d74:	220a      	movs	r2, #10
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ff88 	bl	8008c8c <__multadd>
 8008d7c:	45a0      	cmp	r8, r4
 8008d7e:	d1f5      	bne.n	8008d6c <__s2b+0x4c>
 8008d80:	f1a5 0408 	sub.w	r4, r5, #8
 8008d84:	444c      	add	r4, r9
 8008d86:	1b2d      	subs	r5, r5, r4
 8008d88:	1963      	adds	r3, r4, r5
 8008d8a:	42bb      	cmp	r3, r7
 8008d8c:	db04      	blt.n	8008d98 <__s2b+0x78>
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d92:	340a      	adds	r4, #10
 8008d94:	2509      	movs	r5, #9
 8008d96:	e7f6      	b.n	8008d86 <__s2b+0x66>
 8008d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	3b30      	subs	r3, #48	; 0x30
 8008da0:	220a      	movs	r2, #10
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff ff72 	bl	8008c8c <__multadd>
 8008da8:	e7ee      	b.n	8008d88 <__s2b+0x68>
 8008daa:	bf00      	nop
 8008dac:	0800b47c 	.word	0x0800b47c
 8008db0:	0800b50c 	.word	0x0800b50c

08008db4 <__hi0bits>:
 8008db4:	0c03      	lsrs	r3, r0, #16
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	b9d3      	cbnz	r3, 8008df0 <__hi0bits+0x3c>
 8008dba:	0400      	lsls	r0, r0, #16
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dc2:	bf04      	itt	eq
 8008dc4:	0200      	lsleq	r0, r0, #8
 8008dc6:	3308      	addeq	r3, #8
 8008dc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dcc:	bf04      	itt	eq
 8008dce:	0100      	lsleq	r0, r0, #4
 8008dd0:	3304      	addeq	r3, #4
 8008dd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dd6:	bf04      	itt	eq
 8008dd8:	0080      	lsleq	r0, r0, #2
 8008dda:	3302      	addeq	r3, #2
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	db05      	blt.n	8008dec <__hi0bits+0x38>
 8008de0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008de4:	f103 0301 	add.w	r3, r3, #1
 8008de8:	bf08      	it	eq
 8008dea:	2320      	moveq	r3, #32
 8008dec:	4618      	mov	r0, r3
 8008dee:	4770      	bx	lr
 8008df0:	2300      	movs	r3, #0
 8008df2:	e7e4      	b.n	8008dbe <__hi0bits+0xa>

08008df4 <__lo0bits>:
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	f013 0207 	ands.w	r2, r3, #7
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	d00b      	beq.n	8008e16 <__lo0bits+0x22>
 8008dfe:	07da      	lsls	r2, r3, #31
 8008e00:	d424      	bmi.n	8008e4c <__lo0bits+0x58>
 8008e02:	0798      	lsls	r0, r3, #30
 8008e04:	bf49      	itett	mi
 8008e06:	085b      	lsrmi	r3, r3, #1
 8008e08:	089b      	lsrpl	r3, r3, #2
 8008e0a:	2001      	movmi	r0, #1
 8008e0c:	600b      	strmi	r3, [r1, #0]
 8008e0e:	bf5c      	itt	pl
 8008e10:	600b      	strpl	r3, [r1, #0]
 8008e12:	2002      	movpl	r0, #2
 8008e14:	4770      	bx	lr
 8008e16:	b298      	uxth	r0, r3
 8008e18:	b9b0      	cbnz	r0, 8008e48 <__lo0bits+0x54>
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	2010      	movs	r0, #16
 8008e1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e22:	bf04      	itt	eq
 8008e24:	0a1b      	lsreq	r3, r3, #8
 8008e26:	3008      	addeq	r0, #8
 8008e28:	071a      	lsls	r2, r3, #28
 8008e2a:	bf04      	itt	eq
 8008e2c:	091b      	lsreq	r3, r3, #4
 8008e2e:	3004      	addeq	r0, #4
 8008e30:	079a      	lsls	r2, r3, #30
 8008e32:	bf04      	itt	eq
 8008e34:	089b      	lsreq	r3, r3, #2
 8008e36:	3002      	addeq	r0, #2
 8008e38:	07da      	lsls	r2, r3, #31
 8008e3a:	d403      	bmi.n	8008e44 <__lo0bits+0x50>
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	f100 0001 	add.w	r0, r0, #1
 8008e42:	d005      	beq.n	8008e50 <__lo0bits+0x5c>
 8008e44:	600b      	str	r3, [r1, #0]
 8008e46:	4770      	bx	lr
 8008e48:	4610      	mov	r0, r2
 8008e4a:	e7e8      	b.n	8008e1e <__lo0bits+0x2a>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr
 8008e50:	2020      	movs	r0, #32
 8008e52:	4770      	bx	lr

08008e54 <__i2b>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	2101      	movs	r1, #1
 8008e5a:	f7ff feb5 	bl	8008bc8 <_Balloc>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	b928      	cbnz	r0, 8008e6e <__i2b+0x1a>
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <__i2b+0x24>)
 8008e64:	4805      	ldr	r0, [pc, #20]	; (8008e7c <__i2b+0x28>)
 8008e66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e6a:	f001 f9c9 	bl	800a200 <__assert_func>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	6144      	str	r4, [r0, #20]
 8008e72:	6103      	str	r3, [r0, #16]
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	bf00      	nop
 8008e78:	0800b47c 	.word	0x0800b47c
 8008e7c:	0800b50c 	.word	0x0800b50c

08008e80 <__multiply>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	4614      	mov	r4, r2
 8008e86:	690a      	ldr	r2, [r1, #16]
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	bfb8      	it	lt
 8008e8e:	460b      	movlt	r3, r1
 8008e90:	460d      	mov	r5, r1
 8008e92:	bfbc      	itt	lt
 8008e94:	4625      	movlt	r5, r4
 8008e96:	461c      	movlt	r4, r3
 8008e98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ea0:	68ab      	ldr	r3, [r5, #8]
 8008ea2:	6869      	ldr	r1, [r5, #4]
 8008ea4:	eb0a 0709 	add.w	r7, sl, r9
 8008ea8:	42bb      	cmp	r3, r7
 8008eaa:	b085      	sub	sp, #20
 8008eac:	bfb8      	it	lt
 8008eae:	3101      	addlt	r1, #1
 8008eb0:	f7ff fe8a 	bl	8008bc8 <_Balloc>
 8008eb4:	b930      	cbnz	r0, 8008ec4 <__multiply+0x44>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b42      	ldr	r3, [pc, #264]	; (8008fc4 <__multiply+0x144>)
 8008eba:	4843      	ldr	r0, [pc, #268]	; (8008fc8 <__multiply+0x148>)
 8008ebc:	f240 115d 	movw	r1, #349	; 0x15d
 8008ec0:	f001 f99e 	bl	800a200 <__assert_func>
 8008ec4:	f100 0614 	add.w	r6, r0, #20
 8008ec8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ecc:	4633      	mov	r3, r6
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4543      	cmp	r3, r8
 8008ed2:	d31e      	bcc.n	8008f12 <__multiply+0x92>
 8008ed4:	f105 0c14 	add.w	ip, r5, #20
 8008ed8:	f104 0314 	add.w	r3, r4, #20
 8008edc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ee0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ee4:	9202      	str	r2, [sp, #8]
 8008ee6:	ebac 0205 	sub.w	r2, ip, r5
 8008eea:	3a15      	subs	r2, #21
 8008eec:	f022 0203 	bic.w	r2, r2, #3
 8008ef0:	3204      	adds	r2, #4
 8008ef2:	f105 0115 	add.w	r1, r5, #21
 8008ef6:	458c      	cmp	ip, r1
 8008ef8:	bf38      	it	cc
 8008efa:	2204      	movcc	r2, #4
 8008efc:	9201      	str	r2, [sp, #4]
 8008efe:	9a02      	ldr	r2, [sp, #8]
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d808      	bhi.n	8008f18 <__multiply+0x98>
 8008f06:	2f00      	cmp	r7, #0
 8008f08:	dc55      	bgt.n	8008fb6 <__multiply+0x136>
 8008f0a:	6107      	str	r7, [r0, #16]
 8008f0c:	b005      	add	sp, #20
 8008f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	f843 2b04 	str.w	r2, [r3], #4
 8008f16:	e7db      	b.n	8008ed0 <__multiply+0x50>
 8008f18:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f1c:	f1ba 0f00 	cmp.w	sl, #0
 8008f20:	d020      	beq.n	8008f64 <__multiply+0xe4>
 8008f22:	f105 0e14 	add.w	lr, r5, #20
 8008f26:	46b1      	mov	r9, r6
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f2e:	f8d9 b000 	ldr.w	fp, [r9]
 8008f32:	b2a1      	uxth	r1, r4
 8008f34:	fa1f fb8b 	uxth.w	fp, fp
 8008f38:	fb0a b101 	mla	r1, sl, r1, fp
 8008f3c:	4411      	add	r1, r2
 8008f3e:	f8d9 2000 	ldr.w	r2, [r9]
 8008f42:	0c24      	lsrs	r4, r4, #16
 8008f44:	0c12      	lsrs	r2, r2, #16
 8008f46:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f4e:	b289      	uxth	r1, r1
 8008f50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f54:	45f4      	cmp	ip, lr
 8008f56:	f849 1b04 	str.w	r1, [r9], #4
 8008f5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008f5e:	d8e4      	bhi.n	8008f2a <__multiply+0xaa>
 8008f60:	9901      	ldr	r1, [sp, #4]
 8008f62:	5072      	str	r2, [r6, r1]
 8008f64:	9a03      	ldr	r2, [sp, #12]
 8008f66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	f1b9 0f00 	cmp.w	r9, #0
 8008f70:	d01f      	beq.n	8008fb2 <__multiply+0x132>
 8008f72:	6834      	ldr	r4, [r6, #0]
 8008f74:	f105 0114 	add.w	r1, r5, #20
 8008f78:	46b6      	mov	lr, r6
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	880a      	ldrh	r2, [r1, #0]
 8008f80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f84:	fb09 b202 	mla	r2, r9, r2, fp
 8008f88:	4492      	add	sl, r2
 8008f8a:	b2a4      	uxth	r4, r4
 8008f8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f90:	f84e 4b04 	str.w	r4, [lr], #4
 8008f94:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f98:	f8be 2000 	ldrh.w	r2, [lr]
 8008f9c:	0c24      	lsrs	r4, r4, #16
 8008f9e:	fb09 2404 	mla	r4, r9, r4, r2
 8008fa2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008fa6:	458c      	cmp	ip, r1
 8008fa8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008fac:	d8e7      	bhi.n	8008f7e <__multiply+0xfe>
 8008fae:	9a01      	ldr	r2, [sp, #4]
 8008fb0:	50b4      	str	r4, [r6, r2]
 8008fb2:	3604      	adds	r6, #4
 8008fb4:	e7a3      	b.n	8008efe <__multiply+0x7e>
 8008fb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1a5      	bne.n	8008f0a <__multiply+0x8a>
 8008fbe:	3f01      	subs	r7, #1
 8008fc0:	e7a1      	b.n	8008f06 <__multiply+0x86>
 8008fc2:	bf00      	nop
 8008fc4:	0800b47c 	.word	0x0800b47c
 8008fc8:	0800b50c 	.word	0x0800b50c

08008fcc <__pow5mult>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	4615      	mov	r5, r2
 8008fd2:	f012 0203 	ands.w	r2, r2, #3
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460f      	mov	r7, r1
 8008fda:	d007      	beq.n	8008fec <__pow5mult+0x20>
 8008fdc:	4c25      	ldr	r4, [pc, #148]	; (8009074 <__pow5mult+0xa8>)
 8008fde:	3a01      	subs	r2, #1
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe6:	f7ff fe51 	bl	8008c8c <__multadd>
 8008fea:	4607      	mov	r7, r0
 8008fec:	10ad      	asrs	r5, r5, #2
 8008fee:	d03d      	beq.n	800906c <__pow5mult+0xa0>
 8008ff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ff2:	b97c      	cbnz	r4, 8009014 <__pow5mult+0x48>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	f7ff fdbf 	bl	8008b78 <malloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6270      	str	r0, [r6, #36]	; 0x24
 8008ffe:	b928      	cbnz	r0, 800900c <__pow5mult+0x40>
 8009000:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <__pow5mult+0xac>)
 8009002:	481e      	ldr	r0, [pc, #120]	; (800907c <__pow5mult+0xb0>)
 8009004:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009008:	f001 f8fa 	bl	800a200 <__assert_func>
 800900c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009010:	6004      	str	r4, [r0, #0]
 8009012:	60c4      	str	r4, [r0, #12]
 8009014:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800901c:	b94c      	cbnz	r4, 8009032 <__pow5mult+0x66>
 800901e:	f240 2171 	movw	r1, #625	; 0x271
 8009022:	4630      	mov	r0, r6
 8009024:	f7ff ff16 	bl	8008e54 <__i2b>
 8009028:	2300      	movs	r3, #0
 800902a:	f8c8 0008 	str.w	r0, [r8, #8]
 800902e:	4604      	mov	r4, r0
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	f04f 0900 	mov.w	r9, #0
 8009036:	07eb      	lsls	r3, r5, #31
 8009038:	d50a      	bpl.n	8009050 <__pow5mult+0x84>
 800903a:	4639      	mov	r1, r7
 800903c:	4622      	mov	r2, r4
 800903e:	4630      	mov	r0, r6
 8009040:	f7ff ff1e 	bl	8008e80 <__multiply>
 8009044:	4639      	mov	r1, r7
 8009046:	4680      	mov	r8, r0
 8009048:	4630      	mov	r0, r6
 800904a:	f7ff fdfd 	bl	8008c48 <_Bfree>
 800904e:	4647      	mov	r7, r8
 8009050:	106d      	asrs	r5, r5, #1
 8009052:	d00b      	beq.n	800906c <__pow5mult+0xa0>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	b938      	cbnz	r0, 8009068 <__pow5mult+0x9c>
 8009058:	4622      	mov	r2, r4
 800905a:	4621      	mov	r1, r4
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff ff0f 	bl	8008e80 <__multiply>
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f8c0 9000 	str.w	r9, [r0]
 8009068:	4604      	mov	r4, r0
 800906a:	e7e4      	b.n	8009036 <__pow5mult+0x6a>
 800906c:	4638      	mov	r0, r7
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	bf00      	nop
 8009074:	0800b660 	.word	0x0800b660
 8009078:	0800b406 	.word	0x0800b406
 800907c:	0800b50c 	.word	0x0800b50c

08009080 <__lshift>:
 8009080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	6849      	ldr	r1, [r1, #4]
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	4607      	mov	r7, r0
 8009092:	4691      	mov	r9, r2
 8009094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009098:	f108 0601 	add.w	r6, r8, #1
 800909c:	42b3      	cmp	r3, r6
 800909e:	db0b      	blt.n	80090b8 <__lshift+0x38>
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff fd91 	bl	8008bc8 <_Balloc>
 80090a6:	4605      	mov	r5, r0
 80090a8:	b948      	cbnz	r0, 80090be <__lshift+0x3e>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4b28      	ldr	r3, [pc, #160]	; (8009150 <__lshift+0xd0>)
 80090ae:	4829      	ldr	r0, [pc, #164]	; (8009154 <__lshift+0xd4>)
 80090b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090b4:	f001 f8a4 	bl	800a200 <__assert_func>
 80090b8:	3101      	adds	r1, #1
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	e7ee      	b.n	800909c <__lshift+0x1c>
 80090be:	2300      	movs	r3, #0
 80090c0:	f100 0114 	add.w	r1, r0, #20
 80090c4:	f100 0210 	add.w	r2, r0, #16
 80090c8:	4618      	mov	r0, r3
 80090ca:	4553      	cmp	r3, sl
 80090cc:	db33      	blt.n	8009136 <__lshift+0xb6>
 80090ce:	6920      	ldr	r0, [r4, #16]
 80090d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d4:	f104 0314 	add.w	r3, r4, #20
 80090d8:	f019 091f 	ands.w	r9, r9, #31
 80090dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e4:	d02b      	beq.n	800913e <__lshift+0xbe>
 80090e6:	f1c9 0e20 	rsb	lr, r9, #32
 80090ea:	468a      	mov	sl, r1
 80090ec:	2200      	movs	r2, #0
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	fa00 f009 	lsl.w	r0, r0, r9
 80090f4:	4302      	orrs	r2, r0
 80090f6:	f84a 2b04 	str.w	r2, [sl], #4
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	459c      	cmp	ip, r3
 8009100:	fa22 f20e 	lsr.w	r2, r2, lr
 8009104:	d8f3      	bhi.n	80090ee <__lshift+0x6e>
 8009106:	ebac 0304 	sub.w	r3, ip, r4
 800910a:	3b15      	subs	r3, #21
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	3304      	adds	r3, #4
 8009112:	f104 0015 	add.w	r0, r4, #21
 8009116:	4584      	cmp	ip, r0
 8009118:	bf38      	it	cc
 800911a:	2304      	movcc	r3, #4
 800911c:	50ca      	str	r2, [r1, r3]
 800911e:	b10a      	cbz	r2, 8009124 <__lshift+0xa4>
 8009120:	f108 0602 	add.w	r6, r8, #2
 8009124:	3e01      	subs	r6, #1
 8009126:	4638      	mov	r0, r7
 8009128:	612e      	str	r6, [r5, #16]
 800912a:	4621      	mov	r1, r4
 800912c:	f7ff fd8c 	bl	8008c48 <_Bfree>
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	f842 0f04 	str.w	r0, [r2, #4]!
 800913a:	3301      	adds	r3, #1
 800913c:	e7c5      	b.n	80090ca <__lshift+0x4a>
 800913e:	3904      	subs	r1, #4
 8009140:	f853 2b04 	ldr.w	r2, [r3], #4
 8009144:	f841 2f04 	str.w	r2, [r1, #4]!
 8009148:	459c      	cmp	ip, r3
 800914a:	d8f9      	bhi.n	8009140 <__lshift+0xc0>
 800914c:	e7ea      	b.n	8009124 <__lshift+0xa4>
 800914e:	bf00      	nop
 8009150:	0800b47c 	.word	0x0800b47c
 8009154:	0800b50c 	.word	0x0800b50c

08009158 <__mcmp>:
 8009158:	b530      	push	{r4, r5, lr}
 800915a:	6902      	ldr	r2, [r0, #16]
 800915c:	690c      	ldr	r4, [r1, #16]
 800915e:	1b12      	subs	r2, r2, r4
 8009160:	d10e      	bne.n	8009180 <__mcmp+0x28>
 8009162:	f100 0314 	add.w	r3, r0, #20
 8009166:	3114      	adds	r1, #20
 8009168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800916c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009178:	42a5      	cmp	r5, r4
 800917a:	d003      	beq.n	8009184 <__mcmp+0x2c>
 800917c:	d305      	bcc.n	800918a <__mcmp+0x32>
 800917e:	2201      	movs	r2, #1
 8009180:	4610      	mov	r0, r2
 8009182:	bd30      	pop	{r4, r5, pc}
 8009184:	4283      	cmp	r3, r0
 8009186:	d3f3      	bcc.n	8009170 <__mcmp+0x18>
 8009188:	e7fa      	b.n	8009180 <__mcmp+0x28>
 800918a:	f04f 32ff 	mov.w	r2, #4294967295
 800918e:	e7f7      	b.n	8009180 <__mcmp+0x28>

08009190 <__mdiff>:
 8009190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	460c      	mov	r4, r1
 8009196:	4606      	mov	r6, r0
 8009198:	4611      	mov	r1, r2
 800919a:	4620      	mov	r0, r4
 800919c:	4617      	mov	r7, r2
 800919e:	f7ff ffdb 	bl	8009158 <__mcmp>
 80091a2:	1e05      	subs	r5, r0, #0
 80091a4:	d110      	bne.n	80091c8 <__mdiff+0x38>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff fd0d 	bl	8008bc8 <_Balloc>
 80091ae:	b930      	cbnz	r0, 80091be <__mdiff+0x2e>
 80091b0:	4b39      	ldr	r3, [pc, #228]	; (8009298 <__mdiff+0x108>)
 80091b2:	4602      	mov	r2, r0
 80091b4:	f240 2132 	movw	r1, #562	; 0x232
 80091b8:	4838      	ldr	r0, [pc, #224]	; (800929c <__mdiff+0x10c>)
 80091ba:	f001 f821 	bl	800a200 <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	bfa4      	itt	ge
 80091ca:	463b      	movge	r3, r7
 80091cc:	4627      	movge	r7, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	bfa6      	itte	ge
 80091d4:	461c      	movge	r4, r3
 80091d6:	2500      	movge	r5, #0
 80091d8:	2501      	movlt	r5, #1
 80091da:	f7ff fcf5 	bl	8008bc8 <_Balloc>
 80091de:	b920      	cbnz	r0, 80091ea <__mdiff+0x5a>
 80091e0:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <__mdiff+0x108>)
 80091e2:	4602      	mov	r2, r0
 80091e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091e8:	e7e6      	b.n	80091b8 <__mdiff+0x28>
 80091ea:	693e      	ldr	r6, [r7, #16]
 80091ec:	60c5      	str	r5, [r0, #12]
 80091ee:	6925      	ldr	r5, [r4, #16]
 80091f0:	f107 0114 	add.w	r1, r7, #20
 80091f4:	f104 0914 	add.w	r9, r4, #20
 80091f8:	f100 0e14 	add.w	lr, r0, #20
 80091fc:	f107 0210 	add.w	r2, r7, #16
 8009200:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009204:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009208:	46f2      	mov	sl, lr
 800920a:	2700      	movs	r7, #0
 800920c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009214:	fa1f f883 	uxth.w	r8, r3
 8009218:	fa17 f78b 	uxtah	r7, r7, fp
 800921c:	0c1b      	lsrs	r3, r3, #16
 800921e:	eba7 0808 	sub.w	r8, r7, r8
 8009222:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009226:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800922a:	fa1f f888 	uxth.w	r8, r8
 800922e:	141f      	asrs	r7, r3, #16
 8009230:	454d      	cmp	r5, r9
 8009232:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009236:	f84a 3b04 	str.w	r3, [sl], #4
 800923a:	d8e7      	bhi.n	800920c <__mdiff+0x7c>
 800923c:	1b2b      	subs	r3, r5, r4
 800923e:	3b15      	subs	r3, #21
 8009240:	f023 0303 	bic.w	r3, r3, #3
 8009244:	3304      	adds	r3, #4
 8009246:	3415      	adds	r4, #21
 8009248:	42a5      	cmp	r5, r4
 800924a:	bf38      	it	cc
 800924c:	2304      	movcc	r3, #4
 800924e:	4419      	add	r1, r3
 8009250:	4473      	add	r3, lr
 8009252:	469e      	mov	lr, r3
 8009254:	460d      	mov	r5, r1
 8009256:	4565      	cmp	r5, ip
 8009258:	d30e      	bcc.n	8009278 <__mdiff+0xe8>
 800925a:	f10c 0203 	add.w	r2, ip, #3
 800925e:	1a52      	subs	r2, r2, r1
 8009260:	f022 0203 	bic.w	r2, r2, #3
 8009264:	3903      	subs	r1, #3
 8009266:	458c      	cmp	ip, r1
 8009268:	bf38      	it	cc
 800926a:	2200      	movcc	r2, #0
 800926c:	441a      	add	r2, r3
 800926e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009272:	b17b      	cbz	r3, 8009294 <__mdiff+0x104>
 8009274:	6106      	str	r6, [r0, #16]
 8009276:	e7a5      	b.n	80091c4 <__mdiff+0x34>
 8009278:	f855 8b04 	ldr.w	r8, [r5], #4
 800927c:	fa17 f488 	uxtah	r4, r7, r8
 8009280:	1422      	asrs	r2, r4, #16
 8009282:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009286:	b2a4      	uxth	r4, r4
 8009288:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800928c:	f84e 4b04 	str.w	r4, [lr], #4
 8009290:	1417      	asrs	r7, r2, #16
 8009292:	e7e0      	b.n	8009256 <__mdiff+0xc6>
 8009294:	3e01      	subs	r6, #1
 8009296:	e7ea      	b.n	800926e <__mdiff+0xde>
 8009298:	0800b47c 	.word	0x0800b47c
 800929c:	0800b50c 	.word	0x0800b50c

080092a0 <__ulp>:
 80092a0:	b082      	sub	sp, #8
 80092a2:	ed8d 0b00 	vstr	d0, [sp]
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	4912      	ldr	r1, [pc, #72]	; (80092f4 <__ulp+0x54>)
 80092aa:	4019      	ands	r1, r3
 80092ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80092b0:	2900      	cmp	r1, #0
 80092b2:	dd05      	ble.n	80092c0 <__ulp+0x20>
 80092b4:	2200      	movs	r2, #0
 80092b6:	460b      	mov	r3, r1
 80092b8:	ec43 2b10 	vmov	d0, r2, r3
 80092bc:	b002      	add	sp, #8
 80092be:	4770      	bx	lr
 80092c0:	4249      	negs	r1, r1
 80092c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80092c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	da04      	bge.n	80092de <__ulp+0x3e>
 80092d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80092d8:	fa41 f300 	asr.w	r3, r1, r0
 80092dc:	e7ec      	b.n	80092b8 <__ulp+0x18>
 80092de:	f1a0 0114 	sub.w	r1, r0, #20
 80092e2:	291e      	cmp	r1, #30
 80092e4:	bfda      	itte	le
 80092e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80092ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80092ee:	2101      	movgt	r1, #1
 80092f0:	460a      	mov	r2, r1
 80092f2:	e7e1      	b.n	80092b8 <__ulp+0x18>
 80092f4:	7ff00000 	.word	0x7ff00000

080092f8 <__b2d>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	6905      	ldr	r5, [r0, #16]
 80092fc:	f100 0714 	add.w	r7, r0, #20
 8009300:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009304:	1f2e      	subs	r6, r5, #4
 8009306:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800930a:	4620      	mov	r0, r4
 800930c:	f7ff fd52 	bl	8008db4 <__hi0bits>
 8009310:	f1c0 0320 	rsb	r3, r0, #32
 8009314:	280a      	cmp	r0, #10
 8009316:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009394 <__b2d+0x9c>
 800931a:	600b      	str	r3, [r1, #0]
 800931c:	dc14      	bgt.n	8009348 <__b2d+0x50>
 800931e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009322:	fa24 f10e 	lsr.w	r1, r4, lr
 8009326:	42b7      	cmp	r7, r6
 8009328:	ea41 030c 	orr.w	r3, r1, ip
 800932c:	bf34      	ite	cc
 800932e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009332:	2100      	movcs	r1, #0
 8009334:	3015      	adds	r0, #21
 8009336:	fa04 f000 	lsl.w	r0, r4, r0
 800933a:	fa21 f10e 	lsr.w	r1, r1, lr
 800933e:	ea40 0201 	orr.w	r2, r0, r1
 8009342:	ec43 2b10 	vmov	d0, r2, r3
 8009346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009348:	42b7      	cmp	r7, r6
 800934a:	bf3a      	itte	cc
 800934c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009350:	f1a5 0608 	subcc.w	r6, r5, #8
 8009354:	2100      	movcs	r1, #0
 8009356:	380b      	subs	r0, #11
 8009358:	d017      	beq.n	800938a <__b2d+0x92>
 800935a:	f1c0 0c20 	rsb	ip, r0, #32
 800935e:	fa04 f500 	lsl.w	r5, r4, r0
 8009362:	42be      	cmp	r6, r7
 8009364:	fa21 f40c 	lsr.w	r4, r1, ip
 8009368:	ea45 0504 	orr.w	r5, r5, r4
 800936c:	bf8c      	ite	hi
 800936e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009372:	2400      	movls	r4, #0
 8009374:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009378:	fa01 f000 	lsl.w	r0, r1, r0
 800937c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009380:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009384:	ea40 0204 	orr.w	r2, r0, r4
 8009388:	e7db      	b.n	8009342 <__b2d+0x4a>
 800938a:	ea44 030c 	orr.w	r3, r4, ip
 800938e:	460a      	mov	r2, r1
 8009390:	e7d7      	b.n	8009342 <__b2d+0x4a>
 8009392:	bf00      	nop
 8009394:	3ff00000 	.word	0x3ff00000

08009398 <__d2b>:
 8009398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800939c:	4689      	mov	r9, r1
 800939e:	2101      	movs	r1, #1
 80093a0:	ec57 6b10 	vmov	r6, r7, d0
 80093a4:	4690      	mov	r8, r2
 80093a6:	f7ff fc0f 	bl	8008bc8 <_Balloc>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b930      	cbnz	r0, 80093bc <__d2b+0x24>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <__d2b+0xb0>)
 80093b2:	4826      	ldr	r0, [pc, #152]	; (800944c <__d2b+0xb4>)
 80093b4:	f240 310a 	movw	r1, #778	; 0x30a
 80093b8:	f000 ff22 	bl	800a200 <__assert_func>
 80093bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093c4:	bb35      	cbnz	r5, 8009414 <__d2b+0x7c>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	d028      	beq.n	800941e <__d2b+0x86>
 80093cc:	4668      	mov	r0, sp
 80093ce:	9600      	str	r6, [sp, #0]
 80093d0:	f7ff fd10 	bl	8008df4 <__lo0bits>
 80093d4:	9900      	ldr	r1, [sp, #0]
 80093d6:	b300      	cbz	r0, 800941a <__d2b+0x82>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	f1c0 0320 	rsb	r3, r0, #32
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	430b      	orrs	r3, r1
 80093e4:	40c2      	lsrs	r2, r0
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	61a3      	str	r3, [r4, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2202      	movne	r2, #2
 80093f4:	2201      	moveq	r2, #1
 80093f6:	6122      	str	r2, [r4, #16]
 80093f8:	b1d5      	cbz	r5, 8009430 <__d2b+0x98>
 80093fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093fe:	4405      	add	r5, r0
 8009400:	f8c9 5000 	str.w	r5, [r9]
 8009404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009408:	f8c8 0000 	str.w	r0, [r8]
 800940c:	4620      	mov	r0, r4
 800940e:	b003      	add	sp, #12
 8009410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009418:	e7d5      	b.n	80093c6 <__d2b+0x2e>
 800941a:	6161      	str	r1, [r4, #20]
 800941c:	e7e5      	b.n	80093ea <__d2b+0x52>
 800941e:	a801      	add	r0, sp, #4
 8009420:	f7ff fce8 	bl	8008df4 <__lo0bits>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	2201      	movs	r2, #1
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	3020      	adds	r0, #32
 800942e:	e7e3      	b.n	80093f8 <__d2b+0x60>
 8009430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009438:	f8c9 0000 	str.w	r0, [r9]
 800943c:	6918      	ldr	r0, [r3, #16]
 800943e:	f7ff fcb9 	bl	8008db4 <__hi0bits>
 8009442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009446:	e7df      	b.n	8009408 <__d2b+0x70>
 8009448:	0800b47c 	.word	0x0800b47c
 800944c:	0800b50c 	.word	0x0800b50c

08009450 <__ratio>:
 8009450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	468a      	mov	sl, r1
 8009456:	4669      	mov	r1, sp
 8009458:	4683      	mov	fp, r0
 800945a:	f7ff ff4d 	bl	80092f8 <__b2d>
 800945e:	a901      	add	r1, sp, #4
 8009460:	4650      	mov	r0, sl
 8009462:	ec59 8b10 	vmov	r8, r9, d0
 8009466:	ee10 6a10 	vmov	r6, s0
 800946a:	f7ff ff45 	bl	80092f8 <__b2d>
 800946e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009472:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009476:	eba3 0c02 	sub.w	ip, r3, r2
 800947a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009484:	ec55 4b10 	vmov	r4, r5, d0
 8009488:	2b00      	cmp	r3, #0
 800948a:	ee10 0a10 	vmov	r0, s0
 800948e:	bfce      	itee	gt
 8009490:	464a      	movgt	r2, r9
 8009492:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009496:	462a      	movle	r2, r5
 8009498:	464f      	mov	r7, r9
 800949a:	4629      	mov	r1, r5
 800949c:	bfcc      	ite	gt
 800949e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094a2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80094a6:	ec47 6b17 	vmov	d7, r6, r7
 80094aa:	ec41 0b16 	vmov	d6, r0, r1
 80094ae:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80094b2:	b003      	add	sp, #12
 80094b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094b8 <__copybits>:
 80094b8:	3901      	subs	r1, #1
 80094ba:	b570      	push	{r4, r5, r6, lr}
 80094bc:	1149      	asrs	r1, r1, #5
 80094be:	6914      	ldr	r4, [r2, #16]
 80094c0:	3101      	adds	r1, #1
 80094c2:	f102 0314 	add.w	r3, r2, #20
 80094c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094ce:	1f05      	subs	r5, r0, #4
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d30c      	bcc.n	80094ee <__copybits+0x36>
 80094d4:	1aa3      	subs	r3, r4, r2
 80094d6:	3b11      	subs	r3, #17
 80094d8:	f023 0303 	bic.w	r3, r3, #3
 80094dc:	3211      	adds	r2, #17
 80094de:	42a2      	cmp	r2, r4
 80094e0:	bf88      	it	hi
 80094e2:	2300      	movhi	r3, #0
 80094e4:	4418      	add	r0, r3
 80094e6:	2300      	movs	r3, #0
 80094e8:	4288      	cmp	r0, r1
 80094ea:	d305      	bcc.n	80094f8 <__copybits+0x40>
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80094f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80094f6:	e7eb      	b.n	80094d0 <__copybits+0x18>
 80094f8:	f840 3b04 	str.w	r3, [r0], #4
 80094fc:	e7f4      	b.n	80094e8 <__copybits+0x30>

080094fe <__any_on>:
 80094fe:	f100 0214 	add.w	r2, r0, #20
 8009502:	6900      	ldr	r0, [r0, #16]
 8009504:	114b      	asrs	r3, r1, #5
 8009506:	4298      	cmp	r0, r3
 8009508:	b510      	push	{r4, lr}
 800950a:	db11      	blt.n	8009530 <__any_on+0x32>
 800950c:	dd0a      	ble.n	8009524 <__any_on+0x26>
 800950e:	f011 011f 	ands.w	r1, r1, #31
 8009512:	d007      	beq.n	8009524 <__any_on+0x26>
 8009514:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009518:	fa24 f001 	lsr.w	r0, r4, r1
 800951c:	fa00 f101 	lsl.w	r1, r0, r1
 8009520:	428c      	cmp	r4, r1
 8009522:	d10b      	bne.n	800953c <__any_on+0x3e>
 8009524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009528:	4293      	cmp	r3, r2
 800952a:	d803      	bhi.n	8009534 <__any_on+0x36>
 800952c:	2000      	movs	r0, #0
 800952e:	bd10      	pop	{r4, pc}
 8009530:	4603      	mov	r3, r0
 8009532:	e7f7      	b.n	8009524 <__any_on+0x26>
 8009534:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009538:	2900      	cmp	r1, #0
 800953a:	d0f5      	beq.n	8009528 <__any_on+0x2a>
 800953c:	2001      	movs	r0, #1
 800953e:	e7f6      	b.n	800952e <__any_on+0x30>

08009540 <_calloc_r>:
 8009540:	b513      	push	{r0, r1, r4, lr}
 8009542:	434a      	muls	r2, r1
 8009544:	4611      	mov	r1, r2
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	f000 f85a 	bl	8009600 <_malloc_r>
 800954c:	4604      	mov	r4, r0
 800954e:	b118      	cbz	r0, 8009558 <_calloc_r+0x18>
 8009550:	9a01      	ldr	r2, [sp, #4]
 8009552:	2100      	movs	r1, #0
 8009554:	f7fc fbd4 	bl	8005d00 <memset>
 8009558:	4620      	mov	r0, r4
 800955a:	b002      	add	sp, #8
 800955c:	bd10      	pop	{r4, pc}
	...

08009560 <_free_r>:
 8009560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009562:	2900      	cmp	r1, #0
 8009564:	d048      	beq.n	80095f8 <_free_r+0x98>
 8009566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956a:	9001      	str	r0, [sp, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f1a1 0404 	sub.w	r4, r1, #4
 8009572:	bfb8      	it	lt
 8009574:	18e4      	addlt	r4, r4, r3
 8009576:	f001 f847 	bl	800a608 <__malloc_lock>
 800957a:	4a20      	ldr	r2, [pc, #128]	; (80095fc <_free_r+0x9c>)
 800957c:	9801      	ldr	r0, [sp, #4]
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	4615      	mov	r5, r2
 8009582:	b933      	cbnz	r3, 8009592 <_free_r+0x32>
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	6014      	str	r4, [r2, #0]
 8009588:	b003      	add	sp, #12
 800958a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800958e:	f001 b841 	b.w	800a614 <__malloc_unlock>
 8009592:	42a3      	cmp	r3, r4
 8009594:	d90b      	bls.n	80095ae <_free_r+0x4e>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	1862      	adds	r2, r4, r1
 800959a:	4293      	cmp	r3, r2
 800959c:	bf04      	itt	eq
 800959e:	681a      	ldreq	r2, [r3, #0]
 80095a0:	685b      	ldreq	r3, [r3, #4]
 80095a2:	6063      	str	r3, [r4, #4]
 80095a4:	bf04      	itt	eq
 80095a6:	1852      	addeq	r2, r2, r1
 80095a8:	6022      	streq	r2, [r4, #0]
 80095aa:	602c      	str	r4, [r5, #0]
 80095ac:	e7ec      	b.n	8009588 <_free_r+0x28>
 80095ae:	461a      	mov	r2, r3
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b10b      	cbz	r3, 80095b8 <_free_r+0x58>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d9fa      	bls.n	80095ae <_free_r+0x4e>
 80095b8:	6811      	ldr	r1, [r2, #0]
 80095ba:	1855      	adds	r5, r2, r1
 80095bc:	42a5      	cmp	r5, r4
 80095be:	d10b      	bne.n	80095d8 <_free_r+0x78>
 80095c0:	6824      	ldr	r4, [r4, #0]
 80095c2:	4421      	add	r1, r4
 80095c4:	1854      	adds	r4, r2, r1
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	d1dd      	bne.n	8009588 <_free_r+0x28>
 80095cc:	681c      	ldr	r4, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	6053      	str	r3, [r2, #4]
 80095d2:	4421      	add	r1, r4
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	e7d7      	b.n	8009588 <_free_r+0x28>
 80095d8:	d902      	bls.n	80095e0 <_free_r+0x80>
 80095da:	230c      	movs	r3, #12
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	e7d3      	b.n	8009588 <_free_r+0x28>
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf04      	itt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	bf04      	itt	eq
 80095f0:	1949      	addeq	r1, r1, r5
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	6054      	str	r4, [r2, #4]
 80095f6:	e7c7      	b.n	8009588 <_free_r+0x28>
 80095f8:	b003      	add	sp, #12
 80095fa:	bd30      	pop	{r4, r5, pc}
 80095fc:	20000230 	.word	0x20000230

08009600 <_malloc_r>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	1ccd      	adds	r5, r1, #3
 8009604:	f025 0503 	bic.w	r5, r5, #3
 8009608:	3508      	adds	r5, #8
 800960a:	2d0c      	cmp	r5, #12
 800960c:	bf38      	it	cc
 800960e:	250c      	movcc	r5, #12
 8009610:	2d00      	cmp	r5, #0
 8009612:	4606      	mov	r6, r0
 8009614:	db01      	blt.n	800961a <_malloc_r+0x1a>
 8009616:	42a9      	cmp	r1, r5
 8009618:	d903      	bls.n	8009622 <_malloc_r+0x22>
 800961a:	230c      	movs	r3, #12
 800961c:	6033      	str	r3, [r6, #0]
 800961e:	2000      	movs	r0, #0
 8009620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009622:	f000 fff1 	bl	800a608 <__malloc_lock>
 8009626:	4921      	ldr	r1, [pc, #132]	; (80096ac <_malloc_r+0xac>)
 8009628:	680a      	ldr	r2, [r1, #0]
 800962a:	4614      	mov	r4, r2
 800962c:	b99c      	cbnz	r4, 8009656 <_malloc_r+0x56>
 800962e:	4f20      	ldr	r7, [pc, #128]	; (80096b0 <_malloc_r+0xb0>)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	b923      	cbnz	r3, 800963e <_malloc_r+0x3e>
 8009634:	4621      	mov	r1, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fcd2 	bl	8009fe0 <_sbrk_r>
 800963c:	6038      	str	r0, [r7, #0]
 800963e:	4629      	mov	r1, r5
 8009640:	4630      	mov	r0, r6
 8009642:	f000 fccd 	bl	8009fe0 <_sbrk_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d123      	bne.n	8009692 <_malloc_r+0x92>
 800964a:	230c      	movs	r3, #12
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	4630      	mov	r0, r6
 8009650:	f000 ffe0 	bl	800a614 <__malloc_unlock>
 8009654:	e7e3      	b.n	800961e <_malloc_r+0x1e>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	1b5b      	subs	r3, r3, r5
 800965a:	d417      	bmi.n	800968c <_malloc_r+0x8c>
 800965c:	2b0b      	cmp	r3, #11
 800965e:	d903      	bls.n	8009668 <_malloc_r+0x68>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	441c      	add	r4, r3
 8009664:	6025      	str	r5, [r4, #0]
 8009666:	e004      	b.n	8009672 <_malloc_r+0x72>
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	42a2      	cmp	r2, r4
 800966c:	bf0c      	ite	eq
 800966e:	600b      	streq	r3, [r1, #0]
 8009670:	6053      	strne	r3, [r2, #4]
 8009672:	4630      	mov	r0, r6
 8009674:	f000 ffce 	bl	800a614 <__malloc_unlock>
 8009678:	f104 000b 	add.w	r0, r4, #11
 800967c:	1d23      	adds	r3, r4, #4
 800967e:	f020 0007 	bic.w	r0, r0, #7
 8009682:	1ac2      	subs	r2, r0, r3
 8009684:	d0cc      	beq.n	8009620 <_malloc_r+0x20>
 8009686:	1a1b      	subs	r3, r3, r0
 8009688:	50a3      	str	r3, [r4, r2]
 800968a:	e7c9      	b.n	8009620 <_malloc_r+0x20>
 800968c:	4622      	mov	r2, r4
 800968e:	6864      	ldr	r4, [r4, #4]
 8009690:	e7cc      	b.n	800962c <_malloc_r+0x2c>
 8009692:	1cc4      	adds	r4, r0, #3
 8009694:	f024 0403 	bic.w	r4, r4, #3
 8009698:	42a0      	cmp	r0, r4
 800969a:	d0e3      	beq.n	8009664 <_malloc_r+0x64>
 800969c:	1a21      	subs	r1, r4, r0
 800969e:	4630      	mov	r0, r6
 80096a0:	f000 fc9e 	bl	8009fe0 <_sbrk_r>
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1dd      	bne.n	8009664 <_malloc_r+0x64>
 80096a8:	e7cf      	b.n	800964a <_malloc_r+0x4a>
 80096aa:	bf00      	nop
 80096ac:	20000230 	.word	0x20000230
 80096b0:	20000234 	.word	0x20000234

080096b4 <__ssputs_r>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	688e      	ldr	r6, [r1, #8]
 80096ba:	429e      	cmp	r6, r3
 80096bc:	4682      	mov	sl, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	4690      	mov	r8, r2
 80096c2:	461f      	mov	r7, r3
 80096c4:	d838      	bhi.n	8009738 <__ssputs_r+0x84>
 80096c6:	898a      	ldrh	r2, [r1, #12]
 80096c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096cc:	d032      	beq.n	8009734 <__ssputs_r+0x80>
 80096ce:	6825      	ldr	r5, [r4, #0]
 80096d0:	6909      	ldr	r1, [r1, #16]
 80096d2:	eba5 0901 	sub.w	r9, r5, r1
 80096d6:	6965      	ldr	r5, [r4, #20]
 80096d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e0:	3301      	adds	r3, #1
 80096e2:	444b      	add	r3, r9
 80096e4:	106d      	asrs	r5, r5, #1
 80096e6:	429d      	cmp	r5, r3
 80096e8:	bf38      	it	cc
 80096ea:	461d      	movcc	r5, r3
 80096ec:	0553      	lsls	r3, r2, #21
 80096ee:	d531      	bpl.n	8009754 <__ssputs_r+0xa0>
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7ff ff85 	bl	8009600 <_malloc_r>
 80096f6:	4606      	mov	r6, r0
 80096f8:	b950      	cbnz	r0, 8009710 <__ssputs_r+0x5c>
 80096fa:	230c      	movs	r3, #12
 80096fc:	f8ca 3000 	str.w	r3, [sl]
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	6921      	ldr	r1, [r4, #16]
 8009712:	464a      	mov	r2, r9
 8009714:	f7ff fa4a 	bl	8008bac <memcpy>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800971e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	6126      	str	r6, [r4, #16]
 8009726:	6165      	str	r5, [r4, #20]
 8009728:	444e      	add	r6, r9
 800972a:	eba5 0509 	sub.w	r5, r5, r9
 800972e:	6026      	str	r6, [r4, #0]
 8009730:	60a5      	str	r5, [r4, #8]
 8009732:	463e      	mov	r6, r7
 8009734:	42be      	cmp	r6, r7
 8009736:	d900      	bls.n	800973a <__ssputs_r+0x86>
 8009738:	463e      	mov	r6, r7
 800973a:	4632      	mov	r2, r6
 800973c:	6820      	ldr	r0, [r4, #0]
 800973e:	4641      	mov	r1, r8
 8009740:	f000 ff48 	bl	800a5d4 <memmove>
 8009744:	68a3      	ldr	r3, [r4, #8]
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	4432      	add	r2, r6
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	2000      	movs	r0, #0
 8009752:	e7db      	b.n	800970c <__ssputs_r+0x58>
 8009754:	462a      	mov	r2, r5
 8009756:	f000 ff63 	bl	800a620 <_realloc_r>
 800975a:	4606      	mov	r6, r0
 800975c:	2800      	cmp	r0, #0
 800975e:	d1e1      	bne.n	8009724 <__ssputs_r+0x70>
 8009760:	6921      	ldr	r1, [r4, #16]
 8009762:	4650      	mov	r0, sl
 8009764:	f7ff fefc 	bl	8009560 <_free_r>
 8009768:	e7c7      	b.n	80096fa <__ssputs_r+0x46>
	...

0800976c <_svfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4698      	mov	r8, r3
 8009772:	898b      	ldrh	r3, [r1, #12]
 8009774:	061b      	lsls	r3, r3, #24
 8009776:	b09d      	sub	sp, #116	; 0x74
 8009778:	4607      	mov	r7, r0
 800977a:	460d      	mov	r5, r1
 800977c:	4614      	mov	r4, r2
 800977e:	d50e      	bpl.n	800979e <_svfiprintf_r+0x32>
 8009780:	690b      	ldr	r3, [r1, #16]
 8009782:	b963      	cbnz	r3, 800979e <_svfiprintf_r+0x32>
 8009784:	2140      	movs	r1, #64	; 0x40
 8009786:	f7ff ff3b 	bl	8009600 <_malloc_r>
 800978a:	6028      	str	r0, [r5, #0]
 800978c:	6128      	str	r0, [r5, #16]
 800978e:	b920      	cbnz	r0, 800979a <_svfiprintf_r+0x2e>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e0d1      	b.n	800993e <_svfiprintf_r+0x1d2>
 800979a:	2340      	movs	r3, #64	; 0x40
 800979c:	616b      	str	r3, [r5, #20]
 800979e:	2300      	movs	r3, #0
 80097a0:	9309      	str	r3, [sp, #36]	; 0x24
 80097a2:	2320      	movs	r3, #32
 80097a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ac:	2330      	movs	r3, #48	; 0x30
 80097ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009958 <_svfiprintf_r+0x1ec>
 80097b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b6:	f04f 0901 	mov.w	r9, #1
 80097ba:	4623      	mov	r3, r4
 80097bc:	469a      	mov	sl, r3
 80097be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c2:	b10a      	cbz	r2, 80097c8 <_svfiprintf_r+0x5c>
 80097c4:	2a25      	cmp	r2, #37	; 0x25
 80097c6:	d1f9      	bne.n	80097bc <_svfiprintf_r+0x50>
 80097c8:	ebba 0b04 	subs.w	fp, sl, r4
 80097cc:	d00b      	beq.n	80097e6 <_svfiprintf_r+0x7a>
 80097ce:	465b      	mov	r3, fp
 80097d0:	4622      	mov	r2, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	4638      	mov	r0, r7
 80097d6:	f7ff ff6d 	bl	80096b4 <__ssputs_r>
 80097da:	3001      	adds	r0, #1
 80097dc:	f000 80aa 	beq.w	8009934 <_svfiprintf_r+0x1c8>
 80097e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e2:	445a      	add	r2, fp
 80097e4:	9209      	str	r2, [sp, #36]	; 0x24
 80097e6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80a2 	beq.w	8009934 <_svfiprintf_r+0x1c8>
 80097f0:	2300      	movs	r3, #0
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fa:	f10a 0a01 	add.w	sl, sl, #1
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009806:	931a      	str	r3, [sp, #104]	; 0x68
 8009808:	4654      	mov	r4, sl
 800980a:	2205      	movs	r2, #5
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	4851      	ldr	r0, [pc, #324]	; (8009958 <_svfiprintf_r+0x1ec>)
 8009812:	f7f6 fd1d 	bl	8000250 <memchr>
 8009816:	9a04      	ldr	r2, [sp, #16]
 8009818:	b9d8      	cbnz	r0, 8009852 <_svfiprintf_r+0xe6>
 800981a:	06d0      	lsls	r0, r2, #27
 800981c:	bf44      	itt	mi
 800981e:	2320      	movmi	r3, #32
 8009820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009824:	0711      	lsls	r1, r2, #28
 8009826:	bf44      	itt	mi
 8009828:	232b      	movmi	r3, #43	; 0x2b
 800982a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982e:	f89a 3000 	ldrb.w	r3, [sl]
 8009832:	2b2a      	cmp	r3, #42	; 0x2a
 8009834:	d015      	beq.n	8009862 <_svfiprintf_r+0xf6>
 8009836:	9a07      	ldr	r2, [sp, #28]
 8009838:	4654      	mov	r4, sl
 800983a:	2000      	movs	r0, #0
 800983c:	f04f 0c0a 	mov.w	ip, #10
 8009840:	4621      	mov	r1, r4
 8009842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009846:	3b30      	subs	r3, #48	; 0x30
 8009848:	2b09      	cmp	r3, #9
 800984a:	d94e      	bls.n	80098ea <_svfiprintf_r+0x17e>
 800984c:	b1b0      	cbz	r0, 800987c <_svfiprintf_r+0x110>
 800984e:	9207      	str	r2, [sp, #28]
 8009850:	e014      	b.n	800987c <_svfiprintf_r+0x110>
 8009852:	eba0 0308 	sub.w	r3, r0, r8
 8009856:	fa09 f303 	lsl.w	r3, r9, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	46a2      	mov	sl, r4
 8009860:	e7d2      	b.n	8009808 <_svfiprintf_r+0x9c>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	1d19      	adds	r1, r3, #4
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	9103      	str	r1, [sp, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	bfbb      	ittet	lt
 800986e:	425b      	neglt	r3, r3
 8009870:	f042 0202 	orrlt.w	r2, r2, #2
 8009874:	9307      	strge	r3, [sp, #28]
 8009876:	9307      	strlt	r3, [sp, #28]
 8009878:	bfb8      	it	lt
 800987a:	9204      	strlt	r2, [sp, #16]
 800987c:	7823      	ldrb	r3, [r4, #0]
 800987e:	2b2e      	cmp	r3, #46	; 0x2e
 8009880:	d10c      	bne.n	800989c <_svfiprintf_r+0x130>
 8009882:	7863      	ldrb	r3, [r4, #1]
 8009884:	2b2a      	cmp	r3, #42	; 0x2a
 8009886:	d135      	bne.n	80098f4 <_svfiprintf_r+0x188>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d1a      	adds	r2, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9203      	str	r2, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfb8      	it	lt
 8009894:	f04f 33ff 	movlt.w	r3, #4294967295
 8009898:	3402      	adds	r4, #2
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009968 <_svfiprintf_r+0x1fc>
 80098a0:	7821      	ldrb	r1, [r4, #0]
 80098a2:	2203      	movs	r2, #3
 80098a4:	4650      	mov	r0, sl
 80098a6:	f7f6 fcd3 	bl	8000250 <memchr>
 80098aa:	b140      	cbz	r0, 80098be <_svfiprintf_r+0x152>
 80098ac:	2340      	movs	r3, #64	; 0x40
 80098ae:	eba0 000a 	sub.w	r0, r0, sl
 80098b2:	fa03 f000 	lsl.w	r0, r3, r0
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	4303      	orrs	r3, r0
 80098ba:	3401      	adds	r4, #1
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c2:	4826      	ldr	r0, [pc, #152]	; (800995c <_svfiprintf_r+0x1f0>)
 80098c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c8:	2206      	movs	r2, #6
 80098ca:	f7f6 fcc1 	bl	8000250 <memchr>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d038      	beq.n	8009944 <_svfiprintf_r+0x1d8>
 80098d2:	4b23      	ldr	r3, [pc, #140]	; (8009960 <_svfiprintf_r+0x1f4>)
 80098d4:	bb1b      	cbnz	r3, 800991e <_svfiprintf_r+0x1b2>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	3307      	adds	r3, #7
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	3308      	adds	r3, #8
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e4:	4433      	add	r3, r6
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	e767      	b.n	80097ba <_svfiprintf_r+0x4e>
 80098ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ee:	460c      	mov	r4, r1
 80098f0:	2001      	movs	r0, #1
 80098f2:	e7a5      	b.n	8009840 <_svfiprintf_r+0xd4>
 80098f4:	2300      	movs	r3, #0
 80098f6:	3401      	adds	r4, #1
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	4619      	mov	r1, r3
 80098fc:	f04f 0c0a 	mov.w	ip, #10
 8009900:	4620      	mov	r0, r4
 8009902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009906:	3a30      	subs	r2, #48	; 0x30
 8009908:	2a09      	cmp	r2, #9
 800990a:	d903      	bls.n	8009914 <_svfiprintf_r+0x1a8>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0c5      	beq.n	800989c <_svfiprintf_r+0x130>
 8009910:	9105      	str	r1, [sp, #20]
 8009912:	e7c3      	b.n	800989c <_svfiprintf_r+0x130>
 8009914:	fb0c 2101 	mla	r1, ip, r1, r2
 8009918:	4604      	mov	r4, r0
 800991a:	2301      	movs	r3, #1
 800991c:	e7f0      	b.n	8009900 <_svfiprintf_r+0x194>
 800991e:	ab03      	add	r3, sp, #12
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	462a      	mov	r2, r5
 8009924:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <_svfiprintf_r+0x1f8>)
 8009926:	a904      	add	r1, sp, #16
 8009928:	4638      	mov	r0, r7
 800992a:	f7fc fa81 	bl	8005e30 <_printf_float>
 800992e:	1c42      	adds	r2, r0, #1
 8009930:	4606      	mov	r6, r0
 8009932:	d1d6      	bne.n	80098e2 <_svfiprintf_r+0x176>
 8009934:	89ab      	ldrh	r3, [r5, #12]
 8009936:	065b      	lsls	r3, r3, #25
 8009938:	f53f af2c 	bmi.w	8009794 <_svfiprintf_r+0x28>
 800993c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800993e:	b01d      	add	sp, #116	; 0x74
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	ab03      	add	r3, sp, #12
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	462a      	mov	r2, r5
 800994a:	4b06      	ldr	r3, [pc, #24]	; (8009964 <_svfiprintf_r+0x1f8>)
 800994c:	a904      	add	r1, sp, #16
 800994e:	4638      	mov	r0, r7
 8009950:	f7fc fcfa 	bl	8006348 <_printf_i>
 8009954:	e7eb      	b.n	800992e <_svfiprintf_r+0x1c2>
 8009956:	bf00      	nop
 8009958:	0800b66c 	.word	0x0800b66c
 800995c:	0800b676 	.word	0x0800b676
 8009960:	08005e31 	.word	0x08005e31
 8009964:	080096b5 	.word	0x080096b5
 8009968:	0800b672 	.word	0x0800b672

0800996c <_sungetc_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	1c4b      	adds	r3, r1, #1
 8009970:	4614      	mov	r4, r2
 8009972:	d103      	bne.n	800997c <_sungetc_r+0x10>
 8009974:	f04f 35ff 	mov.w	r5, #4294967295
 8009978:	4628      	mov	r0, r5
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	8993      	ldrh	r3, [r2, #12]
 800997e:	f023 0320 	bic.w	r3, r3, #32
 8009982:	8193      	strh	r3, [r2, #12]
 8009984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009986:	6852      	ldr	r2, [r2, #4]
 8009988:	b2cd      	uxtb	r5, r1
 800998a:	b18b      	cbz	r3, 80099b0 <_sungetc_r+0x44>
 800998c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800998e:	4293      	cmp	r3, r2
 8009990:	dd08      	ble.n	80099a4 <_sungetc_r+0x38>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	1e5a      	subs	r2, r3, #1
 8009996:	6022      	str	r2, [r4, #0]
 8009998:	f803 5c01 	strb.w	r5, [r3, #-1]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	3301      	adds	r3, #1
 80099a0:	6063      	str	r3, [r4, #4]
 80099a2:	e7e9      	b.n	8009978 <_sungetc_r+0xc>
 80099a4:	4621      	mov	r1, r4
 80099a6:	f000 fbe3 	bl	800a170 <__submore>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d0f1      	beq.n	8009992 <_sungetc_r+0x26>
 80099ae:	e7e1      	b.n	8009974 <_sungetc_r+0x8>
 80099b0:	6921      	ldr	r1, [r4, #16]
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	b151      	cbz	r1, 80099cc <_sungetc_r+0x60>
 80099b6:	4299      	cmp	r1, r3
 80099b8:	d208      	bcs.n	80099cc <_sungetc_r+0x60>
 80099ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80099be:	42a9      	cmp	r1, r5
 80099c0:	d104      	bne.n	80099cc <_sungetc_r+0x60>
 80099c2:	3b01      	subs	r3, #1
 80099c4:	3201      	adds	r2, #1
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	6062      	str	r2, [r4, #4]
 80099ca:	e7d5      	b.n	8009978 <_sungetc_r+0xc>
 80099cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80099d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d4:	6363      	str	r3, [r4, #52]	; 0x34
 80099d6:	2303      	movs	r3, #3
 80099d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80099da:	4623      	mov	r3, r4
 80099dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7dc      	b.n	80099a0 <_sungetc_r+0x34>

080099e6 <__ssrefill_r>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80099ec:	b169      	cbz	r1, 8009a0a <__ssrefill_r+0x24>
 80099ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f2:	4299      	cmp	r1, r3
 80099f4:	d001      	beq.n	80099fa <__ssrefill_r+0x14>
 80099f6:	f7ff fdb3 	bl	8009560 <_free_r>
 80099fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	2000      	movs	r0, #0
 8009a00:	6360      	str	r0, [r4, #52]	; 0x34
 8009a02:	b113      	cbz	r3, 8009a0a <__ssrefill_r+0x24>
 8009a04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6063      	str	r3, [r4, #4]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f043 0320 	orr.w	r3, r3, #32
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1e:	e7f3      	b.n	8009a08 <__ssrefill_r+0x22>

08009a20 <__ssvfiscanf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009a30:	49b2      	ldr	r1, [pc, #712]	; (8009cfc <__ssvfiscanf_r+0x2dc>)
 8009a32:	91a0      	str	r1, [sp, #640]	; 0x280
 8009a34:	f10d 0804 	add.w	r8, sp, #4
 8009a38:	49b1      	ldr	r1, [pc, #708]	; (8009d00 <__ssvfiscanf_r+0x2e0>)
 8009a3a:	4fb2      	ldr	r7, [pc, #712]	; (8009d04 <__ssvfiscanf_r+0x2e4>)
 8009a3c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8009d08 <__ssvfiscanf_r+0x2e8>
 8009a40:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009a44:	4606      	mov	r6, r0
 8009a46:	91a1      	str	r1, [sp, #644]	; 0x284
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	f892 a000 	ldrb.w	sl, [r2]
 8009a4e:	f1ba 0f00 	cmp.w	sl, #0
 8009a52:	f000 8151 	beq.w	8009cf8 <__ssvfiscanf_r+0x2d8>
 8009a56:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009a5a:	f013 0308 	ands.w	r3, r3, #8
 8009a5e:	f102 0501 	add.w	r5, r2, #1
 8009a62:	d019      	beq.n	8009a98 <__ssvfiscanf_r+0x78>
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dd0f      	ble.n	8009a8a <__ssvfiscanf_r+0x6a>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	781a      	ldrb	r2, [r3, #0]
 8009a6e:	5cba      	ldrb	r2, [r7, r2]
 8009a70:	0712      	lsls	r2, r2, #28
 8009a72:	d401      	bmi.n	8009a78 <__ssvfiscanf_r+0x58>
 8009a74:	462a      	mov	r2, r5
 8009a76:	e7e8      	b.n	8009a4a <__ssvfiscanf_r+0x2a>
 8009a78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	9245      	str	r2, [sp, #276]	; 0x114
 8009a7e:	6862      	ldr	r2, [r4, #4]
 8009a80:	3301      	adds	r3, #1
 8009a82:	3a01      	subs	r2, #1
 8009a84:	6062      	str	r2, [r4, #4]
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	e7ec      	b.n	8009a64 <__ssvfiscanf_r+0x44>
 8009a8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4798      	blx	r3
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0e9      	beq.n	8009a6a <__ssvfiscanf_r+0x4a>
 8009a96:	e7ed      	b.n	8009a74 <__ssvfiscanf_r+0x54>
 8009a98:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009a9c:	f040 8083 	bne.w	8009ba6 <__ssvfiscanf_r+0x186>
 8009aa0:	9341      	str	r3, [sp, #260]	; 0x104
 8009aa2:	9343      	str	r3, [sp, #268]	; 0x10c
 8009aa4:	7853      	ldrb	r3, [r2, #1]
 8009aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa8:	bf02      	ittt	eq
 8009aaa:	2310      	moveq	r3, #16
 8009aac:	1c95      	addeq	r5, r2, #2
 8009aae:	9341      	streq	r3, [sp, #260]	; 0x104
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	46ab      	mov	fp, r5
 8009ab4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009ab8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d91d      	bls.n	8009afc <__ssvfiscanf_r+0xdc>
 8009ac0:	4891      	ldr	r0, [pc, #580]	; (8009d08 <__ssvfiscanf_r+0x2e8>)
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	f7f6 fbc4 	bl	8000250 <memchr>
 8009ac8:	b140      	cbz	r0, 8009adc <__ssvfiscanf_r+0xbc>
 8009aca:	2301      	movs	r3, #1
 8009acc:	eba0 0009 	sub.w	r0, r0, r9
 8009ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ad6:	4318      	orrs	r0, r3
 8009ad8:	9041      	str	r0, [sp, #260]	; 0x104
 8009ada:	465d      	mov	r5, fp
 8009adc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ae0:	2b78      	cmp	r3, #120	; 0x78
 8009ae2:	d806      	bhi.n	8009af2 <__ssvfiscanf_r+0xd2>
 8009ae4:	2b57      	cmp	r3, #87	; 0x57
 8009ae6:	d810      	bhi.n	8009b0a <__ssvfiscanf_r+0xea>
 8009ae8:	2b25      	cmp	r3, #37	; 0x25
 8009aea:	d05c      	beq.n	8009ba6 <__ssvfiscanf_r+0x186>
 8009aec:	d856      	bhi.n	8009b9c <__ssvfiscanf_r+0x17c>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d074      	beq.n	8009bdc <__ssvfiscanf_r+0x1bc>
 8009af2:	2303      	movs	r3, #3
 8009af4:	9347      	str	r3, [sp, #284]	; 0x11c
 8009af6:	230a      	movs	r3, #10
 8009af8:	9342      	str	r3, [sp, #264]	; 0x108
 8009afa:	e081      	b.n	8009c00 <__ssvfiscanf_r+0x1e0>
 8009afc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009afe:	fb02 1303 	mla	r3, r2, r3, r1
 8009b02:	3b30      	subs	r3, #48	; 0x30
 8009b04:	9343      	str	r3, [sp, #268]	; 0x10c
 8009b06:	465d      	mov	r5, fp
 8009b08:	e7d3      	b.n	8009ab2 <__ssvfiscanf_r+0x92>
 8009b0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009b0e:	2a20      	cmp	r2, #32
 8009b10:	d8ef      	bhi.n	8009af2 <__ssvfiscanf_r+0xd2>
 8009b12:	a101      	add	r1, pc, #4	; (adr r1, 8009b18 <__ssvfiscanf_r+0xf8>)
 8009b14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b18:	08009beb 	.word	0x08009beb
 8009b1c:	08009af3 	.word	0x08009af3
 8009b20:	08009af3 	.word	0x08009af3
 8009b24:	08009c49 	.word	0x08009c49
 8009b28:	08009af3 	.word	0x08009af3
 8009b2c:	08009af3 	.word	0x08009af3
 8009b30:	08009af3 	.word	0x08009af3
 8009b34:	08009af3 	.word	0x08009af3
 8009b38:	08009af3 	.word	0x08009af3
 8009b3c:	08009af3 	.word	0x08009af3
 8009b40:	08009af3 	.word	0x08009af3
 8009b44:	08009c5f 	.word	0x08009c5f
 8009b48:	08009c35 	.word	0x08009c35
 8009b4c:	08009ba3 	.word	0x08009ba3
 8009b50:	08009ba3 	.word	0x08009ba3
 8009b54:	08009ba3 	.word	0x08009ba3
 8009b58:	08009af3 	.word	0x08009af3
 8009b5c:	08009c39 	.word	0x08009c39
 8009b60:	08009af3 	.word	0x08009af3
 8009b64:	08009af3 	.word	0x08009af3
 8009b68:	08009af3 	.word	0x08009af3
 8009b6c:	08009af3 	.word	0x08009af3
 8009b70:	08009c6f 	.word	0x08009c6f
 8009b74:	08009c41 	.word	0x08009c41
 8009b78:	08009be3 	.word	0x08009be3
 8009b7c:	08009af3 	.word	0x08009af3
 8009b80:	08009af3 	.word	0x08009af3
 8009b84:	08009c6b 	.word	0x08009c6b
 8009b88:	08009af3 	.word	0x08009af3
 8009b8c:	08009c35 	.word	0x08009c35
 8009b90:	08009af3 	.word	0x08009af3
 8009b94:	08009af3 	.word	0x08009af3
 8009b98:	08009beb 	.word	0x08009beb
 8009b9c:	3b45      	subs	r3, #69	; 0x45
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d8a7      	bhi.n	8009af2 <__ssvfiscanf_r+0xd2>
 8009ba2:	2305      	movs	r3, #5
 8009ba4:	e02b      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dd0d      	ble.n	8009bc8 <__ssvfiscanf_r+0x1a8>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	4552      	cmp	r2, sl
 8009bb2:	f040 80a1 	bne.w	8009cf8 <__ssvfiscanf_r+0x2d8>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	6862      	ldr	r2, [r4, #4]
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	6062      	str	r2, [r4, #4]
 8009bc4:	9345      	str	r3, [sp, #276]	; 0x114
 8009bc6:	e755      	b.n	8009a74 <__ssvfiscanf_r+0x54>
 8009bc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4798      	blx	r3
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d0eb      	beq.n	8009bac <__ssvfiscanf_r+0x18c>
 8009bd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f040 8084 	bne.w	8009ce4 <__ssvfiscanf_r+0x2c4>
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	e086      	b.n	8009cf0 <__ssvfiscanf_r+0x2d0>
 8009be2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009be4:	f042 0220 	orr.w	r2, r2, #32
 8009be8:	9241      	str	r2, [sp, #260]	; 0x104
 8009bea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf0:	9241      	str	r2, [sp, #260]	; 0x104
 8009bf2:	2210      	movs	r2, #16
 8009bf4:	2b6f      	cmp	r3, #111	; 0x6f
 8009bf6:	9242      	str	r2, [sp, #264]	; 0x108
 8009bf8:	bf34      	ite	cc
 8009bfa:	2303      	movcc	r3, #3
 8009bfc:	2304      	movcs	r3, #4
 8009bfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dd41      	ble.n	8009c8a <__ssvfiscanf_r+0x26a>
 8009c06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c08:	0659      	lsls	r1, r3, #25
 8009c0a:	d404      	bmi.n	8009c16 <__ssvfiscanf_r+0x1f6>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	781a      	ldrb	r2, [r3, #0]
 8009c10:	5cba      	ldrb	r2, [r7, r2]
 8009c12:	0712      	lsls	r2, r2, #28
 8009c14:	d440      	bmi.n	8009c98 <__ssvfiscanf_r+0x278>
 8009c16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	dc4f      	bgt.n	8009cbc <__ssvfiscanf_r+0x29c>
 8009c1c:	466b      	mov	r3, sp
 8009c1e:	4622      	mov	r2, r4
 8009c20:	a941      	add	r1, sp, #260	; 0x104
 8009c22:	4630      	mov	r0, r6
 8009c24:	f000 f874 	bl	8009d10 <_scanf_chars>
 8009c28:	2801      	cmp	r0, #1
 8009c2a:	d065      	beq.n	8009cf8 <__ssvfiscanf_r+0x2d8>
 8009c2c:	2802      	cmp	r0, #2
 8009c2e:	f47f af21 	bne.w	8009a74 <__ssvfiscanf_r+0x54>
 8009c32:	e7cf      	b.n	8009bd4 <__ssvfiscanf_r+0x1b4>
 8009c34:	220a      	movs	r2, #10
 8009c36:	e7dd      	b.n	8009bf4 <__ssvfiscanf_r+0x1d4>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9342      	str	r3, [sp, #264]	; 0x108
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e7de      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009c40:	2308      	movs	r3, #8
 8009c42:	9342      	str	r3, [sp, #264]	; 0x108
 8009c44:	2304      	movs	r3, #4
 8009c46:	e7da      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	f000 f9d8 	bl	800a000 <__sccl>
 8009c50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c56:	9341      	str	r3, [sp, #260]	; 0x104
 8009c58:	4605      	mov	r5, r0
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7cf      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009c5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c64:	9341      	str	r3, [sp, #260]	; 0x104
 8009c66:	2300      	movs	r3, #0
 8009c68:	e7c9      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e7c7      	b.n	8009bfe <__ssvfiscanf_r+0x1de>
 8009c6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009c70:	06c3      	lsls	r3, r0, #27
 8009c72:	f53f aeff 	bmi.w	8009a74 <__ssvfiscanf_r+0x54>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c7a:	1d19      	adds	r1, r3, #4
 8009c7c:	9100      	str	r1, [sp, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	07c0      	lsls	r0, r0, #31
 8009c82:	bf4c      	ite	mi
 8009c84:	801a      	strhmi	r2, [r3, #0]
 8009c86:	601a      	strpl	r2, [r3, #0]
 8009c88:	e6f4      	b.n	8009a74 <__ssvfiscanf_r+0x54>
 8009c8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4798      	blx	r3
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d0b7      	beq.n	8009c06 <__ssvfiscanf_r+0x1e6>
 8009c96:	e79d      	b.n	8009bd4 <__ssvfiscanf_r+0x1b4>
 8009c98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c9a:	3201      	adds	r2, #1
 8009c9c:	9245      	str	r2, [sp, #276]	; 0x114
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	3a01      	subs	r2, #1
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	6062      	str	r2, [r4, #4]
 8009ca6:	dd02      	ble.n	8009cae <__ssvfiscanf_r+0x28e>
 8009ca8:	3301      	adds	r3, #1
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	e7ae      	b.n	8009c0c <__ssvfiscanf_r+0x1ec>
 8009cae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	4798      	blx	r3
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0a8      	beq.n	8009c0c <__ssvfiscanf_r+0x1ec>
 8009cba:	e78b      	b.n	8009bd4 <__ssvfiscanf_r+0x1b4>
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	dc06      	bgt.n	8009cce <__ssvfiscanf_r+0x2ae>
 8009cc0:	466b      	mov	r3, sp
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	a941      	add	r1, sp, #260	; 0x104
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f000 f87a 	bl	8009dc0 <_scanf_i>
 8009ccc:	e7ac      	b.n	8009c28 <__ssvfiscanf_r+0x208>
 8009cce:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <__ssvfiscanf_r+0x2ec>)
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f43f aecf 	beq.w	8009a74 <__ssvfiscanf_r+0x54>
 8009cd6:	466b      	mov	r3, sp
 8009cd8:	4622      	mov	r2, r4
 8009cda:	a941      	add	r1, sp, #260	; 0x104
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7fc fc59 	bl	8006594 <_scanf_float>
 8009ce2:	e7a1      	b.n	8009c28 <__ssvfiscanf_r+0x208>
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009cea:	bf18      	it	ne
 8009cec:	f04f 30ff 	movne.w	r0, #4294967295
 8009cf0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009cfa:	e7f9      	b.n	8009cf0 <__ssvfiscanf_r+0x2d0>
 8009cfc:	0800996d 	.word	0x0800996d
 8009d00:	080099e7 	.word	0x080099e7
 8009d04:	0800b2f9 	.word	0x0800b2f9
 8009d08:	0800b672 	.word	0x0800b672
 8009d0c:	08006595 	.word	0x08006595

08009d10 <_scanf_chars>:
 8009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	4615      	mov	r5, r2
 8009d16:	688a      	ldr	r2, [r1, #8]
 8009d18:	4680      	mov	r8, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b932      	cbnz	r2, 8009d2c <_scanf_chars+0x1c>
 8009d1e:	698a      	ldr	r2, [r1, #24]
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	bf0c      	ite	eq
 8009d24:	2201      	moveq	r2, #1
 8009d26:	f04f 32ff 	movne.w	r2, #4294967295
 8009d2a:	608a      	str	r2, [r1, #8]
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009dbc <_scanf_chars+0xac>
 8009d32:	06d1      	lsls	r1, r2, #27
 8009d34:	bf5f      	itttt	pl
 8009d36:	681a      	ldrpl	r2, [r3, #0]
 8009d38:	1d11      	addpl	r1, r2, #4
 8009d3a:	6019      	strpl	r1, [r3, #0]
 8009d3c:	6816      	ldrpl	r6, [r2, #0]
 8009d3e:	2700      	movs	r7, #0
 8009d40:	69a0      	ldr	r0, [r4, #24]
 8009d42:	b188      	cbz	r0, 8009d68 <_scanf_chars+0x58>
 8009d44:	2801      	cmp	r0, #1
 8009d46:	d107      	bne.n	8009d58 <_scanf_chars+0x48>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	6963      	ldr	r3, [r4, #20]
 8009d4e:	5c9b      	ldrb	r3, [r3, r2]
 8009d50:	b953      	cbnz	r3, 8009d68 <_scanf_chars+0x58>
 8009d52:	bb27      	cbnz	r7, 8009d9e <_scanf_chars+0x8e>
 8009d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d58:	2802      	cmp	r0, #2
 8009d5a:	d120      	bne.n	8009d9e <_scanf_chars+0x8e>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009d64:	071b      	lsls	r3, r3, #28
 8009d66:	d41a      	bmi.n	8009d9e <_scanf_chars+0x8e>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	06da      	lsls	r2, r3, #27
 8009d6c:	bf5e      	ittt	pl
 8009d6e:	682b      	ldrpl	r3, [r5, #0]
 8009d70:	781b      	ldrbpl	r3, [r3, #0]
 8009d72:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009d76:	682a      	ldr	r2, [r5, #0]
 8009d78:	686b      	ldr	r3, [r5, #4]
 8009d7a:	3201      	adds	r2, #1
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	68a2      	ldr	r2, [r4, #8]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	3a01      	subs	r2, #1
 8009d84:	606b      	str	r3, [r5, #4]
 8009d86:	3701      	adds	r7, #1
 8009d88:	60a2      	str	r2, [r4, #8]
 8009d8a:	b142      	cbz	r2, 8009d9e <_scanf_chars+0x8e>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dcd7      	bgt.n	8009d40 <_scanf_chars+0x30>
 8009d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d94:	4629      	mov	r1, r5
 8009d96:	4640      	mov	r0, r8
 8009d98:	4798      	blx	r3
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0d0      	beq.n	8009d40 <_scanf_chars+0x30>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	f013 0310 	ands.w	r3, r3, #16
 8009da4:	d105      	bne.n	8009db2 <_scanf_chars+0xa2>
 8009da6:	68e2      	ldr	r2, [r4, #12]
 8009da8:	3201      	adds	r2, #1
 8009daa:	60e2      	str	r2, [r4, #12]
 8009dac:	69a2      	ldr	r2, [r4, #24]
 8009dae:	b102      	cbz	r2, 8009db2 <_scanf_chars+0xa2>
 8009db0:	7033      	strb	r3, [r6, #0]
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	441f      	add	r7, r3
 8009db6:	6127      	str	r7, [r4, #16]
 8009db8:	2000      	movs	r0, #0
 8009dba:	e7cb      	b.n	8009d54 <_scanf_chars+0x44>
 8009dbc:	0800b2f9 	.word	0x0800b2f9

08009dc0 <_scanf_i>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	4b74      	ldr	r3, [pc, #464]	; (8009f98 <_scanf_i+0x1d8>)
 8009dc8:	460c      	mov	r4, r1
 8009dca:	4682      	mov	sl, r0
 8009dcc:	4616      	mov	r6, r2
 8009dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009dda:	4b70      	ldr	r3, [pc, #448]	; (8009f9c <_scanf_i+0x1dc>)
 8009ddc:	69a1      	ldr	r1, [r4, #24]
 8009dde:	4a70      	ldr	r2, [pc, #448]	; (8009fa0 <_scanf_i+0x1e0>)
 8009de0:	2903      	cmp	r1, #3
 8009de2:	bf18      	it	ne
 8009de4:	461a      	movne	r2, r3
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009df0:	bf88      	it	hi
 8009df2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009df6:	4627      	mov	r7, r4
 8009df8:	bf82      	ittt	hi
 8009dfa:	eb03 0905 	addhi.w	r9, r3, r5
 8009dfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e02:	60a3      	strhi	r3, [r4, #8]
 8009e04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009e08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009e0c:	bf98      	it	ls
 8009e0e:	f04f 0900 	movls.w	r9, #0
 8009e12:	6023      	str	r3, [r4, #0]
 8009e14:	463d      	mov	r5, r7
 8009e16:	f04f 0b00 	mov.w	fp, #0
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	ab03      	add	r3, sp, #12
 8009e1e:	7809      	ldrb	r1, [r1, #0]
 8009e20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f7f6 fa13 	bl	8000250 <memchr>
 8009e2a:	b328      	cbz	r0, 8009e78 <_scanf_i+0xb8>
 8009e2c:	f1bb 0f01 	cmp.w	fp, #1
 8009e30:	d159      	bne.n	8009ee6 <_scanf_i+0x126>
 8009e32:	6862      	ldr	r2, [r4, #4]
 8009e34:	b92a      	cbnz	r2, 8009e42 <_scanf_i+0x82>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	2308      	movs	r3, #8
 8009e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e3e:	6063      	str	r3, [r4, #4]
 8009e40:	6022      	str	r2, [r4, #0]
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	68a2      	ldr	r2, [r4, #8]
 8009e4c:	1e51      	subs	r1, r2, #1
 8009e4e:	60a1      	str	r1, [r4, #8]
 8009e50:	b192      	cbz	r2, 8009e78 <_scanf_i+0xb8>
 8009e52:	6832      	ldr	r2, [r6, #0]
 8009e54:	1c51      	adds	r1, r2, #1
 8009e56:	6031      	str	r1, [r6, #0]
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	f805 2b01 	strb.w	r2, [r5], #1
 8009e5e:	6872      	ldr	r2, [r6, #4]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	6072      	str	r2, [r6, #4]
 8009e66:	dc07      	bgt.n	8009e78 <_scanf_i+0xb8>
 8009e68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4650      	mov	r0, sl
 8009e70:	4790      	blx	r2
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f040 8085 	bne.w	8009f82 <_scanf_i+0x1c2>
 8009e78:	f10b 0b01 	add.w	fp, fp, #1
 8009e7c:	f1bb 0f03 	cmp.w	fp, #3
 8009e80:	d1cb      	bne.n	8009e1a <_scanf_i+0x5a>
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	b90b      	cbnz	r3, 8009e8a <_scanf_i+0xca>
 8009e86:	230a      	movs	r3, #10
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	4945      	ldr	r1, [pc, #276]	; (8009fa4 <_scanf_i+0x1e4>)
 8009e8e:	6960      	ldr	r0, [r4, #20]
 8009e90:	1ac9      	subs	r1, r1, r3
 8009e92:	f000 f8b5 	bl	800a000 <__sccl>
 8009e96:	f04f 0b00 	mov.w	fp, #0
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d03d      	beq.n	8009f1e <_scanf_i+0x15e>
 8009ea2:	6831      	ldr	r1, [r6, #0]
 8009ea4:	6960      	ldr	r0, [r4, #20]
 8009ea6:	f891 c000 	ldrb.w	ip, [r1]
 8009eaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d035      	beq.n	8009f1e <_scanf_i+0x15e>
 8009eb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009eb6:	d124      	bne.n	8009f02 <_scanf_i+0x142>
 8009eb8:	0510      	lsls	r0, r2, #20
 8009eba:	d522      	bpl.n	8009f02 <_scanf_i+0x142>
 8009ebc:	f10b 0b01 	add.w	fp, fp, #1
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	d003      	beq.n	8009ece <_scanf_i+0x10e>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6873      	ldr	r3, [r6, #4]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	6073      	str	r3, [r6, #4]
 8009ed6:	dd1b      	ble.n	8009f10 <_scanf_i+0x150>
 8009ed8:	6833      	ldr	r3, [r6, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	60a3      	str	r3, [r4, #8]
 8009ee4:	e7d9      	b.n	8009e9a <_scanf_i+0xda>
 8009ee6:	f1bb 0f02 	cmp.w	fp, #2
 8009eea:	d1ae      	bne.n	8009e4a <_scanf_i+0x8a>
 8009eec:	6822      	ldr	r2, [r4, #0]
 8009eee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009ef2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ef6:	d1bf      	bne.n	8009e78 <_scanf_i+0xb8>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	6063      	str	r3, [r4, #4]
 8009efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f00:	e7a2      	b.n	8009e48 <_scanf_i+0x88>
 8009f02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	780b      	ldrb	r3, [r1, #0]
 8009f0a:	f805 3b01 	strb.w	r3, [r5], #1
 8009f0e:	e7de      	b.n	8009ece <_scanf_i+0x10e>
 8009f10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f14:	4631      	mov	r1, r6
 8009f16:	4650      	mov	r0, sl
 8009f18:	4798      	blx	r3
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0df      	beq.n	8009ede <_scanf_i+0x11e>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	05d9      	lsls	r1, r3, #23
 8009f22:	d50d      	bpl.n	8009f40 <_scanf_i+0x180>
 8009f24:	42bd      	cmp	r5, r7
 8009f26:	d909      	bls.n	8009f3c <_scanf_i+0x17c>
 8009f28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f30:	4632      	mov	r2, r6
 8009f32:	4650      	mov	r0, sl
 8009f34:	4798      	blx	r3
 8009f36:	f105 39ff 	add.w	r9, r5, #4294967295
 8009f3a:	464d      	mov	r5, r9
 8009f3c:	42bd      	cmp	r5, r7
 8009f3e:	d028      	beq.n	8009f92 <_scanf_i+0x1d2>
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	f012 0210 	ands.w	r2, r2, #16
 8009f46:	d113      	bne.n	8009f70 <_scanf_i+0x1b0>
 8009f48:	702a      	strb	r2, [r5, #0]
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	9e01      	ldr	r6, [sp, #4]
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4650      	mov	r0, sl
 8009f52:	47b0      	blx	r6
 8009f54:	f8d8 3000 	ldr.w	r3, [r8]
 8009f58:	6821      	ldr	r1, [r4, #0]
 8009f5a:	1d1a      	adds	r2, r3, #4
 8009f5c:	f8c8 2000 	str.w	r2, [r8]
 8009f60:	f011 0f20 	tst.w	r1, #32
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	d00f      	beq.n	8009f88 <_scanf_i+0x1c8>
 8009f68:	6018      	str	r0, [r3, #0]
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	60e3      	str	r3, [r4, #12]
 8009f70:	1bed      	subs	r5, r5, r7
 8009f72:	44ab      	add	fp, r5
 8009f74:	6925      	ldr	r5, [r4, #16]
 8009f76:	445d      	add	r5, fp
 8009f78:	6125      	str	r5, [r4, #16]
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	b007      	add	sp, #28
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	f04f 0b00 	mov.w	fp, #0
 8009f86:	e7ca      	b.n	8009f1e <_scanf_i+0x15e>
 8009f88:	07ca      	lsls	r2, r1, #31
 8009f8a:	bf4c      	ite	mi
 8009f8c:	8018      	strhmi	r0, [r3, #0]
 8009f8e:	6018      	strpl	r0, [r3, #0]
 8009f90:	e7eb      	b.n	8009f6a <_scanf_i+0x1aa>
 8009f92:	2001      	movs	r0, #1
 8009f94:	e7f2      	b.n	8009f7c <_scanf_i+0x1bc>
 8009f96:	bf00      	nop
 8009f98:	0800b248 	.word	0x0800b248
 8009f9c:	0800a16d 	.word	0x0800a16d
 8009fa0:	08007809 	.word	0x08007809
 8009fa4:	0800b696 	.word	0x0800b696

08009fa8 <_read_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	; (8009fc8 <_read_r+0x20>)
 8009fac:	4604      	mov	r4, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	602a      	str	r2, [r5, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f7f7 fe1e 	bl	8001bf8 <_read>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_read_r+0x1e>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_read_r+0x1e>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	20010620 	.word	0x20010620
 8009fcc:	00000000 	.word	0x00000000

08009fd0 <nan>:
 8009fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009fd8 <nan+0x8>
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	7ff80000 	.word	0x7ff80000

08009fe0 <_sbrk_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d06      	ldr	r5, [pc, #24]	; (8009ffc <_sbrk_r+0x1c>)
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	602b      	str	r3, [r5, #0]
 8009fec:	f7f7 fe72 	bl	8001cd4 <_sbrk>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_sbrk_r+0x1a>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_sbrk_r+0x1a>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20010620 	.word	0x20010620

0800a000 <__sccl>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	780b      	ldrb	r3, [r1, #0]
 800a004:	4604      	mov	r4, r0
 800a006:	2b5e      	cmp	r3, #94	; 0x5e
 800a008:	bf0b      	itete	eq
 800a00a:	784b      	ldrbeq	r3, [r1, #1]
 800a00c:	1c48      	addne	r0, r1, #1
 800a00e:	1c88      	addeq	r0, r1, #2
 800a010:	2200      	movne	r2, #0
 800a012:	bf08      	it	eq
 800a014:	2201      	moveq	r2, #1
 800a016:	1e61      	subs	r1, r4, #1
 800a018:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a01c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a020:	42a9      	cmp	r1, r5
 800a022:	d1fb      	bne.n	800a01c <__sccl+0x1c>
 800a024:	b90b      	cbnz	r3, 800a02a <__sccl+0x2a>
 800a026:	3801      	subs	r0, #1
 800a028:	bd70      	pop	{r4, r5, r6, pc}
 800a02a:	f082 0101 	eor.w	r1, r2, #1
 800a02e:	54e1      	strb	r1, [r4, r3]
 800a030:	1c42      	adds	r2, r0, #1
 800a032:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a036:	2d2d      	cmp	r5, #45	; 0x2d
 800a038:	f102 36ff 	add.w	r6, r2, #4294967295
 800a03c:	4610      	mov	r0, r2
 800a03e:	d006      	beq.n	800a04e <__sccl+0x4e>
 800a040:	2d5d      	cmp	r5, #93	; 0x5d
 800a042:	d0f1      	beq.n	800a028 <__sccl+0x28>
 800a044:	b90d      	cbnz	r5, 800a04a <__sccl+0x4a>
 800a046:	4630      	mov	r0, r6
 800a048:	e7ee      	b.n	800a028 <__sccl+0x28>
 800a04a:	462b      	mov	r3, r5
 800a04c:	e7ef      	b.n	800a02e <__sccl+0x2e>
 800a04e:	7816      	ldrb	r6, [r2, #0]
 800a050:	2e5d      	cmp	r6, #93	; 0x5d
 800a052:	d0fa      	beq.n	800a04a <__sccl+0x4a>
 800a054:	42b3      	cmp	r3, r6
 800a056:	dcf8      	bgt.n	800a04a <__sccl+0x4a>
 800a058:	4618      	mov	r0, r3
 800a05a:	3001      	adds	r0, #1
 800a05c:	4286      	cmp	r6, r0
 800a05e:	5421      	strb	r1, [r4, r0]
 800a060:	dcfb      	bgt.n	800a05a <__sccl+0x5a>
 800a062:	43d8      	mvns	r0, r3
 800a064:	4430      	add	r0, r6
 800a066:	1c5d      	adds	r5, r3, #1
 800a068:	42b3      	cmp	r3, r6
 800a06a:	bfa8      	it	ge
 800a06c:	2000      	movge	r0, #0
 800a06e:	182b      	adds	r3, r5, r0
 800a070:	3202      	adds	r2, #2
 800a072:	e7de      	b.n	800a032 <__sccl+0x32>

0800a074 <_strtoul_l.isra.0>:
 800a074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a078:	4e3b      	ldr	r6, [pc, #236]	; (800a168 <_strtoul_l.isra.0+0xf4>)
 800a07a:	4686      	mov	lr, r0
 800a07c:	468c      	mov	ip, r1
 800a07e:	4660      	mov	r0, ip
 800a080:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a084:	5da5      	ldrb	r5, [r4, r6]
 800a086:	f015 0508 	ands.w	r5, r5, #8
 800a08a:	d1f8      	bne.n	800a07e <_strtoul_l.isra.0+0xa>
 800a08c:	2c2d      	cmp	r4, #45	; 0x2d
 800a08e:	d134      	bne.n	800a0fa <_strtoul_l.isra.0+0x86>
 800a090:	f89c 4000 	ldrb.w	r4, [ip]
 800a094:	f04f 0801 	mov.w	r8, #1
 800a098:	f100 0c02 	add.w	ip, r0, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d05e      	beq.n	800a15e <_strtoul_l.isra.0+0xea>
 800a0a0:	2b10      	cmp	r3, #16
 800a0a2:	d10c      	bne.n	800a0be <_strtoul_l.isra.0+0x4a>
 800a0a4:	2c30      	cmp	r4, #48	; 0x30
 800a0a6:	d10a      	bne.n	800a0be <_strtoul_l.isra.0+0x4a>
 800a0a8:	f89c 0000 	ldrb.w	r0, [ip]
 800a0ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0b0:	2858      	cmp	r0, #88	; 0x58
 800a0b2:	d14f      	bne.n	800a154 <_strtoul_l.isra.0+0xe0>
 800a0b4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f10c 0c02 	add.w	ip, ip, #2
 800a0be:	f04f 37ff 	mov.w	r7, #4294967295
 800a0c2:	2500      	movs	r5, #0
 800a0c4:	fbb7 f7f3 	udiv	r7, r7, r3
 800a0c8:	fb03 f907 	mul.w	r9, r3, r7
 800a0cc:	ea6f 0909 	mvn.w	r9, r9
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a0d6:	2e09      	cmp	r6, #9
 800a0d8:	d818      	bhi.n	800a10c <_strtoul_l.isra.0+0x98>
 800a0da:	4634      	mov	r4, r6
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	dd24      	ble.n	800a12a <_strtoul_l.isra.0+0xb6>
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	db1f      	blt.n	800a124 <_strtoul_l.isra.0+0xb0>
 800a0e4:	4287      	cmp	r7, r0
 800a0e6:	d31d      	bcc.n	800a124 <_strtoul_l.isra.0+0xb0>
 800a0e8:	d101      	bne.n	800a0ee <_strtoul_l.isra.0+0x7a>
 800a0ea:	45a1      	cmp	r9, r4
 800a0ec:	db1a      	blt.n	800a124 <_strtoul_l.isra.0+0xb0>
 800a0ee:	fb00 4003 	mla	r0, r0, r3, r4
 800a0f2:	2501      	movs	r5, #1
 800a0f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a0f8:	e7eb      	b.n	800a0d2 <_strtoul_l.isra.0+0x5e>
 800a0fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a0fc:	bf08      	it	eq
 800a0fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a102:	46a8      	mov	r8, r5
 800a104:	bf08      	it	eq
 800a106:	f100 0c02 	addeq.w	ip, r0, #2
 800a10a:	e7c7      	b.n	800a09c <_strtoul_l.isra.0+0x28>
 800a10c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a110:	2e19      	cmp	r6, #25
 800a112:	d801      	bhi.n	800a118 <_strtoul_l.isra.0+0xa4>
 800a114:	3c37      	subs	r4, #55	; 0x37
 800a116:	e7e1      	b.n	800a0dc <_strtoul_l.isra.0+0x68>
 800a118:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a11c:	2e19      	cmp	r6, #25
 800a11e:	d804      	bhi.n	800a12a <_strtoul_l.isra.0+0xb6>
 800a120:	3c57      	subs	r4, #87	; 0x57
 800a122:	e7db      	b.n	800a0dc <_strtoul_l.isra.0+0x68>
 800a124:	f04f 35ff 	mov.w	r5, #4294967295
 800a128:	e7e4      	b.n	800a0f4 <_strtoul_l.isra.0+0x80>
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	da07      	bge.n	800a13e <_strtoul_l.isra.0+0xca>
 800a12e:	2322      	movs	r3, #34	; 0x22
 800a130:	f8ce 3000 	str.w	r3, [lr]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	b942      	cbnz	r2, 800a14c <_strtoul_l.isra.0+0xd8>
 800a13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	d000      	beq.n	800a146 <_strtoul_l.isra.0+0xd2>
 800a144:	4240      	negs	r0, r0
 800a146:	2a00      	cmp	r2, #0
 800a148:	d0f7      	beq.n	800a13a <_strtoul_l.isra.0+0xc6>
 800a14a:	b10d      	cbz	r5, 800a150 <_strtoul_l.isra.0+0xdc>
 800a14c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	e7f2      	b.n	800a13a <_strtoul_l.isra.0+0xc6>
 800a154:	2430      	movs	r4, #48	; 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1b1      	bne.n	800a0be <_strtoul_l.isra.0+0x4a>
 800a15a:	2308      	movs	r3, #8
 800a15c:	e7af      	b.n	800a0be <_strtoul_l.isra.0+0x4a>
 800a15e:	2c30      	cmp	r4, #48	; 0x30
 800a160:	d0a2      	beq.n	800a0a8 <_strtoul_l.isra.0+0x34>
 800a162:	230a      	movs	r3, #10
 800a164:	e7ab      	b.n	800a0be <_strtoul_l.isra.0+0x4a>
 800a166:	bf00      	nop
 800a168:	0800b2f9 	.word	0x0800b2f9

0800a16c <_strtoul_r>:
 800a16c:	f7ff bf82 	b.w	800a074 <_strtoul_l.isra.0>

0800a170 <__submore>:
 800a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	460c      	mov	r4, r1
 800a176:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a17c:	4299      	cmp	r1, r3
 800a17e:	d11d      	bne.n	800a1bc <__submore+0x4c>
 800a180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a184:	f7ff fa3c 	bl	8009600 <_malloc_r>
 800a188:	b918      	cbnz	r0, 800a192 <__submore+0x22>
 800a18a:	f04f 30ff 	mov.w	r0, #4294967295
 800a18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a196:	63a3      	str	r3, [r4, #56]	; 0x38
 800a198:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a19c:	6360      	str	r0, [r4, #52]	; 0x34
 800a19e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a1a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a1a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a1aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a1b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a1b6:	6020      	str	r0, [r4, #0]
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	e7e8      	b.n	800a18e <__submore+0x1e>
 800a1bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a1be:	0077      	lsls	r7, r6, #1
 800a1c0:	463a      	mov	r2, r7
 800a1c2:	f000 fa2d 	bl	800a620 <_realloc_r>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d0de      	beq.n	800a18a <__submore+0x1a>
 800a1cc:	eb00 0806 	add.w	r8, r0, r6
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	f7fe fce9 	bl	8008bac <memcpy>
 800a1da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a1de:	f8c4 8000 	str.w	r8, [r4]
 800a1e2:	e7e9      	b.n	800a1b8 <__submore+0x48>

0800a1e4 <__ascii_wctomb>:
 800a1e4:	b149      	cbz	r1, 800a1fa <__ascii_wctomb+0x16>
 800a1e6:	2aff      	cmp	r2, #255	; 0xff
 800a1e8:	bf85      	ittet	hi
 800a1ea:	238a      	movhi	r3, #138	; 0x8a
 800a1ec:	6003      	strhi	r3, [r0, #0]
 800a1ee:	700a      	strbls	r2, [r1, #0]
 800a1f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1f4:	bf98      	it	ls
 800a1f6:	2001      	movls	r0, #1
 800a1f8:	4770      	bx	lr
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4770      	bx	lr
	...

0800a200 <__assert_func>:
 800a200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a202:	4614      	mov	r4, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <__assert_func+0x2c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4605      	mov	r5, r0
 800a20c:	68d8      	ldr	r0, [r3, #12]
 800a20e:	b14c      	cbz	r4, 800a224 <__assert_func+0x24>
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <__assert_func+0x30>)
 800a212:	9100      	str	r1, [sp, #0]
 800a214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a218:	4906      	ldr	r1, [pc, #24]	; (800a234 <__assert_func+0x34>)
 800a21a:	462b      	mov	r3, r5
 800a21c:	f000 f9a6 	bl	800a56c <fiprintf>
 800a220:	f000 fc3e 	bl	800aaa0 <abort>
 800a224:	4b04      	ldr	r3, [pc, #16]	; (800a238 <__assert_func+0x38>)
 800a226:	461c      	mov	r4, r3
 800a228:	e7f3      	b.n	800a212 <__assert_func+0x12>
 800a22a:	bf00      	nop
 800a22c:	20000038 	.word	0x20000038
 800a230:	0800b698 	.word	0x0800b698
 800a234:	0800b6a5 	.word	0x0800b6a5
 800a238:	0800b6d3 	.word	0x0800b6d3

0800a23c <__sflush_r>:
 800a23c:	898a      	ldrh	r2, [r1, #12]
 800a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	0710      	lsls	r0, r2, #28
 800a246:	460c      	mov	r4, r1
 800a248:	d458      	bmi.n	800a2fc <__sflush_r+0xc0>
 800a24a:	684b      	ldr	r3, [r1, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dc05      	bgt.n	800a25c <__sflush_r+0x20>
 800a250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a252:	2b00      	cmp	r3, #0
 800a254:	dc02      	bgt.n	800a25c <__sflush_r+0x20>
 800a256:	2000      	movs	r0, #0
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a25e:	2e00      	cmp	r6, #0
 800a260:	d0f9      	beq.n	800a256 <__sflush_r+0x1a>
 800a262:	2300      	movs	r3, #0
 800a264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a268:	682f      	ldr	r7, [r5, #0]
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	d032      	beq.n	800a2d4 <__sflush_r+0x98>
 800a26e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	075a      	lsls	r2, r3, #29
 800a274:	d505      	bpl.n	800a282 <__sflush_r+0x46>
 800a276:	6863      	ldr	r3, [r4, #4]
 800a278:	1ac0      	subs	r0, r0, r3
 800a27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a27c:	b10b      	cbz	r3, 800a282 <__sflush_r+0x46>
 800a27e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a280:	1ac0      	subs	r0, r0, r3
 800a282:	2300      	movs	r3, #0
 800a284:	4602      	mov	r2, r0
 800a286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a288:	6a21      	ldr	r1, [r4, #32]
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b0      	blx	r6
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	d106      	bne.n	800a2a2 <__sflush_r+0x66>
 800a294:	6829      	ldr	r1, [r5, #0]
 800a296:	291d      	cmp	r1, #29
 800a298:	d82c      	bhi.n	800a2f4 <__sflush_r+0xb8>
 800a29a:	4a2a      	ldr	r2, [pc, #168]	; (800a344 <__sflush_r+0x108>)
 800a29c:	40ca      	lsrs	r2, r1
 800a29e:	07d6      	lsls	r6, r2, #31
 800a2a0:	d528      	bpl.n	800a2f4 <__sflush_r+0xb8>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	6062      	str	r2, [r4, #4]
 800a2a6:	04d9      	lsls	r1, r3, #19
 800a2a8:	6922      	ldr	r2, [r4, #16]
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	d504      	bpl.n	800a2b8 <__sflush_r+0x7c>
 800a2ae:	1c42      	adds	r2, r0, #1
 800a2b0:	d101      	bne.n	800a2b6 <__sflush_r+0x7a>
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	b903      	cbnz	r3, 800a2b8 <__sflush_r+0x7c>
 800a2b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ba:	602f      	str	r7, [r5, #0]
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	d0ca      	beq.n	800a256 <__sflush_r+0x1a>
 800a2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c4:	4299      	cmp	r1, r3
 800a2c6:	d002      	beq.n	800a2ce <__sflush_r+0x92>
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f7ff f949 	bl	8009560 <_free_r>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a2d2:	e7c1      	b.n	800a258 <__sflush_r+0x1c>
 800a2d4:	6a21      	ldr	r1, [r4, #32]
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b0      	blx	r6
 800a2dc:	1c41      	adds	r1, r0, #1
 800a2de:	d1c7      	bne.n	800a270 <__sflush_r+0x34>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0c4      	beq.n	800a270 <__sflush_r+0x34>
 800a2e6:	2b1d      	cmp	r3, #29
 800a2e8:	d001      	beq.n	800a2ee <__sflush_r+0xb2>
 800a2ea:	2b16      	cmp	r3, #22
 800a2ec:	d101      	bne.n	800a2f2 <__sflush_r+0xb6>
 800a2ee:	602f      	str	r7, [r5, #0]
 800a2f0:	e7b1      	b.n	800a256 <__sflush_r+0x1a>
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	e7ad      	b.n	800a258 <__sflush_r+0x1c>
 800a2fc:	690f      	ldr	r7, [r1, #16]
 800a2fe:	2f00      	cmp	r7, #0
 800a300:	d0a9      	beq.n	800a256 <__sflush_r+0x1a>
 800a302:	0793      	lsls	r3, r2, #30
 800a304:	680e      	ldr	r6, [r1, #0]
 800a306:	bf08      	it	eq
 800a308:	694b      	ldreq	r3, [r1, #20]
 800a30a:	600f      	str	r7, [r1, #0]
 800a30c:	bf18      	it	ne
 800a30e:	2300      	movne	r3, #0
 800a310:	eba6 0807 	sub.w	r8, r6, r7
 800a314:	608b      	str	r3, [r1, #8]
 800a316:	f1b8 0f00 	cmp.w	r8, #0
 800a31a:	dd9c      	ble.n	800a256 <__sflush_r+0x1a>
 800a31c:	6a21      	ldr	r1, [r4, #32]
 800a31e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a320:	4643      	mov	r3, r8
 800a322:	463a      	mov	r2, r7
 800a324:	4628      	mov	r0, r5
 800a326:	47b0      	blx	r6
 800a328:	2800      	cmp	r0, #0
 800a32a:	dc06      	bgt.n	800a33a <__sflush_r+0xfe>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	e78e      	b.n	800a258 <__sflush_r+0x1c>
 800a33a:	4407      	add	r7, r0
 800a33c:	eba8 0800 	sub.w	r8, r8, r0
 800a340:	e7e9      	b.n	800a316 <__sflush_r+0xda>
 800a342:	bf00      	nop
 800a344:	20400001 	.word	0x20400001

0800a348 <_fflush_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	690b      	ldr	r3, [r1, #16]
 800a34c:	4605      	mov	r5, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	b913      	cbnz	r3, 800a358 <_fflush_r+0x10>
 800a352:	2500      	movs	r5, #0
 800a354:	4628      	mov	r0, r5
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	b118      	cbz	r0, 800a362 <_fflush_r+0x1a>
 800a35a:	6983      	ldr	r3, [r0, #24]
 800a35c:	b90b      	cbnz	r3, 800a362 <_fflush_r+0x1a>
 800a35e:	f000 f887 	bl	800a470 <__sinit>
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <_fflush_r+0x6c>)
 800a364:	429c      	cmp	r4, r3
 800a366:	d11b      	bne.n	800a3a0 <_fflush_r+0x58>
 800a368:	686c      	ldr	r4, [r5, #4]
 800a36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0ef      	beq.n	800a352 <_fflush_r+0xa>
 800a372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a374:	07d0      	lsls	r0, r2, #31
 800a376:	d404      	bmi.n	800a382 <_fflush_r+0x3a>
 800a378:	0599      	lsls	r1, r3, #22
 800a37a:	d402      	bmi.n	800a382 <_fflush_r+0x3a>
 800a37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37e:	f000 f927 	bl	800a5d0 <__retarget_lock_acquire_recursive>
 800a382:	4628      	mov	r0, r5
 800a384:	4621      	mov	r1, r4
 800a386:	f7ff ff59 	bl	800a23c <__sflush_r>
 800a38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a38c:	07da      	lsls	r2, r3, #31
 800a38e:	4605      	mov	r5, r0
 800a390:	d4e0      	bmi.n	800a354 <_fflush_r+0xc>
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	059b      	lsls	r3, r3, #22
 800a396:	d4dd      	bmi.n	800a354 <_fflush_r+0xc>
 800a398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a39a:	f000 f91a 	bl	800a5d2 <__retarget_lock_release_recursive>
 800a39e:	e7d9      	b.n	800a354 <_fflush_r+0xc>
 800a3a0:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <_fflush_r+0x70>)
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d101      	bne.n	800a3aa <_fflush_r+0x62>
 800a3a6:	68ac      	ldr	r4, [r5, #8]
 800a3a8:	e7df      	b.n	800a36a <_fflush_r+0x22>
 800a3aa:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <_fflush_r+0x74>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	bf08      	it	eq
 800a3b0:	68ec      	ldreq	r4, [r5, #12]
 800a3b2:	e7da      	b.n	800a36a <_fflush_r+0x22>
 800a3b4:	0800b6f4 	.word	0x0800b6f4
 800a3b8:	0800b714 	.word	0x0800b714
 800a3bc:	0800b6d4 	.word	0x0800b6d4

0800a3c0 <std>:
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ce:	6083      	str	r3, [r0, #8]
 800a3d0:	8181      	strh	r1, [r0, #12]
 800a3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d4:	81c2      	strh	r2, [r0, #14]
 800a3d6:	6183      	str	r3, [r0, #24]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	2208      	movs	r2, #8
 800a3dc:	305c      	adds	r0, #92	; 0x5c
 800a3de:	f7fb fc8f 	bl	8005d00 <memset>
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x38>)
 800a3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x3c>)
 800a3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <std+0x40>)
 800a3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ee:	4b05      	ldr	r3, [pc, #20]	; (800a404 <std+0x44>)
 800a3f0:	6224      	str	r4, [r4, #32]
 800a3f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	bf00      	nop
 800a3f8:	08006a41 	.word	0x08006a41
 800a3fc:	08006a67 	.word	0x08006a67
 800a400:	08006a9f 	.word	0x08006a9f
 800a404:	08006ac3 	.word	0x08006ac3

0800a408 <_cleanup_r>:
 800a408:	4901      	ldr	r1, [pc, #4]	; (800a410 <_cleanup_r+0x8>)
 800a40a:	f000 b8c1 	b.w	800a590 <_fwalk_reent>
 800a40e:	bf00      	nop
 800a410:	0800a349 	.word	0x0800a349

0800a414 <__sfmoreglue>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	1e4a      	subs	r2, r1, #1
 800a418:	2568      	movs	r5, #104	; 0x68
 800a41a:	4355      	muls	r5, r2
 800a41c:	460e      	mov	r6, r1
 800a41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a422:	f7ff f8ed 	bl	8009600 <_malloc_r>
 800a426:	4604      	mov	r4, r0
 800a428:	b140      	cbz	r0, 800a43c <__sfmoreglue+0x28>
 800a42a:	2100      	movs	r1, #0
 800a42c:	e9c0 1600 	strd	r1, r6, [r0]
 800a430:	300c      	adds	r0, #12
 800a432:	60a0      	str	r0, [r4, #8]
 800a434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a438:	f7fb fc62 	bl	8005d00 <memset>
 800a43c:	4620      	mov	r0, r4
 800a43e:	bd70      	pop	{r4, r5, r6, pc}

0800a440 <__sfp_lock_acquire>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__sfp_lock_acquire+0x8>)
 800a442:	f000 b8c5 	b.w	800a5d0 <__retarget_lock_acquire_recursive>
 800a446:	bf00      	nop
 800a448:	2001062c 	.word	0x2001062c

0800a44c <__sfp_lock_release>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__sfp_lock_release+0x8>)
 800a44e:	f000 b8c0 	b.w	800a5d2 <__retarget_lock_release_recursive>
 800a452:	bf00      	nop
 800a454:	2001062c 	.word	0x2001062c

0800a458 <__sinit_lock_acquire>:
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <__sinit_lock_acquire+0x8>)
 800a45a:	f000 b8b9 	b.w	800a5d0 <__retarget_lock_acquire_recursive>
 800a45e:	bf00      	nop
 800a460:	20010627 	.word	0x20010627

0800a464 <__sinit_lock_release>:
 800a464:	4801      	ldr	r0, [pc, #4]	; (800a46c <__sinit_lock_release+0x8>)
 800a466:	f000 b8b4 	b.w	800a5d2 <__retarget_lock_release_recursive>
 800a46a:	bf00      	nop
 800a46c:	20010627 	.word	0x20010627

0800a470 <__sinit>:
 800a470:	b510      	push	{r4, lr}
 800a472:	4604      	mov	r4, r0
 800a474:	f7ff fff0 	bl	800a458 <__sinit_lock_acquire>
 800a478:	69a3      	ldr	r3, [r4, #24]
 800a47a:	b11b      	cbz	r3, 800a484 <__sinit+0x14>
 800a47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a480:	f7ff bff0 	b.w	800a464 <__sinit_lock_release>
 800a484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a488:	6523      	str	r3, [r4, #80]	; 0x50
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <__sinit+0x68>)
 800a48c:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <__sinit+0x6c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	62a2      	str	r2, [r4, #40]	; 0x28
 800a492:	42a3      	cmp	r3, r4
 800a494:	bf04      	itt	eq
 800a496:	2301      	moveq	r3, #1
 800a498:	61a3      	streq	r3, [r4, #24]
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 f820 	bl	800a4e0 <__sfp>
 800a4a0:	6060      	str	r0, [r4, #4]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 f81c 	bl	800a4e0 <__sfp>
 800a4a8:	60a0      	str	r0, [r4, #8]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f818 	bl	800a4e0 <__sfp>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	60e0      	str	r0, [r4, #12]
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	6860      	ldr	r0, [r4, #4]
 800a4b8:	f7ff ff82 	bl	800a3c0 <std>
 800a4bc:	68a0      	ldr	r0, [r4, #8]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	2109      	movs	r1, #9
 800a4c2:	f7ff ff7d 	bl	800a3c0 <std>
 800a4c6:	68e0      	ldr	r0, [r4, #12]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	2112      	movs	r1, #18
 800a4cc:	f7ff ff78 	bl	800a3c0 <std>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	61a3      	str	r3, [r4, #24]
 800a4d4:	e7d2      	b.n	800a47c <__sinit+0xc>
 800a4d6:	bf00      	nop
 800a4d8:	0800b26c 	.word	0x0800b26c
 800a4dc:	0800a409 	.word	0x0800a409

0800a4e0 <__sfp>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	f7ff ffac 	bl	800a440 <__sfp_lock_acquire>
 800a4e8:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <__sfp+0x84>)
 800a4ea:	681e      	ldr	r6, [r3, #0]
 800a4ec:	69b3      	ldr	r3, [r6, #24]
 800a4ee:	b913      	cbnz	r3, 800a4f6 <__sfp+0x16>
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7ff ffbd 	bl	800a470 <__sinit>
 800a4f6:	3648      	adds	r6, #72	; 0x48
 800a4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	d503      	bpl.n	800a508 <__sfp+0x28>
 800a500:	6833      	ldr	r3, [r6, #0]
 800a502:	b30b      	cbz	r3, 800a548 <__sfp+0x68>
 800a504:	6836      	ldr	r6, [r6, #0]
 800a506:	e7f7      	b.n	800a4f8 <__sfp+0x18>
 800a508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a50c:	b9d5      	cbnz	r5, 800a544 <__sfp+0x64>
 800a50e:	4b16      	ldr	r3, [pc, #88]	; (800a568 <__sfp+0x88>)
 800a510:	60e3      	str	r3, [r4, #12]
 800a512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a516:	6665      	str	r5, [r4, #100]	; 0x64
 800a518:	f000 f859 	bl	800a5ce <__retarget_lock_init_recursive>
 800a51c:	f7ff ff96 	bl	800a44c <__sfp_lock_release>
 800a520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a528:	6025      	str	r5, [r4, #0]
 800a52a:	61a5      	str	r5, [r4, #24]
 800a52c:	2208      	movs	r2, #8
 800a52e:	4629      	mov	r1, r5
 800a530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a534:	f7fb fbe4 	bl	8005d00 <memset>
 800a538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a540:	4620      	mov	r0, r4
 800a542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a544:	3468      	adds	r4, #104	; 0x68
 800a546:	e7d9      	b.n	800a4fc <__sfp+0x1c>
 800a548:	2104      	movs	r1, #4
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7ff ff62 	bl	800a414 <__sfmoreglue>
 800a550:	4604      	mov	r4, r0
 800a552:	6030      	str	r0, [r6, #0]
 800a554:	2800      	cmp	r0, #0
 800a556:	d1d5      	bne.n	800a504 <__sfp+0x24>
 800a558:	f7ff ff78 	bl	800a44c <__sfp_lock_release>
 800a55c:	230c      	movs	r3, #12
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	e7ee      	b.n	800a540 <__sfp+0x60>
 800a562:	bf00      	nop
 800a564:	0800b26c 	.word	0x0800b26c
 800a568:	ffff0001 	.word	0xffff0001

0800a56c <fiprintf>:
 800a56c:	b40e      	push	{r1, r2, r3}
 800a56e:	b503      	push	{r0, r1, lr}
 800a570:	4601      	mov	r1, r0
 800a572:	ab03      	add	r3, sp, #12
 800a574:	4805      	ldr	r0, [pc, #20]	; (800a58c <fiprintf+0x20>)
 800a576:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	f000 f89f 	bl	800a6c0 <_vfiprintf_r>
 800a582:	b002      	add	sp, #8
 800a584:	f85d eb04 	ldr.w	lr, [sp], #4
 800a588:	b003      	add	sp, #12
 800a58a:	4770      	bx	lr
 800a58c:	20000038 	.word	0x20000038

0800a590 <_fwalk_reent>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	4606      	mov	r6, r0
 800a596:	4688      	mov	r8, r1
 800a598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a59c:	2700      	movs	r7, #0
 800a59e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a5a6:	d505      	bpl.n	800a5b4 <_fwalk_reent+0x24>
 800a5a8:	6824      	ldr	r4, [r4, #0]
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d1f7      	bne.n	800a59e <_fwalk_reent+0xe>
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b4:	89ab      	ldrh	r3, [r5, #12]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d907      	bls.n	800a5ca <_fwalk_reent+0x3a>
 800a5ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	d003      	beq.n	800a5ca <_fwalk_reent+0x3a>
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	47c0      	blx	r8
 800a5c8:	4307      	orrs	r7, r0
 800a5ca:	3568      	adds	r5, #104	; 0x68
 800a5cc:	e7e9      	b.n	800a5a2 <_fwalk_reent+0x12>

0800a5ce <__retarget_lock_init_recursive>:
 800a5ce:	4770      	bx	lr

0800a5d0 <__retarget_lock_acquire_recursive>:
 800a5d0:	4770      	bx	lr

0800a5d2 <__retarget_lock_release_recursive>:
 800a5d2:	4770      	bx	lr

0800a5d4 <memmove>:
 800a5d4:	4288      	cmp	r0, r1
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	eb01 0402 	add.w	r4, r1, r2
 800a5dc:	d902      	bls.n	800a5e4 <memmove+0x10>
 800a5de:	4284      	cmp	r4, r0
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	d807      	bhi.n	800a5f4 <memmove+0x20>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	42a1      	cmp	r1, r4
 800a5e8:	d008      	beq.n	800a5fc <memmove+0x28>
 800a5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5f2:	e7f8      	b.n	800a5e6 <memmove+0x12>
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	428a      	cmp	r2, r1
 800a5fa:	d100      	bne.n	800a5fe <memmove+0x2a>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a606:	e7f7      	b.n	800a5f8 <memmove+0x24>

0800a608 <__malloc_lock>:
 800a608:	4801      	ldr	r0, [pc, #4]	; (800a610 <__malloc_lock+0x8>)
 800a60a:	f7ff bfe1 	b.w	800a5d0 <__retarget_lock_acquire_recursive>
 800a60e:	bf00      	nop
 800a610:	20010628 	.word	0x20010628

0800a614 <__malloc_unlock>:
 800a614:	4801      	ldr	r0, [pc, #4]	; (800a61c <__malloc_unlock+0x8>)
 800a616:	f7ff bfdc 	b.w	800a5d2 <__retarget_lock_release_recursive>
 800a61a:	bf00      	nop
 800a61c:	20010628 	.word	0x20010628

0800a620 <_realloc_r>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	4607      	mov	r7, r0
 800a624:	4614      	mov	r4, r2
 800a626:	460e      	mov	r6, r1
 800a628:	b921      	cbnz	r1, 800a634 <_realloc_r+0x14>
 800a62a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a62e:	4611      	mov	r1, r2
 800a630:	f7fe bfe6 	b.w	8009600 <_malloc_r>
 800a634:	b922      	cbnz	r2, 800a640 <_realloc_r+0x20>
 800a636:	f7fe ff93 	bl	8009560 <_free_r>
 800a63a:	4625      	mov	r5, r4
 800a63c:	4628      	mov	r0, r5
 800a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a640:	f000 fa9a 	bl	800ab78 <_malloc_usable_size_r>
 800a644:	42a0      	cmp	r0, r4
 800a646:	d20f      	bcs.n	800a668 <_realloc_r+0x48>
 800a648:	4621      	mov	r1, r4
 800a64a:	4638      	mov	r0, r7
 800a64c:	f7fe ffd8 	bl	8009600 <_malloc_r>
 800a650:	4605      	mov	r5, r0
 800a652:	2800      	cmp	r0, #0
 800a654:	d0f2      	beq.n	800a63c <_realloc_r+0x1c>
 800a656:	4631      	mov	r1, r6
 800a658:	4622      	mov	r2, r4
 800a65a:	f7fe faa7 	bl	8008bac <memcpy>
 800a65e:	4631      	mov	r1, r6
 800a660:	4638      	mov	r0, r7
 800a662:	f7fe ff7d 	bl	8009560 <_free_r>
 800a666:	e7e9      	b.n	800a63c <_realloc_r+0x1c>
 800a668:	4635      	mov	r5, r6
 800a66a:	e7e7      	b.n	800a63c <_realloc_r+0x1c>

0800a66c <__sfputc_r>:
 800a66c:	6893      	ldr	r3, [r2, #8]
 800a66e:	3b01      	subs	r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	b410      	push	{r4}
 800a674:	6093      	str	r3, [r2, #8]
 800a676:	da08      	bge.n	800a68a <__sfputc_r+0x1e>
 800a678:	6994      	ldr	r4, [r2, #24]
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	db01      	blt.n	800a682 <__sfputc_r+0x16>
 800a67e:	290a      	cmp	r1, #10
 800a680:	d103      	bne.n	800a68a <__sfputc_r+0x1e>
 800a682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a686:	f000 b94b 	b.w	800a920 <__swbuf_r>
 800a68a:	6813      	ldr	r3, [r2, #0]
 800a68c:	1c58      	adds	r0, r3, #1
 800a68e:	6010      	str	r0, [r2, #0]
 800a690:	7019      	strb	r1, [r3, #0]
 800a692:	4608      	mov	r0, r1
 800a694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <__sfputs_r>:
 800a69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	18d5      	adds	r5, r2, r3
 800a6a4:	42ac      	cmp	r4, r5
 800a6a6:	d101      	bne.n	800a6ac <__sfputs_r+0x12>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e007      	b.n	800a6bc <__sfputs_r+0x22>
 800a6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b0:	463a      	mov	r2, r7
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7ff ffda 	bl	800a66c <__sfputc_r>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d1f3      	bne.n	800a6a4 <__sfputs_r+0xa>
 800a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6c0 <_vfiprintf_r>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	b09d      	sub	sp, #116	; 0x74
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4698      	mov	r8, r3
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	b118      	cbz	r0, 800a6d8 <_vfiprintf_r+0x18>
 800a6d0:	6983      	ldr	r3, [r0, #24]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <_vfiprintf_r+0x18>
 800a6d4:	f7ff fecc 	bl	800a470 <__sinit>
 800a6d8:	4b89      	ldr	r3, [pc, #548]	; (800a900 <_vfiprintf_r+0x240>)
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	d11b      	bne.n	800a716 <_vfiprintf_r+0x56>
 800a6de:	6875      	ldr	r5, [r6, #4]
 800a6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_vfiprintf_r+0x32>
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_vfiprintf_r+0x32>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ee:	f7ff ff6f 	bl	800a5d0 <__retarget_lock_acquire_recursive>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	071b      	lsls	r3, r3, #28
 800a6f6:	d501      	bpl.n	800a6fc <_vfiprintf_r+0x3c>
 800a6f8:	692b      	ldr	r3, [r5, #16]
 800a6fa:	b9eb      	cbnz	r3, 800a738 <_vfiprintf_r+0x78>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 f960 	bl	800a9c4 <__swsetup_r>
 800a704:	b1c0      	cbz	r0, 800a738 <_vfiprintf_r+0x78>
 800a706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a708:	07dc      	lsls	r4, r3, #31
 800a70a:	d50e      	bpl.n	800a72a <_vfiprintf_r+0x6a>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b01d      	add	sp, #116	; 0x74
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	4b7b      	ldr	r3, [pc, #492]	; (800a904 <_vfiprintf_r+0x244>)
 800a718:	429d      	cmp	r5, r3
 800a71a:	d101      	bne.n	800a720 <_vfiprintf_r+0x60>
 800a71c:	68b5      	ldr	r5, [r6, #8]
 800a71e:	e7df      	b.n	800a6e0 <_vfiprintf_r+0x20>
 800a720:	4b79      	ldr	r3, [pc, #484]	; (800a908 <_vfiprintf_r+0x248>)
 800a722:	429d      	cmp	r5, r3
 800a724:	bf08      	it	eq
 800a726:	68f5      	ldreq	r5, [r6, #12]
 800a728:	e7da      	b.n	800a6e0 <_vfiprintf_r+0x20>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	0598      	lsls	r0, r3, #22
 800a72e:	d4ed      	bmi.n	800a70c <_vfiprintf_r+0x4c>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f7ff ff4e 	bl	800a5d2 <__retarget_lock_release_recursive>
 800a736:	e7e9      	b.n	800a70c <_vfiprintf_r+0x4c>
 800a738:	2300      	movs	r3, #0
 800a73a:	9309      	str	r3, [sp, #36]	; 0x24
 800a73c:	2320      	movs	r3, #32
 800a73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a742:	f8cd 800c 	str.w	r8, [sp, #12]
 800a746:	2330      	movs	r3, #48	; 0x30
 800a748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a90c <_vfiprintf_r+0x24c>
 800a74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a750:	f04f 0901 	mov.w	r9, #1
 800a754:	4623      	mov	r3, r4
 800a756:	469a      	mov	sl, r3
 800a758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75c:	b10a      	cbz	r2, 800a762 <_vfiprintf_r+0xa2>
 800a75e:	2a25      	cmp	r2, #37	; 0x25
 800a760:	d1f9      	bne.n	800a756 <_vfiprintf_r+0x96>
 800a762:	ebba 0b04 	subs.w	fp, sl, r4
 800a766:	d00b      	beq.n	800a780 <_vfiprintf_r+0xc0>
 800a768:	465b      	mov	r3, fp
 800a76a:	4622      	mov	r2, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff ff93 	bl	800a69a <__sfputs_r>
 800a774:	3001      	adds	r0, #1
 800a776:	f000 80aa 	beq.w	800a8ce <_vfiprintf_r+0x20e>
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	445a      	add	r2, fp
 800a77e:	9209      	str	r2, [sp, #36]	; 0x24
 800a780:	f89a 3000 	ldrb.w	r3, [sl]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80a2 	beq.w	800a8ce <_vfiprintf_r+0x20e>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f04f 32ff 	mov.w	r2, #4294967295
 800a790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a794:	f10a 0a01 	add.w	sl, sl, #1
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a2:	4654      	mov	r4, sl
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7aa:	4858      	ldr	r0, [pc, #352]	; (800a90c <_vfiprintf_r+0x24c>)
 800a7ac:	f7f5 fd50 	bl	8000250 <memchr>
 800a7b0:	9a04      	ldr	r2, [sp, #16]
 800a7b2:	b9d8      	cbnz	r0, 800a7ec <_vfiprintf_r+0x12c>
 800a7b4:	06d1      	lsls	r1, r2, #27
 800a7b6:	bf44      	itt	mi
 800a7b8:	2320      	movmi	r3, #32
 800a7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7be:	0713      	lsls	r3, r2, #28
 800a7c0:	bf44      	itt	mi
 800a7c2:	232b      	movmi	r3, #43	; 0x2b
 800a7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ce:	d015      	beq.n	800a7fc <_vfiprintf_r+0x13c>
 800a7d0:	9a07      	ldr	r2, [sp, #28]
 800a7d2:	4654      	mov	r4, sl
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f04f 0c0a 	mov.w	ip, #10
 800a7da:	4621      	mov	r1, r4
 800a7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e0:	3b30      	subs	r3, #48	; 0x30
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d94e      	bls.n	800a884 <_vfiprintf_r+0x1c4>
 800a7e6:	b1b0      	cbz	r0, 800a816 <_vfiprintf_r+0x156>
 800a7e8:	9207      	str	r2, [sp, #28]
 800a7ea:	e014      	b.n	800a816 <_vfiprintf_r+0x156>
 800a7ec:	eba0 0308 	sub.w	r3, r0, r8
 800a7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	46a2      	mov	sl, r4
 800a7fa:	e7d2      	b.n	800a7a2 <_vfiprintf_r+0xe2>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	1d19      	adds	r1, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	9103      	str	r1, [sp, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfbb      	ittet	lt
 800a808:	425b      	neglt	r3, r3
 800a80a:	f042 0202 	orrlt.w	r2, r2, #2
 800a80e:	9307      	strge	r3, [sp, #28]
 800a810:	9307      	strlt	r3, [sp, #28]
 800a812:	bfb8      	it	lt
 800a814:	9204      	strlt	r2, [sp, #16]
 800a816:	7823      	ldrb	r3, [r4, #0]
 800a818:	2b2e      	cmp	r3, #46	; 0x2e
 800a81a:	d10c      	bne.n	800a836 <_vfiprintf_r+0x176>
 800a81c:	7863      	ldrb	r3, [r4, #1]
 800a81e:	2b2a      	cmp	r3, #42	; 0x2a
 800a820:	d135      	bne.n	800a88e <_vfiprintf_r+0x1ce>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	1d1a      	adds	r2, r3, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	9203      	str	r2, [sp, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfb8      	it	lt
 800a82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a832:	3402      	adds	r4, #2
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a91c <_vfiprintf_r+0x25c>
 800a83a:	7821      	ldrb	r1, [r4, #0]
 800a83c:	2203      	movs	r2, #3
 800a83e:	4650      	mov	r0, sl
 800a840:	f7f5 fd06 	bl	8000250 <memchr>
 800a844:	b140      	cbz	r0, 800a858 <_vfiprintf_r+0x198>
 800a846:	2340      	movs	r3, #64	; 0x40
 800a848:	eba0 000a 	sub.w	r0, r0, sl
 800a84c:	fa03 f000 	lsl.w	r0, r3, r0
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	4303      	orrs	r3, r0
 800a854:	3401      	adds	r4, #1
 800a856:	9304      	str	r3, [sp, #16]
 800a858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85c:	482c      	ldr	r0, [pc, #176]	; (800a910 <_vfiprintf_r+0x250>)
 800a85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a862:	2206      	movs	r2, #6
 800a864:	f7f5 fcf4 	bl	8000250 <memchr>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d03f      	beq.n	800a8ec <_vfiprintf_r+0x22c>
 800a86c:	4b29      	ldr	r3, [pc, #164]	; (800a914 <_vfiprintf_r+0x254>)
 800a86e:	bb1b      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x1f8>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	3307      	adds	r3, #7
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	3308      	adds	r3, #8
 800a87a:	9303      	str	r3, [sp, #12]
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	443b      	add	r3, r7
 800a880:	9309      	str	r3, [sp, #36]	; 0x24
 800a882:	e767      	b.n	800a754 <_vfiprintf_r+0x94>
 800a884:	fb0c 3202 	mla	r2, ip, r2, r3
 800a888:	460c      	mov	r4, r1
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7a5      	b.n	800a7da <_vfiprintf_r+0x11a>
 800a88e:	2300      	movs	r3, #0
 800a890:	3401      	adds	r4, #1
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	4619      	mov	r1, r3
 800a896:	f04f 0c0a 	mov.w	ip, #10
 800a89a:	4620      	mov	r0, r4
 800a89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a0:	3a30      	subs	r2, #48	; 0x30
 800a8a2:	2a09      	cmp	r2, #9
 800a8a4:	d903      	bls.n	800a8ae <_vfiprintf_r+0x1ee>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0c5      	beq.n	800a836 <_vfiprintf_r+0x176>
 800a8aa:	9105      	str	r1, [sp, #20]
 800a8ac:	e7c3      	b.n	800a836 <_vfiprintf_r+0x176>
 800a8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e7f0      	b.n	800a89a <_vfiprintf_r+0x1da>
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <_vfiprintf_r+0x258>)
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7fb fab4 	bl	8005e30 <_printf_float>
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	1c78      	adds	r0, r7, #1
 800a8cc:	d1d6      	bne.n	800a87c <_vfiprintf_r+0x1bc>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d405      	bmi.n	800a8e0 <_vfiprintf_r+0x220>
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	059a      	lsls	r2, r3, #22
 800a8d8:	d402      	bmi.n	800a8e0 <_vfiprintf_r+0x220>
 800a8da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8dc:	f7ff fe79 	bl	800a5d2 <__retarget_lock_release_recursive>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	065b      	lsls	r3, r3, #25
 800a8e4:	f53f af12 	bmi.w	800a70c <_vfiprintf_r+0x4c>
 800a8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ea:	e711      	b.n	800a710 <_vfiprintf_r+0x50>
 800a8ec:	ab03      	add	r3, sp, #12
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <_vfiprintf_r+0x258>)
 800a8f4:	a904      	add	r1, sp, #16
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7fb fd26 	bl	8006348 <_printf_i>
 800a8fc:	e7e4      	b.n	800a8c8 <_vfiprintf_r+0x208>
 800a8fe:	bf00      	nop
 800a900:	0800b6f4 	.word	0x0800b6f4
 800a904:	0800b714 	.word	0x0800b714
 800a908:	0800b6d4 	.word	0x0800b6d4
 800a90c:	0800b66c 	.word	0x0800b66c
 800a910:	0800b676 	.word	0x0800b676
 800a914:	08005e31 	.word	0x08005e31
 800a918:	0800a69b 	.word	0x0800a69b
 800a91c:	0800b672 	.word	0x0800b672

0800a920 <__swbuf_r>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	460e      	mov	r6, r1
 800a924:	4614      	mov	r4, r2
 800a926:	4605      	mov	r5, r0
 800a928:	b118      	cbz	r0, 800a932 <__swbuf_r+0x12>
 800a92a:	6983      	ldr	r3, [r0, #24]
 800a92c:	b90b      	cbnz	r3, 800a932 <__swbuf_r+0x12>
 800a92e:	f7ff fd9f 	bl	800a470 <__sinit>
 800a932:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <__swbuf_r+0x98>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d12b      	bne.n	800a990 <__swbuf_r+0x70>
 800a938:	686c      	ldr	r4, [r5, #4]
 800a93a:	69a3      	ldr	r3, [r4, #24]
 800a93c:	60a3      	str	r3, [r4, #8]
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	071a      	lsls	r2, r3, #28
 800a942:	d52f      	bpl.n	800a9a4 <__swbuf_r+0x84>
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	b36b      	cbz	r3, 800a9a4 <__swbuf_r+0x84>
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	6820      	ldr	r0, [r4, #0]
 800a94c:	1ac0      	subs	r0, r0, r3
 800a94e:	6963      	ldr	r3, [r4, #20]
 800a950:	b2f6      	uxtb	r6, r6
 800a952:	4283      	cmp	r3, r0
 800a954:	4637      	mov	r7, r6
 800a956:	dc04      	bgt.n	800a962 <__swbuf_r+0x42>
 800a958:	4621      	mov	r1, r4
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7ff fcf4 	bl	800a348 <_fflush_r>
 800a960:	bb30      	cbnz	r0, 800a9b0 <__swbuf_r+0x90>
 800a962:	68a3      	ldr	r3, [r4, #8]
 800a964:	3b01      	subs	r3, #1
 800a966:	60a3      	str	r3, [r4, #8]
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	6022      	str	r2, [r4, #0]
 800a96e:	701e      	strb	r6, [r3, #0]
 800a970:	6963      	ldr	r3, [r4, #20]
 800a972:	3001      	adds	r0, #1
 800a974:	4283      	cmp	r3, r0
 800a976:	d004      	beq.n	800a982 <__swbuf_r+0x62>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	07db      	lsls	r3, r3, #31
 800a97c:	d506      	bpl.n	800a98c <__swbuf_r+0x6c>
 800a97e:	2e0a      	cmp	r6, #10
 800a980:	d104      	bne.n	800a98c <__swbuf_r+0x6c>
 800a982:	4621      	mov	r1, r4
 800a984:	4628      	mov	r0, r5
 800a986:	f7ff fcdf 	bl	800a348 <_fflush_r>
 800a98a:	b988      	cbnz	r0, 800a9b0 <__swbuf_r+0x90>
 800a98c:	4638      	mov	r0, r7
 800a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <__swbuf_r+0x9c>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d101      	bne.n	800a99a <__swbuf_r+0x7a>
 800a996:	68ac      	ldr	r4, [r5, #8]
 800a998:	e7cf      	b.n	800a93a <__swbuf_r+0x1a>
 800a99a:	4b09      	ldr	r3, [pc, #36]	; (800a9c0 <__swbuf_r+0xa0>)
 800a99c:	429c      	cmp	r4, r3
 800a99e:	bf08      	it	eq
 800a9a0:	68ec      	ldreq	r4, [r5, #12]
 800a9a2:	e7ca      	b.n	800a93a <__swbuf_r+0x1a>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 f80c 	bl	800a9c4 <__swsetup_r>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0cb      	beq.n	800a948 <__swbuf_r+0x28>
 800a9b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a9b4:	e7ea      	b.n	800a98c <__swbuf_r+0x6c>
 800a9b6:	bf00      	nop
 800a9b8:	0800b6f4 	.word	0x0800b6f4
 800a9bc:	0800b714 	.word	0x0800b714
 800a9c0:	0800b6d4 	.word	0x0800b6d4

0800a9c4 <__swsetup_r>:
 800a9c4:	4b32      	ldr	r3, [pc, #200]	; (800aa90 <__swsetup_r+0xcc>)
 800a9c6:	b570      	push	{r4, r5, r6, lr}
 800a9c8:	681d      	ldr	r5, [r3, #0]
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	b125      	cbz	r5, 800a9da <__swsetup_r+0x16>
 800a9d0:	69ab      	ldr	r3, [r5, #24]
 800a9d2:	b913      	cbnz	r3, 800a9da <__swsetup_r+0x16>
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f7ff fd4b 	bl	800a470 <__sinit>
 800a9da:	4b2e      	ldr	r3, [pc, #184]	; (800aa94 <__swsetup_r+0xd0>)
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	d10f      	bne.n	800aa00 <__swsetup_r+0x3c>
 800a9e0:	686c      	ldr	r4, [r5, #4]
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9e8:	0719      	lsls	r1, r3, #28
 800a9ea:	d42c      	bmi.n	800aa46 <__swsetup_r+0x82>
 800a9ec:	06dd      	lsls	r5, r3, #27
 800a9ee:	d411      	bmi.n	800aa14 <__swsetup_r+0x50>
 800a9f0:	2309      	movs	r3, #9
 800a9f2:	6033      	str	r3, [r6, #0]
 800a9f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9f8:	81a3      	strh	r3, [r4, #12]
 800a9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fe:	e03e      	b.n	800aa7e <__swsetup_r+0xba>
 800aa00:	4b25      	ldr	r3, [pc, #148]	; (800aa98 <__swsetup_r+0xd4>)
 800aa02:	429c      	cmp	r4, r3
 800aa04:	d101      	bne.n	800aa0a <__swsetup_r+0x46>
 800aa06:	68ac      	ldr	r4, [r5, #8]
 800aa08:	e7eb      	b.n	800a9e2 <__swsetup_r+0x1e>
 800aa0a:	4b24      	ldr	r3, [pc, #144]	; (800aa9c <__swsetup_r+0xd8>)
 800aa0c:	429c      	cmp	r4, r3
 800aa0e:	bf08      	it	eq
 800aa10:	68ec      	ldreq	r4, [r5, #12]
 800aa12:	e7e6      	b.n	800a9e2 <__swsetup_r+0x1e>
 800aa14:	0758      	lsls	r0, r3, #29
 800aa16:	d512      	bpl.n	800aa3e <__swsetup_r+0x7a>
 800aa18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa1a:	b141      	cbz	r1, 800aa2e <__swsetup_r+0x6a>
 800aa1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa20:	4299      	cmp	r1, r3
 800aa22:	d002      	beq.n	800aa2a <__swsetup_r+0x66>
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7fe fd9b 	bl	8009560 <_free_r>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	2300      	movs	r3, #0
 800aa38:	6063      	str	r3, [r4, #4]
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f043 0308 	orr.w	r3, r3, #8
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	b94b      	cbnz	r3, 800aa5e <__swsetup_r+0x9a>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa54:	d003      	beq.n	800aa5e <__swsetup_r+0x9a>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f000 f84d 	bl	800aaf8 <__smakebuf_r>
 800aa5e:	89a0      	ldrh	r0, [r4, #12]
 800aa60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa64:	f010 0301 	ands.w	r3, r0, #1
 800aa68:	d00a      	beq.n	800aa80 <__swsetup_r+0xbc>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60a3      	str	r3, [r4, #8]
 800aa6e:	6963      	ldr	r3, [r4, #20]
 800aa70:	425b      	negs	r3, r3
 800aa72:	61a3      	str	r3, [r4, #24]
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	b943      	cbnz	r3, 800aa8a <__swsetup_r+0xc6>
 800aa78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa7c:	d1ba      	bne.n	800a9f4 <__swsetup_r+0x30>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	0781      	lsls	r1, r0, #30
 800aa82:	bf58      	it	pl
 800aa84:	6963      	ldrpl	r3, [r4, #20]
 800aa86:	60a3      	str	r3, [r4, #8]
 800aa88:	e7f4      	b.n	800aa74 <__swsetup_r+0xb0>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e7f7      	b.n	800aa7e <__swsetup_r+0xba>
 800aa8e:	bf00      	nop
 800aa90:	20000038 	.word	0x20000038
 800aa94:	0800b6f4 	.word	0x0800b6f4
 800aa98:	0800b714 	.word	0x0800b714
 800aa9c:	0800b6d4 	.word	0x0800b6d4

0800aaa0 <abort>:
 800aaa0:	b508      	push	{r3, lr}
 800aaa2:	2006      	movs	r0, #6
 800aaa4:	f000 f898 	bl	800abd8 <raise>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f7f7 f89b 	bl	8001be4 <_exit>

0800aaae <__swhatbuf_r>:
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	460e      	mov	r6, r1
 800aab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab6:	2900      	cmp	r1, #0
 800aab8:	b096      	sub	sp, #88	; 0x58
 800aaba:	4614      	mov	r4, r2
 800aabc:	461d      	mov	r5, r3
 800aabe:	da07      	bge.n	800aad0 <__swhatbuf_r+0x22>
 800aac0:	2300      	movs	r3, #0
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	89b3      	ldrh	r3, [r6, #12]
 800aac6:	061a      	lsls	r2, r3, #24
 800aac8:	d410      	bmi.n	800aaec <__swhatbuf_r+0x3e>
 800aaca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aace:	e00e      	b.n	800aaee <__swhatbuf_r+0x40>
 800aad0:	466a      	mov	r2, sp
 800aad2:	f000 f89d 	bl	800ac10 <_fstat_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	dbf2      	blt.n	800aac0 <__swhatbuf_r+0x12>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aae4:	425a      	negs	r2, r3
 800aae6:	415a      	adcs	r2, r3
 800aae8:	602a      	str	r2, [r5, #0]
 800aaea:	e7ee      	b.n	800aaca <__swhatbuf_r+0x1c>
 800aaec:	2340      	movs	r3, #64	; 0x40
 800aaee:	2000      	movs	r0, #0
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	b016      	add	sp, #88	; 0x58
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaf8 <__smakebuf_r>:
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aafc:	079d      	lsls	r5, r3, #30
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d507      	bpl.n	800ab14 <__smakebuf_r+0x1c>
 800ab04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	6163      	str	r3, [r4, #20]
 800ab10:	b002      	add	sp, #8
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	ab01      	add	r3, sp, #4
 800ab16:	466a      	mov	r2, sp
 800ab18:	f7ff ffc9 	bl	800aaae <__swhatbuf_r>
 800ab1c:	9900      	ldr	r1, [sp, #0]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7fe fd6d 	bl	8009600 <_malloc_r>
 800ab26:	b948      	cbnz	r0, 800ab3c <__smakebuf_r+0x44>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d4ef      	bmi.n	800ab10 <__smakebuf_r+0x18>
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	f043 0302 	orr.w	r3, r3, #2
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7e3      	b.n	800ab04 <__smakebuf_r+0xc>
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <__smakebuf_r+0x7c>)
 800ab3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	6163      	str	r3, [r4, #20]
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	6120      	str	r0, [r4, #16]
 800ab52:	b15b      	cbz	r3, 800ab6c <__smakebuf_r+0x74>
 800ab54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 f86b 	bl	800ac34 <_isatty_r>
 800ab5e:	b128      	cbz	r0, 800ab6c <__smakebuf_r+0x74>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	89a0      	ldrh	r0, [r4, #12]
 800ab6e:	4305      	orrs	r5, r0
 800ab70:	81a5      	strh	r5, [r4, #12]
 800ab72:	e7cd      	b.n	800ab10 <__smakebuf_r+0x18>
 800ab74:	0800a409 	.word	0x0800a409

0800ab78 <_malloc_usable_size_r>:
 800ab78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7c:	1f18      	subs	r0, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfbc      	itt	lt
 800ab82:	580b      	ldrlt	r3, [r1, r0]
 800ab84:	18c0      	addlt	r0, r0, r3
 800ab86:	4770      	bx	lr

0800ab88 <_raise_r>:
 800ab88:	291f      	cmp	r1, #31
 800ab8a:	b538      	push	{r3, r4, r5, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	d904      	bls.n	800ab9c <_raise_r+0x14>
 800ab92:	2316      	movs	r3, #22
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab9e:	b112      	cbz	r2, 800aba6 <_raise_r+0x1e>
 800aba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba4:	b94b      	cbnz	r3, 800abba <_raise_r+0x32>
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 f830 	bl	800ac0c <_getpid_r>
 800abac:	462a      	mov	r2, r5
 800abae:	4601      	mov	r1, r0
 800abb0:	4620      	mov	r0, r4
 800abb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb6:	f000 b817 	b.w	800abe8 <_kill_r>
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d00a      	beq.n	800abd4 <_raise_r+0x4c>
 800abbe:	1c59      	adds	r1, r3, #1
 800abc0:	d103      	bne.n	800abca <_raise_r+0x42>
 800abc2:	2316      	movs	r3, #22
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7e7      	b.n	800ab9a <_raise_r+0x12>
 800abca:	2400      	movs	r4, #0
 800abcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abd0:	4628      	mov	r0, r5
 800abd2:	4798      	blx	r3
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7e0      	b.n	800ab9a <_raise_r+0x12>

0800abd8 <raise>:
 800abd8:	4b02      	ldr	r3, [pc, #8]	; (800abe4 <raise+0xc>)
 800abda:	4601      	mov	r1, r0
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f7ff bfd3 	b.w	800ab88 <_raise_r>
 800abe2:	bf00      	nop
 800abe4:	20000038 	.word	0x20000038

0800abe8 <_kill_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	; (800ac08 <_kill_r+0x20>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	4611      	mov	r1, r2
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	f7f6 ffe5 	bl	8001bc4 <_kill>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	d102      	bne.n	800ac04 <_kill_r+0x1c>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	b103      	cbz	r3, 800ac04 <_kill_r+0x1c>
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	bf00      	nop
 800ac08:	20010620 	.word	0x20010620

0800ac0c <_getpid_r>:
 800ac0c:	f7f6 bfd2 	b.w	8001bb4 <_getpid>

0800ac10 <_fstat_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_fstat_r+0x20>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	602b      	str	r3, [r5, #0]
 800ac1e:	f7f7 f830 	bl	8001c82 <_fstat>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d102      	bne.n	800ac2c <_fstat_r+0x1c>
 800ac26:	682b      	ldr	r3, [r5, #0]
 800ac28:	b103      	cbz	r3, 800ac2c <_fstat_r+0x1c>
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	bd38      	pop	{r3, r4, r5, pc}
 800ac2e:	bf00      	nop
 800ac30:	20010620 	.word	0x20010620

0800ac34 <_isatty_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	; (800ac50 <_isatty_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f7 f82f 	bl	8001ca2 <_isatty>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_isatty_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_isatty_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20010620 	.word	0x20010620

0800ac54 <_init>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	bf00      	nop
 800ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5a:	bc08      	pop	{r3}
 800ac5c:	469e      	mov	lr, r3
 800ac5e:	4770      	bx	lr

0800ac60 <_fini>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	bf00      	nop
 800ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac66:	bc08      	pop	{r3}
 800ac68:	469e      	mov	lr, r3
 800ac6a:	4770      	bx	lr
