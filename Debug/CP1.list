
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  0800ee78  0800ee78  0001ee78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100f4  080100f4  00030304  2**0
                  CONTENTS
  4 .ARM          00000008  080100f4  080100f4  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100fc  080100fc  00030304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100fc  080100fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010100  08010100  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  20000000  08010104  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001861c  20000304  08010408  00030304  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018920  08010408  00038920  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020596  00000000  00000000  00030332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397e  00000000  00000000  000508c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00054248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00055608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7b1  00000000  00000000  000568a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197cd  00000000  00000000  00082059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010444c  00000000  00000000  0009b826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019fc72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006820  00000000  00000000  0019fcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000304 	.word	0x20000304
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ee5c 	.word	0x0800ee5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000308 	.word	0x20000308
 800023c:	0800ee5c 	.word	0x0800ee5c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC3_Init1>:
bool Read;
uint32_t adc_value;
bool run = 0;

void MX_ADC3_Init1(bool software1)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  software = software1;
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_ADC3_Init1+0xc0>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a40:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]

  if(software)
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <MX_ADC3_Init1+0x7e>
	  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_ADC3_Init1+0xc4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28


  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a70:	f004 f85a 	bl	8004b28 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC3_Init1+0x8e>
  {
    Error_Handler();
 8000a7a:	f002 fc57 	bl	800332c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a92:	f004 fad5 	bl	8005040 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC3_Init1+0xb0>
  {
    Error_Handler();
 8000a9c:	f002 fc46 	bl	800332c <Error_Handler>
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000045d 	.word	0x2000045d
 8000aac:	20010464 	.word	0x20010464
 8000ab0:	40012200 	.word	0x40012200
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_ADC3_Init+0xa0>)
 8000ace:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000afa:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b1c:	f004 f804 	bl	8004b28 <HAL_ADC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000b26:	f002 fc01 	bl	800332c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b3c:	f004 fa80 	bl	8005040 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000b46:	f002 fbf1 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20010464 	.word	0x20010464
 8000b58:	40012200 	.word	0x40012200

08000b5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d15c      	bne.n	8000c38 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000bde:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000be2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0xec>)
 8000bf4:	f004 ff3c 	bl	8005a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_ADC_MspInit+0xf0>)
 8000c0c:	f004 ff30 	bl	8005a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c10:	230f      	movs	r3, #15
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xf4>)
 8000c24:	f004 ff24 	bl	8005a70 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f004 fd60 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c32:	2012      	movs	r0, #18
 8000c34:	f004 fd79 	bl	800572a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40012200 	.word	0x40012200
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <config_ADC+0x38>)
 8000c7e:	f004 f9df 	bl	8005040 <HAL_ADC_ConfigChannel>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20010464 	.word	0x20010464

08000c90 <read_ADC>:

uint32_t read_ADC(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	Read = false;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <read_ADC+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <read_ADC+0x38>)
 8000c9c:	f003 ff88 	bl	8004bb0 <HAL_ADC_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <read_ADC+0x2c>
	{
	  while(!Read);
 8000ca6:	bf00      	nop
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <read_ADC+0x34>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f8      	bne.n	8000ca8 <read_ADC+0x18>
	  HAL_ADC_Stop_IT(&hadc3);
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <read_ADC+0x38>)
 8000cb8:	f004 f852 	bl	8004d60 <HAL_ADC_Stop_IT>
	}
	return adc_value;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <read_ADC+0x3c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000045c 	.word	0x2000045c
 8000cc8:	20010464 	.word	0x20010464
 8000ccc:	20010460 	.word	0x20010460

08000cd0 <reset_adc_buf>:

void reset_adc_buf(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < ADC_BUF_SIZE - 1 ; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e007      	b.n	8000cec <reset_adc_buf+0x1c>
		adc_buf[i] = 0;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <reset_adc_buf+0x38>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < ADC_BUF_SIZE - 1 ; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	ddf2      	ble.n	8000cdc <reset_adc_buf+0xc>

	adc_buf_index = 0;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <reset_adc_buf+0x3c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200105b4 	.word	0x200105b4
 8000d0c:	20000320 	.word	0x20000320

08000d10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	adc_it[software]();
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_ADC_ConvCpltCallback+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	4798      	blx	r3
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000045d 	.word	0x2000045d
 8000d34:	20000000 	.word	0x20000000

08000d38 <software_adc_it>:
void (*adc_it[])() = {
	timer_adc_it,
	software_adc_it
};

void software_adc_it(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

	adc_value = HAL_ADC_GetValue(&hadc3);
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <software_adc_it+0x1c>)
 8000d3e:	f004 f95d 	bl	8004ffc <HAL_ADC_GetValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <software_adc_it+0x20>)
 8000d46:	6013      	str	r3, [r2, #0]
	Read = true;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <software_adc_it+0x24>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20010464 	.word	0x20010464
 8000d58:	20010460 	.word	0x20010460
 8000d5c:	2000045c 	.word	0x2000045c

08000d60 <timer_adc_it>:

void timer_adc_it(){
 8000d60:	b598      	push	{r3, r4, r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	adc_buf[adc_buf_index] = HAL_ADC_GetValue(&hadc3);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <timer_adc_it+0x3c>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <timer_adc_it+0x40>)
 8000d6a:	f004 f947 	bl	8004ffc <HAL_ADC_GetValue>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <timer_adc_it+0x44>)
 8000d72:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	process_buf(adc_buf, adc_buf_index);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <timer_adc_it+0x3c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <timer_adc_it+0x44>)
 8000d7e:	f001 ff8f 	bl	8002ca0 <process_buf>
	adc_buf_index++;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <timer_adc_it+0x3c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <timer_adc_it+0x3c>)
 8000d8a:	6013      	str	r3, [r2, #0]
	adc_buf_index &= ADC_BUF_SIZE - 1;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <timer_adc_it+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	4a01      	ldr	r2, [pc, #4]	; (8000d9c <timer_adc_it+0x3c>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	bd98      	pop	{r3, r4, r7, pc}
 8000d9c:	20000320 	.word	0x20000320
 8000da0:	20010464 	.word	0x20010464
 8000da4:	200105b4 	.word	0x200105b4

08000da8 <check_command>:

#define RECOVERY_TIME_MS 10


unsigned char check_command(char* message)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "VER", 3)))
 8000db4:	2203      	movs	r2, #3
 8000db6:	49a5      	ldr	r1, [pc, #660]	; (800104c <check_command+0x2a4>)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f009 ff8a 	bl	800acd2 <strncmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <check_command+0x22>
        cmd = VER;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e13b      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "FNF", 3)))
 8000dca:	2203      	movs	r2, #3
 8000dcc:	49a0      	ldr	r1, [pc, #640]	; (8001050 <check_command+0x2a8>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f009 ff7f 	bl	800acd2 <strncmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <check_command+0x38>
        cmd = FNF;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e130      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "FFF", 3)))
 8000de0:	2203      	movs	r2, #3
 8000de2:	499c      	ldr	r1, [pc, #624]	; (8001054 <check_command+0x2ac>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f009 ff74 	bl	800acd2 <strncmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <check_command+0x4e>
        cmd = FFF;
 8000df0:	2311      	movs	r3, #17
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e125      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "FNI", 3)))
 8000df6:	2203      	movs	r2, #3
 8000df8:	4997      	ldr	r1, [pc, #604]	; (8001058 <check_command+0x2b0>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f009 ff69 	bl	800acd2 <strncmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <check_command+0x64>
        cmd = FNI;
 8000e06:	230e      	movs	r3, #14
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e11a      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "FFI", 3)))
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4993      	ldr	r1, [pc, #588]	; (800105c <check_command+0x2b4>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f009 ff5e 	bl	800acd2 <strncmp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <check_command+0x7a>
        cmd = FFI;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e10f      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "STW", 3)))
 8000e22:	2203      	movs	r2, #3
 8000e24:	498e      	ldr	r1, [pc, #568]	; (8001060 <check_command+0x2b8>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f009 ff53 	bl	800acd2 <strncmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <check_command+0x90>
		cmd = STW;
 8000e32:	231d      	movs	r3, #29
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e104      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "FSW", 3)))
 8000e38:	2203      	movs	r2, #3
 8000e3a:	498a      	ldr	r1, [pc, #552]	; (8001064 <check_command+0x2bc>)
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f009 ff48 	bl	800acd2 <strncmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <check_command+0xa6>
		cmd = FSW;
 8000e48:	231b      	movs	r3, #27
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e0f9      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "KP", 2)))
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4985      	ldr	r1, [pc, #532]	; (8001068 <check_command+0x2c0>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f009 ff3d 	bl	800acd2 <strncmp>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <check_command+0xbc>
        cmd = KP;
 8000e5e:	231e      	movs	r3, #30
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e0ee      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "ST", 2)))
 8000e64:	2202      	movs	r2, #2
 8000e66:	4981      	ldr	r1, [pc, #516]	; (800106c <check_command+0x2c4>)
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f009 ff32 	bl	800acd2 <strncmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <check_command+0xd2>
        cmd = ST;
 8000e74:	2313      	movs	r3, #19
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e0e3      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "MR", 2)))
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	497c      	ldr	r1, [pc, #496]	; (8001070 <check_command+0x2c8>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f009 ff27 	bl	800acd2 <strncmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <check_command+0xe8>
        cmd = FFI;
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e0d8      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "MW", 2)))
 8000e90:	2202      	movs	r2, #2
 8000e92:	4978      	ldr	r1, [pc, #480]	; (8001074 <check_command+0x2cc>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f009 ff1c 	bl	800acd2 <strncmp>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <check_command+0xfe>
        cmd = MW;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e0cd      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "MI", 2)))
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4973      	ldr	r1, [pc, #460]	; (8001078 <check_command+0x2d0>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f009 ff11 	bl	800acd2 <strncmp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <check_command+0x114>
        cmd = MI;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e0c2      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "MO", 2)))
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	496f      	ldr	r1, [pc, #444]	; (800107c <check_command+0x2d4>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f009 ff06 	bl	800acd2 <strncmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <check_command+0x12a>
        cmd = MO;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e0b7      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "RD", 2)))
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	496a      	ldr	r1, [pc, #424]	; (8001080 <check_command+0x2d8>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f009 fefb 	bl	800acd2 <strncmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <check_command+0x140>
        cmd = RD;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e0ac      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "WD", 2)))
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4966      	ldr	r1, [pc, #408]	; (8001084 <check_command+0x2dc>)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f009 fef0 	bl	800acd2 <strncmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <check_command+0x156>
        cmd = WD;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e0a1      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "RA", 2)))
 8000efe:	2202      	movs	r2, #2
 8000f00:	4961      	ldr	r1, [pc, #388]	; (8001088 <check_command+0x2e0>)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f009 fee5 	bl	800acd2 <strncmp>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <check_command+0x16c>
        cmd = RA;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e096      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "WA", 2)))
 8000f14:	2202      	movs	r2, #2
 8000f16:	495d      	ldr	r1, [pc, #372]	; (800108c <check_command+0x2e4>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f009 feda 	bl	800acd2 <strncmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <check_command+0x182>
        cmd = WA;
 8000f24:	2308      	movs	r3, #8
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e08b      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "SP", 2)))
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4958      	ldr	r1, [pc, #352]	; (8001090 <check_command+0x2e8>)
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f009 fecf 	bl	800acd2 <strncmp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <check_command+0x198>
        cmd = SP;
 8000f3a:	230c      	movs	r3, #12
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e080      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "AC", 2)))
 8000f40:	2202      	movs	r2, #2
 8000f42:	4954      	ldr	r1, [pc, #336]	; (8001094 <check_command+0x2ec>)
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f009 fec4 	bl	800acd2 <strncmp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <check_command+0x1ae>
        cmd = AC;
 8000f50:	230d      	movs	r3, #13
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e075      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "UN", 2)))
 8000f56:	2202      	movs	r2, #2
 8000f58:	494f      	ldr	r1, [pc, #316]	; (8001098 <check_command+0x2f0>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f009 feb9 	bl	800acd2 <strncmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <check_command+0x1c4>
        cmd = UN;
 8000f66:	2316      	movs	r3, #22
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e06a      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "EN", 2)))
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	494b      	ldr	r1, [pc, #300]	; (800109c <check_command+0x2f4>)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f009 feae 	bl	800acd2 <strncmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <check_command+0x1da>
        cmd = EN;
 8000f7c:	2315      	movs	r3, #21
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e05f      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "CS", 2)))
 8000f82:	2202      	movs	r2, #2
 8000f84:	4946      	ldr	r1, [pc, #280]	; (80010a0 <check_command+0x2f8>)
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f009 fea3 	bl	800acd2 <strncmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <check_command+0x1f0>
        cmd = CS;
 8000f92:	2314      	movs	r3, #20
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e054      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "VR", 2)))
 8000f98:	2202      	movs	r2, #2
 8000f9a:	4942      	ldr	r1, [pc, #264]	; (80010a4 <check_command+0x2fc>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f009 fe98 	bl	800acd2 <strncmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <check_command+0x206>
        cmd = VR;
 8000fa8:	2317      	movs	r3, #23
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e049      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "HW", 2)))
 8000fae:	2202      	movs	r2, #2
 8000fb0:	493d      	ldr	r1, [pc, #244]	; (80010a8 <check_command+0x300>)
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f009 fe8d 	bl	800acd2 <strncmp>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <check_command+0x21c>
		cmd = HW;
 8000fbe:	231a      	movs	r3, #26
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e03e      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "SW", 2)))
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4939      	ldr	r1, [pc, #228]	; (80010ac <check_command+0x304>)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f009 fe82 	bl	800acd2 <strncmp>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <check_command+0x232>
		cmd = SW;
 8000fd4:	231c      	movs	r3, #28
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e033      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "$", 1)))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <check_command+0x308>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <check_command+0x246>
        cmd = LAST;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e029      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "?", 1)))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <check_command+0x30c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <check_command+0x25a>
        cmd = HELP;
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e01f      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "S", 1)))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <check_command+0x310>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <check_command+0x26e>
        cmd = S;
 8001010:	2312      	movs	r3, #18
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e015      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "/", 1)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <check_command+0x314>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <check_command+0x282>
		cmd = INC;
 8001024:	2318      	movs	r3, #24
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e00b      	b.n	8001042 <check_command+0x29a>
    else if((!strncmp((char*) message, "\\", 1)))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <check_command+0x318>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <check_command+0x296>
		cmd = DEC;
 8001038:	2319      	movs	r3, #25
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e001      	b.n	8001042 <check_command+0x29a>
    else
    	cmd = INV;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]

    return cmd;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0800ee78 	.word	0x0800ee78
 8001050:	0800ee7c 	.word	0x0800ee7c
 8001054:	0800ee80 	.word	0x0800ee80
 8001058:	0800ee84 	.word	0x0800ee84
 800105c:	0800ee88 	.word	0x0800ee88
 8001060:	0800ee8c 	.word	0x0800ee8c
 8001064:	0800ee90 	.word	0x0800ee90
 8001068:	0800ee94 	.word	0x0800ee94
 800106c:	0800ee98 	.word	0x0800ee98
 8001070:	0800ee9c 	.word	0x0800ee9c
 8001074:	0800eea0 	.word	0x0800eea0
 8001078:	0800eea4 	.word	0x0800eea4
 800107c:	0800eea8 	.word	0x0800eea8
 8001080:	0800eeac 	.word	0x0800eeac
 8001084:	0800eeb0 	.word	0x0800eeb0
 8001088:	0800eeb4 	.word	0x0800eeb4
 800108c:	0800eeb8 	.word	0x0800eeb8
 8001090:	0800eebc 	.word	0x0800eebc
 8001094:	0800eec0 	.word	0x0800eec0
 8001098:	0800eec4 	.word	0x0800eec4
 800109c:	0800eec8 	.word	0x0800eec8
 80010a0:	0800eecc 	.word	0x0800eecc
 80010a4:	0800eed0 	.word	0x0800eed0
 80010a8:	0800eed4 	.word	0x0800eed4
 80010ac:	0800eed8 	.word	0x0800eed8
 80010b0:	0800eedc 	.word	0x0800eedc
 80010b4:	0800eee0 	.word	0x0800eee0
 80010b8:	0800eee4 	.word	0x0800eee4
 80010bc:	0800eee8 	.word	0x0800eee8
 80010c0:	0800eeec 	.word	0x0800eeec

080010c4 <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <proc_inv_cmd+0x18>)
 80010ce:	f003 fba3 	bl	8004818 <send_UART>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800eef0 	.word	0x0800eef0

080010e0 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	f107 0210 	add.w	r2, r7, #16
 80010f0:	4932      	ldr	r1, [pc, #200]	; (80011bc <proc_mr_cmd+0xdc>)
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f009 fd74 	bl	800abe0 <siscanf>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d157      	bne.n	80011ae <proc_mr_cmd+0xce>
	{
 80010fe:	466b      	mov	r3, sp
 8001100:	461d      	mov	r5, r3
		char data[length];
 8001102:	68fc      	ldr	r4, [r7, #12]
 8001104:	4623      	mov	r3, r4
 8001106:	3b01      	subs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	4620      	mov	r0, r4
 800110c:	f04f 0100 	mov.w	r1, #0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	00cb      	lsls	r3, r1, #3
 800111a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800111e:	00c2      	lsls	r2, r0, #3
 8001120:	4620      	mov	r0, r4
 8001122:	f04f 0100 	mov.w	r1, #0
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	00cb      	lsls	r3, r1, #3
 8001130:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001134:	00c2      	lsls	r2, r0, #3
 8001136:	1de3      	adds	r3, r4, #7
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	ebad 0d03 	sub.w	sp, sp, r3
 8001140:	466b      	mov	r3, sp
 8001142:	3300      	adds	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fa81 	bl	8002654 <memory_read>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d025      	beq.n	80011a4 <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <proc_mr_cmd+0xe0>)
 8001160:	f009 fdc9 	bl	800acf6 <strncpy>

			sprintf((char*) message, "Memory read: ");
 8001164:	4917      	ldr	r1, [pc, #92]	; (80011c4 <proc_mr_cmd+0xe4>)
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f009 fd1a 	bl	800aba0 <siprintf>

			for(int i = 0; i < length; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	e010      	b.n	8001194 <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f86e 	bl	8000254 <strlen>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1898      	adds	r0, r3, r2
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <proc_mr_cmd+0xe8>)
 800118a:	f009 fd09 	bl	800aba0 <siprintf>
			for(int i = 0; i < length; i++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3ea      	bcc.n	8001172 <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f003 fb3b 	bl	8004818 <send_UART>
 80011a2:	e002      	b.n	80011aa <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <proc_mr_cmd+0xec>)
 80011a6:	f003 fb37 	bl	8004818 <send_UART>
 80011aa:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 80011ac:	e002      	b.n	80011b4 <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <proc_mr_cmd+0xf0>)
 80011b0:	f003 fb32 	bl	8004818 <send_UART>
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	0800ef18 	.word	0x0800ef18
 80011c0:	200145b4 	.word	0x200145b4
 80011c4:	0800ef24 	.word	0x0800ef24
 80011c8:	0800ef34 	.word	0x0800ef34
 80011cc:	0800ef3c 	.word	0x0800ef3c
 80011d0:	0800ef70 	.word	0x0800ef70

080011d4 <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 80011dc:	f107 0110 	add.w	r1, r7, #16
 80011e0:	f107 0214 	add.w	r2, r7, #20
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	4912      	ldr	r1, [pc, #72]	; (8001238 <proc_mw_cmd+0x64>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f009 fcf6 	bl	800abe0 <siscanf>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d116      	bne.n	8001228 <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fa5b 	bl	80026bc <memory_write>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <proc_mw_cmd+0x68>)
 8001214:	f009 fd6f 	bl	800acf6 <strncpy>
			send_UART("Memory written with success.");
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <proc_mw_cmd+0x6c>)
 800121a:	f003 fafd 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 800121e:	e006      	b.n	800122e <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <proc_mw_cmd+0x70>)
 8001222:	f003 faf9 	bl	8004818 <send_UART>
}
 8001226:	e002      	b.n	800122e <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <proc_mw_cmd+0x74>)
 800122a:	f003 faf5 	bl	8004818 <send_UART>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800ef98 	.word	0x0800ef98
 800123c:	200145b4 	.word	0x200145b4
 8001240:	0800efa4 	.word	0x0800efa4
 8001244:	0800efc4 	.word	0x0800efc4
 8001248:	0800eff8 	.word	0x0800eff8

0800124c <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	f107 020c 	add.w	r2, r7, #12
 800125c:	4918      	ldr	r1, [pc, #96]	; (80012c0 <proc_mi_cmd+0x74>)
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f009 fcbe 	bl	800abe0 <siscanf>
 8001264:	4603      	mov	r3, r0
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fec1 	bl	8002ff8 <is_GPIO_pin_free>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d016      	beq.n	80012aa <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fa52 	bl	800272c <make_pin_input>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800128e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <proc_mi_cmd+0x78>)
 8001296:	f009 fd2e 	bl	800acf6 <strncpy>
				send_UART("Pin(s) set as input with success.");
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <proc_mi_cmd+0x7c>)
 800129c:	f003 fabc 	bl	8004818 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 80012a0:	e00a      	b.n	80012b8 <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <proc_mi_cmd+0x80>)
 80012a4:	f003 fab8 	bl	8004818 <send_UART>
}
 80012a8:	e006      	b.n	80012b8 <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <proc_mi_cmd+0x84>)
 80012ac:	f003 fab4 	bl	8004818 <send_UART>
}
 80012b0:	e002      	b.n	80012b8 <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <proc_mi_cmd+0x88>)
 80012b4:	f003 fab0 	bl	8004818 <send_UART>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800f024 	.word	0x0800f024
 80012c4:	200145b4 	.word	0x200145b4
 80012c8:	0800f030 	.word	0x0800f030
 80012cc:	0800f054 	.word	0x0800f054
 80012d0:	0800f088 	.word	0x0800f088
 80012d4:	0800f0c0 	.word	0x0800f0c0

080012d8 <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <proc_mo_cmd+0x74>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f009 fc78 	bl	800abe0 <siscanf>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fe7b 	bl	8002ff8 <is_GPIO_pin_free>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d016      	beq.n	8001336 <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 faa8 	bl	8002864 <make_pin_output>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <proc_mo_cmd+0x78>)
 8001322:	f009 fce8 	bl	800acf6 <strncpy>
				send_UART("Pin(s) set as output with success.");
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <proc_mo_cmd+0x7c>)
 8001328:	f003 fa76 	bl	8004818 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 800132c:	e00a      	b.n	8001344 <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <proc_mo_cmd+0x80>)
 8001330:	f003 fa72 	bl	8004818 <send_UART>
}
 8001334:	e006      	b.n	8001344 <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <proc_mo_cmd+0x84>)
 8001338:	f003 fa6e 	bl	8004818 <send_UART>
}
 800133c:	e002      	b.n	8001344 <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <proc_mo_cmd+0x88>)
 8001340:	f003 fa6a 	bl	8004818 <send_UART>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	0800f0ec 	.word	0x0800f0ec
 8001350:	200145b4 	.word	0x200145b4
 8001354:	0800f0f8 	.word	0x0800f0f8
 8001358:	0800f11c 	.word	0x0800f11c
 800135c:	0800f088 	.word	0x0800f088
 8001360:	0800f154 	.word	0x0800f154

08001364 <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	f107 0220 	add.w	r2, r7, #32
 8001374:	492a      	ldr	r1, [pc, #168]	; (8001420 <proc_rd_cmd+0xbc>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f009 fc32 	bl	800abe0 <siscanf>
 800137c:	4603      	mov	r3, r0
 800137e:	2b02      	cmp	r3, #2
 8001380:	d147      	bne.n	8001412 <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	69f9      	ldr	r1, [r7, #28]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fb08 	bl	80029a0 <read_dig_input>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d039      	beq.n	800140a <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <proc_rd_cmd+0xc0>)
 800139e:	f009 fcaa 	bl	800acf6 <strncpy>

			sprintf((char*) message, "Digital input read: ");
 80013a2:	4921      	ldr	r1, [pc, #132]	; (8001428 <proc_rd_cmd+0xc4>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f009 fbfb 	bl	800aba0 <siprintf>

			for(int i = 15; i >= 0; i--)
 80013aa:	230f      	movs	r3, #15
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	e025      	b.n	80013fc <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7fe ff4f 	bl	8000254 <strlen>
 80013b6:	4602      	mov	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1898      	adds	r0, r3, r2
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4918      	ldr	r1, [pc, #96]	; (800142c <proc_rd_cmd+0xc8>)
 80013ca:	f009 fbe9 	bl	800aba0 <siprintf>

				if(!(i % 4) && i)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10e      	bne.n	80013f6 <proc_rd_cmd+0x92>
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe ff38 	bl	8000254 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	4910      	ldr	r1, [pc, #64]	; (8001430 <proc_rd_cmd+0xcc>)
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	3b01      	subs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dad6      	bge.n	80013b0 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f003 fa08 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 8001408:	e006      	b.n	8001418 <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <proc_rd_cmd+0xd0>)
 800140c:	f003 fa04 	bl	8004818 <send_UART>
}
 8001410:	e002      	b.n	8001418 <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <proc_rd_cmd+0xd4>)
 8001414:	f003 fa00 	bl	8004818 <send_UART>
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800f180 	.word	0x0800f180
 8001424:	200145b4 	.word	0x200145b4
 8001428:	0800f18c 	.word	0x0800f18c
 800142c:	0800f1a4 	.word	0x0800f1a4
 8001430:	0800f1a8 	.word	0x0800f1a8
 8001434:	0800f1ac 	.word	0x0800f1ac
 8001438:	0800f1e4 	.word	0x0800f1e4

0800143c <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 8001444:	f107 0110 	add.w	r1, r7, #16
 8001448:	f107 0214 	add.w	r2, r7, #20
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <proc_wd_cmd+0x7c>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f009 fbc2 	bl	800abe0 <siscanf>
 800145c:	4603      	mov	r3, r0
 800145e:	2b03      	cmp	r3, #3
 8001460:	d123      	bne.n	80014aa <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fdc5 	bl	8002ff8 <is_GPIO_pin_free>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d016      	beq.n	80014a2 <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fada 	bl	8002a34 <write_dig_output>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <proc_wd_cmd+0x80>)
 800148e:	f009 fc32 	bl	800acf6 <strncpy>
				send_UART("Digital output value wrote with success.");
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <proc_wd_cmd+0x84>)
 8001494:	f003 f9c0 	bl	8004818 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 8001498:	e00a      	b.n	80014b0 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <proc_wd_cmd+0x88>)
 800149c:	f003 f9bc 	bl	8004818 <send_UART>
}
 80014a0:	e006      	b.n	80014b0 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <proc_wd_cmd+0x8c>)
 80014a4:	f003 f9b8 	bl	8004818 <send_UART>
}
 80014a8:	e002      	b.n	80014b0 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <proc_wd_cmd+0x90>)
 80014ac:	f003 f9b4 	bl	8004818 <send_UART>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800f214 	.word	0x0800f214
 80014bc:	200145b4 	.word	0x200145b4
 80014c0:	0800f220 	.word	0x0800f220
 80014c4:	0800f24c 	.word	0x0800f24c
 80014c8:	0800f088 	.word	0x0800f088
 80014cc:	0800f288 	.word	0x0800f288

080014d0 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	461a      	mov	r2, r3
 80014de:	492c      	ldr	r1, [pc, #176]	; (8001590 <proc_ra_cmd+0xc0>)
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f009 fb7d 	bl	800abe0 <siscanf>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d13f      	bne.n	800156c <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fae7 	bl	8002ac8 <analog_read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d031      	beq.n	8001564 <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4823      	ldr	r0, [pc, #140]	; (8001594 <proc_ra_cmd+0xc4>)
 8001508:	f009 fbf5 	bl	800acf6 <strncpy>

			float volts = (float) value * 3.3 / 4095;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001516:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800151a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001580 <proc_ra_cmd+0xb0>
 800151e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001522:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001588 <proc_ra_cmd+0xb8>
 8001526:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800152a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800152e:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 8001532:	4919      	ldr	r1, [pc, #100]	; (8001598 <proc_ra_cmd+0xc8>)
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f009 fb33 	bl	800aba0 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7fe fe8a 	bl	8000254 <strlen>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	edd7 7a05 	vldr	s15, [r7, #20]
 800154c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001550:	ed8d 7b00 	vstr	d7, [sp]
 8001554:	4911      	ldr	r1, [pc, #68]	; (800159c <proc_ra_cmd+0xcc>)
 8001556:	4618      	mov	r0, r3
 8001558:	f009 fb22 	bl	800aba0 <siprintf>

			send_UART((char*) message);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f003 f95b 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 8001562:	e006      	b.n	8001572 <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <proc_ra_cmd+0xd0>)
 8001566:	f003 f957 	bl	8004818 <send_UART>
}
 800156a:	e002      	b.n	8001572 <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <proc_ra_cmd+0xd4>)
 800156e:	f003 f953 	bl	8004818 <send_UART>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	66666666 	.word	0x66666666
 8001584:	400a6666 	.word	0x400a6666
 8001588:	00000000 	.word	0x00000000
 800158c:	40affe00 	.word	0x40affe00
 8001590:	0800f2bc 	.word	0x0800f2bc
 8001594:	200145b4 	.word	0x200145b4
 8001598:	0800f2c4 	.word	0x0800f2c4
 800159c:	0800f2e0 	.word	0x0800f2e0
 80015a0:	0800f2ec 	.word	0x0800f2ec
 80015a4:	0800f320 	.word	0x0800f320

080015a8 <proc_wa_cmd>:

void proc_wa_cmd(char* message)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    unsigned int addr3, volts;

    if(sscanf((char*) message, "WA %x %d", &addr3, &volts) == 2)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	f107 0210 	add.w	r2, r7, #16
 80015b8:	491f      	ldr	r1, [pc, #124]	; (8001638 <proc_wa_cmd+0x90>)
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f009 fb10 	bl	800abe0 <siscanf>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d12d      	bne.n	8001622 <proc_wa_cmd+0x7a>
    {
    	float value = (float) volts * 4095 / 3.3;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800163c <proc_wa_cmd+0x94>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015dc:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001630 <proc_wa_cmd+0x88>
 80015e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]

        if(analog_write(addr3, value))
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f6:	ee17 1a90 	vmov	r1, s15
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fa7e 	bl	8002afc <analog_write>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <proc_wa_cmd+0x72>
        {
            strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <proc_wa_cmd+0x98>)
 800160e:	f009 fb72 	bl	800acf6 <strncpy>
            send_UART("Analog value wrote with success.");
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <proc_wa_cmd+0x9c>)
 8001614:	f003 f900 	bl	8004818 <send_UART>
        else
            send_UART("Invalid Analog Write instruction argument values.");
    }
    else
        send_UART("Invalid Analog Write instruction syntax.");
}
 8001618:	e006      	b.n	8001628 <proc_wa_cmd+0x80>
            send_UART("Invalid Analog Write instruction argument values.");
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <proc_wa_cmd+0xa0>)
 800161c:	f003 f8fc 	bl	8004818 <send_UART>
}
 8001620:	e002      	b.n	8001628 <proc_wa_cmd+0x80>
        send_UART("Invalid Analog Write instruction syntax.");
 8001622:	480a      	ldr	r0, [pc, #40]	; (800164c <proc_wa_cmd+0xa4>)
 8001624:	f003 f8f8 	bl	8004818 <send_UART>
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	66666666 	.word	0x66666666
 8001634:	400a6666 	.word	0x400a6666
 8001638:	0800f348 	.word	0x0800f348
 800163c:	457ff000 	.word	0x457ff000
 8001640:	200145b4 	.word	0x200145b4
 8001644:	0800f354 	.word	0x0800f354
 8001648:	0800f378 	.word	0x0800f378
 800164c:	0800f3ac 	.word	0x0800f3ac

08001650 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0c4      	sub	sp, #272	; 0x110
 8001654:	af00      	add	r7, sp, #0
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b0d      	cmp	r3, #13
 8001664:	d12a      	bne.n	80016bc <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800166c:	e010      	b.n	8001690 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <proc_last_cmd+0x7c>)
 8001670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001674:	4413      	add	r3, r2
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 8001686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800168a:	3301      	adds	r3, #1
 800168c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001694:	2bff      	cmp	r3, #255	; 0xff
 8001696:	ddea      	ble.n	800166e <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb83 	bl	8000da8 <check_command>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 80016a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80016ac:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <proc_last_cmd+0x80>)
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	f107 0208 	add.w	r2, r7, #8
 80016b6:	4610      	mov	r0, r2
 80016b8:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80016ba:	e002      	b.n	80016c2 <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <proc_last_cmd+0x84>)
 80016be:	f003 f8ab 	bl	8004818 <send_UART>
}
 80016c2:	bf00      	nop
 80016c4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200145b4 	.word	0x200145b4
 80016d0:	20000008 	.word	0x20000008
 80016d4:	0800f3d8 	.word	0x0800f3d8

080016d8 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b0d      	cmp	r3, #13
 80016e8:	d109      	bne.n	80016fe <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <proc_help_cmd+0x34>)
 80016f2:	f009 fb00 	bl	800acf6 <strncpy>

		send_UART("MR <addr> <length>\n\r"
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <proc_help_cmd+0x38>)
 80016f8:	f003 f88e 	bl	8004818 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 80016fc:	e002      	b.n	8001704 <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <proc_help_cmd+0x3c>)
 8001700:	f003 f88a 	bl	8004818 <send_UART>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200145b4 	.word	0x200145b4
 8001710:	0800f3f8 	.word	0x0800f3f8
 8001714:	0800f4b4 	.word	0x0800f4b4

08001718 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3303      	adds	r3, #3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b0d      	cmp	r3, #13
 8001728:	d113      	bne.n	8001752 <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <proc_ver_cmd+0x48>)
 8001732:	f009 fae0 	bl	800acf6 <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <proc_ver_cmd+0x4c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	4909      	ldr	r1, [pc, #36]	; (8001764 <proc_ver_cmd+0x4c>)
 800173e:	600a      	str	r2, [r1, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4909      	ldr	r1, [pc, #36]	; (8001768 <proc_ver_cmd+0x50>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f009 fa2b 	bl	800aba0 <siprintf>
		send_UART((char*) message);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f003 f864 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001750:	e002      	b.n	8001758 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <proc_ver_cmd+0x54>)
 8001754:	f003 f860 	bl	8004818 <send_UART>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200145b4 	.word	0x200145b4
 8001764:	20000334 	.word	0x20000334
 8001768:	0800f4d4 	.word	0x0800f4d4
 800176c:	0800f508 	.word	0x0800f508

08001770 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "SP %s %d", timeunit, &unit) == 2)
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	491f      	ldr	r1, [pc, #124]	; (8001800 <proc_sp_cmd+0x90>)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f009 fa2c 	bl	800abe0 <siscanf>
 8001788:	4603      	mov	r3, r0
 800178a:	2b02      	cmp	r3, #2
 800178c:	d131      	bne.n	80017f2 <proc_sp_cmd+0x82>
		{
			if(strcmp(timeunit,"ms") == 0 || strcmp(timeunit,"s") == 0 || strcmp(timeunit,"us") == 0)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	491c      	ldr	r1, [pc, #112]	; (8001804 <proc_sp_cmd+0x94>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fd53 	bl	8000240 <strcmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d011      	beq.n	80017c4 <proc_sp_cmd+0x54>
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4918      	ldr	r1, [pc, #96]	; (8001808 <proc_sp_cmd+0x98>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd4a 	bl	8000240 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <proc_sp_cmd+0x54>
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4915      	ldr	r1, [pc, #84]	; (800180c <proc_sp_cmd+0x9c>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fd41 	bl	8000240 <strcmp>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d112      	bne.n	80017ea <proc_sp_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <proc_sp_cmd+0xa0>)
 80017cc:	f009 fa93 	bl	800acf6 <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <proc_sp_cmd+0xa4>)
 80017d8:	f009 fa73 	bl	800acc2 <strcpy>
				sp_config.unit = unit;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <proc_sp_cmd+0xa8>)
 80017e0:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <proc_sp_cmd+0xac>)
 80017e4:	f003 f818 	bl	8004818 <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 80017e8:	e006      	b.n	80017f8 <proc_sp_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <proc_sp_cmd+0xb0>)
 80017ec:	f003 f814 	bl	8004818 <send_UART>
}
 80017f0:	e002      	b.n	80017f8 <proc_sp_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <proc_sp_cmd+0xb4>)
 80017f4:	f003 f810 	bl	8004818 <send_UART>
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800f528 	.word	0x0800f528
 8001804:	0800f534 	.word	0x0800f534
 8001808:	0800f538 	.word	0x0800f538
 800180c:	0800f53c 	.word	0x0800f53c
 8001810:	200145b4 	.word	0x200145b4
 8001814:	200000a0 	.word	0x200000a0
 8001818:	20000094 	.word	0x20000094
 800181c:	0800f540 	.word	0x0800f540
 8001820:	0800f574 	.word	0x0800f574
 8001824:	0800f5a8 	.word	0x0800f5a8

08001828 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	461a      	mov	r2, r3
 8001836:	4912      	ldr	r1, [pc, #72]	; (8001880 <proc_ac_cmd+0x58>)
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f009 f9d1 	bl	800abe0 <siscanf>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d116      	bne.n	8001872 <proc_ac_cmd+0x4a>
	{
		if(addr3 > 0 && addr3 <= 0x0F)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00f      	beq.n	800186a <proc_ac_cmd+0x42>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80c      	bhi.n	800186a <proc_ac_cmd+0x42>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <proc_ac_cmd+0x5c>)
 8001858:	f009 fa4d 	bl	800acf6 <strncpy>

			sp_config.addr3 = addr3;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <proc_ac_cmd+0x60>)
 8001860:	6013      	str	r3, [r2, #0]
			send_UART("Analog Channel for Sampling changed with success.");
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <proc_ac_cmd+0x64>)
 8001864:	f002 ffd8 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 8001868:	e006      	b.n	8001878 <proc_ac_cmd+0x50>
			send_UART("Invalid Analog Channel instruction argument values.");
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <proc_ac_cmd+0x68>)
 800186c:	f002 ffd4 	bl	8004818 <send_UART>
}
 8001870:	e002      	b.n	8001878 <proc_ac_cmd+0x50>
		send_UART("Invalid Analog Channel instruction syntax.");
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <proc_ac_cmd+0x6c>)
 8001874:	f002 ffd0 	bl	8004818 <send_UART>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	0800f5d4 	.word	0x0800f5d4
 8001884:	200145b4 	.word	0x200145b4
 8001888:	20000094 	.word	0x20000094
 800188c:	0800f5dc 	.word	0x0800f5dc
 8001890:	0800f610 	.word	0x0800f610
 8001894:	0800f644 	.word	0x0800f644

08001898 <proc_fni_cmd>:

void proc_fni_cmd(char* message)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b0d      	cmp	r3, #13
 80018a8:	d10c      	bne.n	80018c4 <proc_fni_cmd+0x2c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80018aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <proc_fni_cmd+0x3c>)
 80018b2:	f009 fa20 	bl	800acf6 <strncpy>
		sp_config.filter_type = Inf;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <proc_fni_cmd+0x40>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <proc_fni_cmd+0x44>)
 80018be:	f002 ffab 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid IRR Filter On instruction syntax.");
}
 80018c2:	e002      	b.n	80018ca <proc_fni_cmd+0x32>
		send_UART("Invalid IRR Filter On instruction syntax.");
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <proc_fni_cmd+0x48>)
 80018c6:	f002 ffa7 	bl	8004818 <send_UART>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200145b4 	.word	0x200145b4
 80018d8:	20000094 	.word	0x20000094
 80018dc:	0800f670 	.word	0x0800f670
 80018e0:	0800f67c 	.word	0x0800f67c

080018e4 <proc_ffi_cmd>:

void proc_ffi_cmd(char* message)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3303      	adds	r3, #3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b0d      	cmp	r3, #13
 80018f4:	d114      	bne.n	8001920 <proc_ffi_cmd+0x3c>
	{
		if(sp_config.filter_type == Inf)
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <proc_ffi_cmd+0x4c>)
 80018f8:	7b9b      	ldrb	r3, [r3, #14]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10c      	bne.n	8001918 <proc_ffi_cmd+0x34>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80018fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <proc_ffi_cmd+0x50>)
 8001906:	f009 f9f6 	bl	800acf6 <strncpy>
			sp_config.filter_type = Nf;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <proc_ffi_cmd+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <proc_ffi_cmd+0x54>)
 8001912:	f002 ff81 	bl	8004818 <send_UART>
		else
			send_UART("IRR Filter is already off.");
	}
	else
		send_UART("Invalid IRR Filter Off instruction syntax.");
}
 8001916:	e006      	b.n	8001926 <proc_ffi_cmd+0x42>
			send_UART("IRR Filter is already off.");
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <proc_ffi_cmd+0x58>)
 800191a:	f002 ff7d 	bl	8004818 <send_UART>
}
 800191e:	e002      	b.n	8001926 <proc_ffi_cmd+0x42>
		send_UART("Invalid IRR Filter Off instruction syntax.");
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <proc_ffi_cmd+0x5c>)
 8001922:	f002 ff79 	bl	8004818 <send_UART>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000094 	.word	0x20000094
 8001934:	200145b4 	.word	0x200145b4
 8001938:	0800f6a8 	.word	0x0800f6a8
 800193c:	0800f6b4 	.word	0x0800f6b4
 8001940:	0800f6d0 	.word	0x0800f6d0

08001944 <proc_fnf_cmd>:

void proc_fnf_cmd(char* message)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3303      	adds	r3, #3
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b0d      	cmp	r3, #13
 8001954:	d10c      	bne.n	8001970 <proc_fnf_cmd+0x2c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <proc_fnf_cmd+0x3c>)
 800195e:	f009 f9ca 	bl	800acf6 <strncpy>
		sp_config.filter_type = Fin;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <proc_fnf_cmd+0x40>)
 8001964:	2202      	movs	r2, #2
 8001966:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <proc_fnf_cmd+0x44>)
 800196a:	f002 ff55 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid FIR Filter On instruction syntax.");
}
 800196e:	e002      	b.n	8001976 <proc_fnf_cmd+0x32>
		send_UART("Invalid FIR Filter On instruction syntax.");
 8001970:	4806      	ldr	r0, [pc, #24]	; (800198c <proc_fnf_cmd+0x48>)
 8001972:	f002 ff51 	bl	8004818 <send_UART>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200145b4 	.word	0x200145b4
 8001984:	20000094 	.word	0x20000094
 8001988:	0800f670 	.word	0x0800f670
 800198c:	0800f6fc 	.word	0x0800f6fc

08001990 <proc_fff_cmd>:

void proc_fff_cmd(char* message)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3303      	adds	r3, #3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b0d      	cmp	r3, #13
 80019a0:	d114      	bne.n	80019cc <proc_fff_cmd+0x3c>
	{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80019a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <proc_fff_cmd+0x4c>)
 80019aa:	f009 f9a4 	bl	800acf6 <strncpy>
		if(sp_config.filter_type == Fin){
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <proc_fff_cmd+0x50>)
 80019b0:	7b9b      	ldrb	r3, [r3, #14]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d106      	bne.n	80019c4 <proc_fff_cmd+0x34>
			sp_config.filter_type = Nf;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <proc_fff_cmd+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <proc_fff_cmd+0x54>)
 80019be:	f002 ff2b 	bl	8004818 <send_UART>
		else
			send_UART("FIR Filter is already off.");
	}
	else
		send_UART("Invalid FIR Filter Off instruction syntax.");
}
 80019c2:	e006      	b.n	80019d2 <proc_fff_cmd+0x42>
			send_UART("FIR Filter is already off.");
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <proc_fff_cmd+0x58>)
 80019c6:	f002 ff27 	bl	8004818 <send_UART>
}
 80019ca:	e002      	b.n	80019d2 <proc_fff_cmd+0x42>
		send_UART("Invalid FIR Filter Off instruction syntax.");
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <proc_fff_cmd+0x5c>)
 80019ce:	f002 ff23 	bl	8004818 <send_UART>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200145b4 	.word	0x200145b4
 80019e0:	20000094 	.word	0x20000094
 80019e4:	0800f6a8 	.word	0x0800f6a8
 80019e8:	0800f728 	.word	0x0800f728
 80019ec:	0800f744 	.word	0x0800f744

080019f0 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[1] == '\r')
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b0d      	cmp	r3, #13
 8001a00:	d120      	bne.n	8001a44 <proc_s_cmd+0x54>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4827      	ldr	r0, [pc, #156]	; (8001aa8 <proc_s_cmd+0xb8>)
 8001a0a:	f009 f974 	bl	800acf6 <strncpy>

		reset_adc_buf();
 8001a0e:	f7ff f95f 	bl	8000cd0 <reset_adc_buf>
		counter = 0;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <proc_s_cmd+0xbc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = 0;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
		MX_ADC3_Init1(false);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7fe ffe6 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f913 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a32:	f001 fdef 	bl	8003614 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 8001a36:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <proc_s_cmd+0xc4>)
 8001a38:	f003 f8ba 	bl	8004bb0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001a3c:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <proc_s_cmd+0xc8>)
 8001a3e:	f005 fba7 	bl	8007190 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
	}
	else
		send_UART("Invalid Sample instruction syntax.");

}
 8001a42:	e02d      	b.n	8001aa0 <proc_s_cmd+0xb0>
	else if(sscanf((char*)message, "S %d", &k_values) == 1)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	461a      	mov	r2, r3
 8001a4a:	491c      	ldr	r1, [pc, #112]	; (8001abc <proc_s_cmd+0xcc>)
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f009 f8c7 	bl	800abe0 <siscanf>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d120      	bne.n	8001a9a <proc_s_cmd+0xaa>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <proc_s_cmd+0xb8>)
 8001a60:	f009 f949 	bl	800acf6 <strncpy>
		reset_adc_buf();
 8001a64:	f7ff f934 	bl	8000cd0 <reset_adc_buf>
		counter = 0;
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <proc_s_cmd+0xbc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = k_values;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a72:	6093      	str	r3, [r2, #8]
		MX_ADC3_Init1(false);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7fe ffbb 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f8e8 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <proc_s_cmd+0xc0>)
 8001a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a88:	f001 fdc4 	bl	8003614 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <proc_s_cmd+0xc4>)
 8001a8e:	f003 f88f 	bl	8004bb0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <proc_s_cmd+0xc8>)
 8001a94:	f005 fb7c 	bl	8007190 <HAL_TIM_Base_Start_IT>
}
 8001a98:	e002      	b.n	8001aa0 <proc_s_cmd+0xb0>
		send_UART("Invalid Sample instruction syntax.");
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <proc_s_cmd+0xd0>)
 8001a9c:	f002 febc 	bl	8004818 <send_UART>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200145b4 	.word	0x200145b4
 8001aac:	20000324 	.word	0x20000324
 8001ab0:	20000094 	.word	0x20000094
 8001ab4:	20010464 	.word	0x20010464
 8001ab8:	20018778 	.word	0x20018778
 8001abc:	0800f770 	.word	0x0800f770
 8001ac0:	0800f778 	.word	0x0800f778

08001ac4 <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if(counter > 0)
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <proc_st_cmd+0x60>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01f      	beq.n	8001b14 <proc_st_cmd+0x50>
	{
		if(message[2] == '\r')
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b0d      	cmp	r3, #13
 8001adc:	d116      	bne.n	8001b0c <proc_st_cmd+0x48>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <proc_st_cmd+0x64>)
 8001ae6:	f009 f906 	bl	800acf6 <strncpy>
			counter = 0;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <proc_st_cmd+0x60>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
			analog_write(0,0);
 8001af0:	2100      	movs	r1, #0
 8001af2:	2000      	movs	r0, #0
 8001af4:	f001 f802 	bl	8002afc <analog_write>
			HAL_ADC_Stop_IT(&hadc3);
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <proc_st_cmd+0x68>)
 8001afa:	f003 f931 	bl	8004d60 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <proc_st_cmd+0x6c>)
 8001b00:	f005 fbbe 	bl	8007280 <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <proc_st_cmd+0x70>)
 8001b06:	f002 fe87 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Stop Sampling instruction syntax.");
	}
	else
		send_UART("Sampling is not running.");
}
 8001b0a:	e006      	b.n	8001b1a <proc_st_cmd+0x56>
			send_UART("Invalid Stop Sampling instruction syntax.");
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <proc_st_cmd+0x74>)
 8001b0e:	f002 fe83 	bl	8004818 <send_UART>
}
 8001b12:	e002      	b.n	8001b1a <proc_st_cmd+0x56>
		send_UART("Sampling is not running.");
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <proc_st_cmd+0x78>)
 8001b16:	f002 fe7f 	bl	8004818 <send_UART>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000324 	.word	0x20000324
 8001b28:	200145b4 	.word	0x200145b4
 8001b2c:	20010464 	.word	0x20010464
 8001b30:	20018778 	.word	0x20018778
 8001b34:	0800f79c 	.word	0x0800f79c
 8001b38:	0800f7b0 	.word	0x0800f7b0
 8001b3c:	0800f7dc 	.word	0x0800f7dc

08001b40 <proc_cs_cmd>:


void proc_cs_cmd(char* message)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	// DISABLE ALL
	enable = false;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <proc_cs_cmd+0x84>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim9);
 8001b4e:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <proc_cs_cmd+0x88>)
 8001b50:	f005 fb96 	bl	8007280 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001b54:	210c      	movs	r1, #12
 8001b56:	481d      	ldr	r0, [pc, #116]	; (8001bcc <proc_cs_cmd+0x8c>)
 8001b58:	f005 fd1c 	bl	8007594 <HAL_TIM_PWM_Stop>

	int val;

	if(sscanf((char*) message, "CS %d", &val) == 1)
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	461a      	mov	r2, r3
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <proc_cs_cmd+0x90>)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f009 f83b 	bl	800abe0 <siscanf>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d120      	bne.n	8001bb2 <proc_cs_cmd+0x72>
	{
		if(val == 0 || val == 1)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <proc_cs_cmd+0x3c>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d116      	bne.n	8001baa <proc_cs_cmd+0x6a>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <proc_cs_cmd+0x94>)
 8001b84:	f009 f8b7 	bl	800acf6 <strncpy>

			if(val)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <proc_cs_cmd+0x5c>
			{
				mode_speed = true;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <proc_cs_cmd+0x98>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
				send_UART("Speed control mode selected.");
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <proc_cs_cmd+0x9c>)
 8001b96:	f002 fe3f 	bl	8004818 <send_UART>
			if(val)
 8001b9a:	e00e      	b.n	8001bba <proc_cs_cmd+0x7a>
			}
			else
			{
				mode_speed = false;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <proc_cs_cmd+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
				send_UART("PWM control mode selected.");
 8001ba2:	480f      	ldr	r0, [pc, #60]	; (8001be0 <proc_cs_cmd+0xa0>)
 8001ba4:	f002 fe38 	bl	8004818 <send_UART>
			if(val)
 8001ba8:	e007      	b.n	8001bba <proc_cs_cmd+0x7a>
			}
		}
		else
			send_UART("Invalid Control System instruction argument values.");
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <proc_cs_cmd+0xa4>)
 8001bac:	f002 fe34 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid Control System instruction syntax.");
}
 8001bb0:	e003      	b.n	8001bba <proc_cs_cmd+0x7a>
		send_UART("Invalid Control System instruction syntax.");
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <proc_cs_cmd+0xa8>)
 8001bb4:	f002 fe30 	bl	8004818 <send_UART>
}
 8001bb8:	e7ff      	b.n	8001bba <proc_cs_cmd+0x7a>
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000329 	.word	0x20000329
 8001bc8:	200187c8 	.word	0x200187c8
 8001bcc:	20018818 	.word	0x20018818
 8001bd0:	0800f7f8 	.word	0x0800f7f8
 8001bd4:	200145b4 	.word	0x200145b4
 8001bd8:	20000328 	.word	0x20000328
 8001bdc:	0800f800 	.word	0x0800f800
 8001be0:	0800f820 	.word	0x0800f820
 8001be4:	0800f83c 	.word	0x0800f83c
 8001be8:	0800f870 	.word	0x0800f870

08001bec <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <proc_en_cmd+0xec>)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f008 ffef 	bl	800abe0 <siscanf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d15e      	bne.n	8001cc6 <proc_en_cmd+0xda>
	{
		if(val == 0 || val == 1)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <proc_en_cmd+0x28>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d154      	bne.n	8001cbe <proc_en_cmd+0xd2>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4830      	ldr	r0, [pc, #192]	; (8001cdc <proc_en_cmd+0xf0>)
 8001c1c:	f009 f86b 	bl	800acf6 <strncpy>

			if(val)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d026      	beq.n	8001c74 <proc_en_cmd+0x88>
			{
				send_UART("System enabled with success.");
 8001c26:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <proc_en_cmd+0xf4>)
 8001c28:	f002 fdf6 	bl	8004818 <send_UART>
				enable = true;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <proc_en_cmd+0xf8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]

				if(mode_speed)
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <proc_en_cmd+0xfc>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <proc_en_cmd+0x7e>
				{
					set_units("rads");
 8001c3a:	482c      	ldr	r0, [pc, #176]	; (8001cec <proc_en_cmd+0x100>)
 8001c3c:	f002 fcbc 	bl	80045b8 <set_units>
					sp_config.sp_limit = 0;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <proc_en_cmd+0x104>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
					MX_TIM3_Init1(sp_config);
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <proc_en_cmd+0x104>)
 8001c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c4a:	f001 fd89 	bl	8003760 <MX_TIM3_Init1>
					HAL_TIM_Base_Start_IT(&htim3);
 8001c4e:	4829      	ldr	r0, [pc, #164]	; (8001cf4 <proc_en_cmd+0x108>)
 8001c50:	f005 fa9e 	bl	8007190 <HAL_TIM_Base_Start_IT>
					HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c54:	2028      	movs	r0, #40	; 0x28
 8001c56:	f003 fd68 	bl	800572a <HAL_NVIC_EnableIRQ>
					HAL_TIM_Base_Start_IT(&htim9);
 8001c5a:	4827      	ldr	r0, [pc, #156]	; (8001cf8 <proc_en_cmd+0x10c>)
 8001c5c:	f005 fa98 	bl	8007190 <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c60:	210c      	movs	r1, #12
 8001c62:	4826      	ldr	r0, [pc, #152]	; (8001cfc <proc_en_cmd+0x110>)
 8001c64:	f005 fb9c 	bl	80073a0 <HAL_TIM_PWM_Start>
			if(val)
 8001c68:	e031      	b.n	8001cce <proc_en_cmd+0xe2>
				}
				else
				{
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c6a:	210c      	movs	r1, #12
 8001c6c:	4823      	ldr	r0, [pc, #140]	; (8001cfc <proc_en_cmd+0x110>)
 8001c6e:	f005 fb97 	bl	80073a0 <HAL_TIM_PWM_Start>
			if(val)
 8001c72:	e02c      	b.n	8001cce <proc_en_cmd+0xe2>
				}
			}
			else
			{
				// DISABLE ALL
				HAL_TIM_Base_Stop_IT(&htim3);
 8001c74:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <proc_en_cmd+0x108>)
 8001c76:	f005 fb03 	bl	8007280 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim4);
 8001c7a:	4821      	ldr	r0, [pc, #132]	; (8001d00 <proc_en_cmd+0x114>)
 8001c7c:	f005 fb00 	bl	8007280 <HAL_TIM_Base_Stop_IT>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c80:	2028      	movs	r0, #40	; 0x28
 8001c82:	f003 fd52 	bl	800572a <HAL_NVIC_EnableIRQ>
				reset_pulses();
 8001c86:	f001 fa2d 	bl	80030e4 <reset_pulses>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c90:	481c      	ldr	r0, [pc, #112]	; (8001d04 <proc_en_cmd+0x118>)
 8001c92:	f004 f8b1 	bl	8005df8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9c:	481a      	ldr	r0, [pc, #104]	; (8001d08 <proc_en_cmd+0x11c>)
 8001c9e:	f004 f8ab 	bl	8005df8 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim9);
 8001ca2:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <proc_en_cmd+0x10c>)
 8001ca4:	f005 faec 	bl	8007280 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001ca8:	210c      	movs	r1, #12
 8001caa:	4814      	ldr	r0, [pc, #80]	; (8001cfc <proc_en_cmd+0x110>)
 8001cac:	f005 fc72 	bl	8007594 <HAL_TIM_PWM_Stop>
				send_UART("System disabled with success.");
 8001cb0:	4816      	ldr	r0, [pc, #88]	; (8001d0c <proc_en_cmd+0x120>)
 8001cb2:	f002 fdb1 	bl	8004818 <send_UART>
				enable = false;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <proc_en_cmd+0xf8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
			if(val)
 8001cbc:	e007      	b.n	8001cce <proc_en_cmd+0xe2>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <proc_en_cmd+0x124>)
 8001cc0:	f002 fdaa 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 8001cc4:	e003      	b.n	8001cce <proc_en_cmd+0xe2>
		send_UART("Invalid Enable instruction syntax.");
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <proc_en_cmd+0x128>)
 8001cc8:	f002 fda6 	bl	8004818 <send_UART>
}
 8001ccc:	e7ff      	b.n	8001cce <proc_en_cmd+0xe2>
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0800f89c 	.word	0x0800f89c
 8001cdc:	200145b4 	.word	0x200145b4
 8001ce0:	0800f8a4 	.word	0x0800f8a4
 8001ce4:	20000329 	.word	0x20000329
 8001ce8:	20000328 	.word	0x20000328
 8001cec:	0800f8c4 	.word	0x0800f8c4
 8001cf0:	20000094 	.word	0x20000094
 8001cf4:	20018728 	.word	0x20018728
 8001cf8:	200187c8 	.word	0x200187c8
 8001cfc:	20018818 	.word	0x20018818
 8001d00:	200186d8 	.word	0x200186d8
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	0800f8cc 	.word	0x0800f8cc
 8001d10:	0800f8ec 	.word	0x0800f8ec
 8001d14:	0800f918 	.word	0x0800f918

08001d18 <proc_un_cmd>:


void proc_un_cmd(char* message)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	mul_pwm = (TIM2->ARR+1)/100;
 8001d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	3301      	adds	r3, #1
 8001d28:	4aa5      	ldr	r2, [pc, #660]	; (8001fc0 <proc_un_cmd+0x2a8>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	4aa4      	ldr	r2, [pc, #656]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001d32:	6013      	str	r3, [r2, #0]
	char sign;
	int val;
	int args_read;

	if((args_read = sscanf((char*) message, "UN %c%d", &sign, &val)) == 2)
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	f107 020f 	add.w	r2, r7, #15
 8001d3c:	49a2      	ldr	r1, [pc, #648]	; (8001fc8 <proc_un_cmd+0x2b0>)
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f008 ff4e 	bl	800abe0 <siscanf>
 8001d44:	6138      	str	r0, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	f040 8106 	bne.w	8001f5a <proc_un_cmd+0x242>
	{
		if(val >= 0 && val <= 100 && (sign == '+' || sign == '-'))
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f2c0 80fe 	blt.w	8001f52 <proc_un_cmd+0x23a>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	f300 80fa 	bgt.w	8001f52 <proc_un_cmd+0x23a>
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b2b      	cmp	r3, #43	; 0x2b
 8001d62:	d003      	beq.n	8001d6c <proc_un_cmd+0x54>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b2d      	cmp	r3, #45	; 0x2d
 8001d68:	f040 80f3 	bne.w	8001f52 <proc_un_cmd+0x23a>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4896      	ldr	r0, [pc, #600]	; (8001fcc <proc_un_cmd+0x2b4>)
 8001d74:	f008 ffbf 	bl	800acf6 <strncpy>

			if(sign == '+')
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b2b      	cmp	r3, #43	; 0x2b
 8001d7c:	d174      	bne.n	8001e68 <proc_un_cmd+0x150>
			{
				if(!direction)
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <proc_un_cmd+0x2b8>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f083 0301 	eor.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01a      	beq.n	8001dc2 <proc_un_cmd+0xaa>
				{
					for(int i = duty_cycle; i > 0; i--)
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d92:	e013      	b.n	8001dbc <proc_un_cmd+0xa4>
					{
						duty_cycle = (i - 1);
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001d9c:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001d9e:	4b8d      	ldr	r3, [pc, #564]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a88      	ldr	r2, [pc, #544]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	640b      	str	r3, [r1, #64]	; 0x40

						HAL_Delay(RECOVERY_TIME_MS);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f002 fe95 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i > 0; i--)
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	3b01      	subs	r3, #1
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	dce8      	bgt.n	8001d94 <proc_un_cmd+0x7c>
					}
				}
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	4883      	ldr	r0, [pc, #524]	; (8001fd8 <proc_un_cmd+0x2c0>)
 8001dca:	f004 f815 	bl	8005df8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd4:	4881      	ldr	r0, [pc, #516]	; (8001fdc <proc_un_cmd+0x2c4>)
 8001dd6:	f004 f80f 	bl	8005df8 <HAL_GPIO_WritePin>

				if(duty_cycle > val)
 8001dda:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d91c      	bls.n	8001e1e <proc_un_cmd+0x106>
				{
					for(int i = duty_cycle; i > val; i--)
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dea:	e013      	b.n	8001e14 <proc_un_cmd+0xfc>
					{
						duty_cycle = (i - 1);
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001df4:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001df6:	4b77      	ldr	r3, [pc, #476]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	640b      	str	r3, [r1, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f002 fe69 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i > val; i--)
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dce7      	bgt.n	8001dec <proc_un_cmd+0xd4>
 8001e1c:	e020      	b.n	8001e60 <proc_un_cmd+0x148>
					}
				}
				else if(duty_cycle < val)
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d21b      	bcs.n	8001e60 <proc_un_cmd+0x148>
				{
					for(int i = duty_cycle; i < val; i++)
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	e013      	b.n	8001e58 <proc_un_cmd+0x140>
					{
						duty_cycle = (i + 1);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	3301      	adds	r3, #1
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e38:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001e3a:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a61      	ldr	r2, [pc, #388]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	640b      	str	r3, [r1, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f002 fe47 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i < val; i++)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbe7      	blt.n	8001e30 <proc_un_cmd+0x118>
					}
				}

				direction = true;
 8001e60:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <proc_un_cmd+0x2b8>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e070      	b.n	8001f4a <proc_un_cmd+0x232>
			}
			else
			{
				if(direction)
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <proc_un_cmd+0x2b8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01a      	beq.n	8001ea6 <proc_un_cmd+0x18e>
				{
					for(int i = duty_cycle; i > 0; i--)
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	e013      	b.n	8001ea0 <proc_un_cmd+0x188>
					{
						duty_cycle = (i - 1);
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e80:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	640b      	str	r3, [r1, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f002 fe23 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i > 0; i--)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dce8      	bgt.n	8001e78 <proc_un_cmd+0x160>
					}
				}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	484b      	ldr	r0, [pc, #300]	; (8001fdc <proc_un_cmd+0x2c4>)
 8001eae:	f003 ffa3 	bl	8005df8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb8:	4847      	ldr	r0, [pc, #284]	; (8001fd8 <proc_un_cmd+0x2c0>)
 8001eba:	f003 ff9d 	bl	8005df8 <HAL_GPIO_WritePin>
				if(duty_cycle > val)
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d91c      	bls.n	8001f02 <proc_un_cmd+0x1ea>
				{
					for(int i = duty_cycle; i > val; i--)
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e013      	b.n	8001ef8 <proc_un_cmd+0x1e0>
					{
						duty_cycle = (i - 1);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001ed8:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001eda:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	640b      	str	r3, [r1, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001eec:	200a      	movs	r0, #10
 8001eee:	f002 fdf7 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i > val; i--)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dce7      	bgt.n	8001ed0 <proc_un_cmd+0x1b8>
 8001f00:	e020      	b.n	8001f44 <proc_un_cmd+0x22c>
					}
				}
				else if(duty_cycle < val)
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d21b      	bcs.n	8001f44 <proc_un_cmd+0x22c>
				{
					for(int i = duty_cycle; i < val; i++)
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e013      	b.n	8001f3c <proc_un_cmd+0x224>
					{
						duty_cycle = (i + 1);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	3301      	adds	r3, #1
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f1c:	601a      	str	r2, [r3, #0]
						TIM2->CCR4 = duty_cycle * mul_pwm;
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	640b      	str	r3, [r1, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001f30:	200a      	movs	r0, #10
 8001f32:	f002 fdd5 	bl	8004ae0 <HAL_Delay>
					for(int i = duty_cycle; i < val; i++)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbe7      	blt.n	8001f14 <proc_un_cmd+0x1fc>
					}
				}

				direction = false;
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <proc_un_cmd+0x2b8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
			}

			send_UART("PWM average voltage changed with success.");
 8001f4a:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <proc_un_cmd+0x2c8>)
 8001f4c:	f002 fc64 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Normalized Voltage instruction argument values.");
	}
	else
		send_UART("Invalid Normalized Voltage instruction syntax.");
}
 8001f50:	e053      	b.n	8001ffa <proc_un_cmd+0x2e2>
			send_UART("Invalid Normalized Voltage instruction argument values.");
 8001f52:	4824      	ldr	r0, [pc, #144]	; (8001fe4 <proc_un_cmd+0x2cc>)
 8001f54:	f002 fc60 	bl	8004818 <send_UART>
}
 8001f58:	e04f      	b.n	8001ffa <proc_un_cmd+0x2e2>
	else if(sscanf((char*) message, "UN %d", &val) == 1)
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <proc_un_cmd+0x2d0>)
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f008 fe3c 	bl	800abe0 <siscanf>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d142      	bne.n	8001ff4 <proc_un_cmd+0x2dc>
		if(!val)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d13b      	bne.n	8001fec <proc_un_cmd+0x2d4>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4814      	ldr	r0, [pc, #80]	; (8001fcc <proc_un_cmd+0x2b4>)
 8001f7c:	f008 febb 	bl	800acf6 <strncpy>
			for(int i = duty_cycle; i > 0; i--)
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e013      	b.n	8001fb0 <proc_un_cmd+0x298>
				duty_cycle = (i - 1);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f90:	601a      	str	r2, [r3, #0]
				TIM2->CCR4 = duty_cycle * mul_pwm;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <proc_un_cmd+0x2bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <proc_un_cmd+0x2ac>)
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	640b      	str	r3, [r1, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8001fa4:	200a      	movs	r0, #10
 8001fa6:	f002 fd9b 	bl	8004ae0 <HAL_Delay>
			for(int i = duty_cycle; i > 0; i--)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	dce8      	bgt.n	8001f88 <proc_un_cmd+0x270>
			send_UART("PWM average voltage changed with success.");
 8001fb6:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <proc_un_cmd+0x2c8>)
 8001fb8:	f002 fc2e 	bl	8004818 <send_UART>
}
 8001fbc:	e01d      	b.n	8001ffa <proc_un_cmd+0x2e2>
 8001fbe:	bf00      	nop
 8001fc0:	51eb851f 	.word	0x51eb851f
 8001fc4:	2000010c 	.word	0x2000010c
 8001fc8:	0800f93c 	.word	0x0800f93c
 8001fcc:	200145b4 	.word	0x200145b4
 8001fd0:	2000032a 	.word	0x2000032a
 8001fd4:	2000032c 	.word	0x2000032c
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	0800f944 	.word	0x0800f944
 8001fe4:	0800f970 	.word	0x0800f970
 8001fe8:	0800f9a8 	.word	0x0800f9a8
			send_UART("Invalid Normalized Voltage instruction argument values.");
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <proc_un_cmd+0x2ec>)
 8001fee:	f002 fc13 	bl	8004818 <send_UART>
}
 8001ff2:	e002      	b.n	8001ffa <proc_un_cmd+0x2e2>
		send_UART("Invalid Normalized Voltage instruction syntax.");
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <proc_un_cmd+0x2f0>)
 8001ff6:	f002 fc0f 	bl	8004818 <send_UART>
}
 8001ffa:	bf00      	nop
 8001ffc:	3730      	adds	r7, #48	; 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	0800f970 	.word	0x0800f970
 8002008:	0800f9b0 	.word	0x0800f9b0

0800200c <proc_vr_cmd>:


void proc_vr_cmd(char* message)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	char sign;
	int val;

	if(sscanf((char*) message, "VR %c%d", &sign, &val) == 2)
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	f107 020f 	add.w	r2, r7, #15
 800201c:	491c      	ldr	r1, [pc, #112]	; (8002090 <proc_vr_cmd+0x84>)
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f008 fdde 	bl	800abe0 <siscanf>
 8002024:	4603      	mov	r3, r0
 8002026:	2b02      	cmp	r3, #2
 8002028:	d12b      	bne.n	8002082 <proc_vr_cmd+0x76>
	{
		if(val >= 0 && val <= 160)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db24      	blt.n	800207a <proc_vr_cmd+0x6e>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2ba0      	cmp	r3, #160	; 0xa0
 8002034:	dc21      	bgt.n	800207a <proc_vr_cmd+0x6e>
		{
			if(sign == '+' || sign == '-')
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b2b      	cmp	r3, #43	; 0x2b
 800203a:	d002      	beq.n	8002042 <proc_vr_cmd+0x36>
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b2d      	cmp	r3, #45	; 0x2d
 8002040:	d105      	bne.n	800204e <proc_vr_cmd+0x42>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8002042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4812      	ldr	r0, [pc, #72]	; (8002094 <proc_vr_cmd+0x88>)
 800204a:	f008 fe54 	bl	800acf6 <strncpy>

			speed_rpm = val;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <proc_vr_cmd+0x8c>)
 800205a:	edc3 7a00 	vstr	s15, [r3]

			if(sign == '+')
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b2b      	cmp	r3, #43	; 0x2b
 8002062:	d103      	bne.n	800206c <proc_vr_cmd+0x60>
				direction = true;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <proc_vr_cmd+0x90>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e002      	b.n	8002072 <proc_vr_cmd+0x66>
			else
				direction = false;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <proc_vr_cmd+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]

			send_UART("Speed changed with success.");
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <proc_vr_cmd+0x94>)
 8002074:	f002 fbd0 	bl	8004818 <send_UART>
		else
			send_UART("Invalid Reference Speed instruction argument values.");
	}
	else
		send_UART("Invalid Reference Speed instruction syntax.");
}
 8002078:	e006      	b.n	8002088 <proc_vr_cmd+0x7c>
			send_UART("Invalid Reference Speed instruction argument values.");
 800207a:	480a      	ldr	r0, [pc, #40]	; (80020a4 <proc_vr_cmd+0x98>)
 800207c:	f002 fbcc 	bl	8004818 <send_UART>
}
 8002080:	e002      	b.n	8002088 <proc_vr_cmd+0x7c>
		send_UART("Invalid Reference Speed instruction syntax.");
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <proc_vr_cmd+0x9c>)
 8002084:	f002 fbc8 	bl	8004818 <send_UART>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	0800f9e0 	.word	0x0800f9e0
 8002094:	200145b4 	.word	0x200145b4
 8002098:	20000330 	.word	0x20000330
 800209c:	2000032a 	.word	0x2000032a
 80020a0:	0800f9e8 	.word	0x0800f9e8
 80020a4:	0800fa04 	.word	0x0800fa04
 80020a8:	0800fa3c 	.word	0x0800fa3c

080020ac <proc_inc_cmd>:

void proc_inc_cmd(char* message)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	mul_pwm = (TIM2->ARR+1)/100;
 80020b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	3301      	adds	r3, #1
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <proc_inc_cmd+0x13c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	4a49      	ldr	r2, [pc, #292]	; (80021ec <proc_inc_cmd+0x140>)
 80020c6:	6013      	str	r3, [r2, #0]
	strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4848      	ldr	r0, [pc, #288]	; (80021f0 <proc_inc_cmd+0x144>)
 80020d0:	f008 fe11 	bl	800acf6 <strncpy>

	if(mode_speed)
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <proc_inc_cmd+0x148>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d023      	beq.n	8002124 <proc_inc_cmd+0x78>
	{
		if(speed_rpm < 156)
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <proc_inc_cmd+0x14c>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80021fc <proc_inc_cmd+0x150>
 80020e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	d50a      	bpl.n	8002106 <proc_inc_cmd+0x5a>
			speed_rpm += 5;
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <proc_inc_cmd+0x14c>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80020fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <proc_inc_cmd+0x14c>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
 8002104:	e002      	b.n	800210c <proc_inc_cmd+0x60>
		else
			speed_rpm = 160;
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <proc_inc_cmd+0x14c>)
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <proc_inc_cmd+0x154>)
 800210a:	601a      	str	r2, [r3, #0]

		sprintf(message, "Speed updated to %.2f rpm.", speed_rpm);
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <proc_inc_cmd+0x14c>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002116:	ec53 2b17 	vmov	r2, r3, d7
 800211a:	493a      	ldr	r1, [pc, #232]	; (8002204 <proc_inc_cmd+0x158>)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f008 fd3f 	bl	800aba0 <siprintf>
 8002122:	e05a      	b.n	80021da <proc_inc_cmd+0x12e>
	}
	else
	{
		if(duty_cycle == 0)
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <proc_inc_cmd+0x15c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10e      	bne.n	800214a <proc_inc_cmd+0x9e>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002132:	4836      	ldr	r0, [pc, #216]	; (800220c <proc_inc_cmd+0x160>)
 8002134:	f003 fe60 	bl	8005df8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213e:	4834      	ldr	r0, [pc, #208]	; (8002210 <proc_inc_cmd+0x164>)
 8002140:	f003 fe5a 	bl	8005df8 <HAL_GPIO_WritePin>
			direction = true;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <proc_inc_cmd+0x168>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
		}

		if(direction)
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <proc_inc_cmd+0x168>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01e      	beq.n	8002190 <proc_inc_cmd+0xe4>
		{
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e013      	b.n	8002180 <proc_inc_cmd+0xd4>
			{
				TIM2->CCR4 = ++duty_cycle * mul_pwm;
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <proc_inc_cmd+0x15c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <proc_inc_cmd+0x15c>)
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <proc_inc_cmd+0x15c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <proc_inc_cmd+0x140>)
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	640b      	str	r3, [r1, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8002174:	200a      	movs	r0, #10
 8002176:	f002 fcb3 	bl	8004ae0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b04      	cmp	r3, #4
 8002184:	dc22      	bgt.n	80021cc <proc_inc_cmd+0x120>
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <proc_inc_cmd+0x15c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b63      	cmp	r3, #99	; 0x63
 800218c:	d9e4      	bls.n	8002158 <proc_inc_cmd+0xac>
 800218e:	e01d      	b.n	80021cc <proc_inc_cmd+0x120>
			}
		}
		else
		{
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	e013      	b.n	80021be <proc_inc_cmd+0x112>
			{
				TIM2->CCR4 = --duty_cycle * mul_pwm;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <proc_inc_cmd+0x15c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <proc_inc_cmd+0x15c>)
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <proc_inc_cmd+0x15c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <proc_inc_cmd+0x140>)
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	640b      	str	r3, [r1, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f002 fc94 	bl	8004ae0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	dc03      	bgt.n	80021cc <proc_inc_cmd+0x120>
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <proc_inc_cmd+0x15c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e4      	bne.n	8002196 <proc_inc_cmd+0xea>
			}
		}

		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <proc_inc_cmd+0x15c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4911      	ldr	r1, [pc, #68]	; (8002218 <proc_inc_cmd+0x16c>)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f008 fce3 	bl	800aba0 <siprintf>
	}

	send_UART(message);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f002 fb1c 	bl	8004818 <send_UART>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	51eb851f 	.word	0x51eb851f
 80021ec:	2000010c 	.word	0x2000010c
 80021f0:	200145b4 	.word	0x200145b4
 80021f4:	20000328 	.word	0x20000328
 80021f8:	20000330 	.word	0x20000330
 80021fc:	431c0000 	.word	0x431c0000
 8002200:	43200000 	.word	0x43200000
 8002204:	0800fa68 	.word	0x0800fa68
 8002208:	2000032c 	.word	0x2000032c
 800220c:	40021000 	.word	0x40021000
 8002210:	40020400 	.word	0x40020400
 8002214:	2000032a 	.word	0x2000032a
 8002218:	0800fa84 	.word	0x0800fa84

0800221c <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	mul_pwm = (TIM2->ARR+1)/100;
 8002224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	3301      	adds	r3, #1
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <proc_dec_cmd+0x138>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	4a48      	ldr	r2, [pc, #288]	; (8002358 <proc_dec_cmd+0x13c>)
 8002236:	6013      	str	r3, [r2, #0]
	if(mode_speed)
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <proc_dec_cmd+0x140>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d024      	beq.n	800228a <proc_dec_cmd+0x6e>
	{
		if(speed_rpm > 4)
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <proc_dec_cmd+0x144>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd0a      	ble.n	800226a <proc_dec_cmd+0x4e>
			speed_rpm -= 5;
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <proc_dec_cmd+0x144>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800225e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <proc_dec_cmd+0x144>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
 8002268:	e003      	b.n	8002272 <proc_dec_cmd+0x56>
		else
			speed_rpm = 0;
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <proc_dec_cmd+0x144>)
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

		sprintf((char*) message, "Speed updated to %.2f rpm.", speed_rpm);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <proc_dec_cmd+0x144>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800227c:	ec53 2b17 	vmov	r2, r3, d7
 8002280:	4938      	ldr	r1, [pc, #224]	; (8002364 <proc_dec_cmd+0x148>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f008 fc8c 	bl	800aba0 <siprintf>
 8002288:	e05d      	b.n	8002346 <proc_dec_cmd+0x12a>
	}
	else
	{
		if(duty_cycle == 0)
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <proc_dec_cmd+0x14c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <proc_dec_cmd+0x94>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002298:	4834      	ldr	r0, [pc, #208]	; (800236c <proc_dec_cmd+0x150>)
 800229a:	f003 fdad 	bl	8005df8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a4:	4832      	ldr	r0, [pc, #200]	; (8002370 <proc_dec_cmd+0x154>)
 80022a6:	f003 fda7 	bl	8005df8 <HAL_GPIO_WritePin>
			direction = false;
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <proc_dec_cmd+0x158>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		}

		if(!direction)
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <proc_dec_cmd+0x158>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f083 0301 	eor.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01e      	beq.n	80022fc <proc_dec_cmd+0xe0>
		{
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e013      	b.n	80022ec <proc_dec_cmd+0xd0>
			{
				TIM2->CCR4 = ++duty_cycle * mul_pwm;
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <proc_dec_cmd+0x14c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	4a27      	ldr	r2, [pc, #156]	; (8002368 <proc_dec_cmd+0x14c>)
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <proc_dec_cmd+0x14c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <proc_dec_cmd+0x13c>)
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	640b      	str	r3, [r1, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 80022e0:	200a      	movs	r0, #10
 80022e2:	f002 fbfd 	bl	8004ae0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	dc22      	bgt.n	8002338 <proc_dec_cmd+0x11c>
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <proc_dec_cmd+0x14c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b63      	cmp	r3, #99	; 0x63
 80022f8:	d9e4      	bls.n	80022c4 <proc_dec_cmd+0xa8>
 80022fa:	e01d      	b.n	8002338 <proc_dec_cmd+0x11c>
			}
		}
		else
		{
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	e013      	b.n	800232a <proc_dec_cmd+0x10e>
			{
				TIM2->CCR4 = --duty_cycle * mul_pwm;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <proc_dec_cmd+0x14c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <proc_dec_cmd+0x14c>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <proc_dec_cmd+0x14c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <proc_dec_cmd+0x13c>)
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	640b      	str	r3, [r1, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 800231e:	200a      	movs	r0, #10
 8002320:	f002 fbde 	bl	8004ae0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3301      	adds	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b04      	cmp	r3, #4
 800232e:	dc03      	bgt.n	8002338 <proc_dec_cmd+0x11c>
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <proc_dec_cmd+0x14c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e4      	bne.n	8002302 <proc_dec_cmd+0xe6>
			}
		}

		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <proc_dec_cmd+0x14c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <proc_dec_cmd+0x15c>)
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f008 fc2d 	bl	800aba0 <siprintf>
	}

	send_UART(message);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f002 fa66 	bl	8004818 <send_UART>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	51eb851f 	.word	0x51eb851f
 8002358:	2000010c 	.word	0x2000010c
 800235c:	20000328 	.word	0x20000328
 8002360:	20000330 	.word	0x20000330
 8002364:	0800fa68 	.word	0x0800fa68
 8002368:	2000032c 	.word	0x2000032c
 800236c:	40020400 	.word	0x40020400
 8002370:	40021000 	.word	0x40021000
 8002374:	2000032a 	.word	0x2000032a
 8002378:	0800fa84 	.word	0x0800fa84

0800237c <proc_hw_cmd>:

void proc_hw_cmd(char* message)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "HW %s %d", timeunit, &unit) == 2)
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	f107 0208 	add.w	r2, r7, #8
 800238c:	491f      	ldr	r1, [pc, #124]	; (800240c <proc_hw_cmd+0x90>)
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f008 fc26 	bl	800abe0 <siscanf>
 8002394:	4603      	mov	r3, r0
 8002396:	2b02      	cmp	r3, #2
 8002398:	d131      	bne.n	80023fe <proc_hw_cmd+0x82>
		{
			if(strcmp(timeunit,"ms") == 0 || strcmp(timeunit,"s") == 0 || strcmp(timeunit,"us") == 0)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	491c      	ldr	r1, [pc, #112]	; (8002410 <proc_hw_cmd+0x94>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fd ff4d 	bl	8000240 <strcmp>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d011      	beq.n	80023d0 <proc_hw_cmd+0x54>
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4918      	ldr	r1, [pc, #96]	; (8002414 <proc_hw_cmd+0x98>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ff44 	bl	8000240 <strcmp>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <proc_hw_cmd+0x54>
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4915      	ldr	r1, [pc, #84]	; (8002418 <proc_hw_cmd+0x9c>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ff3b 	bl	8000240 <strcmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d112      	bne.n	80023f6 <proc_hw_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80023d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4811      	ldr	r0, [pc, #68]	; (800241c <proc_hw_cmd+0xa0>)
 80023d8:	f008 fc8d 	bl	800acf6 <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	480f      	ldr	r0, [pc, #60]	; (8002420 <proc_hw_cmd+0xa4>)
 80023e4:	f008 fc6d 	bl	800acc2 <strcpy>
				sp_config.unit = unit;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <proc_hw_cmd+0xa8>)
 80023ec:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <proc_hw_cmd+0xac>)
 80023f0:	f002 fa12 	bl	8004818 <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 80023f4:	e006      	b.n	8002404 <proc_hw_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 80023f6:	480d      	ldr	r0, [pc, #52]	; (800242c <proc_hw_cmd+0xb0>)
 80023f8:	f002 fa0e 	bl	8004818 <send_UART>
}
 80023fc:	e002      	b.n	8002404 <proc_hw_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 80023fe:	480c      	ldr	r0, [pc, #48]	; (8002430 <proc_hw_cmd+0xb4>)
 8002400:	f002 fa0a 	bl	8004818 <send_UART>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	0800faa0 	.word	0x0800faa0
 8002410:	0800f534 	.word	0x0800f534
 8002414:	0800f538 	.word	0x0800f538
 8002418:	0800f53c 	.word	0x0800f53c
 800241c:	200145b4 	.word	0x200145b4
 8002420:	200000a0 	.word	0x200000a0
 8002424:	20000094 	.word	0x20000094
 8002428:	0800f540 	.word	0x0800f540
 800242c:	0800f574 	.word	0x0800f574
 8002430:	0800f5a8 	.word	0x0800f5a8

08002434 <proc_fsw_cmd>:

void proc_fsw_cmd(char* message)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	char units[5] = {0};
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	2300      	movs	r3, #0
 8002442:	733b      	strb	r3, [r7, #12]

	if(sscanf((char*)message, "FSW %s", units) == 1)
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	461a      	mov	r2, r3
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <proc_fsw_cmd+0xa0>)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f008 fbc7 	bl	800abe0 <siscanf>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d136      	bne.n	80024c6 <proc_fsw_cmd+0x92>
		{
			if(strcmp(units,"hz") == 0 || strcmp(units,"rps") == 0 || strcmp(units,"rads") == 0 || strcmp(units,"rpm") == 0)
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	491e      	ldr	r1, [pc, #120]	; (80024d8 <proc_fsw_cmd+0xa4>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd feee 	bl	8000240 <strcmp>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01a      	beq.n	80024a0 <proc_fsw_cmd+0x6c>
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	491b      	ldr	r1, [pc, #108]	; (80024dc <proc_fsw_cmd+0xa8>)
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd fee5 	bl	8000240 <strcmp>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d011      	beq.n	80024a0 <proc_fsw_cmd+0x6c>
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	4917      	ldr	r1, [pc, #92]	; (80024e0 <proc_fsw_cmd+0xac>)
 8002482:	4618      	mov	r0, r3
 8002484:	f7fd fedc 	bl	8000240 <strcmp>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <proc_fsw_cmd+0x6c>
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4914      	ldr	r1, [pc, #80]	; (80024e4 <proc_fsw_cmd+0xb0>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd fed3 	bl	8000240 <strcmp>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <proc_fsw_cmd+0x8a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80024a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4810      	ldr	r0, [pc, #64]	; (80024e8 <proc_fsw_cmd+0xb4>)
 80024a8:	f008 fc25 	bl	800acf6 <strncpy>
				set_units(units);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 f881 	bl	80045b8 <set_units>
				send_UART("Sampling units changed with success.");
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <proc_fsw_cmd+0xb8>)
 80024b8:	f002 f9ae 	bl	8004818 <send_UART>
			else
				send_UART("Invalid FSW instruction argument values.");
		}
		else
			send_UART("Invalid FSW instruction syntax.");
}
 80024bc:	e006      	b.n	80024cc <proc_fsw_cmd+0x98>
				send_UART("Invalid FSW instruction argument values.");
 80024be:	480c      	ldr	r0, [pc, #48]	; (80024f0 <proc_fsw_cmd+0xbc>)
 80024c0:	f002 f9aa 	bl	8004818 <send_UART>
}
 80024c4:	e002      	b.n	80024cc <proc_fsw_cmd+0x98>
			send_UART("Invalid FSW instruction syntax.");
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <proc_fsw_cmd+0xc0>)
 80024c8:	f002 f9a6 	bl	8004818 <send_UART>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	0800faac 	.word	0x0800faac
 80024d8:	0800fab4 	.word	0x0800fab4
 80024dc:	0800fab8 	.word	0x0800fab8
 80024e0:	0800f8c4 	.word	0x0800f8c4
 80024e4:	0800fabc 	.word	0x0800fabc
 80024e8:	200145b4 	.word	0x200145b4
 80024ec:	0800fac0 	.word	0x0800fac0
 80024f0:	0800fae8 	.word	0x0800fae8
 80024f4:	0800fb14 	.word	0x0800fb14

080024f8 <proc_sw_cmd>:

void proc_sw_cmd(char* message)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[2] == '\r')
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3302      	adds	r3, #2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b0d      	cmp	r3, #13
 8002508:	d113      	bne.n	8002532 <proc_sw_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800250a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	481a      	ldr	r0, [pc, #104]	; (800257c <proc_sw_cmd+0x84>)
 8002512:	f008 fbf0 	bl	800acf6 <strncpy>
		sp_config.sp_limit = 0;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <proc_sw_cmd+0x88>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
		MX_TIM3_Init1(sp_config);
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <proc_sw_cmd+0x88>)
 800251e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002520:	f001 f91e 	bl	8003760 <MX_TIM3_Init1>
		HAL_TIM_Base_Start_IT(&htim3);
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <proc_sw_cmd+0x8c>)
 8002526:	f004 fe33 	bl	8007190 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800252a:	2028      	movs	r0, #40	; 0x28
 800252c:	f003 f8fd 	bl	800572a <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim3);
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	else
		send_UART("Invalid Sample instruction syntax.");
}
 8002530:	e020      	b.n	8002574 <proc_sw_cmd+0x7c>
	else if(sscanf((char*)message, "SW %d", &k_values) == 1)
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	461a      	mov	r2, r3
 8002538:	4913      	ldr	r1, [pc, #76]	; (8002588 <proc_sw_cmd+0x90>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f008 fb50 	bl	800abe0 <siscanf>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d113      	bne.n	800256e <proc_sw_cmd+0x76>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8002546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <proc_sw_cmd+0x84>)
 800254e:	f008 fbd2 	bl	800acf6 <strncpy>
		sp_config.sp_limit = k_values;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <proc_sw_cmd+0x88>)
 8002556:	6093      	str	r3, [r2, #8]
		MX_TIM3_Init1(sp_config);
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <proc_sw_cmd+0x88>)
 800255a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800255c:	f001 f900 	bl	8003760 <MX_TIM3_Init1>
		HAL_TIM_Base_Start_IT(&htim3);
 8002560:	4808      	ldr	r0, [pc, #32]	; (8002584 <proc_sw_cmd+0x8c>)
 8002562:	f004 fe15 	bl	8007190 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002566:	2028      	movs	r0, #40	; 0x28
 8002568:	f003 f8df 	bl	800572a <HAL_NVIC_EnableIRQ>
}
 800256c:	e002      	b.n	8002574 <proc_sw_cmd+0x7c>
		send_UART("Invalid Sample instruction syntax.");
 800256e:	4807      	ldr	r0, [pc, #28]	; (800258c <proc_sw_cmd+0x94>)
 8002570:	f002 f952 	bl	8004818 <send_UART>
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200145b4 	.word	0x200145b4
 8002580:	20000094 	.word	0x20000094
 8002584:	20018728 	.word	0x20018728
 8002588:	0800fb34 	.word	0x0800fb34
 800258c:	0800f778 	.word	0x0800f778

08002590 <proc_stw_cmd>:

void proc_stw_cmd(char* message)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3303      	adds	r3, #3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b0d      	cmp	r3, #13
 80025a0:	d114      	bne.n	80025cc <proc_stw_cmd+0x3c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <proc_stw_cmd+0x4c>)
 80025aa:	f008 fba4 	bl	800acf6 <strncpy>
		HAL_TIM_Base_Stop_IT(&htim3);
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <proc_stw_cmd+0x50>)
 80025b0:	f004 fe66 	bl	8007280 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <proc_stw_cmd+0x54>)
 80025b6:	f004 fe63 	bl	8007280 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025ba:	2028      	movs	r0, #40	; 0x28
 80025bc:	f003 f8b5 	bl	800572a <HAL_NVIC_EnableIRQ>
		reset_pulses();
 80025c0:	f000 fd90 	bl	80030e4 <reset_pulses>
		send_UART("Sampling Stopped.");
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <proc_stw_cmd+0x58>)
 80025c6:	f002 f927 	bl	8004818 <send_UART>
	}
	else
		send_UART("Invalid Stop Sampling instruction syntax.");
}
 80025ca:	e002      	b.n	80025d2 <proc_stw_cmd+0x42>
		send_UART("Invalid Stop Sampling instruction syntax.");
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <proc_stw_cmd+0x5c>)
 80025ce:	f002 f923 	bl	8004818 <send_UART>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200145b4 	.word	0x200145b4
 80025e0:	20018728 	.word	0x20018728
 80025e4:	200186d8 	.word	0x200186d8
 80025e8:	0800f79c 	.word	0x0800f79c
 80025ec:	0800f7b0 	.word	0x0800f7b0

080025f0 <proc_kp_cmd>:

void proc_kp_cmd(char* message){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	unsigned int kp = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
	if(sscanf((char*)message, "KP %d", &kp) == 1)
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	461a      	mov	r2, r3
 8002602:	4910      	ldr	r1, [pc, #64]	; (8002644 <proc_kp_cmd+0x54>)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f008 faeb 	bl	800abe0 <siscanf>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d111      	bne.n	8002634 <proc_kp_cmd+0x44>
	{
		if(kp <= 200 && kp >= 0)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2bc8      	cmp	r3, #200	; 0xc8
 8002614:	d80a      	bhi.n	800262c <proc_kp_cmd+0x3c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <proc_kp_cmd+0x58>)
 800261e:	f008 fb6a 	bl	800acf6 <strncpy>
			set_kp(kp);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4618      	mov	r0, r3
 8002626:	f002 f805 	bl	8004634 <set_kp>
		else
			send_UART("Invalid Gain.");
	}
	else
		send_UART("Invalid KP instruction syntax.");
}
 800262a:	e006      	b.n	800263a <proc_kp_cmd+0x4a>
			send_UART("Invalid Gain.");
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <proc_kp_cmd+0x5c>)
 800262e:	f002 f8f3 	bl	8004818 <send_UART>
}
 8002632:	e002      	b.n	800263a <proc_kp_cmd+0x4a>
		send_UART("Invalid KP instruction syntax.");
 8002634:	4806      	ldr	r0, [pc, #24]	; (8002650 <proc_kp_cmd+0x60>)
 8002636:	f002 f8ef 	bl	8004818 <send_UART>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	0800fb3c 	.word	0x0800fb3c
 8002648:	200145b4 	.word	0x200145b4
 800264c:	0800fb44 	.word	0x0800fb44
 8002650:	0800fb54 	.word	0x0800fb54

08002654 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002666:	d202      	bcs.n	800266e <memory_read+0x1a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2bff      	cmp	r3, #255	; 0xff
 800266c:	d901      	bls.n	8002672 <memory_read+0x1e>
		return false;
 800266e:	2300      	movs	r3, #0
 8002670:	e01b      	b.n	80026aa <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d901      	bls.n	8002682 <memory_read+0x2e>
		return false;
 800267e:	2300      	movs	r3, #0
 8002680:	e013      	b.n	80026aa <memory_read+0x56>

	for(int i = 0; i < length; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e00b      	b.n	80026a0 <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60fa      	str	r2, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	440a      	add	r2, r1
 8002694:	4908      	ldr	r1, [pc, #32]	; (80026b8 <memory_read+0x64>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d8ef      	bhi.n	8002688 <memory_read+0x34>
	}

	return true;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000460 	.word	0x20000460

080026bc <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d208      	bcs.n	80026e2 <memory_write+0x26>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d805      	bhi.n	80026e2 <memory_write+0x26>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db02      	blt.n	80026e2 <memory_write+0x26>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	dd01      	ble.n	80026e6 <memory_write+0x2a>
		return false;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e019      	b.n	800271a <memory_write+0x5e>

	if((0x10000 - addr) < length)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d901      	bls.n	80026f6 <memory_write+0x3a>
		return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e011      	b.n	800271a <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <memory_write+0x54>
	{
		memory[addr++] = data;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60fa      	str	r2, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	b2d1      	uxtb	r1, r2
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <memory_write+0x6c>)
 8002708:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f1      	bhi.n	80026fc <memory_write+0x40>
	}

	return true;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000460 	.word	0x20000460

0800272c <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08e      	sub	sp, #56	; 0x38
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <make_pin_input+0x24>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d806      	bhi.n	8002750 <make_pin_input+0x24>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <make_pin_input+0x24>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d301      	bcc.n	8002754 <make_pin_input+0x28>
		return false;
 8002750:	2300      	movs	r3, #0
 8002752:	e07f      	b.n	8002854 <make_pin_input+0x128>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b05      	subs	r3, #5
 8002758:	2b06      	cmp	r3, #6
 800275a:	d85f      	bhi.n	800281c <make_pin_input+0xf0>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <make_pin_input+0x38>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002781 	.word	0x08002781
 8002768:	0800281d 	.word	0x0800281d
 800276c:	0800279b 	.word	0x0800279b
 8002770:	080027b5 	.word	0x080027b5
 8002774:	080027cf 	.word	0x080027cf
 8002778:	080027e9 	.word	0x080027e9
 800277c:	08002803 	.word	0x08002803

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <make_pin_input+0x130>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <make_pin_input+0x130>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	6313      	str	r3, [r2, #48]	; 0x30
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <make_pin_input+0x130>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	e040      	b.n	800281c <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <make_pin_input+0x130>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <make_pin_input+0x130>)
 80027a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <make_pin_input+0x130>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	e033      	b.n	800281c <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <make_pin_input+0x130>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <make_pin_input+0x130>)
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b26      	ldr	r3, [pc, #152]	; (800285c <make_pin_input+0x130>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	e026      	b.n	800281c <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <make_pin_input+0x130>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <make_pin_input+0x130>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <make_pin_input+0x130>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	e019      	b.n	800281c <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <make_pin_input+0x130>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <make_pin_input+0x130>)
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <make_pin_input+0x130>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	e00c      	b.n	800281c <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <make_pin_input+0x130>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a15      	ldr	r2, [pc, #84]	; (800285c <make_pin_input+0x130>)
 8002808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <make_pin_input+0x130>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <make_pin_input+0x134>)
 8002840:	4413      	add	r3, r2
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	461a      	mov	r2, r3
 8002846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f003 f90f 	bl	8005a70 <HAL_GPIO_Init>

	return true;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	3738      	adds	r7, #56	; 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	0010007f 	.word	0x0010007f

08002864 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	; 0x38
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <make_pin_output+0x24>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d806      	bhi.n	8002888 <make_pin_output+0x24>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <make_pin_output+0x24>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d301      	bcc.n	800288c <make_pin_output+0x28>
		return false;
 8002888:	2300      	movs	r3, #0
 800288a:	e081      	b.n	8002990 <make_pin_output+0x12c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b05      	subs	r3, #5
 8002890:	2b06      	cmp	r3, #6
 8002892:	d85f      	bhi.n	8002954 <make_pin_output+0xf0>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <make_pin_output+0x38>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028b9 	.word	0x080028b9
 80028a0:	08002955 	.word	0x08002955
 80028a4:	080028d3 	.word	0x080028d3
 80028a8:	080028ed 	.word	0x080028ed
 80028ac:	08002907 	.word	0x08002907
 80028b0:	08002921 	.word	0x08002921
 80028b4:	0800293b 	.word	0x0800293b

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <make_pin_output+0x134>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4a36      	ldr	r2, [pc, #216]	; (8002998 <make_pin_output+0x134>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	6313      	str	r3, [r2, #48]	; 0x30
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <make_pin_output+0x134>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	e040      	b.n	8002954 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <make_pin_output+0x134>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <make_pin_output+0x134>)
 80028d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <make_pin_output+0x134>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	e033      	b.n	8002954 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <make_pin_output+0x134>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a29      	ldr	r2, [pc, #164]	; (8002998 <make_pin_output+0x134>)
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <make_pin_output+0x134>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	e026      	b.n	8002954 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <make_pin_output+0x134>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a23      	ldr	r2, [pc, #140]	; (8002998 <make_pin_output+0x134>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <make_pin_output+0x134>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	e019      	b.n	8002954 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <make_pin_output+0x134>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <make_pin_output+0x134>)
 8002926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <make_pin_output+0x134>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	e00c      	b.n	8002954 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <make_pin_output+0x134>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <make_pin_output+0x134>)
 8002940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <make_pin_output+0x134>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <make_pin_output+0x138>)
 800297c:	4413      	add	r3, r2
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	461a      	mov	r2, r3
 8002982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f003 f871 	bl	8005a70 <HAL_GPIO_Init>

	return true;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3738      	adds	r7, #56	; 0x38
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	0010007f 	.word	0x0010007f

080029a0 <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <read_dig_input+0x26>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d806      	bhi.n	80029c6 <read_dig_input+0x26>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <read_dig_input+0x26>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d301      	bcc.n	80029ca <read_dig_input+0x2a>
		return false;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e02d      	b.n	8002a26 <read_dig_input+0x86>

	int mask = 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e024      	b.n	8002a1e <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d014      	beq.n	8002a08 <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <read_dig_input+0x90>)
 80029e2:	4413      	add	r3, r2
 80029e4:	029b      	lsls	r3, r3, #10
 80029e6:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 80029e8:	2201      	movs	r2, #1
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	18d4      	adds	r4, r2, r3
 80029f8:	8a7b      	ldrh	r3, [r7, #18]
 80029fa:	4619      	mov	r1, r3
 80029fc:	6978      	ldr	r0, [r7, #20]
 80029fe:	f003 f9e3 	bl	8005dc8 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	7023      	strb	r3, [r4, #0]
 8002a06:	e004      	b.n	8002a12 <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	ddd7      	ble.n	80029d4 <read_dig_input+0x34>
	}

	return true;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0010007f 	.word	0x0010007f

08002a34 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00d      	beq.n	8002a62 <write_dig_output+0x2e>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d80a      	bhi.n	8002a62 <write_dig_output+0x2e>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <write_dig_output+0x2e>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d203      	bcs.n	8002a62 <write_dig_output+0x2e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d301      	bcc.n	8002a66 <write_dig_output+0x32>
		return false;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e02a      	b.n	8002abc <write_dig_output+0x88>

	int mask = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e021      	b.n	8002ab4 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <write_dig_output+0x90>)
 8002a7e:	4413      	add	r3, r2
 8002a80:	029b      	lsls	r3, r3, #10
 8002a82:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8002a84:	2201      	movs	r2, #1
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	401a      	ands	r2, r3
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8002a9c:	7c7a      	ldrb	r2, [r7, #17]
 8002a9e:	8a7b      	ldrh	r3, [r7, #18]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f003 f9a8 	bl	8005df8 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	ddda      	ble.n	8002a70 <write_dig_output+0x3c>
	}

	return true;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0010007f 	.word	0x0010007f

08002ac8 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d901      	bls.n	8002adc <analog_read+0x14>
		return false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e00b      	b.n	8002af4 <analog_read+0x2c>

	MX_ADC3_Init1(true);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7fd ff87 	bl	80009f0 <MX_ADC3_Init1>
	config_ADC(addr3);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f8b6 	bl	8000c54 <config_ADC>
	*value = read_ADC();
 8002ae8:	f7fe f8d2 	bl	8000c90 <read_ADC>
 8002aec:	4602      	mov	r2, r0
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	601a      	str	r2, [r3, #0]

	return true;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <analog_write>:

bool analog_write(unsigned int addr3, uint32_t value)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x01)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d901      	bls.n	8002b10 <analog_write+0x14>
		return false;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e01a      	b.n	8002b46 <analog_write+0x4a>

	if(HAL_DAC_Start(&hdac, (addr3 ? DAC_CHANNEL_2 : DAC_CHANNEL_1)) == HAL_OK){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <analog_write+0x1e>
 8002b16:	2310      	movs	r3, #16
 8002b18:	e000      	b.n	8002b1c <analog_write+0x20>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480c      	ldr	r0, [pc, #48]	; (8002b50 <analog_write+0x54>)
 8002b20:	f002 fe4d 	bl	80057be <HAL_DAC_Start>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <analog_write+0x48>
	    HAL_DAC_SetValue(&hdac, (addr3 ? DAC_CHANNEL_2 : DAC_CHANNEL_1), DAC_ALIGN_12B_R, value);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <analog_write+0x38>
 8002b30:	2110      	movs	r1, #16
 8002b32:	e000      	b.n	8002b36 <analog_write+0x3a>
 8002b34:	2100      	movs	r1, #0
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <analog_write+0x54>)
 8002b3c:	f002 fe91 	bl	8005862 <HAL_DAC_SetValue>
	    return true;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <analog_write+0x4a>
	}else
		return false;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200186bc 	.word	0x200186bc

08002b54 <process_buf_nf>:
	process_buf_ff

};

void process_buf_nf(uint32_t* x_buf, int n)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
	y_buf[n] = x_buf[n];
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <process_buf_nf+0x34>)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	analog_write(0,y_buf[n]);
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <process_buf_nf+0x34>)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7ff ffbe 	bl	8002afc <analog_write>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200146bc 	.word	0x200146bc
 8002b8c:	00000000 	.word	0x00000000

08002b90 <process_buf_if>:

void process_buf_if(uint32_t* x_buf, int n)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]

	y_buf[n+1] = a * y_buf[n] + (1-a) * x_buf[n];
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <process_buf_if+0x80>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002baa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002c00 <process_buf_if+0x70>
 8002bae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bc4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8002c08 <process_buf_if+0x78>
 8002bc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002bcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bd8:	ee17 1a90 	vmov	r1, s15
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <process_buf_if+0x80>)
 8002bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		temp += coef_bk[i] * x_buf[(n-i) & (ADC_BUF_SIZE - 1)];
	 }

	y_buf[n] = temp;
	*/
	analog_write(0,y_buf[n]);
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <process_buf_if+0x80>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	4619      	mov	r1, r3
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff ff85 	bl	8002afc <analog_write>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	9999999a 	.word	0x9999999a
 8002c04:	3fd99999 	.word	0x3fd99999
 8002c08:	33333333 	.word	0x33333333
 8002c0c:	3fe33333 	.word	0x3fe33333
 8002c10:	200146bc 	.word	0x200146bc

08002c14 <process_buf_ff>:

void process_buf_ff(uint32_t* x_buf, int n)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	unsigned int temp = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i < M; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	e023      	b.n	8002c70 <process_buf_ff+0x5c>
	{
		temp += coef[i] * x_buf[(n-i) & (ADC_BUF_SIZE - 1)];
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <process_buf_ff+0x84>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	edd3 6a00 	vldr	s13, [r3]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c64:	ee17 3a90 	vmov	r3, s15
 8002c68:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < M; i++)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b19      	cmp	r3, #25
 8002c74:	ddd8      	ble.n	8002c28 <process_buf_ff+0x14>
	}
	y_buf[n] = temp;
 8002c76:	4909      	ldr	r1, [pc, #36]	; (8002c9c <process_buf_ff+0x88>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	analog_write(0,y_buf[n]);
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <process_buf_ff+0x88>)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff ff36 	bl	8002afc <analog_write>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200000a4 	.word	0x200000a4
 8002c9c:	200146bc 	.word	0x200146bc

08002ca0 <process_buf>:

void process_buf(uint32_t* x_buf, int n)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	process_buf_func[sp_config.filter_type](x_buf,n);
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <process_buf+0xc8>)
 8002cac:	7b9b      	ldrb	r3, [r3, #14]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <process_buf+0xcc>)
 8002cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3

	counter ++;
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <process_buf+0xd0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <process_buf+0xd0>)
 8002cc4:	6013      	str	r3, [r2, #0]

	if(sp_config.sp_limit > 0)
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <process_buf+0xc8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d047      	beq.n	8002d5e <process_buf+0xbe>
	{
		char message[22] = {"\0"};
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	821a      	strh	r2, [r3, #16]
		sprintf(message, "%d;%lu;%lu;", counter , x_buf[n], y_buf[n]);
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <process_buf+0xd0>)
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4820      	ldr	r0, [pc, #128]	; (8002d74 <process_buf+0xd4>)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002cf8:	f107 0008 	add.w	r0, r7, #8
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	460a      	mov	r2, r1
 8002d02:	491d      	ldr	r1, [pc, #116]	; (8002d78 <process_buf+0xd8>)
 8002d04:	f007 ff4c 	bl	800aba0 <siprintf>
		send_UART(message);
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fd83 	bl	8004818 <send_UART>

		if(counter == sp_config.sp_limit)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <process_buf+0xc8>)
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <process_buf+0xd0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11f      	bne.n	8002d5e <process_buf+0xbe>
		{
			counter = 0;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <process_buf+0xd0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
			analog_write(0,0);
 8002d24:	2100      	movs	r1, #0
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7ff fee8 	bl	8002afc <analog_write>
			HAL_ADC_Stop_IT(&hadc3);
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <process_buf+0xdc>)
 8002d2e:	f002 f817 	bl	8004d60 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002d32:	4813      	ldr	r0, [pc, #76]	; (8002d80 <process_buf+0xe0>)
 8002d34:	f004 faa4 	bl	8007280 <HAL_TIM_Base_Stop_IT>
		    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	2012      	movs	r0, #18
 8002d3e:	f002 fcd8 	bl	80056f2 <HAL_NVIC_SetPriority>
			while(is_transmitting_to_UART());
 8002d42:	bf00      	nop
 8002d44:	f001 fd44 	bl	80047d0 <is_transmitting_to_UART>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1fa      	bne.n	8002d44 <process_buf+0xa4>
			HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2012      	movs	r0, #18
 8002d54:	f002 fccd 	bl	80056f2 <HAL_NVIC_SetPriority>
			send_UART("Sampling Stopped.\n>");
 8002d58:	480a      	ldr	r0, [pc, #40]	; (8002d84 <process_buf+0xe4>)
 8002d5a:	f001 fd5d 	bl	8004818 <send_UART>
		}
	}
}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000094 	.word	0x20000094
 8002d6c:	20000088 	.word	0x20000088
 8002d70:	20000324 	.word	0x20000324
 8002d74:	200146bc 	.word	0x200146bc
 8002d78:	0800fb74 	.word	0x0800fb74
 8002d7c:	20010464 	.word	0x20010464
 8002d80:	20018778 	.word	0x20018778
 8002d84:	0800fb80 	.word	0x0800fb80

08002d88 <get_speed>:

float get_speed(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	return speed_rpm * 0.10472;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <get_speed+0x30>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d96:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8002db0 <get_speed+0x28>
 8002d9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8002da2:	eeb0 0a67 	vmov.f32	s0, s15
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	0f3cb3e5 	.word	0x0f3cb3e5
 8002db4:	3fbaceee 	.word	0x3fbaceee
 8002db8:	20000330 	.word	0x20000330

08002dbc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_DAC_Init+0x60>)
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <MX_DAC_Init+0x64>)
 8002dce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002dd0:	4812      	ldr	r0, [pc, #72]	; (8002e1c <MX_DAC_Init+0x60>)
 8002dd2:	f002 fcd2 	bl	800577a <HAL_DAC_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ddc:	f000 faa6 	bl	800332c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	2200      	movs	r2, #0
 8002dec:	4619      	mov	r1, r3
 8002dee:	480b      	ldr	r0, [pc, #44]	; (8002e1c <MX_DAC_Init+0x60>)
 8002df0:	f002 fd5c 	bl	80058ac <HAL_DAC_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002dfa:	f000 fa97 	bl	800332c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	2210      	movs	r2, #16
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_DAC_Init+0x60>)
 8002e06:	f002 fd51 	bl	80058ac <HAL_DAC_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002e10:	f000 fa8c 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200186bc 	.word	0x200186bc
 8002e20:	40007400 	.word	0x40007400

08002e24 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_DAC_MspInit+0x74>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d123      	bne.n	8002e8e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_DAC_MspInit+0x78>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e76:	2330      	movs	r3, #48	; 0x30
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <HAL_DAC_MspInit+0x7c>)
 8002e8a:	f002 fdf1 	bl	8005a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40007400 	.word	0x40007400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020000 	.word	0x40020000

08002ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eaa:	f107 031c 	add.w	r3, r7, #28
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eba:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ec0:	f043 0320 	orr.w	r3, r3, #32
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a45      	ldr	r2, [pc, #276]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <MX_GPIO_Init+0x148>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a3f      	ldr	r2, [pc, #252]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <MX_GPIO_Init+0x148>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a39      	ldr	r2, [pc, #228]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a33      	ldr	r2, [pc, #204]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <MX_GPIO_Init+0x148>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|FW_Pin, GPIO_PIN_RESET);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f240 4101 	movw	r1, #1025	; 0x401
 8002f50:	4827      	ldr	r0, [pc, #156]	; (8002ff0 <MX_GPIO_Init+0x14c>)
 8002f52:	f002 ff51 	bl	8005df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RV_GPIO_Port, RV_Pin, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f5c:	4825      	ldr	r0, [pc, #148]	; (8002ff4 <MX_GPIO_Init+0x150>)
 8002f5e:	f002 ff4b 	bl	8005df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|FW_Pin;
 8002f62:	f240 4301 	movw	r3, #1025	; 0x401
 8002f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	481d      	ldr	r0, [pc, #116]	; (8002ff0 <MX_GPIO_Init+0x14c>)
 8002f7c:	f002 fd78 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	4619      	mov	r1, r3
 8002f94:	4817      	ldr	r0, [pc, #92]	; (8002ff4 <MX_GPIO_Init+0x150>)
 8002f96:	f002 fd6b 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4810      	ldr	r0, [pc, #64]	; (8002ff4 <MX_GPIO_Init+0x150>)
 8002fb2:	f002 fd5d 	bl	8005a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RV_Pin;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RV_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <MX_GPIO_Init+0x150>)
 8002fd0:	f002 fd4e 	bl	8005a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2028      	movs	r0, #40	; 0x28
 8002fda:	f002 fb8a 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fde:	2028      	movs	r0, #40	; 0x28
 8002fe0:	f002 fba3 	bl	800572a <HAL_NVIC_EnableIRQ>

}
 8002fe4:	bf00      	nop
 8002fe6:	3730      	adds	r7, #48	; 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40020400 	.word	0x40020400
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <is_GPIO_pin_free>:
unsigned int pulses = 0;
bool read_dir;
unsigned int pulses_tim = 0;

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	//	ADC3 e DAC

	if(port_addr == 1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x603F)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	f246 033f 	movw	r3, #24639	; 0x603f
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <is_GPIO_pin_free+0x20>
			return false;
 8003014:	2300      	movs	r3, #0
 8003016:	e028      	b.n	800306a <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d106      	bne.n	800302c <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <is_GPIO_pin_free+0x34>
			return false;
 8003028:	2300      	movs	r3, #0
 800302a:	e01e      	b.n	800306a <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b06      	cmp	r3, #6
 8003030:	d106      	bne.n	8003040 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <is_GPIO_pin_free+0x48>
			return false;
 800303c:	2300      	movs	r3, #0
 800303e:	e014      	b.n	800306a <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d106      	bne.n	8003054 <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <is_GPIO_pin_free+0x5c>
			return false;
 8003050:	2300      	movs	r3, #0
 8003052:	e00a      	b.n	800306a <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d106      	bne.n	8003068 <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <is_GPIO_pin_free+0x70>
			return false;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <is_GPIO_pin_free+0x72>

	return true;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	read_dir = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8003082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003086:	4812      	ldr	r0, [pc, #72]	; (80030d0 <HAL_GPIO_EXTI_Callback+0x58>)
 8003088:	f002 fe9e 	bl	8005dc8 <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800309a:	701a      	strb	r2, [r3, #0]

	if(get_count_pulses_mode())
 800309c:	f000 ffe6 	bl	800406c <get_count_pulses_mode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_GPIO_EXTI_Callback+0x3a>
		pulses++;
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_GPIO_EXTI_Callback+0x60>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_GPIO_EXTI_Callback+0x60>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_EXTI_Callback+0x48>
	else
	{
		pulses_tim = get_tim4_counter();
 80030b2:	f000 ffcf 	bl	8004054 <get_tim4_counter>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_GPIO_EXTI_Callback+0x64>)
 80030ba:	6013      	str	r3, [r2, #0]
		reset_tim4_counter();
 80030bc:	f000 ffbe 	bl	800403c <reset_tim4_counter>
	}


	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80030c0:	2101      	movs	r1, #1
 80030c2:	4807      	ldr	r0, [pc, #28]	; (80030e0 <HAL_GPIO_EXTI_Callback+0x68>)
 80030c4:	f002 feb1 	bl	8005e2a <HAL_GPIO_TogglePin>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	200186d0 	.word	0x200186d0
 80030d8:	20000338 	.word	0x20000338
 80030dc:	2000033c 	.word	0x2000033c
 80030e0:	40020400 	.word	0x40020400

080030e4 <reset_pulses>:

void reset_pulses(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
	pulses = 0;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <reset_pulses+0x14>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	20000338 	.word	0x20000338
 80030fc:	00000000 	.word	0x00000000

08003100 <get_pulses_tim>:

float get_pulses_tim(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return pulses_tim  * 0.05;
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <get_pulses_tim+0x30>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003110:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8003128 <get_pulses_tim+0x28>
 8003114:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003118:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	9999999a 	.word	0x9999999a
 800312c:	3fa99999 	.word	0x3fa99999
 8003130:	2000033c 	.word	0x2000033c

08003134 <get_n_pulses>:

unsigned int get_n_pulses(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
	return pulses;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <get_n_pulses+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000338 	.word	0x20000338

0800314c <blink_LED>:

void blink_LED()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003150:	2101      	movs	r1, #1
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <blink_LED+0x20>)
 8003154:	f002 fe69 	bl	8005e2a <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8003158:	20c8      	movs	r0, #200	; 0xc8
 800315a:	f001 fcc1 	bl	8004ae0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800315e:	2101      	movs	r1, #1
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <blink_LED+0x20>)
 8003162:	f002 fe62 	bl	8005e2a <HAL_GPIO_TogglePin>
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40020400 	.word	0x40020400

08003170 <get_dir>:

bool get_dir(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	return read_dir;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <get_dir+0x14>)
 8003176:	781b      	ldrb	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	200186d0 	.word	0x200186d0

08003188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b0c2      	sub	sp, #264	; 0x108
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800318e:	f001 fc4a 	bl	8004a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003192:	f000 f85d 	bl	8003250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003196:	f7ff fe85 	bl	8002ea4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800319a:	f001 fa5b 	bl	8004654 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800319e:	f7fd fc8b 	bl	8000ab8 <MX_ADC3_Init>
  MX_TIM1_Init();
 80031a2:	f000 fb9b 	bl	80038dc <MX_TIM1_Init>
  MX_DAC_Init();
 80031a6:	f7ff fe09 	bl	8002dbc <MX_DAC_Init>
  MX_TIM2_Init();
 80031aa:	f000 fbeb 	bl	8003984 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031ae:	f000 fc5f 	bl	8003a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031b2:	f000 fcab 	bl	8003b0c <MX_TIM4_Init>
  MX_TIM9_Init();
 80031b6:	f000 fcf7 	bl	8003ba8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031c0:	481d      	ldr	r0, [pc, #116]	; (8003238 <main+0xb0>)
 80031c2:	f002 fe19 	bl	8005df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031cc:	481b      	ldr	r0, [pc, #108]	; (800323c <main+0xb4>)
 80031ce:	f002 fe13 	bl	8005df8 <HAL_GPIO_WritePin>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80031d2:	2028      	movs	r0, #40	; 0x28
 80031d4:	f002 fab7 	bl	8005746 <HAL_NVIC_DisableIRQ>
  reset_pulses();
 80031d8:	f7ff ff84 	bl	80030e4 <reset_pulses>

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80031dc:	2201      	movs	r2, #1
 80031de:	4918      	ldr	r1, [pc, #96]	; (8003240 <main+0xb8>)
 80031e0:	4818      	ldr	r0, [pc, #96]	; (8003244 <main+0xbc>)
 80031e2:	f005 fb79 	bl	80088d8 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 80031e6:	4818      	ldr	r0, [pc, #96]	; (8003248 <main+0xc0>)
 80031e8:	f001 fb16 	bl	8004818 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 80031ec:	f001 fae4 	bl	80047b8 <has_message_from_UART>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0fa      	beq.n	80031ec <main+0x64>
	  {
		  blink_LED();
 80031f6:	f7ff ffa9 	bl	800314c <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fb35 	bl	800486c <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fdcf 	bl	8000da8 <check_command>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8003210:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <main+0xc4>)
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	1d3a      	adds	r2, r7, #4
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8003220:	bf00      	nop
 8003222:	f001 fad5 	bl	80047d0 <is_transmitting_to_UART>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1fa      	bne.n	8003222 <main+0x9a>

		  reset_UART();
 800322c:	f001 fadc 	bl	80047e8 <reset_UART>
		  send_UART(PROMPT);
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <main+0xc0>)
 8003232:	f001 faf1 	bl	8004818 <send_UART>
	  if(has_message_from_UART())
 8003236:	e7d9      	b.n	80031ec <main+0x64>
 8003238:	40020400 	.word	0x40020400
 800323c:	40021000 	.word	0x40021000
 8003240:	2000035c 	.word	0x2000035c
 8003244:	20018888 	.word	0x20018888
 8003248:	0800fb94 	.word	0x0800fb94
 800324c:	20000008 	.word	0x20000008

08003250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b094      	sub	sp, #80	; 0x50
 8003254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	2234      	movs	r2, #52	; 0x34
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f006 fe48 	bl	8009ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <SystemClock_Config+0xd4>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <SystemClock_Config+0xd4>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <SystemClock_Config+0xd4>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <SystemClock_Config+0xd8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <SystemClock_Config+0xd8>)
 8003292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <SystemClock_Config+0xd8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032a8:	2301      	movs	r3, #1
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032ac:	2310      	movs	r3, #16
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b0:	2302      	movs	r3, #2
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032b8:	2308      	movs	r3, #8
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032c4:	2304      	movs	r3, #4
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032c8:	2302      	movs	r3, #2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 fe2d 	bl	8005f30 <HAL_RCC_OscConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80032dc:	f000 f826 	bl	800332c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032e0:	f002 fdd6 	bl	8005e90 <HAL_PWREx_EnableOverDrive>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80032ea:	f000 f81f 	bl	800332c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ee:	230f      	movs	r3, #15
 80032f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f2:	2302      	movs	r3, #2
 80032f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003300:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003304:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	2106      	movs	r1, #6
 800330c:	4618      	mov	r0, r3
 800330e:	f003 f8bd 	bl	800648c <HAL_RCC_ClockConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003318:	f000 f808 	bl	800332c <Error_Handler>
  }
}
 800331c:	bf00      	nop
 800331e:	3750      	adds	r7, #80	; 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000

0800332c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003330:	b672      	cpsid	i
}
 8003332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003334:	e7fe      	b.n	8003334 <Error_Handler+0x8>
	...

08003338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_MspInit+0x44>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_MspInit+0x44>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_MspInit+0x44>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_MspInit+0x44>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_MspInit+0x44>)
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_MspInit+0x44>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800336e:	2005      	movs	r0, #5
 8003370:	f002 f9b4 	bl	80056dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <NMI_Handler+0x4>

08003386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <HardFault_Handler+0x4>

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <MemManage_Handler+0x4>

08003392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <BusFault_Handler+0x4>

08003398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler+0x4>

0800339e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033cc:	f001 fb68 	bl	8004aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <ADC_IRQHandler+0x10>)
 80033da:	f001 fcff 	bl	8004ddc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20010464 	.word	0x20010464

080033e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80033ee:	f004 f951 	bl	8007694 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80033f2:	4803      	ldr	r0, [pc, #12]	; (8003400 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80033f4:	f004 f94e 	bl	8007694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20018778 	.word	0x20018778
 8003400:	200187c8 	.word	0x200187c8

08003404 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800340a:	f004 f943 	bl	8007694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20018778 	.word	0x20018778

08003418 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <TIM3_IRQHandler+0x10>)
 800341e:	f004 f939 	bl	8007694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20018728 	.word	0x20018728

0800342c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <TIM4_IRQHandler+0x10>)
 8003432:	f004 f92f 	bl	8007694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200186d8 	.word	0x200186d8

08003440 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <USART3_IRQHandler+0x10>)
 8003446:	f005 fa95 	bl	8008974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20018888 	.word	0x20018888

08003454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003458:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800345c:	f002 fd00 	bl	8005e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	return 1;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_kill>:

int _kill(int pid, int sig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800347e:	f006 fd0f 	bl	8009ea0 <__errno>
 8003482:	4603      	mov	r3, r0
 8003484:	2216      	movs	r2, #22
 8003486:	601a      	str	r2, [r3, #0]
	return -1;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_exit>:

void _exit (int status)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ffe7 	bl	8003474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034a6:	e7fe      	b.n	80034a6 <_exit+0x12>

080034a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e00a      	b.n	80034d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034ba:	f3af 8000 	nop.w
 80034be:	4601      	mov	r1, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	60ba      	str	r2, [r7, #8]
 80034c6:	b2ca      	uxtb	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dbf0      	blt.n	80034ba <_read+0x12>
	}

return len;
 80034d8:	687b      	ldr	r3, [r7, #4]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e009      	b.n	8003508 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	60ba      	str	r2, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	dbf1      	blt.n	80034f4 <_write+0x12>
	}
	return len;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_close>:

int _close(int file)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
	return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003542:	605a      	str	r2, [r3, #4]
	return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_isatty>:

int _isatty(int file)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
	return 1;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <_sbrk+0x5c>)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <_sbrk+0x60>)
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <_sbrk+0x64>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <_sbrk+0x68>)
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <_sbrk+0x64>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d207      	bcs.n	80035c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b4:	f006 fc74 	bl	8009ea0 <__errno>
 80035b8:	4603      	mov	r3, r0
 80035ba:	220c      	movs	r2, #12
 80035bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e009      	b.n	80035d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <_sbrk+0x64>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <_sbrk+0x64>)
 80035d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20080000 	.word	0x20080000
 80035e4:	00000400 	.word	0x00000400
 80035e8:	20000340 	.word	0x20000340
 80035ec:	20018920 	.word	0x20018920

080035f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <SystemInit+0x20>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <SystemInit+0x20>)
 80035fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <MX_TIM1_Init1>:
unsigned int units = u_rpm, kp = 0;
float sp_period_s;
char* message;

void MX_TIM1_Init1(struct sp_config_t sp_config)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b093      	sub	sp, #76	; 0x4c
 8003618:	af00      	add	r7, sp, #0
 800361a:	463c      	mov	r4, r7
 800361c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
 800364e:	2301      	movs	r3, #1
 8003650:	643b      	str	r3, [r7, #64]	; 0x40

	if(!strncmp(sp_config.timeunit,"us",2))
 8003652:	463b      	mov	r3, r7
 8003654:	330c      	adds	r3, #12
 8003656:	2202      	movs	r2, #2
 8003658:	493c      	ldr	r1, [pc, #240]	; (800374c <MX_TIM1_Init1+0x138>)
 800365a:	4618      	mov	r0, r3
 800365c:	f007 fb39 	bl	800acd2 <strncmp>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d018      	beq.n	8003698 <MX_TIM1_Init1+0x84>
	{
	}
	else if(!strncmp(sp_config.timeunit,"ms",2))
 8003666:	463b      	mov	r3, r7
 8003668:	330c      	adds	r3, #12
 800366a:	2202      	movs	r2, #2
 800366c:	4938      	ldr	r1, [pc, #224]	; (8003750 <MX_TIM1_Init1+0x13c>)
 800366e:	4618      	mov	r0, r3
 8003670:	f007 fb2f 	bl	800acd2 <strncmp>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <MX_TIM1_Init1+0x6e>
	{
		mul1 = 1000;
 800367a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
 8003680:	e00a      	b.n	8003698 <MX_TIM1_Init1+0x84>
	}
	else if(!strncmp(sp_config.timeunit,"s",1))
 8003682:	7b3a      	ldrb	r2, [r7, #12]
 8003684:	4b33      	ldr	r3, [pc, #204]	; (8003754 <MX_TIM1_Init1+0x140>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <MX_TIM1_Init1+0x84>
	{
		mul1 = 20000;
 800368e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
		mul2 = 50;
 8003694:	2332      	movs	r3, #50	; 0x32
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
	}

	htim1.Instance = TIM1;
 8003698:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <MX_TIM1_Init1+0x144>)
 800369a:	4a30      	ldr	r2, [pc, #192]	; (800375c <MX_TIM1_Init1+0x148>)
 800369c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = (2 * mul1) - 1;
 800369e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036a6:	6053      	str	r3, [r2, #4]
  	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  	htim1.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036b2:	fb02 f203 	mul.w	r2, r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4a25      	ldr	r2, [pc, #148]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036c4:	60d3      	str	r3, [r2, #12]
  	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  	htim1.Init.RepetitionCounter = 0;
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	615a      	str	r2, [r3, #20]
  	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036d8:	481f      	ldr	r0, [pc, #124]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036da:	f003 fd01 	bl	80070e0 <HAL_TIM_Base_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM1_Init1+0xd4>
  	{
  		Error_Handler();
 80036e4:	f7ff fe22 	bl	800332c <Error_Handler>
  	}
  	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
  	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f2:	4619      	mov	r1, r3
 80036f4:	4818      	ldr	r0, [pc, #96]	; (8003758 <MX_TIM1_Init1+0x144>)
 80036f6:	f004 fa01 	bl	8007afc <HAL_TIM_ConfigClockSource>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM1_Init1+0xf0>
  	{
  		Error_Handler();
 8003700:	f7ff fe14 	bl	800332c <Error_Handler>
  	}
  	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
  	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8003708:	2310      	movs	r3, #16
 800370a:	623b      	str	r3, [r7, #32]
  	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800370c:	f107 031c 	add.w	r3, r7, #28
 8003710:	4619      	mov	r1, r3
 8003712:	4811      	ldr	r0, [pc, #68]	; (8003758 <MX_TIM1_Init1+0x144>)
 8003714:	f004 fabc 	bl	8007c90 <HAL_TIM_SlaveConfigSynchro>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM1_Init1+0x10e>
  	{
  		Error_Handler();
 800371e:	f7ff fe05 	bl	800332c <Error_Handler>
  	}
  	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003722:	2320      	movs	r3, #32
 8003724:	613b      	str	r3, [r7, #16]
  	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800372e:	f107 0310 	add.w	r3, r7, #16
 8003732:	4619      	mov	r1, r3
 8003734:	4808      	ldr	r0, [pc, #32]	; (8003758 <MX_TIM1_Init1+0x144>)
 8003736:	f004 ff67 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM1_Init1+0x130>
  	{
  		Error_Handler();
 8003740:	f7ff fdf4 	bl	800332c <Error_Handler>
  	}
}
 8003744:	bf00      	nop
 8003746:	374c      	adds	r7, #76	; 0x4c
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	0800fb98 	.word	0x0800fb98
 8003750:	0800fb9c 	.word	0x0800fb9c
 8003754:	0800fba0 	.word	0x0800fba0
 8003758:	20018778 	.word	0x20018778
 800375c:	40010000 	.word	0x40010000

08003760 <MX_TIM3_Init1>:

void MX_TIM3_Init1(struct sp_config_t sp_config)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b08f      	sub	sp, #60	; 0x3c
 8003764:	af00      	add	r7, sp, #0
 8003766:	463c      	mov	r4, r7
 8003768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	frist_time = 1;
 800376c:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <MX_TIM3_Init1+0x160>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003772:	f107 0320 	add.w	r3, r7, #32
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
 8003790:	2301      	movs	r3, #1
 8003792:	633b      	str	r3, [r7, #48]	; 0x30

	if(!strncmp(sp_config.timeunit,"us",2))
 8003794:	463b      	mov	r3, r7
 8003796:	330c      	adds	r3, #12
 8003798:	2202      	movs	r2, #2
 800379a:	494a      	ldr	r1, [pc, #296]	; (80038c4 <MX_TIM3_Init1+0x164>)
 800379c:	4618      	mov	r0, r3
 800379e:	f007 fa98 	bl	800acd2 <strncmp>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10e      	bne.n	80037c6 <MX_TIM3_Init1+0x66>
	{
		sp_period_s = 0.000001 * sp_config.unit;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80037b2:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80038b0 <MX_TIM3_Init1+0x150>
 80037b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037be:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <MX_TIM3_Init1+0x168>)
 80037c0:	edc3 7a00 	vstr	s15, [r3]
 80037c4:	e02e      	b.n	8003824 <MX_TIM3_Init1+0xc4>
	}
	else if(!strncmp(sp_config.timeunit,"ms",2))
 80037c6:	463b      	mov	r3, r7
 80037c8:	330c      	adds	r3, #12
 80037ca:	2202      	movs	r2, #2
 80037cc:	493f      	ldr	r1, [pc, #252]	; (80038cc <MX_TIM3_Init1+0x16c>)
 80037ce:	4618      	mov	r0, r3
 80037d0:	f007 fa7f 	bl	800acd2 <strncmp>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d111      	bne.n	80037fe <MX_TIM3_Init1+0x9e>
	{
		sp_period_s = 0.001 * sp_config.unit;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80037e4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80038b8 <MX_TIM3_Init1+0x158>
 80037e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <MX_TIM3_Init1+0x168>)
 80037f2:	edc3 7a00 	vstr	s15, [r3]
		mul1 = 1000;
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	e012      	b.n	8003824 <MX_TIM3_Init1+0xc4>
	}
	else if(!strncmp(sp_config.timeunit,"s",1))
 80037fe:	7b3a      	ldrb	r2, [r7, #12]
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <MX_TIM3_Init1+0x170>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <MX_TIM3_Init1+0xc4>
	{
		sp_period_s = 1 * sp_config.unit;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <MX_TIM3_Init1+0x168>)
 8003816:	edc3 7a00 	vstr	s15, [r3]
		mul1 = 20000;
 800381a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
		mul2 = 50;
 8003820:	2332      	movs	r3, #50	; 0x32
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
	}

	htim3.Instance = TIM3;
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003826:	4a2c      	ldr	r2, [pc, #176]	; (80038d8 <MX_TIM3_Init1+0x178>)
 8003828:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003832:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	fb02 f203 	mul.w	r2, r2, r3
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3b01      	subs	r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003850:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <MX_TIM3_Init1+0x174>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800385e:	481d      	ldr	r0, [pc, #116]	; (80038d4 <MX_TIM3_Init1+0x174>)
 8003860:	f003 fc3e 	bl	80070e0 <HAL_TIM_Base_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM3_Init1+0x10e>
	{
		Error_Handler();
 800386a:	f7ff fd5f 	bl	800332c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800386e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003872:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003874:	f107 0320 	add.w	r3, r7, #32
 8003878:	4619      	mov	r1, r3
 800387a:	4816      	ldr	r0, [pc, #88]	; (80038d4 <MX_TIM3_Init1+0x174>)
 800387c:	f004 f93e 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM3_Init1+0x12a>
	{
		Error_Handler();
 8003886:	f7ff fd51 	bl	800332c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	480e      	ldr	r0, [pc, #56]	; (80038d4 <MX_TIM3_Init1+0x174>)
 800389a:	f004 feb5 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM3_Init1+0x148>
	{
		Error_Handler();
 80038a4:	f7ff fd42 	bl	800332c <Error_Handler>
	}
}
 80038a8:	bf00      	nop
 80038aa:	373c      	adds	r7, #60	; 0x3c
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	a0b5ed8d 	.word	0xa0b5ed8d
 80038b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80038b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80038bc:	3f50624d 	.word	0x3f50624d
 80038c0:	20000125 	.word	0x20000125
 80038c4:	0800fb98 	.word	0x0800fb98
 80038c8:	20018774 	.word	0x20018774
 80038cc:	0800fb9c 	.word	0x0800fb9c
 80038d0:	0800fba0 	.word	0x0800fba0
 80038d4:	20018728 	.word	0x20018728
 80038d8:	40000400 	.word	0x40000400

080038dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038e2:	f107 0310 	add.w	r3, r7, #16
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <MX_TIM1_Init+0xa0>)
 80038fc:	4a20      	ldr	r2, [pc, #128]	; (8003980 <MX_TIM1_Init+0xa4>)
 80038fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600;
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <MX_TIM1_Init+0xa0>)
 8003902:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <MX_TIM1_Init+0xa0>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <MX_TIM1_Init+0xa0>)
 8003910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <MX_TIM1_Init+0xa0>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_TIM1_Init+0xa0>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <MX_TIM1_Init+0xa0>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003928:	4814      	ldr	r0, [pc, #80]	; (800397c <MX_TIM1_Init+0xa0>)
 800392a:	f003 fbd9 	bl	80070e0 <HAL_TIM_Base_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8003934:	f7ff fcfa 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800393e:	f107 0310 	add.w	r3, r7, #16
 8003942:	4619      	mov	r1, r3
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <MX_TIM1_Init+0xa0>)
 8003946:	f004 f8d9 	bl	8007afc <HAL_TIM_ConfigClockSource>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003950:	f7ff fcec 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003954:	2320      	movs	r3, #32
 8003956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_TIM1_Init+0xa0>)
 8003966:	f004 fe4f 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003970:	f7ff fcdc 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20018778 	.word	0x20018778
 8003980:	40010000 	.word	0x40010000

08003984 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	; 0x38
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800398a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a4:	463b      	mov	r3, r7
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039b6:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039c0:	225f      	movs	r2, #95	; 0x5f
 80039c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80039d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039de:	4823      	ldr	r0, [pc, #140]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039e0:	f003 fb7e 	bl	80070e0 <HAL_TIM_Base_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80039ea:	f7ff fc9f 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f8:	4619      	mov	r1, r3
 80039fa:	481c      	ldr	r0, [pc, #112]	; (8003a6c <MX_TIM2_Init+0xe8>)
 80039fc:	f004 f87e 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003a06:	f7ff fc91 	bl	800332c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a0a:	4818      	ldr	r0, [pc, #96]	; (8003a6c <MX_TIM2_Init+0xe8>)
 8003a0c:	f003 fc67 	bl	80072de <HAL_TIM_PWM_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003a16:	f7ff fc89 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	4619      	mov	r1, r3
 8003a28:	4810      	ldr	r0, [pc, #64]	; (8003a6c <MX_TIM2_Init+0xe8>)
 8003a2a:	f004 fded 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003a34:	f7ff fc7a 	bl	800332c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a38:	2360      	movs	r3, #96	; 0x60
 8003a3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a48:	463b      	mov	r3, r7
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4807      	ldr	r0, [pc, #28]	; (8003a6c <MX_TIM2_Init+0xe8>)
 8003a50:	f003 ff40 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003a5a:	f7ff fc67 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a5e:	4803      	ldr	r0, [pc, #12]	; (8003a6c <MX_TIM2_Init+0xe8>)
 8003a60:	f000 f970 	bl	8003d44 <HAL_TIM_MspPostInit>

}
 8003a64:	bf00      	nop
 8003a66:	3738      	adds	r7, #56	; 0x38
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20018818 	.word	0x20018818

08003a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <MX_TIM3_Init+0x98>)
 8003a92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003a96:	2260      	movs	r2, #96	; 0x60
 8003a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1-1;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ab2:	4814      	ldr	r0, [pc, #80]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003ab4:	f003 fb14 	bl	80070e0 <HAL_TIM_Base_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003abe:	f7ff fc35 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	480d      	ldr	r0, [pc, #52]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003ad0:	f004 f814 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003ada:	f7ff fc27 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4806      	ldr	r0, [pc, #24]	; (8003b04 <MX_TIM3_Init+0x94>)
 8003aec:	f004 fd8c 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003af6:	f7ff fc19 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20018728 	.word	0x20018728
 8003b08:	40000400 	.word	0x40000400

08003b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b12:	f107 0310 	add.w	r3, r7, #16
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <MX_TIM4_Init+0x98>)
 8003b2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (48 * 50)-1;
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b3e:	f640 125f 	movw	r2, #2399	; 0x95f
 8003b42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b50:	4813      	ldr	r0, [pc, #76]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b52:	f003 fac5 	bl	80070e0 <HAL_TIM_Base_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003b5c:	f7ff fbe6 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b6e:	f003 ffc5 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003b78:	f7ff fbd8 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_TIM4_Init+0x94>)
 8003b8a:	f004 fd3d 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003b94:	f7ff fbca 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	200186d8 	.word	0x200186d8
 8003ba4:	40000800 	.word	0x40000800

08003ba8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bae:	463b      	mov	r3, r7
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <MX_TIM9_Init+0x70>)
 8003bbe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 960-1;
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bc2:	f240 32bf 	movw	r2, #959	; 0x3bf
 8003bc6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003be2:	f003 fa7d 	bl	80070e0 <HAL_TIM_Base_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003bec:	f7ff fb9e 	bl	800332c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4806      	ldr	r0, [pc, #24]	; (8003c14 <MX_TIM9_Init+0x6c>)
 8003bfc:	f003 ff7e 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003c06:	f7ff fb91 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200187c8 	.word	0x200187c8
 8003c18:	40014000 	.word	0x40014000

08003c1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a41      	ldr	r2, [pc, #260]	; (8003d30 <HAL_TIM_Base_MspInit+0x114>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d11c      	bne.n	8003c68 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2018      	movs	r0, #24
 8003c4c:	f001 fd51 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c50:	2018      	movs	r0, #24
 8003c52:	f001 fd6a 	bl	800572a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2101      	movs	r1, #1
 8003c5a:	2019      	movs	r0, #25
 8003c5c:	f001 fd49 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c60:	2019      	movs	r0, #25
 8003c62:	f001 fd62 	bl	800572a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003c66:	e05e      	b.n	8003d26 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d10c      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	e04c      	b.n	8003d26 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a29      	ldr	r2, [pc, #164]	; (8003d38 <HAL_TIM_Base_MspInit+0x11c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d114      	bne.n	8003cc0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	201d      	movs	r0, #29
 8003cb4:	f001 fd1d 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cb8:	201d      	movs	r0, #29
 8003cba:	f001 fd36 	bl	800572a <HAL_NVIC_EnableIRQ>
}
 8003cbe:	e032      	b.n	8003d26 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_TIM_Base_MspInit+0x120>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d114      	bne.n	8003cf4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	201e      	movs	r0, #30
 8003ce8:	f001 fd03 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cec:	201e      	movs	r0, #30
 8003cee:	f001 fd1c 	bl	800572a <HAL_NVIC_EnableIRQ>
}
 8003cf2:	e018      	b.n	8003d26 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM9)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <HAL_TIM_Base_MspInit+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d113      	bne.n	8003d26 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_TIM_Base_MspInit+0x118>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2018      	movs	r0, #24
 8003d1c:	f001 fce9 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003d20:	2018      	movs	r0, #24
 8003d22:	f001 fd02 	bl	800572a <HAL_NVIC_EnableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d11c      	bne.n	8003da0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_TIM_MspPostInit+0x64>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a0f      	ldr	r2, [pc, #60]	; (8003da8 <HAL_TIM_MspPostInit+0x64>)
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_TIM_MspPostInit+0x64>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8003d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4804      	ldr	r0, [pc, #16]	; (8003dac <HAL_TIM_MspPostInit+0x68>)
 8003d9c:	f001 fe68 	bl	8005a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003da0:	bf00      	nop
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40020400 	.word	0x40020400

08003db0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a8c      	ldr	r2, [pc, #560]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d105      	bne.n	8003dcc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		tim4_counter++;
 8003dc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a8a      	ldr	r2, [pc, #552]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003dc8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
			TIM2->CCR4 = dc * mul_pwm;
		}
	}
}
 8003dca:	e10b      	b.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x234>
	}else if (htim == &htim3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a89      	ldr	r2, [pc, #548]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d14c      	bne.n	8003e6e <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(!count_pulses_mode && ((60 / get_pulses_tim()) > 35) && !frist_time)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01e      	beq.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x70>
 8003de2:	f7ff f98d 	bl	8003100 <get_pulses_tim>
 8003de6:	eeb0 7a40 	vmov.f32	s14, s0
 8003dea:	eddf 6a84 	vldr	s13, [pc, #528]	; 8003ffc <HAL_TIM_PeriodElapsedCallback+0x24c>
 8003dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004000 <HAL_TIM_PeriodElapsedCallback+0x250>
 8003df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	dd0f      	ble.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x70>
 8003e00:	4b80      	ldr	r3, [pc, #512]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x70>
			count_pulses_mode = 1;
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
			reset_tim4_counter();
 8003e14:	f000 f912 	bl	800403c <reset_tim4_counter>
			HAL_TIM_Base_Stop_IT(&htim4);
 8003e18:	4874      	ldr	r0, [pc, #464]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003e1a:	f003 fa31 	bl	8007280 <HAL_TIM_Base_Stop_IT>
 8003e1e:	e01a      	b.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0xa6>
		}else if(count_pulses_mode && get_n_pulses() < LM_EN  && !frist_time)
 8003e20:	4b75      	ldr	r3, [pc, #468]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8003e28:	f7ff f984 	bl	8003134 <get_n_pulses>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003e32:	d210      	bcs.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8003e34:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f083 0301 	eor.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0xa6>
			count_pulses_mode = 0;
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
			reset_pulses();
 8003e48:	f7ff f94c 	bl	80030e4 <reset_pulses>
			MX_TIM4_Init();
 8003e4c:	f7ff fe5e 	bl	8003b0c <MX_TIM4_Init>
			HAL_TIM_Base_Start_IT(&htim4);
 8003e50:	4866      	ldr	r0, [pc, #408]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003e52:	f003 f99d 	bl	8007190 <HAL_TIM_Base_Start_IT>
		process_units[units]();
 8003e56:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6c      	ldr	r2, [pc, #432]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	4798      	blx	r3
		frist_time = 0;
 8003e62:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
		reset_pulses();
 8003e68:	f7ff f93c 	bl	80030e4 <reset_pulses>
}
 8003e6c:	e0ba      	b.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x234>
	}else if (htim == &htim9)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a67      	ldr	r2, [pc, #412]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	f040 80b6 	bne.w	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x234>
		speed_c = get_speed();
 8003e78:	f7fe ff86 	bl	8002d88 <get_speed>
 8003e7c:	eef0 7a40 	vmov.f32	s15, s0
 8003e80:	4b64      	ldr	r3, [pc, #400]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003e82:	edc3 7a00 	vstr	s15, [r3]
		 unsigned int mul_pwm = (TIM2->ARR+1)/100;
 8003e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a62      	ldr	r2, [pc, #392]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	60fb      	str	r3, [r7, #12]
		un = kp*(speed_c - speed);
 8003e98:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	ee07 3a90 	vmov	s15, r3
 8003ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea4:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003ea6:	edd3 6a00 	vldr	s13, [r3]
 8003eaa:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003eba:	edc3 7a00 	vstr	s15, [r3]
		dc = (un/6)*100;
 8003ebe:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003ec0:	ed93 7a00 	vldr	s14, [r3]
 8003ec4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003ec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ecc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004028 <HAL_TIM_PeriodElapsedCallback+0x278>
 8003ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed4:	4b55      	ldr	r3, [pc, #340]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003ed6:	edc3 7a00 	vstr	s15, [r3]
		if(dc >= 0){
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	db39      	blt.n	8003f5e <HAL_TIM_PeriodElapsedCallback+0x1ae>
			if(dc < 0)
 8003eea:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d507      	bpl.n	8003f0a <HAL_TIM_PeriodElapsedCallback+0x15a>
				dc = -dc;
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	eef1 7a67 	vneg.f32	s15, s15
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f06:	edc3 7a00 	vstr	s15, [r3]
			if(dc > 100)
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004028 <HAL_TIM_PeriodElapsedCallback+0x278>
 8003f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	dd02      	ble.n	8003f24 <HAL_TIM_PeriodElapsedCallback+0x174>
				dc = 100;
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f20:	4a43      	ldr	r2, [pc, #268]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003f22:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f2a:	4842      	ldr	r0, [pc, #264]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003f2c:	f001 ff64 	bl	8005df8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003f30:	2201      	movs	r2, #1
 8003f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f36:	4840      	ldr	r0, [pc, #256]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f38:	f001 ff5e 	bl	8005df8 <HAL_GPIO_WritePin>
			TIM2->CCR4 = dc * mul_pwm;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f58:	ee17 2a90 	vmov	r2, s15
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
		if(dc < 0){
 8003f5e:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6c:	d400      	bmi.n	8003f70 <HAL_TIM_PeriodElapsedCallback+0x1c0>
}
 8003f6e:	e039      	b.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x234>
			if(dc < 0)
 8003f70:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	d507      	bpl.n	8003f90 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				dc = -dc;
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	eef1 7a67 	vneg.f32	s15, s15
 8003f8a:	4b28      	ldr	r3, [pc, #160]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f8c:	edc3 7a00 	vstr	s15, [r3]
			if(dc > 100)
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004028 <HAL_TIM_PeriodElapsedCallback+0x278>
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	dd02      	ble.n	8003faa <HAL_TIM_PeriodElapsedCallback+0x1fa>
				dc = 100;
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003fa8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fb0:	4821      	ldr	r0, [pc, #132]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003fb2:	f001 ff21 	bl	8005df8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fbc:	481d      	ldr	r0, [pc, #116]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003fbe:	f001 ff1b 	bl	8005df8 <HAL_GPIO_WritePin>
			TIM2->CCR4 = dc * mul_pwm;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003fce:	edd3 7a00 	vldr	s15, [r3]
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fde:	ee17 2a90 	vmov	r2, s15
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200186d8 	.word	0x200186d8
 8003ff0:	20000348 	.word	0x20000348
 8003ff4:	20018728 	.word	0x20018728
 8003ff8:	20000124 	.word	0x20000124
 8003ffc:	42700000 	.word	0x42700000
 8004000:	420c0000 	.word	0x420c0000
 8004004:	20000125 	.word	0x20000125
 8004008:	2000034c 	.word	0x2000034c
 800400c:	20000114 	.word	0x20000114
 8004010:	200187c8 	.word	0x200187c8
 8004014:	200187c4 	.word	0x200187c4
 8004018:	51eb851f 	.word	0x51eb851f
 800401c:	20000350 	.word	0x20000350
 8004020:	20018814 	.word	0x20018814
 8004024:	20018884 	.word	0x20018884
 8004028:	42c80000 	.word	0x42c80000
 800402c:	200186d4 	.word	0x200186d4
 8004030:	42c80000 	.word	0x42c80000
 8004034:	40021000 	.word	0x40021000
 8004038:	40020400 	.word	0x40020400

0800403c <reset_tim4_counter>:

void reset_tim4_counter(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
	tim4_counter = 0;
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <reset_tim4_counter+0x14>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
}
 8004046:	bf00      	nop
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000348 	.word	0x20000348

08004054 <get_tim4_counter>:

unsigned int get_tim4_counter()
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
	return tim4_counter;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <get_tim4_counter+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000348 	.word	0x20000348

0800406c <get_count_pulses_mode>:

bool get_count_pulses_mode(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
	return count_pulses_mode;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <get_count_pulses_mode+0x14>)
 8004072:	781b      	ldrb	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000124 	.word	0x20000124
 8004084:	00000000 	.word	0x00000000

08004088 <process_units_rads>:
		process_units_hz,
		process_units_rads
};

void process_units_rads()
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	ed2d 8b02 	vpush	{d8}
 800408e:	b085      	sub	sp, #20
 8004090:	af02      	add	r7, sp, #8

	if(count_pulses_mode)
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <process_units_rads+0x140>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01c      	beq.n	80040d4 <process_units_rads+0x4c>
		speed = (get_n_pulses() * PI * 2.0) / (960.0  * sp_period_s) ;
 800409a:	f7ff f84b 	bl	8003134 <get_n_pulses>
 800409e:	ee07 0a90 	vmov	s15, r0
 80040a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80040a6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80041b0 <process_units_rads+0x128>
 80040aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040ae:	ee37 5b07 	vadd.f64	d5, d7, d7
 80040b2:	4b46      	ldr	r3, [pc, #280]	; (80041cc <process_units_rads+0x144>)
 80040b4:	edd3 7a00 	vldr	s15, [r3]
 80040b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040bc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80041b8 <process_units_rads+0x130>
 80040c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80040c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040cc:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <process_units_rads+0x148>)
 80040ce:	edc3 7a00 	vstr	s15, [r3]
 80040d2:	e01b      	b.n	800410c <process_units_rads+0x84>
	else
	{
		speed = (2.0 * PI) / (get_pulses_tim());
 80040d4:	f7ff f814 	bl	8003100 <get_pulses_tim>
 80040d8:	eef0 7a40 	vmov.f32	s15, s0
 80040dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040e0:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80041c0 <process_units_rads+0x138>
 80040e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040ec:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <process_units_rads+0x148>)
 80040ee:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 80040f2:	f7ff f805 	bl	8003100 <get_pulses_tim>
 80040f6:	eef0 7a40 	vmov.f32	s15, s0
 80040fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004102:	d103      	bne.n	800410c <process_units_rads+0x84>
			speed = 0;
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <process_units_rads+0x148>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <process_units_rads+0x14c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	4930      	ldr	r1, [pc, #192]	; (80041d4 <process_units_rads+0x14c>)
 8004114:	600a      	str	r2, [r1, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <process_units_rads+0x148>)
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	492e      	ldr	r1, [pc, #184]	; (80041d8 <process_units_rads+0x150>)
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	601a      	str	r2, [r3, #0]

	float temp = 0;
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	e018      	b.n	8004164 <process_units_rads+0xdc>
		{
			temp += 0.125 * speed_buffer[i];
 8004132:	edd7 7a01 	vldr	s15, [r7, #4]
 8004136:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800413a:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <process_units_rads+0x150>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800414a:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 800414e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004152:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800415a:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b07      	cmp	r3, #7
 8004168:	dde3      	ble.n	8004132 <process_units_rads+0xaa>
		}
	speed = temp;
 800416a:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <process_units_rads+0x148>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rads %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <process_units_rads+0x154>)
 8004172:	681c      	ldr	r4, [r3, #0]
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <process_units_rads+0x148>)
 8004176:	edd3 7a00 	vldr	s15, [r3]
 800417a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800417e:	f7fe fff7 	bl	8003170 <get_dir>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <process_units_rads+0x140>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	ec53 2b18 	vmov	r2, r3, d8
 8004192:	4913      	ldr	r1, [pc, #76]	; (80041e0 <process_units_rads+0x158>)
 8004194:	4620      	mov	r0, r4
 8004196:	f006 fd03 	bl	800aba0 <siprintf>
	send_UART(message);
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <process_units_rads+0x154>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb3a 	bl	8004818 <send_UART>
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	ecbd 8b02 	vpop	{d8}
 80041ae:	bd90      	pop	{r4, r7, pc}
 80041b0:	f01b866e 	.word	0xf01b866e
 80041b4:	400921f9 	.word	0x400921f9
 80041b8:	00000000 	.word	0x00000000
 80041bc:	408e0000 	.word	0x408e0000
 80041c0:	f01b866e 	.word	0xf01b866e
 80041c4:	401921f9 	.word	0x401921f9
 80041c8:	20000124 	.word	0x20000124
 80041cc:	20018774 	.word	0x20018774
 80041d0:	20018814 	.word	0x20018814
 80041d4:	20000344 	.word	0x20000344
 80041d8:	20018864 	.word	0x20018864
 80041dc:	20018724 	.word	0x20018724
 80041e0:	0800fba4 	.word	0x0800fba4
 80041e4:	00000000 	.word	0x00000000

080041e8 <process_units_rps>:

void process_units_rps()
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	ed2d 8b02 	vpush	{d8}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 80041f2:	4b45      	ldr	r3, [pc, #276]	; (8004308 <process_units_rps+0x120>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <process_units_rps+0x40>
		speed = (get_n_pulses()) / (960.0  * sp_period_s);
 80041fa:	f7fe ff9b 	bl	8003134 <get_n_pulses>
 80041fe:	ee07 0a90 	vmov	s15, r0
 8004202:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <process_units_rps+0x124>)
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004210:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8004300 <process_units_rps+0x118>
 8004214:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004218:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800421c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004220:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <process_units_rps+0x128>)
 8004222:	edc3 7a00 	vstr	s15, [r3]
 8004226:	e017      	b.n	8004258 <process_units_rps+0x70>
	else
	{
		speed = 1.0 / (get_pulses_tim());
 8004228:	f7fe ff6a 	bl	8003100 <get_pulses_tim>
 800422c:	eeb0 7a40 	vmov.f32	s14, s0
 8004230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004238:	4b35      	ldr	r3, [pc, #212]	; (8004310 <process_units_rps+0x128>)
 800423a:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 800423e:	f7fe ff5f 	bl	8003100 <get_pulses_tim>
 8004242:	eef0 7a40 	vmov.f32	s15, s0
 8004246:	eef5 7a40 	vcmp.f32	s15, #0.0
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	d103      	bne.n	8004258 <process_units_rps+0x70>
			speed = 0;
 8004250:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <process_units_rps+0x128>)
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8004258:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <process_units_rps+0x12c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	492d      	ldr	r1, [pc, #180]	; (8004314 <process_units_rps+0x12c>)
 8004260:	600a      	str	r2, [r1, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <process_units_rps+0x128>)
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	492b      	ldr	r1, [pc, #172]	; (8004318 <process_units_rps+0x130>)
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	601a      	str	r2, [r3, #0]

	float temp = 0;
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	e018      	b.n	80042b0 <process_units_rps+0xc8>
		{
			temp += 0.125 * speed_buffer[i];
 800427e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004286:	4a24      	ldr	r2, [pc, #144]	; (8004318 <process_units_rps+0x130>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	edd3 7a00 	vldr	s15, [r3]
 8004292:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004296:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 800429a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800429e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80042a6:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b07      	cmp	r3, #7
 80042b4:	dde3      	ble.n	800427e <process_units_rps+0x96>
		}
	speed = temp;
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <process_units_rps+0x128>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rps %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <process_units_rps+0x134>)
 80042be:	681c      	ldr	r4, [r3, #0]
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <process_units_rps+0x128>)
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80042ca:	f7fe ff51 	bl	8003170 <get_dir>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <process_units_rps+0x120>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	9200      	str	r2, [sp, #0]
 80042da:	ec53 2b18 	vmov	r2, r3, d8
 80042de:	4910      	ldr	r1, [pc, #64]	; (8004320 <process_units_rps+0x138>)
 80042e0:	4620      	mov	r0, r4
 80042e2:	f006 fc5d 	bl	800aba0 <siprintf>
	send_UART(message);
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <process_units_rps+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fa94 	bl	8004818 <send_UART>
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	ecbd 8b02 	vpop	{d8}
 80042fa:	bd90      	pop	{r4, r7, pc}
 80042fc:	f3af 8000 	nop.w
 8004300:	00000000 	.word	0x00000000
 8004304:	408e0000 	.word	0x408e0000
 8004308:	20000124 	.word	0x20000124
 800430c:	20018774 	.word	0x20018774
 8004310:	20018814 	.word	0x20018814
 8004314:	20000344 	.word	0x20000344
 8004318:	20018864 	.word	0x20018864
 800431c:	20018724 	.word	0x20018724
 8004320:	0800fbb8 	.word	0x0800fbb8
 8004324:	00000000 	.word	0x00000000

08004328 <process_units_hz>:

void process_units_hz()
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	ed2d 8b02 	vpush	{d8}
 800432e:	b085      	sub	sp, #20
 8004330:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 8004332:	4b45      	ldr	r3, [pc, #276]	; (8004448 <process_units_hz+0x120>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <process_units_hz+0x40>
		speed = (get_n_pulses()) / (960.0  * sp_period_s);
 800433a:	f7fe fefb 	bl	8003134 <get_n_pulses>
 800433e:	ee07 0a90 	vmov	s15, r0
 8004342:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <process_units_hz+0x124>)
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004350:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8004440 <process_units_hz+0x118>
 8004354:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004358:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800435c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004360:	4b3b      	ldr	r3, [pc, #236]	; (8004450 <process_units_hz+0x128>)
 8004362:	edc3 7a00 	vstr	s15, [r3]
 8004366:	e017      	b.n	8004398 <process_units_hz+0x70>
	else
	{
		speed = (1.0) / (get_pulses_tim());
 8004368:	f7fe feca 	bl	8003100 <get_pulses_tim>
 800436c:	eeb0 7a40 	vmov.f32	s14, s0
 8004370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <process_units_hz+0x128>)
 800437a:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 800437e:	f7fe febf 	bl	8003100 <get_pulses_tim>
 8004382:	eef0 7a40 	vmov.f32	s15, s0
 8004386:	eef5 7a40 	vcmp.f32	s15, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	d103      	bne.n	8004398 <process_units_hz+0x70>
			speed = 0;
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <process_units_hz+0x128>)
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8004398:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <process_units_hz+0x12c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	492d      	ldr	r1, [pc, #180]	; (8004454 <process_units_hz+0x12c>)
 80043a0:	600a      	str	r2, [r1, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	4a2a      	ldr	r2, [pc, #168]	; (8004450 <process_units_hz+0x128>)
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	492b      	ldr	r1, [pc, #172]	; (8004458 <process_units_hz+0x130>)
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	601a      	str	r2, [r3, #0]

	float temp = 0;
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	e018      	b.n	80043f0 <process_units_hz+0xc8>
		{
			temp += 0.125 * speed_buffer[i];
 80043be:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043c6:	4a24      	ldr	r2, [pc, #144]	; (8004458 <process_units_hz+0x130>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	edd3 7a00 	vldr	s15, [r3]
 80043d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043d6:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 80043da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80043de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80043e6:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b07      	cmp	r3, #7
 80043f4:	dde3      	ble.n	80043be <process_units_hz+0x96>
		}
	speed = temp;
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <process_units_hz+0x128>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "hz %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <process_units_hz+0x134>)
 80043fe:	681c      	ldr	r4, [r3, #0]
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <process_units_hz+0x128>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800440a:	f7fe feb1 	bl	8003170 <get_dir>
 800440e:	4603      	mov	r3, r0
 8004410:	461a      	mov	r2, r3
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <process_units_hz+0x120>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	9200      	str	r2, [sp, #0]
 800441a:	ec53 2b18 	vmov	r2, r3, d8
 800441e:	4910      	ldr	r1, [pc, #64]	; (8004460 <process_units_hz+0x138>)
 8004420:	4620      	mov	r0, r4
 8004422:	f006 fbbd 	bl	800aba0 <siprintf>
	send_UART(message);
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <process_units_hz+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9f4 	bl	8004818 <send_UART>
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	ecbd 8b02 	vpop	{d8}
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	f3af 8000 	nop.w
 8004440:	00000000 	.word	0x00000000
 8004444:	408e0000 	.word	0x408e0000
 8004448:	20000124 	.word	0x20000124
 800444c:	20018774 	.word	0x20018774
 8004450:	20018814 	.word	0x20018814
 8004454:	20000344 	.word	0x20000344
 8004458:	20018864 	.word	0x20018864
 800445c:	20018724 	.word	0x20018724
 8004460:	0800fbcc 	.word	0x0800fbcc
 8004464:	00000000 	.word	0x00000000

08004468 <process_units_rpm>:

void process_units_rpm()
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	ed2d 8b02 	vpush	{d8}
 800446e:	b085      	sub	sp, #20
 8004470:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <process_units_rpm+0x130>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01a      	beq.n	80044b0 <process_units_rpm+0x48>
		speed = (get_n_pulses() * 60.0 ) / (960.0 * sp_period_s) ;
 800447a:	f7fe fe5b 	bl	8003134 <get_n_pulses>
 800447e:	ee07 0a90 	vmov	s15, r0
 8004482:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004486:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8004588 <process_units_rpm+0x120>
 800448a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800448e:	4b43      	ldr	r3, [pc, #268]	; (800459c <process_units_rpm+0x134>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004498:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8004590 <process_units_rpm+0x128>
 800449c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80044a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80044a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044a8:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <process_units_rpm+0x138>)
 80044aa:	edc3 7a00 	vstr	s15, [r3]
 80044ae:	e017      	b.n	80044e0 <process_units_rpm+0x78>
	else
	{
		speed = (60.0) / (get_pulses_tim());
 80044b0:	f7fe fe26 	bl	8003100 <get_pulses_tim>
 80044b4:	eeb0 7a40 	vmov.f32	s14, s0
 80044b8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80045a4 <process_units_rpm+0x13c>
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <process_units_rpm+0x138>)
 80044c2:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 80044c6:	f7fe fe1b 	bl	8003100 <get_pulses_tim>
 80044ca:	eef0 7a40 	vmov.f32	s15, s0
 80044ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d103      	bne.n	80044e0 <process_units_rpm+0x78>
			speed = 0;
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <process_units_rpm+0x138>)
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
	}

	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <process_units_rpm+0x140>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	4930      	ldr	r1, [pc, #192]	; (80045a8 <process_units_rpm+0x140>)
 80044e8:	600a      	str	r2, [r1, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <process_units_rpm+0x138>)
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	492e      	ldr	r1, [pc, #184]	; (80045ac <process_units_rpm+0x144>)
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	601a      	str	r2, [r3, #0]

	float temp = 0;
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	e018      	b.n	8004538 <process_units_rpm+0xd0>
		{
			temp += 0.125 * speed_buffer[i];
 8004506:	edd7 7a01 	vldr	s15, [r7, #4]
 800450a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800450e:	4a27      	ldr	r2, [pc, #156]	; (80045ac <process_units_rpm+0x144>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800451e:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8004522:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800452a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800452e:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b07      	cmp	r3, #7
 800453c:	dde3      	ble.n	8004506 <process_units_rpm+0x9e>
		}
	speed = temp;
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <process_units_rpm+0x138>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rpm %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <process_units_rpm+0x148>)
 8004546:	681c      	ldr	r4, [r3, #0]
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <process_units_rpm+0x138>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004552:	f7fe fe0d 	bl	8003170 <get_dir>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <process_units_rpm+0x130>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	9200      	str	r2, [sp, #0]
 8004562:	ec53 2b18 	vmov	r2, r3, d8
 8004566:	4913      	ldr	r1, [pc, #76]	; (80045b4 <process_units_rpm+0x14c>)
 8004568:	4620      	mov	r0, r4
 800456a:	f006 fb19 	bl	800aba0 <siprintf>
	send_UART(message);
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <process_units_rpm+0x148>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f950 	bl	8004818 <send_UART>
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	ecbd 8b02 	vpop	{d8}
 8004582:	bd90      	pop	{r4, r7, pc}
 8004584:	f3af 8000 	nop.w
 8004588:	00000000 	.word	0x00000000
 800458c:	404e0000 	.word	0x404e0000
 8004590:	00000000 	.word	0x00000000
 8004594:	408e0000 	.word	0x408e0000
 8004598:	20000124 	.word	0x20000124
 800459c:	20018774 	.word	0x20018774
 80045a0:	20018814 	.word	0x20018814
 80045a4:	42700000 	.word	0x42700000
 80045a8:	20000344 	.word	0x20000344
 80045ac:	20018864 	.word	0x20018864
 80045b0:	20018724 	.word	0x20018724
 80045b4:	0800fbdc 	.word	0x0800fbdc

080045b8 <set_units>:

void set_units(char s_units[5])
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	if(strcmp(s_units,"hz") == 0)
 80045c0:	4917      	ldr	r1, [pc, #92]	; (8004620 <set_units+0x68>)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fb fe3c 	bl	8000240 <strcmp>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <set_units+0x1e>
		units = u_hz;
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <set_units+0x6c>)
 80045d0:	2202      	movs	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]
		units = u_rps;
	else if(strcmp(s_units,"rads") == 0)
		units = u_rads;
	else if(strcmp(s_units,"rpm") == 0)
		units = u_rpm;
}
 80045d4:	e01f      	b.n	8004616 <set_units+0x5e>
	else if(strcmp(s_units,"rps") == 0)
 80045d6:	4914      	ldr	r1, [pc, #80]	; (8004628 <set_units+0x70>)
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fb fe31 	bl	8000240 <strcmp>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <set_units+0x34>
		units = u_rps;
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <set_units+0x6c>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	e014      	b.n	8004616 <set_units+0x5e>
	else if(strcmp(s_units,"rads") == 0)
 80045ec:	490f      	ldr	r1, [pc, #60]	; (800462c <set_units+0x74>)
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fb fe26 	bl	8000240 <strcmp>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <set_units+0x4a>
		units = u_rads;
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <set_units+0x6c>)
 80045fc:	2203      	movs	r2, #3
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	e009      	b.n	8004616 <set_units+0x5e>
	else if(strcmp(s_units,"rpm") == 0)
 8004602:	490b      	ldr	r1, [pc, #44]	; (8004630 <set_units+0x78>)
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fb fe1b 	bl	8000240 <strcmp>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <set_units+0x5e>
		units = u_rpm;
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <set_units+0x6c>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	0800fbf0 	.word	0x0800fbf0
 8004624:	2000034c 	.word	0x2000034c
 8004628:	0800fbf4 	.word	0x0800fbf4
 800462c:	0800fbf8 	.word	0x0800fbf8
 8004630:	0800fc00 	.word	0x0800fc00

08004634 <set_kp>:

void set_kp(unsigned int kp1)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	kp = kp1;
 800463c:	4a04      	ldr	r2, [pc, #16]	; (8004650 <set_kp+0x1c>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000350 	.word	0x20000350

08004654 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <MX_USART3_UART_Init+0x74>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <MX_USART3_UART_Init+0x78>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8004664:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <MX_USART3_UART_Init+0x7c>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800466a:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <MX_USART3_UART_Init+0x80>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <MX_USART3_UART_Init+0x84>)
 8004672:	220d      	movs	r2, #13
 8004674:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <MX_USART3_UART_Init+0x88>)
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <MX_USART3_UART_Init+0x8c>)
 800467a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 800467c:	4b17      	ldr	r3, [pc, #92]	; (80046dc <MX_USART3_UART_Init+0x88>)
 800467e:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <MX_USART3_UART_Init+0x90>)
 8004680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <MX_USART3_UART_Init+0x88>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <MX_USART3_UART_Init+0x88>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <MX_USART3_UART_Init+0x88>)
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004694:	4b11      	ldr	r3, [pc, #68]	; (80046dc <MX_USART3_UART_Init+0x88>)
 8004696:	220c      	movs	r2, #12
 8004698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <MX_USART3_UART_Init+0x88>)
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <MX_USART3_UART_Init+0x88>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <MX_USART3_UART_Init+0x88>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <MX_USART3_UART_Init+0x88>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046b2:	480a      	ldr	r0, [pc, #40]	; (80046dc <MX_USART3_UART_Init+0x88>)
 80046b4:	f004 f854 	bl	8008760 <HAL_UART_Init>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 80046be:	f7fe fe35 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200104b0 	.word	0x200104b0
 80046cc:	200146b4 	.word	0x200146b4
 80046d0:	200104ac 	.word	0x200104ac
 80046d4:	200146b8 	.word	0x200146b8
 80046d8:	200104b4 	.word	0x200104b4
 80046dc:	20018888 	.word	0x20018888
 80046e0:	40004800 	.word	0x40004800
 80046e4:	001ab3f0 	.word	0x001ab3f0

080046e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0ae      	sub	sp, #184	; 0xb8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	2290      	movs	r2, #144	; 0x90
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fbf3 	bl	8009ef4 <memset>
  if(uartHandle->Instance==USART3)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_UART_MspInit+0xc4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d144      	bne.n	80047a2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800471c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800471e:	2300      	movs	r3, #0
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	4618      	mov	r0, r3
 8004728:	f002 f8b2 	bl	8006890 <HAL_RCCEx_PeriphCLKConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004732:	f7fe fdfb 	bl	800332c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 8004754:	f043 0308 	orr.w	r3, r3, #8
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_UART_MspInit+0xc8>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800476a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476e:	2302      	movs	r3, #2
 8004770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004780:	2307      	movs	r3, #7
 8004782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004786:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800478a:	4619      	mov	r1, r3
 800478c:	4809      	ldr	r0, [pc, #36]	; (80047b4 <HAL_UART_MspInit+0xcc>)
 800478e:	f001 f96f 	bl	8005a70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2102      	movs	r1, #2
 8004796:	2027      	movs	r0, #39	; 0x27
 8004798:	f000 ffab 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800479c:	2027      	movs	r0, #39	; 0x27
 800479e:	f000 ffc4 	bl	800572a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047a2:	bf00      	nop
 80047a4:	37b8      	adds	r7, #184	; 0xb8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40004800 	.word	0x40004800
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40020c00 	.word	0x40020c00

080047b8 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
	return flagCPP;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <has_message_from_UART+0x14>)
 80047be:	781b      	ldrb	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	200104b0 	.word	0x200104b0

080047d0 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
	return flagCPE;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <is_transmitting_to_UART+0x14>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	200146b4 	.word	0x200146b4

080047e8 <reset_UART>:

void reset_UART()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80047ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f0:	2100      	movs	r1, #0
 80047f2:	4806      	ldr	r0, [pc, #24]	; (800480c <reset_UART+0x24>)
 80047f4:	f005 fb7e 	bl	8009ef4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80047f8:	2201      	movs	r2, #1
 80047fa:	4904      	ldr	r1, [pc, #16]	; (800480c <reset_UART+0x24>)
 80047fc:	4804      	ldr	r0, [pc, #16]	; (8004810 <reset_UART+0x28>)
 80047fe:	f004 f86b 	bl	80088d8 <HAL_UART_Receive_IT>
	flagCPP = false;
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <reset_UART+0x2c>)
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
}
 8004808:	bf00      	nop
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000035c 	.word	0x2000035c
 8004810:	20018888 	.word	0x20018888
 8004814:	200104b0 	.word	0x200104b0

08004818 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8004820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	480d      	ldr	r0, [pc, #52]	; (800485c <send_UART+0x44>)
 8004828:	f006 fa65 	bl	800acf6 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 800482c:	480b      	ldr	r0, [pc, #44]	; (800485c <send_UART+0x44>)
 800482e:	f7fb fd11 	bl	8000254 <strlen>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <send_UART+0x44>)
 8004838:	4413      	add	r3, r2
 800483a:	4909      	ldr	r1, [pc, #36]	; (8004860 <send_UART+0x48>)
 800483c:	461a      	mov	r2, r3
 800483e:	460b      	mov	r3, r1
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <send_UART+0x4c>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800484a:	2201      	movs	r2, #1
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <send_UART+0x44>)
 800484e:	4806      	ldr	r0, [pc, #24]	; (8004868 <send_UART+0x50>)
 8004850:	f003 ffd4 	bl	80087fc <HAL_UART_Transmit_IT>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200104b4 	.word	0x200104b4
 8004860:	0800fc04 	.word	0x0800fc04
 8004864:	200146b4 	.word	0x200146b4
 8004868:	20018888 	.word	0x20018888

0800486c <read_UART>:

void read_UART(char* msg_to_read)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8004874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <read_UART+0x1c>)
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f006 fa3b 	bl	800acf6 <strncpy>
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	2000035c 	.word	0x2000035c

0800488c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8004894:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_UART_RxCpltCallback+0xc4>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d154      	bne.n	8004946 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 800489c:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	2b0d      	cmp	r3, #13
 80048a6:	d00b      	beq.n	80048c0 <HAL_UART_RxCpltCallback+0x34>
 80048a8:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	2b5c      	cmp	r3, #92	; 0x5c
 80048b2:	d005      	beq.n	80048c0 <HAL_UART_RxCpltCallback+0x34>
 80048b4:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	2b2f      	cmp	r3, #47	; 0x2f
 80048be:	d106      	bne.n	80048ce <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_UART_RxCpltCallback+0xc4>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e03c      	b.n	8004948 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80048ce:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d10f      	bne.n	80048fa <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 80048da:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e01c      	b.n	8004928 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 80048ee:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3b02      	subs	r3, #2
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e016      	b.n	8004928 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80048fa:	4b16      	ldr	r3, [pc, #88]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	2b1b      	cmp	r3, #27
 8004904:	d104      	bne.n	8004910 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e00b      	b.n	8004928 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a10      	ldr	r2, [pc, #64]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	2b24      	cmp	r3, #36	; 0x24
 800491a:	d105      	bne.n	8004928 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 8004924:	2224      	movs	r2, #36	; 0x24
 8004926:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <HAL_UART_RxCpltCallback+0xc8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a08      	ldr	r2, [pc, #32]	; (8004958 <HAL_UART_RxCpltCallback+0xcc>)
 8004938:	4413      	add	r3, r2
 800493a:	2201      	movs	r2, #1
 800493c:	4619      	mov	r1, r3
 800493e:	4807      	ldr	r0, [pc, #28]	; (800495c <HAL_UART_RxCpltCallback+0xd0>)
 8004940:	f003 ffca 	bl	80088d8 <HAL_UART_Receive_IT>
 8004944:	e000      	b.n	8004948 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8004946:	bf00      	nop
	}
}
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200104b0 	.word	0x200104b0
 8004954:	200104ac 	.word	0x200104ac
 8004958:	2000035c 	.word	0x2000035c
 800495c:	20018888 	.word	0x20018888

08004960 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_UART_TxCpltCallback+0x64>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f083 0301 	eor.w	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d122      	bne.n	80049bc <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <HAL_UART_TxCpltCallback+0x6c>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	2b0d      	cmp	r3, #13
 8004980:	d10d      	bne.n	800499e <HAL_UART_TxCpltCallback+0x3e>
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3b01      	subs	r3, #1
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <HAL_UART_TxCpltCallback+0x6c>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	2b0a      	cmp	r3, #10
 800498e:	d006      	beq.n	800499e <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_UART_TxCpltCallback+0x64>)
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e00f      	b.n	80049be <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_UART_TxCpltCallback+0x68>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_UART_TxCpltCallback+0x6c>)
 80049ae:	4413      	add	r3, r2
 80049b0:	2201      	movs	r2, #1
 80049b2:	4619      	mov	r1, r3
 80049b4:	4806      	ldr	r0, [pc, #24]	; (80049d0 <HAL_UART_TxCpltCallback+0x70>)
 80049b6:	f003 ff21 	bl	80087fc <HAL_UART_Transmit_IT>
 80049ba:	e000      	b.n	80049be <HAL_UART_TxCpltCallback+0x5e>
		return;
 80049bc:	bf00      	nop
}
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200146b4 	.word	0x200146b4
 80049c8:	200146b8 	.word	0x200146b8
 80049cc:	200104b4 	.word	0x200104b4
 80049d0:	20018888 	.word	0x20018888

080049d4 <Reset_Handler>:
 80049d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a0c <LoopFillZerobss+0x12>
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <LoopFillZerobss+0x16>)
 80049da:	490e      	ldr	r1, [pc, #56]	; (8004a14 <LoopFillZerobss+0x1a>)
 80049dc:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <LoopFillZerobss+0x1e>)
 80049de:	2300      	movs	r3, #0
 80049e0:	e002      	b.n	80049e8 <LoopCopyDataInit>

080049e2 <CopyDataInit>:
 80049e2:	58d4      	ldr	r4, [r2, r3]
 80049e4:	50c4      	str	r4, [r0, r3]
 80049e6:	3304      	adds	r3, #4

080049e8 <LoopCopyDataInit>:
 80049e8:	18c4      	adds	r4, r0, r3
 80049ea:	428c      	cmp	r4, r1
 80049ec:	d3f9      	bcc.n	80049e2 <CopyDataInit>
 80049ee:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <LoopFillZerobss+0x22>)
 80049f0:	4c0b      	ldr	r4, [pc, #44]	; (8004a20 <LoopFillZerobss+0x26>)
 80049f2:	2300      	movs	r3, #0
 80049f4:	e001      	b.n	80049fa <LoopFillZerobss>

080049f6 <FillZerobss>:
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	3204      	adds	r2, #4

080049fa <LoopFillZerobss>:
 80049fa:	42a2      	cmp	r2, r4
 80049fc:	d3fb      	bcc.n	80049f6 <FillZerobss>
 80049fe:	f7fe fdf7 	bl	80035f0 <SystemInit>
 8004a02:	f005 fa53 	bl	8009eac <__libc_init_array>
 8004a06:	f7fe fbbf 	bl	8003188 <main>
 8004a0a:	4770      	bx	lr
 8004a0c:	20080000 	.word	0x20080000
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000304 	.word	0x20000304
 8004a18:	08010104 	.word	0x08010104
 8004a1c:	20000304 	.word	0x20000304
 8004a20:	20018920 	.word	0x20018920

08004a24 <CAN1_RX0_IRQHandler>:
 8004a24:	e7fe      	b.n	8004a24 <CAN1_RX0_IRQHandler>

08004a26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f000 fe56 	bl	80056dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f000 f805 	bl	8004a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a36:	f7fe fc7f 	bl	8003338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_InitTick+0x54>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_InitTick+0x58>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fe7f 	bl	8005762 <HAL_SYSTICK_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d80a      	bhi.n	8004a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f000 fe39 	bl	80056f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <HAL_InitTick+0x5c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000110 	.word	0x20000110
 8004a98:	2000012c 	.word	0x2000012c
 8004a9c:	20000128 	.word	0x20000128

08004aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_IncTick+0x20>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_IncTick+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <HAL_IncTick+0x24>)
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	2000012c 	.word	0x2000012c
 8004ac4:	2001890c 	.word	0x2001890c

08004ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_GetTick+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2001890c 	.word	0x2001890c

08004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff ffee 	bl	8004ac8 <HAL_GetTick>
 8004aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d005      	beq.n	8004b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_Delay+0x44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b06:	bf00      	nop
 8004b08:	f7ff ffde 	bl	8004ac8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8f7      	bhi.n	8004b08 <HAL_Delay+0x28>
  {
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	2000012c 	.word	0x2000012c

08004b28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e031      	b.n	8004ba2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f808 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_ADC_Init+0x84>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fbb8 	bl	80052ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
 8004b92:	e001      	b.n	8004b98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	ffffeefd 	.word	0xffffeefd

08004bb0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_Start_IT+0x1a>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0b5      	b.n	8004d36 <HAL_ADC_Start_IT+0x186>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d018      	beq.n	8004c12 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004bf0:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_ADC_Start_IT+0x194>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a54      	ldr	r2, [pc, #336]	; (8004d48 <HAL_ADC_Start_IT+0x198>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0c9a      	lsrs	r2, r3, #18
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c04:	e002      	b.n	8004c0c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f9      	bne.n	8004c06 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d17d      	bne.n	8004d1c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c24:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <HAL_ADC_Start_IT+0x19c>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d106      	bne.n	8004c6a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	f023 0206 	bic.w	r2, r3, #6
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
 8004c68:	e002      	b.n	8004c70 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c80:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_ADC_Start_IT+0x1a0>)
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_ADC_Start_IT+0x1a4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d143      	bne.n	8004d34 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	e03a      	b.n	8004d34 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_ADC_Start_IT+0x1a8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10e      	bne.n	8004ce6 <HAL_ADC_Start_IT+0x136>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ce4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_ADC_Start_IT+0x1a4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d120      	bne.n	8004d34 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_ADC_Start_IT+0x1ac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d11b      	bne.n	8004d34 <HAL_ADC_Start_IT+0x184>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d114      	bne.n	8004d34 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e00b      	b.n	8004d34 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f043 0201 	orr.w	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000110 	.word	0x20000110
 8004d48:	431bde83 	.word	0x431bde83
 8004d4c:	fffff8fe 	.word	0xfffff8fe
 8004d50:	04000020 	.word	0x04000020
 8004d54:	40012300 	.word	0x40012300
 8004d58:	40012000 	.word	0x40012000
 8004d5c:	40012200 	.word	0x40012200

08004d60 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_Stop_IT+0x16>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e027      	b.n	8004dc6 <HAL_ADC_Stop_IT+0x66>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10f      	bne.n	8004dbc <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_ADC_Stop_IT+0x74>)
 8004da8:	400b      	ands	r3, r1
 8004daa:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_ADC_Stop_IT+0x78>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	fbffffdf 	.word	0xfbffffdf
 8004dd8:	ffffeefe 	.word	0xffffeefe

08004ddc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d049      	beq.n	8004ea6 <HAL_ADC_IRQHandler+0xca>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d046      	beq.n	8004ea6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d12b      	bne.n	8004e96 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d127      	bne.n	8004e96 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d119      	bne.n	8004e96 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0220 	bic.w	r2, r2, #32
 8004e70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fb ff3a 	bl	8000d10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0212 	mvn.w	r2, #18
 8004ea4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d057      	beq.n	8004f6c <HAL_ADC_IRQHandler+0x190>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d054      	beq.n	8004f6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d139      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d12b      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d124      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11d      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d119      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f043 0201 	orr.w	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fabf 	bl	80054e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 020c 	mvn.w	r2, #12
 8004f6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <HAL_ADC_IRQHandler+0x1d6>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d014      	beq.n	8004fb2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10d      	bne.n	8004fb2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f837 	bl	8005016 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0201 	mvn.w	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_ADC_IRQHandler+0x218>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f06f 0220 	mvn.w	r2, #32
 8004fe2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f820 	bl	800502a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0220 	mvn.w	r2, #32
 8004ff2:	601a      	str	r2, [r3, #0]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_ADC_ConfigChannel+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e136      	b.n	80052ca <HAL_ADC_ConfigChannel+0x28a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d93a      	bls.n	80050e2 <HAL_ADC_ConfigChannel+0xa2>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005074:	d035      	beq.n	80050e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68d9      	ldr	r1, [r3, #12]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	3b1e      	subs	r3, #30
 800508c:	2207      	movs	r2, #7
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	400a      	ands	r2, r1
 800509a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a8d      	ldr	r2, [pc, #564]	; (80052d8 <HAL_ADC_ConfigChannel+0x298>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10a      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050ba:	e035      	b.n	8005128 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68d9      	ldr	r1, [r3, #12]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4618      	mov	r0, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4403      	add	r3, r0
 80050d4:	3b1e      	subs	r3, #30
 80050d6:	409a      	lsls	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050e0:	e022      	b.n	8005128 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6919      	ldr	r1, [r3, #16]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	2207      	movs	r2, #7
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43da      	mvns	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	400a      	ands	r2, r1
 8005104:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6919      	ldr	r1, [r3, #16]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	4618      	mov	r0, r3
 8005118:	4603      	mov	r3, r0
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4403      	add	r3, r0
 800511e:	409a      	lsls	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b06      	cmp	r3, #6
 800512e:	d824      	bhi.n	800517a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3b05      	subs	r3, #5
 8005142:	221f      	movs	r2, #31
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	400a      	ands	r2, r1
 8005150:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	4618      	mov	r0, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	3b05      	subs	r3, #5
 800516c:	fa00 f203 	lsl.w	r2, r0, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	635a      	str	r2, [r3, #52]	; 0x34
 8005178:	e04c      	b.n	8005214 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d824      	bhi.n	80051cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	3b23      	subs	r3, #35	; 0x23
 8005194:	221f      	movs	r2, #31
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	400a      	ands	r2, r1
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4618      	mov	r0, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	3b23      	subs	r3, #35	; 0x23
 80051be:	fa00 f203 	lsl.w	r2, r0, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ca:	e023      	b.n	8005214 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	3b41      	subs	r3, #65	; 0x41
 80051de:	221f      	movs	r2, #31
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43da      	mvns	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	400a      	ands	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4618      	mov	r0, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	3b41      	subs	r3, #65	; 0x41
 8005208:	fa00 f203 	lsl.w	r2, r0, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a30      	ldr	r2, [pc, #192]	; (80052dc <HAL_ADC_ConfigChannel+0x29c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10a      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x1f4>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005226:	d105      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005228:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800522e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005232:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a28      	ldr	r2, [pc, #160]	; (80052dc <HAL_ADC_ConfigChannel+0x29c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10f      	bne.n	800525e <HAL_ADC_ConfigChannel+0x21e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b12      	cmp	r3, #18
 8005244:	d10b      	bne.n	800525e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800524c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005250:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_ADC_ConfigChannel+0x29c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d12b      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x280>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <HAL_ADC_ConfigChannel+0x298>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <HAL_ADC_ConfigChannel+0x23a>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b11      	cmp	r3, #17
 8005278:	d122      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005280:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005284:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005286:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800528c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005290:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <HAL_ADC_ConfigChannel+0x298>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d111      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_ADC_ConfigChannel+0x2a4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <HAL_ADC_ConfigChannel+0x2a8>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0c9a      	lsrs	r2, r3, #18
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052b2:	e002      	b.n	80052ba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f9      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	10000012 	.word	0x10000012
 80052dc:	40012000 	.word	0x40012000
 80052e0:	40012300 	.word	0x40012300
 80052e4:	20000110 	.word	0x20000110
 80052e8:	431bde83 	.word	0x431bde83

080052ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80052f4:	4b78      	ldr	r3, [pc, #480]	; (80054d8 <ADC_Init+0x1ec>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4a77      	ldr	r2, [pc, #476]	; (80054d8 <ADC_Init+0x1ec>)
 80052fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80052fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005300:	4b75      	ldr	r3, [pc, #468]	; (80054d8 <ADC_Init+0x1ec>)
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4973      	ldr	r1, [pc, #460]	; (80054d8 <ADC_Init+0x1ec>)
 800530a:	4313      	orrs	r3, r2
 800530c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	4a58      	ldr	r2, [pc, #352]	; (80054dc <ADC_Init+0x1f0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800538e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6899      	ldr	r1, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e00f      	b.n	80053e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0202 	bic.w	r2, r2, #2
 80053f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6899      	ldr	r1, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	005a      	lsls	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	035a      	lsls	r2, r3, #13
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e007      	b.n	800545c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	3b01      	subs	r3, #1
 8005478:	051a      	lsls	r2, r3, #20
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549e:	025a      	lsls	r2, r3, #9
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	029a      	lsls	r2, r3, #10
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40012300 	.word	0x40012300
 80054dc:	0f000001 	.word	0x0f000001

080054e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <__NVIC_SetPriorityGrouping+0x40>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 800551e:	4313      	orrs	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <__NVIC_SetPriorityGrouping+0x40>)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	60d3      	str	r3, [r2, #12]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	05fa0000 	.word	0x05fa0000

0800553c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__NVIC_GetPriorityGrouping+0x18>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 0307 	and.w	r3, r3, #7
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	2b00      	cmp	r3, #0
 8005568:	db0b      	blt.n	8005582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	f003 021f 	and.w	r2, r3, #31
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <__NVIC_EnableIRQ+0x38>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2001      	movs	r0, #1
 800557a:	fa00 f202 	lsl.w	r2, r0, r2
 800557e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e100 	.word	0xe000e100

08005594 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db12      	blt.n	80055cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 021f 	and.w	r2, r3, #31
 80055ac:	490a      	ldr	r1, [pc, #40]	; (80055d8 <__NVIC_DisableIRQ+0x44>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2001      	movs	r0, #1
 80055b6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ba:	3320      	adds	r3, #32
 80055bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055c0:	f3bf 8f4f 	dsb	sy
}
 80055c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80055c6:	f3bf 8f6f 	isb	sy
}
 80055ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	e000e100 	.word	0xe000e100

080055dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	6039      	str	r1, [r7, #0]
 80055e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	db0a      	blt.n	8005606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	490c      	ldr	r1, [pc, #48]	; (8005628 <__NVIC_SetPriority+0x4c>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	440b      	add	r3, r1
 8005600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005604:	e00a      	b.n	800561c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4908      	ldr	r1, [pc, #32]	; (800562c <__NVIC_SetPriority+0x50>)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3b04      	subs	r3, #4
 8005614:	0112      	lsls	r2, r2, #4
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	440b      	add	r3, r1
 800561a:	761a      	strb	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	e000e100 	.word	0xe000e100
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f1c3 0307 	rsb	r3, r3, #7
 800564a:	2b04      	cmp	r3, #4
 800564c:	bf28      	it	cs
 800564e:	2304      	movcs	r3, #4
 8005650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
 8005656:	2b06      	cmp	r3, #6
 8005658:	d902      	bls.n	8005660 <NVIC_EncodePriority+0x30>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3b03      	subs	r3, #3
 800565e:	e000      	b.n	8005662 <NVIC_EncodePriority+0x32>
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	401a      	ands	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005678:	f04f 31ff 	mov.w	r1, #4294967295
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43d9      	mvns	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005688:	4313      	orrs	r3, r2
         );
}
 800568a:	4618      	mov	r0, r3
 800568c:	3724      	adds	r7, #36	; 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056a8:	d301      	bcc.n	80056ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056aa:	2301      	movs	r3, #1
 80056ac:	e00f      	b.n	80056ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ae:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <SysTick_Config+0x40>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b6:	210f      	movs	r1, #15
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	f7ff ff8e 	bl	80055dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <SysTick_Config+0x40>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c6:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <SysTick_Config+0x40>)
 80056c8:	2207      	movs	r2, #7
 80056ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	e000e010 	.word	0xe000e010

080056dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff05 	bl	80054f4 <__NVIC_SetPriorityGrouping>
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	4603      	mov	r3, r0
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005704:	f7ff ff1a 	bl	800553c <__NVIC_GetPriorityGrouping>
 8005708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f7ff ff8e 	bl	8005630 <NVIC_EncodePriority>
 8005714:	4602      	mov	r2, r0
 8005716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff5d 	bl	80055dc <__NVIC_SetPriority>
}
 8005722:	bf00      	nop
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	4603      	mov	r3, r0
 8005732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff0d 	bl	8005558 <__NVIC_EnableIRQ>
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ff1d 	bl	8005594 <__NVIC_DisableIRQ>
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff ff94 	bl	8005698 <SysTick_Config>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e014      	b.n	80057b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	791b      	ldrb	r3, [r3, #4]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d105      	bne.n	80057a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fd fb41 	bl	8002e24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	795b      	ldrb	r3, [r3, #5]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_DAC_Start+0x16>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e040      	b.n	8005856 <HAL_DAC_Start+0x98>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10f      	bne.n	800581e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005808:	2b3c      	cmp	r3, #60	; 0x3c
 800580a:	d11d      	bne.n	8005848 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	e014      	b.n	8005848 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	213c      	movs	r1, #60	; 0x3c
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	429a      	cmp	r2, r3
 8005836:	d107      	bne.n	8005848 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0202 	orr.w	r2, r2, #2
 8005846:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005862:	b480      	push	{r7}
 8005864:	b087      	sub	sp, #28
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	3308      	adds	r3, #8
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e004      	b.n	8005896 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	3314      	adds	r3, #20
 8005894:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	461a      	mov	r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	795b      	ldrb	r3, [r3, #5]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_DAC_ConfigChannel+0x18>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e03c      	b.n	800593e <HAL_DAC_ConfigChannel+0x92>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2202      	movs	r2, #2
 80058ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4013      	ands	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	22c0      	movs	r2, #192	; 0xc0
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43da      	mvns	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	400a      	ands	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005958:	f7ff f8b6 	bl	8004ac8 <HAL_GetTick>
 800595c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d008      	beq.n	800597c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2280      	movs	r2, #128	; 0x80
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e052      	b.n	8005a22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0216 	bic.w	r2, r2, #22
 800598a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800599a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <HAL_DMA_Abort+0x62>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0208 	bic.w	r2, r2, #8
 80059ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059cc:	e013      	b.n	80059f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ce:	f7ff f87b 	bl	8004ac8 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d90c      	bls.n	80059f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2203      	movs	r2, #3
 80059e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e015      	b.n	8005a22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e4      	bne.n	80059ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	223f      	movs	r2, #63	; 0x3f
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e00c      	b.n	8005a62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2205      	movs	r2, #5
 8005a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e175      	b.n	8005d7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a90:	2201      	movs	r2, #1
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	f040 8164 	bne.w	8005d76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d005      	beq.n	8005ac6 <HAL_GPIO_Init+0x56>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d130      	bne.n	8005b28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005afc:	2201      	movs	r2, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 0201 	and.w	r2, r3, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d017      	beq.n	8005b64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	2203      	movs	r2, #3
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	43db      	mvns	r3, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d123      	bne.n	8005bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	08da      	lsrs	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3208      	adds	r2, #8
 8005b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	220f      	movs	r2, #15
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	08da      	lsrs	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3208      	adds	r2, #8
 8005bb2:	69b9      	ldr	r1, [r7, #24]
 8005bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0203 	and.w	r2, r3, #3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80be 	beq.w	8005d76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfa:	4b66      	ldr	r3, [pc, #408]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c04:	6453      	str	r3, [r2, #68]	; 0x44
 8005c06:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c12:	4a61      	ldr	r2, [pc, #388]	; (8005d98 <HAL_GPIO_Init+0x328>)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	220f      	movs	r2, #15
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a58      	ldr	r2, [pc, #352]	; (8005d9c <HAL_GPIO_Init+0x32c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d037      	beq.n	8005cae <HAL_GPIO_Init+0x23e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a57      	ldr	r2, [pc, #348]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d031      	beq.n	8005caa <HAL_GPIO_Init+0x23a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a56      	ldr	r2, [pc, #344]	; (8005da4 <HAL_GPIO_Init+0x334>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02b      	beq.n	8005ca6 <HAL_GPIO_Init+0x236>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a55      	ldr	r2, [pc, #340]	; (8005da8 <HAL_GPIO_Init+0x338>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d025      	beq.n	8005ca2 <HAL_GPIO_Init+0x232>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a54      	ldr	r2, [pc, #336]	; (8005dac <HAL_GPIO_Init+0x33c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01f      	beq.n	8005c9e <HAL_GPIO_Init+0x22e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a53      	ldr	r2, [pc, #332]	; (8005db0 <HAL_GPIO_Init+0x340>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d019      	beq.n	8005c9a <HAL_GPIO_Init+0x22a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a52      	ldr	r2, [pc, #328]	; (8005db4 <HAL_GPIO_Init+0x344>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_GPIO_Init+0x226>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a51      	ldr	r2, [pc, #324]	; (8005db8 <HAL_GPIO_Init+0x348>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00d      	beq.n	8005c92 <HAL_GPIO_Init+0x222>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a50      	ldr	r2, [pc, #320]	; (8005dbc <HAL_GPIO_Init+0x34c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <HAL_GPIO_Init+0x21e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a4f      	ldr	r2, [pc, #316]	; (8005dc0 <HAL_GPIO_Init+0x350>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d101      	bne.n	8005c8a <HAL_GPIO_Init+0x21a>
 8005c86:	2309      	movs	r3, #9
 8005c88:	e012      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	e010      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	e00e      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c92:	2307      	movs	r3, #7
 8005c94:	e00c      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c96:	2306      	movs	r3, #6
 8005c98:	e00a      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c9a:	2305      	movs	r3, #5
 8005c9c:	e008      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	e006      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e004      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e002      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_GPIO_Init+0x240>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f002 0203 	and.w	r2, r2, #3
 8005cb6:	0092      	lsls	r2, r2, #2
 8005cb8:	4093      	lsls	r3, r2
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cc0:	4935      	ldr	r1, [pc, #212]	; (8005d98 <HAL_GPIO_Init+0x328>)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cce:	4b3d      	ldr	r3, [pc, #244]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cf8:	4b32      	ldr	r3, [pc, #200]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d22:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d46:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d70:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <HAL_GPIO_Init+0x354>)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	f67f ae86 	bls.w	8005a90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3724      	adds	r7, #36	; 0x24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40013800 	.word	0x40013800
 8005d9c:	40020000 	.word	0x40020000
 8005da0:	40020400 	.word	0x40020400
 8005da4:	40020800 	.word	0x40020800
 8005da8:	40020c00 	.word	0x40020c00
 8005dac:	40021000 	.word	0x40021000
 8005db0:	40021400 	.word	0x40021400
 8005db4:	40021800 	.word	0x40021800
 8005db8:	40021c00 	.word	0x40021c00
 8005dbc:	40022000 	.word	0x40022000
 8005dc0:	40022400 	.word	0x40022400
 8005dc4:	40013c00 	.word	0x40013c00

08005dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	887b      	ldrh	r3, [r7, #2]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	e001      	b.n	8005dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
 8005e04:	4613      	mov	r3, r2
 8005e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e08:	787b      	ldrb	r3, [r7, #1]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e0e:	887a      	ldrh	r2, [r7, #2]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e14:	e003      	b.n	8005e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e16:	887b      	ldrh	r3, [r7, #2]
 8005e18:	041a      	lsls	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	619a      	str	r2, [r3, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e3c:	887a      	ldrh	r2, [r7, #2]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4013      	ands	r3, r2
 8005e42:	041a      	lsls	r2, r3, #16
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	43d9      	mvns	r1, r3
 8005e48:	887b      	ldrh	r3, [r7, #2]
 8005e4a:	400b      	ands	r3, r1
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	619a      	str	r2, [r3, #24]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e6a:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e76:	4a05      	ldr	r2, [pc, #20]	; (8005e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd f8fa 	bl	8003078 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40013c00 	.word	0x40013c00

08005e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ebe:	f7fe fe03 	bl	8004ac8 <HAL_GetTick>
 8005ec2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ec4:	e009      	b.n	8005eda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ec6:	f7fe fdff 	bl	8004ac8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed4:	d901      	bls.n	8005eda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e022      	b.n	8005f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d1ee      	bne.n	8005ec6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ef4:	f7fe fde8 	bl	8004ac8 <HAL_GetTick>
 8005ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005efa:	e009      	b.n	8005f10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005efc:	f7fe fde4 	bl	8004ac8 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f0a:	d901      	bls.n	8005f10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e007      	b.n	8005f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f1c:	d1ee      	bne.n	8005efc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40007000 	.word	0x40007000

08005f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e29b      	b.n	800647e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8087 	beq.w	8006062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f54:	4b96      	ldr	r3, [pc, #600]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 030c 	and.w	r3, r3, #12
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d00c      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f60:	4b93      	ldr	r3, [pc, #588]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 030c 	and.w	r3, r3, #12
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d112      	bne.n	8005f92 <HAL_RCC_OscConfig+0x62>
 8005f6c:	4b90      	ldr	r3, [pc, #576]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7a:	4b8d      	ldr	r3, [pc, #564]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d06c      	beq.n	8006060 <HAL_RCC_OscConfig+0x130>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d168      	bne.n	8006060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e275      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9a:	d106      	bne.n	8005faa <HAL_RCC_OscConfig+0x7a>
 8005f9c:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a83      	ldr	r2, [pc, #524]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e02e      	b.n	8006008 <HAL_RCC_OscConfig+0xd8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x9c>
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a7e      	ldr	r2, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	4b7c      	ldr	r3, [pc, #496]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a7b      	ldr	r2, [pc, #492]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e01d      	b.n	8006008 <HAL_RCC_OscConfig+0xd8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd4:	d10c      	bne.n	8005ff0 <HAL_RCC_OscConfig+0xc0>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4b73      	ldr	r3, [pc, #460]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a72      	ldr	r2, [pc, #456]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e00b      	b.n	8006008 <HAL_RCC_OscConfig+0xd8>
 8005ff0:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a6e      	ldr	r2, [pc, #440]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a6b      	ldr	r2, [pc, #428]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d013      	beq.n	8006038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fe fd5a 	bl	8004ac8 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006018:	f7fe fd56 	bl	8004ac8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b64      	cmp	r3, #100	; 0x64
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e229      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0xe8>
 8006036:	e014      	b.n	8006062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fe fd46 	bl	8004ac8 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006040:	f7fe fd42 	bl	8004ac8 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b64      	cmp	r3, #100	; 0x64
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e215      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006052:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x110>
 800605e:	e000      	b.n	8006062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d069      	beq.n	8006142 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800606e:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607a:	4b4d      	ldr	r3, [pc, #308]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 030c 	and.w	r3, r3, #12
 8006082:	2b08      	cmp	r3, #8
 8006084:	d11c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x190>
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_RCC_OscConfig+0x17a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e1e9      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	493d      	ldr	r1, [pc, #244]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060be:	e040      	b.n	8006142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d023      	beq.n	8006110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c8:	4b39      	ldr	r3, [pc, #228]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fe fcf8 	bl	8004ac8 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060dc:	f7fe fcf4 	bl	8004ac8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1c7      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4929      	ldr	r1, [pc, #164]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	e018      	b.n	8006142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006110:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611c:	f7fe fcd4 	bl	8004ac8 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006124:	f7fe fcd0 	bl	8004ac8 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e1a3      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006136:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d038      	beq.n	80061c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d019      	beq.n	800618a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006162:	f7fe fcb1 	bl	8004ac8 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616a:	f7fe fcad 	bl	8004ac8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e180      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800617e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x23a>
 8006188:	e01a      	b.n	80061c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 800618c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618e:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <HAL_RCC_OscConfig+0x280>)
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006196:	f7fe fc97 	bl	8004ac8 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800619e:	f7fe fc93 	bl	8004ac8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d903      	bls.n	80061b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e166      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
 80061b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b4:	4b92      	ldr	r3, [pc, #584]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80061b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ee      	bne.n	800619e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a4 	beq.w	8006316 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ce:	4b8c      	ldr	r3, [pc, #560]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10d      	bne.n	80061f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80061da:	4b89      	ldr	r3, [pc, #548]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	4a88      	ldr	r2, [pc, #544]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e4:	6413      	str	r3, [r2, #64]	; 0x40
 80061e6:	4b86      	ldr	r3, [pc, #536]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	60bb      	str	r3, [r7, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f6:	4b83      	ldr	r3, [pc, #524]	; (8006404 <HAL_RCC_OscConfig+0x4d4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d118      	bne.n	8006234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006202:	4b80      	ldr	r3, [pc, #512]	; (8006404 <HAL_RCC_OscConfig+0x4d4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7f      	ldr	r2, [pc, #508]	; (8006404 <HAL_RCC_OscConfig+0x4d4>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800620e:	f7fe fc5b 	bl	8004ac8 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006216:	f7fe fc57 	bl	8004ac8 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b64      	cmp	r3, #100	; 0x64
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e12a      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006228:	4b76      	ldr	r3, [pc, #472]	; (8006404 <HAL_RCC_OscConfig+0x4d4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d106      	bne.n	800624a <HAL_RCC_OscConfig+0x31a>
 800623c:	4b70      	ldr	r3, [pc, #448]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	4a6f      	ldr	r2, [pc, #444]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	6713      	str	r3, [r2, #112]	; 0x70
 8006248:	e02d      	b.n	80062a6 <HAL_RCC_OscConfig+0x376>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <HAL_RCC_OscConfig+0x33c>
 8006252:	4b6b      	ldr	r3, [pc, #428]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	4a6a      	ldr	r2, [pc, #424]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6713      	str	r3, [r2, #112]	; 0x70
 800625e:	4b68      	ldr	r3, [pc, #416]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	4a67      	ldr	r2, [pc, #412]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006264:	f023 0304 	bic.w	r3, r3, #4
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
 800626a:	e01c      	b.n	80062a6 <HAL_RCC_OscConfig+0x376>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b05      	cmp	r3, #5
 8006272:	d10c      	bne.n	800628e <HAL_RCC_OscConfig+0x35e>
 8006274:	4b62      	ldr	r3, [pc, #392]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a61      	ldr	r2, [pc, #388]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800627a:	f043 0304 	orr.w	r3, r3, #4
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	4b5f      	ldr	r3, [pc, #380]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a5e      	ldr	r2, [pc, #376]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
 800628c:	e00b      	b.n	80062a6 <HAL_RCC_OscConfig+0x376>
 800628e:	4b5c      	ldr	r3, [pc, #368]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a5b      	ldr	r2, [pc, #364]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	4b59      	ldr	r3, [pc, #356]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a58      	ldr	r2, [pc, #352]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ae:	f7fe fc0b 	bl	8004ac8 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	e00a      	b.n	80062cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b6:	f7fe fc07 	bl	8004ac8 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e0d8      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062cc:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ee      	beq.n	80062b6 <HAL_RCC_OscConfig+0x386>
 80062d8:	e014      	b.n	8006304 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062da:	f7fe fbf5 	bl	8004ac8 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fe fbf1 	bl	8004ac8 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e0c2      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f8:	4b41      	ldr	r3, [pc, #260]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ee      	bne.n	80062e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80ae 	beq.w	800647c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006320:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b08      	cmp	r3, #8
 800632a:	d06d      	beq.n	8006408 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d14b      	bne.n	80063cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006334:	4b32      	ldr	r3, [pc, #200]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a31      	ldr	r2, [pc, #196]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800633a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800633e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fe fbc2 	bl	8004ac8 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006348:	f7fe fbbe 	bl	8004ac8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e091      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	4b29      	ldr	r3, [pc, #164]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	3b01      	subs	r3, #1
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	071b      	lsls	r3, r3, #28
 8006392:	491b      	ldr	r1, [pc, #108]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 800639e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fe fb90 	bl	8004ac8 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fe fb8c 	bl	8004ac8 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e05f      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x47c>
 80063ca:	e057      	b.n	800647c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80063d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fe fb76 	bl	8004ac8 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fe fb72 	bl	8004ac8 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e045      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f2:	4b03      	ldr	r3, [pc, #12]	; (8006400 <HAL_RCC_OscConfig+0x4d0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x4b0>
 80063fe:	e03d      	b.n	800647c <HAL_RCC_OscConfig+0x54c>
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006408:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <HAL_RCC_OscConfig+0x558>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d030      	beq.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006420:	429a      	cmp	r2, r3
 8006422:	d129      	bne.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d122      	bne.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800643e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006440:	4293      	cmp	r3, r2
 8006442:	d119      	bne.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	3b01      	subs	r3, #1
 8006452:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006454:	429a      	cmp	r2, r3
 8006456:	d10f      	bne.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d107      	bne.n	8006478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023800 	.word	0x40023800

0800648c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0d0      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a4:	4b6a      	ldr	r3, [pc, #424]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d910      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b67      	ldr	r3, [pc, #412]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 020f 	bic.w	r2, r3, #15
 80064ba:	4965      	ldr	r1, [pc, #404]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b63      	ldr	r3, [pc, #396]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0b8      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ec:	4b59      	ldr	r3, [pc, #356]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a58      	ldr	r2, [pc, #352]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 80064f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006504:	4b53      	ldr	r3, [pc, #332]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 800650a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800650e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006510:	4b50      	ldr	r3, [pc, #320]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	494d      	ldr	r1, [pc, #308]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d040      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d115      	bne.n	800656e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e07f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d107      	bne.n	800655e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	4b41      	ldr	r3, [pc, #260]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e073      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655e:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e06b      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656e:	4b39      	ldr	r3, [pc, #228]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 0203 	bic.w	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4936      	ldr	r1, [pc, #216]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 800657c:	4313      	orrs	r3, r2
 800657e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006580:	f7fe faa2 	bl	8004ac8 <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006586:	e00a      	b.n	800659e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006588:	f7fe fa9e 	bl	8004ac8 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	; 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e053      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659e:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 020c 	and.w	r2, r3, #12
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1eb      	bne.n	8006588 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d210      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 020f 	bic.w	r2, r3, #15
 80065c6:	4922      	ldr	r1, [pc, #136]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e032      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ec:	4b19      	ldr	r3, [pc, #100]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4916      	ldr	r1, [pc, #88]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	490e      	ldr	r1, [pc, #56]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800661e:	f000 f821 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	490a      	ldr	r1, [pc, #40]	; (8006658 <HAL_RCC_ClockConfig+0x1cc>)
 8006630:	5ccb      	ldrb	r3, [r1, r3]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <HAL_RCC_ClockConfig+0x1d0>)
 8006638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x1d4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f9fe 	bl	8004a40 <HAL_InitTick>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023c00 	.word	0x40023c00
 8006654:	40023800 	.word	0x40023800
 8006658:	0800fc14 	.word	0x0800fc14
 800665c:	20000110 	.word	0x20000110
 8006660:	20000128 	.word	0x20000128

08006664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800667c:	4b67      	ldr	r3, [pc, #412]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b08      	cmp	r3, #8
 8006686:	d00d      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006688:	2b08      	cmp	r3, #8
 800668a:	f200 80bd 	bhi.w	8006808 <HAL_RCC_GetSysClockFreq+0x1a4>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x34>
 8006692:	2b04      	cmp	r3, #4
 8006694:	d003      	beq.n	800669e <HAL_RCC_GetSysClockFreq+0x3a>
 8006696:	e0b7      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006698:	4b61      	ldr	r3, [pc, #388]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800669a:	60bb      	str	r3, [r7, #8]
      break;
 800669c:	e0b7      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800669e:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066a0:	60bb      	str	r3, [r7, #8]
      break;
 80066a2:	e0b4      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a4:	4b5d      	ldr	r3, [pc, #372]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066ae:	4b5b      	ldr	r3, [pc, #364]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d04d      	beq.n	8006756 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ba:	4b58      	ldr	r3, [pc, #352]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	099b      	lsrs	r3, r3, #6
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066ca:	f04f 0100 	mov.w	r1, #0
 80066ce:	ea02 0800 	and.w	r8, r2, r0
 80066d2:	ea03 0901 	and.w	r9, r3, r1
 80066d6:	4640      	mov	r0, r8
 80066d8:	4649      	mov	r1, r9
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	014b      	lsls	r3, r1, #5
 80066e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066e8:	0142      	lsls	r2, r0, #5
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	ebb0 0008 	subs.w	r0, r0, r8
 80066f2:	eb61 0109 	sbc.w	r1, r1, r9
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	018b      	lsls	r3, r1, #6
 8006700:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006704:	0182      	lsls	r2, r0, #6
 8006706:	1a12      	subs	r2, r2, r0
 8006708:	eb63 0301 	sbc.w	r3, r3, r1
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	00d9      	lsls	r1, r3, #3
 8006716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800671a:	00d0      	lsls	r0, r2, #3
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	eb12 0208 	adds.w	r2, r2, r8
 8006724:	eb43 0309 	adc.w	r3, r3, r9
 8006728:	f04f 0000 	mov.w	r0, #0
 800672c:	f04f 0100 	mov.w	r1, #0
 8006730:	0259      	lsls	r1, r3, #9
 8006732:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006736:	0250      	lsls	r0, r2, #9
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	461a      	mov	r2, r3
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	f7f9 ff9e 	bl	8000688 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e04a      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006756:	4b31      	ldr	r3, [pc, #196]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	461a      	mov	r2, r3
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006766:	f04f 0100 	mov.w	r1, #0
 800676a:	ea02 0400 	and.w	r4, r2, r0
 800676e:	ea03 0501 	and.w	r5, r3, r1
 8006772:	4620      	mov	r0, r4
 8006774:	4629      	mov	r1, r5
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	014b      	lsls	r3, r1, #5
 8006780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006784:	0142      	lsls	r2, r0, #5
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	1b00      	subs	r0, r0, r4
 800678c:	eb61 0105 	sbc.w	r1, r1, r5
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	018b      	lsls	r3, r1, #6
 800679a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800679e:	0182      	lsls	r2, r0, #6
 80067a0:	1a12      	subs	r2, r2, r0
 80067a2:	eb63 0301 	sbc.w	r3, r3, r1
 80067a6:	f04f 0000 	mov.w	r0, #0
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	00d9      	lsls	r1, r3, #3
 80067b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b4:	00d0      	lsls	r0, r2, #3
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	1912      	adds	r2, r2, r4
 80067bc:	eb45 0303 	adc.w	r3, r5, r3
 80067c0:	f04f 0000 	mov.w	r0, #0
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	0299      	lsls	r1, r3, #10
 80067ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80067ce:	0290      	lsls	r0, r2, #10
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	f7f9 ff52 	bl	8000688 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	3301      	adds	r3, #1
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	60bb      	str	r3, [r7, #8]
      break;
 8006806:	e002      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800680a:	60bb      	str	r3, [r7, #8]
      break;
 800680c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800680e:	68bb      	ldr	r3, [r7, #8]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800681a:	bf00      	nop
 800681c:	40023800 	.word	0x40023800
 8006820:	00f42400 	.word	0x00f42400
 8006824:	007a1200 	.word	0x007a1200

08006828 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <HAL_RCC_GetHCLKFreq+0x14>)
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000110 	.word	0x20000110

08006840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006844:	f7ff fff0 	bl	8006828 <HAL_RCC_GetHCLKFreq>
 8006848:	4602      	mov	r2, r0
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	0a9b      	lsrs	r3, r3, #10
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	4903      	ldr	r1, [pc, #12]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006856:	5ccb      	ldrb	r3, [r1, r3]
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800685c:	4618      	mov	r0, r3
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40023800 	.word	0x40023800
 8006864:	0800fc24 	.word	0x0800fc24

08006868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800686c:	f7ff ffdc 	bl	8006828 <HAL_RCC_GetHCLKFreq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	0b5b      	lsrs	r3, r3, #13
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	4903      	ldr	r1, [pc, #12]	; (800688c <HAL_RCC_GetPCLK2Freq+0x24>)
 800687e:	5ccb      	ldrb	r3, [r1, r3]
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40023800 	.word	0x40023800
 800688c:	0800fc24 	.word	0x0800fc24

08006890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068b8:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80068c2:	6093      	str	r3, [r2, #8]
 80068c4:	4b66      	ldr	r3, [pc, #408]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	4964      	ldr	r1, [pc, #400]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80068da:	2301      	movs	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068ea:	4b5d      	ldr	r3, [pc, #372]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	4959      	ldr	r1, [pc, #356]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006908:	d101      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800690a:	2301      	movs	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006916:	2301      	movs	r3, #1
 8006918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d017      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006926:	4b4e      	ldr	r3, [pc, #312]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	494a      	ldr	r1, [pc, #296]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006944:	d101      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006946:	2301      	movs	r3, #1
 8006948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006952:	2301      	movs	r3, #1
 8006954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006962:	2301      	movs	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 808b 	beq.w	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006974:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	4a39      	ldr	r2, [pc, #228]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697e:	6413      	str	r3, [r2, #64]	; 0x40
 8006980:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800698c:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a34      	ldr	r2, [pc, #208]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006998:	f7fe f896 	bl	8004ac8 <HAL_GetTick>
 800699c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a0:	f7fe f892 	bl	8004ac8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e38f      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80069b2:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069be:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d035      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d02e      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069e6:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	4a1d      	ldr	r2, [pc, #116]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069fe:	4a18      	ldr	r2, [pc, #96]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a04:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d114      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fe f85a 	bl	8004ac8 <HAL_GetTick>
 8006a14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a16:	e00a      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a18:	f7fe f856 	bl	8004ac8 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e351      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ee      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a46:	d111      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a56:	400b      	ands	r3, r1
 8006a58:	4901      	ldr	r1, [pc, #4]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	608b      	str	r3, [r1, #8]
 8006a5e:	e00b      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40007000 	.word	0x40007000
 8006a68:	0ffffcff 	.word	0x0ffffcff
 8006a6c:	4bb3      	ldr	r3, [pc, #716]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4ab2      	ldr	r2, [pc, #712]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a76:	6093      	str	r3, [r2, #8]
 8006a78:	4bb0      	ldr	r3, [pc, #704]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a84:	49ad      	ldr	r1, [pc, #692]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a96:	4ba9      	ldr	r3, [pc, #676]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9c:	4aa7      	ldr	r2, [pc, #668]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006aa6:	4ba5      	ldr	r3, [pc, #660]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	49a2      	ldr	r1, [pc, #648]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ac4:	4b9d      	ldr	r3, [pc, #628]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad2:	499a      	ldr	r1, [pc, #616]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ae6:	4b95      	ldr	r3, [pc, #596]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af4:	4991      	ldr	r1, [pc, #580]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b08:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b16:	4989      	ldr	r1, [pc, #548]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b2a:	4b84      	ldr	r3, [pc, #528]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	4980      	ldr	r1, [pc, #512]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b4c:	4b7b      	ldr	r3, [pc, #492]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f023 0203 	bic.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	4978      	ldr	r1, [pc, #480]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b6e:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f023 020c 	bic.w	r2, r3, #12
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7c:	496f      	ldr	r1, [pc, #444]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b90:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	4967      	ldr	r1, [pc, #412]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006bb2:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	495e      	ldr	r1, [pc, #376]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bd4:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	4956      	ldr	r1, [pc, #344]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bf6:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c04:	494d      	ldr	r1, [pc, #308]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006c18:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	4945      	ldr	r1, [pc, #276]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c3a:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c48:	493c      	ldr	r1, [pc, #240]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c5c:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6a:	4934      	ldr	r1, [pc, #208]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c7e:	4b2f      	ldr	r3, [pc, #188]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8c:	492b      	ldr	r1, [pc, #172]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ccc:	491b      	ldr	r1, [pc, #108]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ce0:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf0:	4912      	ldr	r1, [pc, #72]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d14:	4909      	ldr	r1, [pc, #36]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	e002      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006d3a:	bf00      	nop
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	4986      	ldr	r1, [pc, #536]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006d54:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d64:	497d      	ldr	r1, [pc, #500]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d006      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80d6 	beq.w	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d80:	4b76      	ldr	r3, [pc, #472]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a75      	ldr	r2, [pc, #468]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d8c:	f7fd fe9c 	bl	8004ac8 <HAL_GetTick>
 8006d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d94:	f7fd fe98 	bl	8004ac8 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b64      	cmp	r3, #100	; 0x64
 8006da0:	d901      	bls.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e195      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da6:	4b6d      	ldr	r3, [pc, #436]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d021      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d11d      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006dc6:	4b65      	ldr	r3, [pc, #404]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dda:	0e1b      	lsrs	r3, r3, #24
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	019a      	lsls	r2, r3, #6
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	071b      	lsls	r3, r3, #28
 8006dfa:	4958      	ldr	r1, [pc, #352]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e16:	d00a      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02e      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e2c:	d129      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e2e:	4b4b      	ldr	r3, [pc, #300]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e3c:	4b47      	ldr	r3, [pc, #284]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e42:	0f1b      	lsrs	r3, r3, #28
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	019a      	lsls	r2, r3, #6
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	071b      	lsls	r3, r3, #28
 8006e62:	493e      	ldr	r1, [pc, #248]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e6a:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e70:	f023 021f 	bic.w	r2, r3, #31
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	4938      	ldr	r1, [pc, #224]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01d      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e8e:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e94:	0e1b      	lsrs	r3, r3, #24
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e9c:	4b2f      	ldr	r3, [pc, #188]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	019a      	lsls	r2, r3, #6
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	061b      	lsls	r3, r3, #24
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	071b      	lsls	r3, r3, #28
 8006ec2:	4926      	ldr	r1, [pc, #152]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d011      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	019a      	lsls	r2, r3, #6
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	071b      	lsls	r3, r3, #28
 8006ef2:	491a      	ldr	r1, [pc, #104]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f06:	f7fd fddf 	bl	8004ac8 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f0e:	f7fd fddb 	bl	8004ac8 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b64      	cmp	r3, #100	; 0x64
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e0d8      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f040 80ce 	bne.w	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f40:	f7fd fdc2 	bl	8004ac8 <HAL_GetTick>
 8006f44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f46:	e00b      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f48:	f7fd fdbe 	bl	8004ac8 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d904      	bls.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e0bb      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006f5a:	bf00      	nop
 8006f5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f60:	4b5e      	ldr	r3, [pc, #376]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6c:	d0ec      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d02e      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d12a      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006fa4:	4b4d      	ldr	r3, [pc, #308]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006faa:	0f1b      	lsrs	r3, r3, #28
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	019a      	lsls	r2, r3, #6
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	071b      	lsls	r3, r3, #28
 8006fca:	4944      	ldr	r1, [pc, #272]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006fd2:	4b42      	ldr	r3, [pc, #264]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	493d      	ldr	r1, [pc, #244]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d022      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007000:	d11d      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007008:	0e1b      	lsrs	r3, r3, #24
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007010:	4b32      	ldr	r3, [pc, #200]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	0f1b      	lsrs	r3, r3, #28
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	019a      	lsls	r2, r3, #6
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	431a      	orrs	r2, r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	4929      	ldr	r1, [pc, #164]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d028      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007050:	0e1b      	lsrs	r3, r3, #24
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007058:	4b20      	ldr	r3, [pc, #128]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	019a      	lsls	r2, r3, #6
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	431a      	orrs	r2, r3
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	071b      	lsls	r3, r3, #28
 800707e:	4917      	ldr	r1, [pc, #92]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	4911      	ldr	r1, [pc, #68]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0e      	ldr	r2, [pc, #56]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a8:	f7fd fd0e 	bl	8004ac8 <HAL_GetTick>
 80070ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070b0:	f7fd fd0a 	bl	8004ac8 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b64      	cmp	r3, #100	; 0x64
 80070bc:	d901      	bls.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e007      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d1ef      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800

080070e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e049      	b.n	8007186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fc fd88 	bl	8003c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fe20 	bl	8007d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d001      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e054      	b.n	8007252 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a26      	ldr	r2, [pc, #152]	; (8007260 <HAL_TIM_Base_Start_IT+0xd0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d022      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d2:	d01d      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a22      	ldr	r2, [pc, #136]	; (8007264 <HAL_TIM_Base_Start_IT+0xd4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d018      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a21      	ldr	r2, [pc, #132]	; (8007268 <HAL_TIM_Base_Start_IT+0xd8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_TIM_Base_Start_IT+0xdc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00e      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_TIM_Base_Start_IT+0xe0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <HAL_TIM_Base_Start_IT+0xe4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d004      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x80>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_TIM_Base_Start_IT+0xe8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d115      	bne.n	800723c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_TIM_Base_Start_IT+0xec>)
 8007218:	4013      	ands	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b06      	cmp	r3, #6
 8007220:	d015      	beq.n	800724e <HAL_TIM_Base_Start_IT+0xbe>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007228:	d011      	beq.n	800724e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723a:	e008      	b.n	800724e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e000      	b.n	8007250 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40001800 	.word	0x40001800
 800727c:	00010007 	.word	0x00010007

08007280 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6a1a      	ldr	r2, [r3, #32]
 800729e:	f241 1311 	movw	r3, #4369	; 0x1111
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10f      	bne.n	80072c8 <HAL_TIM_Base_Stop_IT+0x48>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	f240 4344 	movw	r3, #1092	; 0x444
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d107      	bne.n	80072c8 <HAL_TIM_Base_Stop_IT+0x48>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e049      	b.n	8007384 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f841 	bl	800738c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f000 fd21 	bl	8007d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_TIM_PWM_Start+0x24>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	bf14      	ite	ne
 80073bc:	2301      	movne	r3, #1
 80073be:	2300      	moveq	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	e03c      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d109      	bne.n	80073de <HAL_TIM_PWM_Start+0x3e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	bf14      	ite	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	2300      	moveq	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	e02f      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d109      	bne.n	80073f8 <HAL_TIM_PWM_Start+0x58>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e022      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b0c      	cmp	r3, #12
 80073fc:	d109      	bne.n	8007412 <HAL_TIM_PWM_Start+0x72>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e015      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b10      	cmp	r3, #16
 8007416:	d109      	bne.n	800742c <HAL_TIM_PWM_Start+0x8c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e008      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e092      	b.n	800756c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0xb6>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007454:	e023      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d104      	bne.n	8007466 <HAL_TIM_PWM_Start+0xc6>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007464:	e01b      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d104      	bne.n	8007476 <HAL_TIM_PWM_Start+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	e013      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d104      	bne.n	8007486 <HAL_TIM_PWM_Start+0xe6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007484:	e00b      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b10      	cmp	r3, #16
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0xf6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007494:	e003      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 f888 	bl	80085bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a30      	ldr	r2, [pc, #192]	; (8007574 <HAL_TIM_PWM_Start+0x1d4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_TIM_PWM_Start+0x120>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2f      	ldr	r2, [pc, #188]	; (8007578 <HAL_TIM_PWM_Start+0x1d8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <HAL_TIM_PWM_Start+0x124>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_TIM_PWM_Start+0x126>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a25      	ldr	r2, [pc, #148]	; (8007574 <HAL_TIM_PWM_Start+0x1d4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d022      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d01d      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a22      	ldr	r2, [pc, #136]	; (800757c <HAL_TIM_PWM_Start+0x1dc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d018      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a20      	ldr	r2, [pc, #128]	; (8007580 <HAL_TIM_PWM_Start+0x1e0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <HAL_TIM_PWM_Start+0x1e4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <HAL_TIM_PWM_Start+0x1d8>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <HAL_TIM_PWM_Start+0x1e8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIM_PWM_Start+0x18a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <HAL_TIM_PWM_Start+0x1ec>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d115      	bne.n	8007556 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	4b17      	ldr	r3, [pc, #92]	; (8007590 <HAL_TIM_PWM_Start+0x1f0>)
 8007532:	4013      	ands	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b06      	cmp	r3, #6
 800753a:	d015      	beq.n	8007568 <HAL_TIM_PWM_Start+0x1c8>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007542:	d011      	beq.n	8007568 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007554:	e008      	b.n	8007568 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e000      	b.n	800756a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40010000 	.word	0x40010000
 8007578:	40010400 	.word	0x40010400
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	40014000 	.word	0x40014000
 800758c:	40001800 	.word	0x40001800
 8007590:	00010007 	.word	0x00010007

08007594 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f808 	bl	80085bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a36      	ldr	r2, [pc, #216]	; (800768c <HAL_TIM_PWM_Stop+0xf8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_TIM_PWM_Stop+0x2c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a35      	ldr	r2, [pc, #212]	; (8007690 <HAL_TIM_PWM_Stop+0xfc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d101      	bne.n	80075c4 <HAL_TIM_PWM_Stop+0x30>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <HAL_TIM_PWM_Stop+0x32>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d017      	beq.n	80075fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10f      	bne.n	80075fa <HAL_TIM_PWM_Stop+0x66>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	f240 4344 	movw	r3, #1092	; 0x444
 80075e4:	4013      	ands	r3, r2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <HAL_TIM_PWM_Stop+0x66>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	f241 1311 	movw	r3, #4369	; 0x1111
 8007604:	4013      	ands	r3, r2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10f      	bne.n	800762a <HAL_TIM_PWM_Stop+0x96>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	f240 4344 	movw	r3, #1092	; 0x444
 8007614:	4013      	ands	r3, r2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <HAL_TIM_PWM_Stop+0x96>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <HAL_TIM_PWM_Stop+0xa6>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007638:	e023      	b.n	8007682 <HAL_TIM_PWM_Stop+0xee>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b04      	cmp	r3, #4
 800763e:	d104      	bne.n	800764a <HAL_TIM_PWM_Stop+0xb6>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007648:	e01b      	b.n	8007682 <HAL_TIM_PWM_Stop+0xee>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Stop+0xc6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007658:	e013      	b.n	8007682 <HAL_TIM_PWM_Stop+0xee>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b0c      	cmp	r3, #12
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Stop+0xd6>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007668:	e00b      	b.n	8007682 <HAL_TIM_PWM_Stop+0xee>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b10      	cmp	r3, #16
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Stop+0xe6>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007678:	e003      	b.n	8007682 <HAL_TIM_PWM_Stop+0xee>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40010000 	.word	0x40010000
 8007690:	40010400 	.word	0x40010400

08007694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d122      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d11b      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0202 	mvn.w	r2, #2
 80076c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fb26 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 80076dc:	e005      	b.n	80076ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fb18 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fb29 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d122      	bne.n	8007744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b04      	cmp	r3, #4
 800770a:	d11b      	bne.n	8007744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0204 	mvn.w	r2, #4
 8007714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fafc 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007730:	e005      	b.n	800773e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 faee 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 faff 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b08      	cmp	r3, #8
 8007750:	d122      	bne.n	8007798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d11b      	bne.n	8007798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0208 	mvn.w	r2, #8
 8007768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2204      	movs	r2, #4
 800776e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fad2 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007784:	e005      	b.n	8007792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fac4 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fad5 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d122      	bne.n	80077ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d11b      	bne.n	80077ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0210 	mvn.w	r2, #16
 80077bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2208      	movs	r2, #8
 80077c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 faa8 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 80077d8:	e005      	b.n	80077e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa9a 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 faab 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d107      	bne.n	8007818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0201 	mvn.w	r2, #1
 8007810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fc facc 	bl	8003db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 ff7a 	bl	8008738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	d10e      	bne.n	8007872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d107      	bne.n	8007872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800786a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 ff6d 	bl	800874c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d10e      	bne.n	800789e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d107      	bne.n	800789e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa59 	bl	8007d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d10e      	bne.n	80078ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d107      	bne.n	80078ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f06f 0220 	mvn.w	r2, #32
 80078c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 ff2d 	bl	8008724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e0ff      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b14      	cmp	r3, #20
 80078fe:	f200 80f0 	bhi.w	8007ae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	0800795d 	.word	0x0800795d
 800790c:	08007ae3 	.word	0x08007ae3
 8007910:	08007ae3 	.word	0x08007ae3
 8007914:	08007ae3 	.word	0x08007ae3
 8007918:	0800799d 	.word	0x0800799d
 800791c:	08007ae3 	.word	0x08007ae3
 8007920:	08007ae3 	.word	0x08007ae3
 8007924:	08007ae3 	.word	0x08007ae3
 8007928:	080079df 	.word	0x080079df
 800792c:	08007ae3 	.word	0x08007ae3
 8007930:	08007ae3 	.word	0x08007ae3
 8007934:	08007ae3 	.word	0x08007ae3
 8007938:	08007a1f 	.word	0x08007a1f
 800793c:	08007ae3 	.word	0x08007ae3
 8007940:	08007ae3 	.word	0x08007ae3
 8007944:	08007ae3 	.word	0x08007ae3
 8007948:	08007a61 	.word	0x08007a61
 800794c:	08007ae3 	.word	0x08007ae3
 8007950:	08007ae3 	.word	0x08007ae3
 8007954:	08007ae3 	.word	0x08007ae3
 8007958:	08007aa1 	.word	0x08007aa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fa9e 	bl	8007ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0208 	orr.w	r2, r2, #8
 8007976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0204 	bic.w	r2, r2, #4
 8007986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6999      	ldr	r1, [r3, #24]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	619a      	str	r2, [r3, #24]
      break;
 800799a:	e0a5      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 faf0 	bl	8007f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6999      	ldr	r1, [r3, #24]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	021a      	lsls	r2, r3, #8
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	619a      	str	r2, [r3, #24]
      break;
 80079dc:	e084      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68b9      	ldr	r1, [r7, #8]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fb47 	bl	8008078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0208 	orr.w	r2, r2, #8
 80079f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69da      	ldr	r2, [r3, #28]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0204 	bic.w	r2, r2, #4
 8007a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69d9      	ldr	r1, [r3, #28]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	61da      	str	r2, [r3, #28]
      break;
 8007a1c:	e064      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fb9d 	bl	8008164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69da      	ldr	r2, [r3, #28]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69d9      	ldr	r1, [r3, #28]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	021a      	lsls	r2, r3, #8
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	61da      	str	r2, [r3, #28]
      break;
 8007a5e:	e043      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fbd4 	bl	8008214 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0208 	orr.w	r2, r2, #8
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0204 	bic.w	r2, r2, #4
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a9e:	e023      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fc06 	bl	80082b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	021a      	lsls	r2, r3, #8
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ae0:	e002      	b.n	8007ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop

08007afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_TIM_ConfigClockSource+0x1c>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e0b4      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x186>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	4b56      	ldr	r3, [pc, #344]	; (8007c8c <HAL_TIM_ConfigClockSource+0x190>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b50:	d03e      	beq.n	8007bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8007b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b56:	f200 8087 	bhi.w	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5e:	f000 8086 	beq.w	8007c6e <HAL_TIM_ConfigClockSource+0x172>
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d87f      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b68:	2b70      	cmp	r3, #112	; 0x70
 8007b6a:	d01a      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8007b6c:	2b70      	cmp	r3, #112	; 0x70
 8007b6e:	d87b      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b70:	2b60      	cmp	r3, #96	; 0x60
 8007b72:	d050      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x11a>
 8007b74:	2b60      	cmp	r3, #96	; 0x60
 8007b76:	d877      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d03c      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8007b7c:	2b50      	cmp	r3, #80	; 0x50
 8007b7e:	d873      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d058      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x13a>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d86f      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b88:	2b30      	cmp	r3, #48	; 0x30
 8007b8a:	d064      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b8c:	2b30      	cmp	r3, #48	; 0x30
 8007b8e:	d86b      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d060      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d867      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d05c      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d05a      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007ba0:	e062      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6899      	ldr	r1, [r3, #8]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f000 fce3 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	609a      	str	r2, [r3, #8]
      break;
 8007bce:	e04f      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	6899      	ldr	r1, [r3, #8]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f000 fccc 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bf2:	609a      	str	r2, [r3, #8]
      break;
 8007bf4:	e03c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f000 fc40 	bl	8008488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2150      	movs	r1, #80	; 0x50
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fc99 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007c14:	e02c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6859      	ldr	r1, [r3, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f000 fc5f 	bl	80084e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2160      	movs	r1, #96	; 0x60
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fc89 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007c34:	e01c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 fc20 	bl	8008488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2140      	movs	r1, #64	; 0x40
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fc79 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007c54:	e00c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f000 fc70 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007c66:	e003      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6c:	e000      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	fffeff88 	.word	0xfffeff88

08007c90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e031      	b.n	8007d0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fb50 	bl	8008360 <TIM_SlaveTimer_SetConfig>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e018      	b.n	8007d0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007cf8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a40      	ldr	r2, [pc, #256]	; (8007e78 <TIM_Base_SetConfig+0x114>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <TIM_Base_SetConfig+0x40>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d00f      	beq.n	8007da4 <TIM_Base_SetConfig+0x40>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a3d      	ldr	r2, [pc, #244]	; (8007e7c <TIM_Base_SetConfig+0x118>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00b      	beq.n	8007da4 <TIM_Base_SetConfig+0x40>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a3c      	ldr	r2, [pc, #240]	; (8007e80 <TIM_Base_SetConfig+0x11c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_Base_SetConfig+0x40>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a3b      	ldr	r2, [pc, #236]	; (8007e84 <TIM_Base_SetConfig+0x120>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a3a      	ldr	r2, [pc, #232]	; (8007e88 <TIM_Base_SetConfig+0x124>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d108      	bne.n	8007db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a2f      	ldr	r2, [pc, #188]	; (8007e78 <TIM_Base_SetConfig+0x114>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d02b      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc4:	d027      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2c      	ldr	r2, [pc, #176]	; (8007e7c <TIM_Base_SetConfig+0x118>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d023      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2b      	ldr	r2, [pc, #172]	; (8007e80 <TIM_Base_SetConfig+0x11c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d01f      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a2a      	ldr	r2, [pc, #168]	; (8007e84 <TIM_Base_SetConfig+0x120>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d01b      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a29      	ldr	r2, [pc, #164]	; (8007e88 <TIM_Base_SetConfig+0x124>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d017      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a28      	ldr	r2, [pc, #160]	; (8007e8c <TIM_Base_SetConfig+0x128>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d013      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a27      	ldr	r2, [pc, #156]	; (8007e90 <TIM_Base_SetConfig+0x12c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00f      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a26      	ldr	r2, [pc, #152]	; (8007e94 <TIM_Base_SetConfig+0x130>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00b      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a25      	ldr	r2, [pc, #148]	; (8007e98 <TIM_Base_SetConfig+0x134>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d007      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <TIM_Base_SetConfig+0x138>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d003      	beq.n	8007e16 <TIM_Base_SetConfig+0xb2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a23      	ldr	r2, [pc, #140]	; (8007ea0 <TIM_Base_SetConfig+0x13c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d108      	bne.n	8007e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a0a      	ldr	r2, [pc, #40]	; (8007e78 <TIM_Base_SetConfig+0x114>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_Base_SetConfig+0xf8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a0c      	ldr	r2, [pc, #48]	; (8007e88 <TIM_Base_SetConfig+0x124>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d103      	bne.n	8007e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	615a      	str	r2, [r3, #20]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40000400 	.word	0x40000400
 8007e80:	40000800 	.word	0x40000800
 8007e84:	40000c00 	.word	0x40000c00
 8007e88:	40010400 	.word	0x40010400
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40014400 	.word	0x40014400
 8007e94:	40014800 	.word	0x40014800
 8007e98:	40001800 	.word	0x40001800
 8007e9c:	40001c00 	.word	0x40001c00
 8007ea0:	40002000 	.word	0x40002000

08007ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <TIM_OC1_SetConfig+0xd8>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f023 0302 	bic.w	r3, r3, #2
 8007eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <TIM_OC1_SetConfig+0xdc>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_OC1_SetConfig+0x64>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <TIM_OC1_SetConfig+0xe0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d10c      	bne.n	8007f22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0308 	bic.w	r3, r3, #8
 8007f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f023 0304 	bic.w	r3, r3, #4
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <TIM_OC1_SetConfig+0xdc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_OC1_SetConfig+0x8e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <TIM_OC1_SetConfig+0xe0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d111      	bne.n	8007f56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	621a      	str	r2, [r3, #32]
}
 8007f70:	bf00      	nop
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	fffeff8f 	.word	0xfffeff8f
 8007f80:	40010000 	.word	0x40010000
 8007f84:	40010400 	.word	0x40010400

08007f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f023 0210 	bic.w	r2, r3, #16
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b2e      	ldr	r3, [pc, #184]	; (800806c <TIM_OC2_SetConfig+0xe4>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0320 	bic.w	r3, r3, #32
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a23      	ldr	r2, [pc, #140]	; (8008070 <TIM_OC2_SetConfig+0xe8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC2_SetConfig+0x68>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a22      	ldr	r2, [pc, #136]	; (8008074 <TIM_OC2_SetConfig+0xec>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10d      	bne.n	800800c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800800a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a18      	ldr	r2, [pc, #96]	; (8008070 <TIM_OC2_SetConfig+0xe8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d003      	beq.n	800801c <TIM_OC2_SetConfig+0x94>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a17      	ldr	r2, [pc, #92]	; (8008074 <TIM_OC2_SetConfig+0xec>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d113      	bne.n	8008044 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800802a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	feff8fff 	.word	0xfeff8fff
 8008070:	40010000 	.word	0x40010000
 8008074:	40010400 	.word	0x40010400

08008078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4b2d      	ldr	r3, [pc, #180]	; (8008158 <TIM_OC3_SetConfig+0xe0>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a22      	ldr	r2, [pc, #136]	; (800815c <TIM_OC3_SetConfig+0xe4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_OC3_SetConfig+0x66>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a21      	ldr	r2, [pc, #132]	; (8008160 <TIM_OC3_SetConfig+0xe8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d10d      	bne.n	80080fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a17      	ldr	r2, [pc, #92]	; (800815c <TIM_OC3_SetConfig+0xe4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_OC3_SetConfig+0x92>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a16      	ldr	r2, [pc, #88]	; (8008160 <TIM_OC3_SetConfig+0xe8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d113      	bne.n	8008132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	fffeff8f 	.word	0xfffeff8f
 800815c:	40010000 	.word	0x40010000
 8008160:	40010400 	.word	0x40010400

08008164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4b1e      	ldr	r3, [pc, #120]	; (8008208 <TIM_OC4_SetConfig+0xa4>)
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	031b      	lsls	r3, r3, #12
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a13      	ldr	r2, [pc, #76]	; (800820c <TIM_OC4_SetConfig+0xa8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC4_SetConfig+0x68>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a12      	ldr	r2, [pc, #72]	; (8008210 <TIM_OC4_SetConfig+0xac>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d109      	bne.n	80081e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	019b      	lsls	r3, r3, #6
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	621a      	str	r2, [r3, #32]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	feff8fff 	.word	0xfeff8fff
 800820c:	40010000 	.word	0x40010000
 8008210:	40010400 	.word	0x40010400

08008214 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <TIM_OC5_SetConfig+0x98>)
 8008240:	4013      	ands	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008254:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a12      	ldr	r2, [pc, #72]	; (80082b0 <TIM_OC5_SetConfig+0x9c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d003      	beq.n	8008272 <TIM_OC5_SetConfig+0x5e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a11      	ldr	r2, [pc, #68]	; (80082b4 <TIM_OC5_SetConfig+0xa0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d109      	bne.n	8008286 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	621a      	str	r2, [r3, #32]
}
 80082a0:	bf00      	nop
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	fffeff8f 	.word	0xfffeff8f
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40010400 	.word	0x40010400

080082b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4b1c      	ldr	r3, [pc, #112]	; (8008354 <TIM_OC6_SetConfig+0x9c>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a13      	ldr	r2, [pc, #76]	; (8008358 <TIM_OC6_SetConfig+0xa0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC6_SetConfig+0x60>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a12      	ldr	r2, [pc, #72]	; (800835c <TIM_OC6_SetConfig+0xa4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d109      	bne.n	800832c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	621a      	str	r2, [r3, #32]
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	feff8fff 	.word	0xfeff8fff
 8008358:	40010000 	.word	0x40010000
 800835c:	40010400 	.word	0x40010400

08008360 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4b3e      	ldr	r3, [pc, #248]	; (8008484 <TIM_SlaveTimer_SetConfig+0x124>)
 800838c:	4013      	ands	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b70      	cmp	r3, #112	; 0x70
 80083a8:	d01a      	beq.n	80083e0 <TIM_SlaveTimer_SetConfig+0x80>
 80083aa:	2b70      	cmp	r3, #112	; 0x70
 80083ac:	d860      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083ae:	2b60      	cmp	r3, #96	; 0x60
 80083b0:	d054      	beq.n	800845c <TIM_SlaveTimer_SetConfig+0xfc>
 80083b2:	2b60      	cmp	r3, #96	; 0x60
 80083b4:	d85c      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083b6:	2b50      	cmp	r3, #80	; 0x50
 80083b8:	d046      	beq.n	8008448 <TIM_SlaveTimer_SetConfig+0xe8>
 80083ba:	2b50      	cmp	r3, #80	; 0x50
 80083bc:	d858      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d019      	beq.n	80083f6 <TIM_SlaveTimer_SetConfig+0x96>
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d854      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083c6:	2b30      	cmp	r3, #48	; 0x30
 80083c8:	d055      	beq.n	8008476 <TIM_SlaveTimer_SetConfig+0x116>
 80083ca:	2b30      	cmp	r3, #48	; 0x30
 80083cc:	d850      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d051      	beq.n	8008476 <TIM_SlaveTimer_SetConfig+0x116>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d84c      	bhi.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d04d      	beq.n	8008476 <TIM_SlaveTimer_SetConfig+0x116>
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d04b      	beq.n	8008476 <TIM_SlaveTimer_SetConfig+0x116>
 80083de:	e047      	b.n	8008470 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68d9      	ldr	r1, [r3, #12]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f000 f8c4 	bl	800857c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80083f4:	e040      	b.n	8008478 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d101      	bne.n	8008402 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e03b      	b.n	800847a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a1a      	ldr	r2, [r3, #32]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008428:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	4313      	orrs	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	621a      	str	r2, [r3, #32]
      break;
 8008446:	e017      	b.n	8008478 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6899      	ldr	r1, [r3, #8]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	461a      	mov	r2, r3
 8008456:	f000 f817 	bl	8008488 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800845a:	e00d      	b.n	8008478 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6899      	ldr	r1, [r3, #8]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	461a      	mov	r2, r3
 800846a:	f000 f83c 	bl	80084e6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800846e:	e003      	b.n	8008478 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	75fb      	strb	r3, [r7, #23]
      break;
 8008474:	e000      	b.n	8008478 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008476:	bf00      	nop
  }

  return status;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	fffefff8 	.word	0xfffefff8

08008488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 030a 	bic.w	r3, r3, #10
 80084c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0210 	bic.w	r2, r3, #16
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	f043 0307 	orr.w	r3, r3, #7
 8008568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	431a      	orrs	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2201      	movs	r2, #1
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	43db      	mvns	r3, r3
 80085de:	401a      	ands	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	fa01 f303 	lsl.w	r3, r1, r3
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800861c:	2302      	movs	r3, #2
 800861e:	e06d      	b.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a30      	ldr	r2, [pc, #192]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2f      	ldr	r2, [pc, #188]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d108      	bne.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800865a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a20      	ldr	r2, [pc, #128]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d022      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008692:	d01d      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1d      	ldr	r2, [pc, #116]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d018      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00e      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d009      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a16      	ldr	r2, [pc, #88]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d004      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a15      	ldr	r2, [pc, #84]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10c      	bne.n	80086ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40010000 	.word	0x40010000
 800870c:	40010400 	.word	0x40010400
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40014000 	.word	0x40014000
 8008720:	40001800 	.word	0x40001800

08008724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e040      	b.n	80087f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fb ffb0 	bl	80046e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2224      	movs	r2, #36	; 0x24
 800878c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fbe8 	bl	8008f74 <UART_SetConfig>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e022      	b.n	80087f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fe3e 	bl	8009438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fec5 	bl	800957c <UART_CheckIdleState>
 80087f2:	4603      	mov	r3, r0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b08b      	sub	sp, #44	; 0x2c
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800880e:	2b20      	cmp	r3, #32
 8008810:	d156      	bne.n	80088c0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <HAL_UART_Transmit_IT+0x22>
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e04f      	b.n	80088c2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_UART_Transmit_IT+0x34>
 800882c:	2302      	movs	r3, #2
 800882e:	e048      	b.n	80088c2 <HAL_UART_Transmit_IT+0xc6>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	88fa      	ldrh	r2, [r7, #6]
 8008842:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2221      	movs	r2, #33	; 0x21
 8008860:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d107      	bne.n	800887c <HAL_UART_Transmit_IT+0x80>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <HAL_UART_Transmit_IT+0xd4>)
 8008878:	669a      	str	r2, [r3, #104]	; 0x68
 800887a:	e002      	b.n	8008882 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <HAL_UART_Transmit_IT+0xd8>)
 8008880:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	613b      	str	r3, [r7, #16]
   return(result);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	623b      	str	r3, [r7, #32]
 80088aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	69f9      	ldr	r1, [r7, #28]
 80088ae:	6a3a      	ldr	r2, [r7, #32]
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	e000      	b.n	80088c2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80088c0:	2302      	movs	r3, #2
  }
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	372c      	adds	r7, #44	; 0x2c
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	08009ad5 	.word	0x08009ad5
 80088d4:	08009a1f 	.word	0x08009a1f

080088d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d13d      	bne.n	800896a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <HAL_UART_Receive_IT+0x22>
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e036      	b.n	800896c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UART_Receive_IT+0x34>
 8008908:	2302      	movs	r3, #2
 800890a:	e02f      	b.n	800896c <HAL_UART_Receive_IT+0x94>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d018      	beq.n	800895a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	613b      	str	r3, [r7, #16]
   return(result);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	623b      	str	r3, [r7, #32]
 8008948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	69f9      	ldr	r1, [r7, #28]
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	61bb      	str	r3, [r7, #24]
   return(result);
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e6      	bne.n	8008928 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	461a      	mov	r2, r3
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 ff19 	bl	8009798 <UART_Start_Receive_IT>
 8008966:	4603      	mov	r3, r0
 8008968:	e000      	b.n	800896c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800896a:	2302      	movs	r3, #2
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3728      	adds	r7, #40	; 0x28
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b0ba      	sub	sp, #232	; 0xe8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800899a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800899e:	f640 030f 	movw	r3, #2063	; 0x80f
 80089a2:	4013      	ands	r3, r2
 80089a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80089a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d115      	bne.n	80089dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 82a4 	beq.w	8008f1a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
      }
      return;
 80089da:	e29e      	b.n	8008f1a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8117 	beq.w	8008c14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80089e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80089f6:	4b85      	ldr	r3, [pc, #532]	; (8008c0c <HAL_UART_IRQHandler+0x298>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 810a 	beq.w	8008c14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d011      	beq.n	8008a30 <HAL_UART_IRQHandler+0xbc>
 8008a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a26:	f043 0201 	orr.w	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d011      	beq.n	8008a60 <HAL_UART_IRQHandler+0xec>
 8008a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a56:	f043 0204 	orr.w	r2, r3, #4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d011      	beq.n	8008a90 <HAL_UART_IRQHandler+0x11c>
 8008a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a86:	f043 0202 	orr.w	r2, r3, #2
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d017      	beq.n	8008acc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2208      	movs	r2, #8
 8008aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac2:	f043 0208 	orr.w	r2, r3, #8
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d012      	beq.n	8008afe <HAL_UART_IRQHandler+0x18a>
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00c      	beq.n	8008afe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af4:	f043 0220 	orr.w	r2, r3, #32
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 820a 	beq.w	8008f1e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	d005      	beq.n	8008b56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d04f      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fee8 	bl	800992c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b40      	cmp	r3, #64	; 0x40
 8008b68:	d141      	bne.n	8008bee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3308      	adds	r3, #8
 8008b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1d9      	bne.n	8008b6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d013      	beq.n	8008be6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <HAL_UART_IRQHandler+0x29c>)
 8008bc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fc ff2d 	bl	8005a2a <HAL_DMA_Abort_IT>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d017      	beq.n	8008c06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	e00f      	b.n	8008c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9a4 	bl	8008f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	e00b      	b.n	8008c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9a0 	bl	8008f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf4:	e007      	b.n	8008c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f99c 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008c04:	e18b      	b.n	8008f1e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c06:	bf00      	nop
    return;
 8008c08:	e189      	b.n	8008f1e <HAL_UART_IRQHandler+0x5aa>
 8008c0a:	bf00      	nop
 8008c0c:	04000120 	.word	0x04000120
 8008c10:	080099f3 	.word	0x080099f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	f040 8144 	bne.w	8008ea6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 813d 	beq.w	8008ea6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8136 	beq.w	8008ea6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	f040 80b2 	bne.w	8008db6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 815d 	beq.w	8008f22 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c72:	429a      	cmp	r2, r3
 8008c74:	f080 8155 	bcs.w	8008f22 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8c:	f000 8085 	beq.w	8008d9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1da      	bne.n	8008c90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e1      	bne.n	8008cda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e3      	bne.n	8008d16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fc fdd8 	bl	800594a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8ca 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008db4:	e0b5      	b.n	8008f22 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 80a7 	beq.w	8008f26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8008dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80a2 	beq.w	8008f26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e04:	647b      	str	r3, [r7, #68]	; 0x44
 8008e06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e4      	bne.n	8008de2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	623b      	str	r3, [r7, #32]
   return(result);
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e3      	bne.n	8008e18 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	617b      	str	r3, [r7, #20]
   return(result);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e4      	bne.n	8008e62 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f852 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ea4:	e03f      	b.n	8008f26 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00e      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x55c>
 8008eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f849 	bl	8008f60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ece:	e02d      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00e      	beq.n	8008efa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d01c      	beq.n	8008f2a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
    }
    return;
 8008ef8:	e017      	b.n	8008f2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d012      	beq.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
 8008f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fe3e 	bl	8009b94 <UART_EndTransmit_IT>
    return;
 8008f18:	e008      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f1a:	bf00      	nop
 8008f1c:	e006      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008f1e:	bf00      	nop
 8008f20:	e004      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008f2a:	bf00      	nop
  }

}
 8008f2c:	37e8      	adds	r7, #232	; 0xe8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop

08008f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	4ba7      	ldr	r3, [pc, #668]	; (800923c <UART_SetConfig+0x2c8>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	6979      	ldr	r1, [r7, #20]
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a95      	ldr	r2, [pc, #596]	; (8009240 <UART_SetConfig+0x2cc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d120      	bne.n	8009032 <UART_SetConfig+0xbe>
 8008ff0:	4b94      	ldr	r3, [pc, #592]	; (8009244 <UART_SetConfig+0x2d0>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d816      	bhi.n	800902c <UART_SetConfig+0xb8>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0x90>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009015 	.word	0x08009015
 8009008:	08009021 	.word	0x08009021
 800900c:	0800901b 	.word	0x0800901b
 8009010:	08009027 	.word	0x08009027
 8009014:	2301      	movs	r3, #1
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e14f      	b.n	80092ba <UART_SetConfig+0x346>
 800901a:	2302      	movs	r3, #2
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e14c      	b.n	80092ba <UART_SetConfig+0x346>
 8009020:	2304      	movs	r3, #4
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e149      	b.n	80092ba <UART_SetConfig+0x346>
 8009026:	2308      	movs	r3, #8
 8009028:	77fb      	strb	r3, [r7, #31]
 800902a:	e146      	b.n	80092ba <UART_SetConfig+0x346>
 800902c:	2310      	movs	r3, #16
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	e143      	b.n	80092ba <UART_SetConfig+0x346>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a84      	ldr	r2, [pc, #528]	; (8009248 <UART_SetConfig+0x2d4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d132      	bne.n	80090a2 <UART_SetConfig+0x12e>
 800903c:	4b81      	ldr	r3, [pc, #516]	; (8009244 <UART_SetConfig+0x2d0>)
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009042:	f003 030c 	and.w	r3, r3, #12
 8009046:	2b0c      	cmp	r3, #12
 8009048:	d828      	bhi.n	800909c <UART_SetConfig+0x128>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <UART_SetConfig+0xdc>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	08009085 	.word	0x08009085
 8009054:	0800909d 	.word	0x0800909d
 8009058:	0800909d 	.word	0x0800909d
 800905c:	0800909d 	.word	0x0800909d
 8009060:	08009091 	.word	0x08009091
 8009064:	0800909d 	.word	0x0800909d
 8009068:	0800909d 	.word	0x0800909d
 800906c:	0800909d 	.word	0x0800909d
 8009070:	0800908b 	.word	0x0800908b
 8009074:	0800909d 	.word	0x0800909d
 8009078:	0800909d 	.word	0x0800909d
 800907c:	0800909d 	.word	0x0800909d
 8009080:	08009097 	.word	0x08009097
 8009084:	2300      	movs	r3, #0
 8009086:	77fb      	strb	r3, [r7, #31]
 8009088:	e117      	b.n	80092ba <UART_SetConfig+0x346>
 800908a:	2302      	movs	r3, #2
 800908c:	77fb      	strb	r3, [r7, #31]
 800908e:	e114      	b.n	80092ba <UART_SetConfig+0x346>
 8009090:	2304      	movs	r3, #4
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e111      	b.n	80092ba <UART_SetConfig+0x346>
 8009096:	2308      	movs	r3, #8
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e10e      	b.n	80092ba <UART_SetConfig+0x346>
 800909c:	2310      	movs	r3, #16
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e10b      	b.n	80092ba <UART_SetConfig+0x346>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a69      	ldr	r2, [pc, #420]	; (800924c <UART_SetConfig+0x2d8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d120      	bne.n	80090ee <UART_SetConfig+0x17a>
 80090ac:	4b65      	ldr	r3, [pc, #404]	; (8009244 <UART_SetConfig+0x2d0>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090b6:	2b30      	cmp	r3, #48	; 0x30
 80090b8:	d013      	beq.n	80090e2 <UART_SetConfig+0x16e>
 80090ba:	2b30      	cmp	r3, #48	; 0x30
 80090bc:	d814      	bhi.n	80090e8 <UART_SetConfig+0x174>
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d009      	beq.n	80090d6 <UART_SetConfig+0x162>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d810      	bhi.n	80090e8 <UART_SetConfig+0x174>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <UART_SetConfig+0x15c>
 80090ca:	2b10      	cmp	r3, #16
 80090cc:	d006      	beq.n	80090dc <UART_SetConfig+0x168>
 80090ce:	e00b      	b.n	80090e8 <UART_SetConfig+0x174>
 80090d0:	2300      	movs	r3, #0
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e0f1      	b.n	80092ba <UART_SetConfig+0x346>
 80090d6:	2302      	movs	r3, #2
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e0ee      	b.n	80092ba <UART_SetConfig+0x346>
 80090dc:	2304      	movs	r3, #4
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e0eb      	b.n	80092ba <UART_SetConfig+0x346>
 80090e2:	2308      	movs	r3, #8
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e0e8      	b.n	80092ba <UART_SetConfig+0x346>
 80090e8:	2310      	movs	r3, #16
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e0e5      	b.n	80092ba <UART_SetConfig+0x346>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a57      	ldr	r2, [pc, #348]	; (8009250 <UART_SetConfig+0x2dc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d120      	bne.n	800913a <UART_SetConfig+0x1c6>
 80090f8:	4b52      	ldr	r3, [pc, #328]	; (8009244 <UART_SetConfig+0x2d0>)
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009102:	2bc0      	cmp	r3, #192	; 0xc0
 8009104:	d013      	beq.n	800912e <UART_SetConfig+0x1ba>
 8009106:	2bc0      	cmp	r3, #192	; 0xc0
 8009108:	d814      	bhi.n	8009134 <UART_SetConfig+0x1c0>
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	d009      	beq.n	8009122 <UART_SetConfig+0x1ae>
 800910e:	2b80      	cmp	r3, #128	; 0x80
 8009110:	d810      	bhi.n	8009134 <UART_SetConfig+0x1c0>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <UART_SetConfig+0x1a8>
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d006      	beq.n	8009128 <UART_SetConfig+0x1b4>
 800911a:	e00b      	b.n	8009134 <UART_SetConfig+0x1c0>
 800911c:	2300      	movs	r3, #0
 800911e:	77fb      	strb	r3, [r7, #31]
 8009120:	e0cb      	b.n	80092ba <UART_SetConfig+0x346>
 8009122:	2302      	movs	r3, #2
 8009124:	77fb      	strb	r3, [r7, #31]
 8009126:	e0c8      	b.n	80092ba <UART_SetConfig+0x346>
 8009128:	2304      	movs	r3, #4
 800912a:	77fb      	strb	r3, [r7, #31]
 800912c:	e0c5      	b.n	80092ba <UART_SetConfig+0x346>
 800912e:	2308      	movs	r3, #8
 8009130:	77fb      	strb	r3, [r7, #31]
 8009132:	e0c2      	b.n	80092ba <UART_SetConfig+0x346>
 8009134:	2310      	movs	r3, #16
 8009136:	77fb      	strb	r3, [r7, #31]
 8009138:	e0bf      	b.n	80092ba <UART_SetConfig+0x346>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a45      	ldr	r2, [pc, #276]	; (8009254 <UART_SetConfig+0x2e0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d125      	bne.n	8009190 <UART_SetConfig+0x21c>
 8009144:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <UART_SetConfig+0x2d0>)
 8009146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009152:	d017      	beq.n	8009184 <UART_SetConfig+0x210>
 8009154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009158:	d817      	bhi.n	800918a <UART_SetConfig+0x216>
 800915a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800915e:	d00b      	beq.n	8009178 <UART_SetConfig+0x204>
 8009160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009164:	d811      	bhi.n	800918a <UART_SetConfig+0x216>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <UART_SetConfig+0x1fe>
 800916a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916e:	d006      	beq.n	800917e <UART_SetConfig+0x20a>
 8009170:	e00b      	b.n	800918a <UART_SetConfig+0x216>
 8009172:	2300      	movs	r3, #0
 8009174:	77fb      	strb	r3, [r7, #31]
 8009176:	e0a0      	b.n	80092ba <UART_SetConfig+0x346>
 8009178:	2302      	movs	r3, #2
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e09d      	b.n	80092ba <UART_SetConfig+0x346>
 800917e:	2304      	movs	r3, #4
 8009180:	77fb      	strb	r3, [r7, #31]
 8009182:	e09a      	b.n	80092ba <UART_SetConfig+0x346>
 8009184:	2308      	movs	r3, #8
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e097      	b.n	80092ba <UART_SetConfig+0x346>
 800918a:	2310      	movs	r3, #16
 800918c:	77fb      	strb	r3, [r7, #31]
 800918e:	e094      	b.n	80092ba <UART_SetConfig+0x346>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a30      	ldr	r2, [pc, #192]	; (8009258 <UART_SetConfig+0x2e4>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d125      	bne.n	80091e6 <UART_SetConfig+0x272>
 800919a:	4b2a      	ldr	r3, [pc, #168]	; (8009244 <UART_SetConfig+0x2d0>)
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091a8:	d017      	beq.n	80091da <UART_SetConfig+0x266>
 80091aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091ae:	d817      	bhi.n	80091e0 <UART_SetConfig+0x26c>
 80091b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b4:	d00b      	beq.n	80091ce <UART_SetConfig+0x25a>
 80091b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ba:	d811      	bhi.n	80091e0 <UART_SetConfig+0x26c>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <UART_SetConfig+0x254>
 80091c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091c4:	d006      	beq.n	80091d4 <UART_SetConfig+0x260>
 80091c6:	e00b      	b.n	80091e0 <UART_SetConfig+0x26c>
 80091c8:	2301      	movs	r3, #1
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e075      	b.n	80092ba <UART_SetConfig+0x346>
 80091ce:	2302      	movs	r3, #2
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	e072      	b.n	80092ba <UART_SetConfig+0x346>
 80091d4:	2304      	movs	r3, #4
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e06f      	b.n	80092ba <UART_SetConfig+0x346>
 80091da:	2308      	movs	r3, #8
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e06c      	b.n	80092ba <UART_SetConfig+0x346>
 80091e0:	2310      	movs	r3, #16
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e069      	b.n	80092ba <UART_SetConfig+0x346>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a1c      	ldr	r2, [pc, #112]	; (800925c <UART_SetConfig+0x2e8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d137      	bne.n	8009260 <UART_SetConfig+0x2ec>
 80091f0:	4b14      	ldr	r3, [pc, #80]	; (8009244 <UART_SetConfig+0x2d0>)
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80091fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091fe:	d017      	beq.n	8009230 <UART_SetConfig+0x2bc>
 8009200:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009204:	d817      	bhi.n	8009236 <UART_SetConfig+0x2c2>
 8009206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920a:	d00b      	beq.n	8009224 <UART_SetConfig+0x2b0>
 800920c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009210:	d811      	bhi.n	8009236 <UART_SetConfig+0x2c2>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <UART_SetConfig+0x2aa>
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921a:	d006      	beq.n	800922a <UART_SetConfig+0x2b6>
 800921c:	e00b      	b.n	8009236 <UART_SetConfig+0x2c2>
 800921e:	2300      	movs	r3, #0
 8009220:	77fb      	strb	r3, [r7, #31]
 8009222:	e04a      	b.n	80092ba <UART_SetConfig+0x346>
 8009224:	2302      	movs	r3, #2
 8009226:	77fb      	strb	r3, [r7, #31]
 8009228:	e047      	b.n	80092ba <UART_SetConfig+0x346>
 800922a:	2304      	movs	r3, #4
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e044      	b.n	80092ba <UART_SetConfig+0x346>
 8009230:	2308      	movs	r3, #8
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e041      	b.n	80092ba <UART_SetConfig+0x346>
 8009236:	2310      	movs	r3, #16
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e03e      	b.n	80092ba <UART_SetConfig+0x346>
 800923c:	efff69f3 	.word	0xefff69f3
 8009240:	40011000 	.word	0x40011000
 8009244:	40023800 	.word	0x40023800
 8009248:	40004400 	.word	0x40004400
 800924c:	40004800 	.word	0x40004800
 8009250:	40004c00 	.word	0x40004c00
 8009254:	40005000 	.word	0x40005000
 8009258:	40011400 	.word	0x40011400
 800925c:	40007800 	.word	0x40007800
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a71      	ldr	r2, [pc, #452]	; (800942c <UART_SetConfig+0x4b8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d125      	bne.n	80092b6 <UART_SetConfig+0x342>
 800926a:	4b71      	ldr	r3, [pc, #452]	; (8009430 <UART_SetConfig+0x4bc>)
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009274:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009278:	d017      	beq.n	80092aa <UART_SetConfig+0x336>
 800927a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800927e:	d817      	bhi.n	80092b0 <UART_SetConfig+0x33c>
 8009280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009284:	d00b      	beq.n	800929e <UART_SetConfig+0x32a>
 8009286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800928a:	d811      	bhi.n	80092b0 <UART_SetConfig+0x33c>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <UART_SetConfig+0x324>
 8009290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009294:	d006      	beq.n	80092a4 <UART_SetConfig+0x330>
 8009296:	e00b      	b.n	80092b0 <UART_SetConfig+0x33c>
 8009298:	2300      	movs	r3, #0
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e00d      	b.n	80092ba <UART_SetConfig+0x346>
 800929e:	2302      	movs	r3, #2
 80092a0:	77fb      	strb	r3, [r7, #31]
 80092a2:	e00a      	b.n	80092ba <UART_SetConfig+0x346>
 80092a4:	2304      	movs	r3, #4
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e007      	b.n	80092ba <UART_SetConfig+0x346>
 80092aa:	2308      	movs	r3, #8
 80092ac:	77fb      	strb	r3, [r7, #31]
 80092ae:	e004      	b.n	80092ba <UART_SetConfig+0x346>
 80092b0:	2310      	movs	r3, #16
 80092b2:	77fb      	strb	r3, [r7, #31]
 80092b4:	e001      	b.n	80092ba <UART_SetConfig+0x346>
 80092b6:	2310      	movs	r3, #16
 80092b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c2:	d15a      	bne.n	800937a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80092c4:	7ffb      	ldrb	r3, [r7, #31]
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d827      	bhi.n	800931a <UART_SetConfig+0x3a6>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <UART_SetConfig+0x35c>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	0800931b 	.word	0x0800931b
 80092e0:	0800930b 	.word	0x0800930b
 80092e4:	0800931b 	.word	0x0800931b
 80092e8:	0800931b 	.word	0x0800931b
 80092ec:	0800931b 	.word	0x0800931b
 80092f0:	08009313 	.word	0x08009313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f4:	f7fd faa4 	bl	8006840 <HAL_RCC_GetPCLK1Freq>
 80092f8:	61b8      	str	r0, [r7, #24]
        break;
 80092fa:	e013      	b.n	8009324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092fc:	f7fd fab4 	bl	8006868 <HAL_RCC_GetPCLK2Freq>
 8009300:	61b8      	str	r0, [r7, #24]
        break;
 8009302:	e00f      	b.n	8009324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009304:	4b4b      	ldr	r3, [pc, #300]	; (8009434 <UART_SetConfig+0x4c0>)
 8009306:	61bb      	str	r3, [r7, #24]
        break;
 8009308:	e00c      	b.n	8009324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930a:	f7fd f9ab 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 800930e:	61b8      	str	r0, [r7, #24]
        break;
 8009310:	e008      	b.n	8009324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009316:	61bb      	str	r3, [r7, #24]
        break;
 8009318:	e004      	b.n	8009324 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	77bb      	strb	r3, [r7, #30]
        break;
 8009322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d074      	beq.n	8009414 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	005a      	lsls	r2, r3, #1
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b0f      	cmp	r3, #15
 8009344:	d916      	bls.n	8009374 <UART_SetConfig+0x400>
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934c:	d212      	bcs.n	8009374 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	b29b      	uxth	r3, r3
 8009352:	f023 030f 	bic.w	r3, r3, #15
 8009356:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	b29b      	uxth	r3, r3
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	b29a      	uxth	r2, r3
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	4313      	orrs	r3, r2
 8009368:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	89fa      	ldrh	r2, [r7, #14]
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	e04f      	b.n	8009414 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	77bb      	strb	r3, [r7, #30]
 8009378:	e04c      	b.n	8009414 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800937a:	7ffb      	ldrb	r3, [r7, #31]
 800937c:	2b08      	cmp	r3, #8
 800937e:	d828      	bhi.n	80093d2 <UART_SetConfig+0x45e>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <UART_SetConfig+0x414>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	080093d3 	.word	0x080093d3
 8009398:	080093c3 	.word	0x080093c3
 800939c:	080093d3 	.word	0x080093d3
 80093a0:	080093d3 	.word	0x080093d3
 80093a4:	080093d3 	.word	0x080093d3
 80093a8:	080093cb 	.word	0x080093cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ac:	f7fd fa48 	bl	8006840 <HAL_RCC_GetPCLK1Freq>
 80093b0:	61b8      	str	r0, [r7, #24]
        break;
 80093b2:	e013      	b.n	80093dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b4:	f7fd fa58 	bl	8006868 <HAL_RCC_GetPCLK2Freq>
 80093b8:	61b8      	str	r0, [r7, #24]
        break;
 80093ba:	e00f      	b.n	80093dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093bc:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <UART_SetConfig+0x4c0>)
 80093be:	61bb      	str	r3, [r7, #24]
        break;
 80093c0:	e00c      	b.n	80093dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093c2:	f7fd f94f 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 80093c6:	61b8      	str	r0, [r7, #24]
        break;
 80093c8:	e008      	b.n	80093dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ce:	61bb      	str	r3, [r7, #24]
        break;
 80093d0:	e004      	b.n	80093dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	77bb      	strb	r3, [r7, #30]
        break;
 80093da:	bf00      	nop
    }

    if (pclk != 0U)
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d018      	beq.n	8009414 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	085a      	lsrs	r2, r3, #1
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	441a      	add	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b0f      	cmp	r3, #15
 80093fa:	d909      	bls.n	8009410 <UART_SetConfig+0x49c>
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009402:	d205      	bcs.n	8009410 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	e001      	b.n	8009414 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009420:	7fbb      	ldrb	r3, [r7, #30]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	40007c00 	.word	0x40007c00
 8009430:	40023800 	.word	0x40023800
 8009434:	00f42400 	.word	0x00f42400

08009438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01a      	beq.n	800954e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009536:	d10a      	bne.n	800954e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
  }
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af02      	add	r7, sp, #8
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800958c:	f7fb fa9c 	bl	8004ac8 <HAL_GetTick>
 8009590:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10e      	bne.n	80095be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f82d 	bl	800960e <UART_WaitOnFlagUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e023      	b.n	8009606 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d10e      	bne.n	80095ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f817 	bl	800960e <UART_WaitOnFlagUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e00d      	b.n	8009606 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2220      	movs	r2, #32
 80095ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2220      	movs	r2, #32
 80095f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b09c      	sub	sp, #112	; 0x70
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	603b      	str	r3, [r7, #0]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800961e:	e0a5      	b.n	800976c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009626:	f000 80a1 	beq.w	800976c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800962a:	f7fb fa4d 	bl	8004ac8 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009636:	429a      	cmp	r2, r3
 8009638:	d302      	bcc.n	8009640 <UART_WaitOnFlagUntilTimeout+0x32>
 800963a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800963c:	2b00      	cmp	r3, #0
 800963e:	d13e      	bne.n	80096be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800964e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009654:	667b      	str	r3, [r7, #100]	; 0x64
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800965e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009660:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800966c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e6      	bne.n	8009640 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	663b      	str	r3, [r7, #96]	; 0x60
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009692:	64ba      	str	r2, [r7, #72]	; 0x48
 8009694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e5      	bne.n	8009672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e067      	b.n	800978e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d04f      	beq.n	800976c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096da:	d147      	bne.n	800976c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
 8009706:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800970a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3308      	adds	r3, #8
 800971e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	613b      	str	r3, [r7, #16]
   return(result);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009738:	623a      	str	r2, [r7, #32]
 800973a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	61bb      	str	r3, [r7, #24]
   return(result);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2220      	movs	r2, #32
 8009756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e010      	b.n	800978e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	69da      	ldr	r2, [r3, #28]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4013      	ands	r3, r2
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	429a      	cmp	r2, r3
 800977a:	bf0c      	ite	eq
 800977c:	2301      	moveq	r3, #1
 800977e:	2300      	movne	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	461a      	mov	r2, r3
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	429a      	cmp	r2, r3
 8009788:	f43f af4a 	beq.w	8009620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3770      	adds	r7, #112	; 0x70
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009798:	b480      	push	{r7}
 800979a:	b097      	sub	sp, #92	; 0x5c
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ca:	d10e      	bne.n	80097ea <UART_Start_Receive_IT+0x52>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d105      	bne.n	80097e0 <UART_Start_Receive_IT+0x48>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80097da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097de:	e02d      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	22ff      	movs	r2, #255	; 0xff
 80097e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097e8:	e028      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10d      	bne.n	800980e <UART_Start_Receive_IT+0x76>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <UART_Start_Receive_IT+0x6c>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009802:	e01b      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	227f      	movs	r2, #127	; 0x7f
 8009808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800980c:	e016      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009816:	d10d      	bne.n	8009834 <UART_Start_Receive_IT+0x9c>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d104      	bne.n	800982a <UART_Start_Receive_IT+0x92>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	227f      	movs	r2, #127	; 0x7f
 8009824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009828:	e008      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	223f      	movs	r2, #63	; 0x3f
 800982e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009832:	e003      	b.n	800983c <UART_Start_Receive_IT+0xa4>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2222      	movs	r2, #34	; 0x22
 8009848:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	f043 0301 	orr.w	r3, r3, #1
 8009860:	657b      	str	r3, [r7, #84]	; 0x54
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800986a:	64ba      	str	r2, [r7, #72]	; 0x48
 800986c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009886:	d107      	bne.n	8009898 <UART_Start_Receive_IT+0x100>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a24      	ldr	r2, [pc, #144]	; (8009924 <UART_Start_Receive_IT+0x18c>)
 8009894:	665a      	str	r2, [r3, #100]	; 0x64
 8009896:	e002      	b.n	800989e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4a23      	ldr	r2, [pc, #140]	; (8009928 <UART_Start_Receive_IT+0x190>)
 800989c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d019      	beq.n	80098e2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80098c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
 80098ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_Start_Receive_IT+0x116>
 80098e0:	e018      	b.n	8009914 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	613b      	str	r3, [r7, #16]
   return(result);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f043 0320 	orr.w	r3, r3, #32
 80098f6:	653b      	str	r3, [r7, #80]	; 0x50
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009900:	623b      	str	r3, [r7, #32]
 8009902:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	69f9      	ldr	r1, [r7, #28]
 8009906:	6a3a      	ldr	r2, [r7, #32]
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	61bb      	str	r3, [r7, #24]
   return(result);
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e6      	bne.n	80098e2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	375c      	adds	r7, #92	; 0x5c
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	08009d45 	.word	0x08009d45
 8009928:	08009be9 	.word	0x08009be9

0800992c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b095      	sub	sp, #84	; 0x54
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009952:	643b      	str	r3, [r7, #64]	; 0x40
 8009954:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e6      	bne.n	8009934 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	61fb      	str	r3, [r7, #28]
   return(result);
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	64bb      	str	r3, [r7, #72]	; 0x48
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d118      	bne.n	80099d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f023 0310 	bic.w	r3, r3, #16
 80099b6:	647b      	str	r3, [r7, #68]	; 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6979      	ldr	r1, [r7, #20]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	613b      	str	r3, [r7, #16]
   return(result);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80099e6:	bf00      	nop
 80099e8:	3754      	adds	r7, #84	; 0x54
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fa8f 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b08f      	sub	sp, #60	; 0x3c
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a2a:	2b21      	cmp	r3, #33	; 0x21
 8009a2c:	d14c      	bne.n	8009ac8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d132      	bne.n	8009aa0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a80:	633b      	str	r3, [r7, #48]	; 0x30
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6979      	ldr	r1, [r7, #20]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	613b      	str	r3, [r7, #16]
   return(result);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e6      	bne.n	8009a6c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009a9e:	e013      	b.n	8009ac8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009ac8:	bf00      	nop
 8009aca:	373c      	adds	r7, #60	; 0x3c
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b091      	sub	sp, #68	; 0x44
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae0:	2b21      	cmp	r3, #33	; 0x21
 8009ae2:	d151      	bne.n	8009b88 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d132      	bne.n	8009b56 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	623b      	str	r3, [r7, #32]
   return(result);
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e6      	bne.n	8009af0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	637b      	str	r3, [r7, #52]	; 0x34
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	69b9      	ldr	r1, [r7, #24]
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e6      	bne.n	8009b22 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b54:	e018      	b.n	8009b88 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b70:	1c9a      	adds	r2, r3, #2
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009b88:	bf00      	nop
 8009b8a:	3744      	adds	r7, #68	; 0x44
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb0:	61fb      	str	r3, [r7, #28]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	61bb      	str	r3, [r7, #24]
 8009bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6979      	ldr	r1, [r7, #20]
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fa fec0 	bl	8004960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009be0:	bf00      	nop
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b096      	sub	sp, #88	; 0x58
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bf6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfe:	2b22      	cmp	r3, #34	; 0x22
 8009c00:	f040 8094 	bne.w	8009d2c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c0e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c12:	b2d9      	uxtb	r1, r3
 8009c14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1e:	400a      	ands	r2, r1
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	3b01      	subs	r3, #1
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d177      	bne.n	8009d3c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c60:	653b      	str	r3, [r7, #80]	; 0x50
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e6      	bne.n	8009c4c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	f023 0301 	bic.w	r3, r3, #1
 8009c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8009ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1e5      	bne.n	8009c7e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d12e      	bne.n	8009d24 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f023 0310 	bic.w	r3, r3, #16
 8009ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cea:	61fb      	str	r3, [r7, #28]
 8009cec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	69b9      	ldr	r1, [r7, #24]
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e6      	bne.n	8009ccc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f003 0310 	and.w	r3, r3, #16
 8009d08:	2b10      	cmp	r3, #16
 8009d0a:	d103      	bne.n	8009d14 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2210      	movs	r2, #16
 8009d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff f913 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d22:	e00b      	b.n	8009d3c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7fa fdb1 	bl	800488c <HAL_UART_RxCpltCallback>
}
 8009d2a:	e007      	b.n	8009d3c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 0208 	orr.w	r2, r2, #8
 8009d3a:	619a      	str	r2, [r3, #24]
}
 8009d3c:	bf00      	nop
 8009d3e:	3758      	adds	r7, #88	; 0x58
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b096      	sub	sp, #88	; 0x58
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5a:	2b22      	cmp	r3, #34	; 0x22
 8009d5c:	f040 8094 	bne.w	8009e88 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009d74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d78:	4013      	ands	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d84:	1c9a      	adds	r2, r3, #2
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d177      	bne.n	8009e98 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8009dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e6      	bne.n	8009da8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	e853 3f00 	ldrex	r3, [r3]
 8009de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	f023 0301 	bic.w	r3, r3, #1
 8009df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e5      	bne.n	8009dda <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d12e      	bne.n	8009e80 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f023 0310 	bic.w	r3, r3, #16
 8009e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	613b      	str	r3, [r7, #16]
   return(result);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	f003 0310 	and.w	r3, r3, #16
 8009e64:	2b10      	cmp	r3, #16
 8009e66:	d103      	bne.n	8009e70 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2210      	movs	r2, #16
 8009e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff f865 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e7e:	e00b      	b.n	8009e98 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7fa fd03 	bl	800488c <HAL_UART_RxCpltCallback>
}
 8009e86:	e007      	b.n	8009e98 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	699a      	ldr	r2, [r3, #24]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0208 	orr.w	r2, r2, #8
 8009e96:	619a      	str	r2, [r3, #24]
}
 8009e98:	bf00      	nop
 8009e9a:	3758      	adds	r7, #88	; 0x58
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <__errno>:
 8009ea0:	4b01      	ldr	r3, [pc, #4]	; (8009ea8 <__errno+0x8>)
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	20000130 	.word	0x20000130

08009eac <__libc_init_array>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4d0d      	ldr	r5, [pc, #52]	; (8009ee4 <__libc_init_array+0x38>)
 8009eb0:	4c0d      	ldr	r4, [pc, #52]	; (8009ee8 <__libc_init_array+0x3c>)
 8009eb2:	1b64      	subs	r4, r4, r5
 8009eb4:	10a4      	asrs	r4, r4, #2
 8009eb6:	2600      	movs	r6, #0
 8009eb8:	42a6      	cmp	r6, r4
 8009eba:	d109      	bne.n	8009ed0 <__libc_init_array+0x24>
 8009ebc:	4d0b      	ldr	r5, [pc, #44]	; (8009eec <__libc_init_array+0x40>)
 8009ebe:	4c0c      	ldr	r4, [pc, #48]	; (8009ef0 <__libc_init_array+0x44>)
 8009ec0:	f004 ffcc 	bl	800ee5c <_init>
 8009ec4:	1b64      	subs	r4, r4, r5
 8009ec6:	10a4      	asrs	r4, r4, #2
 8009ec8:	2600      	movs	r6, #0
 8009eca:	42a6      	cmp	r6, r4
 8009ecc:	d105      	bne.n	8009eda <__libc_init_array+0x2e>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed4:	4798      	blx	r3
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	e7ee      	b.n	8009eb8 <__libc_init_array+0xc>
 8009eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ede:	4798      	blx	r3
 8009ee0:	3601      	adds	r6, #1
 8009ee2:	e7f2      	b.n	8009eca <__libc_init_array+0x1e>
 8009ee4:	080100fc 	.word	0x080100fc
 8009ee8:	080100fc 	.word	0x080100fc
 8009eec:	080100fc 	.word	0x080100fc
 8009ef0:	08010100 	.word	0x08010100

08009ef4 <memset>:
 8009ef4:	4402      	add	r2, r0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d100      	bne.n	8009efe <memset+0xa>
 8009efc:	4770      	bx	lr
 8009efe:	f803 1b01 	strb.w	r1, [r3], #1
 8009f02:	e7f9      	b.n	8009ef8 <memset+0x4>

08009f04 <__cvt>:
 8009f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f06:	ed2d 8b02 	vpush	{d8}
 8009f0a:	eeb0 8b40 	vmov.f64	d8, d0
 8009f0e:	b085      	sub	sp, #20
 8009f10:	4617      	mov	r7, r2
 8009f12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f16:	ee18 2a90 	vmov	r2, s17
 8009f1a:	f025 0520 	bic.w	r5, r5, #32
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	bfb6      	itet	lt
 8009f22:	222d      	movlt	r2, #45	; 0x2d
 8009f24:	2200      	movge	r2, #0
 8009f26:	eeb1 8b40 	vneglt.f64	d8, d0
 8009f2a:	2d46      	cmp	r5, #70	; 0x46
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	d004      	beq.n	8009f3c <__cvt+0x38>
 8009f32:	2d45      	cmp	r5, #69	; 0x45
 8009f34:	d100      	bne.n	8009f38 <__cvt+0x34>
 8009f36:	3401      	adds	r4, #1
 8009f38:	2102      	movs	r1, #2
 8009f3a:	e000      	b.n	8009f3e <__cvt+0x3a>
 8009f3c:	2103      	movs	r1, #3
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	ab02      	add	r3, sp, #8
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4622      	mov	r2, r4
 8009f48:	4633      	mov	r3, r6
 8009f4a:	eeb0 0b48 	vmov.f64	d0, d8
 8009f4e:	f001 fe0f 	bl	800bb70 <_dtoa_r>
 8009f52:	2d47      	cmp	r5, #71	; 0x47
 8009f54:	d109      	bne.n	8009f6a <__cvt+0x66>
 8009f56:	07fb      	lsls	r3, r7, #31
 8009f58:	d407      	bmi.n	8009f6a <__cvt+0x66>
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f5e:	1a1b      	subs	r3, r3, r0
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	b005      	add	sp, #20
 8009f64:	ecbd 8b02 	vpop	{d8}
 8009f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6a:	2d46      	cmp	r5, #70	; 0x46
 8009f6c:	eb00 0204 	add.w	r2, r0, r4
 8009f70:	d10c      	bne.n	8009f8c <__cvt+0x88>
 8009f72:	7803      	ldrb	r3, [r0, #0]
 8009f74:	2b30      	cmp	r3, #48	; 0x30
 8009f76:	d107      	bne.n	8009f88 <__cvt+0x84>
 8009f78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f80:	bf1c      	itt	ne
 8009f82:	f1c4 0401 	rsbne	r4, r4, #1
 8009f86:	6034      	strne	r4, [r6, #0]
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	441a      	add	r2, r3
 8009f8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f94:	bf08      	it	eq
 8009f96:	9203      	streq	r2, [sp, #12]
 8009f98:	2130      	movs	r1, #48	; 0x30
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d2dc      	bcs.n	8009f5a <__cvt+0x56>
 8009fa0:	1c5c      	adds	r4, r3, #1
 8009fa2:	9403      	str	r4, [sp, #12]
 8009fa4:	7019      	strb	r1, [r3, #0]
 8009fa6:	e7f8      	b.n	8009f9a <__cvt+0x96>

08009fa8 <__exponent>:
 8009fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009faa:	4603      	mov	r3, r0
 8009fac:	2900      	cmp	r1, #0
 8009fae:	bfb8      	it	lt
 8009fb0:	4249      	neglt	r1, r1
 8009fb2:	f803 2b02 	strb.w	r2, [r3], #2
 8009fb6:	bfb4      	ite	lt
 8009fb8:	222d      	movlt	r2, #45	; 0x2d
 8009fba:	222b      	movge	r2, #43	; 0x2b
 8009fbc:	2909      	cmp	r1, #9
 8009fbe:	7042      	strb	r2, [r0, #1]
 8009fc0:	dd2a      	ble.n	800a018 <__exponent+0x70>
 8009fc2:	f10d 0407 	add.w	r4, sp, #7
 8009fc6:	46a4      	mov	ip, r4
 8009fc8:	270a      	movs	r7, #10
 8009fca:	46a6      	mov	lr, r4
 8009fcc:	460a      	mov	r2, r1
 8009fce:	fb91 f6f7 	sdiv	r6, r1, r7
 8009fd2:	fb07 1516 	mls	r5, r7, r6, r1
 8009fd6:	3530      	adds	r5, #48	; 0x30
 8009fd8:	2a63      	cmp	r2, #99	; 0x63
 8009fda:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	dcf1      	bgt.n	8009fca <__exponent+0x22>
 8009fe6:	3130      	adds	r1, #48	; 0x30
 8009fe8:	f1ae 0502 	sub.w	r5, lr, #2
 8009fec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ff0:	1c44      	adds	r4, r0, #1
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4561      	cmp	r1, ip
 8009ff6:	d30a      	bcc.n	800a00e <__exponent+0x66>
 8009ff8:	f10d 0209 	add.w	r2, sp, #9
 8009ffc:	eba2 020e 	sub.w	r2, r2, lr
 800a000:	4565      	cmp	r5, ip
 800a002:	bf88      	it	hi
 800a004:	2200      	movhi	r2, #0
 800a006:	4413      	add	r3, r2
 800a008:	1a18      	subs	r0, r3, r0
 800a00a:	b003      	add	sp, #12
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a012:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a016:	e7ed      	b.n	8009ff4 <__exponent+0x4c>
 800a018:	2330      	movs	r3, #48	; 0x30
 800a01a:	3130      	adds	r1, #48	; 0x30
 800a01c:	7083      	strb	r3, [r0, #2]
 800a01e:	70c1      	strb	r1, [r0, #3]
 800a020:	1d03      	adds	r3, r0, #4
 800a022:	e7f1      	b.n	800a008 <__exponent+0x60>
 800a024:	0000      	movs	r0, r0
	...

0800a028 <_printf_float>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	b08b      	sub	sp, #44	; 0x2c
 800a02e:	460c      	mov	r4, r1
 800a030:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a034:	4616      	mov	r6, r2
 800a036:	461f      	mov	r7, r3
 800a038:	4605      	mov	r5, r0
 800a03a:	f002 fe8b 	bl	800cd54 <_localeconv_r>
 800a03e:	f8d0 b000 	ldr.w	fp, [r0]
 800a042:	4658      	mov	r0, fp
 800a044:	f7f6 f906 	bl	8000254 <strlen>
 800a048:	2300      	movs	r3, #0
 800a04a:	9308      	str	r3, [sp, #32]
 800a04c:	f8d8 3000 	ldr.w	r3, [r8]
 800a050:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a054:	6822      	ldr	r2, [r4, #0]
 800a056:	3307      	adds	r3, #7
 800a058:	f023 0307 	bic.w	r3, r3, #7
 800a05c:	f103 0108 	add.w	r1, r3, #8
 800a060:	f8c8 1000 	str.w	r1, [r8]
 800a064:	4682      	mov	sl, r0
 800a066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a06a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a06e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a2d0 <_printf_float+0x2a8>
 800a072:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a076:	eeb0 6bc0 	vabs.f64	d6, d0
 800a07a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	dd24      	ble.n	800a0ce <_printf_float+0xa6>
 800a084:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08c:	d502      	bpl.n	800a094 <_printf_float+0x6c>
 800a08e:	232d      	movs	r3, #45	; 0x2d
 800a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a094:	4b90      	ldr	r3, [pc, #576]	; (800a2d8 <_printf_float+0x2b0>)
 800a096:	4891      	ldr	r0, [pc, #580]	; (800a2dc <_printf_float+0x2b4>)
 800a098:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a09c:	bf94      	ite	ls
 800a09e:	4698      	movls	r8, r3
 800a0a0:	4680      	movhi	r8, r0
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	f022 0204 	bic.w	r2, r2, #4
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	9700      	str	r7, [sp, #0]
 800a0b2:	4633      	mov	r3, r6
 800a0b4:	aa09      	add	r2, sp, #36	; 0x24
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 f9d3 	bl	800a464 <_printf_common>
 800a0be:	3001      	adds	r0, #1
 800a0c0:	f040 808a 	bne.w	800a1d8 <_printf_float+0x1b0>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b00b      	add	sp, #44	; 0x2c
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	eeb4 0b40 	vcmp.f64	d0, d0
 800a0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d6:	d709      	bvc.n	800a0ec <_printf_float+0xc4>
 800a0d8:	ee10 3a90 	vmov	r3, s1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfbc      	itt	lt
 800a0e0:	232d      	movlt	r3, #45	; 0x2d
 800a0e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0e6:	487e      	ldr	r0, [pc, #504]	; (800a2e0 <_printf_float+0x2b8>)
 800a0e8:	4b7e      	ldr	r3, [pc, #504]	; (800a2e4 <_printf_float+0x2bc>)
 800a0ea:	e7d5      	b.n	800a098 <_printf_float+0x70>
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a0f2:	9104      	str	r1, [sp, #16]
 800a0f4:	1c59      	adds	r1, r3, #1
 800a0f6:	d13c      	bne.n	800a172 <_printf_float+0x14a>
 800a0f8:	2306      	movs	r3, #6
 800a0fa:	6063      	str	r3, [r4, #4]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9303      	str	r3, [sp, #12]
 800a100:	ab08      	add	r3, sp, #32
 800a102:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a10a:	ab07      	add	r3, sp, #28
 800a10c:	6861      	ldr	r1, [r4, #4]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	6022      	str	r2, [r4, #0]
 800a112:	f10d 031b 	add.w	r3, sp, #27
 800a116:	4628      	mov	r0, r5
 800a118:	f7ff fef4 	bl	8009f04 <__cvt>
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	9907      	ldr	r1, [sp, #28]
 800a120:	2b47      	cmp	r3, #71	; 0x47
 800a122:	4680      	mov	r8, r0
 800a124:	d108      	bne.n	800a138 <_printf_float+0x110>
 800a126:	1cc8      	adds	r0, r1, #3
 800a128:	db02      	blt.n	800a130 <_printf_float+0x108>
 800a12a:	6863      	ldr	r3, [r4, #4]
 800a12c:	4299      	cmp	r1, r3
 800a12e:	dd41      	ble.n	800a1b4 <_printf_float+0x18c>
 800a130:	f1a9 0902 	sub.w	r9, r9, #2
 800a134:	fa5f f989 	uxtb.w	r9, r9
 800a138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a13c:	d820      	bhi.n	800a180 <_printf_float+0x158>
 800a13e:	3901      	subs	r1, #1
 800a140:	464a      	mov	r2, r9
 800a142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a146:	9107      	str	r1, [sp, #28]
 800a148:	f7ff ff2e 	bl	8009fa8 <__exponent>
 800a14c:	9a08      	ldr	r2, [sp, #32]
 800a14e:	9004      	str	r0, [sp, #16]
 800a150:	1813      	adds	r3, r2, r0
 800a152:	2a01      	cmp	r2, #1
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	dc02      	bgt.n	800a15e <_printf_float+0x136>
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	07d2      	lsls	r2, r2, #31
 800a15c:	d501      	bpl.n	800a162 <_printf_float+0x13a>
 800a15e:	3301      	adds	r3, #1
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0a2      	beq.n	800a0b0 <_printf_float+0x88>
 800a16a:	232d      	movs	r3, #45	; 0x2d
 800a16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a170:	e79e      	b.n	800a0b0 <_printf_float+0x88>
 800a172:	9904      	ldr	r1, [sp, #16]
 800a174:	2947      	cmp	r1, #71	; 0x47
 800a176:	d1c1      	bne.n	800a0fc <_printf_float+0xd4>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1bf      	bne.n	800a0fc <_printf_float+0xd4>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e7bc      	b.n	800a0fa <_printf_float+0xd2>
 800a180:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a184:	d118      	bne.n	800a1b8 <_printf_float+0x190>
 800a186:	2900      	cmp	r1, #0
 800a188:	6863      	ldr	r3, [r4, #4]
 800a18a:	dd0b      	ble.n	800a1a4 <_printf_float+0x17c>
 800a18c:	6121      	str	r1, [r4, #16]
 800a18e:	b913      	cbnz	r3, 800a196 <_printf_float+0x16e>
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	07d0      	lsls	r0, r2, #31
 800a194:	d502      	bpl.n	800a19c <_printf_float+0x174>
 800a196:	3301      	adds	r3, #1
 800a198:	440b      	add	r3, r1
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2300      	movs	r3, #0
 800a19e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	e7de      	b.n	800a162 <_printf_float+0x13a>
 800a1a4:	b913      	cbnz	r3, 800a1ac <_printf_float+0x184>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	07d2      	lsls	r2, r2, #31
 800a1aa:	d501      	bpl.n	800a1b0 <_printf_float+0x188>
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	e7f4      	b.n	800a19a <_printf_float+0x172>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e7f2      	b.n	800a19a <_printf_float+0x172>
 800a1b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	4299      	cmp	r1, r3
 800a1bc:	db05      	blt.n	800a1ca <_printf_float+0x1a2>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6121      	str	r1, [r4, #16]
 800a1c2:	07d8      	lsls	r0, r3, #31
 800a1c4:	d5ea      	bpl.n	800a19c <_printf_float+0x174>
 800a1c6:	1c4b      	adds	r3, r1, #1
 800a1c8:	e7e7      	b.n	800a19a <_printf_float+0x172>
 800a1ca:	2900      	cmp	r1, #0
 800a1cc:	bfd4      	ite	le
 800a1ce:	f1c1 0202 	rsble	r2, r1, #2
 800a1d2:	2201      	movgt	r2, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	e7e0      	b.n	800a19a <_printf_float+0x172>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	055a      	lsls	r2, r3, #21
 800a1dc:	d407      	bmi.n	800a1ee <_printf_float+0x1c6>
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d12a      	bne.n	800a242 <_printf_float+0x21a>
 800a1ec:	e76a      	b.n	800a0c4 <_printf_float+0x9c>
 800a1ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a1f2:	f240 80e2 	bls.w	800a3ba <_printf_float+0x392>
 800a1f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a1fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	d133      	bne.n	800a26c <_printf_float+0x244>
 800a204:	4a38      	ldr	r2, [pc, #224]	; (800a2e8 <_printf_float+0x2c0>)
 800a206:	2301      	movs	r3, #1
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	f43f af58 	beq.w	800a0c4 <_printf_float+0x9c>
 800a214:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a218:	429a      	cmp	r2, r3
 800a21a:	db02      	blt.n	800a222 <_printf_float+0x1fa>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	07d8      	lsls	r0, r3, #31
 800a220:	d50f      	bpl.n	800a242 <_printf_float+0x21a>
 800a222:	4653      	mov	r3, sl
 800a224:	465a      	mov	r2, fp
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f af49 	beq.w	800a0c4 <_printf_float+0x9c>
 800a232:	f04f 0800 	mov.w	r8, #0
 800a236:	f104 091a 	add.w	r9, r4, #26
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4543      	cmp	r3, r8
 800a240:	dc09      	bgt.n	800a256 <_printf_float+0x22e>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	079b      	lsls	r3, r3, #30
 800a246:	f100 8108 	bmi.w	800a45a <_printf_float+0x432>
 800a24a:	68e0      	ldr	r0, [r4, #12]
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	4298      	cmp	r0, r3
 800a250:	bfb8      	it	lt
 800a252:	4618      	movlt	r0, r3
 800a254:	e738      	b.n	800a0c8 <_printf_float+0xa0>
 800a256:	2301      	movs	r3, #1
 800a258:	464a      	mov	r2, r9
 800a25a:	4631      	mov	r1, r6
 800a25c:	4628      	mov	r0, r5
 800a25e:	47b8      	blx	r7
 800a260:	3001      	adds	r0, #1
 800a262:	f43f af2f 	beq.w	800a0c4 <_printf_float+0x9c>
 800a266:	f108 0801 	add.w	r8, r8, #1
 800a26a:	e7e6      	b.n	800a23a <_printf_float+0x212>
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dc3c      	bgt.n	800a2ec <_printf_float+0x2c4>
 800a272:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <_printf_float+0x2c0>)
 800a274:	2301      	movs	r3, #1
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f af21 	beq.w	800a0c4 <_printf_float+0x9c>
 800a282:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a286:	4313      	orrs	r3, r2
 800a288:	d102      	bne.n	800a290 <_printf_float+0x268>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	07d9      	lsls	r1, r3, #31
 800a28e:	d5d8      	bpl.n	800a242 <_printf_float+0x21a>
 800a290:	4653      	mov	r3, sl
 800a292:	465a      	mov	r2, fp
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af12 	beq.w	800a0c4 <_printf_float+0x9c>
 800a2a0:	f04f 0900 	mov.w	r9, #0
 800a2a4:	f104 0a1a 	add.w	sl, r4, #26
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	425b      	negs	r3, r3
 800a2ac:	454b      	cmp	r3, r9
 800a2ae:	dc01      	bgt.n	800a2b4 <_printf_float+0x28c>
 800a2b0:	9b08      	ldr	r3, [sp, #32]
 800a2b2:	e795      	b.n	800a1e0 <_printf_float+0x1b8>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f af00 	beq.w	800a0c4 <_printf_float+0x9c>
 800a2c4:	f109 0901 	add.w	r9, r9, #1
 800a2c8:	e7ee      	b.n	800a2a8 <_printf_float+0x280>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	ffffffff 	.word	0xffffffff
 800a2d4:	7fefffff 	.word	0x7fefffff
 800a2d8:	0800fc30 	.word	0x0800fc30
 800a2dc:	0800fc34 	.word	0x0800fc34
 800a2e0:	0800fc3c 	.word	0x0800fc3c
 800a2e4:	0800fc38 	.word	0x0800fc38
 800a2e8:	08010041 	.word	0x08010041
 800a2ec:	9a08      	ldr	r2, [sp, #32]
 800a2ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bfa8      	it	ge
 800a2f4:	461a      	movge	r2, r3
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	4691      	mov	r9, r2
 800a2fa:	dc38      	bgt.n	800a36e <_printf_float+0x346>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9305      	str	r3, [sp, #20]
 800a300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a304:	f104 021a 	add.w	r2, r4, #26
 800a308:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a30a:	9905      	ldr	r1, [sp, #20]
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	eba3 0309 	sub.w	r3, r3, r9
 800a312:	428b      	cmp	r3, r1
 800a314:	dc33      	bgt.n	800a37e <_printf_float+0x356>
 800a316:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	db3c      	blt.n	800a398 <_printf_float+0x370>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	07da      	lsls	r2, r3, #31
 800a322:	d439      	bmi.n	800a398 <_printf_float+0x370>
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	9907      	ldr	r1, [sp, #28]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	eba2 0901 	sub.w	r9, r2, r1
 800a330:	4599      	cmp	r9, r3
 800a332:	bfa8      	it	ge
 800a334:	4699      	movge	r9, r3
 800a336:	f1b9 0f00 	cmp.w	r9, #0
 800a33a:	dc35      	bgt.n	800a3a8 <_printf_float+0x380>
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a344:	f104 0a1a 	add.w	sl, r4, #26
 800a348:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	eba3 0309 	sub.w	r3, r3, r9
 800a352:	4543      	cmp	r3, r8
 800a354:	f77f af75 	ble.w	800a242 <_printf_float+0x21a>
 800a358:	2301      	movs	r3, #1
 800a35a:	4652      	mov	r2, sl
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	f43f aeae 	beq.w	800a0c4 <_printf_float+0x9c>
 800a368:	f108 0801 	add.w	r8, r8, #1
 800a36c:	e7ec      	b.n	800a348 <_printf_float+0x320>
 800a36e:	4613      	mov	r3, r2
 800a370:	4631      	mov	r1, r6
 800a372:	4642      	mov	r2, r8
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	d1bf      	bne.n	800a2fc <_printf_float+0x2d4>
 800a37c:	e6a2      	b.n	800a0c4 <_printf_float+0x9c>
 800a37e:	2301      	movs	r3, #1
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	9204      	str	r2, [sp, #16]
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f ae9b 	beq.w	800a0c4 <_printf_float+0x9c>
 800a38e:	9b05      	ldr	r3, [sp, #20]
 800a390:	9a04      	ldr	r2, [sp, #16]
 800a392:	3301      	adds	r3, #1
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	e7b7      	b.n	800a308 <_printf_float+0x2e0>
 800a398:	4653      	mov	r3, sl
 800a39a:	465a      	mov	r2, fp
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d1be      	bne.n	800a324 <_printf_float+0x2fc>
 800a3a6:	e68d      	b.n	800a0c4 <_printf_float+0x9c>
 800a3a8:	9a04      	ldr	r2, [sp, #16]
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	4442      	add	r2, r8
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	47b8      	blx	r7
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d1c1      	bne.n	800a33c <_printf_float+0x314>
 800a3b8:	e684      	b.n	800a0c4 <_printf_float+0x9c>
 800a3ba:	9a08      	ldr	r2, [sp, #32]
 800a3bc:	2a01      	cmp	r2, #1
 800a3be:	dc01      	bgt.n	800a3c4 <_printf_float+0x39c>
 800a3c0:	07db      	lsls	r3, r3, #31
 800a3c2:	d537      	bpl.n	800a434 <_printf_float+0x40c>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	f43f ae78 	beq.w	800a0c4 <_printf_float+0x9c>
 800a3d4:	4653      	mov	r3, sl
 800a3d6:	465a      	mov	r2, fp
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f ae70 	beq.w	800a0c4 <_printf_float+0x9c>
 800a3e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a3e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f0:	d01b      	beq.n	800a42a <_printf_float+0x402>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	f108 0201 	add.w	r2, r8, #1
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d10e      	bne.n	800a422 <_printf_float+0x3fa>
 800a404:	e65e      	b.n	800a0c4 <_printf_float+0x9c>
 800a406:	2301      	movs	r3, #1
 800a408:	464a      	mov	r2, r9
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f ae57 	beq.w	800a0c4 <_printf_float+0x9c>
 800a416:	f108 0801 	add.w	r8, r8, #1
 800a41a:	9b08      	ldr	r3, [sp, #32]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	4543      	cmp	r3, r8
 800a420:	dcf1      	bgt.n	800a406 <_printf_float+0x3de>
 800a422:	9b04      	ldr	r3, [sp, #16]
 800a424:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a428:	e6db      	b.n	800a1e2 <_printf_float+0x1ba>
 800a42a:	f04f 0800 	mov.w	r8, #0
 800a42e:	f104 091a 	add.w	r9, r4, #26
 800a432:	e7f2      	b.n	800a41a <_printf_float+0x3f2>
 800a434:	2301      	movs	r3, #1
 800a436:	4642      	mov	r2, r8
 800a438:	e7df      	b.n	800a3fa <_printf_float+0x3d2>
 800a43a:	2301      	movs	r3, #1
 800a43c:	464a      	mov	r2, r9
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae3d 	beq.w	800a0c4 <_printf_float+0x9c>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a452:	1a5b      	subs	r3, r3, r1
 800a454:	4543      	cmp	r3, r8
 800a456:	dcf0      	bgt.n	800a43a <_printf_float+0x412>
 800a458:	e6f7      	b.n	800a24a <_printf_float+0x222>
 800a45a:	f04f 0800 	mov.w	r8, #0
 800a45e:	f104 0919 	add.w	r9, r4, #25
 800a462:	e7f4      	b.n	800a44e <_printf_float+0x426>

0800a464 <_printf_common>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	4616      	mov	r6, r2
 800a46a:	4699      	mov	r9, r3
 800a46c:	688a      	ldr	r2, [r1, #8]
 800a46e:	690b      	ldr	r3, [r1, #16]
 800a470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a474:	4293      	cmp	r3, r2
 800a476:	bfb8      	it	lt
 800a478:	4613      	movlt	r3, r2
 800a47a:	6033      	str	r3, [r6, #0]
 800a47c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a480:	4607      	mov	r7, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b10a      	cbz	r2, 800a48a <_printf_common+0x26>
 800a486:	3301      	adds	r3, #1
 800a488:	6033      	str	r3, [r6, #0]
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	0699      	lsls	r1, r3, #26
 800a48e:	bf42      	ittt	mi
 800a490:	6833      	ldrmi	r3, [r6, #0]
 800a492:	3302      	addmi	r3, #2
 800a494:	6033      	strmi	r3, [r6, #0]
 800a496:	6825      	ldr	r5, [r4, #0]
 800a498:	f015 0506 	ands.w	r5, r5, #6
 800a49c:	d106      	bne.n	800a4ac <_printf_common+0x48>
 800a49e:	f104 0a19 	add.w	sl, r4, #25
 800a4a2:	68e3      	ldr	r3, [r4, #12]
 800a4a4:	6832      	ldr	r2, [r6, #0]
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	42ab      	cmp	r3, r5
 800a4aa:	dc26      	bgt.n	800a4fa <_printf_common+0x96>
 800a4ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4b0:	1e13      	subs	r3, r2, #0
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	2301      	movne	r3, #1
 800a4b8:	0692      	lsls	r2, r2, #26
 800a4ba:	d42b      	bmi.n	800a514 <_printf_common+0xb0>
 800a4bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	47c0      	blx	r8
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d01e      	beq.n	800a508 <_printf_common+0xa4>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	68e5      	ldr	r5, [r4, #12]
 800a4ce:	6832      	ldr	r2, [r6, #0]
 800a4d0:	f003 0306 	and.w	r3, r3, #6
 800a4d4:	2b04      	cmp	r3, #4
 800a4d6:	bf08      	it	eq
 800a4d8:	1aad      	subeq	r5, r5, r2
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	6922      	ldr	r2, [r4, #16]
 800a4de:	bf0c      	ite	eq
 800a4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4e4:	2500      	movne	r5, #0
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	bfc4      	itt	gt
 800a4ea:	1a9b      	subgt	r3, r3, r2
 800a4ec:	18ed      	addgt	r5, r5, r3
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	341a      	adds	r4, #26
 800a4f2:	42b5      	cmp	r5, r6
 800a4f4:	d11a      	bne.n	800a52c <_printf_common+0xc8>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e008      	b.n	800a50c <_printf_common+0xa8>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4652      	mov	r2, sl
 800a4fe:	4649      	mov	r1, r9
 800a500:	4638      	mov	r0, r7
 800a502:	47c0      	blx	r8
 800a504:	3001      	adds	r0, #1
 800a506:	d103      	bne.n	800a510 <_printf_common+0xac>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a510:	3501      	adds	r5, #1
 800a512:	e7c6      	b.n	800a4a2 <_printf_common+0x3e>
 800a514:	18e1      	adds	r1, r4, r3
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	2030      	movs	r0, #48	; 0x30
 800a51a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a51e:	4422      	add	r2, r4
 800a520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a528:	3302      	adds	r3, #2
 800a52a:	e7c7      	b.n	800a4bc <_printf_common+0x58>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4622      	mov	r2, r4
 800a530:	4649      	mov	r1, r9
 800a532:	4638      	mov	r0, r7
 800a534:	47c0      	blx	r8
 800a536:	3001      	adds	r0, #1
 800a538:	d0e6      	beq.n	800a508 <_printf_common+0xa4>
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7d9      	b.n	800a4f2 <_printf_common+0x8e>
	...

0800a540 <_printf_i>:
 800a540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	4691      	mov	r9, r2
 800a548:	7e27      	ldrb	r7, [r4, #24]
 800a54a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a54c:	2f78      	cmp	r7, #120	; 0x78
 800a54e:	4680      	mov	r8, r0
 800a550:	469a      	mov	sl, r3
 800a552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a556:	d807      	bhi.n	800a568 <_printf_i+0x28>
 800a558:	2f62      	cmp	r7, #98	; 0x62
 800a55a:	d80a      	bhi.n	800a572 <_printf_i+0x32>
 800a55c:	2f00      	cmp	r7, #0
 800a55e:	f000 80d8 	beq.w	800a712 <_printf_i+0x1d2>
 800a562:	2f58      	cmp	r7, #88	; 0x58
 800a564:	f000 80a3 	beq.w	800a6ae <_printf_i+0x16e>
 800a568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a56c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a570:	e03a      	b.n	800a5e8 <_printf_i+0xa8>
 800a572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a576:	2b15      	cmp	r3, #21
 800a578:	d8f6      	bhi.n	800a568 <_printf_i+0x28>
 800a57a:	a001      	add	r0, pc, #4	; (adr r0, 800a580 <_printf_i+0x40>)
 800a57c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a580:	0800a5d9 	.word	0x0800a5d9
 800a584:	0800a5ed 	.word	0x0800a5ed
 800a588:	0800a569 	.word	0x0800a569
 800a58c:	0800a569 	.word	0x0800a569
 800a590:	0800a569 	.word	0x0800a569
 800a594:	0800a569 	.word	0x0800a569
 800a598:	0800a5ed 	.word	0x0800a5ed
 800a59c:	0800a569 	.word	0x0800a569
 800a5a0:	0800a569 	.word	0x0800a569
 800a5a4:	0800a569 	.word	0x0800a569
 800a5a8:	0800a569 	.word	0x0800a569
 800a5ac:	0800a6f9 	.word	0x0800a6f9
 800a5b0:	0800a61d 	.word	0x0800a61d
 800a5b4:	0800a6db 	.word	0x0800a6db
 800a5b8:	0800a569 	.word	0x0800a569
 800a5bc:	0800a569 	.word	0x0800a569
 800a5c0:	0800a71b 	.word	0x0800a71b
 800a5c4:	0800a569 	.word	0x0800a569
 800a5c8:	0800a61d 	.word	0x0800a61d
 800a5cc:	0800a569 	.word	0x0800a569
 800a5d0:	0800a569 	.word	0x0800a569
 800a5d4:	0800a6e3 	.word	0x0800a6e3
 800a5d8:	680b      	ldr	r3, [r1, #0]
 800a5da:	1d1a      	adds	r2, r3, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	600a      	str	r2, [r1, #0]
 800a5e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e0a3      	b.n	800a734 <_printf_i+0x1f4>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	6808      	ldr	r0, [r1, #0]
 800a5f0:	062e      	lsls	r6, r5, #24
 800a5f2:	f100 0304 	add.w	r3, r0, #4
 800a5f6:	d50a      	bpl.n	800a60e <_printf_i+0xce>
 800a5f8:	6805      	ldr	r5, [r0, #0]
 800a5fa:	600b      	str	r3, [r1, #0]
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	da03      	bge.n	800a608 <_printf_i+0xc8>
 800a600:	232d      	movs	r3, #45	; 0x2d
 800a602:	426d      	negs	r5, r5
 800a604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a608:	485e      	ldr	r0, [pc, #376]	; (800a784 <_printf_i+0x244>)
 800a60a:	230a      	movs	r3, #10
 800a60c:	e019      	b.n	800a642 <_printf_i+0x102>
 800a60e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a612:	6805      	ldr	r5, [r0, #0]
 800a614:	600b      	str	r3, [r1, #0]
 800a616:	bf18      	it	ne
 800a618:	b22d      	sxthne	r5, r5
 800a61a:	e7ef      	b.n	800a5fc <_printf_i+0xbc>
 800a61c:	680b      	ldr	r3, [r1, #0]
 800a61e:	6825      	ldr	r5, [r4, #0]
 800a620:	1d18      	adds	r0, r3, #4
 800a622:	6008      	str	r0, [r1, #0]
 800a624:	0628      	lsls	r0, r5, #24
 800a626:	d501      	bpl.n	800a62c <_printf_i+0xec>
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	e002      	b.n	800a632 <_printf_i+0xf2>
 800a62c:	0669      	lsls	r1, r5, #25
 800a62e:	d5fb      	bpl.n	800a628 <_printf_i+0xe8>
 800a630:	881d      	ldrh	r5, [r3, #0]
 800a632:	4854      	ldr	r0, [pc, #336]	; (800a784 <_printf_i+0x244>)
 800a634:	2f6f      	cmp	r7, #111	; 0x6f
 800a636:	bf0c      	ite	eq
 800a638:	2308      	moveq	r3, #8
 800a63a:	230a      	movne	r3, #10
 800a63c:	2100      	movs	r1, #0
 800a63e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a642:	6866      	ldr	r6, [r4, #4]
 800a644:	60a6      	str	r6, [r4, #8]
 800a646:	2e00      	cmp	r6, #0
 800a648:	bfa2      	ittt	ge
 800a64a:	6821      	ldrge	r1, [r4, #0]
 800a64c:	f021 0104 	bicge.w	r1, r1, #4
 800a650:	6021      	strge	r1, [r4, #0]
 800a652:	b90d      	cbnz	r5, 800a658 <_printf_i+0x118>
 800a654:	2e00      	cmp	r6, #0
 800a656:	d04d      	beq.n	800a6f4 <_printf_i+0x1b4>
 800a658:	4616      	mov	r6, r2
 800a65a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a65e:	fb03 5711 	mls	r7, r3, r1, r5
 800a662:	5dc7      	ldrb	r7, [r0, r7]
 800a664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a668:	462f      	mov	r7, r5
 800a66a:	42bb      	cmp	r3, r7
 800a66c:	460d      	mov	r5, r1
 800a66e:	d9f4      	bls.n	800a65a <_printf_i+0x11a>
 800a670:	2b08      	cmp	r3, #8
 800a672:	d10b      	bne.n	800a68c <_printf_i+0x14c>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	07df      	lsls	r7, r3, #31
 800a678:	d508      	bpl.n	800a68c <_printf_i+0x14c>
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	6861      	ldr	r1, [r4, #4]
 800a67e:	4299      	cmp	r1, r3
 800a680:	bfde      	ittt	le
 800a682:	2330      	movle	r3, #48	; 0x30
 800a684:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a68c:	1b92      	subs	r2, r2, r6
 800a68e:	6122      	str	r2, [r4, #16]
 800a690:	f8cd a000 	str.w	sl, [sp]
 800a694:	464b      	mov	r3, r9
 800a696:	aa03      	add	r2, sp, #12
 800a698:	4621      	mov	r1, r4
 800a69a:	4640      	mov	r0, r8
 800a69c:	f7ff fee2 	bl	800a464 <_printf_common>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d14c      	bne.n	800a73e <_printf_i+0x1fe>
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	b004      	add	sp, #16
 800a6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ae:	4835      	ldr	r0, [pc, #212]	; (800a784 <_printf_i+0x244>)
 800a6b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	680e      	ldr	r6, [r1, #0]
 800a6b8:	061f      	lsls	r7, r3, #24
 800a6ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6be:	600e      	str	r6, [r1, #0]
 800a6c0:	d514      	bpl.n	800a6ec <_printf_i+0x1ac>
 800a6c2:	07d9      	lsls	r1, r3, #31
 800a6c4:	bf44      	itt	mi
 800a6c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a6ca:	6023      	strmi	r3, [r4, #0]
 800a6cc:	b91d      	cbnz	r5, 800a6d6 <_printf_i+0x196>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	f023 0320 	bic.w	r3, r3, #32
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	2310      	movs	r3, #16
 800a6d8:	e7b0      	b.n	800a63c <_printf_i+0xfc>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	f043 0320 	orr.w	r3, r3, #32
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	2378      	movs	r3, #120	; 0x78
 800a6e4:	4828      	ldr	r0, [pc, #160]	; (800a788 <_printf_i+0x248>)
 800a6e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6ea:	e7e3      	b.n	800a6b4 <_printf_i+0x174>
 800a6ec:	065e      	lsls	r6, r3, #25
 800a6ee:	bf48      	it	mi
 800a6f0:	b2ad      	uxthmi	r5, r5
 800a6f2:	e7e6      	b.n	800a6c2 <_printf_i+0x182>
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	e7bb      	b.n	800a670 <_printf_i+0x130>
 800a6f8:	680b      	ldr	r3, [r1, #0]
 800a6fa:	6826      	ldr	r6, [r4, #0]
 800a6fc:	6960      	ldr	r0, [r4, #20]
 800a6fe:	1d1d      	adds	r5, r3, #4
 800a700:	600d      	str	r5, [r1, #0]
 800a702:	0635      	lsls	r5, r6, #24
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	d501      	bpl.n	800a70c <_printf_i+0x1cc>
 800a708:	6018      	str	r0, [r3, #0]
 800a70a:	e002      	b.n	800a712 <_printf_i+0x1d2>
 800a70c:	0671      	lsls	r1, r6, #25
 800a70e:	d5fb      	bpl.n	800a708 <_printf_i+0x1c8>
 800a710:	8018      	strh	r0, [r3, #0]
 800a712:	2300      	movs	r3, #0
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	4616      	mov	r6, r2
 800a718:	e7ba      	b.n	800a690 <_printf_i+0x150>
 800a71a:	680b      	ldr	r3, [r1, #0]
 800a71c:	1d1a      	adds	r2, r3, #4
 800a71e:	600a      	str	r2, [r1, #0]
 800a720:	681e      	ldr	r6, [r3, #0]
 800a722:	6862      	ldr	r2, [r4, #4]
 800a724:	2100      	movs	r1, #0
 800a726:	4630      	mov	r0, r6
 800a728:	f7f5 fda2 	bl	8000270 <memchr>
 800a72c:	b108      	cbz	r0, 800a732 <_printf_i+0x1f2>
 800a72e:	1b80      	subs	r0, r0, r6
 800a730:	6060      	str	r0, [r4, #4]
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	2300      	movs	r3, #0
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73c:	e7a8      	b.n	800a690 <_printf_i+0x150>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	4632      	mov	r2, r6
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	47d0      	blx	sl
 800a748:	3001      	adds	r0, #1
 800a74a:	d0ab      	beq.n	800a6a4 <_printf_i+0x164>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	079b      	lsls	r3, r3, #30
 800a750:	d413      	bmi.n	800a77a <_printf_i+0x23a>
 800a752:	68e0      	ldr	r0, [r4, #12]
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	4298      	cmp	r0, r3
 800a758:	bfb8      	it	lt
 800a75a:	4618      	movlt	r0, r3
 800a75c:	e7a4      	b.n	800a6a8 <_printf_i+0x168>
 800a75e:	2301      	movs	r3, #1
 800a760:	4632      	mov	r2, r6
 800a762:	4649      	mov	r1, r9
 800a764:	4640      	mov	r0, r8
 800a766:	47d0      	blx	sl
 800a768:	3001      	adds	r0, #1
 800a76a:	d09b      	beq.n	800a6a4 <_printf_i+0x164>
 800a76c:	3501      	adds	r5, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	9903      	ldr	r1, [sp, #12]
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	42ab      	cmp	r3, r5
 800a776:	dcf2      	bgt.n	800a75e <_printf_i+0x21e>
 800a778:	e7eb      	b.n	800a752 <_printf_i+0x212>
 800a77a:	2500      	movs	r5, #0
 800a77c:	f104 0619 	add.w	r6, r4, #25
 800a780:	e7f5      	b.n	800a76e <_printf_i+0x22e>
 800a782:	bf00      	nop
 800a784:	0800fc40 	.word	0x0800fc40
 800a788:	0800fc51 	.word	0x0800fc51

0800a78c <_scanf_float>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	b087      	sub	sp, #28
 800a792:	4617      	mov	r7, r2
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	688b      	ldr	r3, [r1, #8]
 800a798:	1e5a      	subs	r2, r3, #1
 800a79a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a79e:	bf83      	ittte	hi
 800a7a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a7a4:	195b      	addhi	r3, r3, r5
 800a7a6:	9302      	strhi	r3, [sp, #8]
 800a7a8:	2300      	movls	r3, #0
 800a7aa:	bf86      	itte	hi
 800a7ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7b0:	608b      	strhi	r3, [r1, #8]
 800a7b2:	9302      	strls	r3, [sp, #8]
 800a7b4:	680b      	ldr	r3, [r1, #0]
 800a7b6:	468b      	mov	fp, r1
 800a7b8:	2500      	movs	r5, #0
 800a7ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a7be:	f84b 3b1c 	str.w	r3, [fp], #28
 800a7c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	465e      	mov	r6, fp
 800a7cc:	46aa      	mov	sl, r5
 800a7ce:	46a9      	mov	r9, r5
 800a7d0:	9501      	str	r5, [sp, #4]
 800a7d2:	68a2      	ldr	r2, [r4, #8]
 800a7d4:	b152      	cbz	r2, 800a7ec <_scanf_float+0x60>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b4e      	cmp	r3, #78	; 0x4e
 800a7dc:	d864      	bhi.n	800a8a8 <_scanf_float+0x11c>
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d83c      	bhi.n	800a85c <_scanf_float+0xd0>
 800a7e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a7e6:	b2c8      	uxtb	r0, r1
 800a7e8:	280e      	cmp	r0, #14
 800a7ea:	d93a      	bls.n	800a862 <_scanf_float+0xd6>
 800a7ec:	f1b9 0f00 	cmp.w	r9, #0
 800a7f0:	d003      	beq.n	800a7fa <_scanf_float+0x6e>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7fe:	f1ba 0f01 	cmp.w	sl, #1
 800a802:	f200 8113 	bhi.w	800aa2c <_scanf_float+0x2a0>
 800a806:	455e      	cmp	r6, fp
 800a808:	f200 8105 	bhi.w	800aa16 <_scanf_float+0x28a>
 800a80c:	2501      	movs	r5, #1
 800a80e:	4628      	mov	r0, r5
 800a810:	b007      	add	sp, #28
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a81a:	2a0d      	cmp	r2, #13
 800a81c:	d8e6      	bhi.n	800a7ec <_scanf_float+0x60>
 800a81e:	a101      	add	r1, pc, #4	; (adr r1, 800a824 <_scanf_float+0x98>)
 800a820:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a824:	0800a963 	.word	0x0800a963
 800a828:	0800a7ed 	.word	0x0800a7ed
 800a82c:	0800a7ed 	.word	0x0800a7ed
 800a830:	0800a7ed 	.word	0x0800a7ed
 800a834:	0800a9c3 	.word	0x0800a9c3
 800a838:	0800a99b 	.word	0x0800a99b
 800a83c:	0800a7ed 	.word	0x0800a7ed
 800a840:	0800a7ed 	.word	0x0800a7ed
 800a844:	0800a971 	.word	0x0800a971
 800a848:	0800a7ed 	.word	0x0800a7ed
 800a84c:	0800a7ed 	.word	0x0800a7ed
 800a850:	0800a7ed 	.word	0x0800a7ed
 800a854:	0800a7ed 	.word	0x0800a7ed
 800a858:	0800a929 	.word	0x0800a929
 800a85c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a860:	e7db      	b.n	800a81a <_scanf_float+0x8e>
 800a862:	290e      	cmp	r1, #14
 800a864:	d8c2      	bhi.n	800a7ec <_scanf_float+0x60>
 800a866:	a001      	add	r0, pc, #4	; (adr r0, 800a86c <_scanf_float+0xe0>)
 800a868:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a86c:	0800a91b 	.word	0x0800a91b
 800a870:	0800a7ed 	.word	0x0800a7ed
 800a874:	0800a91b 	.word	0x0800a91b
 800a878:	0800a9af 	.word	0x0800a9af
 800a87c:	0800a7ed 	.word	0x0800a7ed
 800a880:	0800a8c9 	.word	0x0800a8c9
 800a884:	0800a905 	.word	0x0800a905
 800a888:	0800a905 	.word	0x0800a905
 800a88c:	0800a905 	.word	0x0800a905
 800a890:	0800a905 	.word	0x0800a905
 800a894:	0800a905 	.word	0x0800a905
 800a898:	0800a905 	.word	0x0800a905
 800a89c:	0800a905 	.word	0x0800a905
 800a8a0:	0800a905 	.word	0x0800a905
 800a8a4:	0800a905 	.word	0x0800a905
 800a8a8:	2b6e      	cmp	r3, #110	; 0x6e
 800a8aa:	d809      	bhi.n	800a8c0 <_scanf_float+0x134>
 800a8ac:	2b60      	cmp	r3, #96	; 0x60
 800a8ae:	d8b2      	bhi.n	800a816 <_scanf_float+0x8a>
 800a8b0:	2b54      	cmp	r3, #84	; 0x54
 800a8b2:	d077      	beq.n	800a9a4 <_scanf_float+0x218>
 800a8b4:	2b59      	cmp	r3, #89	; 0x59
 800a8b6:	d199      	bne.n	800a7ec <_scanf_float+0x60>
 800a8b8:	2d07      	cmp	r5, #7
 800a8ba:	d197      	bne.n	800a7ec <_scanf_float+0x60>
 800a8bc:	2508      	movs	r5, #8
 800a8be:	e029      	b.n	800a914 <_scanf_float+0x188>
 800a8c0:	2b74      	cmp	r3, #116	; 0x74
 800a8c2:	d06f      	beq.n	800a9a4 <_scanf_float+0x218>
 800a8c4:	2b79      	cmp	r3, #121	; 0x79
 800a8c6:	e7f6      	b.n	800a8b6 <_scanf_float+0x12a>
 800a8c8:	6821      	ldr	r1, [r4, #0]
 800a8ca:	05c8      	lsls	r0, r1, #23
 800a8cc:	d51a      	bpl.n	800a904 <_scanf_float+0x178>
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a8d4:	6021      	str	r1, [r4, #0]
 800a8d6:	f109 0901 	add.w	r9, r9, #1
 800a8da:	b11b      	cbz	r3, 800a8e4 <_scanf_float+0x158>
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	3201      	adds	r2, #1
 800a8e0:	9302      	str	r3, [sp, #8]
 800a8e2:	60a2      	str	r2, [r4, #8]
 800a8e4:	68a3      	ldr	r3, [r4, #8]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	60a3      	str	r3, [r4, #8]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	607b      	str	r3, [r7, #4]
 800a8f8:	f340 8084 	ble.w	800aa04 <_scanf_float+0x278>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	3301      	adds	r3, #1
 800a900:	603b      	str	r3, [r7, #0]
 800a902:	e766      	b.n	800a7d2 <_scanf_float+0x46>
 800a904:	eb1a 0f05 	cmn.w	sl, r5
 800a908:	f47f af70 	bne.w	800a7ec <_scanf_float+0x60>
 800a90c:	6822      	ldr	r2, [r4, #0]
 800a90e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a912:	6022      	str	r2, [r4, #0]
 800a914:	f806 3b01 	strb.w	r3, [r6], #1
 800a918:	e7e4      	b.n	800a8e4 <_scanf_float+0x158>
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	0610      	lsls	r0, r2, #24
 800a91e:	f57f af65 	bpl.w	800a7ec <_scanf_float+0x60>
 800a922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a926:	e7f4      	b.n	800a912 <_scanf_float+0x186>
 800a928:	f1ba 0f00 	cmp.w	sl, #0
 800a92c:	d10e      	bne.n	800a94c <_scanf_float+0x1c0>
 800a92e:	f1b9 0f00 	cmp.w	r9, #0
 800a932:	d10e      	bne.n	800a952 <_scanf_float+0x1c6>
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a93a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a93e:	d108      	bne.n	800a952 <_scanf_float+0x1c6>
 800a940:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a944:	6022      	str	r2, [r4, #0]
 800a946:	f04f 0a01 	mov.w	sl, #1
 800a94a:	e7e3      	b.n	800a914 <_scanf_float+0x188>
 800a94c:	f1ba 0f02 	cmp.w	sl, #2
 800a950:	d055      	beq.n	800a9fe <_scanf_float+0x272>
 800a952:	2d01      	cmp	r5, #1
 800a954:	d002      	beq.n	800a95c <_scanf_float+0x1d0>
 800a956:	2d04      	cmp	r5, #4
 800a958:	f47f af48 	bne.w	800a7ec <_scanf_float+0x60>
 800a95c:	3501      	adds	r5, #1
 800a95e:	b2ed      	uxtb	r5, r5
 800a960:	e7d8      	b.n	800a914 <_scanf_float+0x188>
 800a962:	f1ba 0f01 	cmp.w	sl, #1
 800a966:	f47f af41 	bne.w	800a7ec <_scanf_float+0x60>
 800a96a:	f04f 0a02 	mov.w	sl, #2
 800a96e:	e7d1      	b.n	800a914 <_scanf_float+0x188>
 800a970:	b97d      	cbnz	r5, 800a992 <_scanf_float+0x206>
 800a972:	f1b9 0f00 	cmp.w	r9, #0
 800a976:	f47f af3c 	bne.w	800a7f2 <_scanf_float+0x66>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a980:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a984:	f47f af39 	bne.w	800a7fa <_scanf_float+0x6e>
 800a988:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a98c:	6022      	str	r2, [r4, #0]
 800a98e:	2501      	movs	r5, #1
 800a990:	e7c0      	b.n	800a914 <_scanf_float+0x188>
 800a992:	2d03      	cmp	r5, #3
 800a994:	d0e2      	beq.n	800a95c <_scanf_float+0x1d0>
 800a996:	2d05      	cmp	r5, #5
 800a998:	e7de      	b.n	800a958 <_scanf_float+0x1cc>
 800a99a:	2d02      	cmp	r5, #2
 800a99c:	f47f af26 	bne.w	800a7ec <_scanf_float+0x60>
 800a9a0:	2503      	movs	r5, #3
 800a9a2:	e7b7      	b.n	800a914 <_scanf_float+0x188>
 800a9a4:	2d06      	cmp	r5, #6
 800a9a6:	f47f af21 	bne.w	800a7ec <_scanf_float+0x60>
 800a9aa:	2507      	movs	r5, #7
 800a9ac:	e7b2      	b.n	800a914 <_scanf_float+0x188>
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	0591      	lsls	r1, r2, #22
 800a9b2:	f57f af1b 	bpl.w	800a7ec <_scanf_float+0x60>
 800a9b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a9ba:	6022      	str	r2, [r4, #0]
 800a9bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9c0:	e7a8      	b.n	800a914 <_scanf_float+0x188>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a9c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a9cc:	d006      	beq.n	800a9dc <_scanf_float+0x250>
 800a9ce:	0550      	lsls	r0, r2, #21
 800a9d0:	f57f af0c 	bpl.w	800a7ec <_scanf_float+0x60>
 800a9d4:	f1b9 0f00 	cmp.w	r9, #0
 800a9d8:	f43f af0f 	beq.w	800a7fa <_scanf_float+0x6e>
 800a9dc:	0591      	lsls	r1, r2, #22
 800a9de:	bf58      	it	pl
 800a9e0:	9901      	ldrpl	r1, [sp, #4]
 800a9e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9e6:	bf58      	it	pl
 800a9e8:	eba9 0101 	subpl.w	r1, r9, r1
 800a9ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a9f0:	bf58      	it	pl
 800a9f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	f04f 0900 	mov.w	r9, #0
 800a9fc:	e78a      	b.n	800a914 <_scanf_float+0x188>
 800a9fe:	f04f 0a03 	mov.w	sl, #3
 800aa02:	e787      	b.n	800a914 <_scanf_float+0x188>
 800aa04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	4798      	blx	r3
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f43f aedf 	beq.w	800a7d2 <_scanf_float+0x46>
 800aa14:	e6ea      	b.n	800a7ec <_scanf_float+0x60>
 800aa16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa1e:	463a      	mov	r2, r7
 800aa20:	4640      	mov	r0, r8
 800aa22:	4798      	blx	r3
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	6123      	str	r3, [r4, #16]
 800aa2a:	e6ec      	b.n	800a806 <_scanf_float+0x7a>
 800aa2c:	1e6b      	subs	r3, r5, #1
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d825      	bhi.n	800aa7e <_scanf_float+0x2f2>
 800aa32:	2d02      	cmp	r5, #2
 800aa34:	d836      	bhi.n	800aaa4 <_scanf_float+0x318>
 800aa36:	455e      	cmp	r6, fp
 800aa38:	f67f aee8 	bls.w	800a80c <_scanf_float+0x80>
 800aa3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa44:	463a      	mov	r2, r7
 800aa46:	4640      	mov	r0, r8
 800aa48:	4798      	blx	r3
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	6123      	str	r3, [r4, #16]
 800aa50:	e7f1      	b.n	800aa36 <_scanf_float+0x2aa>
 800aa52:	9802      	ldr	r0, [sp, #8]
 800aa54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aa5c:	9002      	str	r0, [sp, #8]
 800aa5e:	463a      	mov	r2, r7
 800aa60:	4640      	mov	r0, r8
 800aa62:	4798      	blx	r3
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa6e:	fa5f fa8a 	uxtb.w	sl, sl
 800aa72:	f1ba 0f02 	cmp.w	sl, #2
 800aa76:	d1ec      	bne.n	800aa52 <_scanf_float+0x2c6>
 800aa78:	3d03      	subs	r5, #3
 800aa7a:	b2ed      	uxtb	r5, r5
 800aa7c:	1b76      	subs	r6, r6, r5
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	05da      	lsls	r2, r3, #23
 800aa82:	d52f      	bpl.n	800aae4 <_scanf_float+0x358>
 800aa84:	055b      	lsls	r3, r3, #21
 800aa86:	d510      	bpl.n	800aaaa <_scanf_float+0x31e>
 800aa88:	455e      	cmp	r6, fp
 800aa8a:	f67f aebf 	bls.w	800a80c <_scanf_float+0x80>
 800aa8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa96:	463a      	mov	r2, r7
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4798      	blx	r3
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	6123      	str	r3, [r4, #16]
 800aaa2:	e7f1      	b.n	800aa88 <_scanf_float+0x2fc>
 800aaa4:	46aa      	mov	sl, r5
 800aaa6:	9602      	str	r6, [sp, #8]
 800aaa8:	e7df      	b.n	800aa6a <_scanf_float+0x2de>
 800aaaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	2965      	cmp	r1, #101	; 0x65
 800aab2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aab6:	f106 35ff 	add.w	r5, r6, #4294967295
 800aaba:	6123      	str	r3, [r4, #16]
 800aabc:	d00c      	beq.n	800aad8 <_scanf_float+0x34c>
 800aabe:	2945      	cmp	r1, #69	; 0x45
 800aac0:	d00a      	beq.n	800aad8 <_scanf_float+0x34c>
 800aac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aac6:	463a      	mov	r2, r7
 800aac8:	4640      	mov	r0, r8
 800aaca:	4798      	blx	r3
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	1eb5      	subs	r5, r6, #2
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aadc:	463a      	mov	r2, r7
 800aade:	4640      	mov	r0, r8
 800aae0:	4798      	blx	r3
 800aae2:	462e      	mov	r6, r5
 800aae4:	6825      	ldr	r5, [r4, #0]
 800aae6:	f015 0510 	ands.w	r5, r5, #16
 800aaea:	d14d      	bne.n	800ab88 <_scanf_float+0x3fc>
 800aaec:	7035      	strb	r5, [r6, #0]
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aaf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf8:	d11a      	bne.n	800ab30 <_scanf_float+0x3a4>
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	454b      	cmp	r3, r9
 800aafe:	eba3 0209 	sub.w	r2, r3, r9
 800ab02:	d122      	bne.n	800ab4a <_scanf_float+0x3be>
 800ab04:	2200      	movs	r2, #0
 800ab06:	4659      	mov	r1, fp
 800ab08:	4640      	mov	r0, r8
 800ab0a:	f000 fef7 	bl	800b8fc <_strtod_r>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f011 0f02 	tst.w	r1, #2
 800ab18:	f103 0204 	add.w	r2, r3, #4
 800ab1c:	d020      	beq.n	800ab60 <_scanf_float+0x3d4>
 800ab1e:	9903      	ldr	r1, [sp, #12]
 800ab20:	600a      	str	r2, [r1, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	ed83 0b00 	vstr	d0, [r3]
 800ab28:	68e3      	ldr	r3, [r4, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60e3      	str	r3, [r4, #12]
 800ab2e:	e66e      	b.n	800a80e <_scanf_float+0x82>
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0e6      	beq.n	800ab04 <_scanf_float+0x378>
 800ab36:	9905      	ldr	r1, [sp, #20]
 800ab38:	230a      	movs	r3, #10
 800ab3a:	462a      	mov	r2, r5
 800ab3c:	3101      	adds	r1, #1
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f000 ff66 	bl	800ba10 <_strtol_r>
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	9e05      	ldr	r6, [sp, #20]
 800ab48:	1ac2      	subs	r2, r0, r3
 800ab4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab4e:	429e      	cmp	r6, r3
 800ab50:	bf28      	it	cs
 800ab52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ab56:	490d      	ldr	r1, [pc, #52]	; (800ab8c <_scanf_float+0x400>)
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 f821 	bl	800aba0 <siprintf>
 800ab5e:	e7d1      	b.n	800ab04 <_scanf_float+0x378>
 800ab60:	f011 0f04 	tst.w	r1, #4
 800ab64:	9903      	ldr	r1, [sp, #12]
 800ab66:	600a      	str	r2, [r1, #0]
 800ab68:	d1db      	bne.n	800ab22 <_scanf_float+0x396>
 800ab6a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ab6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab72:	681e      	ldr	r6, [r3, #0]
 800ab74:	d705      	bvc.n	800ab82 <_scanf_float+0x3f6>
 800ab76:	4806      	ldr	r0, [pc, #24]	; (800ab90 <_scanf_float+0x404>)
 800ab78:	f000 f80c 	bl	800ab94 <nanf>
 800ab7c:	ed86 0a00 	vstr	s0, [r6]
 800ab80:	e7d2      	b.n	800ab28 <_scanf_float+0x39c>
 800ab82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ab86:	e7f9      	b.n	800ab7c <_scanf_float+0x3f0>
 800ab88:	2500      	movs	r5, #0
 800ab8a:	e640      	b.n	800a80e <_scanf_float+0x82>
 800ab8c:	0800fc62 	.word	0x0800fc62
 800ab90:	08010093 	.word	0x08010093

0800ab94 <nanf>:
 800ab94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ab9c <nanf+0x8>
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	7fc00000 	.word	0x7fc00000

0800aba0 <siprintf>:
 800aba0:	b40e      	push	{r1, r2, r3}
 800aba2:	b500      	push	{lr}
 800aba4:	b09c      	sub	sp, #112	; 0x70
 800aba6:	ab1d      	add	r3, sp, #116	; 0x74
 800aba8:	9002      	str	r0, [sp, #8]
 800abaa:	9006      	str	r0, [sp, #24]
 800abac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abb0:	4809      	ldr	r0, [pc, #36]	; (800abd8 <siprintf+0x38>)
 800abb2:	9107      	str	r1, [sp, #28]
 800abb4:	9104      	str	r1, [sp, #16]
 800abb6:	4909      	ldr	r1, [pc, #36]	; (800abdc <siprintf+0x3c>)
 800abb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbc:	9105      	str	r1, [sp, #20]
 800abbe:	6800      	ldr	r0, [r0, #0]
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	a902      	add	r1, sp, #8
 800abc4:	f002 fed6 	bl	800d974 <_svfiprintf_r>
 800abc8:	9b02      	ldr	r3, [sp, #8]
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	b01c      	add	sp, #112	; 0x70
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	20000130 	.word	0x20000130
 800abdc:	ffff0208 	.word	0xffff0208

0800abe0 <siscanf>:
 800abe0:	b40e      	push	{r1, r2, r3}
 800abe2:	b510      	push	{r4, lr}
 800abe4:	b09f      	sub	sp, #124	; 0x7c
 800abe6:	ac21      	add	r4, sp, #132	; 0x84
 800abe8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800abec:	f854 2b04 	ldr.w	r2, [r4], #4
 800abf0:	9201      	str	r2, [sp, #4]
 800abf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800abf6:	9004      	str	r0, [sp, #16]
 800abf8:	9008      	str	r0, [sp, #32]
 800abfa:	f7f5 fb2b 	bl	8000254 <strlen>
 800abfe:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <siscanf+0x50>)
 800ac00:	9005      	str	r0, [sp, #20]
 800ac02:	9009      	str	r0, [sp, #36]	; 0x24
 800ac04:	930d      	str	r3, [sp, #52]	; 0x34
 800ac06:	480b      	ldr	r0, [pc, #44]	; (800ac34 <siscanf+0x54>)
 800ac08:	9a01      	ldr	r2, [sp, #4]
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	9403      	str	r4, [sp, #12]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9311      	str	r3, [sp, #68]	; 0x44
 800ac12:	9316      	str	r3, [sp, #88]	; 0x58
 800ac14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac18:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac1c:	a904      	add	r1, sp, #16
 800ac1e:	4623      	mov	r3, r4
 800ac20:	f003 f802 	bl	800dc28 <__ssvfiscanf_r>
 800ac24:	b01f      	add	sp, #124	; 0x7c
 800ac26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2a:	b003      	add	sp, #12
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	0800ac5b 	.word	0x0800ac5b
 800ac34:	20000130 	.word	0x20000130

0800ac38 <__sread>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	f003 fab6 	bl	800e1b0 <_read_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	bfab      	itete	ge
 800ac48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac4c:	181b      	addge	r3, r3, r0
 800ac4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac52:	bfac      	ite	ge
 800ac54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac56:	81a3      	strhlt	r3, [r4, #12]
 800ac58:	bd10      	pop	{r4, pc}

0800ac5a <__seofread>:
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	4770      	bx	lr

0800ac5e <__swrite>:
 800ac5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	461f      	mov	r7, r3
 800ac64:	898b      	ldrh	r3, [r1, #12]
 800ac66:	05db      	lsls	r3, r3, #23
 800ac68:	4605      	mov	r5, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	4616      	mov	r6, r2
 800ac6e:	d505      	bpl.n	800ac7c <__swrite+0x1e>
 800ac70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac74:	2302      	movs	r3, #2
 800ac76:	2200      	movs	r2, #0
 800ac78:	f002 f870 	bl	800cd5c <_lseek_r>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	4632      	mov	r2, r6
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	f000 bebf 	b.w	800ba14 <_write_r>

0800ac96 <__sseek>:
 800ac96:	b510      	push	{r4, lr}
 800ac98:	460c      	mov	r4, r1
 800ac9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9e:	f002 f85d 	bl	800cd5c <_lseek_r>
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	bf15      	itete	ne
 800aca8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acb2:	81a3      	strheq	r3, [r4, #12]
 800acb4:	bf18      	it	ne
 800acb6:	81a3      	strhne	r3, [r4, #12]
 800acb8:	bd10      	pop	{r4, pc}

0800acba <__sclose>:
 800acba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbe:	f000 bebb 	b.w	800ba38 <_close_r>

0800acc2 <strcpy>:
 800acc2:	4603      	mov	r3, r0
 800acc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acc8:	f803 2b01 	strb.w	r2, [r3], #1
 800accc:	2a00      	cmp	r2, #0
 800acce:	d1f9      	bne.n	800acc4 <strcpy+0x2>
 800acd0:	4770      	bx	lr

0800acd2 <strncmp>:
 800acd2:	b510      	push	{r4, lr}
 800acd4:	b16a      	cbz	r2, 800acf2 <strncmp+0x20>
 800acd6:	3901      	subs	r1, #1
 800acd8:	1884      	adds	r4, r0, r2
 800acda:	f810 3b01 	ldrb.w	r3, [r0], #1
 800acde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d103      	bne.n	800acee <strncmp+0x1c>
 800ace6:	42a0      	cmp	r0, r4
 800ace8:	d001      	beq.n	800acee <strncmp+0x1c>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1f5      	bne.n	800acda <strncmp+0x8>
 800acee:	1a98      	subs	r0, r3, r2
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	4610      	mov	r0, r2
 800acf4:	e7fc      	b.n	800acf0 <strncmp+0x1e>

0800acf6 <strncpy>:
 800acf6:	b510      	push	{r4, lr}
 800acf8:	3901      	subs	r1, #1
 800acfa:	4603      	mov	r3, r0
 800acfc:	b132      	cbz	r2, 800ad0c <strncpy+0x16>
 800acfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad02:	f803 4b01 	strb.w	r4, [r3], #1
 800ad06:	3a01      	subs	r2, #1
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d1f7      	bne.n	800acfc <strncpy+0x6>
 800ad0c:	441a      	add	r2, r3
 800ad0e:	2100      	movs	r1, #0
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d100      	bne.n	800ad16 <strncpy+0x20>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1a:	e7f9      	b.n	800ad10 <strncpy+0x1a>

0800ad1c <sulp>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	4616      	mov	r6, r2
 800ad24:	ec45 4b10 	vmov	d0, r4, r5
 800ad28:	f002 fbbe 	bl	800d4a8 <__ulp>
 800ad2c:	b17e      	cbz	r6, 800ad4e <sulp+0x32>
 800ad2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dd09      	ble.n	800ad4e <sulp+0x32>
 800ad3a:	051b      	lsls	r3, r3, #20
 800ad3c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ad40:	2000      	movs	r0, #0
 800ad42:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ad46:	ec41 0b17 	vmov	d7, r0, r1
 800ad4a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}

0800ad50 <_strtod_l>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	ed2d 8b0c 	vpush	{d8-d13}
 800ad58:	b09d      	sub	sp, #116	; 0x74
 800ad5a:	461f      	mov	r7, r3
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9318      	str	r3, [sp, #96]	; 0x60
 800ad60:	4ba6      	ldr	r3, [pc, #664]	; (800affc <_strtod_l+0x2ac>)
 800ad62:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	9308      	str	r3, [sp, #32]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	468a      	mov	sl, r1
 800ad6e:	f7f5 fa71 	bl	8000254 <strlen>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	4605      	mov	r5, r0
 800ad78:	f04f 0900 	mov.w	r9, #0
 800ad7c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ad80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	2a2b      	cmp	r2, #43	; 0x2b
 800ad86:	d04d      	beq.n	800ae24 <_strtod_l+0xd4>
 800ad88:	d83a      	bhi.n	800ae00 <_strtod_l+0xb0>
 800ad8a:	2a0d      	cmp	r2, #13
 800ad8c:	d833      	bhi.n	800adf6 <_strtod_l+0xa6>
 800ad8e:	2a08      	cmp	r2, #8
 800ad90:	d833      	bhi.n	800adfa <_strtod_l+0xaa>
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	d03d      	beq.n	800ae12 <_strtod_l+0xc2>
 800ad96:	2300      	movs	r3, #0
 800ad98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad9c:	7833      	ldrb	r3, [r6, #0]
 800ad9e:	2b30      	cmp	r3, #48	; 0x30
 800ada0:	f040 80b6 	bne.w	800af10 <_strtod_l+0x1c0>
 800ada4:	7873      	ldrb	r3, [r6, #1]
 800ada6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800adaa:	2b58      	cmp	r3, #88	; 0x58
 800adac:	d16d      	bne.n	800ae8a <_strtod_l+0x13a>
 800adae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	ab18      	add	r3, sp, #96	; 0x60
 800adb4:	9702      	str	r7, [sp, #8]
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	4a91      	ldr	r2, [pc, #580]	; (800b000 <_strtod_l+0x2b0>)
 800adba:	ab19      	add	r3, sp, #100	; 0x64
 800adbc:	a917      	add	r1, sp, #92	; 0x5c
 800adbe:	4620      	mov	r0, r4
 800adc0:	f001 fcc0 	bl	800c744 <__gethex>
 800adc4:	f010 0507 	ands.w	r5, r0, #7
 800adc8:	4607      	mov	r7, r0
 800adca:	d005      	beq.n	800add8 <_strtod_l+0x88>
 800adcc:	2d06      	cmp	r5, #6
 800adce:	d12b      	bne.n	800ae28 <_strtod_l+0xd8>
 800add0:	3601      	adds	r6, #1
 800add2:	2300      	movs	r3, #0
 800add4:	9617      	str	r6, [sp, #92]	; 0x5c
 800add6:	930b      	str	r3, [sp, #44]	; 0x2c
 800add8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adda:	2b00      	cmp	r3, #0
 800addc:	f040 856e 	bne.w	800b8bc <_strtod_l+0xb6c>
 800ade0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade2:	b1e3      	cbz	r3, 800ae1e <_strtod_l+0xce>
 800ade4:	ec49 8b17 	vmov	d7, r8, r9
 800ade8:	eeb1 0b47 	vneg.f64	d0, d7
 800adec:	b01d      	add	sp, #116	; 0x74
 800adee:	ecbd 8b0c 	vpop	{d8-d13}
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	2a20      	cmp	r2, #32
 800adf8:	d1cd      	bne.n	800ad96 <_strtod_l+0x46>
 800adfa:	3301      	adds	r3, #1
 800adfc:	9317      	str	r3, [sp, #92]	; 0x5c
 800adfe:	e7bf      	b.n	800ad80 <_strtod_l+0x30>
 800ae00:	2a2d      	cmp	r2, #45	; 0x2d
 800ae02:	d1c8      	bne.n	800ad96 <_strtod_l+0x46>
 800ae04:	2201      	movs	r2, #1
 800ae06:	920b      	str	r2, [sp, #44]	; 0x2c
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1c3      	bne.n	800ad9a <_strtod_l+0x4a>
 800ae12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae14:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f040 854d 	bne.w	800b8b8 <_strtod_l+0xb68>
 800ae1e:	ec49 8b10 	vmov	d0, r8, r9
 800ae22:	e7e3      	b.n	800adec <_strtod_l+0x9c>
 800ae24:	2200      	movs	r2, #0
 800ae26:	e7ee      	b.n	800ae06 <_strtod_l+0xb6>
 800ae28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae2a:	b13a      	cbz	r2, 800ae3c <_strtod_l+0xec>
 800ae2c:	2135      	movs	r1, #53	; 0x35
 800ae2e:	a81a      	add	r0, sp, #104	; 0x68
 800ae30:	f002 fc46 	bl	800d6c0 <__copybits>
 800ae34:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae36:	4620      	mov	r0, r4
 800ae38:	f002 f80a 	bl	800ce50 <_Bfree>
 800ae3c:	3d01      	subs	r5, #1
 800ae3e:	2d05      	cmp	r5, #5
 800ae40:	d807      	bhi.n	800ae52 <_strtod_l+0x102>
 800ae42:	e8df f005 	tbb	[pc, r5]
 800ae46:	0b0e      	.short	0x0b0e
 800ae48:	030e1d18 	.word	0x030e1d18
 800ae4c:	f04f 0900 	mov.w	r9, #0
 800ae50:	46c8      	mov	r8, r9
 800ae52:	073b      	lsls	r3, r7, #28
 800ae54:	d5c0      	bpl.n	800add8 <_strtod_l+0x88>
 800ae56:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ae5a:	e7bd      	b.n	800add8 <_strtod_l+0x88>
 800ae5c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800ae60:	e7f7      	b.n	800ae52 <_strtod_l+0x102>
 800ae62:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800ae66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ae74:	e7ed      	b.n	800ae52 <_strtod_l+0x102>
 800ae76:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800b004 <_strtod_l+0x2b4>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	e7e8      	b.n	800ae52 <_strtod_l+0x102>
 800ae80:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ae84:	f04f 38ff 	mov.w	r8, #4294967295
 800ae88:	e7e3      	b.n	800ae52 <_strtod_l+0x102>
 800ae8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	2b30      	cmp	r3, #48	; 0x30
 800ae94:	d0f9      	beq.n	800ae8a <_strtod_l+0x13a>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d09e      	beq.n	800add8 <_strtod_l+0x88>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aea0:	930c      	str	r3, [sp, #48]	; 0x30
 800aea2:	2300      	movs	r3, #0
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	930a      	str	r3, [sp, #40]	; 0x28
 800aea8:	461e      	mov	r6, r3
 800aeaa:	220a      	movs	r2, #10
 800aeac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aeae:	f890 b000 	ldrb.w	fp, [r0]
 800aeb2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800aeb6:	b2d9      	uxtb	r1, r3
 800aeb8:	2909      	cmp	r1, #9
 800aeba:	d92b      	bls.n	800af14 <_strtod_l+0x1c4>
 800aebc:	9908      	ldr	r1, [sp, #32]
 800aebe:	462a      	mov	r2, r5
 800aec0:	f7ff ff07 	bl	800acd2 <strncmp>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d035      	beq.n	800af34 <_strtod_l+0x1e4>
 800aec8:	2000      	movs	r0, #0
 800aeca:	465a      	mov	r2, fp
 800aecc:	4633      	mov	r3, r6
 800aece:	4683      	mov	fp, r0
 800aed0:	4601      	mov	r1, r0
 800aed2:	2a65      	cmp	r2, #101	; 0x65
 800aed4:	d001      	beq.n	800aeda <_strtod_l+0x18a>
 800aed6:	2a45      	cmp	r2, #69	; 0x45
 800aed8:	d118      	bne.n	800af0c <_strtod_l+0x1bc>
 800aeda:	b91b      	cbnz	r3, 800aee4 <_strtod_l+0x194>
 800aedc:	9b06      	ldr	r3, [sp, #24]
 800aede:	4303      	orrs	r3, r0
 800aee0:	d097      	beq.n	800ae12 <_strtod_l+0xc2>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800aee8:	f10a 0201 	add.w	r2, sl, #1
 800aeec:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800aef2:	2a2b      	cmp	r2, #43	; 0x2b
 800aef4:	d077      	beq.n	800afe6 <_strtod_l+0x296>
 800aef6:	2a2d      	cmp	r2, #45	; 0x2d
 800aef8:	d07d      	beq.n	800aff6 <_strtod_l+0x2a6>
 800aefa:	f04f 0e00 	mov.w	lr, #0
 800aefe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800af02:	2d09      	cmp	r5, #9
 800af04:	f240 8084 	bls.w	800b010 <_strtod_l+0x2c0>
 800af08:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800af0c:	2500      	movs	r5, #0
 800af0e:	e09f      	b.n	800b050 <_strtod_l+0x300>
 800af10:	2300      	movs	r3, #0
 800af12:	e7c3      	b.n	800ae9c <_strtod_l+0x14c>
 800af14:	2e08      	cmp	r6, #8
 800af16:	bfd5      	itete	le
 800af18:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800af1a:	9904      	ldrgt	r1, [sp, #16]
 800af1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800af20:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af24:	f100 0001 	add.w	r0, r0, #1
 800af28:	bfd4      	ite	le
 800af2a:	930a      	strle	r3, [sp, #40]	; 0x28
 800af2c:	9304      	strgt	r3, [sp, #16]
 800af2e:	3601      	adds	r6, #1
 800af30:	9017      	str	r0, [sp, #92]	; 0x5c
 800af32:	e7bb      	b.n	800aeac <_strtod_l+0x15c>
 800af34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af36:	195a      	adds	r2, r3, r5
 800af38:	9217      	str	r2, [sp, #92]	; 0x5c
 800af3a:	5d5a      	ldrb	r2, [r3, r5]
 800af3c:	b3ae      	cbz	r6, 800afaa <_strtod_l+0x25a>
 800af3e:	4683      	mov	fp, r0
 800af40:	4633      	mov	r3, r6
 800af42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af46:	2909      	cmp	r1, #9
 800af48:	d912      	bls.n	800af70 <_strtod_l+0x220>
 800af4a:	2101      	movs	r1, #1
 800af4c:	e7c1      	b.n	800aed2 <_strtod_l+0x182>
 800af4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	9217      	str	r2, [sp, #92]	; 0x5c
 800af54:	785a      	ldrb	r2, [r3, #1]
 800af56:	3001      	adds	r0, #1
 800af58:	2a30      	cmp	r2, #48	; 0x30
 800af5a:	d0f8      	beq.n	800af4e <_strtod_l+0x1fe>
 800af5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af60:	2b08      	cmp	r3, #8
 800af62:	f200 84b0 	bhi.w	800b8c6 <_strtod_l+0xb76>
 800af66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af68:	930c      	str	r3, [sp, #48]	; 0x30
 800af6a:	4683      	mov	fp, r0
 800af6c:	2000      	movs	r0, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	3a30      	subs	r2, #48	; 0x30
 800af72:	f100 0101 	add.w	r1, r0, #1
 800af76:	d012      	beq.n	800af9e <_strtod_l+0x24e>
 800af78:	448b      	add	fp, r1
 800af7a:	eb00 0c03 	add.w	ip, r0, r3
 800af7e:	4619      	mov	r1, r3
 800af80:	250a      	movs	r5, #10
 800af82:	4561      	cmp	r1, ip
 800af84:	d113      	bne.n	800afae <_strtod_l+0x25e>
 800af86:	1819      	adds	r1, r3, r0
 800af88:	2908      	cmp	r1, #8
 800af8a:	f103 0301 	add.w	r3, r3, #1
 800af8e:	4403      	add	r3, r0
 800af90:	dc1d      	bgt.n	800afce <_strtod_l+0x27e>
 800af92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af94:	210a      	movs	r1, #10
 800af96:	fb01 2200 	mla	r2, r1, r0, r2
 800af9a:	920a      	str	r2, [sp, #40]	; 0x28
 800af9c:	2100      	movs	r1, #0
 800af9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afa0:	1c50      	adds	r0, r2, #1
 800afa2:	9017      	str	r0, [sp, #92]	; 0x5c
 800afa4:	7852      	ldrb	r2, [r2, #1]
 800afa6:	4608      	mov	r0, r1
 800afa8:	e7cb      	b.n	800af42 <_strtod_l+0x1f2>
 800afaa:	4630      	mov	r0, r6
 800afac:	e7d4      	b.n	800af58 <_strtod_l+0x208>
 800afae:	2908      	cmp	r1, #8
 800afb0:	dc04      	bgt.n	800afbc <_strtod_l+0x26c>
 800afb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800afb4:	436f      	muls	r7, r5
 800afb6:	970a      	str	r7, [sp, #40]	; 0x28
 800afb8:	3101      	adds	r1, #1
 800afba:	e7e2      	b.n	800af82 <_strtod_l+0x232>
 800afbc:	f101 0e01 	add.w	lr, r1, #1
 800afc0:	f1be 0f10 	cmp.w	lr, #16
 800afc4:	bfde      	ittt	le
 800afc6:	9f04      	ldrle	r7, [sp, #16]
 800afc8:	436f      	mulle	r7, r5
 800afca:	9704      	strle	r7, [sp, #16]
 800afcc:	e7f4      	b.n	800afb8 <_strtod_l+0x268>
 800afce:	2b10      	cmp	r3, #16
 800afd0:	bfdf      	itttt	le
 800afd2:	9804      	ldrle	r0, [sp, #16]
 800afd4:	210a      	movle	r1, #10
 800afd6:	fb01 2200 	mlale	r2, r1, r0, r2
 800afda:	9204      	strle	r2, [sp, #16]
 800afdc:	e7de      	b.n	800af9c <_strtod_l+0x24c>
 800afde:	f04f 0b00 	mov.w	fp, #0
 800afe2:	2101      	movs	r1, #1
 800afe4:	e77a      	b.n	800aedc <_strtod_l+0x18c>
 800afe6:	f04f 0e00 	mov.w	lr, #0
 800afea:	f10a 0202 	add.w	r2, sl, #2
 800afee:	9217      	str	r2, [sp, #92]	; 0x5c
 800aff0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800aff4:	e783      	b.n	800aefe <_strtod_l+0x1ae>
 800aff6:	f04f 0e01 	mov.w	lr, #1
 800affa:	e7f6      	b.n	800afea <_strtod_l+0x29a>
 800affc:	0800feb8 	.word	0x0800feb8
 800b000:	0800fc68 	.word	0x0800fc68
 800b004:	7ff00000 	.word	0x7ff00000
 800b008:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b00a:	1c55      	adds	r5, r2, #1
 800b00c:	9517      	str	r5, [sp, #92]	; 0x5c
 800b00e:	7852      	ldrb	r2, [r2, #1]
 800b010:	2a30      	cmp	r2, #48	; 0x30
 800b012:	d0f9      	beq.n	800b008 <_strtod_l+0x2b8>
 800b014:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b018:	2d08      	cmp	r5, #8
 800b01a:	f63f af77 	bhi.w	800af0c <_strtod_l+0x1bc>
 800b01e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b024:	9208      	str	r2, [sp, #32]
 800b026:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b028:	1c55      	adds	r5, r2, #1
 800b02a:	9517      	str	r5, [sp, #92]	; 0x5c
 800b02c:	7852      	ldrb	r2, [r2, #1]
 800b02e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800b032:	2f09      	cmp	r7, #9
 800b034:	d937      	bls.n	800b0a6 <_strtod_l+0x356>
 800b036:	9f08      	ldr	r7, [sp, #32]
 800b038:	1bed      	subs	r5, r5, r7
 800b03a:	2d08      	cmp	r5, #8
 800b03c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b040:	dc02      	bgt.n	800b048 <_strtod_l+0x2f8>
 800b042:	4565      	cmp	r5, ip
 800b044:	bfa8      	it	ge
 800b046:	4665      	movge	r5, ip
 800b048:	f1be 0f00 	cmp.w	lr, #0
 800b04c:	d000      	beq.n	800b050 <_strtod_l+0x300>
 800b04e:	426d      	negs	r5, r5
 800b050:	2b00      	cmp	r3, #0
 800b052:	d14f      	bne.n	800b0f4 <_strtod_l+0x3a4>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	4303      	orrs	r3, r0
 800b058:	f47f aebe 	bne.w	800add8 <_strtod_l+0x88>
 800b05c:	2900      	cmp	r1, #0
 800b05e:	f47f aed8 	bne.w	800ae12 <_strtod_l+0xc2>
 800b062:	2a69      	cmp	r2, #105	; 0x69
 800b064:	d027      	beq.n	800b0b6 <_strtod_l+0x366>
 800b066:	dc24      	bgt.n	800b0b2 <_strtod_l+0x362>
 800b068:	2a49      	cmp	r2, #73	; 0x49
 800b06a:	d024      	beq.n	800b0b6 <_strtod_l+0x366>
 800b06c:	2a4e      	cmp	r2, #78	; 0x4e
 800b06e:	f47f aed0 	bne.w	800ae12 <_strtod_l+0xc2>
 800b072:	499b      	ldr	r1, [pc, #620]	; (800b2e0 <_strtod_l+0x590>)
 800b074:	a817      	add	r0, sp, #92	; 0x5c
 800b076:	f001 fdbd 	bl	800cbf4 <__match>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f43f aec9 	beq.w	800ae12 <_strtod_l+0xc2>
 800b080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b28      	cmp	r3, #40	; 0x28
 800b086:	d12d      	bne.n	800b0e4 <_strtod_l+0x394>
 800b088:	4996      	ldr	r1, [pc, #600]	; (800b2e4 <_strtod_l+0x594>)
 800b08a:	aa1a      	add	r2, sp, #104	; 0x68
 800b08c:	a817      	add	r0, sp, #92	; 0x5c
 800b08e:	f001 fdc5 	bl	800cc1c <__hexnan>
 800b092:	2805      	cmp	r0, #5
 800b094:	d126      	bne.n	800b0e4 <_strtod_l+0x394>
 800b096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b098:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b09c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b0a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b0a4:	e698      	b.n	800add8 <_strtod_l+0x88>
 800b0a6:	250a      	movs	r5, #10
 800b0a8:	fb05 250c 	mla	r5, r5, ip, r2
 800b0ac:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b0b0:	e7b9      	b.n	800b026 <_strtod_l+0x2d6>
 800b0b2:	2a6e      	cmp	r2, #110	; 0x6e
 800b0b4:	e7db      	b.n	800b06e <_strtod_l+0x31e>
 800b0b6:	498c      	ldr	r1, [pc, #560]	; (800b2e8 <_strtod_l+0x598>)
 800b0b8:	a817      	add	r0, sp, #92	; 0x5c
 800b0ba:	f001 fd9b 	bl	800cbf4 <__match>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f43f aea7 	beq.w	800ae12 <_strtod_l+0xc2>
 800b0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c6:	4989      	ldr	r1, [pc, #548]	; (800b2ec <_strtod_l+0x59c>)
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	a817      	add	r0, sp, #92	; 0x5c
 800b0cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0ce:	f001 fd91 	bl	800cbf4 <__match>
 800b0d2:	b910      	cbnz	r0, 800b0da <_strtod_l+0x38a>
 800b0d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0da:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800b300 <_strtod_l+0x5b0>
 800b0de:	f04f 0800 	mov.w	r8, #0
 800b0e2:	e679      	b.n	800add8 <_strtod_l+0x88>
 800b0e4:	4882      	ldr	r0, [pc, #520]	; (800b2f0 <_strtod_l+0x5a0>)
 800b0e6:	f003 f877 	bl	800e1d8 <nan>
 800b0ea:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b0ee:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0f2:	e671      	b.n	800add8 <_strtod_l+0x88>
 800b0f4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800b0f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b0fc:	eba5 020b 	sub.w	r2, r5, fp
 800b100:	2e00      	cmp	r6, #0
 800b102:	bf08      	it	eq
 800b104:	461e      	moveq	r6, r3
 800b106:	2b10      	cmp	r3, #16
 800b108:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b10c:	9206      	str	r2, [sp, #24]
 800b10e:	461a      	mov	r2, r3
 800b110:	bfa8      	it	ge
 800b112:	2210      	movge	r2, #16
 800b114:	2b09      	cmp	r3, #9
 800b116:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800b11a:	dd0e      	ble.n	800b13a <_strtod_l+0x3ea>
 800b11c:	4975      	ldr	r1, [pc, #468]	; (800b2f4 <_strtod_l+0x5a4>)
 800b11e:	eddd 7a04 	vldr	s15, [sp, #16]
 800b122:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b126:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800b12a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800b12e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b132:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b136:	ec59 8b17 	vmov	r8, r9, d7
 800b13a:	2b0f      	cmp	r3, #15
 800b13c:	dc37      	bgt.n	800b1ae <_strtod_l+0x45e>
 800b13e:	9906      	ldr	r1, [sp, #24]
 800b140:	2900      	cmp	r1, #0
 800b142:	f43f ae49 	beq.w	800add8 <_strtod_l+0x88>
 800b146:	dd23      	ble.n	800b190 <_strtod_l+0x440>
 800b148:	2916      	cmp	r1, #22
 800b14a:	dc0b      	bgt.n	800b164 <_strtod_l+0x414>
 800b14c:	4b69      	ldr	r3, [pc, #420]	; (800b2f4 <_strtod_l+0x5a4>)
 800b14e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b152:	ed93 7b00 	vldr	d7, [r3]
 800b156:	ec49 8b16 	vmov	d6, r8, r9
 800b15a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b15e:	ec59 8b17 	vmov	r8, r9, d7
 800b162:	e639      	b.n	800add8 <_strtod_l+0x88>
 800b164:	9806      	ldr	r0, [sp, #24]
 800b166:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b16a:	4281      	cmp	r1, r0
 800b16c:	db1f      	blt.n	800b1ae <_strtod_l+0x45e>
 800b16e:	4a61      	ldr	r2, [pc, #388]	; (800b2f4 <_strtod_l+0x5a4>)
 800b170:	f1c3 030f 	rsb	r3, r3, #15
 800b174:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b178:	ed91 7b00 	vldr	d7, [r1]
 800b17c:	ec49 8b16 	vmov	d6, r8, r9
 800b180:	1ac3      	subs	r3, r0, r3
 800b182:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b18a:	ed92 6b00 	vldr	d6, [r2]
 800b18e:	e7e4      	b.n	800b15a <_strtod_l+0x40a>
 800b190:	9906      	ldr	r1, [sp, #24]
 800b192:	3116      	adds	r1, #22
 800b194:	db0b      	blt.n	800b1ae <_strtod_l+0x45e>
 800b196:	4b57      	ldr	r3, [pc, #348]	; (800b2f4 <_strtod_l+0x5a4>)
 800b198:	ebab 0505 	sub.w	r5, fp, r5
 800b19c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b1a0:	ed95 7b00 	vldr	d7, [r5]
 800b1a4:	ec49 8b16 	vmov	d6, r8, r9
 800b1a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b1ac:	e7d7      	b.n	800b15e <_strtod_l+0x40e>
 800b1ae:	9906      	ldr	r1, [sp, #24]
 800b1b0:	1a9a      	subs	r2, r3, r2
 800b1b2:	440a      	add	r2, r1
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	dd74      	ble.n	800b2a2 <_strtod_l+0x552>
 800b1b8:	f012 000f 	ands.w	r0, r2, #15
 800b1bc:	d00a      	beq.n	800b1d4 <_strtod_l+0x484>
 800b1be:	494d      	ldr	r1, [pc, #308]	; (800b2f4 <_strtod_l+0x5a4>)
 800b1c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b1c4:	ed91 7b00 	vldr	d7, [r1]
 800b1c8:	ec49 8b16 	vmov	d6, r8, r9
 800b1cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1d0:	ec59 8b17 	vmov	r8, r9, d7
 800b1d4:	f032 020f 	bics.w	r2, r2, #15
 800b1d8:	d04f      	beq.n	800b27a <_strtod_l+0x52a>
 800b1da:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b1de:	dd22      	ble.n	800b226 <_strtod_l+0x4d6>
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	462e      	mov	r6, r5
 800b1e4:	950a      	str	r5, [sp, #40]	; 0x28
 800b1e6:	462f      	mov	r7, r5
 800b1e8:	2322      	movs	r3, #34	; 0x22
 800b1ea:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800b300 <_strtod_l+0x5b0>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	f04f 0800 	mov.w	r8, #0
 800b1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f43f adee 	beq.w	800add8 <_strtod_l+0x88>
 800b1fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1fe:	4620      	mov	r0, r4
 800b200:	f001 fe26 	bl	800ce50 <_Bfree>
 800b204:	4639      	mov	r1, r7
 800b206:	4620      	mov	r0, r4
 800b208:	f001 fe22 	bl	800ce50 <_Bfree>
 800b20c:	4631      	mov	r1, r6
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 fe1e 	bl	800ce50 <_Bfree>
 800b214:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b216:	4620      	mov	r0, r4
 800b218:	f001 fe1a 	bl	800ce50 <_Bfree>
 800b21c:	4629      	mov	r1, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	f001 fe16 	bl	800ce50 <_Bfree>
 800b224:	e5d8      	b.n	800add8 <_strtod_l+0x88>
 800b226:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b22a:	2000      	movs	r0, #0
 800b22c:	4f32      	ldr	r7, [pc, #200]	; (800b2f8 <_strtod_l+0x5a8>)
 800b22e:	1112      	asrs	r2, r2, #4
 800b230:	4601      	mov	r1, r0
 800b232:	2a01      	cmp	r2, #1
 800b234:	dc24      	bgt.n	800b280 <_strtod_l+0x530>
 800b236:	b108      	cbz	r0, 800b23c <_strtod_l+0x4ec>
 800b238:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b23c:	4a2e      	ldr	r2, [pc, #184]	; (800b2f8 <_strtod_l+0x5a8>)
 800b23e:	482f      	ldr	r0, [pc, #188]	; (800b2fc <_strtod_l+0x5ac>)
 800b240:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800b244:	ed91 7b00 	vldr	d7, [r1]
 800b248:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b24c:	ec49 8b16 	vmov	d6, r8, r9
 800b250:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b254:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b258:	9905      	ldr	r1, [sp, #20]
 800b25a:	4a29      	ldr	r2, [pc, #164]	; (800b300 <_strtod_l+0x5b0>)
 800b25c:	400a      	ands	r2, r1
 800b25e:	4282      	cmp	r2, r0
 800b260:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b264:	d8bc      	bhi.n	800b1e0 <_strtod_l+0x490>
 800b266:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b26a:	4282      	cmp	r2, r0
 800b26c:	bf86      	itte	hi
 800b26e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b304 <_strtod_l+0x5b4>
 800b272:	f04f 38ff 	movhi.w	r8, #4294967295
 800b276:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b27a:	2200      	movs	r2, #0
 800b27c:	9204      	str	r2, [sp, #16]
 800b27e:	e07f      	b.n	800b380 <_strtod_l+0x630>
 800b280:	f012 0f01 	tst.w	r2, #1
 800b284:	d00a      	beq.n	800b29c <_strtod_l+0x54c>
 800b286:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800b28a:	ed90 7b00 	vldr	d7, [r0]
 800b28e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800b292:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b296:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b29a:	2001      	movs	r0, #1
 800b29c:	3101      	adds	r1, #1
 800b29e:	1052      	asrs	r2, r2, #1
 800b2a0:	e7c7      	b.n	800b232 <_strtod_l+0x4e2>
 800b2a2:	d0ea      	beq.n	800b27a <_strtod_l+0x52a>
 800b2a4:	4252      	negs	r2, r2
 800b2a6:	f012 000f 	ands.w	r0, r2, #15
 800b2aa:	d00a      	beq.n	800b2c2 <_strtod_l+0x572>
 800b2ac:	4911      	ldr	r1, [pc, #68]	; (800b2f4 <_strtod_l+0x5a4>)
 800b2ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b2b2:	ed91 7b00 	vldr	d7, [r1]
 800b2b6:	ec49 8b16 	vmov	d6, r8, r9
 800b2ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b2be:	ec59 8b17 	vmov	r8, r9, d7
 800b2c2:	1112      	asrs	r2, r2, #4
 800b2c4:	d0d9      	beq.n	800b27a <_strtod_l+0x52a>
 800b2c6:	2a1f      	cmp	r2, #31
 800b2c8:	dd1e      	ble.n	800b308 <_strtod_l+0x5b8>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	462e      	mov	r6, r5
 800b2ce:	950a      	str	r5, [sp, #40]	; 0x28
 800b2d0:	462f      	mov	r7, r5
 800b2d2:	2322      	movs	r3, #34	; 0x22
 800b2d4:	f04f 0800 	mov.w	r8, #0
 800b2d8:	f04f 0900 	mov.w	r9, #0
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	e789      	b.n	800b1f4 <_strtod_l+0x4a4>
 800b2e0:	0800fc3d 	.word	0x0800fc3d
 800b2e4:	0800fc7c 	.word	0x0800fc7c
 800b2e8:	0800fc35 	.word	0x0800fc35
 800b2ec:	0800fdbc 	.word	0x0800fdbc
 800b2f0:	08010093 	.word	0x08010093
 800b2f4:	0800ff58 	.word	0x0800ff58
 800b2f8:	0800ff30 	.word	0x0800ff30
 800b2fc:	7ca00000 	.word	0x7ca00000
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	7fefffff 	.word	0x7fefffff
 800b308:	f012 0110 	ands.w	r1, r2, #16
 800b30c:	bf18      	it	ne
 800b30e:	216a      	movne	r1, #106	; 0x6a
 800b310:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b314:	9104      	str	r1, [sp, #16]
 800b316:	49c0      	ldr	r1, [pc, #768]	; (800b618 <_strtod_l+0x8c8>)
 800b318:	2000      	movs	r0, #0
 800b31a:	07d7      	lsls	r7, r2, #31
 800b31c:	d508      	bpl.n	800b330 <_strtod_l+0x5e0>
 800b31e:	ed9d 6b08 	vldr	d6, [sp, #32]
 800b322:	ed91 7b00 	vldr	d7, [r1]
 800b326:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b32a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b32e:	2001      	movs	r0, #1
 800b330:	1052      	asrs	r2, r2, #1
 800b332:	f101 0108 	add.w	r1, r1, #8
 800b336:	d1f0      	bne.n	800b31a <_strtod_l+0x5ca>
 800b338:	b108      	cbz	r0, 800b33e <_strtod_l+0x5ee>
 800b33a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800b33e:	9a04      	ldr	r2, [sp, #16]
 800b340:	b1ba      	cbz	r2, 800b372 <_strtod_l+0x622>
 800b342:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b346:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	4649      	mov	r1, r9
 800b34e:	dd10      	ble.n	800b372 <_strtod_l+0x622>
 800b350:	2a1f      	cmp	r2, #31
 800b352:	f340 8132 	ble.w	800b5ba <_strtod_l+0x86a>
 800b356:	2a34      	cmp	r2, #52	; 0x34
 800b358:	bfde      	ittt	le
 800b35a:	3a20      	suble	r2, #32
 800b35c:	f04f 30ff 	movle.w	r0, #4294967295
 800b360:	fa00 f202 	lslle.w	r2, r0, r2
 800b364:	f04f 0800 	mov.w	r8, #0
 800b368:	bfcc      	ite	gt
 800b36a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b36e:	ea02 0901 	andle.w	r9, r2, r1
 800b372:	ec49 8b17 	vmov	d7, r8, r9
 800b376:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37e:	d0a4      	beq.n	800b2ca <_strtod_l+0x57a>
 800b380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b382:	9200      	str	r2, [sp, #0]
 800b384:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b386:	4632      	mov	r2, r6
 800b388:	4620      	mov	r0, r4
 800b38a:	f001 fdcd 	bl	800cf28 <__s2b>
 800b38e:	900a      	str	r0, [sp, #40]	; 0x28
 800b390:	2800      	cmp	r0, #0
 800b392:	f43f af25 	beq.w	800b1e0 <_strtod_l+0x490>
 800b396:	9b06      	ldr	r3, [sp, #24]
 800b398:	ebab 0505 	sub.w	r5, fp, r5
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfb4      	ite	lt
 800b3a0:	462b      	movlt	r3, r5
 800b3a2:	2300      	movge	r3, #0
 800b3a4:	930c      	str	r3, [sp, #48]	; 0x30
 800b3a6:	9b06      	ldr	r3, [sp, #24]
 800b3a8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b600 <_strtod_l+0x8b0>
 800b3ac:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b608 <_strtod_l+0x8b8>
 800b3b0:	ed9f bb97 	vldr	d11, [pc, #604]	; 800b610 <_strtod_l+0x8c0>
 800b3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3b8:	2500      	movs	r5, #0
 800b3ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b3bc:	462e      	mov	r6, r5
 800b3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	6859      	ldr	r1, [r3, #4]
 800b3c4:	f001 fd04 	bl	800cdd0 <_Balloc>
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f43f af0c 	beq.w	800b1e8 <_strtod_l+0x498>
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	3202      	adds	r2, #2
 800b3d6:	f103 010c 	add.w	r1, r3, #12
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	300c      	adds	r0, #12
 800b3de:	f001 fce9 	bl	800cdb4 <memcpy>
 800b3e2:	ec49 8b10 	vmov	d0, r8, r9
 800b3e6:	aa1a      	add	r2, sp, #104	; 0x68
 800b3e8:	a919      	add	r1, sp, #100	; 0x64
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b3f0:	f002 f8d6 	bl	800d5a0 <__d2b>
 800b3f4:	9018      	str	r0, [sp, #96]	; 0x60
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f aef6 	beq.w	800b1e8 <_strtod_l+0x498>
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4620      	mov	r0, r4
 800b400:	f001 fe2c 	bl	800d05c <__i2b>
 800b404:	4606      	mov	r6, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f aeee 	beq.w	800b1e8 <_strtod_l+0x498>
 800b40c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b40e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfab      	itete	ge
 800b414:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b416:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b418:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800b41c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800b420:	bfac      	ite	ge
 800b422:	eb03 0b02 	addge.w	fp, r3, r2
 800b426:	eba2 0a03 	sublt.w	sl, r2, r3
 800b42a:	9a04      	ldr	r2, [sp, #16]
 800b42c:	1a9b      	subs	r3, r3, r2
 800b42e:	440b      	add	r3, r1
 800b430:	4a7a      	ldr	r2, [pc, #488]	; (800b61c <_strtod_l+0x8cc>)
 800b432:	3b01      	subs	r3, #1
 800b434:	4293      	cmp	r3, r2
 800b436:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b43a:	f280 80d1 	bge.w	800b5e0 <_strtod_l+0x890>
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	2a1f      	cmp	r2, #31
 800b442:	eba1 0102 	sub.w	r1, r1, r2
 800b446:	f04f 0001 	mov.w	r0, #1
 800b44a:	f300 80bd 	bgt.w	800b5c8 <_strtod_l+0x878>
 800b44e:	fa00 f302 	lsl.w	r3, r0, r2
 800b452:	930e      	str	r3, [sp, #56]	; 0x38
 800b454:	2300      	movs	r3, #0
 800b456:	930d      	str	r3, [sp, #52]	; 0x34
 800b458:	eb0b 0301 	add.w	r3, fp, r1
 800b45c:	9a04      	ldr	r2, [sp, #16]
 800b45e:	459b      	cmp	fp, r3
 800b460:	448a      	add	sl, r1
 800b462:	4492      	add	sl, r2
 800b464:	465a      	mov	r2, fp
 800b466:	bfa8      	it	ge
 800b468:	461a      	movge	r2, r3
 800b46a:	4552      	cmp	r2, sl
 800b46c:	bfa8      	it	ge
 800b46e:	4652      	movge	r2, sl
 800b470:	2a00      	cmp	r2, #0
 800b472:	bfc2      	ittt	gt
 800b474:	1a9b      	subgt	r3, r3, r2
 800b476:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b47a:	ebab 0b02 	subgt.w	fp, fp, r2
 800b47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b480:	2a00      	cmp	r2, #0
 800b482:	dd18      	ble.n	800b4b6 <_strtod_l+0x766>
 800b484:	4631      	mov	r1, r6
 800b486:	4620      	mov	r0, r4
 800b488:	9315      	str	r3, [sp, #84]	; 0x54
 800b48a:	f001 fea3 	bl	800d1d4 <__pow5mult>
 800b48e:	4606      	mov	r6, r0
 800b490:	2800      	cmp	r0, #0
 800b492:	f43f aea9 	beq.w	800b1e8 <_strtod_l+0x498>
 800b496:	4601      	mov	r1, r0
 800b498:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b49a:	4620      	mov	r0, r4
 800b49c:	f001 fdf4 	bl	800d088 <__multiply>
 800b4a0:	9014      	str	r0, [sp, #80]	; 0x50
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f43f aea0 	beq.w	800b1e8 <_strtod_l+0x498>
 800b4a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 fcd0 	bl	800ce50 <_Bfree>
 800b4b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4b4:	9218      	str	r2, [sp, #96]	; 0x60
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f300 8097 	bgt.w	800b5ea <_strtod_l+0x89a>
 800b4bc:	9b06      	ldr	r3, [sp, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd08      	ble.n	800b4d4 <_strtod_l+0x784>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f001 fe84 	bl	800d1d4 <__pow5mult>
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f43f ae8a 	beq.w	800b1e8 <_strtod_l+0x498>
 800b4d4:	f1ba 0f00 	cmp.w	sl, #0
 800b4d8:	dd08      	ble.n	800b4ec <_strtod_l+0x79c>
 800b4da:	4639      	mov	r1, r7
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 fed2 	bl	800d288 <__lshift>
 800b4e4:	4607      	mov	r7, r0
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f ae7e 	beq.w	800b1e8 <_strtod_l+0x498>
 800b4ec:	f1bb 0f00 	cmp.w	fp, #0
 800b4f0:	dd08      	ble.n	800b504 <_strtod_l+0x7b4>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	465a      	mov	r2, fp
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f001 fec6 	bl	800d288 <__lshift>
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f ae72 	beq.w	800b1e8 <_strtod_l+0x498>
 800b504:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b506:	463a      	mov	r2, r7
 800b508:	4620      	mov	r0, r4
 800b50a:	f001 ff45 	bl	800d398 <__mdiff>
 800b50e:	4605      	mov	r5, r0
 800b510:	2800      	cmp	r0, #0
 800b512:	f43f ae69 	beq.w	800b1e8 <_strtod_l+0x498>
 800b516:	2300      	movs	r3, #0
 800b518:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b51c:	60c3      	str	r3, [r0, #12]
 800b51e:	4631      	mov	r1, r6
 800b520:	f001 ff1e 	bl	800d360 <__mcmp>
 800b524:	2800      	cmp	r0, #0
 800b526:	da7f      	bge.n	800b628 <_strtod_l+0x8d8>
 800b528:	ea5a 0308 	orrs.w	r3, sl, r8
 800b52c:	f040 80a5 	bne.w	800b67a <_strtod_l+0x92a>
 800b530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b534:	2b00      	cmp	r3, #0
 800b536:	f040 80a0 	bne.w	800b67a <_strtod_l+0x92a>
 800b53a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b53e:	0d1b      	lsrs	r3, r3, #20
 800b540:	051b      	lsls	r3, r3, #20
 800b542:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b546:	f240 8098 	bls.w	800b67a <_strtod_l+0x92a>
 800b54a:	696b      	ldr	r3, [r5, #20]
 800b54c:	b91b      	cbnz	r3, 800b556 <_strtod_l+0x806>
 800b54e:	692b      	ldr	r3, [r5, #16]
 800b550:	2b01      	cmp	r3, #1
 800b552:	f340 8092 	ble.w	800b67a <_strtod_l+0x92a>
 800b556:	4629      	mov	r1, r5
 800b558:	2201      	movs	r2, #1
 800b55a:	4620      	mov	r0, r4
 800b55c:	f001 fe94 	bl	800d288 <__lshift>
 800b560:	4631      	mov	r1, r6
 800b562:	4605      	mov	r5, r0
 800b564:	f001 fefc 	bl	800d360 <__mcmp>
 800b568:	2800      	cmp	r0, #0
 800b56a:	f340 8086 	ble.w	800b67a <_strtod_l+0x92a>
 800b56e:	9904      	ldr	r1, [sp, #16]
 800b570:	4a2b      	ldr	r2, [pc, #172]	; (800b620 <_strtod_l+0x8d0>)
 800b572:	464b      	mov	r3, r9
 800b574:	2900      	cmp	r1, #0
 800b576:	f000 80a1 	beq.w	800b6bc <_strtod_l+0x96c>
 800b57a:	ea02 0109 	and.w	r1, r2, r9
 800b57e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b582:	f300 809b 	bgt.w	800b6bc <_strtod_l+0x96c>
 800b586:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b58a:	f77f aea2 	ble.w	800b2d2 <_strtod_l+0x582>
 800b58e:	4a25      	ldr	r2, [pc, #148]	; (800b624 <_strtod_l+0x8d4>)
 800b590:	2300      	movs	r3, #0
 800b592:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b596:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800b59a:	ec49 8b17 	vmov	d7, r8, r9
 800b59e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b5a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	bf08      	it	eq
 800b5ae:	2322      	moveq	r3, #34	; 0x22
 800b5b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b5b4:	bf08      	it	eq
 800b5b6:	6023      	streq	r3, [r4, #0]
 800b5b8:	e620      	b.n	800b1fc <_strtod_l+0x4ac>
 800b5ba:	f04f 31ff 	mov.w	r1, #4294967295
 800b5be:	fa01 f202 	lsl.w	r2, r1, r2
 800b5c2:	ea02 0808 	and.w	r8, r2, r8
 800b5c6:	e6d4      	b.n	800b372 <_strtod_l+0x622>
 800b5c8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b5cc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b5d0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b5d4:	33e2      	adds	r3, #226	; 0xe2
 800b5d6:	fa00 f303 	lsl.w	r3, r0, r3
 800b5da:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800b5de:	e73b      	b.n	800b458 <_strtod_l+0x708>
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800b5e8:	e736      	b.n	800b458 <_strtod_l+0x708>
 800b5ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f001 fe4a 	bl	800d288 <__lshift>
 800b5f4:	9018      	str	r0, [sp, #96]	; 0x60
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f47f af60 	bne.w	800b4bc <_strtod_l+0x76c>
 800b5fc:	e5f4      	b.n	800b1e8 <_strtod_l+0x498>
 800b5fe:	bf00      	nop
 800b600:	94a03595 	.word	0x94a03595
 800b604:	3fcfffff 	.word	0x3fcfffff
 800b608:	94a03595 	.word	0x94a03595
 800b60c:	3fdfffff 	.word	0x3fdfffff
 800b610:	35afe535 	.word	0x35afe535
 800b614:	3fe00000 	.word	0x3fe00000
 800b618:	0800fc90 	.word	0x0800fc90
 800b61c:	fffffc02 	.word	0xfffffc02
 800b620:	7ff00000 	.word	0x7ff00000
 800b624:	39500000 	.word	0x39500000
 800b628:	46cb      	mov	fp, r9
 800b62a:	d165      	bne.n	800b6f8 <_strtod_l+0x9a8>
 800b62c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b630:	f1ba 0f00 	cmp.w	sl, #0
 800b634:	d02a      	beq.n	800b68c <_strtod_l+0x93c>
 800b636:	4aaa      	ldr	r2, [pc, #680]	; (800b8e0 <_strtod_l+0xb90>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d12b      	bne.n	800b694 <_strtod_l+0x944>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	4641      	mov	r1, r8
 800b640:	b1fb      	cbz	r3, 800b682 <_strtod_l+0x932>
 800b642:	4aa8      	ldr	r2, [pc, #672]	; (800b8e4 <_strtod_l+0xb94>)
 800b644:	ea09 0202 	and.w	r2, r9, r2
 800b648:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	d81a      	bhi.n	800b688 <_strtod_l+0x938>
 800b652:	0d12      	lsrs	r2, r2, #20
 800b654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b658:	fa00 f303 	lsl.w	r3, r0, r3
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d119      	bne.n	800b694 <_strtod_l+0x944>
 800b660:	4ba1      	ldr	r3, [pc, #644]	; (800b8e8 <_strtod_l+0xb98>)
 800b662:	459b      	cmp	fp, r3
 800b664:	d102      	bne.n	800b66c <_strtod_l+0x91c>
 800b666:	3101      	adds	r1, #1
 800b668:	f43f adbe 	beq.w	800b1e8 <_strtod_l+0x498>
 800b66c:	4b9d      	ldr	r3, [pc, #628]	; (800b8e4 <_strtod_l+0xb94>)
 800b66e:	ea0b 0303 	and.w	r3, fp, r3
 800b672:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b676:	f04f 0800 	mov.w	r8, #0
 800b67a:	9b04      	ldr	r3, [sp, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d186      	bne.n	800b58e <_strtod_l+0x83e>
 800b680:	e5bc      	b.n	800b1fc <_strtod_l+0x4ac>
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	e7e9      	b.n	800b65c <_strtod_l+0x90c>
 800b688:	4603      	mov	r3, r0
 800b68a:	e7e7      	b.n	800b65c <_strtod_l+0x90c>
 800b68c:	ea53 0308 	orrs.w	r3, r3, r8
 800b690:	f43f af6d 	beq.w	800b56e <_strtod_l+0x81e>
 800b694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b696:	b1db      	cbz	r3, 800b6d0 <_strtod_l+0x980>
 800b698:	ea13 0f0b 	tst.w	r3, fp
 800b69c:	d0ed      	beq.n	800b67a <_strtod_l+0x92a>
 800b69e:	9a04      	ldr	r2, [sp, #16]
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	f1ba 0f00 	cmp.w	sl, #0
 800b6a8:	d016      	beq.n	800b6d8 <_strtod_l+0x988>
 800b6aa:	f7ff fb37 	bl	800ad1c <sulp>
 800b6ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b6b2:	ee37 7b00 	vadd.f64	d7, d7, d0
 800b6b6:	ec59 8b17 	vmov	r8, r9, d7
 800b6ba:	e7de      	b.n	800b67a <_strtod_l+0x92a>
 800b6bc:	4013      	ands	r3, r2
 800b6be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b6c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b6c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b6ca:	f04f 38ff 	mov.w	r8, #4294967295
 800b6ce:	e7d4      	b.n	800b67a <_strtod_l+0x92a>
 800b6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6d2:	ea13 0f08 	tst.w	r3, r8
 800b6d6:	e7e1      	b.n	800b69c <_strtod_l+0x94c>
 800b6d8:	f7ff fb20 	bl	800ad1c <sulp>
 800b6dc:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b6e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800b6e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b6f4:	d1c1      	bne.n	800b67a <_strtod_l+0x92a>
 800b6f6:	e5ec      	b.n	800b2d2 <_strtod_l+0x582>
 800b6f8:	4631      	mov	r1, r6
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f001 ffac 	bl	800d658 <__ratio>
 800b700:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b704:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70c:	d867      	bhi.n	800b7de <_strtod_l+0xa8e>
 800b70e:	f1ba 0f00 	cmp.w	sl, #0
 800b712:	d044      	beq.n	800b79e <_strtod_l+0xa4e>
 800b714:	4b75      	ldr	r3, [pc, #468]	; (800b8ec <_strtod_l+0xb9c>)
 800b716:	2200      	movs	r2, #0
 800b718:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b71c:	4971      	ldr	r1, [pc, #452]	; (800b8e4 <_strtod_l+0xb94>)
 800b71e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b8f8 <_strtod_l+0xba8>
 800b722:	ea0b 0001 	and.w	r0, fp, r1
 800b726:	4560      	cmp	r0, ip
 800b728:	900d      	str	r0, [sp, #52]	; 0x34
 800b72a:	f040 808b 	bne.w	800b844 <_strtod_l+0xaf4>
 800b72e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b732:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b736:	ec49 8b10 	vmov	d0, r8, r9
 800b73a:	ec43 2b1c 	vmov	d12, r2, r3
 800b73e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b742:	f001 feb1 	bl	800d4a8 <__ulp>
 800b746:	ec49 8b1d 	vmov	d13, r8, r9
 800b74a:	eeac db00 	vfma.f64	d13, d12, d0
 800b74e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800b752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b754:	4963      	ldr	r1, [pc, #396]	; (800b8e4 <_strtod_l+0xb94>)
 800b756:	4a66      	ldr	r2, [pc, #408]	; (800b8f0 <_strtod_l+0xba0>)
 800b758:	4019      	ands	r1, r3
 800b75a:	4291      	cmp	r1, r2
 800b75c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800b760:	d947      	bls.n	800b7f2 <_strtod_l+0xaa2>
 800b762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b764:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b768:	4293      	cmp	r3, r2
 800b76a:	d103      	bne.n	800b774 <_strtod_l+0xa24>
 800b76c:	9b08      	ldr	r3, [sp, #32]
 800b76e:	3301      	adds	r3, #1
 800b770:	f43f ad3a 	beq.w	800b1e8 <_strtod_l+0x498>
 800b774:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800b8e8 <_strtod_l+0xb98>
 800b778:	f04f 38ff 	mov.w	r8, #4294967295
 800b77c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b77e:	4620      	mov	r0, r4
 800b780:	f001 fb66 	bl	800ce50 <_Bfree>
 800b784:	4639      	mov	r1, r7
 800b786:	4620      	mov	r0, r4
 800b788:	f001 fb62 	bl	800ce50 <_Bfree>
 800b78c:	4631      	mov	r1, r6
 800b78e:	4620      	mov	r0, r4
 800b790:	f001 fb5e 	bl	800ce50 <_Bfree>
 800b794:	4629      	mov	r1, r5
 800b796:	4620      	mov	r0, r4
 800b798:	f001 fb5a 	bl	800ce50 <_Bfree>
 800b79c:	e60f      	b.n	800b3be <_strtod_l+0x66e>
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	d112      	bne.n	800b7ca <_strtod_l+0xa7a>
 800b7a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7a8:	b9b3      	cbnz	r3, 800b7d8 <_strtod_l+0xa88>
 800b7aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b7ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b7ba:	d401      	bmi.n	800b7c0 <_strtod_l+0xa70>
 800b7bc:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b7c0:	eeb1 7b48 	vneg.f64	d7, d8
 800b7c4:	ec53 2b17 	vmov	r2, r3, d7
 800b7c8:	e7a8      	b.n	800b71c <_strtod_l+0x9cc>
 800b7ca:	f1b8 0f01 	cmp.w	r8, #1
 800b7ce:	d103      	bne.n	800b7d8 <_strtod_l+0xa88>
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	f43f ad7d 	beq.w	800b2d2 <_strtod_l+0x582>
 800b7d8:	4b46      	ldr	r3, [pc, #280]	; (800b8f4 <_strtod_l+0xba4>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	e79c      	b.n	800b718 <_strtod_l+0x9c8>
 800b7de:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b7e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b7e6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ea:	d0e9      	beq.n	800b7c0 <_strtod_l+0xa70>
 800b7ec:	ec53 2b18 	vmov	r2, r3, d8
 800b7f0:	e794      	b.n	800b71c <_strtod_l+0x9cc>
 800b7f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b7f6:	9b04      	ldr	r3, [sp, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1bf      	bne.n	800b77c <_strtod_l+0xa2c>
 800b7fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b802:	0d1b      	lsrs	r3, r3, #20
 800b804:	051b      	lsls	r3, r3, #20
 800b806:	429a      	cmp	r2, r3
 800b808:	d1b8      	bne.n	800b77c <_strtod_l+0xa2c>
 800b80a:	ec51 0b18 	vmov	r0, r1, d8
 800b80e:	f7f4 ff53 	bl	80006b8 <__aeabi_d2lz>
 800b812:	f7f4 ff0b 	bl	800062c <__aeabi_l2d>
 800b816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b81a:	ec41 0b17 	vmov	d7, r0, r1
 800b81e:	ea43 0308 	orr.w	r3, r3, r8
 800b822:	ea53 030a 	orrs.w	r3, r3, sl
 800b826:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b82a:	d03e      	beq.n	800b8aa <_strtod_l+0xb5a>
 800b82c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b834:	f53f ace2 	bmi.w	800b1fc <_strtod_l+0x4ac>
 800b838:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	dd9c      	ble.n	800b77c <_strtod_l+0xa2c>
 800b842:	e4db      	b.n	800b1fc <_strtod_l+0x4ac>
 800b844:	9904      	ldr	r1, [sp, #16]
 800b846:	b301      	cbz	r1, 800b88a <_strtod_l+0xb3a>
 800b848:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b84a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b84e:	d81c      	bhi.n	800b88a <_strtod_l+0xb3a>
 800b850:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b8d8 <_strtod_l+0xb88>
 800b854:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85c:	d811      	bhi.n	800b882 <_strtod_l+0xb32>
 800b85e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b862:	ee18 3a10 	vmov	r3, s16
 800b866:	2b01      	cmp	r3, #1
 800b868:	bf38      	it	cc
 800b86a:	2301      	movcc	r3, #1
 800b86c:	ee08 3a10 	vmov	s16, r3
 800b870:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b874:	f1ba 0f00 	cmp.w	sl, #0
 800b878:	d114      	bne.n	800b8a4 <_strtod_l+0xb54>
 800b87a:	eeb1 7b48 	vneg.f64	d7, d8
 800b87e:	ec53 2b17 	vmov	r2, r3, d7
 800b882:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b884:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800b888:	1a0b      	subs	r3, r1, r0
 800b88a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b88e:	ec43 2b1c 	vmov	d12, r2, r3
 800b892:	f001 fe09 	bl	800d4a8 <__ulp>
 800b896:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b89a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800b89e:	ec59 8b17 	vmov	r8, r9, d7
 800b8a2:	e7a8      	b.n	800b7f6 <_strtod_l+0xaa6>
 800b8a4:	ec53 2b18 	vmov	r2, r3, d8
 800b8a8:	e7eb      	b.n	800b882 <_strtod_l+0xb32>
 800b8aa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	f57f af63 	bpl.w	800b77c <_strtod_l+0xa2c>
 800b8b6:	e4a1      	b.n	800b1fc <_strtod_l+0x4ac>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	f7ff ba8d 	b.w	800ade0 <_strtod_l+0x90>
 800b8c6:	2a65      	cmp	r2, #101	; 0x65
 800b8c8:	f43f ab89 	beq.w	800afde <_strtod_l+0x28e>
 800b8cc:	2a45      	cmp	r2, #69	; 0x45
 800b8ce:	f43f ab86 	beq.w	800afde <_strtod_l+0x28e>
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	f7ff bbbe 	b.w	800b054 <_strtod_l+0x304>
 800b8d8:	ffc00000 	.word	0xffc00000
 800b8dc:	41dfffff 	.word	0x41dfffff
 800b8e0:	000fffff 	.word	0x000fffff
 800b8e4:	7ff00000 	.word	0x7ff00000
 800b8e8:	7fefffff 	.word	0x7fefffff
 800b8ec:	3ff00000 	.word	0x3ff00000
 800b8f0:	7c9fffff 	.word	0x7c9fffff
 800b8f4:	bff00000 	.word	0xbff00000
 800b8f8:	7fe00000 	.word	0x7fe00000

0800b8fc <_strtod_r>:
 800b8fc:	4b01      	ldr	r3, [pc, #4]	; (800b904 <_strtod_r+0x8>)
 800b8fe:	f7ff ba27 	b.w	800ad50 <_strtod_l>
 800b902:	bf00      	nop
 800b904:	20000198 	.word	0x20000198

0800b908 <_strtol_l.isra.0>:
 800b908:	2b01      	cmp	r3, #1
 800b90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90e:	d001      	beq.n	800b914 <_strtol_l.isra.0+0xc>
 800b910:	2b24      	cmp	r3, #36	; 0x24
 800b912:	d906      	bls.n	800b922 <_strtol_l.isra.0+0x1a>
 800b914:	f7fe fac4 	bl	8009ea0 <__errno>
 800b918:	2316      	movs	r3, #22
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	2000      	movs	r0, #0
 800b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b922:	4f3a      	ldr	r7, [pc, #232]	; (800ba0c <_strtol_l.isra.0+0x104>)
 800b924:	468e      	mov	lr, r1
 800b926:	4676      	mov	r6, lr
 800b928:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b92c:	5de5      	ldrb	r5, [r4, r7]
 800b92e:	f015 0508 	ands.w	r5, r5, #8
 800b932:	d1f8      	bne.n	800b926 <_strtol_l.isra.0+0x1e>
 800b934:	2c2d      	cmp	r4, #45	; 0x2d
 800b936:	d134      	bne.n	800b9a2 <_strtol_l.isra.0+0x9a>
 800b938:	f89e 4000 	ldrb.w	r4, [lr]
 800b93c:	f04f 0801 	mov.w	r8, #1
 800b940:	f106 0e02 	add.w	lr, r6, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d05c      	beq.n	800ba02 <_strtol_l.isra.0+0xfa>
 800b948:	2b10      	cmp	r3, #16
 800b94a:	d10c      	bne.n	800b966 <_strtol_l.isra.0+0x5e>
 800b94c:	2c30      	cmp	r4, #48	; 0x30
 800b94e:	d10a      	bne.n	800b966 <_strtol_l.isra.0+0x5e>
 800b950:	f89e 4000 	ldrb.w	r4, [lr]
 800b954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b958:	2c58      	cmp	r4, #88	; 0x58
 800b95a:	d14d      	bne.n	800b9f8 <_strtol_l.isra.0+0xf0>
 800b95c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b960:	2310      	movs	r3, #16
 800b962:	f10e 0e02 	add.w	lr, lr, #2
 800b966:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b96a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b96e:	2600      	movs	r6, #0
 800b970:	fbbc f9f3 	udiv	r9, ip, r3
 800b974:	4635      	mov	r5, r6
 800b976:	fb03 ca19 	mls	sl, r3, r9, ip
 800b97a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b97e:	2f09      	cmp	r7, #9
 800b980:	d818      	bhi.n	800b9b4 <_strtol_l.isra.0+0xac>
 800b982:	463c      	mov	r4, r7
 800b984:	42a3      	cmp	r3, r4
 800b986:	dd24      	ble.n	800b9d2 <_strtol_l.isra.0+0xca>
 800b988:	2e00      	cmp	r6, #0
 800b98a:	db1f      	blt.n	800b9cc <_strtol_l.isra.0+0xc4>
 800b98c:	45a9      	cmp	r9, r5
 800b98e:	d31d      	bcc.n	800b9cc <_strtol_l.isra.0+0xc4>
 800b990:	d101      	bne.n	800b996 <_strtol_l.isra.0+0x8e>
 800b992:	45a2      	cmp	sl, r4
 800b994:	db1a      	blt.n	800b9cc <_strtol_l.isra.0+0xc4>
 800b996:	fb05 4503 	mla	r5, r5, r3, r4
 800b99a:	2601      	movs	r6, #1
 800b99c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b9a0:	e7eb      	b.n	800b97a <_strtol_l.isra.0+0x72>
 800b9a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b9a4:	bf08      	it	eq
 800b9a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b9aa:	46a8      	mov	r8, r5
 800b9ac:	bf08      	it	eq
 800b9ae:	f106 0e02 	addeq.w	lr, r6, #2
 800b9b2:	e7c7      	b.n	800b944 <_strtol_l.isra.0+0x3c>
 800b9b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b9b8:	2f19      	cmp	r7, #25
 800b9ba:	d801      	bhi.n	800b9c0 <_strtol_l.isra.0+0xb8>
 800b9bc:	3c37      	subs	r4, #55	; 0x37
 800b9be:	e7e1      	b.n	800b984 <_strtol_l.isra.0+0x7c>
 800b9c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b9c4:	2f19      	cmp	r7, #25
 800b9c6:	d804      	bhi.n	800b9d2 <_strtol_l.isra.0+0xca>
 800b9c8:	3c57      	subs	r4, #87	; 0x57
 800b9ca:	e7db      	b.n	800b984 <_strtol_l.isra.0+0x7c>
 800b9cc:	f04f 36ff 	mov.w	r6, #4294967295
 800b9d0:	e7e4      	b.n	800b99c <_strtol_l.isra.0+0x94>
 800b9d2:	2e00      	cmp	r6, #0
 800b9d4:	da05      	bge.n	800b9e2 <_strtol_l.isra.0+0xda>
 800b9d6:	2322      	movs	r3, #34	; 0x22
 800b9d8:	6003      	str	r3, [r0, #0]
 800b9da:	4665      	mov	r5, ip
 800b9dc:	b942      	cbnz	r2, 800b9f0 <_strtol_l.isra.0+0xe8>
 800b9de:	4628      	mov	r0, r5
 800b9e0:	e79d      	b.n	800b91e <_strtol_l.isra.0+0x16>
 800b9e2:	f1b8 0f00 	cmp.w	r8, #0
 800b9e6:	d000      	beq.n	800b9ea <_strtol_l.isra.0+0xe2>
 800b9e8:	426d      	negs	r5, r5
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	d0f7      	beq.n	800b9de <_strtol_l.isra.0+0xd6>
 800b9ee:	b10e      	cbz	r6, 800b9f4 <_strtol_l.isra.0+0xec>
 800b9f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b9f4:	6011      	str	r1, [r2, #0]
 800b9f6:	e7f2      	b.n	800b9de <_strtol_l.isra.0+0xd6>
 800b9f8:	2430      	movs	r4, #48	; 0x30
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1b3      	bne.n	800b966 <_strtol_l.isra.0+0x5e>
 800b9fe:	2308      	movs	r3, #8
 800ba00:	e7b1      	b.n	800b966 <_strtol_l.isra.0+0x5e>
 800ba02:	2c30      	cmp	r4, #48	; 0x30
 800ba04:	d0a4      	beq.n	800b950 <_strtol_l.isra.0+0x48>
 800ba06:	230a      	movs	r3, #10
 800ba08:	e7ad      	b.n	800b966 <_strtol_l.isra.0+0x5e>
 800ba0a:	bf00      	nop
 800ba0c:	0800fcb9 	.word	0x0800fcb9

0800ba10 <_strtol_r>:
 800ba10:	f7ff bf7a 	b.w	800b908 <_strtol_l.isra.0>

0800ba14 <_write_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	; (800ba34 <_write_r+0x20>)
 800ba18:	4604      	mov	r4, r0
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	602a      	str	r2, [r5, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	f7f7 fd5d 	bl	80034e2 <_write>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d102      	bne.n	800ba32 <_write_r+0x1e>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	b103      	cbz	r3, 800ba32 <_write_r+0x1e>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	20018910 	.word	0x20018910

0800ba38 <_close_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_close_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f7 fd69 	bl	800351a <_close>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_close_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_close_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20018910 	.word	0x20018910

0800ba58 <quorem>:
 800ba58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	6903      	ldr	r3, [r0, #16]
 800ba5e:	690c      	ldr	r4, [r1, #16]
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	4607      	mov	r7, r0
 800ba64:	f2c0 8081 	blt.w	800bb6a <quorem+0x112>
 800ba68:	3c01      	subs	r4, #1
 800ba6a:	f101 0814 	add.w	r8, r1, #20
 800ba6e:	f100 0514 	add.w	r5, r0, #20
 800ba72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba80:	3301      	adds	r3, #1
 800ba82:	429a      	cmp	r2, r3
 800ba84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba90:	d331      	bcc.n	800baf6 <quorem+0x9e>
 800ba92:	f04f 0e00 	mov.w	lr, #0
 800ba96:	4640      	mov	r0, r8
 800ba98:	46ac      	mov	ip, r5
 800ba9a:	46f2      	mov	sl, lr
 800ba9c:	f850 2b04 	ldr.w	r2, [r0], #4
 800baa0:	b293      	uxth	r3, r2
 800baa2:	fb06 e303 	mla	r3, r6, r3, lr
 800baa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800baaa:	b29b      	uxth	r3, r3
 800baac:	ebaa 0303 	sub.w	r3, sl, r3
 800bab0:	0c12      	lsrs	r2, r2, #16
 800bab2:	f8dc a000 	ldr.w	sl, [ip]
 800bab6:	fb06 e202 	mla	r2, r6, r2, lr
 800baba:	fa13 f38a 	uxtah	r3, r3, sl
 800babe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bac2:	fa1f fa82 	uxth.w	sl, r2
 800bac6:	f8dc 2000 	ldr.w	r2, [ip]
 800baca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bace:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad8:	4581      	cmp	r9, r0
 800bada:	f84c 3b04 	str.w	r3, [ip], #4
 800bade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bae2:	d2db      	bcs.n	800ba9c <quorem+0x44>
 800bae4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bae8:	b92b      	cbnz	r3, 800baf6 <quorem+0x9e>
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	3b04      	subs	r3, #4
 800baee:	429d      	cmp	r5, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	d32e      	bcc.n	800bb52 <quorem+0xfa>
 800baf4:	613c      	str	r4, [r7, #16]
 800baf6:	4638      	mov	r0, r7
 800baf8:	f001 fc32 	bl	800d360 <__mcmp>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	db24      	blt.n	800bb4a <quorem+0xf2>
 800bb00:	3601      	adds	r6, #1
 800bb02:	4628      	mov	r0, r5
 800bb04:	f04f 0c00 	mov.w	ip, #0
 800bb08:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb0c:	f8d0 e000 	ldr.w	lr, [r0]
 800bb10:	b293      	uxth	r3, r2
 800bb12:	ebac 0303 	sub.w	r3, ip, r3
 800bb16:	0c12      	lsrs	r2, r2, #16
 800bb18:	fa13 f38e 	uxtah	r3, r3, lr
 800bb1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb2a:	45c1      	cmp	r9, r8
 800bb2c:	f840 3b04 	str.w	r3, [r0], #4
 800bb30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb34:	d2e8      	bcs.n	800bb08 <quorem+0xb0>
 800bb36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb3e:	b922      	cbnz	r2, 800bb4a <quorem+0xf2>
 800bb40:	3b04      	subs	r3, #4
 800bb42:	429d      	cmp	r5, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	d30a      	bcc.n	800bb5e <quorem+0x106>
 800bb48:	613c      	str	r4, [r7, #16]
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	b003      	add	sp, #12
 800bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	3b04      	subs	r3, #4
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d1cc      	bne.n	800baf4 <quorem+0x9c>
 800bb5a:	3c01      	subs	r4, #1
 800bb5c:	e7c7      	b.n	800baee <quorem+0x96>
 800bb5e:	6812      	ldr	r2, [r2, #0]
 800bb60:	3b04      	subs	r3, #4
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	d1f0      	bne.n	800bb48 <quorem+0xf0>
 800bb66:	3c01      	subs	r4, #1
 800bb68:	e7eb      	b.n	800bb42 <quorem+0xea>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	e7ee      	b.n	800bb4c <quorem+0xf4>
	...

0800bb70 <_dtoa_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	ec59 8b10 	vmov	r8, r9, d0
 800bb78:	b095      	sub	sp, #84	; 0x54
 800bb7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb7c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bb7e:	9107      	str	r1, [sp, #28]
 800bb80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bb84:	4606      	mov	r6, r0
 800bb86:	9209      	str	r2, [sp, #36]	; 0x24
 800bb88:	9310      	str	r3, [sp, #64]	; 0x40
 800bb8a:	b975      	cbnz	r5, 800bbaa <_dtoa_r+0x3a>
 800bb8c:	2010      	movs	r0, #16
 800bb8e:	f001 f8f7 	bl	800cd80 <malloc>
 800bb92:	4602      	mov	r2, r0
 800bb94:	6270      	str	r0, [r6, #36]	; 0x24
 800bb96:	b920      	cbnz	r0, 800bba2 <_dtoa_r+0x32>
 800bb98:	4bab      	ldr	r3, [pc, #684]	; (800be48 <_dtoa_r+0x2d8>)
 800bb9a:	21ea      	movs	r1, #234	; 0xea
 800bb9c:	48ab      	ldr	r0, [pc, #684]	; (800be4c <_dtoa_r+0x2dc>)
 800bb9e:	f002 fc33 	bl	800e408 <__assert_func>
 800bba2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bba6:	6005      	str	r5, [r0, #0]
 800bba8:	60c5      	str	r5, [r0, #12]
 800bbaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bbac:	6819      	ldr	r1, [r3, #0]
 800bbae:	b151      	cbz	r1, 800bbc6 <_dtoa_r+0x56>
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	604a      	str	r2, [r1, #4]
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	4093      	lsls	r3, r2
 800bbb8:	608b      	str	r3, [r1, #8]
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f001 f948 	bl	800ce50 <_Bfree>
 800bbc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	f1b9 0300 	subs.w	r3, r9, #0
 800bbca:	bfbb      	ittet	lt
 800bbcc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	9303      	strlt	r3, [sp, #12]
 800bbd2:	2300      	movge	r3, #0
 800bbd4:	2201      	movlt	r2, #1
 800bbd6:	bfac      	ite	ge
 800bbd8:	6023      	strge	r3, [r4, #0]
 800bbda:	6022      	strlt	r2, [r4, #0]
 800bbdc:	4b9c      	ldr	r3, [pc, #624]	; (800be50 <_dtoa_r+0x2e0>)
 800bbde:	9c03      	ldr	r4, [sp, #12]
 800bbe0:	43a3      	bics	r3, r4
 800bbe2:	d11a      	bne.n	800bc1a <_dtoa_r+0xaa>
 800bbe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbe6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bbf0:	ea53 0308 	orrs.w	r3, r3, r8
 800bbf4:	f000 8512 	beq.w	800c61c <_dtoa_r+0xaac>
 800bbf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbfa:	b953      	cbnz	r3, 800bc12 <_dtoa_r+0xa2>
 800bbfc:	4b95      	ldr	r3, [pc, #596]	; (800be54 <_dtoa_r+0x2e4>)
 800bbfe:	e01f      	b.n	800bc40 <_dtoa_r+0xd0>
 800bc00:	4b95      	ldr	r3, [pc, #596]	; (800be58 <_dtoa_r+0x2e8>)
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	3308      	adds	r3, #8
 800bc06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	9800      	ldr	r0, [sp, #0]
 800bc0c:	b015      	add	sp, #84	; 0x54
 800bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc12:	4b90      	ldr	r3, [pc, #576]	; (800be54 <_dtoa_r+0x2e4>)
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	3303      	adds	r3, #3
 800bc18:	e7f5      	b.n	800bc06 <_dtoa_r+0x96>
 800bc1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc26:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bc2a:	d10b      	bne.n	800bc44 <_dtoa_r+0xd4>
 800bc2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc2e:	2301      	movs	r3, #1
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f000 84ee 	beq.w	800c616 <_dtoa_r+0xaa6>
 800bc3a:	4888      	ldr	r0, [pc, #544]	; (800be5c <_dtoa_r+0x2ec>)
 800bc3c:	6018      	str	r0, [r3, #0]
 800bc3e:	1e43      	subs	r3, r0, #1
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	e7e2      	b.n	800bc0a <_dtoa_r+0x9a>
 800bc44:	a913      	add	r1, sp, #76	; 0x4c
 800bc46:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bc4a:	aa12      	add	r2, sp, #72	; 0x48
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f001 fca7 	bl	800d5a0 <__d2b>
 800bc52:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bc56:	4605      	mov	r5, r0
 800bc58:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bc5a:	2900      	cmp	r1, #0
 800bc5c:	d047      	beq.n	800bcee <_dtoa_r+0x17e>
 800bc5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc68:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bc6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc70:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc74:	2400      	movs	r4, #0
 800bc76:	ec43 2b16 	vmov	d6, r2, r3
 800bc7a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bc7e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800be30 <_dtoa_r+0x2c0>
 800bc82:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc86:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800be38 <_dtoa_r+0x2c8>
 800bc8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bc8e:	eeb0 7b46 	vmov.f64	d7, d6
 800bc92:	ee06 1a90 	vmov	s13, r1
 800bc96:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bc9a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800be40 <_dtoa_r+0x2d0>
 800bc9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bca2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bca6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcae:	ee16 ba90 	vmov	fp, s13
 800bcb2:	9411      	str	r4, [sp, #68]	; 0x44
 800bcb4:	d508      	bpl.n	800bcc8 <_dtoa_r+0x158>
 800bcb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bcba:	eeb4 6b47 	vcmp.f64	d6, d7
 800bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc2:	bf18      	it	ne
 800bcc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bcc8:	f1bb 0f16 	cmp.w	fp, #22
 800bccc:	d832      	bhi.n	800bd34 <_dtoa_r+0x1c4>
 800bcce:	4b64      	ldr	r3, [pc, #400]	; (800be60 <_dtoa_r+0x2f0>)
 800bcd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcd4:	ed93 7b00 	vldr	d7, [r3]
 800bcd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bcdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce4:	d501      	bpl.n	800bcea <_dtoa_r+0x17a>
 800bce6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcea:	2300      	movs	r3, #0
 800bcec:	e023      	b.n	800bd36 <_dtoa_r+0x1c6>
 800bcee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcf0:	4401      	add	r1, r0
 800bcf2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	bfc3      	ittte	gt
 800bcfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcfe:	fa04 f303 	lslgt.w	r3, r4, r3
 800bd02:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bd06:	f1c3 0320 	rsble	r3, r3, #32
 800bd0a:	bfc6      	itte	gt
 800bd0c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bd10:	ea43 0308 	orrgt.w	r3, r3, r8
 800bd14:	fa08 f303 	lslle.w	r3, r8, r3
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd20:	3901      	subs	r1, #1
 800bd22:	ed8d 7b00 	vstr	d7, [sp]
 800bd26:	9c01      	ldr	r4, [sp, #4]
 800bd28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd2c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bd30:	2401      	movs	r4, #1
 800bd32:	e7a0      	b.n	800bc76 <_dtoa_r+0x106>
 800bd34:	2301      	movs	r3, #1
 800bd36:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd38:	1a43      	subs	r3, r0, r1
 800bd3a:	1e5a      	subs	r2, r3, #1
 800bd3c:	bf45      	ittet	mi
 800bd3e:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd42:	9305      	strmi	r3, [sp, #20]
 800bd44:	2300      	movpl	r3, #0
 800bd46:	2300      	movmi	r3, #0
 800bd48:	9206      	str	r2, [sp, #24]
 800bd4a:	bf54      	ite	pl
 800bd4c:	9305      	strpl	r3, [sp, #20]
 800bd4e:	9306      	strmi	r3, [sp, #24]
 800bd50:	f1bb 0f00 	cmp.w	fp, #0
 800bd54:	db18      	blt.n	800bd88 <_dtoa_r+0x218>
 800bd56:	9b06      	ldr	r3, [sp, #24]
 800bd58:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bd5c:	445b      	add	r3, fp
 800bd5e:	9306      	str	r3, [sp, #24]
 800bd60:	2300      	movs	r3, #0
 800bd62:	9a07      	ldr	r2, [sp, #28]
 800bd64:	2a09      	cmp	r2, #9
 800bd66:	d849      	bhi.n	800bdfc <_dtoa_r+0x28c>
 800bd68:	2a05      	cmp	r2, #5
 800bd6a:	bfc4      	itt	gt
 800bd6c:	3a04      	subgt	r2, #4
 800bd6e:	9207      	strgt	r2, [sp, #28]
 800bd70:	9a07      	ldr	r2, [sp, #28]
 800bd72:	f1a2 0202 	sub.w	r2, r2, #2
 800bd76:	bfcc      	ite	gt
 800bd78:	2400      	movgt	r4, #0
 800bd7a:	2401      	movle	r4, #1
 800bd7c:	2a03      	cmp	r2, #3
 800bd7e:	d848      	bhi.n	800be12 <_dtoa_r+0x2a2>
 800bd80:	e8df f002 	tbb	[pc, r2]
 800bd84:	3a2c2e0b 	.word	0x3a2c2e0b
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	eba3 030b 	sub.w	r3, r3, fp
 800bd90:	9305      	str	r3, [sp, #20]
 800bd92:	920e      	str	r2, [sp, #56]	; 0x38
 800bd94:	f1cb 0300 	rsb	r3, fp, #0
 800bd98:	e7e3      	b.n	800bd62 <_dtoa_r+0x1f2>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	9208      	str	r2, [sp, #32]
 800bd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda0:	2a00      	cmp	r2, #0
 800bda2:	dc39      	bgt.n	800be18 <_dtoa_r+0x2a8>
 800bda4:	f04f 0a01 	mov.w	sl, #1
 800bda8:	46d1      	mov	r9, sl
 800bdaa:	4652      	mov	r2, sl
 800bdac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bdb0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	6079      	str	r1, [r7, #4]
 800bdb6:	2004      	movs	r0, #4
 800bdb8:	f100 0c14 	add.w	ip, r0, #20
 800bdbc:	4594      	cmp	ip, r2
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	d92f      	bls.n	800be22 <_dtoa_r+0x2b2>
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	930c      	str	r3, [sp, #48]	; 0x30
 800bdc6:	f001 f803 	bl	800cdd0 <_Balloc>
 800bdca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdcc:	9000      	str	r0, [sp, #0]
 800bdce:	4602      	mov	r2, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d149      	bne.n	800be68 <_dtoa_r+0x2f8>
 800bdd4:	4b23      	ldr	r3, [pc, #140]	; (800be64 <_dtoa_r+0x2f4>)
 800bdd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bdda:	e6df      	b.n	800bb9c <_dtoa_r+0x2c>
 800bddc:	2201      	movs	r2, #1
 800bdde:	e7dd      	b.n	800bd9c <_dtoa_r+0x22c>
 800bde0:	2200      	movs	r2, #0
 800bde2:	9208      	str	r2, [sp, #32]
 800bde4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bde6:	eb0b 0a02 	add.w	sl, fp, r2
 800bdea:	f10a 0901 	add.w	r9, sl, #1
 800bdee:	464a      	mov	r2, r9
 800bdf0:	2a01      	cmp	r2, #1
 800bdf2:	bfb8      	it	lt
 800bdf4:	2201      	movlt	r2, #1
 800bdf6:	e7db      	b.n	800bdb0 <_dtoa_r+0x240>
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	e7f2      	b.n	800bde2 <_dtoa_r+0x272>
 800bdfc:	2401      	movs	r4, #1
 800bdfe:	2200      	movs	r2, #0
 800be00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800be04:	f04f 3aff 	mov.w	sl, #4294967295
 800be08:	2100      	movs	r1, #0
 800be0a:	46d1      	mov	r9, sl
 800be0c:	2212      	movs	r2, #18
 800be0e:	9109      	str	r1, [sp, #36]	; 0x24
 800be10:	e7ce      	b.n	800bdb0 <_dtoa_r+0x240>
 800be12:	2201      	movs	r2, #1
 800be14:	9208      	str	r2, [sp, #32]
 800be16:	e7f5      	b.n	800be04 <_dtoa_r+0x294>
 800be18:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800be1c:	46d1      	mov	r9, sl
 800be1e:	4652      	mov	r2, sl
 800be20:	e7c6      	b.n	800bdb0 <_dtoa_r+0x240>
 800be22:	3101      	adds	r1, #1
 800be24:	6079      	str	r1, [r7, #4]
 800be26:	0040      	lsls	r0, r0, #1
 800be28:	e7c6      	b.n	800bdb8 <_dtoa_r+0x248>
 800be2a:	bf00      	nop
 800be2c:	f3af 8000 	nop.w
 800be30:	636f4361 	.word	0x636f4361
 800be34:	3fd287a7 	.word	0x3fd287a7
 800be38:	8b60c8b3 	.word	0x8b60c8b3
 800be3c:	3fc68a28 	.word	0x3fc68a28
 800be40:	509f79fb 	.word	0x509f79fb
 800be44:	3fd34413 	.word	0x3fd34413
 800be48:	0800fdc6 	.word	0x0800fdc6
 800be4c:	0800fddd 	.word	0x0800fddd
 800be50:	7ff00000 	.word	0x7ff00000
 800be54:	0800fdc2 	.word	0x0800fdc2
 800be58:	0800fdb9 	.word	0x0800fdb9
 800be5c:	08010042 	.word	0x08010042
 800be60:	0800ff58 	.word	0x0800ff58
 800be64:	0800fe3c 	.word	0x0800fe3c
 800be68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800be6a:	9900      	ldr	r1, [sp, #0]
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	f1b9 0f0e 	cmp.w	r9, #14
 800be72:	d872      	bhi.n	800bf5a <_dtoa_r+0x3ea>
 800be74:	2c00      	cmp	r4, #0
 800be76:	d070      	beq.n	800bf5a <_dtoa_r+0x3ea>
 800be78:	f1bb 0f00 	cmp.w	fp, #0
 800be7c:	f340 80a6 	ble.w	800bfcc <_dtoa_r+0x45c>
 800be80:	49ca      	ldr	r1, [pc, #808]	; (800c1ac <_dtoa_r+0x63c>)
 800be82:	f00b 020f 	and.w	r2, fp, #15
 800be86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800be8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be8e:	ed92 7b00 	vldr	d7, [r2]
 800be92:	ea4f 112b 	mov.w	r1, fp, asr #4
 800be96:	f000 808d 	beq.w	800bfb4 <_dtoa_r+0x444>
 800be9a:	4ac5      	ldr	r2, [pc, #788]	; (800c1b0 <_dtoa_r+0x640>)
 800be9c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bea0:	ed92 6b08 	vldr	d6, [r2, #32]
 800bea4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bea8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800beac:	f001 010f 	and.w	r1, r1, #15
 800beb0:	2203      	movs	r2, #3
 800beb2:	48bf      	ldr	r0, [pc, #764]	; (800c1b0 <_dtoa_r+0x640>)
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d17f      	bne.n	800bfb8 <_dtoa_r+0x448>
 800beb8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bebc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bec6:	2900      	cmp	r1, #0
 800bec8:	f000 80b2 	beq.w	800c030 <_dtoa_r+0x4c0>
 800becc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bed4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	f140 80a8 	bpl.w	800c030 <_dtoa_r+0x4c0>
 800bee0:	f1b9 0f00 	cmp.w	r9, #0
 800bee4:	f000 80a4 	beq.w	800c030 <_dtoa_r+0x4c0>
 800bee8:	f1ba 0f00 	cmp.w	sl, #0
 800beec:	dd31      	ble.n	800bf52 <_dtoa_r+0x3e2>
 800beee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bef2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bef6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800befa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800befe:	3201      	adds	r2, #1
 800bf00:	4650      	mov	r0, sl
 800bf02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf06:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bf0a:	ee07 2a90 	vmov	s15, r2
 800bf0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bf16:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bf1a:	9c03      	ldr	r4, [sp, #12]
 800bf1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf20:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bf24:	2800      	cmp	r0, #0
 800bf26:	f040 8086 	bne.w	800c036 <_dtoa_r+0x4c6>
 800bf2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf32:	ec42 1b17 	vmov	d7, r1, r2
 800bf36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3e:	f300 8272 	bgt.w	800c426 <_dtoa_r+0x8b6>
 800bf42:	eeb1 7b47 	vneg.f64	d7, d7
 800bf46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4e:	f100 8267 	bmi.w	800c420 <_dtoa_r+0x8b0>
 800bf52:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bf56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bf5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	f2c0 8129 	blt.w	800c1b4 <_dtoa_r+0x644>
 800bf62:	f1bb 0f0e 	cmp.w	fp, #14
 800bf66:	f300 8125 	bgt.w	800c1b4 <_dtoa_r+0x644>
 800bf6a:	4b90      	ldr	r3, [pc, #576]	; (800c1ac <_dtoa_r+0x63c>)
 800bf6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf70:	ed93 6b00 	vldr	d6, [r3]
 800bf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f280 80c3 	bge.w	800c102 <_dtoa_r+0x592>
 800bf7c:	f1b9 0f00 	cmp.w	r9, #0
 800bf80:	f300 80bf 	bgt.w	800c102 <_dtoa_r+0x592>
 800bf84:	f040 824c 	bne.w	800c420 <_dtoa_r+0x8b0>
 800bf88:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bf90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9c:	464c      	mov	r4, r9
 800bf9e:	464f      	mov	r7, r9
 800bfa0:	f280 8222 	bge.w	800c3e8 <_dtoa_r+0x878>
 800bfa4:	f8dd 8000 	ldr.w	r8, [sp]
 800bfa8:	2331      	movs	r3, #49	; 0x31
 800bfaa:	f808 3b01 	strb.w	r3, [r8], #1
 800bfae:	f10b 0b01 	add.w	fp, fp, #1
 800bfb2:	e21e      	b.n	800c3f2 <_dtoa_r+0x882>
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	e77c      	b.n	800beb2 <_dtoa_r+0x342>
 800bfb8:	07cc      	lsls	r4, r1, #31
 800bfba:	d504      	bpl.n	800bfc6 <_dtoa_r+0x456>
 800bfbc:	ed90 6b00 	vldr	d6, [r0]
 800bfc0:	3201      	adds	r2, #1
 800bfc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfc6:	1049      	asrs	r1, r1, #1
 800bfc8:	3008      	adds	r0, #8
 800bfca:	e773      	b.n	800beb4 <_dtoa_r+0x344>
 800bfcc:	d02e      	beq.n	800c02c <_dtoa_r+0x4bc>
 800bfce:	f1cb 0100 	rsb	r1, fp, #0
 800bfd2:	4a76      	ldr	r2, [pc, #472]	; (800c1ac <_dtoa_r+0x63c>)
 800bfd4:	f001 000f 	and.w	r0, r1, #15
 800bfd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bfdc:	ed92 7b00 	vldr	d7, [r2]
 800bfe0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bfe4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bfe8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bfec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800bff0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800bff4:	486e      	ldr	r0, [pc, #440]	; (800c1b0 <_dtoa_r+0x640>)
 800bff6:	1109      	asrs	r1, r1, #4
 800bff8:	2400      	movs	r4, #0
 800bffa:	2202      	movs	r2, #2
 800bffc:	b939      	cbnz	r1, 800c00e <_dtoa_r+0x49e>
 800bffe:	2c00      	cmp	r4, #0
 800c000:	f43f af60 	beq.w	800bec4 <_dtoa_r+0x354>
 800c004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c00c:	e75a      	b.n	800bec4 <_dtoa_r+0x354>
 800c00e:	07cf      	lsls	r7, r1, #31
 800c010:	d509      	bpl.n	800c026 <_dtoa_r+0x4b6>
 800c012:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c016:	ed90 7b00 	vldr	d7, [r0]
 800c01a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c01e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c022:	3201      	adds	r2, #1
 800c024:	2401      	movs	r4, #1
 800c026:	1049      	asrs	r1, r1, #1
 800c028:	3008      	adds	r0, #8
 800c02a:	e7e7      	b.n	800bffc <_dtoa_r+0x48c>
 800c02c:	2202      	movs	r2, #2
 800c02e:	e749      	b.n	800bec4 <_dtoa_r+0x354>
 800c030:	465f      	mov	r7, fp
 800c032:	4648      	mov	r0, r9
 800c034:	e765      	b.n	800bf02 <_dtoa_r+0x392>
 800c036:	ec42 1b17 	vmov	d7, r1, r2
 800c03a:	4a5c      	ldr	r2, [pc, #368]	; (800c1ac <_dtoa_r+0x63c>)
 800c03c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c040:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c044:	9a00      	ldr	r2, [sp, #0]
 800c046:	1814      	adds	r4, r2, r0
 800c048:	9a08      	ldr	r2, [sp, #32]
 800c04a:	b352      	cbz	r2, 800c0a2 <_dtoa_r+0x532>
 800c04c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c050:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c054:	f8dd 8000 	ldr.w	r8, [sp]
 800c058:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c05c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c060:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c064:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c068:	ee14 2a90 	vmov	r2, s9
 800c06c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c070:	3230      	adds	r2, #48	; 0x30
 800c072:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07e:	f808 2b01 	strb.w	r2, [r8], #1
 800c082:	d439      	bmi.n	800c0f8 <_dtoa_r+0x588>
 800c084:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c088:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c090:	d472      	bmi.n	800c178 <_dtoa_r+0x608>
 800c092:	45a0      	cmp	r8, r4
 800c094:	f43f af5d 	beq.w	800bf52 <_dtoa_r+0x3e2>
 800c098:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c09c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c0a0:	e7e0      	b.n	800c064 <_dtoa_r+0x4f4>
 800c0a2:	f8dd 8000 	ldr.w	r8, [sp]
 800c0a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c0b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c0b4:	ee14 2a90 	vmov	r2, s9
 800c0b8:	3230      	adds	r2, #48	; 0x30
 800c0ba:	f808 2b01 	strb.w	r2, [r8], #1
 800c0be:	45a0      	cmp	r8, r4
 800c0c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c0c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0c8:	d118      	bne.n	800c0fc <_dtoa_r+0x58c>
 800c0ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c0ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c0d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0da:	dc4d      	bgt.n	800c178 <_dtoa_r+0x608>
 800c0dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	f57f af33 	bpl.w	800bf52 <_dtoa_r+0x3e2>
 800c0ec:	4688      	mov	r8, r1
 800c0ee:	3901      	subs	r1, #1
 800c0f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c0f4:	2b30      	cmp	r3, #48	; 0x30
 800c0f6:	d0f9      	beq.n	800c0ec <_dtoa_r+0x57c>
 800c0f8:	46bb      	mov	fp, r7
 800c0fa:	e02a      	b.n	800c152 <_dtoa_r+0x5e2>
 800c0fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c100:	e7d6      	b.n	800c0b0 <_dtoa_r+0x540>
 800c102:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c106:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c10a:	f8dd 8000 	ldr.w	r8, [sp]
 800c10e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c112:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c116:	ee15 3a10 	vmov	r3, s10
 800c11a:	3330      	adds	r3, #48	; 0x30
 800c11c:	f808 3b01 	strb.w	r3, [r8], #1
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	eba8 0303 	sub.w	r3, r8, r3
 800c126:	4599      	cmp	r9, r3
 800c128:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c12c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c130:	d133      	bne.n	800c19a <_dtoa_r+0x62a>
 800c132:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c136:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13e:	dc1a      	bgt.n	800c176 <_dtoa_r+0x606>
 800c140:	eeb4 7b46 	vcmp.f64	d7, d6
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	d103      	bne.n	800c152 <_dtoa_r+0x5e2>
 800c14a:	ee15 3a10 	vmov	r3, s10
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	d411      	bmi.n	800c176 <_dtoa_r+0x606>
 800c152:	4629      	mov	r1, r5
 800c154:	4630      	mov	r0, r6
 800c156:	f000 fe7b 	bl	800ce50 <_Bfree>
 800c15a:	2300      	movs	r3, #0
 800c15c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c15e:	f888 3000 	strb.w	r3, [r8]
 800c162:	f10b 0301 	add.w	r3, fp, #1
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f43f ad4d 	beq.w	800bc0a <_dtoa_r+0x9a>
 800c170:	f8c3 8000 	str.w	r8, [r3]
 800c174:	e549      	b.n	800bc0a <_dtoa_r+0x9a>
 800c176:	465f      	mov	r7, fp
 800c178:	4643      	mov	r3, r8
 800c17a:	4698      	mov	r8, r3
 800c17c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c180:	2a39      	cmp	r2, #57	; 0x39
 800c182:	d106      	bne.n	800c192 <_dtoa_r+0x622>
 800c184:	9a00      	ldr	r2, [sp, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d1f7      	bne.n	800c17a <_dtoa_r+0x60a>
 800c18a:	9900      	ldr	r1, [sp, #0]
 800c18c:	2230      	movs	r2, #48	; 0x30
 800c18e:	3701      	adds	r7, #1
 800c190:	700a      	strb	r2, [r1, #0]
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	3201      	adds	r2, #1
 800c196:	701a      	strb	r2, [r3, #0]
 800c198:	e7ae      	b.n	800c0f8 <_dtoa_r+0x588>
 800c19a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c19e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a6:	d1b2      	bne.n	800c10e <_dtoa_r+0x59e>
 800c1a8:	e7d3      	b.n	800c152 <_dtoa_r+0x5e2>
 800c1aa:	bf00      	nop
 800c1ac:	0800ff58 	.word	0x0800ff58
 800c1b0:	0800ff30 	.word	0x0800ff30
 800c1b4:	9908      	ldr	r1, [sp, #32]
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	f000 80d1 	beq.w	800c35e <_dtoa_r+0x7ee>
 800c1bc:	9907      	ldr	r1, [sp, #28]
 800c1be:	2901      	cmp	r1, #1
 800c1c0:	f300 80b4 	bgt.w	800c32c <_dtoa_r+0x7bc>
 800c1c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c1c6:	2900      	cmp	r1, #0
 800c1c8:	f000 80ac 	beq.w	800c324 <_dtoa_r+0x7b4>
 800c1cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c1d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d8:	9b05      	ldr	r3, [sp, #20]
 800c1da:	4413      	add	r3, r2
 800c1dc:	9305      	str	r3, [sp, #20]
 800c1de:	9b06      	ldr	r3, [sp, #24]
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	4413      	add	r3, r2
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	9306      	str	r3, [sp, #24]
 800c1e8:	f000 ff38 	bl	800d05c <__i2b>
 800c1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	f1b8 0f00 	cmp.w	r8, #0
 800c1f4:	dd0d      	ble.n	800c212 <_dtoa_r+0x6a2>
 800c1f6:	9a06      	ldr	r2, [sp, #24]
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	dd0a      	ble.n	800c212 <_dtoa_r+0x6a2>
 800c1fc:	4542      	cmp	r2, r8
 800c1fe:	9905      	ldr	r1, [sp, #20]
 800c200:	bfa8      	it	ge
 800c202:	4642      	movge	r2, r8
 800c204:	1a89      	subs	r1, r1, r2
 800c206:	9105      	str	r1, [sp, #20]
 800c208:	9906      	ldr	r1, [sp, #24]
 800c20a:	eba8 0802 	sub.w	r8, r8, r2
 800c20e:	1a8a      	subs	r2, r1, r2
 800c210:	9206      	str	r2, [sp, #24]
 800c212:	b303      	cbz	r3, 800c256 <_dtoa_r+0x6e6>
 800c214:	9a08      	ldr	r2, [sp, #32]
 800c216:	2a00      	cmp	r2, #0
 800c218:	f000 80a6 	beq.w	800c368 <_dtoa_r+0x7f8>
 800c21c:	2c00      	cmp	r4, #0
 800c21e:	dd13      	ble.n	800c248 <_dtoa_r+0x6d8>
 800c220:	4639      	mov	r1, r7
 800c222:	4622      	mov	r2, r4
 800c224:	4630      	mov	r0, r6
 800c226:	930c      	str	r3, [sp, #48]	; 0x30
 800c228:	f000 ffd4 	bl	800d1d4 <__pow5mult>
 800c22c:	462a      	mov	r2, r5
 800c22e:	4601      	mov	r1, r0
 800c230:	4607      	mov	r7, r0
 800c232:	4630      	mov	r0, r6
 800c234:	f000 ff28 	bl	800d088 <__multiply>
 800c238:	4629      	mov	r1, r5
 800c23a:	900a      	str	r0, [sp, #40]	; 0x28
 800c23c:	4630      	mov	r0, r6
 800c23e:	f000 fe07 	bl	800ce50 <_Bfree>
 800c242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c246:	4615      	mov	r5, r2
 800c248:	1b1a      	subs	r2, r3, r4
 800c24a:	d004      	beq.n	800c256 <_dtoa_r+0x6e6>
 800c24c:	4629      	mov	r1, r5
 800c24e:	4630      	mov	r0, r6
 800c250:	f000 ffc0 	bl	800d1d4 <__pow5mult>
 800c254:	4605      	mov	r5, r0
 800c256:	2101      	movs	r1, #1
 800c258:	4630      	mov	r0, r6
 800c25a:	f000 feff 	bl	800d05c <__i2b>
 800c25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	f340 8082 	ble.w	800c36c <_dtoa_r+0x7fc>
 800c268:	461a      	mov	r2, r3
 800c26a:	4601      	mov	r1, r0
 800c26c:	4630      	mov	r0, r6
 800c26e:	f000 ffb1 	bl	800d1d4 <__pow5mult>
 800c272:	9b07      	ldr	r3, [sp, #28]
 800c274:	2b01      	cmp	r3, #1
 800c276:	4604      	mov	r4, r0
 800c278:	dd7b      	ble.n	800c372 <_dtoa_r+0x802>
 800c27a:	2300      	movs	r3, #0
 800c27c:	930a      	str	r3, [sp, #40]	; 0x28
 800c27e:	6922      	ldr	r2, [r4, #16]
 800c280:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c284:	6910      	ldr	r0, [r2, #16]
 800c286:	f000 fe99 	bl	800cfbc <__hi0bits>
 800c28a:	f1c0 0020 	rsb	r0, r0, #32
 800c28e:	9b06      	ldr	r3, [sp, #24]
 800c290:	4418      	add	r0, r3
 800c292:	f010 001f 	ands.w	r0, r0, #31
 800c296:	f000 808d 	beq.w	800c3b4 <_dtoa_r+0x844>
 800c29a:	f1c0 0220 	rsb	r2, r0, #32
 800c29e:	2a04      	cmp	r2, #4
 800c2a0:	f340 8086 	ble.w	800c3b0 <_dtoa_r+0x840>
 800c2a4:	f1c0 001c 	rsb	r0, r0, #28
 800c2a8:	9b05      	ldr	r3, [sp, #20]
 800c2aa:	4403      	add	r3, r0
 800c2ac:	9305      	str	r3, [sp, #20]
 800c2ae:	9b06      	ldr	r3, [sp, #24]
 800c2b0:	4403      	add	r3, r0
 800c2b2:	4480      	add	r8, r0
 800c2b4:	9306      	str	r3, [sp, #24]
 800c2b6:	9b05      	ldr	r3, [sp, #20]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	dd05      	ble.n	800c2c8 <_dtoa_r+0x758>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f000 ffe1 	bl	800d288 <__lshift>
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	9b06      	ldr	r3, [sp, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dd05      	ble.n	800c2da <_dtoa_r+0x76a>
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 ffd8 	bl	800d288 <__lshift>
 800c2d8:	4604      	mov	r4, r0
 800c2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d06b      	beq.n	800c3b8 <_dtoa_r+0x848>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f001 f83c 	bl	800d360 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	da65      	bge.n	800c3b8 <_dtoa_r+0x848>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	220a      	movs	r2, #10
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f000 fdce 	bl	800ce94 <__multadd>
 800c2f8:	9b08      	ldr	r3, [sp, #32]
 800c2fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2fe:	4605      	mov	r5, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 8192 	beq.w	800c62a <_dtoa_r+0xaba>
 800c306:	4639      	mov	r1, r7
 800c308:	2300      	movs	r3, #0
 800c30a:	220a      	movs	r2, #10
 800c30c:	4630      	mov	r0, r6
 800c30e:	f000 fdc1 	bl	800ce94 <__multadd>
 800c312:	f1ba 0f00 	cmp.w	sl, #0
 800c316:	4607      	mov	r7, r0
 800c318:	f300 808e 	bgt.w	800c438 <_dtoa_r+0x8c8>
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	dc51      	bgt.n	800c3c6 <_dtoa_r+0x856>
 800c322:	e089      	b.n	800c438 <_dtoa_r+0x8c8>
 800c324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c326:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c32a:	e751      	b.n	800c1d0 <_dtoa_r+0x660>
 800c32c:	f109 34ff 	add.w	r4, r9, #4294967295
 800c330:	42a3      	cmp	r3, r4
 800c332:	bfbf      	itttt	lt
 800c334:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c336:	1ae3      	sublt	r3, r4, r3
 800c338:	18d2      	addlt	r2, r2, r3
 800c33a:	4613      	movlt	r3, r2
 800c33c:	bfb7      	itett	lt
 800c33e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c340:	1b1c      	subge	r4, r3, r4
 800c342:	4623      	movlt	r3, r4
 800c344:	2400      	movlt	r4, #0
 800c346:	f1b9 0f00 	cmp.w	r9, #0
 800c34a:	bfb5      	itete	lt
 800c34c:	9a05      	ldrlt	r2, [sp, #20]
 800c34e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c352:	eba2 0809 	sublt.w	r8, r2, r9
 800c356:	464a      	movge	r2, r9
 800c358:	bfb8      	it	lt
 800c35a:	2200      	movlt	r2, #0
 800c35c:	e73b      	b.n	800c1d6 <_dtoa_r+0x666>
 800c35e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c362:	9f08      	ldr	r7, [sp, #32]
 800c364:	461c      	mov	r4, r3
 800c366:	e743      	b.n	800c1f0 <_dtoa_r+0x680>
 800c368:	461a      	mov	r2, r3
 800c36a:	e76f      	b.n	800c24c <_dtoa_r+0x6dc>
 800c36c:	9b07      	ldr	r3, [sp, #28]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	dc18      	bgt.n	800c3a4 <_dtoa_r+0x834>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	b9b3      	cbnz	r3, 800c3a4 <_dtoa_r+0x834>
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c37c:	b9a2      	cbnz	r2, 800c3a8 <_dtoa_r+0x838>
 800c37e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c382:	0d12      	lsrs	r2, r2, #20
 800c384:	0512      	lsls	r2, r2, #20
 800c386:	b18a      	cbz	r2, 800c3ac <_dtoa_r+0x83c>
 800c388:	9b05      	ldr	r3, [sp, #20]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9305      	str	r3, [sp, #20]
 800c38e:	9b06      	ldr	r3, [sp, #24]
 800c390:	3301      	adds	r3, #1
 800c392:	9306      	str	r3, [sp, #24]
 800c394:	2301      	movs	r3, #1
 800c396:	930a      	str	r3, [sp, #40]	; 0x28
 800c398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f47f af6f 	bne.w	800c27e <_dtoa_r+0x70e>
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	e774      	b.n	800c28e <_dtoa_r+0x71e>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e7f6      	b.n	800c396 <_dtoa_r+0x826>
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	e7f4      	b.n	800c396 <_dtoa_r+0x826>
 800c3ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c3ae:	e7f3      	b.n	800c398 <_dtoa_r+0x828>
 800c3b0:	d081      	beq.n	800c2b6 <_dtoa_r+0x746>
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	301c      	adds	r0, #28
 800c3b6:	e777      	b.n	800c2a8 <_dtoa_r+0x738>
 800c3b8:	f1b9 0f00 	cmp.w	r9, #0
 800c3bc:	dc37      	bgt.n	800c42e <_dtoa_r+0x8be>
 800c3be:	9b07      	ldr	r3, [sp, #28]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	dd34      	ble.n	800c42e <_dtoa_r+0x8be>
 800c3c4:	46ca      	mov	sl, r9
 800c3c6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ca:	d10d      	bne.n	800c3e8 <_dtoa_r+0x878>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	4653      	mov	r3, sl
 800c3d0:	2205      	movs	r2, #5
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 fd5e 	bl	800ce94 <__multadd>
 800c3d8:	4601      	mov	r1, r0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f000 ffbf 	bl	800d360 <__mcmp>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f73f adde 	bgt.w	800bfa4 <_dtoa_r+0x434>
 800c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ea:	f8dd 8000 	ldr.w	r8, [sp]
 800c3ee:	ea6f 0b03 	mvn.w	fp, r3
 800c3f2:	f04f 0900 	mov.w	r9, #0
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f000 fd29 	bl	800ce50 <_Bfree>
 800c3fe:	2f00      	cmp	r7, #0
 800c400:	f43f aea7 	beq.w	800c152 <_dtoa_r+0x5e2>
 800c404:	f1b9 0f00 	cmp.w	r9, #0
 800c408:	d005      	beq.n	800c416 <_dtoa_r+0x8a6>
 800c40a:	45b9      	cmp	r9, r7
 800c40c:	d003      	beq.n	800c416 <_dtoa_r+0x8a6>
 800c40e:	4649      	mov	r1, r9
 800c410:	4630      	mov	r0, r6
 800c412:	f000 fd1d 	bl	800ce50 <_Bfree>
 800c416:	4639      	mov	r1, r7
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 fd19 	bl	800ce50 <_Bfree>
 800c41e:	e698      	b.n	800c152 <_dtoa_r+0x5e2>
 800c420:	2400      	movs	r4, #0
 800c422:	4627      	mov	r7, r4
 800c424:	e7e0      	b.n	800c3e8 <_dtoa_r+0x878>
 800c426:	46bb      	mov	fp, r7
 800c428:	4604      	mov	r4, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	e5ba      	b.n	800bfa4 <_dtoa_r+0x434>
 800c42e:	9b08      	ldr	r3, [sp, #32]
 800c430:	46ca      	mov	sl, r9
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8100 	beq.w	800c638 <_dtoa_r+0xac8>
 800c438:	f1b8 0f00 	cmp.w	r8, #0
 800c43c:	dd05      	ble.n	800c44a <_dtoa_r+0x8da>
 800c43e:	4639      	mov	r1, r7
 800c440:	4642      	mov	r2, r8
 800c442:	4630      	mov	r0, r6
 800c444:	f000 ff20 	bl	800d288 <__lshift>
 800c448:	4607      	mov	r7, r0
 800c44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d05d      	beq.n	800c50c <_dtoa_r+0x99c>
 800c450:	6879      	ldr	r1, [r7, #4]
 800c452:	4630      	mov	r0, r6
 800c454:	f000 fcbc 	bl	800cdd0 <_Balloc>
 800c458:	4680      	mov	r8, r0
 800c45a:	b928      	cbnz	r0, 800c468 <_dtoa_r+0x8f8>
 800c45c:	4b82      	ldr	r3, [pc, #520]	; (800c668 <_dtoa_r+0xaf8>)
 800c45e:	4602      	mov	r2, r0
 800c460:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c464:	f7ff bb9a 	b.w	800bb9c <_dtoa_r+0x2c>
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	3202      	adds	r2, #2
 800c46c:	0092      	lsls	r2, r2, #2
 800c46e:	f107 010c 	add.w	r1, r7, #12
 800c472:	300c      	adds	r0, #12
 800c474:	f000 fc9e 	bl	800cdb4 <memcpy>
 800c478:	2201      	movs	r2, #1
 800c47a:	4641      	mov	r1, r8
 800c47c:	4630      	mov	r0, r6
 800c47e:	f000 ff03 	bl	800d288 <__lshift>
 800c482:	9b00      	ldr	r3, [sp, #0]
 800c484:	3301      	adds	r3, #1
 800c486:	9305      	str	r3, [sp, #20]
 800c488:	9b00      	ldr	r3, [sp, #0]
 800c48a:	4453      	add	r3, sl
 800c48c:	9309      	str	r3, [sp, #36]	; 0x24
 800c48e:	9b02      	ldr	r3, [sp, #8]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	46b9      	mov	r9, r7
 800c496:	9308      	str	r3, [sp, #32]
 800c498:	4607      	mov	r7, r0
 800c49a:	9b05      	ldr	r3, [sp, #20]
 800c49c:	4621      	mov	r1, r4
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	9302      	str	r3, [sp, #8]
 800c4a4:	f7ff fad8 	bl	800ba58 <quorem>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	3330      	adds	r3, #48	; 0x30
 800c4ac:	9006      	str	r0, [sp, #24]
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4b4:	f000 ff54 	bl	800d360 <__mcmp>
 800c4b8:	463a      	mov	r2, r7
 800c4ba:	4682      	mov	sl, r0
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f000 ff6a 	bl	800d398 <__mdiff>
 800c4c4:	68c2      	ldr	r2, [r0, #12]
 800c4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	bb0a      	cbnz	r2, 800c510 <_dtoa_r+0x9a0>
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f000 ff46 	bl	800d360 <__mcmp>
 800c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	4641      	mov	r1, r8
 800c4da:	4630      	mov	r0, r6
 800c4dc:	920e      	str	r2, [sp, #56]	; 0x38
 800c4de:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e0:	f000 fcb6 	bl	800ce50 <_Bfree>
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c4ec:	ea43 0102 	orr.w	r1, r3, r2
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	430b      	orrs	r3, r1
 800c4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f6:	d10d      	bne.n	800c514 <_dtoa_r+0x9a4>
 800c4f8:	2b39      	cmp	r3, #57	; 0x39
 800c4fa:	d029      	beq.n	800c550 <_dtoa_r+0x9e0>
 800c4fc:	f1ba 0f00 	cmp.w	sl, #0
 800c500:	dd01      	ble.n	800c506 <_dtoa_r+0x996>
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	3331      	adds	r3, #49	; 0x31
 800c506:	9a02      	ldr	r2, [sp, #8]
 800c508:	7013      	strb	r3, [r2, #0]
 800c50a:	e774      	b.n	800c3f6 <_dtoa_r+0x886>
 800c50c:	4638      	mov	r0, r7
 800c50e:	e7b8      	b.n	800c482 <_dtoa_r+0x912>
 800c510:	2201      	movs	r2, #1
 800c512:	e7e1      	b.n	800c4d8 <_dtoa_r+0x968>
 800c514:	f1ba 0f00 	cmp.w	sl, #0
 800c518:	db06      	blt.n	800c528 <_dtoa_r+0x9b8>
 800c51a:	9907      	ldr	r1, [sp, #28]
 800c51c:	ea41 0a0a 	orr.w	sl, r1, sl
 800c520:	9908      	ldr	r1, [sp, #32]
 800c522:	ea5a 0101 	orrs.w	r1, sl, r1
 800c526:	d120      	bne.n	800c56a <_dtoa_r+0x9fa>
 800c528:	2a00      	cmp	r2, #0
 800c52a:	ddec      	ble.n	800c506 <_dtoa_r+0x996>
 800c52c:	4629      	mov	r1, r5
 800c52e:	2201      	movs	r2, #1
 800c530:	4630      	mov	r0, r6
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	f000 fea8 	bl	800d288 <__lshift>
 800c538:	4621      	mov	r1, r4
 800c53a:	4605      	mov	r5, r0
 800c53c:	f000 ff10 	bl	800d360 <__mcmp>
 800c540:	2800      	cmp	r0, #0
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	dc02      	bgt.n	800c54c <_dtoa_r+0x9dc>
 800c546:	d1de      	bne.n	800c506 <_dtoa_r+0x996>
 800c548:	07da      	lsls	r2, r3, #31
 800c54a:	d5dc      	bpl.n	800c506 <_dtoa_r+0x996>
 800c54c:	2b39      	cmp	r3, #57	; 0x39
 800c54e:	d1d8      	bne.n	800c502 <_dtoa_r+0x992>
 800c550:	9a02      	ldr	r2, [sp, #8]
 800c552:	2339      	movs	r3, #57	; 0x39
 800c554:	7013      	strb	r3, [r2, #0]
 800c556:	4643      	mov	r3, r8
 800c558:	4698      	mov	r8, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c560:	2a39      	cmp	r2, #57	; 0x39
 800c562:	d051      	beq.n	800c608 <_dtoa_r+0xa98>
 800c564:	3201      	adds	r2, #1
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	e745      	b.n	800c3f6 <_dtoa_r+0x886>
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	dd03      	ble.n	800c576 <_dtoa_r+0xa06>
 800c56e:	2b39      	cmp	r3, #57	; 0x39
 800c570:	d0ee      	beq.n	800c550 <_dtoa_r+0x9e0>
 800c572:	3301      	adds	r3, #1
 800c574:	e7c7      	b.n	800c506 <_dtoa_r+0x996>
 800c576:	9a05      	ldr	r2, [sp, #20]
 800c578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c57a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c57e:	428a      	cmp	r2, r1
 800c580:	d02b      	beq.n	800c5da <_dtoa_r+0xa6a>
 800c582:	4629      	mov	r1, r5
 800c584:	2300      	movs	r3, #0
 800c586:	220a      	movs	r2, #10
 800c588:	4630      	mov	r0, r6
 800c58a:	f000 fc83 	bl	800ce94 <__multadd>
 800c58e:	45b9      	cmp	r9, r7
 800c590:	4605      	mov	r5, r0
 800c592:	f04f 0300 	mov.w	r3, #0
 800c596:	f04f 020a 	mov.w	r2, #10
 800c59a:	4649      	mov	r1, r9
 800c59c:	4630      	mov	r0, r6
 800c59e:	d107      	bne.n	800c5b0 <_dtoa_r+0xa40>
 800c5a0:	f000 fc78 	bl	800ce94 <__multadd>
 800c5a4:	4681      	mov	r9, r0
 800c5a6:	4607      	mov	r7, r0
 800c5a8:	9b05      	ldr	r3, [sp, #20]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	9305      	str	r3, [sp, #20]
 800c5ae:	e774      	b.n	800c49a <_dtoa_r+0x92a>
 800c5b0:	f000 fc70 	bl	800ce94 <__multadd>
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4681      	mov	r9, r0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	220a      	movs	r2, #10
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f000 fc69 	bl	800ce94 <__multadd>
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	e7f0      	b.n	800c5a8 <_dtoa_r+0xa38>
 800c5c6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ca:	9a00      	ldr	r2, [sp, #0]
 800c5cc:	bfcc      	ite	gt
 800c5ce:	46d0      	movgt	r8, sl
 800c5d0:	f04f 0801 	movle.w	r8, #1
 800c5d4:	4490      	add	r8, r2
 800c5d6:	f04f 0900 	mov.w	r9, #0
 800c5da:	4629      	mov	r1, r5
 800c5dc:	2201      	movs	r2, #1
 800c5de:	4630      	mov	r0, r6
 800c5e0:	9302      	str	r3, [sp, #8]
 800c5e2:	f000 fe51 	bl	800d288 <__lshift>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	f000 feb9 	bl	800d360 <__mcmp>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	dcb1      	bgt.n	800c556 <_dtoa_r+0x9e6>
 800c5f2:	d102      	bne.n	800c5fa <_dtoa_r+0xa8a>
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	07db      	lsls	r3, r3, #31
 800c5f8:	d4ad      	bmi.n	800c556 <_dtoa_r+0x9e6>
 800c5fa:	4643      	mov	r3, r8
 800c5fc:	4698      	mov	r8, r3
 800c5fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c602:	2a30      	cmp	r2, #48	; 0x30
 800c604:	d0fa      	beq.n	800c5fc <_dtoa_r+0xa8c>
 800c606:	e6f6      	b.n	800c3f6 <_dtoa_r+0x886>
 800c608:	9a00      	ldr	r2, [sp, #0]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d1a4      	bne.n	800c558 <_dtoa_r+0x9e8>
 800c60e:	f10b 0b01 	add.w	fp, fp, #1
 800c612:	2331      	movs	r3, #49	; 0x31
 800c614:	e778      	b.n	800c508 <_dtoa_r+0x998>
 800c616:	4b15      	ldr	r3, [pc, #84]	; (800c66c <_dtoa_r+0xafc>)
 800c618:	f7ff bb12 	b.w	800bc40 <_dtoa_r+0xd0>
 800c61c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f47f aaee 	bne.w	800bc00 <_dtoa_r+0x90>
 800c624:	4b12      	ldr	r3, [pc, #72]	; (800c670 <_dtoa_r+0xb00>)
 800c626:	f7ff bb0b 	b.w	800bc40 <_dtoa_r+0xd0>
 800c62a:	f1ba 0f00 	cmp.w	sl, #0
 800c62e:	dc03      	bgt.n	800c638 <_dtoa_r+0xac8>
 800c630:	9b07      	ldr	r3, [sp, #28]
 800c632:	2b02      	cmp	r3, #2
 800c634:	f73f aec7 	bgt.w	800c3c6 <_dtoa_r+0x856>
 800c638:	f8dd 8000 	ldr.w	r8, [sp]
 800c63c:	4621      	mov	r1, r4
 800c63e:	4628      	mov	r0, r5
 800c640:	f7ff fa0a 	bl	800ba58 <quorem>
 800c644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c648:	f808 3b01 	strb.w	r3, [r8], #1
 800c64c:	9a00      	ldr	r2, [sp, #0]
 800c64e:	eba8 0202 	sub.w	r2, r8, r2
 800c652:	4592      	cmp	sl, r2
 800c654:	ddb7      	ble.n	800c5c6 <_dtoa_r+0xa56>
 800c656:	4629      	mov	r1, r5
 800c658:	2300      	movs	r3, #0
 800c65a:	220a      	movs	r2, #10
 800c65c:	4630      	mov	r0, r6
 800c65e:	f000 fc19 	bl	800ce94 <__multadd>
 800c662:	4605      	mov	r5, r0
 800c664:	e7ea      	b.n	800c63c <_dtoa_r+0xacc>
 800c666:	bf00      	nop
 800c668:	0800fe3c 	.word	0x0800fe3c
 800c66c:	08010041 	.word	0x08010041
 800c670:	0800fdb9 	.word	0x0800fdb9

0800c674 <rshift>:
 800c674:	6903      	ldr	r3, [r0, #16]
 800c676:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c67a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c67e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c682:	f100 0414 	add.w	r4, r0, #20
 800c686:	dd45      	ble.n	800c714 <rshift+0xa0>
 800c688:	f011 011f 	ands.w	r1, r1, #31
 800c68c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c690:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c694:	d10c      	bne.n	800c6b0 <rshift+0x3c>
 800c696:	f100 0710 	add.w	r7, r0, #16
 800c69a:	4629      	mov	r1, r5
 800c69c:	42b1      	cmp	r1, r6
 800c69e:	d334      	bcc.n	800c70a <rshift+0x96>
 800c6a0:	1a9b      	subs	r3, r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	1eea      	subs	r2, r5, #3
 800c6a6:	4296      	cmp	r6, r2
 800c6a8:	bf38      	it	cc
 800c6aa:	2300      	movcc	r3, #0
 800c6ac:	4423      	add	r3, r4
 800c6ae:	e015      	b.n	800c6dc <rshift+0x68>
 800c6b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c6b4:	f1c1 0820 	rsb	r8, r1, #32
 800c6b8:	40cf      	lsrs	r7, r1
 800c6ba:	f105 0e04 	add.w	lr, r5, #4
 800c6be:	46a1      	mov	r9, r4
 800c6c0:	4576      	cmp	r6, lr
 800c6c2:	46f4      	mov	ip, lr
 800c6c4:	d815      	bhi.n	800c6f2 <rshift+0x7e>
 800c6c6:	1a9b      	subs	r3, r3, r2
 800c6c8:	009a      	lsls	r2, r3, #2
 800c6ca:	3a04      	subs	r2, #4
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	42ae      	cmp	r6, r5
 800c6d0:	bf38      	it	cc
 800c6d2:	2200      	movcc	r2, #0
 800c6d4:	18a3      	adds	r3, r4, r2
 800c6d6:	50a7      	str	r7, [r4, r2]
 800c6d8:	b107      	cbz	r7, 800c6dc <rshift+0x68>
 800c6da:	3304      	adds	r3, #4
 800c6dc:	1b1a      	subs	r2, r3, r4
 800c6de:	42a3      	cmp	r3, r4
 800c6e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c6e4:	bf08      	it	eq
 800c6e6:	2300      	moveq	r3, #0
 800c6e8:	6102      	str	r2, [r0, #16]
 800c6ea:	bf08      	it	eq
 800c6ec:	6143      	streq	r3, [r0, #20]
 800c6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	f8dc c000 	ldr.w	ip, [ip]
 800c6f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c6fa:	ea4c 0707 	orr.w	r7, ip, r7
 800c6fe:	f849 7b04 	str.w	r7, [r9], #4
 800c702:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c706:	40cf      	lsrs	r7, r1
 800c708:	e7da      	b.n	800c6c0 <rshift+0x4c>
 800c70a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c70e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c712:	e7c3      	b.n	800c69c <rshift+0x28>
 800c714:	4623      	mov	r3, r4
 800c716:	e7e1      	b.n	800c6dc <rshift+0x68>

0800c718 <__hexdig_fun>:
 800c718:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d802      	bhi.n	800c726 <__hexdig_fun+0xe>
 800c720:	3820      	subs	r0, #32
 800c722:	b2c0      	uxtb	r0, r0
 800c724:	4770      	bx	lr
 800c726:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d801      	bhi.n	800c732 <__hexdig_fun+0x1a>
 800c72e:	3847      	subs	r0, #71	; 0x47
 800c730:	e7f7      	b.n	800c722 <__hexdig_fun+0xa>
 800c732:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c736:	2b05      	cmp	r3, #5
 800c738:	d801      	bhi.n	800c73e <__hexdig_fun+0x26>
 800c73a:	3827      	subs	r0, #39	; 0x27
 800c73c:	e7f1      	b.n	800c722 <__hexdig_fun+0xa>
 800c73e:	2000      	movs	r0, #0
 800c740:	4770      	bx	lr
	...

0800c744 <__gethex>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	ed2d 8b02 	vpush	{d8}
 800c74c:	b089      	sub	sp, #36	; 0x24
 800c74e:	ee08 0a10 	vmov	s16, r0
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	4bbc      	ldr	r3, [pc, #752]	; (800ca48 <__gethex+0x304>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	468b      	mov	fp, r1
 800c75e:	4690      	mov	r8, r2
 800c760:	f7f3 fd78 	bl	8000254 <strlen>
 800c764:	9b01      	ldr	r3, [sp, #4]
 800c766:	f8db 2000 	ldr.w	r2, [fp]
 800c76a:	4403      	add	r3, r0
 800c76c:	4682      	mov	sl, r0
 800c76e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	1c93      	adds	r3, r2, #2
 800c776:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c77a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c77e:	32fe      	adds	r2, #254	; 0xfe
 800c780:	18d1      	adds	r1, r2, r3
 800c782:	461f      	mov	r7, r3
 800c784:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c788:	9100      	str	r1, [sp, #0]
 800c78a:	2830      	cmp	r0, #48	; 0x30
 800c78c:	d0f8      	beq.n	800c780 <__gethex+0x3c>
 800c78e:	f7ff ffc3 	bl	800c718 <__hexdig_fun>
 800c792:	4604      	mov	r4, r0
 800c794:	2800      	cmp	r0, #0
 800c796:	d13a      	bne.n	800c80e <__gethex+0xca>
 800c798:	9901      	ldr	r1, [sp, #4]
 800c79a:	4652      	mov	r2, sl
 800c79c:	4638      	mov	r0, r7
 800c79e:	f7fe fa98 	bl	800acd2 <strncmp>
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d168      	bne.n	800c87a <__gethex+0x136>
 800c7a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c7ac:	eb07 060a 	add.w	r6, r7, sl
 800c7b0:	f7ff ffb2 	bl	800c718 <__hexdig_fun>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d062      	beq.n	800c87e <__gethex+0x13a>
 800c7b8:	4633      	mov	r3, r6
 800c7ba:	7818      	ldrb	r0, [r3, #0]
 800c7bc:	2830      	cmp	r0, #48	; 0x30
 800c7be:	461f      	mov	r7, r3
 800c7c0:	f103 0301 	add.w	r3, r3, #1
 800c7c4:	d0f9      	beq.n	800c7ba <__gethex+0x76>
 800c7c6:	f7ff ffa7 	bl	800c718 <__hexdig_fun>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	fab0 f480 	clz	r4, r0
 800c7d0:	0964      	lsrs	r4, r4, #5
 800c7d2:	4635      	mov	r5, r6
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	463a      	mov	r2, r7
 800c7d8:	4616      	mov	r6, r2
 800c7da:	3201      	adds	r2, #1
 800c7dc:	7830      	ldrb	r0, [r6, #0]
 800c7de:	f7ff ff9b 	bl	800c718 <__hexdig_fun>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d1f8      	bne.n	800c7d8 <__gethex+0x94>
 800c7e6:	9901      	ldr	r1, [sp, #4]
 800c7e8:	4652      	mov	r2, sl
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7fe fa71 	bl	800acd2 <strncmp>
 800c7f0:	b980      	cbnz	r0, 800c814 <__gethex+0xd0>
 800c7f2:	b94d      	cbnz	r5, 800c808 <__gethex+0xc4>
 800c7f4:	eb06 050a 	add.w	r5, r6, sl
 800c7f8:	462a      	mov	r2, r5
 800c7fa:	4616      	mov	r6, r2
 800c7fc:	3201      	adds	r2, #1
 800c7fe:	7830      	ldrb	r0, [r6, #0]
 800c800:	f7ff ff8a 	bl	800c718 <__hexdig_fun>
 800c804:	2800      	cmp	r0, #0
 800c806:	d1f8      	bne.n	800c7fa <__gethex+0xb6>
 800c808:	1bad      	subs	r5, r5, r6
 800c80a:	00ad      	lsls	r5, r5, #2
 800c80c:	e004      	b.n	800c818 <__gethex+0xd4>
 800c80e:	2400      	movs	r4, #0
 800c810:	4625      	mov	r5, r4
 800c812:	e7e0      	b.n	800c7d6 <__gethex+0x92>
 800c814:	2d00      	cmp	r5, #0
 800c816:	d1f7      	bne.n	800c808 <__gethex+0xc4>
 800c818:	7833      	ldrb	r3, [r6, #0]
 800c81a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c81e:	2b50      	cmp	r3, #80	; 0x50
 800c820:	d13b      	bne.n	800c89a <__gethex+0x156>
 800c822:	7873      	ldrb	r3, [r6, #1]
 800c824:	2b2b      	cmp	r3, #43	; 0x2b
 800c826:	d02c      	beq.n	800c882 <__gethex+0x13e>
 800c828:	2b2d      	cmp	r3, #45	; 0x2d
 800c82a:	d02e      	beq.n	800c88a <__gethex+0x146>
 800c82c:	1c71      	adds	r1, r6, #1
 800c82e:	f04f 0900 	mov.w	r9, #0
 800c832:	7808      	ldrb	r0, [r1, #0]
 800c834:	f7ff ff70 	bl	800c718 <__hexdig_fun>
 800c838:	1e43      	subs	r3, r0, #1
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b18      	cmp	r3, #24
 800c83e:	d82c      	bhi.n	800c89a <__gethex+0x156>
 800c840:	f1a0 0210 	sub.w	r2, r0, #16
 800c844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c848:	f7ff ff66 	bl	800c718 <__hexdig_fun>
 800c84c:	1e43      	subs	r3, r0, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b18      	cmp	r3, #24
 800c852:	d91d      	bls.n	800c890 <__gethex+0x14c>
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d000      	beq.n	800c85c <__gethex+0x118>
 800c85a:	4252      	negs	r2, r2
 800c85c:	4415      	add	r5, r2
 800c85e:	f8cb 1000 	str.w	r1, [fp]
 800c862:	b1e4      	cbz	r4, 800c89e <__gethex+0x15a>
 800c864:	9b00      	ldr	r3, [sp, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	bf14      	ite	ne
 800c86a:	2700      	movne	r7, #0
 800c86c:	2706      	moveq	r7, #6
 800c86e:	4638      	mov	r0, r7
 800c870:	b009      	add	sp, #36	; 0x24
 800c872:	ecbd 8b02 	vpop	{d8}
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	463e      	mov	r6, r7
 800c87c:	4625      	mov	r5, r4
 800c87e:	2401      	movs	r4, #1
 800c880:	e7ca      	b.n	800c818 <__gethex+0xd4>
 800c882:	f04f 0900 	mov.w	r9, #0
 800c886:	1cb1      	adds	r1, r6, #2
 800c888:	e7d3      	b.n	800c832 <__gethex+0xee>
 800c88a:	f04f 0901 	mov.w	r9, #1
 800c88e:	e7fa      	b.n	800c886 <__gethex+0x142>
 800c890:	230a      	movs	r3, #10
 800c892:	fb03 0202 	mla	r2, r3, r2, r0
 800c896:	3a10      	subs	r2, #16
 800c898:	e7d4      	b.n	800c844 <__gethex+0x100>
 800c89a:	4631      	mov	r1, r6
 800c89c:	e7df      	b.n	800c85e <__gethex+0x11a>
 800c89e:	1bf3      	subs	r3, r6, r7
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	2b07      	cmp	r3, #7
 800c8a6:	dc0b      	bgt.n	800c8c0 <__gethex+0x17c>
 800c8a8:	ee18 0a10 	vmov	r0, s16
 800c8ac:	f000 fa90 	bl	800cdd0 <_Balloc>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	b940      	cbnz	r0, 800c8c6 <__gethex+0x182>
 800c8b4:	4b65      	ldr	r3, [pc, #404]	; (800ca4c <__gethex+0x308>)
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	21de      	movs	r1, #222	; 0xde
 800c8ba:	4865      	ldr	r0, [pc, #404]	; (800ca50 <__gethex+0x30c>)
 800c8bc:	f001 fda4 	bl	800e408 <__assert_func>
 800c8c0:	3101      	adds	r1, #1
 800c8c2:	105b      	asrs	r3, r3, #1
 800c8c4:	e7ee      	b.n	800c8a4 <__gethex+0x160>
 800c8c6:	f100 0914 	add.w	r9, r0, #20
 800c8ca:	f04f 0b00 	mov.w	fp, #0
 800c8ce:	f1ca 0301 	rsb	r3, sl, #1
 800c8d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c8d6:	f8cd b000 	str.w	fp, [sp]
 800c8da:	9306      	str	r3, [sp, #24]
 800c8dc:	42b7      	cmp	r7, r6
 800c8de:	d340      	bcc.n	800c962 <__gethex+0x21e>
 800c8e0:	9802      	ldr	r0, [sp, #8]
 800c8e2:	9b00      	ldr	r3, [sp, #0]
 800c8e4:	f840 3b04 	str.w	r3, [r0], #4
 800c8e8:	eba0 0009 	sub.w	r0, r0, r9
 800c8ec:	1080      	asrs	r0, r0, #2
 800c8ee:	0146      	lsls	r6, r0, #5
 800c8f0:	6120      	str	r0, [r4, #16]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fb62 	bl	800cfbc <__hi0bits>
 800c8f8:	1a30      	subs	r0, r6, r0
 800c8fa:	f8d8 6000 	ldr.w	r6, [r8]
 800c8fe:	42b0      	cmp	r0, r6
 800c900:	dd63      	ble.n	800c9ca <__gethex+0x286>
 800c902:	1b87      	subs	r7, r0, r6
 800c904:	4639      	mov	r1, r7
 800c906:	4620      	mov	r0, r4
 800c908:	f000 fefd 	bl	800d706 <__any_on>
 800c90c:	4682      	mov	sl, r0
 800c90e:	b1a8      	cbz	r0, 800c93c <__gethex+0x1f8>
 800c910:	1e7b      	subs	r3, r7, #1
 800c912:	1159      	asrs	r1, r3, #5
 800c914:	f003 021f 	and.w	r2, r3, #31
 800c918:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c91c:	f04f 0a01 	mov.w	sl, #1
 800c920:	fa0a f202 	lsl.w	r2, sl, r2
 800c924:	420a      	tst	r2, r1
 800c926:	d009      	beq.n	800c93c <__gethex+0x1f8>
 800c928:	4553      	cmp	r3, sl
 800c92a:	dd05      	ble.n	800c938 <__gethex+0x1f4>
 800c92c:	1eb9      	subs	r1, r7, #2
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 fee9 	bl	800d706 <__any_on>
 800c934:	2800      	cmp	r0, #0
 800c936:	d145      	bne.n	800c9c4 <__gethex+0x280>
 800c938:	f04f 0a02 	mov.w	sl, #2
 800c93c:	4639      	mov	r1, r7
 800c93e:	4620      	mov	r0, r4
 800c940:	f7ff fe98 	bl	800c674 <rshift>
 800c944:	443d      	add	r5, r7
 800c946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c94a:	42ab      	cmp	r3, r5
 800c94c:	da4c      	bge.n	800c9e8 <__gethex+0x2a4>
 800c94e:	ee18 0a10 	vmov	r0, s16
 800c952:	4621      	mov	r1, r4
 800c954:	f000 fa7c 	bl	800ce50 <_Bfree>
 800c958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c95a:	2300      	movs	r3, #0
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	27a3      	movs	r7, #163	; 0xa3
 800c960:	e785      	b.n	800c86e <__gethex+0x12a>
 800c962:	1e73      	subs	r3, r6, #1
 800c964:	9a05      	ldr	r2, [sp, #20]
 800c966:	9303      	str	r3, [sp, #12]
 800c968:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d019      	beq.n	800c9a4 <__gethex+0x260>
 800c970:	f1bb 0f20 	cmp.w	fp, #32
 800c974:	d107      	bne.n	800c986 <__gethex+0x242>
 800c976:	9b02      	ldr	r3, [sp, #8]
 800c978:	9a00      	ldr	r2, [sp, #0]
 800c97a:	f843 2b04 	str.w	r2, [r3], #4
 800c97e:	9302      	str	r3, [sp, #8]
 800c980:	2300      	movs	r3, #0
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	469b      	mov	fp, r3
 800c986:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c98a:	f7ff fec5 	bl	800c718 <__hexdig_fun>
 800c98e:	9b00      	ldr	r3, [sp, #0]
 800c990:	f000 000f 	and.w	r0, r0, #15
 800c994:	fa00 f00b 	lsl.w	r0, r0, fp
 800c998:	4303      	orrs	r3, r0
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	f10b 0b04 	add.w	fp, fp, #4
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	e00d      	b.n	800c9c0 <__gethex+0x27c>
 800c9a4:	9b03      	ldr	r3, [sp, #12]
 800c9a6:	9a06      	ldr	r2, [sp, #24]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	42bb      	cmp	r3, r7
 800c9ac:	d3e0      	bcc.n	800c970 <__gethex+0x22c>
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	9901      	ldr	r1, [sp, #4]
 800c9b2:	9307      	str	r3, [sp, #28]
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	f7fe f98c 	bl	800acd2 <strncmp>
 800c9ba:	9b07      	ldr	r3, [sp, #28]
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d1d7      	bne.n	800c970 <__gethex+0x22c>
 800c9c0:	461e      	mov	r6, r3
 800c9c2:	e78b      	b.n	800c8dc <__gethex+0x198>
 800c9c4:	f04f 0a03 	mov.w	sl, #3
 800c9c8:	e7b8      	b.n	800c93c <__gethex+0x1f8>
 800c9ca:	da0a      	bge.n	800c9e2 <__gethex+0x29e>
 800c9cc:	1a37      	subs	r7, r6, r0
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	ee18 0a10 	vmov	r0, s16
 800c9d4:	463a      	mov	r2, r7
 800c9d6:	f000 fc57 	bl	800d288 <__lshift>
 800c9da:	1bed      	subs	r5, r5, r7
 800c9dc:	4604      	mov	r4, r0
 800c9de:	f100 0914 	add.w	r9, r0, #20
 800c9e2:	f04f 0a00 	mov.w	sl, #0
 800c9e6:	e7ae      	b.n	800c946 <__gethex+0x202>
 800c9e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c9ec:	42a8      	cmp	r0, r5
 800c9ee:	dd72      	ble.n	800cad6 <__gethex+0x392>
 800c9f0:	1b45      	subs	r5, r0, r5
 800c9f2:	42ae      	cmp	r6, r5
 800c9f4:	dc36      	bgt.n	800ca64 <__gethex+0x320>
 800c9f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d02a      	beq.n	800ca54 <__gethex+0x310>
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d02c      	beq.n	800ca5c <__gethex+0x318>
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d115      	bne.n	800ca32 <__gethex+0x2ee>
 800ca06:	42ae      	cmp	r6, r5
 800ca08:	d113      	bne.n	800ca32 <__gethex+0x2ee>
 800ca0a:	2e01      	cmp	r6, #1
 800ca0c:	d10b      	bne.n	800ca26 <__gethex+0x2e2>
 800ca0e:	9a04      	ldr	r2, [sp, #16]
 800ca10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	2301      	movs	r3, #1
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	f8c9 3000 	str.w	r3, [r9]
 800ca1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca20:	2762      	movs	r7, #98	; 0x62
 800ca22:	601c      	str	r4, [r3, #0]
 800ca24:	e723      	b.n	800c86e <__gethex+0x12a>
 800ca26:	1e71      	subs	r1, r6, #1
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 fe6c 	bl	800d706 <__any_on>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d1ed      	bne.n	800ca0e <__gethex+0x2ca>
 800ca32:	ee18 0a10 	vmov	r0, s16
 800ca36:	4621      	mov	r1, r4
 800ca38:	f000 fa0a 	bl	800ce50 <_Bfree>
 800ca3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca3e:	2300      	movs	r3, #0
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	2750      	movs	r7, #80	; 0x50
 800ca44:	e713      	b.n	800c86e <__gethex+0x12a>
 800ca46:	bf00      	nop
 800ca48:	0800feb8 	.word	0x0800feb8
 800ca4c:	0800fe3c 	.word	0x0800fe3c
 800ca50:	0800fe4d 	.word	0x0800fe4d
 800ca54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1eb      	bne.n	800ca32 <__gethex+0x2ee>
 800ca5a:	e7d8      	b.n	800ca0e <__gethex+0x2ca>
 800ca5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1d5      	bne.n	800ca0e <__gethex+0x2ca>
 800ca62:	e7e6      	b.n	800ca32 <__gethex+0x2ee>
 800ca64:	1e6f      	subs	r7, r5, #1
 800ca66:	f1ba 0f00 	cmp.w	sl, #0
 800ca6a:	d131      	bne.n	800cad0 <__gethex+0x38c>
 800ca6c:	b127      	cbz	r7, 800ca78 <__gethex+0x334>
 800ca6e:	4639      	mov	r1, r7
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fe48 	bl	800d706 <__any_on>
 800ca76:	4682      	mov	sl, r0
 800ca78:	117b      	asrs	r3, r7, #5
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ca80:	f007 071f 	and.w	r7, r7, #31
 800ca84:	fa01 f707 	lsl.w	r7, r1, r7
 800ca88:	421f      	tst	r7, r3
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	bf18      	it	ne
 800ca90:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca94:	1b76      	subs	r6, r6, r5
 800ca96:	f7ff fded 	bl	800c674 <rshift>
 800ca9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca9e:	2702      	movs	r7, #2
 800caa0:	f1ba 0f00 	cmp.w	sl, #0
 800caa4:	d048      	beq.n	800cb38 <__gethex+0x3f4>
 800caa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d015      	beq.n	800cada <__gethex+0x396>
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d017      	beq.n	800cae2 <__gethex+0x39e>
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d109      	bne.n	800caca <__gethex+0x386>
 800cab6:	f01a 0f02 	tst.w	sl, #2
 800caba:	d006      	beq.n	800caca <__gethex+0x386>
 800cabc:	f8d9 0000 	ldr.w	r0, [r9]
 800cac0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cac4:	f01a 0f01 	tst.w	sl, #1
 800cac8:	d10e      	bne.n	800cae8 <__gethex+0x3a4>
 800caca:	f047 0710 	orr.w	r7, r7, #16
 800cace:	e033      	b.n	800cb38 <__gethex+0x3f4>
 800cad0:	f04f 0a01 	mov.w	sl, #1
 800cad4:	e7d0      	b.n	800ca78 <__gethex+0x334>
 800cad6:	2701      	movs	r7, #1
 800cad8:	e7e2      	b.n	800caa0 <__gethex+0x35c>
 800cada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cadc:	f1c3 0301 	rsb	r3, r3, #1
 800cae0:	9315      	str	r3, [sp, #84]	; 0x54
 800cae2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0f0      	beq.n	800caca <__gethex+0x386>
 800cae8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800caec:	f104 0314 	add.w	r3, r4, #20
 800caf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800caf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800caf8:	f04f 0c00 	mov.w	ip, #0
 800cafc:	4618      	mov	r0, r3
 800cafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb02:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb06:	d01c      	beq.n	800cb42 <__gethex+0x3fe>
 800cb08:	3201      	adds	r2, #1
 800cb0a:	6002      	str	r2, [r0, #0]
 800cb0c:	2f02      	cmp	r7, #2
 800cb0e:	f104 0314 	add.w	r3, r4, #20
 800cb12:	d13f      	bne.n	800cb94 <__gethex+0x450>
 800cb14:	f8d8 2000 	ldr.w	r2, [r8]
 800cb18:	3a01      	subs	r2, #1
 800cb1a:	42b2      	cmp	r2, r6
 800cb1c:	d10a      	bne.n	800cb34 <__gethex+0x3f0>
 800cb1e:	1171      	asrs	r1, r6, #5
 800cb20:	2201      	movs	r2, #1
 800cb22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb26:	f006 061f 	and.w	r6, r6, #31
 800cb2a:	fa02 f606 	lsl.w	r6, r2, r6
 800cb2e:	421e      	tst	r6, r3
 800cb30:	bf18      	it	ne
 800cb32:	4617      	movne	r7, r2
 800cb34:	f047 0720 	orr.w	r7, r7, #32
 800cb38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb3a:	601c      	str	r4, [r3, #0]
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	601d      	str	r5, [r3, #0]
 800cb40:	e695      	b.n	800c86e <__gethex+0x12a>
 800cb42:	4299      	cmp	r1, r3
 800cb44:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb48:	d8d8      	bhi.n	800cafc <__gethex+0x3b8>
 800cb4a:	68a3      	ldr	r3, [r4, #8]
 800cb4c:	459b      	cmp	fp, r3
 800cb4e:	db19      	blt.n	800cb84 <__gethex+0x440>
 800cb50:	6861      	ldr	r1, [r4, #4]
 800cb52:	ee18 0a10 	vmov	r0, s16
 800cb56:	3101      	adds	r1, #1
 800cb58:	f000 f93a 	bl	800cdd0 <_Balloc>
 800cb5c:	4681      	mov	r9, r0
 800cb5e:	b918      	cbnz	r0, 800cb68 <__gethex+0x424>
 800cb60:	4b1a      	ldr	r3, [pc, #104]	; (800cbcc <__gethex+0x488>)
 800cb62:	4602      	mov	r2, r0
 800cb64:	2184      	movs	r1, #132	; 0x84
 800cb66:	e6a8      	b.n	800c8ba <__gethex+0x176>
 800cb68:	6922      	ldr	r2, [r4, #16]
 800cb6a:	3202      	adds	r2, #2
 800cb6c:	f104 010c 	add.w	r1, r4, #12
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	300c      	adds	r0, #12
 800cb74:	f000 f91e 	bl	800cdb4 <memcpy>
 800cb78:	4621      	mov	r1, r4
 800cb7a:	ee18 0a10 	vmov	r0, s16
 800cb7e:	f000 f967 	bl	800ce50 <_Bfree>
 800cb82:	464c      	mov	r4, r9
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb8c:	6122      	str	r2, [r4, #16]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	615a      	str	r2, [r3, #20]
 800cb92:	e7bb      	b.n	800cb0c <__gethex+0x3c8>
 800cb94:	6922      	ldr	r2, [r4, #16]
 800cb96:	455a      	cmp	r2, fp
 800cb98:	dd0b      	ble.n	800cbb2 <__gethex+0x46e>
 800cb9a:	2101      	movs	r1, #1
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f7ff fd69 	bl	800c674 <rshift>
 800cba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cba6:	3501      	adds	r5, #1
 800cba8:	42ab      	cmp	r3, r5
 800cbaa:	f6ff aed0 	blt.w	800c94e <__gethex+0x20a>
 800cbae:	2701      	movs	r7, #1
 800cbb0:	e7c0      	b.n	800cb34 <__gethex+0x3f0>
 800cbb2:	f016 061f 	ands.w	r6, r6, #31
 800cbb6:	d0fa      	beq.n	800cbae <__gethex+0x46a>
 800cbb8:	449a      	add	sl, r3
 800cbba:	f1c6 0620 	rsb	r6, r6, #32
 800cbbe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cbc2:	f000 f9fb 	bl	800cfbc <__hi0bits>
 800cbc6:	42b0      	cmp	r0, r6
 800cbc8:	dbe7      	blt.n	800cb9a <__gethex+0x456>
 800cbca:	e7f0      	b.n	800cbae <__gethex+0x46a>
 800cbcc:	0800fe3c 	.word	0x0800fe3c

0800cbd0 <L_shift>:
 800cbd0:	f1c2 0208 	rsb	r2, r2, #8
 800cbd4:	0092      	lsls	r2, r2, #2
 800cbd6:	b570      	push	{r4, r5, r6, lr}
 800cbd8:	f1c2 0620 	rsb	r6, r2, #32
 800cbdc:	6843      	ldr	r3, [r0, #4]
 800cbde:	6804      	ldr	r4, [r0, #0]
 800cbe0:	fa03 f506 	lsl.w	r5, r3, r6
 800cbe4:	432c      	orrs	r4, r5
 800cbe6:	40d3      	lsrs	r3, r2
 800cbe8:	6004      	str	r4, [r0, #0]
 800cbea:	f840 3f04 	str.w	r3, [r0, #4]!
 800cbee:	4288      	cmp	r0, r1
 800cbf0:	d3f4      	bcc.n	800cbdc <L_shift+0xc>
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}

0800cbf4 <__match>:
 800cbf4:	b530      	push	{r4, r5, lr}
 800cbf6:	6803      	ldr	r3, [r0, #0]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbfe:	b914      	cbnz	r4, 800cc06 <__match+0x12>
 800cc00:	6003      	str	r3, [r0, #0]
 800cc02:	2001      	movs	r0, #1
 800cc04:	bd30      	pop	{r4, r5, pc}
 800cc06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc0e:	2d19      	cmp	r5, #25
 800cc10:	bf98      	it	ls
 800cc12:	3220      	addls	r2, #32
 800cc14:	42a2      	cmp	r2, r4
 800cc16:	d0f0      	beq.n	800cbfa <__match+0x6>
 800cc18:	2000      	movs	r0, #0
 800cc1a:	e7f3      	b.n	800cc04 <__match+0x10>

0800cc1c <__hexnan>:
 800cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc20:	680b      	ldr	r3, [r1, #0]
 800cc22:	6801      	ldr	r1, [r0, #0]
 800cc24:	115e      	asrs	r6, r3, #5
 800cc26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc2a:	f013 031f 	ands.w	r3, r3, #31
 800cc2e:	b087      	sub	sp, #28
 800cc30:	bf18      	it	ne
 800cc32:	3604      	addne	r6, #4
 800cc34:	2500      	movs	r5, #0
 800cc36:	1f37      	subs	r7, r6, #4
 800cc38:	4682      	mov	sl, r0
 800cc3a:	4690      	mov	r8, r2
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc42:	46b9      	mov	r9, r7
 800cc44:	463c      	mov	r4, r7
 800cc46:	9502      	str	r5, [sp, #8]
 800cc48:	46ab      	mov	fp, r5
 800cc4a:	784a      	ldrb	r2, [r1, #1]
 800cc4c:	1c4b      	adds	r3, r1, #1
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	b342      	cbz	r2, 800cca4 <__hexnan+0x88>
 800cc52:	4610      	mov	r0, r2
 800cc54:	9105      	str	r1, [sp, #20]
 800cc56:	9204      	str	r2, [sp, #16]
 800cc58:	f7ff fd5e 	bl	800c718 <__hexdig_fun>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d14f      	bne.n	800cd00 <__hexnan+0xe4>
 800cc60:	9a04      	ldr	r2, [sp, #16]
 800cc62:	9905      	ldr	r1, [sp, #20]
 800cc64:	2a20      	cmp	r2, #32
 800cc66:	d818      	bhi.n	800cc9a <__hexnan+0x7e>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	459b      	cmp	fp, r3
 800cc6c:	dd13      	ble.n	800cc96 <__hexnan+0x7a>
 800cc6e:	454c      	cmp	r4, r9
 800cc70:	d206      	bcs.n	800cc80 <__hexnan+0x64>
 800cc72:	2d07      	cmp	r5, #7
 800cc74:	dc04      	bgt.n	800cc80 <__hexnan+0x64>
 800cc76:	462a      	mov	r2, r5
 800cc78:	4649      	mov	r1, r9
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f7ff ffa8 	bl	800cbd0 <L_shift>
 800cc80:	4544      	cmp	r4, r8
 800cc82:	d950      	bls.n	800cd26 <__hexnan+0x10a>
 800cc84:	2300      	movs	r3, #0
 800cc86:	f1a4 0904 	sub.w	r9, r4, #4
 800cc8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc8e:	f8cd b008 	str.w	fp, [sp, #8]
 800cc92:	464c      	mov	r4, r9
 800cc94:	461d      	mov	r5, r3
 800cc96:	9903      	ldr	r1, [sp, #12]
 800cc98:	e7d7      	b.n	800cc4a <__hexnan+0x2e>
 800cc9a:	2a29      	cmp	r2, #41	; 0x29
 800cc9c:	d156      	bne.n	800cd4c <__hexnan+0x130>
 800cc9e:	3102      	adds	r1, #2
 800cca0:	f8ca 1000 	str.w	r1, [sl]
 800cca4:	f1bb 0f00 	cmp.w	fp, #0
 800cca8:	d050      	beq.n	800cd4c <__hexnan+0x130>
 800ccaa:	454c      	cmp	r4, r9
 800ccac:	d206      	bcs.n	800ccbc <__hexnan+0xa0>
 800ccae:	2d07      	cmp	r5, #7
 800ccb0:	dc04      	bgt.n	800ccbc <__hexnan+0xa0>
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f7ff ff8a 	bl	800cbd0 <L_shift>
 800ccbc:	4544      	cmp	r4, r8
 800ccbe:	d934      	bls.n	800cd2a <__hexnan+0x10e>
 800ccc0:	f1a8 0204 	sub.w	r2, r8, #4
 800ccc4:	4623      	mov	r3, r4
 800ccc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ccca:	f842 1f04 	str.w	r1, [r2, #4]!
 800ccce:	429f      	cmp	r7, r3
 800ccd0:	d2f9      	bcs.n	800ccc6 <__hexnan+0xaa>
 800ccd2:	1b3b      	subs	r3, r7, r4
 800ccd4:	f023 0303 	bic.w	r3, r3, #3
 800ccd8:	3304      	adds	r3, #4
 800ccda:	3401      	adds	r4, #1
 800ccdc:	3e03      	subs	r6, #3
 800ccde:	42b4      	cmp	r4, r6
 800cce0:	bf88      	it	hi
 800cce2:	2304      	movhi	r3, #4
 800cce4:	4443      	add	r3, r8
 800cce6:	2200      	movs	r2, #0
 800cce8:	f843 2b04 	str.w	r2, [r3], #4
 800ccec:	429f      	cmp	r7, r3
 800ccee:	d2fb      	bcs.n	800cce8 <__hexnan+0xcc>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	b91b      	cbnz	r3, 800ccfc <__hexnan+0xe0>
 800ccf4:	4547      	cmp	r7, r8
 800ccf6:	d127      	bne.n	800cd48 <__hexnan+0x12c>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	603b      	str	r3, [r7, #0]
 800ccfc:	2005      	movs	r0, #5
 800ccfe:	e026      	b.n	800cd4e <__hexnan+0x132>
 800cd00:	3501      	adds	r5, #1
 800cd02:	2d08      	cmp	r5, #8
 800cd04:	f10b 0b01 	add.w	fp, fp, #1
 800cd08:	dd06      	ble.n	800cd18 <__hexnan+0xfc>
 800cd0a:	4544      	cmp	r4, r8
 800cd0c:	d9c3      	bls.n	800cc96 <__hexnan+0x7a>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd14:	2501      	movs	r5, #1
 800cd16:	3c04      	subs	r4, #4
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	f000 000f 	and.w	r0, r0, #15
 800cd1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cd22:	6022      	str	r2, [r4, #0]
 800cd24:	e7b7      	b.n	800cc96 <__hexnan+0x7a>
 800cd26:	2508      	movs	r5, #8
 800cd28:	e7b5      	b.n	800cc96 <__hexnan+0x7a>
 800cd2a:	9b01      	ldr	r3, [sp, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0df      	beq.n	800ccf0 <__hexnan+0xd4>
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	f1c3 0320 	rsb	r3, r3, #32
 800cd38:	fa22 f303 	lsr.w	r3, r2, r3
 800cd3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd40:	401a      	ands	r2, r3
 800cd42:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd46:	e7d3      	b.n	800ccf0 <__hexnan+0xd4>
 800cd48:	3f04      	subs	r7, #4
 800cd4a:	e7d1      	b.n	800ccf0 <__hexnan+0xd4>
 800cd4c:	2004      	movs	r0, #4
 800cd4e:	b007      	add	sp, #28
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd54 <_localeconv_r>:
 800cd54:	4800      	ldr	r0, [pc, #0]	; (800cd58 <_localeconv_r+0x4>)
 800cd56:	4770      	bx	lr
 800cd58:	20000288 	.word	0x20000288

0800cd5c <_lseek_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	; (800cd7c <_lseek_r+0x20>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	4608      	mov	r0, r1
 800cd64:	4611      	mov	r1, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7f6 fbfc 	bl	8003568 <_lseek>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_lseek_r+0x1e>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_lseek_r+0x1e>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	20018910 	.word	0x20018910

0800cd80 <malloc>:
 800cd80:	4b02      	ldr	r3, [pc, #8]	; (800cd8c <malloc+0xc>)
 800cd82:	4601      	mov	r1, r0
 800cd84:	6818      	ldr	r0, [r3, #0]
 800cd86:	f000 bd3f 	b.w	800d808 <_malloc_r>
 800cd8a:	bf00      	nop
 800cd8c:	20000130 	.word	0x20000130

0800cd90 <__ascii_mbtowc>:
 800cd90:	b082      	sub	sp, #8
 800cd92:	b901      	cbnz	r1, 800cd96 <__ascii_mbtowc+0x6>
 800cd94:	a901      	add	r1, sp, #4
 800cd96:	b142      	cbz	r2, 800cdaa <__ascii_mbtowc+0x1a>
 800cd98:	b14b      	cbz	r3, 800cdae <__ascii_mbtowc+0x1e>
 800cd9a:	7813      	ldrb	r3, [r2, #0]
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	7812      	ldrb	r2, [r2, #0]
 800cda0:	1e10      	subs	r0, r2, #0
 800cda2:	bf18      	it	ne
 800cda4:	2001      	movne	r0, #1
 800cda6:	b002      	add	sp, #8
 800cda8:	4770      	bx	lr
 800cdaa:	4610      	mov	r0, r2
 800cdac:	e7fb      	b.n	800cda6 <__ascii_mbtowc+0x16>
 800cdae:	f06f 0001 	mvn.w	r0, #1
 800cdb2:	e7f8      	b.n	800cda6 <__ascii_mbtowc+0x16>

0800cdb4 <memcpy>:
 800cdb4:	440a      	add	r2, r1
 800cdb6:	4291      	cmp	r1, r2
 800cdb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdbc:	d100      	bne.n	800cdc0 <memcpy+0xc>
 800cdbe:	4770      	bx	lr
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdca:	4291      	cmp	r1, r2
 800cdcc:	d1f9      	bne.n	800cdc2 <memcpy+0xe>
 800cdce:	bd10      	pop	{r4, pc}

0800cdd0 <_Balloc>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	b976      	cbnz	r6, 800cdf8 <_Balloc+0x28>
 800cdda:	2010      	movs	r0, #16
 800cddc:	f7ff ffd0 	bl	800cd80 <malloc>
 800cde0:	4602      	mov	r2, r0
 800cde2:	6260      	str	r0, [r4, #36]	; 0x24
 800cde4:	b920      	cbnz	r0, 800cdf0 <_Balloc+0x20>
 800cde6:	4b18      	ldr	r3, [pc, #96]	; (800ce48 <_Balloc+0x78>)
 800cde8:	4818      	ldr	r0, [pc, #96]	; (800ce4c <_Balloc+0x7c>)
 800cdea:	2166      	movs	r1, #102	; 0x66
 800cdec:	f001 fb0c 	bl	800e408 <__assert_func>
 800cdf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdf4:	6006      	str	r6, [r0, #0]
 800cdf6:	60c6      	str	r6, [r0, #12]
 800cdf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cdfa:	68f3      	ldr	r3, [r6, #12]
 800cdfc:	b183      	cbz	r3, 800ce20 <_Balloc+0x50>
 800cdfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce06:	b9b8      	cbnz	r0, 800ce38 <_Balloc+0x68>
 800ce08:	2101      	movs	r1, #1
 800ce0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce0e:	1d72      	adds	r2, r6, #5
 800ce10:	0092      	lsls	r2, r2, #2
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fc98 	bl	800d748 <_calloc_r>
 800ce18:	b160      	cbz	r0, 800ce34 <_Balloc+0x64>
 800ce1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce1e:	e00e      	b.n	800ce3e <_Balloc+0x6e>
 800ce20:	2221      	movs	r2, #33	; 0x21
 800ce22:	2104      	movs	r1, #4
 800ce24:	4620      	mov	r0, r4
 800ce26:	f000 fc8f 	bl	800d748 <_calloc_r>
 800ce2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce2c:	60f0      	str	r0, [r6, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e4      	bne.n	800cdfe <_Balloc+0x2e>
 800ce34:	2000      	movs	r0, #0
 800ce36:	bd70      	pop	{r4, r5, r6, pc}
 800ce38:	6802      	ldr	r2, [r0, #0]
 800ce3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce44:	e7f7      	b.n	800ce36 <_Balloc+0x66>
 800ce46:	bf00      	nop
 800ce48:	0800fdc6 	.word	0x0800fdc6
 800ce4c:	0800fecc 	.word	0x0800fecc

0800ce50 <_Bfree>:
 800ce50:	b570      	push	{r4, r5, r6, lr}
 800ce52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce54:	4605      	mov	r5, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	b976      	cbnz	r6, 800ce78 <_Bfree+0x28>
 800ce5a:	2010      	movs	r0, #16
 800ce5c:	f7ff ff90 	bl	800cd80 <malloc>
 800ce60:	4602      	mov	r2, r0
 800ce62:	6268      	str	r0, [r5, #36]	; 0x24
 800ce64:	b920      	cbnz	r0, 800ce70 <_Bfree+0x20>
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <_Bfree+0x3c>)
 800ce68:	4809      	ldr	r0, [pc, #36]	; (800ce90 <_Bfree+0x40>)
 800ce6a:	218a      	movs	r1, #138	; 0x8a
 800ce6c:	f001 facc 	bl	800e408 <__assert_func>
 800ce70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce74:	6006      	str	r6, [r0, #0]
 800ce76:	60c6      	str	r6, [r0, #12]
 800ce78:	b13c      	cbz	r4, 800ce8a <_Bfree+0x3a>
 800ce7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce7c:	6862      	ldr	r2, [r4, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce84:	6021      	str	r1, [r4, #0]
 800ce86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
 800ce8c:	0800fdc6 	.word	0x0800fdc6
 800ce90:	0800fecc 	.word	0x0800fecc

0800ce94 <__multadd>:
 800ce94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce98:	690e      	ldr	r6, [r1, #16]
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	4698      	mov	r8, r3
 800ce9e:	460c      	mov	r4, r1
 800cea0:	f101 0014 	add.w	r0, r1, #20
 800cea4:	2300      	movs	r3, #0
 800cea6:	6805      	ldr	r5, [r0, #0]
 800cea8:	b2a9      	uxth	r1, r5
 800ceaa:	fb02 8101 	mla	r1, r2, r1, r8
 800ceae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ceb2:	0c2d      	lsrs	r5, r5, #16
 800ceb4:	fb02 c505 	mla	r5, r2, r5, ip
 800ceb8:	b289      	uxth	r1, r1
 800ceba:	3301      	adds	r3, #1
 800cebc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cec0:	429e      	cmp	r6, r3
 800cec2:	f840 1b04 	str.w	r1, [r0], #4
 800cec6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceca:	dcec      	bgt.n	800cea6 <__multadd+0x12>
 800cecc:	f1b8 0f00 	cmp.w	r8, #0
 800ced0:	d022      	beq.n	800cf18 <__multadd+0x84>
 800ced2:	68a3      	ldr	r3, [r4, #8]
 800ced4:	42b3      	cmp	r3, r6
 800ced6:	dc19      	bgt.n	800cf0c <__multadd+0x78>
 800ced8:	6861      	ldr	r1, [r4, #4]
 800ceda:	4638      	mov	r0, r7
 800cedc:	3101      	adds	r1, #1
 800cede:	f7ff ff77 	bl	800cdd0 <_Balloc>
 800cee2:	4605      	mov	r5, r0
 800cee4:	b928      	cbnz	r0, 800cef2 <__multadd+0x5e>
 800cee6:	4602      	mov	r2, r0
 800cee8:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <__multadd+0x8c>)
 800ceea:	480e      	ldr	r0, [pc, #56]	; (800cf24 <__multadd+0x90>)
 800ceec:	21b5      	movs	r1, #181	; 0xb5
 800ceee:	f001 fa8b 	bl	800e408 <__assert_func>
 800cef2:	6922      	ldr	r2, [r4, #16]
 800cef4:	3202      	adds	r2, #2
 800cef6:	f104 010c 	add.w	r1, r4, #12
 800cefa:	0092      	lsls	r2, r2, #2
 800cefc:	300c      	adds	r0, #12
 800cefe:	f7ff ff59 	bl	800cdb4 <memcpy>
 800cf02:	4621      	mov	r1, r4
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7ff ffa3 	bl	800ce50 <_Bfree>
 800cf0a:	462c      	mov	r4, r5
 800cf0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf10:	3601      	adds	r6, #1
 800cf12:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf16:	6126      	str	r6, [r4, #16]
 800cf18:	4620      	mov	r0, r4
 800cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1e:	bf00      	nop
 800cf20:	0800fe3c 	.word	0x0800fe3c
 800cf24:	0800fecc 	.word	0x0800fecc

0800cf28 <__s2b>:
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	4615      	mov	r5, r2
 800cf30:	461f      	mov	r7, r3
 800cf32:	2209      	movs	r2, #9
 800cf34:	3308      	adds	r3, #8
 800cf36:	4606      	mov	r6, r0
 800cf38:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	2201      	movs	r2, #1
 800cf40:	429a      	cmp	r2, r3
 800cf42:	db09      	blt.n	800cf58 <__s2b+0x30>
 800cf44:	4630      	mov	r0, r6
 800cf46:	f7ff ff43 	bl	800cdd0 <_Balloc>
 800cf4a:	b940      	cbnz	r0, 800cf5e <__s2b+0x36>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	4b19      	ldr	r3, [pc, #100]	; (800cfb4 <__s2b+0x8c>)
 800cf50:	4819      	ldr	r0, [pc, #100]	; (800cfb8 <__s2b+0x90>)
 800cf52:	21ce      	movs	r1, #206	; 0xce
 800cf54:	f001 fa58 	bl	800e408 <__assert_func>
 800cf58:	0052      	lsls	r2, r2, #1
 800cf5a:	3101      	adds	r1, #1
 800cf5c:	e7f0      	b.n	800cf40 <__s2b+0x18>
 800cf5e:	9b08      	ldr	r3, [sp, #32]
 800cf60:	6143      	str	r3, [r0, #20]
 800cf62:	2d09      	cmp	r5, #9
 800cf64:	f04f 0301 	mov.w	r3, #1
 800cf68:	6103      	str	r3, [r0, #16]
 800cf6a:	dd16      	ble.n	800cf9a <__s2b+0x72>
 800cf6c:	f104 0909 	add.w	r9, r4, #9
 800cf70:	46c8      	mov	r8, r9
 800cf72:	442c      	add	r4, r5
 800cf74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf78:	4601      	mov	r1, r0
 800cf7a:	3b30      	subs	r3, #48	; 0x30
 800cf7c:	220a      	movs	r2, #10
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f7ff ff88 	bl	800ce94 <__multadd>
 800cf84:	45a0      	cmp	r8, r4
 800cf86:	d1f5      	bne.n	800cf74 <__s2b+0x4c>
 800cf88:	f1a5 0408 	sub.w	r4, r5, #8
 800cf8c:	444c      	add	r4, r9
 800cf8e:	1b2d      	subs	r5, r5, r4
 800cf90:	1963      	adds	r3, r4, r5
 800cf92:	42bb      	cmp	r3, r7
 800cf94:	db04      	blt.n	800cfa0 <__s2b+0x78>
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	340a      	adds	r4, #10
 800cf9c:	2509      	movs	r5, #9
 800cf9e:	e7f6      	b.n	800cf8e <__s2b+0x66>
 800cfa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	3b30      	subs	r3, #48	; 0x30
 800cfa8:	220a      	movs	r2, #10
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ff72 	bl	800ce94 <__multadd>
 800cfb0:	e7ee      	b.n	800cf90 <__s2b+0x68>
 800cfb2:	bf00      	nop
 800cfb4:	0800fe3c 	.word	0x0800fe3c
 800cfb8:	0800fecc 	.word	0x0800fecc

0800cfbc <__hi0bits>:
 800cfbc:	0c03      	lsrs	r3, r0, #16
 800cfbe:	041b      	lsls	r3, r3, #16
 800cfc0:	b9d3      	cbnz	r3, 800cff8 <__hi0bits+0x3c>
 800cfc2:	0400      	lsls	r0, r0, #16
 800cfc4:	2310      	movs	r3, #16
 800cfc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfca:	bf04      	itt	eq
 800cfcc:	0200      	lsleq	r0, r0, #8
 800cfce:	3308      	addeq	r3, #8
 800cfd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfd4:	bf04      	itt	eq
 800cfd6:	0100      	lsleq	r0, r0, #4
 800cfd8:	3304      	addeq	r3, #4
 800cfda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfde:	bf04      	itt	eq
 800cfe0:	0080      	lsleq	r0, r0, #2
 800cfe2:	3302      	addeq	r3, #2
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	db05      	blt.n	800cff4 <__hi0bits+0x38>
 800cfe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfec:	f103 0301 	add.w	r3, r3, #1
 800cff0:	bf08      	it	eq
 800cff2:	2320      	moveq	r3, #32
 800cff4:	4618      	mov	r0, r3
 800cff6:	4770      	bx	lr
 800cff8:	2300      	movs	r3, #0
 800cffa:	e7e4      	b.n	800cfc6 <__hi0bits+0xa>

0800cffc <__lo0bits>:
 800cffc:	6803      	ldr	r3, [r0, #0]
 800cffe:	f013 0207 	ands.w	r2, r3, #7
 800d002:	4601      	mov	r1, r0
 800d004:	d00b      	beq.n	800d01e <__lo0bits+0x22>
 800d006:	07da      	lsls	r2, r3, #31
 800d008:	d424      	bmi.n	800d054 <__lo0bits+0x58>
 800d00a:	0798      	lsls	r0, r3, #30
 800d00c:	bf49      	itett	mi
 800d00e:	085b      	lsrmi	r3, r3, #1
 800d010:	089b      	lsrpl	r3, r3, #2
 800d012:	2001      	movmi	r0, #1
 800d014:	600b      	strmi	r3, [r1, #0]
 800d016:	bf5c      	itt	pl
 800d018:	600b      	strpl	r3, [r1, #0]
 800d01a:	2002      	movpl	r0, #2
 800d01c:	4770      	bx	lr
 800d01e:	b298      	uxth	r0, r3
 800d020:	b9b0      	cbnz	r0, 800d050 <__lo0bits+0x54>
 800d022:	0c1b      	lsrs	r3, r3, #16
 800d024:	2010      	movs	r0, #16
 800d026:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d02a:	bf04      	itt	eq
 800d02c:	0a1b      	lsreq	r3, r3, #8
 800d02e:	3008      	addeq	r0, #8
 800d030:	071a      	lsls	r2, r3, #28
 800d032:	bf04      	itt	eq
 800d034:	091b      	lsreq	r3, r3, #4
 800d036:	3004      	addeq	r0, #4
 800d038:	079a      	lsls	r2, r3, #30
 800d03a:	bf04      	itt	eq
 800d03c:	089b      	lsreq	r3, r3, #2
 800d03e:	3002      	addeq	r0, #2
 800d040:	07da      	lsls	r2, r3, #31
 800d042:	d403      	bmi.n	800d04c <__lo0bits+0x50>
 800d044:	085b      	lsrs	r3, r3, #1
 800d046:	f100 0001 	add.w	r0, r0, #1
 800d04a:	d005      	beq.n	800d058 <__lo0bits+0x5c>
 800d04c:	600b      	str	r3, [r1, #0]
 800d04e:	4770      	bx	lr
 800d050:	4610      	mov	r0, r2
 800d052:	e7e8      	b.n	800d026 <__lo0bits+0x2a>
 800d054:	2000      	movs	r0, #0
 800d056:	4770      	bx	lr
 800d058:	2020      	movs	r0, #32
 800d05a:	4770      	bx	lr

0800d05c <__i2b>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	460c      	mov	r4, r1
 800d060:	2101      	movs	r1, #1
 800d062:	f7ff feb5 	bl	800cdd0 <_Balloc>
 800d066:	4602      	mov	r2, r0
 800d068:	b928      	cbnz	r0, 800d076 <__i2b+0x1a>
 800d06a:	4b05      	ldr	r3, [pc, #20]	; (800d080 <__i2b+0x24>)
 800d06c:	4805      	ldr	r0, [pc, #20]	; (800d084 <__i2b+0x28>)
 800d06e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d072:	f001 f9c9 	bl	800e408 <__assert_func>
 800d076:	2301      	movs	r3, #1
 800d078:	6144      	str	r4, [r0, #20]
 800d07a:	6103      	str	r3, [r0, #16]
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	bf00      	nop
 800d080:	0800fe3c 	.word	0x0800fe3c
 800d084:	0800fecc 	.word	0x0800fecc

0800d088 <__multiply>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	4614      	mov	r4, r2
 800d08e:	690a      	ldr	r2, [r1, #16]
 800d090:	6923      	ldr	r3, [r4, #16]
 800d092:	429a      	cmp	r2, r3
 800d094:	bfb8      	it	lt
 800d096:	460b      	movlt	r3, r1
 800d098:	460d      	mov	r5, r1
 800d09a:	bfbc      	itt	lt
 800d09c:	4625      	movlt	r5, r4
 800d09e:	461c      	movlt	r4, r3
 800d0a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d0a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d0a8:	68ab      	ldr	r3, [r5, #8]
 800d0aa:	6869      	ldr	r1, [r5, #4]
 800d0ac:	eb0a 0709 	add.w	r7, sl, r9
 800d0b0:	42bb      	cmp	r3, r7
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	bfb8      	it	lt
 800d0b6:	3101      	addlt	r1, #1
 800d0b8:	f7ff fe8a 	bl	800cdd0 <_Balloc>
 800d0bc:	b930      	cbnz	r0, 800d0cc <__multiply+0x44>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	4b42      	ldr	r3, [pc, #264]	; (800d1cc <__multiply+0x144>)
 800d0c2:	4843      	ldr	r0, [pc, #268]	; (800d1d0 <__multiply+0x148>)
 800d0c4:	f240 115d 	movw	r1, #349	; 0x15d
 800d0c8:	f001 f99e 	bl	800e408 <__assert_func>
 800d0cc:	f100 0614 	add.w	r6, r0, #20
 800d0d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d0d4:	4633      	mov	r3, r6
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	4543      	cmp	r3, r8
 800d0da:	d31e      	bcc.n	800d11a <__multiply+0x92>
 800d0dc:	f105 0c14 	add.w	ip, r5, #20
 800d0e0:	f104 0314 	add.w	r3, r4, #20
 800d0e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d0e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d0ec:	9202      	str	r2, [sp, #8]
 800d0ee:	ebac 0205 	sub.w	r2, ip, r5
 800d0f2:	3a15      	subs	r2, #21
 800d0f4:	f022 0203 	bic.w	r2, r2, #3
 800d0f8:	3204      	adds	r2, #4
 800d0fa:	f105 0115 	add.w	r1, r5, #21
 800d0fe:	458c      	cmp	ip, r1
 800d100:	bf38      	it	cc
 800d102:	2204      	movcc	r2, #4
 800d104:	9201      	str	r2, [sp, #4]
 800d106:	9a02      	ldr	r2, [sp, #8]
 800d108:	9303      	str	r3, [sp, #12]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d808      	bhi.n	800d120 <__multiply+0x98>
 800d10e:	2f00      	cmp	r7, #0
 800d110:	dc55      	bgt.n	800d1be <__multiply+0x136>
 800d112:	6107      	str	r7, [r0, #16]
 800d114:	b005      	add	sp, #20
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	f843 2b04 	str.w	r2, [r3], #4
 800d11e:	e7db      	b.n	800d0d8 <__multiply+0x50>
 800d120:	f8b3 a000 	ldrh.w	sl, [r3]
 800d124:	f1ba 0f00 	cmp.w	sl, #0
 800d128:	d020      	beq.n	800d16c <__multiply+0xe4>
 800d12a:	f105 0e14 	add.w	lr, r5, #20
 800d12e:	46b1      	mov	r9, r6
 800d130:	2200      	movs	r2, #0
 800d132:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d136:	f8d9 b000 	ldr.w	fp, [r9]
 800d13a:	b2a1      	uxth	r1, r4
 800d13c:	fa1f fb8b 	uxth.w	fp, fp
 800d140:	fb0a b101 	mla	r1, sl, r1, fp
 800d144:	4411      	add	r1, r2
 800d146:	f8d9 2000 	ldr.w	r2, [r9]
 800d14a:	0c24      	lsrs	r4, r4, #16
 800d14c:	0c12      	lsrs	r2, r2, #16
 800d14e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d152:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d156:	b289      	uxth	r1, r1
 800d158:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d15c:	45f4      	cmp	ip, lr
 800d15e:	f849 1b04 	str.w	r1, [r9], #4
 800d162:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d166:	d8e4      	bhi.n	800d132 <__multiply+0xaa>
 800d168:	9901      	ldr	r1, [sp, #4]
 800d16a:	5072      	str	r2, [r6, r1]
 800d16c:	9a03      	ldr	r2, [sp, #12]
 800d16e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d172:	3304      	adds	r3, #4
 800d174:	f1b9 0f00 	cmp.w	r9, #0
 800d178:	d01f      	beq.n	800d1ba <__multiply+0x132>
 800d17a:	6834      	ldr	r4, [r6, #0]
 800d17c:	f105 0114 	add.w	r1, r5, #20
 800d180:	46b6      	mov	lr, r6
 800d182:	f04f 0a00 	mov.w	sl, #0
 800d186:	880a      	ldrh	r2, [r1, #0]
 800d188:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d18c:	fb09 b202 	mla	r2, r9, r2, fp
 800d190:	4492      	add	sl, r2
 800d192:	b2a4      	uxth	r4, r4
 800d194:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d198:	f84e 4b04 	str.w	r4, [lr], #4
 800d19c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d1a0:	f8be 2000 	ldrh.w	r2, [lr]
 800d1a4:	0c24      	lsrs	r4, r4, #16
 800d1a6:	fb09 2404 	mla	r4, r9, r4, r2
 800d1aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d1ae:	458c      	cmp	ip, r1
 800d1b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d1b4:	d8e7      	bhi.n	800d186 <__multiply+0xfe>
 800d1b6:	9a01      	ldr	r2, [sp, #4]
 800d1b8:	50b4      	str	r4, [r6, r2]
 800d1ba:	3604      	adds	r6, #4
 800d1bc:	e7a3      	b.n	800d106 <__multiply+0x7e>
 800d1be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d1a5      	bne.n	800d112 <__multiply+0x8a>
 800d1c6:	3f01      	subs	r7, #1
 800d1c8:	e7a1      	b.n	800d10e <__multiply+0x86>
 800d1ca:	bf00      	nop
 800d1cc:	0800fe3c 	.word	0x0800fe3c
 800d1d0:	0800fecc 	.word	0x0800fecc

0800d1d4 <__pow5mult>:
 800d1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d8:	4615      	mov	r5, r2
 800d1da:	f012 0203 	ands.w	r2, r2, #3
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460f      	mov	r7, r1
 800d1e2:	d007      	beq.n	800d1f4 <__pow5mult+0x20>
 800d1e4:	4c25      	ldr	r4, [pc, #148]	; (800d27c <__pow5mult+0xa8>)
 800d1e6:	3a01      	subs	r2, #1
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1ee:	f7ff fe51 	bl	800ce94 <__multadd>
 800d1f2:	4607      	mov	r7, r0
 800d1f4:	10ad      	asrs	r5, r5, #2
 800d1f6:	d03d      	beq.n	800d274 <__pow5mult+0xa0>
 800d1f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1fa:	b97c      	cbnz	r4, 800d21c <__pow5mult+0x48>
 800d1fc:	2010      	movs	r0, #16
 800d1fe:	f7ff fdbf 	bl	800cd80 <malloc>
 800d202:	4602      	mov	r2, r0
 800d204:	6270      	str	r0, [r6, #36]	; 0x24
 800d206:	b928      	cbnz	r0, 800d214 <__pow5mult+0x40>
 800d208:	4b1d      	ldr	r3, [pc, #116]	; (800d280 <__pow5mult+0xac>)
 800d20a:	481e      	ldr	r0, [pc, #120]	; (800d284 <__pow5mult+0xb0>)
 800d20c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d210:	f001 f8fa 	bl	800e408 <__assert_func>
 800d214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d218:	6004      	str	r4, [r0, #0]
 800d21a:	60c4      	str	r4, [r0, #12]
 800d21c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d224:	b94c      	cbnz	r4, 800d23a <__pow5mult+0x66>
 800d226:	f240 2171 	movw	r1, #625	; 0x271
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7ff ff16 	bl	800d05c <__i2b>
 800d230:	2300      	movs	r3, #0
 800d232:	f8c8 0008 	str.w	r0, [r8, #8]
 800d236:	4604      	mov	r4, r0
 800d238:	6003      	str	r3, [r0, #0]
 800d23a:	f04f 0900 	mov.w	r9, #0
 800d23e:	07eb      	lsls	r3, r5, #31
 800d240:	d50a      	bpl.n	800d258 <__pow5mult+0x84>
 800d242:	4639      	mov	r1, r7
 800d244:	4622      	mov	r2, r4
 800d246:	4630      	mov	r0, r6
 800d248:	f7ff ff1e 	bl	800d088 <__multiply>
 800d24c:	4639      	mov	r1, r7
 800d24e:	4680      	mov	r8, r0
 800d250:	4630      	mov	r0, r6
 800d252:	f7ff fdfd 	bl	800ce50 <_Bfree>
 800d256:	4647      	mov	r7, r8
 800d258:	106d      	asrs	r5, r5, #1
 800d25a:	d00b      	beq.n	800d274 <__pow5mult+0xa0>
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	b938      	cbnz	r0, 800d270 <__pow5mult+0x9c>
 800d260:	4622      	mov	r2, r4
 800d262:	4621      	mov	r1, r4
 800d264:	4630      	mov	r0, r6
 800d266:	f7ff ff0f 	bl	800d088 <__multiply>
 800d26a:	6020      	str	r0, [r4, #0]
 800d26c:	f8c0 9000 	str.w	r9, [r0]
 800d270:	4604      	mov	r4, r0
 800d272:	e7e4      	b.n	800d23e <__pow5mult+0x6a>
 800d274:	4638      	mov	r0, r7
 800d276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d27a:	bf00      	nop
 800d27c:	08010020 	.word	0x08010020
 800d280:	0800fdc6 	.word	0x0800fdc6
 800d284:	0800fecc 	.word	0x0800fecc

0800d288 <__lshift>:
 800d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	460c      	mov	r4, r1
 800d28e:	6849      	ldr	r1, [r1, #4]
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d296:	68a3      	ldr	r3, [r4, #8]
 800d298:	4607      	mov	r7, r0
 800d29a:	4691      	mov	r9, r2
 800d29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2a0:	f108 0601 	add.w	r6, r8, #1
 800d2a4:	42b3      	cmp	r3, r6
 800d2a6:	db0b      	blt.n	800d2c0 <__lshift+0x38>
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f7ff fd91 	bl	800cdd0 <_Balloc>
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	b948      	cbnz	r0, 800d2c6 <__lshift+0x3e>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	4b28      	ldr	r3, [pc, #160]	; (800d358 <__lshift+0xd0>)
 800d2b6:	4829      	ldr	r0, [pc, #164]	; (800d35c <__lshift+0xd4>)
 800d2b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2bc:	f001 f8a4 	bl	800e408 <__assert_func>
 800d2c0:	3101      	adds	r1, #1
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	e7ee      	b.n	800d2a4 <__lshift+0x1c>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f100 0114 	add.w	r1, r0, #20
 800d2cc:	f100 0210 	add.w	r2, r0, #16
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	4553      	cmp	r3, sl
 800d2d4:	db33      	blt.n	800d33e <__lshift+0xb6>
 800d2d6:	6920      	ldr	r0, [r4, #16]
 800d2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2dc:	f104 0314 	add.w	r3, r4, #20
 800d2e0:	f019 091f 	ands.w	r9, r9, #31
 800d2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2ec:	d02b      	beq.n	800d346 <__lshift+0xbe>
 800d2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800d2f2:	468a      	mov	sl, r1
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800d2fc:	4302      	orrs	r2, r0
 800d2fe:	f84a 2b04 	str.w	r2, [sl], #4
 800d302:	f853 2b04 	ldr.w	r2, [r3], #4
 800d306:	459c      	cmp	ip, r3
 800d308:	fa22 f20e 	lsr.w	r2, r2, lr
 800d30c:	d8f3      	bhi.n	800d2f6 <__lshift+0x6e>
 800d30e:	ebac 0304 	sub.w	r3, ip, r4
 800d312:	3b15      	subs	r3, #21
 800d314:	f023 0303 	bic.w	r3, r3, #3
 800d318:	3304      	adds	r3, #4
 800d31a:	f104 0015 	add.w	r0, r4, #21
 800d31e:	4584      	cmp	ip, r0
 800d320:	bf38      	it	cc
 800d322:	2304      	movcc	r3, #4
 800d324:	50ca      	str	r2, [r1, r3]
 800d326:	b10a      	cbz	r2, 800d32c <__lshift+0xa4>
 800d328:	f108 0602 	add.w	r6, r8, #2
 800d32c:	3e01      	subs	r6, #1
 800d32e:	4638      	mov	r0, r7
 800d330:	612e      	str	r6, [r5, #16]
 800d332:	4621      	mov	r1, r4
 800d334:	f7ff fd8c 	bl	800ce50 <_Bfree>
 800d338:	4628      	mov	r0, r5
 800d33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d342:	3301      	adds	r3, #1
 800d344:	e7c5      	b.n	800d2d2 <__lshift+0x4a>
 800d346:	3904      	subs	r1, #4
 800d348:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d350:	459c      	cmp	ip, r3
 800d352:	d8f9      	bhi.n	800d348 <__lshift+0xc0>
 800d354:	e7ea      	b.n	800d32c <__lshift+0xa4>
 800d356:	bf00      	nop
 800d358:	0800fe3c 	.word	0x0800fe3c
 800d35c:	0800fecc 	.word	0x0800fecc

0800d360 <__mcmp>:
 800d360:	b530      	push	{r4, r5, lr}
 800d362:	6902      	ldr	r2, [r0, #16]
 800d364:	690c      	ldr	r4, [r1, #16]
 800d366:	1b12      	subs	r2, r2, r4
 800d368:	d10e      	bne.n	800d388 <__mcmp+0x28>
 800d36a:	f100 0314 	add.w	r3, r0, #20
 800d36e:	3114      	adds	r1, #20
 800d370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d37c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d380:	42a5      	cmp	r5, r4
 800d382:	d003      	beq.n	800d38c <__mcmp+0x2c>
 800d384:	d305      	bcc.n	800d392 <__mcmp+0x32>
 800d386:	2201      	movs	r2, #1
 800d388:	4610      	mov	r0, r2
 800d38a:	bd30      	pop	{r4, r5, pc}
 800d38c:	4283      	cmp	r3, r0
 800d38e:	d3f3      	bcc.n	800d378 <__mcmp+0x18>
 800d390:	e7fa      	b.n	800d388 <__mcmp+0x28>
 800d392:	f04f 32ff 	mov.w	r2, #4294967295
 800d396:	e7f7      	b.n	800d388 <__mcmp+0x28>

0800d398 <__mdiff>:
 800d398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	460c      	mov	r4, r1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4617      	mov	r7, r2
 800d3a6:	f7ff ffdb 	bl	800d360 <__mcmp>
 800d3aa:	1e05      	subs	r5, r0, #0
 800d3ac:	d110      	bne.n	800d3d0 <__mdiff+0x38>
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7ff fd0d 	bl	800cdd0 <_Balloc>
 800d3b6:	b930      	cbnz	r0, 800d3c6 <__mdiff+0x2e>
 800d3b8:	4b39      	ldr	r3, [pc, #228]	; (800d4a0 <__mdiff+0x108>)
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	f240 2132 	movw	r1, #562	; 0x232
 800d3c0:	4838      	ldr	r0, [pc, #224]	; (800d4a4 <__mdiff+0x10c>)
 800d3c2:	f001 f821 	bl	800e408 <__assert_func>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d0:	bfa4      	itt	ge
 800d3d2:	463b      	movge	r3, r7
 800d3d4:	4627      	movge	r7, r4
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	bfa6      	itte	ge
 800d3dc:	461c      	movge	r4, r3
 800d3de:	2500      	movge	r5, #0
 800d3e0:	2501      	movlt	r5, #1
 800d3e2:	f7ff fcf5 	bl	800cdd0 <_Balloc>
 800d3e6:	b920      	cbnz	r0, 800d3f2 <__mdiff+0x5a>
 800d3e8:	4b2d      	ldr	r3, [pc, #180]	; (800d4a0 <__mdiff+0x108>)
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3f0:	e7e6      	b.n	800d3c0 <__mdiff+0x28>
 800d3f2:	693e      	ldr	r6, [r7, #16]
 800d3f4:	60c5      	str	r5, [r0, #12]
 800d3f6:	6925      	ldr	r5, [r4, #16]
 800d3f8:	f107 0114 	add.w	r1, r7, #20
 800d3fc:	f104 0914 	add.w	r9, r4, #20
 800d400:	f100 0e14 	add.w	lr, r0, #20
 800d404:	f107 0210 	add.w	r2, r7, #16
 800d408:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d40c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d410:	46f2      	mov	sl, lr
 800d412:	2700      	movs	r7, #0
 800d414:	f859 3b04 	ldr.w	r3, [r9], #4
 800d418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d41c:	fa1f f883 	uxth.w	r8, r3
 800d420:	fa17 f78b 	uxtah	r7, r7, fp
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	eba7 0808 	sub.w	r8, r7, r8
 800d42a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d42e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d432:	fa1f f888 	uxth.w	r8, r8
 800d436:	141f      	asrs	r7, r3, #16
 800d438:	454d      	cmp	r5, r9
 800d43a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d43e:	f84a 3b04 	str.w	r3, [sl], #4
 800d442:	d8e7      	bhi.n	800d414 <__mdiff+0x7c>
 800d444:	1b2b      	subs	r3, r5, r4
 800d446:	3b15      	subs	r3, #21
 800d448:	f023 0303 	bic.w	r3, r3, #3
 800d44c:	3304      	adds	r3, #4
 800d44e:	3415      	adds	r4, #21
 800d450:	42a5      	cmp	r5, r4
 800d452:	bf38      	it	cc
 800d454:	2304      	movcc	r3, #4
 800d456:	4419      	add	r1, r3
 800d458:	4473      	add	r3, lr
 800d45a:	469e      	mov	lr, r3
 800d45c:	460d      	mov	r5, r1
 800d45e:	4565      	cmp	r5, ip
 800d460:	d30e      	bcc.n	800d480 <__mdiff+0xe8>
 800d462:	f10c 0203 	add.w	r2, ip, #3
 800d466:	1a52      	subs	r2, r2, r1
 800d468:	f022 0203 	bic.w	r2, r2, #3
 800d46c:	3903      	subs	r1, #3
 800d46e:	458c      	cmp	ip, r1
 800d470:	bf38      	it	cc
 800d472:	2200      	movcc	r2, #0
 800d474:	441a      	add	r2, r3
 800d476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d47a:	b17b      	cbz	r3, 800d49c <__mdiff+0x104>
 800d47c:	6106      	str	r6, [r0, #16]
 800d47e:	e7a5      	b.n	800d3cc <__mdiff+0x34>
 800d480:	f855 8b04 	ldr.w	r8, [r5], #4
 800d484:	fa17 f488 	uxtah	r4, r7, r8
 800d488:	1422      	asrs	r2, r4, #16
 800d48a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d48e:	b2a4      	uxth	r4, r4
 800d490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d494:	f84e 4b04 	str.w	r4, [lr], #4
 800d498:	1417      	asrs	r7, r2, #16
 800d49a:	e7e0      	b.n	800d45e <__mdiff+0xc6>
 800d49c:	3e01      	subs	r6, #1
 800d49e:	e7ea      	b.n	800d476 <__mdiff+0xde>
 800d4a0:	0800fe3c 	.word	0x0800fe3c
 800d4a4:	0800fecc 	.word	0x0800fecc

0800d4a8 <__ulp>:
 800d4a8:	b082      	sub	sp, #8
 800d4aa:	ed8d 0b00 	vstr	d0, [sp]
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	4912      	ldr	r1, [pc, #72]	; (800d4fc <__ulp+0x54>)
 800d4b2:	4019      	ands	r1, r3
 800d4b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d4b8:	2900      	cmp	r1, #0
 800d4ba:	dd05      	ble.n	800d4c8 <__ulp+0x20>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	ec43 2b10 	vmov	d0, r2, r3
 800d4c4:	b002      	add	sp, #8
 800d4c6:	4770      	bx	lr
 800d4c8:	4249      	negs	r1, r1
 800d4ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d4ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	f04f 0300 	mov.w	r3, #0
 800d4da:	da04      	bge.n	800d4e6 <__ulp+0x3e>
 800d4dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d4e0:	fa41 f300 	asr.w	r3, r1, r0
 800d4e4:	e7ec      	b.n	800d4c0 <__ulp+0x18>
 800d4e6:	f1a0 0114 	sub.w	r1, r0, #20
 800d4ea:	291e      	cmp	r1, #30
 800d4ec:	bfda      	itte	le
 800d4ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d4f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d4f6:	2101      	movgt	r1, #1
 800d4f8:	460a      	mov	r2, r1
 800d4fa:	e7e1      	b.n	800d4c0 <__ulp+0x18>
 800d4fc:	7ff00000 	.word	0x7ff00000

0800d500 <__b2d>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	6905      	ldr	r5, [r0, #16]
 800d504:	f100 0714 	add.w	r7, r0, #20
 800d508:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d50c:	1f2e      	subs	r6, r5, #4
 800d50e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d512:	4620      	mov	r0, r4
 800d514:	f7ff fd52 	bl	800cfbc <__hi0bits>
 800d518:	f1c0 0320 	rsb	r3, r0, #32
 800d51c:	280a      	cmp	r0, #10
 800d51e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d59c <__b2d+0x9c>
 800d522:	600b      	str	r3, [r1, #0]
 800d524:	dc14      	bgt.n	800d550 <__b2d+0x50>
 800d526:	f1c0 0e0b 	rsb	lr, r0, #11
 800d52a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d52e:	42b7      	cmp	r7, r6
 800d530:	ea41 030c 	orr.w	r3, r1, ip
 800d534:	bf34      	ite	cc
 800d536:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d53a:	2100      	movcs	r1, #0
 800d53c:	3015      	adds	r0, #21
 800d53e:	fa04 f000 	lsl.w	r0, r4, r0
 800d542:	fa21 f10e 	lsr.w	r1, r1, lr
 800d546:	ea40 0201 	orr.w	r2, r0, r1
 800d54a:	ec43 2b10 	vmov	d0, r2, r3
 800d54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d550:	42b7      	cmp	r7, r6
 800d552:	bf3a      	itte	cc
 800d554:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d558:	f1a5 0608 	subcc.w	r6, r5, #8
 800d55c:	2100      	movcs	r1, #0
 800d55e:	380b      	subs	r0, #11
 800d560:	d017      	beq.n	800d592 <__b2d+0x92>
 800d562:	f1c0 0c20 	rsb	ip, r0, #32
 800d566:	fa04 f500 	lsl.w	r5, r4, r0
 800d56a:	42be      	cmp	r6, r7
 800d56c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d570:	ea45 0504 	orr.w	r5, r5, r4
 800d574:	bf8c      	ite	hi
 800d576:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d57a:	2400      	movls	r4, #0
 800d57c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d580:	fa01 f000 	lsl.w	r0, r1, r0
 800d584:	fa24 f40c 	lsr.w	r4, r4, ip
 800d588:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d58c:	ea40 0204 	orr.w	r2, r0, r4
 800d590:	e7db      	b.n	800d54a <__b2d+0x4a>
 800d592:	ea44 030c 	orr.w	r3, r4, ip
 800d596:	460a      	mov	r2, r1
 800d598:	e7d7      	b.n	800d54a <__b2d+0x4a>
 800d59a:	bf00      	nop
 800d59c:	3ff00000 	.word	0x3ff00000

0800d5a0 <__d2b>:
 800d5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	4689      	mov	r9, r1
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	ec57 6b10 	vmov	r6, r7, d0
 800d5ac:	4690      	mov	r8, r2
 800d5ae:	f7ff fc0f 	bl	800cdd0 <_Balloc>
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	b930      	cbnz	r0, 800d5c4 <__d2b+0x24>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	4b25      	ldr	r3, [pc, #148]	; (800d650 <__d2b+0xb0>)
 800d5ba:	4826      	ldr	r0, [pc, #152]	; (800d654 <__d2b+0xb4>)
 800d5bc:	f240 310a 	movw	r1, #778	; 0x30a
 800d5c0:	f000 ff22 	bl	800e408 <__assert_func>
 800d5c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d5c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5cc:	bb35      	cbnz	r5, 800d61c <__d2b+0x7c>
 800d5ce:	2e00      	cmp	r6, #0
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	d028      	beq.n	800d626 <__d2b+0x86>
 800d5d4:	4668      	mov	r0, sp
 800d5d6:	9600      	str	r6, [sp, #0]
 800d5d8:	f7ff fd10 	bl	800cffc <__lo0bits>
 800d5dc:	9900      	ldr	r1, [sp, #0]
 800d5de:	b300      	cbz	r0, 800d622 <__d2b+0x82>
 800d5e0:	9a01      	ldr	r2, [sp, #4]
 800d5e2:	f1c0 0320 	rsb	r3, r0, #32
 800d5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ea:	430b      	orrs	r3, r1
 800d5ec:	40c2      	lsrs	r2, r0
 800d5ee:	6163      	str	r3, [r4, #20]
 800d5f0:	9201      	str	r2, [sp, #4]
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	61a3      	str	r3, [r4, #24]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	bf14      	ite	ne
 800d5fa:	2202      	movne	r2, #2
 800d5fc:	2201      	moveq	r2, #1
 800d5fe:	6122      	str	r2, [r4, #16]
 800d600:	b1d5      	cbz	r5, 800d638 <__d2b+0x98>
 800d602:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d606:	4405      	add	r5, r0
 800d608:	f8c9 5000 	str.w	r5, [r9]
 800d60c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d610:	f8c8 0000 	str.w	r0, [r8]
 800d614:	4620      	mov	r0, r4
 800d616:	b003      	add	sp, #12
 800d618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d620:	e7d5      	b.n	800d5ce <__d2b+0x2e>
 800d622:	6161      	str	r1, [r4, #20]
 800d624:	e7e5      	b.n	800d5f2 <__d2b+0x52>
 800d626:	a801      	add	r0, sp, #4
 800d628:	f7ff fce8 	bl	800cffc <__lo0bits>
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	6163      	str	r3, [r4, #20]
 800d630:	2201      	movs	r2, #1
 800d632:	6122      	str	r2, [r4, #16]
 800d634:	3020      	adds	r0, #32
 800d636:	e7e3      	b.n	800d600 <__d2b+0x60>
 800d638:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d63c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d640:	f8c9 0000 	str.w	r0, [r9]
 800d644:	6918      	ldr	r0, [r3, #16]
 800d646:	f7ff fcb9 	bl	800cfbc <__hi0bits>
 800d64a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d64e:	e7df      	b.n	800d610 <__d2b+0x70>
 800d650:	0800fe3c 	.word	0x0800fe3c
 800d654:	0800fecc 	.word	0x0800fecc

0800d658 <__ratio>:
 800d658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	468a      	mov	sl, r1
 800d65e:	4669      	mov	r1, sp
 800d660:	4683      	mov	fp, r0
 800d662:	f7ff ff4d 	bl	800d500 <__b2d>
 800d666:	a901      	add	r1, sp, #4
 800d668:	4650      	mov	r0, sl
 800d66a:	ec59 8b10 	vmov	r8, r9, d0
 800d66e:	ee10 6a10 	vmov	r6, s0
 800d672:	f7ff ff45 	bl	800d500 <__b2d>
 800d676:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d67a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800d67e:	eba3 0c02 	sub.w	ip, r3, r2
 800d682:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d686:	1a9b      	subs	r3, r3, r2
 800d688:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d68c:	ec55 4b10 	vmov	r4, r5, d0
 800d690:	2b00      	cmp	r3, #0
 800d692:	ee10 0a10 	vmov	r0, s0
 800d696:	bfce      	itee	gt
 800d698:	464a      	movgt	r2, r9
 800d69a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d69e:	462a      	movle	r2, r5
 800d6a0:	464f      	mov	r7, r9
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	bfcc      	ite	gt
 800d6a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6aa:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d6ae:	ec47 6b17 	vmov	d7, r6, r7
 800d6b2:	ec41 0b16 	vmov	d6, r0, r1
 800d6b6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800d6ba:	b003      	add	sp, #12
 800d6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6c0 <__copybits>:
 800d6c0:	3901      	subs	r1, #1
 800d6c2:	b570      	push	{r4, r5, r6, lr}
 800d6c4:	1149      	asrs	r1, r1, #5
 800d6c6:	6914      	ldr	r4, [r2, #16]
 800d6c8:	3101      	adds	r1, #1
 800d6ca:	f102 0314 	add.w	r3, r2, #20
 800d6ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6d6:	1f05      	subs	r5, r0, #4
 800d6d8:	42a3      	cmp	r3, r4
 800d6da:	d30c      	bcc.n	800d6f6 <__copybits+0x36>
 800d6dc:	1aa3      	subs	r3, r4, r2
 800d6de:	3b11      	subs	r3, #17
 800d6e0:	f023 0303 	bic.w	r3, r3, #3
 800d6e4:	3211      	adds	r2, #17
 800d6e6:	42a2      	cmp	r2, r4
 800d6e8:	bf88      	it	hi
 800d6ea:	2300      	movhi	r3, #0
 800d6ec:	4418      	add	r0, r3
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	4288      	cmp	r0, r1
 800d6f2:	d305      	bcc.n	800d700 <__copybits+0x40>
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d6fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800d6fe:	e7eb      	b.n	800d6d8 <__copybits+0x18>
 800d700:	f840 3b04 	str.w	r3, [r0], #4
 800d704:	e7f4      	b.n	800d6f0 <__copybits+0x30>

0800d706 <__any_on>:
 800d706:	f100 0214 	add.w	r2, r0, #20
 800d70a:	6900      	ldr	r0, [r0, #16]
 800d70c:	114b      	asrs	r3, r1, #5
 800d70e:	4298      	cmp	r0, r3
 800d710:	b510      	push	{r4, lr}
 800d712:	db11      	blt.n	800d738 <__any_on+0x32>
 800d714:	dd0a      	ble.n	800d72c <__any_on+0x26>
 800d716:	f011 011f 	ands.w	r1, r1, #31
 800d71a:	d007      	beq.n	800d72c <__any_on+0x26>
 800d71c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d720:	fa24 f001 	lsr.w	r0, r4, r1
 800d724:	fa00 f101 	lsl.w	r1, r0, r1
 800d728:	428c      	cmp	r4, r1
 800d72a:	d10b      	bne.n	800d744 <__any_on+0x3e>
 800d72c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d730:	4293      	cmp	r3, r2
 800d732:	d803      	bhi.n	800d73c <__any_on+0x36>
 800d734:	2000      	movs	r0, #0
 800d736:	bd10      	pop	{r4, pc}
 800d738:	4603      	mov	r3, r0
 800d73a:	e7f7      	b.n	800d72c <__any_on+0x26>
 800d73c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d740:	2900      	cmp	r1, #0
 800d742:	d0f5      	beq.n	800d730 <__any_on+0x2a>
 800d744:	2001      	movs	r0, #1
 800d746:	e7f6      	b.n	800d736 <__any_on+0x30>

0800d748 <_calloc_r>:
 800d748:	b513      	push	{r0, r1, r4, lr}
 800d74a:	434a      	muls	r2, r1
 800d74c:	4611      	mov	r1, r2
 800d74e:	9201      	str	r2, [sp, #4]
 800d750:	f000 f85a 	bl	800d808 <_malloc_r>
 800d754:	4604      	mov	r4, r0
 800d756:	b118      	cbz	r0, 800d760 <_calloc_r+0x18>
 800d758:	9a01      	ldr	r2, [sp, #4]
 800d75a:	2100      	movs	r1, #0
 800d75c:	f7fc fbca 	bl	8009ef4 <memset>
 800d760:	4620      	mov	r0, r4
 800d762:	b002      	add	sp, #8
 800d764:	bd10      	pop	{r4, pc}
	...

0800d768 <_free_r>:
 800d768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d76a:	2900      	cmp	r1, #0
 800d76c:	d048      	beq.n	800d800 <_free_r+0x98>
 800d76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d772:	9001      	str	r0, [sp, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	f1a1 0404 	sub.w	r4, r1, #4
 800d77a:	bfb8      	it	lt
 800d77c:	18e4      	addlt	r4, r4, r3
 800d77e:	f001 f847 	bl	800e810 <__malloc_lock>
 800d782:	4a20      	ldr	r2, [pc, #128]	; (800d804 <_free_r+0x9c>)
 800d784:	9801      	ldr	r0, [sp, #4]
 800d786:	6813      	ldr	r3, [r2, #0]
 800d788:	4615      	mov	r5, r2
 800d78a:	b933      	cbnz	r3, 800d79a <_free_r+0x32>
 800d78c:	6063      	str	r3, [r4, #4]
 800d78e:	6014      	str	r4, [r2, #0]
 800d790:	b003      	add	sp, #12
 800d792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d796:	f001 b841 	b.w	800e81c <__malloc_unlock>
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	d90b      	bls.n	800d7b6 <_free_r+0x4e>
 800d79e:	6821      	ldr	r1, [r4, #0]
 800d7a0:	1862      	adds	r2, r4, r1
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	bf04      	itt	eq
 800d7a6:	681a      	ldreq	r2, [r3, #0]
 800d7a8:	685b      	ldreq	r3, [r3, #4]
 800d7aa:	6063      	str	r3, [r4, #4]
 800d7ac:	bf04      	itt	eq
 800d7ae:	1852      	addeq	r2, r2, r1
 800d7b0:	6022      	streq	r2, [r4, #0]
 800d7b2:	602c      	str	r4, [r5, #0]
 800d7b4:	e7ec      	b.n	800d790 <_free_r+0x28>
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	b10b      	cbz	r3, 800d7c0 <_free_r+0x58>
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	d9fa      	bls.n	800d7b6 <_free_r+0x4e>
 800d7c0:	6811      	ldr	r1, [r2, #0]
 800d7c2:	1855      	adds	r5, r2, r1
 800d7c4:	42a5      	cmp	r5, r4
 800d7c6:	d10b      	bne.n	800d7e0 <_free_r+0x78>
 800d7c8:	6824      	ldr	r4, [r4, #0]
 800d7ca:	4421      	add	r1, r4
 800d7cc:	1854      	adds	r4, r2, r1
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	6011      	str	r1, [r2, #0]
 800d7d2:	d1dd      	bne.n	800d790 <_free_r+0x28>
 800d7d4:	681c      	ldr	r4, [r3, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	6053      	str	r3, [r2, #4]
 800d7da:	4421      	add	r1, r4
 800d7dc:	6011      	str	r1, [r2, #0]
 800d7de:	e7d7      	b.n	800d790 <_free_r+0x28>
 800d7e0:	d902      	bls.n	800d7e8 <_free_r+0x80>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	e7d3      	b.n	800d790 <_free_r+0x28>
 800d7e8:	6825      	ldr	r5, [r4, #0]
 800d7ea:	1961      	adds	r1, r4, r5
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf04      	itt	eq
 800d7f0:	6819      	ldreq	r1, [r3, #0]
 800d7f2:	685b      	ldreq	r3, [r3, #4]
 800d7f4:	6063      	str	r3, [r4, #4]
 800d7f6:	bf04      	itt	eq
 800d7f8:	1949      	addeq	r1, r1, r5
 800d7fa:	6021      	streq	r1, [r4, #0]
 800d7fc:	6054      	str	r4, [r2, #4]
 800d7fe:	e7c7      	b.n	800d790 <_free_r+0x28>
 800d800:	b003      	add	sp, #12
 800d802:	bd30      	pop	{r4, r5, pc}
 800d804:	20000354 	.word	0x20000354

0800d808 <_malloc_r>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	1ccd      	adds	r5, r1, #3
 800d80c:	f025 0503 	bic.w	r5, r5, #3
 800d810:	3508      	adds	r5, #8
 800d812:	2d0c      	cmp	r5, #12
 800d814:	bf38      	it	cc
 800d816:	250c      	movcc	r5, #12
 800d818:	2d00      	cmp	r5, #0
 800d81a:	4606      	mov	r6, r0
 800d81c:	db01      	blt.n	800d822 <_malloc_r+0x1a>
 800d81e:	42a9      	cmp	r1, r5
 800d820:	d903      	bls.n	800d82a <_malloc_r+0x22>
 800d822:	230c      	movs	r3, #12
 800d824:	6033      	str	r3, [r6, #0]
 800d826:	2000      	movs	r0, #0
 800d828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82a:	f000 fff1 	bl	800e810 <__malloc_lock>
 800d82e:	4921      	ldr	r1, [pc, #132]	; (800d8b4 <_malloc_r+0xac>)
 800d830:	680a      	ldr	r2, [r1, #0]
 800d832:	4614      	mov	r4, r2
 800d834:	b99c      	cbnz	r4, 800d85e <_malloc_r+0x56>
 800d836:	4f20      	ldr	r7, [pc, #128]	; (800d8b8 <_malloc_r+0xb0>)
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	b923      	cbnz	r3, 800d846 <_malloc_r+0x3e>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 fcd2 	bl	800e1e8 <_sbrk_r>
 800d844:	6038      	str	r0, [r7, #0]
 800d846:	4629      	mov	r1, r5
 800d848:	4630      	mov	r0, r6
 800d84a:	f000 fccd 	bl	800e1e8 <_sbrk_r>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	d123      	bne.n	800d89a <_malloc_r+0x92>
 800d852:	230c      	movs	r3, #12
 800d854:	6033      	str	r3, [r6, #0]
 800d856:	4630      	mov	r0, r6
 800d858:	f000 ffe0 	bl	800e81c <__malloc_unlock>
 800d85c:	e7e3      	b.n	800d826 <_malloc_r+0x1e>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	1b5b      	subs	r3, r3, r5
 800d862:	d417      	bmi.n	800d894 <_malloc_r+0x8c>
 800d864:	2b0b      	cmp	r3, #11
 800d866:	d903      	bls.n	800d870 <_malloc_r+0x68>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	441c      	add	r4, r3
 800d86c:	6025      	str	r5, [r4, #0]
 800d86e:	e004      	b.n	800d87a <_malloc_r+0x72>
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	42a2      	cmp	r2, r4
 800d874:	bf0c      	ite	eq
 800d876:	600b      	streq	r3, [r1, #0]
 800d878:	6053      	strne	r3, [r2, #4]
 800d87a:	4630      	mov	r0, r6
 800d87c:	f000 ffce 	bl	800e81c <__malloc_unlock>
 800d880:	f104 000b 	add.w	r0, r4, #11
 800d884:	1d23      	adds	r3, r4, #4
 800d886:	f020 0007 	bic.w	r0, r0, #7
 800d88a:	1ac2      	subs	r2, r0, r3
 800d88c:	d0cc      	beq.n	800d828 <_malloc_r+0x20>
 800d88e:	1a1b      	subs	r3, r3, r0
 800d890:	50a3      	str	r3, [r4, r2]
 800d892:	e7c9      	b.n	800d828 <_malloc_r+0x20>
 800d894:	4622      	mov	r2, r4
 800d896:	6864      	ldr	r4, [r4, #4]
 800d898:	e7cc      	b.n	800d834 <_malloc_r+0x2c>
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d0e3      	beq.n	800d86c <_malloc_r+0x64>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f000 fc9e 	bl	800e1e8 <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1dd      	bne.n	800d86c <_malloc_r+0x64>
 800d8b0:	e7cf      	b.n	800d852 <_malloc_r+0x4a>
 800d8b2:	bf00      	nop
 800d8b4:	20000354 	.word	0x20000354
 800d8b8:	20000358 	.word	0x20000358

0800d8bc <__ssputs_r>:
 800d8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	688e      	ldr	r6, [r1, #8]
 800d8c2:	429e      	cmp	r6, r3
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	4690      	mov	r8, r2
 800d8ca:	461f      	mov	r7, r3
 800d8cc:	d838      	bhi.n	800d940 <__ssputs_r+0x84>
 800d8ce:	898a      	ldrh	r2, [r1, #12]
 800d8d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8d4:	d032      	beq.n	800d93c <__ssputs_r+0x80>
 800d8d6:	6825      	ldr	r5, [r4, #0]
 800d8d8:	6909      	ldr	r1, [r1, #16]
 800d8da:	eba5 0901 	sub.w	r9, r5, r1
 800d8de:	6965      	ldr	r5, [r4, #20]
 800d8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	444b      	add	r3, r9
 800d8ec:	106d      	asrs	r5, r5, #1
 800d8ee:	429d      	cmp	r5, r3
 800d8f0:	bf38      	it	cc
 800d8f2:	461d      	movcc	r5, r3
 800d8f4:	0553      	lsls	r3, r2, #21
 800d8f6:	d531      	bpl.n	800d95c <__ssputs_r+0xa0>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7ff ff85 	bl	800d808 <_malloc_r>
 800d8fe:	4606      	mov	r6, r0
 800d900:	b950      	cbnz	r0, 800d918 <__ssputs_r+0x5c>
 800d902:	230c      	movs	r3, #12
 800d904:	f8ca 3000 	str.w	r3, [sl]
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d90e:	81a3      	strh	r3, [r4, #12]
 800d910:	f04f 30ff 	mov.w	r0, #4294967295
 800d914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d918:	6921      	ldr	r1, [r4, #16]
 800d91a:	464a      	mov	r2, r9
 800d91c:	f7ff fa4a 	bl	800cdb4 <memcpy>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	6126      	str	r6, [r4, #16]
 800d92e:	6165      	str	r5, [r4, #20]
 800d930:	444e      	add	r6, r9
 800d932:	eba5 0509 	sub.w	r5, r5, r9
 800d936:	6026      	str	r6, [r4, #0]
 800d938:	60a5      	str	r5, [r4, #8]
 800d93a:	463e      	mov	r6, r7
 800d93c:	42be      	cmp	r6, r7
 800d93e:	d900      	bls.n	800d942 <__ssputs_r+0x86>
 800d940:	463e      	mov	r6, r7
 800d942:	4632      	mov	r2, r6
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	4641      	mov	r1, r8
 800d948:	f000 ff48 	bl	800e7dc <memmove>
 800d94c:	68a3      	ldr	r3, [r4, #8]
 800d94e:	6822      	ldr	r2, [r4, #0]
 800d950:	1b9b      	subs	r3, r3, r6
 800d952:	4432      	add	r2, r6
 800d954:	60a3      	str	r3, [r4, #8]
 800d956:	6022      	str	r2, [r4, #0]
 800d958:	2000      	movs	r0, #0
 800d95a:	e7db      	b.n	800d914 <__ssputs_r+0x58>
 800d95c:	462a      	mov	r2, r5
 800d95e:	f000 ff63 	bl	800e828 <_realloc_r>
 800d962:	4606      	mov	r6, r0
 800d964:	2800      	cmp	r0, #0
 800d966:	d1e1      	bne.n	800d92c <__ssputs_r+0x70>
 800d968:	6921      	ldr	r1, [r4, #16]
 800d96a:	4650      	mov	r0, sl
 800d96c:	f7ff fefc 	bl	800d768 <_free_r>
 800d970:	e7c7      	b.n	800d902 <__ssputs_r+0x46>
	...

0800d974 <_svfiprintf_r>:
 800d974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d978:	4698      	mov	r8, r3
 800d97a:	898b      	ldrh	r3, [r1, #12]
 800d97c:	061b      	lsls	r3, r3, #24
 800d97e:	b09d      	sub	sp, #116	; 0x74
 800d980:	4607      	mov	r7, r0
 800d982:	460d      	mov	r5, r1
 800d984:	4614      	mov	r4, r2
 800d986:	d50e      	bpl.n	800d9a6 <_svfiprintf_r+0x32>
 800d988:	690b      	ldr	r3, [r1, #16]
 800d98a:	b963      	cbnz	r3, 800d9a6 <_svfiprintf_r+0x32>
 800d98c:	2140      	movs	r1, #64	; 0x40
 800d98e:	f7ff ff3b 	bl	800d808 <_malloc_r>
 800d992:	6028      	str	r0, [r5, #0]
 800d994:	6128      	str	r0, [r5, #16]
 800d996:	b920      	cbnz	r0, 800d9a2 <_svfiprintf_r+0x2e>
 800d998:	230c      	movs	r3, #12
 800d99a:	603b      	str	r3, [r7, #0]
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	e0d1      	b.n	800db46 <_svfiprintf_r+0x1d2>
 800d9a2:	2340      	movs	r3, #64	; 0x40
 800d9a4:	616b      	str	r3, [r5, #20]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9aa:	2320      	movs	r3, #32
 800d9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9b4:	2330      	movs	r3, #48	; 0x30
 800d9b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db60 <_svfiprintf_r+0x1ec>
 800d9ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9be:	f04f 0901 	mov.w	r9, #1
 800d9c2:	4623      	mov	r3, r4
 800d9c4:	469a      	mov	sl, r3
 800d9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ca:	b10a      	cbz	r2, 800d9d0 <_svfiprintf_r+0x5c>
 800d9cc:	2a25      	cmp	r2, #37	; 0x25
 800d9ce:	d1f9      	bne.n	800d9c4 <_svfiprintf_r+0x50>
 800d9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d9d4:	d00b      	beq.n	800d9ee <_svfiprintf_r+0x7a>
 800d9d6:	465b      	mov	r3, fp
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff ff6d 	bl	800d8bc <__ssputs_r>
 800d9e2:	3001      	adds	r0, #1
 800d9e4:	f000 80aa 	beq.w	800db3c <_svfiprintf_r+0x1c8>
 800d9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9ea:	445a      	add	r2, fp
 800d9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80a2 	beq.w	800db3c <_svfiprintf_r+0x1c8>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da02:	f10a 0a01 	add.w	sl, sl, #1
 800da06:	9304      	str	r3, [sp, #16]
 800da08:	9307      	str	r3, [sp, #28]
 800da0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da0e:	931a      	str	r3, [sp, #104]	; 0x68
 800da10:	4654      	mov	r4, sl
 800da12:	2205      	movs	r2, #5
 800da14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da18:	4851      	ldr	r0, [pc, #324]	; (800db60 <_svfiprintf_r+0x1ec>)
 800da1a:	f7f2 fc29 	bl	8000270 <memchr>
 800da1e:	9a04      	ldr	r2, [sp, #16]
 800da20:	b9d8      	cbnz	r0, 800da5a <_svfiprintf_r+0xe6>
 800da22:	06d0      	lsls	r0, r2, #27
 800da24:	bf44      	itt	mi
 800da26:	2320      	movmi	r3, #32
 800da28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da2c:	0711      	lsls	r1, r2, #28
 800da2e:	bf44      	itt	mi
 800da30:	232b      	movmi	r3, #43	; 0x2b
 800da32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da36:	f89a 3000 	ldrb.w	r3, [sl]
 800da3a:	2b2a      	cmp	r3, #42	; 0x2a
 800da3c:	d015      	beq.n	800da6a <_svfiprintf_r+0xf6>
 800da3e:	9a07      	ldr	r2, [sp, #28]
 800da40:	4654      	mov	r4, sl
 800da42:	2000      	movs	r0, #0
 800da44:	f04f 0c0a 	mov.w	ip, #10
 800da48:	4621      	mov	r1, r4
 800da4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da4e:	3b30      	subs	r3, #48	; 0x30
 800da50:	2b09      	cmp	r3, #9
 800da52:	d94e      	bls.n	800daf2 <_svfiprintf_r+0x17e>
 800da54:	b1b0      	cbz	r0, 800da84 <_svfiprintf_r+0x110>
 800da56:	9207      	str	r2, [sp, #28]
 800da58:	e014      	b.n	800da84 <_svfiprintf_r+0x110>
 800da5a:	eba0 0308 	sub.w	r3, r0, r8
 800da5e:	fa09 f303 	lsl.w	r3, r9, r3
 800da62:	4313      	orrs	r3, r2
 800da64:	9304      	str	r3, [sp, #16]
 800da66:	46a2      	mov	sl, r4
 800da68:	e7d2      	b.n	800da10 <_svfiprintf_r+0x9c>
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	1d19      	adds	r1, r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	9103      	str	r1, [sp, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	bfbb      	ittet	lt
 800da76:	425b      	neglt	r3, r3
 800da78:	f042 0202 	orrlt.w	r2, r2, #2
 800da7c:	9307      	strge	r3, [sp, #28]
 800da7e:	9307      	strlt	r3, [sp, #28]
 800da80:	bfb8      	it	lt
 800da82:	9204      	strlt	r2, [sp, #16]
 800da84:	7823      	ldrb	r3, [r4, #0]
 800da86:	2b2e      	cmp	r3, #46	; 0x2e
 800da88:	d10c      	bne.n	800daa4 <_svfiprintf_r+0x130>
 800da8a:	7863      	ldrb	r3, [r4, #1]
 800da8c:	2b2a      	cmp	r3, #42	; 0x2a
 800da8e:	d135      	bne.n	800dafc <_svfiprintf_r+0x188>
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	1d1a      	adds	r2, r3, #4
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	9203      	str	r2, [sp, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	bfb8      	it	lt
 800da9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800daa0:	3402      	adds	r4, #2
 800daa2:	9305      	str	r3, [sp, #20]
 800daa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db70 <_svfiprintf_r+0x1fc>
 800daa8:	7821      	ldrb	r1, [r4, #0]
 800daaa:	2203      	movs	r2, #3
 800daac:	4650      	mov	r0, sl
 800daae:	f7f2 fbdf 	bl	8000270 <memchr>
 800dab2:	b140      	cbz	r0, 800dac6 <_svfiprintf_r+0x152>
 800dab4:	2340      	movs	r3, #64	; 0x40
 800dab6:	eba0 000a 	sub.w	r0, r0, sl
 800daba:	fa03 f000 	lsl.w	r0, r3, r0
 800dabe:	9b04      	ldr	r3, [sp, #16]
 800dac0:	4303      	orrs	r3, r0
 800dac2:	3401      	adds	r4, #1
 800dac4:	9304      	str	r3, [sp, #16]
 800dac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daca:	4826      	ldr	r0, [pc, #152]	; (800db64 <_svfiprintf_r+0x1f0>)
 800dacc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dad0:	2206      	movs	r2, #6
 800dad2:	f7f2 fbcd 	bl	8000270 <memchr>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d038      	beq.n	800db4c <_svfiprintf_r+0x1d8>
 800dada:	4b23      	ldr	r3, [pc, #140]	; (800db68 <_svfiprintf_r+0x1f4>)
 800dadc:	bb1b      	cbnz	r3, 800db26 <_svfiprintf_r+0x1b2>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	3307      	adds	r3, #7
 800dae2:	f023 0307 	bic.w	r3, r3, #7
 800dae6:	3308      	adds	r3, #8
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daec:	4433      	add	r3, r6
 800daee:	9309      	str	r3, [sp, #36]	; 0x24
 800daf0:	e767      	b.n	800d9c2 <_svfiprintf_r+0x4e>
 800daf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800daf6:	460c      	mov	r4, r1
 800daf8:	2001      	movs	r0, #1
 800dafa:	e7a5      	b.n	800da48 <_svfiprintf_r+0xd4>
 800dafc:	2300      	movs	r3, #0
 800dafe:	3401      	adds	r4, #1
 800db00:	9305      	str	r3, [sp, #20]
 800db02:	4619      	mov	r1, r3
 800db04:	f04f 0c0a 	mov.w	ip, #10
 800db08:	4620      	mov	r0, r4
 800db0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db0e:	3a30      	subs	r2, #48	; 0x30
 800db10:	2a09      	cmp	r2, #9
 800db12:	d903      	bls.n	800db1c <_svfiprintf_r+0x1a8>
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0c5      	beq.n	800daa4 <_svfiprintf_r+0x130>
 800db18:	9105      	str	r1, [sp, #20]
 800db1a:	e7c3      	b.n	800daa4 <_svfiprintf_r+0x130>
 800db1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800db20:	4604      	mov	r4, r0
 800db22:	2301      	movs	r3, #1
 800db24:	e7f0      	b.n	800db08 <_svfiprintf_r+0x194>
 800db26:	ab03      	add	r3, sp, #12
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	462a      	mov	r2, r5
 800db2c:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <_svfiprintf_r+0x1f8>)
 800db2e:	a904      	add	r1, sp, #16
 800db30:	4638      	mov	r0, r7
 800db32:	f7fc fa79 	bl	800a028 <_printf_float>
 800db36:	1c42      	adds	r2, r0, #1
 800db38:	4606      	mov	r6, r0
 800db3a:	d1d6      	bne.n	800daea <_svfiprintf_r+0x176>
 800db3c:	89ab      	ldrh	r3, [r5, #12]
 800db3e:	065b      	lsls	r3, r3, #25
 800db40:	f53f af2c 	bmi.w	800d99c <_svfiprintf_r+0x28>
 800db44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db46:	b01d      	add	sp, #116	; 0x74
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	ab03      	add	r3, sp, #12
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	462a      	mov	r2, r5
 800db52:	4b06      	ldr	r3, [pc, #24]	; (800db6c <_svfiprintf_r+0x1f8>)
 800db54:	a904      	add	r1, sp, #16
 800db56:	4638      	mov	r0, r7
 800db58:	f7fc fcf2 	bl	800a540 <_printf_i>
 800db5c:	e7eb      	b.n	800db36 <_svfiprintf_r+0x1c2>
 800db5e:	bf00      	nop
 800db60:	0801002c 	.word	0x0801002c
 800db64:	08010036 	.word	0x08010036
 800db68:	0800a029 	.word	0x0800a029
 800db6c:	0800d8bd 	.word	0x0800d8bd
 800db70:	08010032 	.word	0x08010032

0800db74 <_sungetc_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	1c4b      	adds	r3, r1, #1
 800db78:	4614      	mov	r4, r2
 800db7a:	d103      	bne.n	800db84 <_sungetc_r+0x10>
 800db7c:	f04f 35ff 	mov.w	r5, #4294967295
 800db80:	4628      	mov	r0, r5
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	8993      	ldrh	r3, [r2, #12]
 800db86:	f023 0320 	bic.w	r3, r3, #32
 800db8a:	8193      	strh	r3, [r2, #12]
 800db8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db8e:	6852      	ldr	r2, [r2, #4]
 800db90:	b2cd      	uxtb	r5, r1
 800db92:	b18b      	cbz	r3, 800dbb8 <_sungetc_r+0x44>
 800db94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800db96:	4293      	cmp	r3, r2
 800db98:	dd08      	ble.n	800dbac <_sungetc_r+0x38>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	1e5a      	subs	r2, r3, #1
 800db9e:	6022      	str	r2, [r4, #0]
 800dba0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dba4:	6863      	ldr	r3, [r4, #4]
 800dba6:	3301      	adds	r3, #1
 800dba8:	6063      	str	r3, [r4, #4]
 800dbaa:	e7e9      	b.n	800db80 <_sungetc_r+0xc>
 800dbac:	4621      	mov	r1, r4
 800dbae:	f000 fbe3 	bl	800e378 <__submore>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d0f1      	beq.n	800db9a <_sungetc_r+0x26>
 800dbb6:	e7e1      	b.n	800db7c <_sungetc_r+0x8>
 800dbb8:	6921      	ldr	r1, [r4, #16]
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	b151      	cbz	r1, 800dbd4 <_sungetc_r+0x60>
 800dbbe:	4299      	cmp	r1, r3
 800dbc0:	d208      	bcs.n	800dbd4 <_sungetc_r+0x60>
 800dbc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dbc6:	42a9      	cmp	r1, r5
 800dbc8:	d104      	bne.n	800dbd4 <_sungetc_r+0x60>
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	3201      	adds	r2, #1
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	6062      	str	r2, [r4, #4]
 800dbd2:	e7d5      	b.n	800db80 <_sungetc_r+0xc>
 800dbd4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dbd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbdc:	6363      	str	r3, [r4, #52]	; 0x34
 800dbde:	2303      	movs	r3, #3
 800dbe0:	63a3      	str	r3, [r4, #56]	; 0x38
 800dbe2:	4623      	mov	r3, r4
 800dbe4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	2301      	movs	r3, #1
 800dbec:	e7dc      	b.n	800dba8 <_sungetc_r+0x34>

0800dbee <__ssrefill_r>:
 800dbee:	b510      	push	{r4, lr}
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dbf4:	b169      	cbz	r1, 800dc12 <__ssrefill_r+0x24>
 800dbf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbfa:	4299      	cmp	r1, r3
 800dbfc:	d001      	beq.n	800dc02 <__ssrefill_r+0x14>
 800dbfe:	f7ff fdb3 	bl	800d768 <_free_r>
 800dc02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc04:	6063      	str	r3, [r4, #4]
 800dc06:	2000      	movs	r0, #0
 800dc08:	6360      	str	r0, [r4, #52]	; 0x34
 800dc0a:	b113      	cbz	r3, 800dc12 <__ssrefill_r+0x24>
 800dc0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	bd10      	pop	{r4, pc}
 800dc12:	6923      	ldr	r3, [r4, #16]
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	2300      	movs	r3, #0
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	f043 0320 	orr.w	r3, r3, #32
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295
 800dc26:	e7f3      	b.n	800dc10 <__ssrefill_r+0x22>

0800dc28 <__ssvfiscanf_r>:
 800dc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800dc32:	2100      	movs	r1, #0
 800dc34:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dc38:	49b2      	ldr	r1, [pc, #712]	; (800df04 <__ssvfiscanf_r+0x2dc>)
 800dc3a:	91a0      	str	r1, [sp, #640]	; 0x280
 800dc3c:	f10d 0804 	add.w	r8, sp, #4
 800dc40:	49b1      	ldr	r1, [pc, #708]	; (800df08 <__ssvfiscanf_r+0x2e0>)
 800dc42:	4fb2      	ldr	r7, [pc, #712]	; (800df0c <__ssvfiscanf_r+0x2e4>)
 800dc44:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800df10 <__ssvfiscanf_r+0x2e8>
 800dc48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	91a1      	str	r1, [sp, #644]	; 0x284
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	f892 a000 	ldrb.w	sl, [r2]
 800dc56:	f1ba 0f00 	cmp.w	sl, #0
 800dc5a:	f000 8151 	beq.w	800df00 <__ssvfiscanf_r+0x2d8>
 800dc5e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800dc62:	f013 0308 	ands.w	r3, r3, #8
 800dc66:	f102 0501 	add.w	r5, r2, #1
 800dc6a:	d019      	beq.n	800dca0 <__ssvfiscanf_r+0x78>
 800dc6c:	6863      	ldr	r3, [r4, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dd0f      	ble.n	800dc92 <__ssvfiscanf_r+0x6a>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	5cba      	ldrb	r2, [r7, r2]
 800dc78:	0712      	lsls	r2, r2, #28
 800dc7a:	d401      	bmi.n	800dc80 <__ssvfiscanf_r+0x58>
 800dc7c:	462a      	mov	r2, r5
 800dc7e:	e7e8      	b.n	800dc52 <__ssvfiscanf_r+0x2a>
 800dc80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dc82:	3201      	adds	r2, #1
 800dc84:	9245      	str	r2, [sp, #276]	; 0x114
 800dc86:	6862      	ldr	r2, [r4, #4]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	3a01      	subs	r2, #1
 800dc8c:	6062      	str	r2, [r4, #4]
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	e7ec      	b.n	800dc6c <__ssvfiscanf_r+0x44>
 800dc92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dc94:	4621      	mov	r1, r4
 800dc96:	4630      	mov	r0, r6
 800dc98:	4798      	blx	r3
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d0e9      	beq.n	800dc72 <__ssvfiscanf_r+0x4a>
 800dc9e:	e7ed      	b.n	800dc7c <__ssvfiscanf_r+0x54>
 800dca0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800dca4:	f040 8083 	bne.w	800ddae <__ssvfiscanf_r+0x186>
 800dca8:	9341      	str	r3, [sp, #260]	; 0x104
 800dcaa:	9343      	str	r3, [sp, #268]	; 0x10c
 800dcac:	7853      	ldrb	r3, [r2, #1]
 800dcae:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb0:	bf02      	ittt	eq
 800dcb2:	2310      	moveq	r3, #16
 800dcb4:	1c95      	addeq	r5, r2, #2
 800dcb6:	9341      	streq	r3, [sp, #260]	; 0x104
 800dcb8:	220a      	movs	r2, #10
 800dcba:	46ab      	mov	fp, r5
 800dcbc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800dcc0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800dcc4:	2b09      	cmp	r3, #9
 800dcc6:	d91d      	bls.n	800dd04 <__ssvfiscanf_r+0xdc>
 800dcc8:	4891      	ldr	r0, [pc, #580]	; (800df10 <__ssvfiscanf_r+0x2e8>)
 800dcca:	2203      	movs	r2, #3
 800dccc:	f7f2 fad0 	bl	8000270 <memchr>
 800dcd0:	b140      	cbz	r0, 800dce4 <__ssvfiscanf_r+0xbc>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	eba0 0009 	sub.w	r0, r0, r9
 800dcd8:	fa03 f000 	lsl.w	r0, r3, r0
 800dcdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dcde:	4318      	orrs	r0, r3
 800dce0:	9041      	str	r0, [sp, #260]	; 0x104
 800dce2:	465d      	mov	r5, fp
 800dce4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dce8:	2b78      	cmp	r3, #120	; 0x78
 800dcea:	d806      	bhi.n	800dcfa <__ssvfiscanf_r+0xd2>
 800dcec:	2b57      	cmp	r3, #87	; 0x57
 800dcee:	d810      	bhi.n	800dd12 <__ssvfiscanf_r+0xea>
 800dcf0:	2b25      	cmp	r3, #37	; 0x25
 800dcf2:	d05c      	beq.n	800ddae <__ssvfiscanf_r+0x186>
 800dcf4:	d856      	bhi.n	800dda4 <__ssvfiscanf_r+0x17c>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d074      	beq.n	800dde4 <__ssvfiscanf_r+0x1bc>
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	9347      	str	r3, [sp, #284]	; 0x11c
 800dcfe:	230a      	movs	r3, #10
 800dd00:	9342      	str	r3, [sp, #264]	; 0x108
 800dd02:	e081      	b.n	800de08 <__ssvfiscanf_r+0x1e0>
 800dd04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dd06:	fb02 1303 	mla	r3, r2, r3, r1
 800dd0a:	3b30      	subs	r3, #48	; 0x30
 800dd0c:	9343      	str	r3, [sp, #268]	; 0x10c
 800dd0e:	465d      	mov	r5, fp
 800dd10:	e7d3      	b.n	800dcba <__ssvfiscanf_r+0x92>
 800dd12:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dd16:	2a20      	cmp	r2, #32
 800dd18:	d8ef      	bhi.n	800dcfa <__ssvfiscanf_r+0xd2>
 800dd1a:	a101      	add	r1, pc, #4	; (adr r1, 800dd20 <__ssvfiscanf_r+0xf8>)
 800dd1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd20:	0800ddf3 	.word	0x0800ddf3
 800dd24:	0800dcfb 	.word	0x0800dcfb
 800dd28:	0800dcfb 	.word	0x0800dcfb
 800dd2c:	0800de51 	.word	0x0800de51
 800dd30:	0800dcfb 	.word	0x0800dcfb
 800dd34:	0800dcfb 	.word	0x0800dcfb
 800dd38:	0800dcfb 	.word	0x0800dcfb
 800dd3c:	0800dcfb 	.word	0x0800dcfb
 800dd40:	0800dcfb 	.word	0x0800dcfb
 800dd44:	0800dcfb 	.word	0x0800dcfb
 800dd48:	0800dcfb 	.word	0x0800dcfb
 800dd4c:	0800de67 	.word	0x0800de67
 800dd50:	0800de3d 	.word	0x0800de3d
 800dd54:	0800ddab 	.word	0x0800ddab
 800dd58:	0800ddab 	.word	0x0800ddab
 800dd5c:	0800ddab 	.word	0x0800ddab
 800dd60:	0800dcfb 	.word	0x0800dcfb
 800dd64:	0800de41 	.word	0x0800de41
 800dd68:	0800dcfb 	.word	0x0800dcfb
 800dd6c:	0800dcfb 	.word	0x0800dcfb
 800dd70:	0800dcfb 	.word	0x0800dcfb
 800dd74:	0800dcfb 	.word	0x0800dcfb
 800dd78:	0800de77 	.word	0x0800de77
 800dd7c:	0800de49 	.word	0x0800de49
 800dd80:	0800ddeb 	.word	0x0800ddeb
 800dd84:	0800dcfb 	.word	0x0800dcfb
 800dd88:	0800dcfb 	.word	0x0800dcfb
 800dd8c:	0800de73 	.word	0x0800de73
 800dd90:	0800dcfb 	.word	0x0800dcfb
 800dd94:	0800de3d 	.word	0x0800de3d
 800dd98:	0800dcfb 	.word	0x0800dcfb
 800dd9c:	0800dcfb 	.word	0x0800dcfb
 800dda0:	0800ddf3 	.word	0x0800ddf3
 800dda4:	3b45      	subs	r3, #69	; 0x45
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d8a7      	bhi.n	800dcfa <__ssvfiscanf_r+0xd2>
 800ddaa:	2305      	movs	r3, #5
 800ddac:	e02b      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800ddae:	6863      	ldr	r3, [r4, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dd0d      	ble.n	800ddd0 <__ssvfiscanf_r+0x1a8>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	781a      	ldrb	r2, [r3, #0]
 800ddb8:	4552      	cmp	r2, sl
 800ddba:	f040 80a1 	bne.w	800df00 <__ssvfiscanf_r+0x2d8>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	6862      	ldr	r2, [r4, #4]
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ddc6:	3a01      	subs	r2, #1
 800ddc8:	3301      	adds	r3, #1
 800ddca:	6062      	str	r2, [r4, #4]
 800ddcc:	9345      	str	r3, [sp, #276]	; 0x114
 800ddce:	e755      	b.n	800dc7c <__ssvfiscanf_r+0x54>
 800ddd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	4798      	blx	r3
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d0eb      	beq.n	800ddb4 <__ssvfiscanf_r+0x18c>
 800dddc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f040 8084 	bne.w	800deec <__ssvfiscanf_r+0x2c4>
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	e086      	b.n	800def8 <__ssvfiscanf_r+0x2d0>
 800ddea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ddec:	f042 0220 	orr.w	r2, r2, #32
 800ddf0:	9241      	str	r2, [sp, #260]	; 0x104
 800ddf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ddf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddf8:	9241      	str	r2, [sp, #260]	; 0x104
 800ddfa:	2210      	movs	r2, #16
 800ddfc:	2b6f      	cmp	r3, #111	; 0x6f
 800ddfe:	9242      	str	r2, [sp, #264]	; 0x108
 800de00:	bf34      	ite	cc
 800de02:	2303      	movcc	r3, #3
 800de04:	2304      	movcs	r3, #4
 800de06:	9347      	str	r3, [sp, #284]	; 0x11c
 800de08:	6863      	ldr	r3, [r4, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dd41      	ble.n	800de92 <__ssvfiscanf_r+0x26a>
 800de0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800de10:	0659      	lsls	r1, r3, #25
 800de12:	d404      	bmi.n	800de1e <__ssvfiscanf_r+0x1f6>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	5cba      	ldrb	r2, [r7, r2]
 800de1a:	0712      	lsls	r2, r2, #28
 800de1c:	d440      	bmi.n	800dea0 <__ssvfiscanf_r+0x278>
 800de1e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800de20:	2b02      	cmp	r3, #2
 800de22:	dc4f      	bgt.n	800dec4 <__ssvfiscanf_r+0x29c>
 800de24:	466b      	mov	r3, sp
 800de26:	4622      	mov	r2, r4
 800de28:	a941      	add	r1, sp, #260	; 0x104
 800de2a:	4630      	mov	r0, r6
 800de2c:	f000 f874 	bl	800df18 <_scanf_chars>
 800de30:	2801      	cmp	r0, #1
 800de32:	d065      	beq.n	800df00 <__ssvfiscanf_r+0x2d8>
 800de34:	2802      	cmp	r0, #2
 800de36:	f47f af21 	bne.w	800dc7c <__ssvfiscanf_r+0x54>
 800de3a:	e7cf      	b.n	800dddc <__ssvfiscanf_r+0x1b4>
 800de3c:	220a      	movs	r2, #10
 800de3e:	e7dd      	b.n	800ddfc <__ssvfiscanf_r+0x1d4>
 800de40:	2300      	movs	r3, #0
 800de42:	9342      	str	r3, [sp, #264]	; 0x108
 800de44:	2303      	movs	r3, #3
 800de46:	e7de      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800de48:	2308      	movs	r3, #8
 800de4a:	9342      	str	r3, [sp, #264]	; 0x108
 800de4c:	2304      	movs	r3, #4
 800de4e:	e7da      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800de50:	4629      	mov	r1, r5
 800de52:	4640      	mov	r0, r8
 800de54:	f000 f9d8 	bl	800e208 <__sccl>
 800de58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800de5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de5e:	9341      	str	r3, [sp, #260]	; 0x104
 800de60:	4605      	mov	r5, r0
 800de62:	2301      	movs	r3, #1
 800de64:	e7cf      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800de66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800de68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6c:	9341      	str	r3, [sp, #260]	; 0x104
 800de6e:	2300      	movs	r3, #0
 800de70:	e7c9      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800de72:	2302      	movs	r3, #2
 800de74:	e7c7      	b.n	800de06 <__ssvfiscanf_r+0x1de>
 800de76:	9841      	ldr	r0, [sp, #260]	; 0x104
 800de78:	06c3      	lsls	r3, r0, #27
 800de7a:	f53f aeff 	bmi.w	800dc7c <__ssvfiscanf_r+0x54>
 800de7e:	9b00      	ldr	r3, [sp, #0]
 800de80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800de82:	1d19      	adds	r1, r3, #4
 800de84:	9100      	str	r1, [sp, #0]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	07c0      	lsls	r0, r0, #31
 800de8a:	bf4c      	ite	mi
 800de8c:	801a      	strhmi	r2, [r3, #0]
 800de8e:	601a      	strpl	r2, [r3, #0]
 800de90:	e6f4      	b.n	800dc7c <__ssvfiscanf_r+0x54>
 800de92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800de94:	4621      	mov	r1, r4
 800de96:	4630      	mov	r0, r6
 800de98:	4798      	blx	r3
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d0b7      	beq.n	800de0e <__ssvfiscanf_r+0x1e6>
 800de9e:	e79d      	b.n	800dddc <__ssvfiscanf_r+0x1b4>
 800dea0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dea2:	3201      	adds	r2, #1
 800dea4:	9245      	str	r2, [sp, #276]	; 0x114
 800dea6:	6862      	ldr	r2, [r4, #4]
 800dea8:	3a01      	subs	r2, #1
 800deaa:	2a00      	cmp	r2, #0
 800deac:	6062      	str	r2, [r4, #4]
 800deae:	dd02      	ble.n	800deb6 <__ssvfiscanf_r+0x28e>
 800deb0:	3301      	adds	r3, #1
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	e7ae      	b.n	800de14 <__ssvfiscanf_r+0x1ec>
 800deb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800deb8:	4621      	mov	r1, r4
 800deba:	4630      	mov	r0, r6
 800debc:	4798      	blx	r3
 800debe:	2800      	cmp	r0, #0
 800dec0:	d0a8      	beq.n	800de14 <__ssvfiscanf_r+0x1ec>
 800dec2:	e78b      	b.n	800dddc <__ssvfiscanf_r+0x1b4>
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	dc06      	bgt.n	800ded6 <__ssvfiscanf_r+0x2ae>
 800dec8:	466b      	mov	r3, sp
 800deca:	4622      	mov	r2, r4
 800decc:	a941      	add	r1, sp, #260	; 0x104
 800dece:	4630      	mov	r0, r6
 800ded0:	f000 f87a 	bl	800dfc8 <_scanf_i>
 800ded4:	e7ac      	b.n	800de30 <__ssvfiscanf_r+0x208>
 800ded6:	4b0f      	ldr	r3, [pc, #60]	; (800df14 <__ssvfiscanf_r+0x2ec>)
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f43f aecf 	beq.w	800dc7c <__ssvfiscanf_r+0x54>
 800dede:	466b      	mov	r3, sp
 800dee0:	4622      	mov	r2, r4
 800dee2:	a941      	add	r1, sp, #260	; 0x104
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7fc fc51 	bl	800a78c <_scanf_float>
 800deea:	e7a1      	b.n	800de30 <__ssvfiscanf_r+0x208>
 800deec:	89a3      	ldrh	r3, [r4, #12]
 800deee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800def2:	bf18      	it	ne
 800def4:	f04f 30ff 	movne.w	r0, #4294967295
 800def8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800defc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df00:	9844      	ldr	r0, [sp, #272]	; 0x110
 800df02:	e7f9      	b.n	800def8 <__ssvfiscanf_r+0x2d0>
 800df04:	0800db75 	.word	0x0800db75
 800df08:	0800dbef 	.word	0x0800dbef
 800df0c:	0800fcb9 	.word	0x0800fcb9
 800df10:	08010032 	.word	0x08010032
 800df14:	0800a78d 	.word	0x0800a78d

0800df18 <_scanf_chars>:
 800df18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df1c:	4615      	mov	r5, r2
 800df1e:	688a      	ldr	r2, [r1, #8]
 800df20:	4680      	mov	r8, r0
 800df22:	460c      	mov	r4, r1
 800df24:	b932      	cbnz	r2, 800df34 <_scanf_chars+0x1c>
 800df26:	698a      	ldr	r2, [r1, #24]
 800df28:	2a00      	cmp	r2, #0
 800df2a:	bf0c      	ite	eq
 800df2c:	2201      	moveq	r2, #1
 800df2e:	f04f 32ff 	movne.w	r2, #4294967295
 800df32:	608a      	str	r2, [r1, #8]
 800df34:	6822      	ldr	r2, [r4, #0]
 800df36:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800dfc4 <_scanf_chars+0xac>
 800df3a:	06d1      	lsls	r1, r2, #27
 800df3c:	bf5f      	itttt	pl
 800df3e:	681a      	ldrpl	r2, [r3, #0]
 800df40:	1d11      	addpl	r1, r2, #4
 800df42:	6019      	strpl	r1, [r3, #0]
 800df44:	6816      	ldrpl	r6, [r2, #0]
 800df46:	2700      	movs	r7, #0
 800df48:	69a0      	ldr	r0, [r4, #24]
 800df4a:	b188      	cbz	r0, 800df70 <_scanf_chars+0x58>
 800df4c:	2801      	cmp	r0, #1
 800df4e:	d107      	bne.n	800df60 <_scanf_chars+0x48>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	6963      	ldr	r3, [r4, #20]
 800df56:	5c9b      	ldrb	r3, [r3, r2]
 800df58:	b953      	cbnz	r3, 800df70 <_scanf_chars+0x58>
 800df5a:	bb27      	cbnz	r7, 800dfa6 <_scanf_chars+0x8e>
 800df5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df60:	2802      	cmp	r0, #2
 800df62:	d120      	bne.n	800dfa6 <_scanf_chars+0x8e>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	f813 3009 	ldrb.w	r3, [r3, r9]
 800df6c:	071b      	lsls	r3, r3, #28
 800df6e:	d41a      	bmi.n	800dfa6 <_scanf_chars+0x8e>
 800df70:	6823      	ldr	r3, [r4, #0]
 800df72:	06da      	lsls	r2, r3, #27
 800df74:	bf5e      	ittt	pl
 800df76:	682b      	ldrpl	r3, [r5, #0]
 800df78:	781b      	ldrbpl	r3, [r3, #0]
 800df7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800df7e:	682a      	ldr	r2, [r5, #0]
 800df80:	686b      	ldr	r3, [r5, #4]
 800df82:	3201      	adds	r2, #1
 800df84:	602a      	str	r2, [r5, #0]
 800df86:	68a2      	ldr	r2, [r4, #8]
 800df88:	3b01      	subs	r3, #1
 800df8a:	3a01      	subs	r2, #1
 800df8c:	606b      	str	r3, [r5, #4]
 800df8e:	3701      	adds	r7, #1
 800df90:	60a2      	str	r2, [r4, #8]
 800df92:	b142      	cbz	r2, 800dfa6 <_scanf_chars+0x8e>
 800df94:	2b00      	cmp	r3, #0
 800df96:	dcd7      	bgt.n	800df48 <_scanf_chars+0x30>
 800df98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df9c:	4629      	mov	r1, r5
 800df9e:	4640      	mov	r0, r8
 800dfa0:	4798      	blx	r3
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0d0      	beq.n	800df48 <_scanf_chars+0x30>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	f013 0310 	ands.w	r3, r3, #16
 800dfac:	d105      	bne.n	800dfba <_scanf_chars+0xa2>
 800dfae:	68e2      	ldr	r2, [r4, #12]
 800dfb0:	3201      	adds	r2, #1
 800dfb2:	60e2      	str	r2, [r4, #12]
 800dfb4:	69a2      	ldr	r2, [r4, #24]
 800dfb6:	b102      	cbz	r2, 800dfba <_scanf_chars+0xa2>
 800dfb8:	7033      	strb	r3, [r6, #0]
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	441f      	add	r7, r3
 800dfbe:	6127      	str	r7, [r4, #16]
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7cb      	b.n	800df5c <_scanf_chars+0x44>
 800dfc4:	0800fcb9 	.word	0x0800fcb9

0800dfc8 <_scanf_i>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	4698      	mov	r8, r3
 800dfce:	4b74      	ldr	r3, [pc, #464]	; (800e1a0 <_scanf_i+0x1d8>)
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	4682      	mov	sl, r0
 800dfd4:	4616      	mov	r6, r2
 800dfd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	ab03      	add	r3, sp, #12
 800dfde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dfe2:	4b70      	ldr	r3, [pc, #448]	; (800e1a4 <_scanf_i+0x1dc>)
 800dfe4:	69a1      	ldr	r1, [r4, #24]
 800dfe6:	4a70      	ldr	r2, [pc, #448]	; (800e1a8 <_scanf_i+0x1e0>)
 800dfe8:	2903      	cmp	r1, #3
 800dfea:	bf18      	it	ne
 800dfec:	461a      	movne	r2, r3
 800dfee:	68a3      	ldr	r3, [r4, #8]
 800dff0:	9201      	str	r2, [sp, #4]
 800dff2:	1e5a      	subs	r2, r3, #1
 800dff4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dff8:	bf88      	it	hi
 800dffa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dffe:	4627      	mov	r7, r4
 800e000:	bf82      	ittt	hi
 800e002:	eb03 0905 	addhi.w	r9, r3, r5
 800e006:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e00a:	60a3      	strhi	r3, [r4, #8]
 800e00c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e010:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e014:	bf98      	it	ls
 800e016:	f04f 0900 	movls.w	r9, #0
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	463d      	mov	r5, r7
 800e01e:	f04f 0b00 	mov.w	fp, #0
 800e022:	6831      	ldr	r1, [r6, #0]
 800e024:	ab03      	add	r3, sp, #12
 800e026:	7809      	ldrb	r1, [r1, #0]
 800e028:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e02c:	2202      	movs	r2, #2
 800e02e:	f7f2 f91f 	bl	8000270 <memchr>
 800e032:	b328      	cbz	r0, 800e080 <_scanf_i+0xb8>
 800e034:	f1bb 0f01 	cmp.w	fp, #1
 800e038:	d159      	bne.n	800e0ee <_scanf_i+0x126>
 800e03a:	6862      	ldr	r2, [r4, #4]
 800e03c:	b92a      	cbnz	r2, 800e04a <_scanf_i+0x82>
 800e03e:	6822      	ldr	r2, [r4, #0]
 800e040:	2308      	movs	r3, #8
 800e042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e046:	6063      	str	r3, [r4, #4]
 800e048:	6022      	str	r2, [r4, #0]
 800e04a:	6822      	ldr	r2, [r4, #0]
 800e04c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e050:	6022      	str	r2, [r4, #0]
 800e052:	68a2      	ldr	r2, [r4, #8]
 800e054:	1e51      	subs	r1, r2, #1
 800e056:	60a1      	str	r1, [r4, #8]
 800e058:	b192      	cbz	r2, 800e080 <_scanf_i+0xb8>
 800e05a:	6832      	ldr	r2, [r6, #0]
 800e05c:	1c51      	adds	r1, r2, #1
 800e05e:	6031      	str	r1, [r6, #0]
 800e060:	7812      	ldrb	r2, [r2, #0]
 800e062:	f805 2b01 	strb.w	r2, [r5], #1
 800e066:	6872      	ldr	r2, [r6, #4]
 800e068:	3a01      	subs	r2, #1
 800e06a:	2a00      	cmp	r2, #0
 800e06c:	6072      	str	r2, [r6, #4]
 800e06e:	dc07      	bgt.n	800e080 <_scanf_i+0xb8>
 800e070:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e074:	4631      	mov	r1, r6
 800e076:	4650      	mov	r0, sl
 800e078:	4790      	blx	r2
 800e07a:	2800      	cmp	r0, #0
 800e07c:	f040 8085 	bne.w	800e18a <_scanf_i+0x1c2>
 800e080:	f10b 0b01 	add.w	fp, fp, #1
 800e084:	f1bb 0f03 	cmp.w	fp, #3
 800e088:	d1cb      	bne.n	800e022 <_scanf_i+0x5a>
 800e08a:	6863      	ldr	r3, [r4, #4]
 800e08c:	b90b      	cbnz	r3, 800e092 <_scanf_i+0xca>
 800e08e:	230a      	movs	r3, #10
 800e090:	6063      	str	r3, [r4, #4]
 800e092:	6863      	ldr	r3, [r4, #4]
 800e094:	4945      	ldr	r1, [pc, #276]	; (800e1ac <_scanf_i+0x1e4>)
 800e096:	6960      	ldr	r0, [r4, #20]
 800e098:	1ac9      	subs	r1, r1, r3
 800e09a:	f000 f8b5 	bl	800e208 <__sccl>
 800e09e:	f04f 0b00 	mov.w	fp, #0
 800e0a2:	68a3      	ldr	r3, [r4, #8]
 800e0a4:	6822      	ldr	r2, [r4, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d03d      	beq.n	800e126 <_scanf_i+0x15e>
 800e0aa:	6831      	ldr	r1, [r6, #0]
 800e0ac:	6960      	ldr	r0, [r4, #20]
 800e0ae:	f891 c000 	ldrb.w	ip, [r1]
 800e0b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d035      	beq.n	800e126 <_scanf_i+0x15e>
 800e0ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e0be:	d124      	bne.n	800e10a <_scanf_i+0x142>
 800e0c0:	0510      	lsls	r0, r2, #20
 800e0c2:	d522      	bpl.n	800e10a <_scanf_i+0x142>
 800e0c4:	f10b 0b01 	add.w	fp, fp, #1
 800e0c8:	f1b9 0f00 	cmp.w	r9, #0
 800e0cc:	d003      	beq.n	800e0d6 <_scanf_i+0x10e>
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0d4:	60a3      	str	r3, [r4, #8]
 800e0d6:	6873      	ldr	r3, [r6, #4]
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	6073      	str	r3, [r6, #4]
 800e0de:	dd1b      	ble.n	800e118 <_scanf_i+0x150>
 800e0e0:	6833      	ldr	r3, [r6, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	6033      	str	r3, [r6, #0]
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	60a3      	str	r3, [r4, #8]
 800e0ec:	e7d9      	b.n	800e0a2 <_scanf_i+0xda>
 800e0ee:	f1bb 0f02 	cmp.w	fp, #2
 800e0f2:	d1ae      	bne.n	800e052 <_scanf_i+0x8a>
 800e0f4:	6822      	ldr	r2, [r4, #0]
 800e0f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e0fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e0fe:	d1bf      	bne.n	800e080 <_scanf_i+0xb8>
 800e100:	2310      	movs	r3, #16
 800e102:	6063      	str	r3, [r4, #4]
 800e104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e108:	e7a2      	b.n	800e050 <_scanf_i+0x88>
 800e10a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e10e:	6022      	str	r2, [r4, #0]
 800e110:	780b      	ldrb	r3, [r1, #0]
 800e112:	f805 3b01 	strb.w	r3, [r5], #1
 800e116:	e7de      	b.n	800e0d6 <_scanf_i+0x10e>
 800e118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e11c:	4631      	mov	r1, r6
 800e11e:	4650      	mov	r0, sl
 800e120:	4798      	blx	r3
 800e122:	2800      	cmp	r0, #0
 800e124:	d0df      	beq.n	800e0e6 <_scanf_i+0x11e>
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	05d9      	lsls	r1, r3, #23
 800e12a:	d50d      	bpl.n	800e148 <_scanf_i+0x180>
 800e12c:	42bd      	cmp	r5, r7
 800e12e:	d909      	bls.n	800e144 <_scanf_i+0x17c>
 800e130:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e138:	4632      	mov	r2, r6
 800e13a:	4650      	mov	r0, sl
 800e13c:	4798      	blx	r3
 800e13e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e142:	464d      	mov	r5, r9
 800e144:	42bd      	cmp	r5, r7
 800e146:	d028      	beq.n	800e19a <_scanf_i+0x1d2>
 800e148:	6822      	ldr	r2, [r4, #0]
 800e14a:	f012 0210 	ands.w	r2, r2, #16
 800e14e:	d113      	bne.n	800e178 <_scanf_i+0x1b0>
 800e150:	702a      	strb	r2, [r5, #0]
 800e152:	6863      	ldr	r3, [r4, #4]
 800e154:	9e01      	ldr	r6, [sp, #4]
 800e156:	4639      	mov	r1, r7
 800e158:	4650      	mov	r0, sl
 800e15a:	47b0      	blx	r6
 800e15c:	f8d8 3000 	ldr.w	r3, [r8]
 800e160:	6821      	ldr	r1, [r4, #0]
 800e162:	1d1a      	adds	r2, r3, #4
 800e164:	f8c8 2000 	str.w	r2, [r8]
 800e168:	f011 0f20 	tst.w	r1, #32
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	d00f      	beq.n	800e190 <_scanf_i+0x1c8>
 800e170:	6018      	str	r0, [r3, #0]
 800e172:	68e3      	ldr	r3, [r4, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	60e3      	str	r3, [r4, #12]
 800e178:	1bed      	subs	r5, r5, r7
 800e17a:	44ab      	add	fp, r5
 800e17c:	6925      	ldr	r5, [r4, #16]
 800e17e:	445d      	add	r5, fp
 800e180:	6125      	str	r5, [r4, #16]
 800e182:	2000      	movs	r0, #0
 800e184:	b007      	add	sp, #28
 800e186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18a:	f04f 0b00 	mov.w	fp, #0
 800e18e:	e7ca      	b.n	800e126 <_scanf_i+0x15e>
 800e190:	07ca      	lsls	r2, r1, #31
 800e192:	bf4c      	ite	mi
 800e194:	8018      	strhmi	r0, [r3, #0]
 800e196:	6018      	strpl	r0, [r3, #0]
 800e198:	e7eb      	b.n	800e172 <_scanf_i+0x1aa>
 800e19a:	2001      	movs	r0, #1
 800e19c:	e7f2      	b.n	800e184 <_scanf_i+0x1bc>
 800e19e:	bf00      	nop
 800e1a0:	0800fc08 	.word	0x0800fc08
 800e1a4:	0800e375 	.word	0x0800e375
 800e1a8:	0800ba11 	.word	0x0800ba11
 800e1ac:	08010056 	.word	0x08010056

0800e1b0 <_read_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d07      	ldr	r5, [pc, #28]	; (800e1d0 <_read_r+0x20>)
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	4608      	mov	r0, r1
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	602a      	str	r2, [r5, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f7f5 f972 	bl	80034a8 <_read>
 800e1c4:	1c43      	adds	r3, r0, #1
 800e1c6:	d102      	bne.n	800e1ce <_read_r+0x1e>
 800e1c8:	682b      	ldr	r3, [r5, #0]
 800e1ca:	b103      	cbz	r3, 800e1ce <_read_r+0x1e>
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	bd38      	pop	{r3, r4, r5, pc}
 800e1d0:	20018910 	.word	0x20018910
 800e1d4:	00000000 	.word	0x00000000

0800e1d8 <nan>:
 800e1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1e0 <nan+0x8>
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	00000000 	.word	0x00000000
 800e1e4:	7ff80000 	.word	0x7ff80000

0800e1e8 <_sbrk_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4d06      	ldr	r5, [pc, #24]	; (800e204 <_sbrk_r+0x1c>)
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	602b      	str	r3, [r5, #0]
 800e1f4:	f7f5 f9c6 	bl	8003584 <_sbrk>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d102      	bne.n	800e202 <_sbrk_r+0x1a>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	b103      	cbz	r3, 800e202 <_sbrk_r+0x1a>
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	20018910 	.word	0x20018910

0800e208 <__sccl>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	780b      	ldrb	r3, [r1, #0]
 800e20c:	4604      	mov	r4, r0
 800e20e:	2b5e      	cmp	r3, #94	; 0x5e
 800e210:	bf0b      	itete	eq
 800e212:	784b      	ldrbeq	r3, [r1, #1]
 800e214:	1c48      	addne	r0, r1, #1
 800e216:	1c88      	addeq	r0, r1, #2
 800e218:	2200      	movne	r2, #0
 800e21a:	bf08      	it	eq
 800e21c:	2201      	moveq	r2, #1
 800e21e:	1e61      	subs	r1, r4, #1
 800e220:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e224:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e228:	42a9      	cmp	r1, r5
 800e22a:	d1fb      	bne.n	800e224 <__sccl+0x1c>
 800e22c:	b90b      	cbnz	r3, 800e232 <__sccl+0x2a>
 800e22e:	3801      	subs	r0, #1
 800e230:	bd70      	pop	{r4, r5, r6, pc}
 800e232:	f082 0101 	eor.w	r1, r2, #1
 800e236:	54e1      	strb	r1, [r4, r3]
 800e238:	1c42      	adds	r2, r0, #1
 800e23a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800e23e:	2d2d      	cmp	r5, #45	; 0x2d
 800e240:	f102 36ff 	add.w	r6, r2, #4294967295
 800e244:	4610      	mov	r0, r2
 800e246:	d006      	beq.n	800e256 <__sccl+0x4e>
 800e248:	2d5d      	cmp	r5, #93	; 0x5d
 800e24a:	d0f1      	beq.n	800e230 <__sccl+0x28>
 800e24c:	b90d      	cbnz	r5, 800e252 <__sccl+0x4a>
 800e24e:	4630      	mov	r0, r6
 800e250:	e7ee      	b.n	800e230 <__sccl+0x28>
 800e252:	462b      	mov	r3, r5
 800e254:	e7ef      	b.n	800e236 <__sccl+0x2e>
 800e256:	7816      	ldrb	r6, [r2, #0]
 800e258:	2e5d      	cmp	r6, #93	; 0x5d
 800e25a:	d0fa      	beq.n	800e252 <__sccl+0x4a>
 800e25c:	42b3      	cmp	r3, r6
 800e25e:	dcf8      	bgt.n	800e252 <__sccl+0x4a>
 800e260:	4618      	mov	r0, r3
 800e262:	3001      	adds	r0, #1
 800e264:	4286      	cmp	r6, r0
 800e266:	5421      	strb	r1, [r4, r0]
 800e268:	dcfb      	bgt.n	800e262 <__sccl+0x5a>
 800e26a:	43d8      	mvns	r0, r3
 800e26c:	4430      	add	r0, r6
 800e26e:	1c5d      	adds	r5, r3, #1
 800e270:	42b3      	cmp	r3, r6
 800e272:	bfa8      	it	ge
 800e274:	2000      	movge	r0, #0
 800e276:	182b      	adds	r3, r5, r0
 800e278:	3202      	adds	r2, #2
 800e27a:	e7de      	b.n	800e23a <__sccl+0x32>

0800e27c <_strtoul_l.isra.0>:
 800e27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e280:	4e3b      	ldr	r6, [pc, #236]	; (800e370 <_strtoul_l.isra.0+0xf4>)
 800e282:	4686      	mov	lr, r0
 800e284:	468c      	mov	ip, r1
 800e286:	4660      	mov	r0, ip
 800e288:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e28c:	5da5      	ldrb	r5, [r4, r6]
 800e28e:	f015 0508 	ands.w	r5, r5, #8
 800e292:	d1f8      	bne.n	800e286 <_strtoul_l.isra.0+0xa>
 800e294:	2c2d      	cmp	r4, #45	; 0x2d
 800e296:	d134      	bne.n	800e302 <_strtoul_l.isra.0+0x86>
 800e298:	f89c 4000 	ldrb.w	r4, [ip]
 800e29c:	f04f 0801 	mov.w	r8, #1
 800e2a0:	f100 0c02 	add.w	ip, r0, #2
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d05e      	beq.n	800e366 <_strtoul_l.isra.0+0xea>
 800e2a8:	2b10      	cmp	r3, #16
 800e2aa:	d10c      	bne.n	800e2c6 <_strtoul_l.isra.0+0x4a>
 800e2ac:	2c30      	cmp	r4, #48	; 0x30
 800e2ae:	d10a      	bne.n	800e2c6 <_strtoul_l.isra.0+0x4a>
 800e2b0:	f89c 0000 	ldrb.w	r0, [ip]
 800e2b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e2b8:	2858      	cmp	r0, #88	; 0x58
 800e2ba:	d14f      	bne.n	800e35c <_strtoul_l.isra.0+0xe0>
 800e2bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e2c0:	2310      	movs	r3, #16
 800e2c2:	f10c 0c02 	add.w	ip, ip, #2
 800e2c6:	f04f 37ff 	mov.w	r7, #4294967295
 800e2ca:	2500      	movs	r5, #0
 800e2cc:	fbb7 f7f3 	udiv	r7, r7, r3
 800e2d0:	fb03 f907 	mul.w	r9, r3, r7
 800e2d4:	ea6f 0909 	mvn.w	r9, r9
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e2de:	2e09      	cmp	r6, #9
 800e2e0:	d818      	bhi.n	800e314 <_strtoul_l.isra.0+0x98>
 800e2e2:	4634      	mov	r4, r6
 800e2e4:	42a3      	cmp	r3, r4
 800e2e6:	dd24      	ble.n	800e332 <_strtoul_l.isra.0+0xb6>
 800e2e8:	2d00      	cmp	r5, #0
 800e2ea:	db1f      	blt.n	800e32c <_strtoul_l.isra.0+0xb0>
 800e2ec:	4287      	cmp	r7, r0
 800e2ee:	d31d      	bcc.n	800e32c <_strtoul_l.isra.0+0xb0>
 800e2f0:	d101      	bne.n	800e2f6 <_strtoul_l.isra.0+0x7a>
 800e2f2:	45a1      	cmp	r9, r4
 800e2f4:	db1a      	blt.n	800e32c <_strtoul_l.isra.0+0xb0>
 800e2f6:	fb00 4003 	mla	r0, r0, r3, r4
 800e2fa:	2501      	movs	r5, #1
 800e2fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e300:	e7eb      	b.n	800e2da <_strtoul_l.isra.0+0x5e>
 800e302:	2c2b      	cmp	r4, #43	; 0x2b
 800e304:	bf08      	it	eq
 800e306:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e30a:	46a8      	mov	r8, r5
 800e30c:	bf08      	it	eq
 800e30e:	f100 0c02 	addeq.w	ip, r0, #2
 800e312:	e7c7      	b.n	800e2a4 <_strtoul_l.isra.0+0x28>
 800e314:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e318:	2e19      	cmp	r6, #25
 800e31a:	d801      	bhi.n	800e320 <_strtoul_l.isra.0+0xa4>
 800e31c:	3c37      	subs	r4, #55	; 0x37
 800e31e:	e7e1      	b.n	800e2e4 <_strtoul_l.isra.0+0x68>
 800e320:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e324:	2e19      	cmp	r6, #25
 800e326:	d804      	bhi.n	800e332 <_strtoul_l.isra.0+0xb6>
 800e328:	3c57      	subs	r4, #87	; 0x57
 800e32a:	e7db      	b.n	800e2e4 <_strtoul_l.isra.0+0x68>
 800e32c:	f04f 35ff 	mov.w	r5, #4294967295
 800e330:	e7e4      	b.n	800e2fc <_strtoul_l.isra.0+0x80>
 800e332:	2d00      	cmp	r5, #0
 800e334:	da07      	bge.n	800e346 <_strtoul_l.isra.0+0xca>
 800e336:	2322      	movs	r3, #34	; 0x22
 800e338:	f8ce 3000 	str.w	r3, [lr]
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	b942      	cbnz	r2, 800e354 <_strtoul_l.isra.0+0xd8>
 800e342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e346:	f1b8 0f00 	cmp.w	r8, #0
 800e34a:	d000      	beq.n	800e34e <_strtoul_l.isra.0+0xd2>
 800e34c:	4240      	negs	r0, r0
 800e34e:	2a00      	cmp	r2, #0
 800e350:	d0f7      	beq.n	800e342 <_strtoul_l.isra.0+0xc6>
 800e352:	b10d      	cbz	r5, 800e358 <_strtoul_l.isra.0+0xdc>
 800e354:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e358:	6011      	str	r1, [r2, #0]
 800e35a:	e7f2      	b.n	800e342 <_strtoul_l.isra.0+0xc6>
 800e35c:	2430      	movs	r4, #48	; 0x30
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1b1      	bne.n	800e2c6 <_strtoul_l.isra.0+0x4a>
 800e362:	2308      	movs	r3, #8
 800e364:	e7af      	b.n	800e2c6 <_strtoul_l.isra.0+0x4a>
 800e366:	2c30      	cmp	r4, #48	; 0x30
 800e368:	d0a2      	beq.n	800e2b0 <_strtoul_l.isra.0+0x34>
 800e36a:	230a      	movs	r3, #10
 800e36c:	e7ab      	b.n	800e2c6 <_strtoul_l.isra.0+0x4a>
 800e36e:	bf00      	nop
 800e370:	0800fcb9 	.word	0x0800fcb9

0800e374 <_strtoul_r>:
 800e374:	f7ff bf82 	b.w	800e27c <_strtoul_l.isra.0>

0800e378 <__submore>:
 800e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37c:	460c      	mov	r4, r1
 800e37e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e384:	4299      	cmp	r1, r3
 800e386:	d11d      	bne.n	800e3c4 <__submore+0x4c>
 800e388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e38c:	f7ff fa3c 	bl	800d808 <_malloc_r>
 800e390:	b918      	cbnz	r0, 800e39a <__submore+0x22>
 800e392:	f04f 30ff 	mov.w	r0, #4294967295
 800e396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e3a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e3a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e3a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e3aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e3ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e3b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e3b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e3ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e3be:	6020      	str	r0, [r4, #0]
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e7e8      	b.n	800e396 <__submore+0x1e>
 800e3c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e3c6:	0077      	lsls	r7, r6, #1
 800e3c8:	463a      	mov	r2, r7
 800e3ca:	f000 fa2d 	bl	800e828 <_realloc_r>
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d0de      	beq.n	800e392 <__submore+0x1a>
 800e3d4:	eb00 0806 	add.w	r8, r0, r6
 800e3d8:	4601      	mov	r1, r0
 800e3da:	4632      	mov	r2, r6
 800e3dc:	4640      	mov	r0, r8
 800e3de:	f7fe fce9 	bl	800cdb4 <memcpy>
 800e3e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e3e6:	f8c4 8000 	str.w	r8, [r4]
 800e3ea:	e7e9      	b.n	800e3c0 <__submore+0x48>

0800e3ec <__ascii_wctomb>:
 800e3ec:	b149      	cbz	r1, 800e402 <__ascii_wctomb+0x16>
 800e3ee:	2aff      	cmp	r2, #255	; 0xff
 800e3f0:	bf85      	ittet	hi
 800e3f2:	238a      	movhi	r3, #138	; 0x8a
 800e3f4:	6003      	strhi	r3, [r0, #0]
 800e3f6:	700a      	strbls	r2, [r1, #0]
 800e3f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3fc:	bf98      	it	ls
 800e3fe:	2001      	movls	r0, #1
 800e400:	4770      	bx	lr
 800e402:	4608      	mov	r0, r1
 800e404:	4770      	bx	lr
	...

0800e408 <__assert_func>:
 800e408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e40a:	4614      	mov	r4, r2
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <__assert_func+0x2c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4605      	mov	r5, r0
 800e414:	68d8      	ldr	r0, [r3, #12]
 800e416:	b14c      	cbz	r4, 800e42c <__assert_func+0x24>
 800e418:	4b07      	ldr	r3, [pc, #28]	; (800e438 <__assert_func+0x30>)
 800e41a:	9100      	str	r1, [sp, #0]
 800e41c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e420:	4906      	ldr	r1, [pc, #24]	; (800e43c <__assert_func+0x34>)
 800e422:	462b      	mov	r3, r5
 800e424:	f000 f9a6 	bl	800e774 <fiprintf>
 800e428:	f000 fc3e 	bl	800eca8 <abort>
 800e42c:	4b04      	ldr	r3, [pc, #16]	; (800e440 <__assert_func+0x38>)
 800e42e:	461c      	mov	r4, r3
 800e430:	e7f3      	b.n	800e41a <__assert_func+0x12>
 800e432:	bf00      	nop
 800e434:	20000130 	.word	0x20000130
 800e438:	08010058 	.word	0x08010058
 800e43c:	08010065 	.word	0x08010065
 800e440:	08010093 	.word	0x08010093

0800e444 <__sflush_r>:
 800e444:	898a      	ldrh	r2, [r1, #12]
 800e446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44a:	4605      	mov	r5, r0
 800e44c:	0710      	lsls	r0, r2, #28
 800e44e:	460c      	mov	r4, r1
 800e450:	d458      	bmi.n	800e504 <__sflush_r+0xc0>
 800e452:	684b      	ldr	r3, [r1, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	dc05      	bgt.n	800e464 <__sflush_r+0x20>
 800e458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	dc02      	bgt.n	800e464 <__sflush_r+0x20>
 800e45e:	2000      	movs	r0, #0
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e466:	2e00      	cmp	r6, #0
 800e468:	d0f9      	beq.n	800e45e <__sflush_r+0x1a>
 800e46a:	2300      	movs	r3, #0
 800e46c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e470:	682f      	ldr	r7, [r5, #0]
 800e472:	602b      	str	r3, [r5, #0]
 800e474:	d032      	beq.n	800e4dc <__sflush_r+0x98>
 800e476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	075a      	lsls	r2, r3, #29
 800e47c:	d505      	bpl.n	800e48a <__sflush_r+0x46>
 800e47e:	6863      	ldr	r3, [r4, #4]
 800e480:	1ac0      	subs	r0, r0, r3
 800e482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e484:	b10b      	cbz	r3, 800e48a <__sflush_r+0x46>
 800e486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e488:	1ac0      	subs	r0, r0, r3
 800e48a:	2300      	movs	r3, #0
 800e48c:	4602      	mov	r2, r0
 800e48e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e490:	6a21      	ldr	r1, [r4, #32]
 800e492:	4628      	mov	r0, r5
 800e494:	47b0      	blx	r6
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	d106      	bne.n	800e4aa <__sflush_r+0x66>
 800e49c:	6829      	ldr	r1, [r5, #0]
 800e49e:	291d      	cmp	r1, #29
 800e4a0:	d82c      	bhi.n	800e4fc <__sflush_r+0xb8>
 800e4a2:	4a2a      	ldr	r2, [pc, #168]	; (800e54c <__sflush_r+0x108>)
 800e4a4:	40ca      	lsrs	r2, r1
 800e4a6:	07d6      	lsls	r6, r2, #31
 800e4a8:	d528      	bpl.n	800e4fc <__sflush_r+0xb8>
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	6062      	str	r2, [r4, #4]
 800e4ae:	04d9      	lsls	r1, r3, #19
 800e4b0:	6922      	ldr	r2, [r4, #16]
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	d504      	bpl.n	800e4c0 <__sflush_r+0x7c>
 800e4b6:	1c42      	adds	r2, r0, #1
 800e4b8:	d101      	bne.n	800e4be <__sflush_r+0x7a>
 800e4ba:	682b      	ldr	r3, [r5, #0]
 800e4bc:	b903      	cbnz	r3, 800e4c0 <__sflush_r+0x7c>
 800e4be:	6560      	str	r0, [r4, #84]	; 0x54
 800e4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4c2:	602f      	str	r7, [r5, #0]
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d0ca      	beq.n	800e45e <__sflush_r+0x1a>
 800e4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4cc:	4299      	cmp	r1, r3
 800e4ce:	d002      	beq.n	800e4d6 <__sflush_r+0x92>
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	f7ff f949 	bl	800d768 <_free_r>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	6360      	str	r0, [r4, #52]	; 0x34
 800e4da:	e7c1      	b.n	800e460 <__sflush_r+0x1c>
 800e4dc:	6a21      	ldr	r1, [r4, #32]
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	47b0      	blx	r6
 800e4e4:	1c41      	adds	r1, r0, #1
 800e4e6:	d1c7      	bne.n	800e478 <__sflush_r+0x34>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0c4      	beq.n	800e478 <__sflush_r+0x34>
 800e4ee:	2b1d      	cmp	r3, #29
 800e4f0:	d001      	beq.n	800e4f6 <__sflush_r+0xb2>
 800e4f2:	2b16      	cmp	r3, #22
 800e4f4:	d101      	bne.n	800e4fa <__sflush_r+0xb6>
 800e4f6:	602f      	str	r7, [r5, #0]
 800e4f8:	e7b1      	b.n	800e45e <__sflush_r+0x1a>
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e500:	81a3      	strh	r3, [r4, #12]
 800e502:	e7ad      	b.n	800e460 <__sflush_r+0x1c>
 800e504:	690f      	ldr	r7, [r1, #16]
 800e506:	2f00      	cmp	r7, #0
 800e508:	d0a9      	beq.n	800e45e <__sflush_r+0x1a>
 800e50a:	0793      	lsls	r3, r2, #30
 800e50c:	680e      	ldr	r6, [r1, #0]
 800e50e:	bf08      	it	eq
 800e510:	694b      	ldreq	r3, [r1, #20]
 800e512:	600f      	str	r7, [r1, #0]
 800e514:	bf18      	it	ne
 800e516:	2300      	movne	r3, #0
 800e518:	eba6 0807 	sub.w	r8, r6, r7
 800e51c:	608b      	str	r3, [r1, #8]
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	dd9c      	ble.n	800e45e <__sflush_r+0x1a>
 800e524:	6a21      	ldr	r1, [r4, #32]
 800e526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e528:	4643      	mov	r3, r8
 800e52a:	463a      	mov	r2, r7
 800e52c:	4628      	mov	r0, r5
 800e52e:	47b0      	blx	r6
 800e530:	2800      	cmp	r0, #0
 800e532:	dc06      	bgt.n	800e542 <__sflush_r+0xfe>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e78e      	b.n	800e460 <__sflush_r+0x1c>
 800e542:	4407      	add	r7, r0
 800e544:	eba8 0800 	sub.w	r8, r8, r0
 800e548:	e7e9      	b.n	800e51e <__sflush_r+0xda>
 800e54a:	bf00      	nop
 800e54c:	20400001 	.word	0x20400001

0800e550 <_fflush_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	690b      	ldr	r3, [r1, #16]
 800e554:	4605      	mov	r5, r0
 800e556:	460c      	mov	r4, r1
 800e558:	b913      	cbnz	r3, 800e560 <_fflush_r+0x10>
 800e55a:	2500      	movs	r5, #0
 800e55c:	4628      	mov	r0, r5
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	b118      	cbz	r0, 800e56a <_fflush_r+0x1a>
 800e562:	6983      	ldr	r3, [r0, #24]
 800e564:	b90b      	cbnz	r3, 800e56a <_fflush_r+0x1a>
 800e566:	f000 f887 	bl	800e678 <__sinit>
 800e56a:	4b14      	ldr	r3, [pc, #80]	; (800e5bc <_fflush_r+0x6c>)
 800e56c:	429c      	cmp	r4, r3
 800e56e:	d11b      	bne.n	800e5a8 <_fflush_r+0x58>
 800e570:	686c      	ldr	r4, [r5, #4]
 800e572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d0ef      	beq.n	800e55a <_fflush_r+0xa>
 800e57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e57c:	07d0      	lsls	r0, r2, #31
 800e57e:	d404      	bmi.n	800e58a <_fflush_r+0x3a>
 800e580:	0599      	lsls	r1, r3, #22
 800e582:	d402      	bmi.n	800e58a <_fflush_r+0x3a>
 800e584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e586:	f000 f927 	bl	800e7d8 <__retarget_lock_acquire_recursive>
 800e58a:	4628      	mov	r0, r5
 800e58c:	4621      	mov	r1, r4
 800e58e:	f7ff ff59 	bl	800e444 <__sflush_r>
 800e592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e594:	07da      	lsls	r2, r3, #31
 800e596:	4605      	mov	r5, r0
 800e598:	d4e0      	bmi.n	800e55c <_fflush_r+0xc>
 800e59a:	89a3      	ldrh	r3, [r4, #12]
 800e59c:	059b      	lsls	r3, r3, #22
 800e59e:	d4dd      	bmi.n	800e55c <_fflush_r+0xc>
 800e5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5a2:	f000 f91a 	bl	800e7da <__retarget_lock_release_recursive>
 800e5a6:	e7d9      	b.n	800e55c <_fflush_r+0xc>
 800e5a8:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <_fflush_r+0x70>)
 800e5aa:	429c      	cmp	r4, r3
 800e5ac:	d101      	bne.n	800e5b2 <_fflush_r+0x62>
 800e5ae:	68ac      	ldr	r4, [r5, #8]
 800e5b0:	e7df      	b.n	800e572 <_fflush_r+0x22>
 800e5b2:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <_fflush_r+0x74>)
 800e5b4:	429c      	cmp	r4, r3
 800e5b6:	bf08      	it	eq
 800e5b8:	68ec      	ldreq	r4, [r5, #12]
 800e5ba:	e7da      	b.n	800e572 <_fflush_r+0x22>
 800e5bc:	080100b4 	.word	0x080100b4
 800e5c0:	080100d4 	.word	0x080100d4
 800e5c4:	08010094 	.word	0x08010094

0800e5c8 <std>:
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	b510      	push	{r4, lr}
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e5d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5d6:	6083      	str	r3, [r0, #8]
 800e5d8:	8181      	strh	r1, [r0, #12]
 800e5da:	6643      	str	r3, [r0, #100]	; 0x64
 800e5dc:	81c2      	strh	r2, [r0, #14]
 800e5de:	6183      	str	r3, [r0, #24]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	2208      	movs	r2, #8
 800e5e4:	305c      	adds	r0, #92	; 0x5c
 800e5e6:	f7fb fc85 	bl	8009ef4 <memset>
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <std+0x38>)
 800e5ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <std+0x3c>)
 800e5f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5f2:	4b05      	ldr	r3, [pc, #20]	; (800e608 <std+0x40>)
 800e5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x44>)
 800e5f8:	6224      	str	r4, [r4, #32]
 800e5fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5fc:	bd10      	pop	{r4, pc}
 800e5fe:	bf00      	nop
 800e600:	0800ac39 	.word	0x0800ac39
 800e604:	0800ac5f 	.word	0x0800ac5f
 800e608:	0800ac97 	.word	0x0800ac97
 800e60c:	0800acbb 	.word	0x0800acbb

0800e610 <_cleanup_r>:
 800e610:	4901      	ldr	r1, [pc, #4]	; (800e618 <_cleanup_r+0x8>)
 800e612:	f000 b8c1 	b.w	800e798 <_fwalk_reent>
 800e616:	bf00      	nop
 800e618:	0800e551 	.word	0x0800e551

0800e61c <__sfmoreglue>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	1e4a      	subs	r2, r1, #1
 800e620:	2568      	movs	r5, #104	; 0x68
 800e622:	4355      	muls	r5, r2
 800e624:	460e      	mov	r6, r1
 800e626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e62a:	f7ff f8ed 	bl	800d808 <_malloc_r>
 800e62e:	4604      	mov	r4, r0
 800e630:	b140      	cbz	r0, 800e644 <__sfmoreglue+0x28>
 800e632:	2100      	movs	r1, #0
 800e634:	e9c0 1600 	strd	r1, r6, [r0]
 800e638:	300c      	adds	r0, #12
 800e63a:	60a0      	str	r0, [r4, #8]
 800e63c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e640:	f7fb fc58 	bl	8009ef4 <memset>
 800e644:	4620      	mov	r0, r4
 800e646:	bd70      	pop	{r4, r5, r6, pc}

0800e648 <__sfp_lock_acquire>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__sfp_lock_acquire+0x8>)
 800e64a:	f000 b8c5 	b.w	800e7d8 <__retarget_lock_acquire_recursive>
 800e64e:	bf00      	nop
 800e650:	2001891c 	.word	0x2001891c

0800e654 <__sfp_lock_release>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sfp_lock_release+0x8>)
 800e656:	f000 b8c0 	b.w	800e7da <__retarget_lock_release_recursive>
 800e65a:	bf00      	nop
 800e65c:	2001891c 	.word	0x2001891c

0800e660 <__sinit_lock_acquire>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sinit_lock_acquire+0x8>)
 800e662:	f000 b8b9 	b.w	800e7d8 <__retarget_lock_acquire_recursive>
 800e666:	bf00      	nop
 800e668:	20018917 	.word	0x20018917

0800e66c <__sinit_lock_release>:
 800e66c:	4801      	ldr	r0, [pc, #4]	; (800e674 <__sinit_lock_release+0x8>)
 800e66e:	f000 b8b4 	b.w	800e7da <__retarget_lock_release_recursive>
 800e672:	bf00      	nop
 800e674:	20018917 	.word	0x20018917

0800e678 <__sinit>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	4604      	mov	r4, r0
 800e67c:	f7ff fff0 	bl	800e660 <__sinit_lock_acquire>
 800e680:	69a3      	ldr	r3, [r4, #24]
 800e682:	b11b      	cbz	r3, 800e68c <__sinit+0x14>
 800e684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e688:	f7ff bff0 	b.w	800e66c <__sinit_lock_release>
 800e68c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e690:	6523      	str	r3, [r4, #80]	; 0x50
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <__sinit+0x68>)
 800e694:	4a13      	ldr	r2, [pc, #76]	; (800e6e4 <__sinit+0x6c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	62a2      	str	r2, [r4, #40]	; 0x28
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	bf04      	itt	eq
 800e69e:	2301      	moveq	r3, #1
 800e6a0:	61a3      	streq	r3, [r4, #24]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 f820 	bl	800e6e8 <__sfp>
 800e6a8:	6060      	str	r0, [r4, #4]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 f81c 	bl	800e6e8 <__sfp>
 800e6b0:	60a0      	str	r0, [r4, #8]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 f818 	bl	800e6e8 <__sfp>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	60e0      	str	r0, [r4, #12]
 800e6bc:	2104      	movs	r1, #4
 800e6be:	6860      	ldr	r0, [r4, #4]
 800e6c0:	f7ff ff82 	bl	800e5c8 <std>
 800e6c4:	68a0      	ldr	r0, [r4, #8]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	2109      	movs	r1, #9
 800e6ca:	f7ff ff7d 	bl	800e5c8 <std>
 800e6ce:	68e0      	ldr	r0, [r4, #12]
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	2112      	movs	r1, #18
 800e6d4:	f7ff ff78 	bl	800e5c8 <std>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	61a3      	str	r3, [r4, #24]
 800e6dc:	e7d2      	b.n	800e684 <__sinit+0xc>
 800e6de:	bf00      	nop
 800e6e0:	0800fc2c 	.word	0x0800fc2c
 800e6e4:	0800e611 	.word	0x0800e611

0800e6e8 <__sfp>:
 800e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ea:	4607      	mov	r7, r0
 800e6ec:	f7ff ffac 	bl	800e648 <__sfp_lock_acquire>
 800e6f0:	4b1e      	ldr	r3, [pc, #120]	; (800e76c <__sfp+0x84>)
 800e6f2:	681e      	ldr	r6, [r3, #0]
 800e6f4:	69b3      	ldr	r3, [r6, #24]
 800e6f6:	b913      	cbnz	r3, 800e6fe <__sfp+0x16>
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7ff ffbd 	bl	800e678 <__sinit>
 800e6fe:	3648      	adds	r6, #72	; 0x48
 800e700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e704:	3b01      	subs	r3, #1
 800e706:	d503      	bpl.n	800e710 <__sfp+0x28>
 800e708:	6833      	ldr	r3, [r6, #0]
 800e70a:	b30b      	cbz	r3, 800e750 <__sfp+0x68>
 800e70c:	6836      	ldr	r6, [r6, #0]
 800e70e:	e7f7      	b.n	800e700 <__sfp+0x18>
 800e710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e714:	b9d5      	cbnz	r5, 800e74c <__sfp+0x64>
 800e716:	4b16      	ldr	r3, [pc, #88]	; (800e770 <__sfp+0x88>)
 800e718:	60e3      	str	r3, [r4, #12]
 800e71a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e71e:	6665      	str	r5, [r4, #100]	; 0x64
 800e720:	f000 f859 	bl	800e7d6 <__retarget_lock_init_recursive>
 800e724:	f7ff ff96 	bl	800e654 <__sfp_lock_release>
 800e728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e72c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e730:	6025      	str	r5, [r4, #0]
 800e732:	61a5      	str	r5, [r4, #24]
 800e734:	2208      	movs	r2, #8
 800e736:	4629      	mov	r1, r5
 800e738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e73c:	f7fb fbda 	bl	8009ef4 <memset>
 800e740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e748:	4620      	mov	r0, r4
 800e74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e74c:	3468      	adds	r4, #104	; 0x68
 800e74e:	e7d9      	b.n	800e704 <__sfp+0x1c>
 800e750:	2104      	movs	r1, #4
 800e752:	4638      	mov	r0, r7
 800e754:	f7ff ff62 	bl	800e61c <__sfmoreglue>
 800e758:	4604      	mov	r4, r0
 800e75a:	6030      	str	r0, [r6, #0]
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d1d5      	bne.n	800e70c <__sfp+0x24>
 800e760:	f7ff ff78 	bl	800e654 <__sfp_lock_release>
 800e764:	230c      	movs	r3, #12
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	e7ee      	b.n	800e748 <__sfp+0x60>
 800e76a:	bf00      	nop
 800e76c:	0800fc2c 	.word	0x0800fc2c
 800e770:	ffff0001 	.word	0xffff0001

0800e774 <fiprintf>:
 800e774:	b40e      	push	{r1, r2, r3}
 800e776:	b503      	push	{r0, r1, lr}
 800e778:	4601      	mov	r1, r0
 800e77a:	ab03      	add	r3, sp, #12
 800e77c:	4805      	ldr	r0, [pc, #20]	; (800e794 <fiprintf+0x20>)
 800e77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e782:	6800      	ldr	r0, [r0, #0]
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	f000 f89f 	bl	800e8c8 <_vfiprintf_r>
 800e78a:	b002      	add	sp, #8
 800e78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e790:	b003      	add	sp, #12
 800e792:	4770      	bx	lr
 800e794:	20000130 	.word	0x20000130

0800e798 <_fwalk_reent>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4606      	mov	r6, r0
 800e79e:	4688      	mov	r8, r1
 800e7a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7a4:	2700      	movs	r7, #0
 800e7a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7aa:	f1b9 0901 	subs.w	r9, r9, #1
 800e7ae:	d505      	bpl.n	800e7bc <_fwalk_reent+0x24>
 800e7b0:	6824      	ldr	r4, [r4, #0]
 800e7b2:	2c00      	cmp	r4, #0
 800e7b4:	d1f7      	bne.n	800e7a6 <_fwalk_reent+0xe>
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7bc:	89ab      	ldrh	r3, [r5, #12]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d907      	bls.n	800e7d2 <_fwalk_reent+0x3a>
 800e7c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	d003      	beq.n	800e7d2 <_fwalk_reent+0x3a>
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	47c0      	blx	r8
 800e7d0:	4307      	orrs	r7, r0
 800e7d2:	3568      	adds	r5, #104	; 0x68
 800e7d4:	e7e9      	b.n	800e7aa <_fwalk_reent+0x12>

0800e7d6 <__retarget_lock_init_recursive>:
 800e7d6:	4770      	bx	lr

0800e7d8 <__retarget_lock_acquire_recursive>:
 800e7d8:	4770      	bx	lr

0800e7da <__retarget_lock_release_recursive>:
 800e7da:	4770      	bx	lr

0800e7dc <memmove>:
 800e7dc:	4288      	cmp	r0, r1
 800e7de:	b510      	push	{r4, lr}
 800e7e0:	eb01 0402 	add.w	r4, r1, r2
 800e7e4:	d902      	bls.n	800e7ec <memmove+0x10>
 800e7e6:	4284      	cmp	r4, r0
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	d807      	bhi.n	800e7fc <memmove+0x20>
 800e7ec:	1e43      	subs	r3, r0, #1
 800e7ee:	42a1      	cmp	r1, r4
 800e7f0:	d008      	beq.n	800e804 <memmove+0x28>
 800e7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7fa:	e7f8      	b.n	800e7ee <memmove+0x12>
 800e7fc:	4402      	add	r2, r0
 800e7fe:	4601      	mov	r1, r0
 800e800:	428a      	cmp	r2, r1
 800e802:	d100      	bne.n	800e806 <memmove+0x2a>
 800e804:	bd10      	pop	{r4, pc}
 800e806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e80e:	e7f7      	b.n	800e800 <memmove+0x24>

0800e810 <__malloc_lock>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__malloc_lock+0x8>)
 800e812:	f7ff bfe1 	b.w	800e7d8 <__retarget_lock_acquire_recursive>
 800e816:	bf00      	nop
 800e818:	20018918 	.word	0x20018918

0800e81c <__malloc_unlock>:
 800e81c:	4801      	ldr	r0, [pc, #4]	; (800e824 <__malloc_unlock+0x8>)
 800e81e:	f7ff bfdc 	b.w	800e7da <__retarget_lock_release_recursive>
 800e822:	bf00      	nop
 800e824:	20018918 	.word	0x20018918

0800e828 <_realloc_r>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	4607      	mov	r7, r0
 800e82c:	4614      	mov	r4, r2
 800e82e:	460e      	mov	r6, r1
 800e830:	b921      	cbnz	r1, 800e83c <_realloc_r+0x14>
 800e832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e836:	4611      	mov	r1, r2
 800e838:	f7fe bfe6 	b.w	800d808 <_malloc_r>
 800e83c:	b922      	cbnz	r2, 800e848 <_realloc_r+0x20>
 800e83e:	f7fe ff93 	bl	800d768 <_free_r>
 800e842:	4625      	mov	r5, r4
 800e844:	4628      	mov	r0, r5
 800e846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e848:	f000 fa9a 	bl	800ed80 <_malloc_usable_size_r>
 800e84c:	42a0      	cmp	r0, r4
 800e84e:	d20f      	bcs.n	800e870 <_realloc_r+0x48>
 800e850:	4621      	mov	r1, r4
 800e852:	4638      	mov	r0, r7
 800e854:	f7fe ffd8 	bl	800d808 <_malloc_r>
 800e858:	4605      	mov	r5, r0
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d0f2      	beq.n	800e844 <_realloc_r+0x1c>
 800e85e:	4631      	mov	r1, r6
 800e860:	4622      	mov	r2, r4
 800e862:	f7fe faa7 	bl	800cdb4 <memcpy>
 800e866:	4631      	mov	r1, r6
 800e868:	4638      	mov	r0, r7
 800e86a:	f7fe ff7d 	bl	800d768 <_free_r>
 800e86e:	e7e9      	b.n	800e844 <_realloc_r+0x1c>
 800e870:	4635      	mov	r5, r6
 800e872:	e7e7      	b.n	800e844 <_realloc_r+0x1c>

0800e874 <__sfputc_r>:
 800e874:	6893      	ldr	r3, [r2, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	b410      	push	{r4}
 800e87c:	6093      	str	r3, [r2, #8]
 800e87e:	da08      	bge.n	800e892 <__sfputc_r+0x1e>
 800e880:	6994      	ldr	r4, [r2, #24]
 800e882:	42a3      	cmp	r3, r4
 800e884:	db01      	blt.n	800e88a <__sfputc_r+0x16>
 800e886:	290a      	cmp	r1, #10
 800e888:	d103      	bne.n	800e892 <__sfputc_r+0x1e>
 800e88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88e:	f000 b94b 	b.w	800eb28 <__swbuf_r>
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	7019      	strb	r1, [r3, #0]
 800e89a:	4608      	mov	r0, r1
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <__sfputs_r>:
 800e8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	18d5      	adds	r5, r2, r3
 800e8ac:	42ac      	cmp	r4, r5
 800e8ae:	d101      	bne.n	800e8b4 <__sfputs_r+0x12>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e007      	b.n	800e8c4 <__sfputs_r+0x22>
 800e8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b8:	463a      	mov	r2, r7
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffda 	bl	800e874 <__sfputc_r>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d1f3      	bne.n	800e8ac <__sfputs_r+0xa>
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8c8 <_vfiprintf_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	b09d      	sub	sp, #116	; 0x74
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	4698      	mov	r8, r3
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	b118      	cbz	r0, 800e8e0 <_vfiprintf_r+0x18>
 800e8d8:	6983      	ldr	r3, [r0, #24]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <_vfiprintf_r+0x18>
 800e8dc:	f7ff fecc 	bl	800e678 <__sinit>
 800e8e0:	4b89      	ldr	r3, [pc, #548]	; (800eb08 <_vfiprintf_r+0x240>)
 800e8e2:	429d      	cmp	r5, r3
 800e8e4:	d11b      	bne.n	800e91e <_vfiprintf_r+0x56>
 800e8e6:	6875      	ldr	r5, [r6, #4]
 800e8e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8ea:	07d9      	lsls	r1, r3, #31
 800e8ec:	d405      	bmi.n	800e8fa <_vfiprintf_r+0x32>
 800e8ee:	89ab      	ldrh	r3, [r5, #12]
 800e8f0:	059a      	lsls	r2, r3, #22
 800e8f2:	d402      	bmi.n	800e8fa <_vfiprintf_r+0x32>
 800e8f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8f6:	f7ff ff6f 	bl	800e7d8 <__retarget_lock_acquire_recursive>
 800e8fa:	89ab      	ldrh	r3, [r5, #12]
 800e8fc:	071b      	lsls	r3, r3, #28
 800e8fe:	d501      	bpl.n	800e904 <_vfiprintf_r+0x3c>
 800e900:	692b      	ldr	r3, [r5, #16]
 800e902:	b9eb      	cbnz	r3, 800e940 <_vfiprintf_r+0x78>
 800e904:	4629      	mov	r1, r5
 800e906:	4630      	mov	r0, r6
 800e908:	f000 f960 	bl	800ebcc <__swsetup_r>
 800e90c:	b1c0      	cbz	r0, 800e940 <_vfiprintf_r+0x78>
 800e90e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e910:	07dc      	lsls	r4, r3, #31
 800e912:	d50e      	bpl.n	800e932 <_vfiprintf_r+0x6a>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	b01d      	add	sp, #116	; 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	4b7b      	ldr	r3, [pc, #492]	; (800eb0c <_vfiprintf_r+0x244>)
 800e920:	429d      	cmp	r5, r3
 800e922:	d101      	bne.n	800e928 <_vfiprintf_r+0x60>
 800e924:	68b5      	ldr	r5, [r6, #8]
 800e926:	e7df      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e928:	4b79      	ldr	r3, [pc, #484]	; (800eb10 <_vfiprintf_r+0x248>)
 800e92a:	429d      	cmp	r5, r3
 800e92c:	bf08      	it	eq
 800e92e:	68f5      	ldreq	r5, [r6, #12]
 800e930:	e7da      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e932:	89ab      	ldrh	r3, [r5, #12]
 800e934:	0598      	lsls	r0, r3, #22
 800e936:	d4ed      	bmi.n	800e914 <_vfiprintf_r+0x4c>
 800e938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e93a:	f7ff ff4e 	bl	800e7da <__retarget_lock_release_recursive>
 800e93e:	e7e9      	b.n	800e914 <_vfiprintf_r+0x4c>
 800e940:	2300      	movs	r3, #0
 800e942:	9309      	str	r3, [sp, #36]	; 0x24
 800e944:	2320      	movs	r3, #32
 800e946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e94e:	2330      	movs	r3, #48	; 0x30
 800e950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb14 <_vfiprintf_r+0x24c>
 800e954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e958:	f04f 0901 	mov.w	r9, #1
 800e95c:	4623      	mov	r3, r4
 800e95e:	469a      	mov	sl, r3
 800e960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e964:	b10a      	cbz	r2, 800e96a <_vfiprintf_r+0xa2>
 800e966:	2a25      	cmp	r2, #37	; 0x25
 800e968:	d1f9      	bne.n	800e95e <_vfiprintf_r+0x96>
 800e96a:	ebba 0b04 	subs.w	fp, sl, r4
 800e96e:	d00b      	beq.n	800e988 <_vfiprintf_r+0xc0>
 800e970:	465b      	mov	r3, fp
 800e972:	4622      	mov	r2, r4
 800e974:	4629      	mov	r1, r5
 800e976:	4630      	mov	r0, r6
 800e978:	f7ff ff93 	bl	800e8a2 <__sfputs_r>
 800e97c:	3001      	adds	r0, #1
 800e97e:	f000 80aa 	beq.w	800ead6 <_vfiprintf_r+0x20e>
 800e982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e984:	445a      	add	r2, fp
 800e986:	9209      	str	r2, [sp, #36]	; 0x24
 800e988:	f89a 3000 	ldrb.w	r3, [sl]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 80a2 	beq.w	800ead6 <_vfiprintf_r+0x20e>
 800e992:	2300      	movs	r3, #0
 800e994:	f04f 32ff 	mov.w	r2, #4294967295
 800e998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e99c:	f10a 0a01 	add.w	sl, sl, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	9307      	str	r3, [sp, #28]
 800e9a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e9aa:	4654      	mov	r4, sl
 800e9ac:	2205      	movs	r2, #5
 800e9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b2:	4858      	ldr	r0, [pc, #352]	; (800eb14 <_vfiprintf_r+0x24c>)
 800e9b4:	f7f1 fc5c 	bl	8000270 <memchr>
 800e9b8:	9a04      	ldr	r2, [sp, #16]
 800e9ba:	b9d8      	cbnz	r0, 800e9f4 <_vfiprintf_r+0x12c>
 800e9bc:	06d1      	lsls	r1, r2, #27
 800e9be:	bf44      	itt	mi
 800e9c0:	2320      	movmi	r3, #32
 800e9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c6:	0713      	lsls	r3, r2, #28
 800e9c8:	bf44      	itt	mi
 800e9ca:	232b      	movmi	r3, #43	; 0x2b
 800e9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9d6:	d015      	beq.n	800ea04 <_vfiprintf_r+0x13c>
 800e9d8:	9a07      	ldr	r2, [sp, #28]
 800e9da:	4654      	mov	r4, sl
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f04f 0c0a 	mov.w	ip, #10
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e8:	3b30      	subs	r3, #48	; 0x30
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d94e      	bls.n	800ea8c <_vfiprintf_r+0x1c4>
 800e9ee:	b1b0      	cbz	r0, 800ea1e <_vfiprintf_r+0x156>
 800e9f0:	9207      	str	r2, [sp, #28]
 800e9f2:	e014      	b.n	800ea1e <_vfiprintf_r+0x156>
 800e9f4:	eba0 0308 	sub.w	r3, r0, r8
 800e9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	46a2      	mov	sl, r4
 800ea02:	e7d2      	b.n	800e9aa <_vfiprintf_r+0xe2>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	1d19      	adds	r1, r3, #4
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9103      	str	r1, [sp, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfbb      	ittet	lt
 800ea10:	425b      	neglt	r3, r3
 800ea12:	f042 0202 	orrlt.w	r2, r2, #2
 800ea16:	9307      	strge	r3, [sp, #28]
 800ea18:	9307      	strlt	r3, [sp, #28]
 800ea1a:	bfb8      	it	lt
 800ea1c:	9204      	strlt	r2, [sp, #16]
 800ea1e:	7823      	ldrb	r3, [r4, #0]
 800ea20:	2b2e      	cmp	r3, #46	; 0x2e
 800ea22:	d10c      	bne.n	800ea3e <_vfiprintf_r+0x176>
 800ea24:	7863      	ldrb	r3, [r4, #1]
 800ea26:	2b2a      	cmp	r3, #42	; 0x2a
 800ea28:	d135      	bne.n	800ea96 <_vfiprintf_r+0x1ce>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	1d1a      	adds	r2, r3, #4
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	9203      	str	r2, [sp, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	bfb8      	it	lt
 800ea36:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea3a:	3402      	adds	r4, #2
 800ea3c:	9305      	str	r3, [sp, #20]
 800ea3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb24 <_vfiprintf_r+0x25c>
 800ea42:	7821      	ldrb	r1, [r4, #0]
 800ea44:	2203      	movs	r2, #3
 800ea46:	4650      	mov	r0, sl
 800ea48:	f7f1 fc12 	bl	8000270 <memchr>
 800ea4c:	b140      	cbz	r0, 800ea60 <_vfiprintf_r+0x198>
 800ea4e:	2340      	movs	r3, #64	; 0x40
 800ea50:	eba0 000a 	sub.w	r0, r0, sl
 800ea54:	fa03 f000 	lsl.w	r0, r3, r0
 800ea58:	9b04      	ldr	r3, [sp, #16]
 800ea5a:	4303      	orrs	r3, r0
 800ea5c:	3401      	adds	r4, #1
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea64:	482c      	ldr	r0, [pc, #176]	; (800eb18 <_vfiprintf_r+0x250>)
 800ea66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea6a:	2206      	movs	r2, #6
 800ea6c:	f7f1 fc00 	bl	8000270 <memchr>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d03f      	beq.n	800eaf4 <_vfiprintf_r+0x22c>
 800ea74:	4b29      	ldr	r3, [pc, #164]	; (800eb1c <_vfiprintf_r+0x254>)
 800ea76:	bb1b      	cbnz	r3, 800eac0 <_vfiprintf_r+0x1f8>
 800ea78:	9b03      	ldr	r3, [sp, #12]
 800ea7a:	3307      	adds	r3, #7
 800ea7c:	f023 0307 	bic.w	r3, r3, #7
 800ea80:	3308      	adds	r3, #8
 800ea82:	9303      	str	r3, [sp, #12]
 800ea84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea86:	443b      	add	r3, r7
 800ea88:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8a:	e767      	b.n	800e95c <_vfiprintf_r+0x94>
 800ea8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea90:	460c      	mov	r4, r1
 800ea92:	2001      	movs	r0, #1
 800ea94:	e7a5      	b.n	800e9e2 <_vfiprintf_r+0x11a>
 800ea96:	2300      	movs	r3, #0
 800ea98:	3401      	adds	r4, #1
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	f04f 0c0a 	mov.w	ip, #10
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaa8:	3a30      	subs	r2, #48	; 0x30
 800eaaa:	2a09      	cmp	r2, #9
 800eaac:	d903      	bls.n	800eab6 <_vfiprintf_r+0x1ee>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d0c5      	beq.n	800ea3e <_vfiprintf_r+0x176>
 800eab2:	9105      	str	r1, [sp, #20]
 800eab4:	e7c3      	b.n	800ea3e <_vfiprintf_r+0x176>
 800eab6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaba:	4604      	mov	r4, r0
 800eabc:	2301      	movs	r3, #1
 800eabe:	e7f0      	b.n	800eaa2 <_vfiprintf_r+0x1da>
 800eac0:	ab03      	add	r3, sp, #12
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	462a      	mov	r2, r5
 800eac6:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <_vfiprintf_r+0x258>)
 800eac8:	a904      	add	r1, sp, #16
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7fb faac 	bl	800a028 <_printf_float>
 800ead0:	4607      	mov	r7, r0
 800ead2:	1c78      	adds	r0, r7, #1
 800ead4:	d1d6      	bne.n	800ea84 <_vfiprintf_r+0x1bc>
 800ead6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ead8:	07d9      	lsls	r1, r3, #31
 800eada:	d405      	bmi.n	800eae8 <_vfiprintf_r+0x220>
 800eadc:	89ab      	ldrh	r3, [r5, #12]
 800eade:	059a      	lsls	r2, r3, #22
 800eae0:	d402      	bmi.n	800eae8 <_vfiprintf_r+0x220>
 800eae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eae4:	f7ff fe79 	bl	800e7da <__retarget_lock_release_recursive>
 800eae8:	89ab      	ldrh	r3, [r5, #12]
 800eaea:	065b      	lsls	r3, r3, #25
 800eaec:	f53f af12 	bmi.w	800e914 <_vfiprintf_r+0x4c>
 800eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaf2:	e711      	b.n	800e918 <_vfiprintf_r+0x50>
 800eaf4:	ab03      	add	r3, sp, #12
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	462a      	mov	r2, r5
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <_vfiprintf_r+0x258>)
 800eafc:	a904      	add	r1, sp, #16
 800eafe:	4630      	mov	r0, r6
 800eb00:	f7fb fd1e 	bl	800a540 <_printf_i>
 800eb04:	e7e4      	b.n	800ead0 <_vfiprintf_r+0x208>
 800eb06:	bf00      	nop
 800eb08:	080100b4 	.word	0x080100b4
 800eb0c:	080100d4 	.word	0x080100d4
 800eb10:	08010094 	.word	0x08010094
 800eb14:	0801002c 	.word	0x0801002c
 800eb18:	08010036 	.word	0x08010036
 800eb1c:	0800a029 	.word	0x0800a029
 800eb20:	0800e8a3 	.word	0x0800e8a3
 800eb24:	08010032 	.word	0x08010032

0800eb28 <__swbuf_r>:
 800eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2a:	460e      	mov	r6, r1
 800eb2c:	4614      	mov	r4, r2
 800eb2e:	4605      	mov	r5, r0
 800eb30:	b118      	cbz	r0, 800eb3a <__swbuf_r+0x12>
 800eb32:	6983      	ldr	r3, [r0, #24]
 800eb34:	b90b      	cbnz	r3, 800eb3a <__swbuf_r+0x12>
 800eb36:	f7ff fd9f 	bl	800e678 <__sinit>
 800eb3a:	4b21      	ldr	r3, [pc, #132]	; (800ebc0 <__swbuf_r+0x98>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	d12b      	bne.n	800eb98 <__swbuf_r+0x70>
 800eb40:	686c      	ldr	r4, [r5, #4]
 800eb42:	69a3      	ldr	r3, [r4, #24]
 800eb44:	60a3      	str	r3, [r4, #8]
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	071a      	lsls	r2, r3, #28
 800eb4a:	d52f      	bpl.n	800ebac <__swbuf_r+0x84>
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	b36b      	cbz	r3, 800ebac <__swbuf_r+0x84>
 800eb50:	6923      	ldr	r3, [r4, #16]
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	1ac0      	subs	r0, r0, r3
 800eb56:	6963      	ldr	r3, [r4, #20]
 800eb58:	b2f6      	uxtb	r6, r6
 800eb5a:	4283      	cmp	r3, r0
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	dc04      	bgt.n	800eb6a <__swbuf_r+0x42>
 800eb60:	4621      	mov	r1, r4
 800eb62:	4628      	mov	r0, r5
 800eb64:	f7ff fcf4 	bl	800e550 <_fflush_r>
 800eb68:	bb30      	cbnz	r0, 800ebb8 <__swbuf_r+0x90>
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	60a3      	str	r3, [r4, #8]
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	6022      	str	r2, [r4, #0]
 800eb76:	701e      	strb	r6, [r3, #0]
 800eb78:	6963      	ldr	r3, [r4, #20]
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	4283      	cmp	r3, r0
 800eb7e:	d004      	beq.n	800eb8a <__swbuf_r+0x62>
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	07db      	lsls	r3, r3, #31
 800eb84:	d506      	bpl.n	800eb94 <__swbuf_r+0x6c>
 800eb86:	2e0a      	cmp	r6, #10
 800eb88:	d104      	bne.n	800eb94 <__swbuf_r+0x6c>
 800eb8a:	4621      	mov	r1, r4
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7ff fcdf 	bl	800e550 <_fflush_r>
 800eb92:	b988      	cbnz	r0, 800ebb8 <__swbuf_r+0x90>
 800eb94:	4638      	mov	r0, r7
 800eb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb98:	4b0a      	ldr	r3, [pc, #40]	; (800ebc4 <__swbuf_r+0x9c>)
 800eb9a:	429c      	cmp	r4, r3
 800eb9c:	d101      	bne.n	800eba2 <__swbuf_r+0x7a>
 800eb9e:	68ac      	ldr	r4, [r5, #8]
 800eba0:	e7cf      	b.n	800eb42 <__swbuf_r+0x1a>
 800eba2:	4b09      	ldr	r3, [pc, #36]	; (800ebc8 <__swbuf_r+0xa0>)
 800eba4:	429c      	cmp	r4, r3
 800eba6:	bf08      	it	eq
 800eba8:	68ec      	ldreq	r4, [r5, #12]
 800ebaa:	e7ca      	b.n	800eb42 <__swbuf_r+0x1a>
 800ebac:	4621      	mov	r1, r4
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f000 f80c 	bl	800ebcc <__swsetup_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d0cb      	beq.n	800eb50 <__swbuf_r+0x28>
 800ebb8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebbc:	e7ea      	b.n	800eb94 <__swbuf_r+0x6c>
 800ebbe:	bf00      	nop
 800ebc0:	080100b4 	.word	0x080100b4
 800ebc4:	080100d4 	.word	0x080100d4
 800ebc8:	08010094 	.word	0x08010094

0800ebcc <__swsetup_r>:
 800ebcc:	4b32      	ldr	r3, [pc, #200]	; (800ec98 <__swsetup_r+0xcc>)
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	681d      	ldr	r5, [r3, #0]
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	b125      	cbz	r5, 800ebe2 <__swsetup_r+0x16>
 800ebd8:	69ab      	ldr	r3, [r5, #24]
 800ebda:	b913      	cbnz	r3, 800ebe2 <__swsetup_r+0x16>
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f7ff fd4b 	bl	800e678 <__sinit>
 800ebe2:	4b2e      	ldr	r3, [pc, #184]	; (800ec9c <__swsetup_r+0xd0>)
 800ebe4:	429c      	cmp	r4, r3
 800ebe6:	d10f      	bne.n	800ec08 <__swsetup_r+0x3c>
 800ebe8:	686c      	ldr	r4, [r5, #4]
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebf0:	0719      	lsls	r1, r3, #28
 800ebf2:	d42c      	bmi.n	800ec4e <__swsetup_r+0x82>
 800ebf4:	06dd      	lsls	r5, r3, #27
 800ebf6:	d411      	bmi.n	800ec1c <__swsetup_r+0x50>
 800ebf8:	2309      	movs	r3, #9
 800ebfa:	6033      	str	r3, [r6, #0]
 800ebfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec00:	81a3      	strh	r3, [r4, #12]
 800ec02:	f04f 30ff 	mov.w	r0, #4294967295
 800ec06:	e03e      	b.n	800ec86 <__swsetup_r+0xba>
 800ec08:	4b25      	ldr	r3, [pc, #148]	; (800eca0 <__swsetup_r+0xd4>)
 800ec0a:	429c      	cmp	r4, r3
 800ec0c:	d101      	bne.n	800ec12 <__swsetup_r+0x46>
 800ec0e:	68ac      	ldr	r4, [r5, #8]
 800ec10:	e7eb      	b.n	800ebea <__swsetup_r+0x1e>
 800ec12:	4b24      	ldr	r3, [pc, #144]	; (800eca4 <__swsetup_r+0xd8>)
 800ec14:	429c      	cmp	r4, r3
 800ec16:	bf08      	it	eq
 800ec18:	68ec      	ldreq	r4, [r5, #12]
 800ec1a:	e7e6      	b.n	800ebea <__swsetup_r+0x1e>
 800ec1c:	0758      	lsls	r0, r3, #29
 800ec1e:	d512      	bpl.n	800ec46 <__swsetup_r+0x7a>
 800ec20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec22:	b141      	cbz	r1, 800ec36 <__swsetup_r+0x6a>
 800ec24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec28:	4299      	cmp	r1, r3
 800ec2a:	d002      	beq.n	800ec32 <__swsetup_r+0x66>
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f7fe fd9b 	bl	800d768 <_free_r>
 800ec32:	2300      	movs	r3, #0
 800ec34:	6363      	str	r3, [r4, #52]	; 0x34
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	2300      	movs	r3, #0
 800ec40:	6063      	str	r3, [r4, #4]
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	6023      	str	r3, [r4, #0]
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	f043 0308 	orr.w	r3, r3, #8
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	6923      	ldr	r3, [r4, #16]
 800ec50:	b94b      	cbnz	r3, 800ec66 <__swsetup_r+0x9a>
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec5c:	d003      	beq.n	800ec66 <__swsetup_r+0x9a>
 800ec5e:	4621      	mov	r1, r4
 800ec60:	4630      	mov	r0, r6
 800ec62:	f000 f84d 	bl	800ed00 <__smakebuf_r>
 800ec66:	89a0      	ldrh	r0, [r4, #12]
 800ec68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec6c:	f010 0301 	ands.w	r3, r0, #1
 800ec70:	d00a      	beq.n	800ec88 <__swsetup_r+0xbc>
 800ec72:	2300      	movs	r3, #0
 800ec74:	60a3      	str	r3, [r4, #8]
 800ec76:	6963      	ldr	r3, [r4, #20]
 800ec78:	425b      	negs	r3, r3
 800ec7a:	61a3      	str	r3, [r4, #24]
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	b943      	cbnz	r3, 800ec92 <__swsetup_r+0xc6>
 800ec80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec84:	d1ba      	bne.n	800ebfc <__swsetup_r+0x30>
 800ec86:	bd70      	pop	{r4, r5, r6, pc}
 800ec88:	0781      	lsls	r1, r0, #30
 800ec8a:	bf58      	it	pl
 800ec8c:	6963      	ldrpl	r3, [r4, #20]
 800ec8e:	60a3      	str	r3, [r4, #8]
 800ec90:	e7f4      	b.n	800ec7c <__swsetup_r+0xb0>
 800ec92:	2000      	movs	r0, #0
 800ec94:	e7f7      	b.n	800ec86 <__swsetup_r+0xba>
 800ec96:	bf00      	nop
 800ec98:	20000130 	.word	0x20000130
 800ec9c:	080100b4 	.word	0x080100b4
 800eca0:	080100d4 	.word	0x080100d4
 800eca4:	08010094 	.word	0x08010094

0800eca8 <abort>:
 800eca8:	b508      	push	{r3, lr}
 800ecaa:	2006      	movs	r0, #6
 800ecac:	f000 f898 	bl	800ede0 <raise>
 800ecb0:	2001      	movs	r0, #1
 800ecb2:	f7f4 fbef 	bl	8003494 <_exit>

0800ecb6 <__swhatbuf_r>:
 800ecb6:	b570      	push	{r4, r5, r6, lr}
 800ecb8:	460e      	mov	r6, r1
 800ecba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecbe:	2900      	cmp	r1, #0
 800ecc0:	b096      	sub	sp, #88	; 0x58
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	da07      	bge.n	800ecd8 <__swhatbuf_r+0x22>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	602b      	str	r3, [r5, #0]
 800eccc:	89b3      	ldrh	r3, [r6, #12]
 800ecce:	061a      	lsls	r2, r3, #24
 800ecd0:	d410      	bmi.n	800ecf4 <__swhatbuf_r+0x3e>
 800ecd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecd6:	e00e      	b.n	800ecf6 <__swhatbuf_r+0x40>
 800ecd8:	466a      	mov	r2, sp
 800ecda:	f000 f89d 	bl	800ee18 <_fstat_r>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	dbf2      	blt.n	800ecc8 <__swhatbuf_r+0x12>
 800ece2:	9a01      	ldr	r2, [sp, #4]
 800ece4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ece8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecec:	425a      	negs	r2, r3
 800ecee:	415a      	adcs	r2, r3
 800ecf0:	602a      	str	r2, [r5, #0]
 800ecf2:	e7ee      	b.n	800ecd2 <__swhatbuf_r+0x1c>
 800ecf4:	2340      	movs	r3, #64	; 0x40
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	b016      	add	sp, #88	; 0x58
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed00 <__smakebuf_r>:
 800ed00:	898b      	ldrh	r3, [r1, #12]
 800ed02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed04:	079d      	lsls	r5, r3, #30
 800ed06:	4606      	mov	r6, r0
 800ed08:	460c      	mov	r4, r1
 800ed0a:	d507      	bpl.n	800ed1c <__smakebuf_r+0x1c>
 800ed0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	6123      	str	r3, [r4, #16]
 800ed14:	2301      	movs	r3, #1
 800ed16:	6163      	str	r3, [r4, #20]
 800ed18:	b002      	add	sp, #8
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	ab01      	add	r3, sp, #4
 800ed1e:	466a      	mov	r2, sp
 800ed20:	f7ff ffc9 	bl	800ecb6 <__swhatbuf_r>
 800ed24:	9900      	ldr	r1, [sp, #0]
 800ed26:	4605      	mov	r5, r0
 800ed28:	4630      	mov	r0, r6
 800ed2a:	f7fe fd6d 	bl	800d808 <_malloc_r>
 800ed2e:	b948      	cbnz	r0, 800ed44 <__smakebuf_r+0x44>
 800ed30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed34:	059a      	lsls	r2, r3, #22
 800ed36:	d4ef      	bmi.n	800ed18 <__smakebuf_r+0x18>
 800ed38:	f023 0303 	bic.w	r3, r3, #3
 800ed3c:	f043 0302 	orr.w	r3, r3, #2
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	e7e3      	b.n	800ed0c <__smakebuf_r+0xc>
 800ed44:	4b0d      	ldr	r3, [pc, #52]	; (800ed7c <__smakebuf_r+0x7c>)
 800ed46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	6020      	str	r0, [r4, #0]
 800ed4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed50:	81a3      	strh	r3, [r4, #12]
 800ed52:	9b00      	ldr	r3, [sp, #0]
 800ed54:	6163      	str	r3, [r4, #20]
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	6120      	str	r0, [r4, #16]
 800ed5a:	b15b      	cbz	r3, 800ed74 <__smakebuf_r+0x74>
 800ed5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed60:	4630      	mov	r0, r6
 800ed62:	f000 f86b 	bl	800ee3c <_isatty_r>
 800ed66:	b128      	cbz	r0, 800ed74 <__smakebuf_r+0x74>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	f023 0303 	bic.w	r3, r3, #3
 800ed6e:	f043 0301 	orr.w	r3, r3, #1
 800ed72:	81a3      	strh	r3, [r4, #12]
 800ed74:	89a0      	ldrh	r0, [r4, #12]
 800ed76:	4305      	orrs	r5, r0
 800ed78:	81a5      	strh	r5, [r4, #12]
 800ed7a:	e7cd      	b.n	800ed18 <__smakebuf_r+0x18>
 800ed7c:	0800e611 	.word	0x0800e611

0800ed80 <_malloc_usable_size_r>:
 800ed80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed84:	1f18      	subs	r0, r3, #4
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	bfbc      	itt	lt
 800ed8a:	580b      	ldrlt	r3, [r1, r0]
 800ed8c:	18c0      	addlt	r0, r0, r3
 800ed8e:	4770      	bx	lr

0800ed90 <_raise_r>:
 800ed90:	291f      	cmp	r1, #31
 800ed92:	b538      	push	{r3, r4, r5, lr}
 800ed94:	4604      	mov	r4, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	d904      	bls.n	800eda4 <_raise_r+0x14>
 800ed9a:	2316      	movs	r3, #22
 800ed9c:	6003      	str	r3, [r0, #0]
 800ed9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eda6:	b112      	cbz	r2, 800edae <_raise_r+0x1e>
 800eda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edac:	b94b      	cbnz	r3, 800edc2 <_raise_r+0x32>
 800edae:	4620      	mov	r0, r4
 800edb0:	f000 f830 	bl	800ee14 <_getpid_r>
 800edb4:	462a      	mov	r2, r5
 800edb6:	4601      	mov	r1, r0
 800edb8:	4620      	mov	r0, r4
 800edba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edbe:	f000 b817 	b.w	800edf0 <_kill_r>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d00a      	beq.n	800eddc <_raise_r+0x4c>
 800edc6:	1c59      	adds	r1, r3, #1
 800edc8:	d103      	bne.n	800edd2 <_raise_r+0x42>
 800edca:	2316      	movs	r3, #22
 800edcc:	6003      	str	r3, [r0, #0]
 800edce:	2001      	movs	r0, #1
 800edd0:	e7e7      	b.n	800eda2 <_raise_r+0x12>
 800edd2:	2400      	movs	r4, #0
 800edd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edd8:	4628      	mov	r0, r5
 800edda:	4798      	blx	r3
 800eddc:	2000      	movs	r0, #0
 800edde:	e7e0      	b.n	800eda2 <_raise_r+0x12>

0800ede0 <raise>:
 800ede0:	4b02      	ldr	r3, [pc, #8]	; (800edec <raise+0xc>)
 800ede2:	4601      	mov	r1, r0
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	f7ff bfd3 	b.w	800ed90 <_raise_r>
 800edea:	bf00      	nop
 800edec:	20000130 	.word	0x20000130

0800edf0 <_kill_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d07      	ldr	r5, [pc, #28]	; (800ee10 <_kill_r+0x20>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	4611      	mov	r1, r2
 800edfc:	602b      	str	r3, [r5, #0]
 800edfe:	f7f4 fb39 	bl	8003474 <_kill>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	d102      	bne.n	800ee0c <_kill_r+0x1c>
 800ee06:	682b      	ldr	r3, [r5, #0]
 800ee08:	b103      	cbz	r3, 800ee0c <_kill_r+0x1c>
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	bd38      	pop	{r3, r4, r5, pc}
 800ee0e:	bf00      	nop
 800ee10:	20018910 	.word	0x20018910

0800ee14 <_getpid_r>:
 800ee14:	f7f4 bb26 	b.w	8003464 <_getpid>

0800ee18 <_fstat_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d07      	ldr	r5, [pc, #28]	; (800ee38 <_fstat_r+0x20>)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	4608      	mov	r0, r1
 800ee22:	4611      	mov	r1, r2
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	f7f4 fb84 	bl	8003532 <_fstat>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d102      	bne.n	800ee34 <_fstat_r+0x1c>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	b103      	cbz	r3, 800ee34 <_fstat_r+0x1c>
 800ee32:	6023      	str	r3, [r4, #0]
 800ee34:	bd38      	pop	{r3, r4, r5, pc}
 800ee36:	bf00      	nop
 800ee38:	20018910 	.word	0x20018910

0800ee3c <_isatty_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d06      	ldr	r5, [pc, #24]	; (800ee58 <_isatty_r+0x1c>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	f7f4 fb83 	bl	8003552 <_isatty>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_isatty_r+0x1a>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_isatty_r+0x1a>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	20018910 	.word	0x20018910

0800ee5c <_init>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	bf00      	nop
 800ee60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee62:	bc08      	pop	{r3}
 800ee64:	469e      	mov	lr, r3
 800ee66:	4770      	bx	lr

0800ee68 <_fini>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr
