
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800b568  0800b568  0001b568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c10c  0800c10c  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c114  0800c114  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800c11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010670  20000234  0800c350  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200108a4  0800c350  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197b1  00000000  00000000  00020262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  00039a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a638  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166e1  00000000  00000000  00069330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010282d  00000000  00000000  0007fa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018223e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d24  00000000  00000000  00182294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000234 	.word	0x20000234
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b54c 	.word	0x0800b54c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000238 	.word	0x20000238
 800023c:	0800b54c 	.word	0x0800b54c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_ADC3_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_ADC3_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a32:	f001 fd67 	bl	8002504 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f001 f950 	bl	8001ce0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a52:	f001 ffe3 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f001 f940 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000026c 	.word	0x2000026c
 8000a6c:	40012200 	.word	0x40012200
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_ADC_MspInit+0xe4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d15c      	bne.n	8000b50 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_ADC_MspInit+0xe8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000af6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000afa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_ADC_MspInit+0xec>)
 8000b0c:	f002 fb84 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	230f      	movs	r3, #15
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0xf0>)
 8000b24:	f002 fb78 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <HAL_ADC_MspInit+0xf4>)
 8000b3c:	f002 fb6c 	bl	8003218 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2012      	movs	r0, #18
 8000b46:	f002 fa9e 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b4a:	2012      	movs	r0, #18
 8000b4c:	f002 fab7 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000b50:	bf00      	nop
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40012200 	.word	0x40012200
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021400 	.word	0x40021400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000

08000b6c <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <config_ADC+0x38>)
 8000b96:	f001 ff41 	bl	8002a1c <HAL_ADC_ConfigChannel>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000026c 	.word	0x2000026c

08000ba8 <read_ADC>:

uint32_t read_ADC(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	Read = false;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <read_ADC+0x34>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <read_ADC+0x38>)
 8000bb4:	f001 fcea 	bl	800258c <HAL_ADC_Start_IT>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10a      	bne.n	8000bd4 <read_ADC+0x2c>
	{
	  while(!Read);
 8000bbe:	bf00      	nop
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <read_ADC+0x34>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f8      	bne.n	8000bc0 <read_ADC+0x18>
	  HAL_ADC_Stop_IT(&hadc3);
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <read_ADC+0x38>)
 8000bd0:	f001 fdb4 	bl	800273c <HAL_ADC_Stop_IT>
	}


	return adc_value;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <read_ADC+0x3c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000264 	.word	0x20000264
 8000be0:	2000026c 	.word	0x2000026c
 8000be4:	20000268 	.word	0x20000268

08000be8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(&hadc3);
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_ADC_ConvCpltCallback+0x24>)
 8000bf2:	f001 fef1 	bl	80029d8 <HAL_ADC_GetValue>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bfa:	6013      	str	r3, [r2, #0]
	Read = true;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000026c 	.word	0x2000026c
 8000c10:	20000268 	.word	0x20000268
 8000c14:	20000264 	.word	0x20000264

08000c18 <check_command>:
#include "commands.h"

struct sp_config_t sp_config = {1,10,1,false};

unsigned char check_command(char* message)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	char cmd = INV;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000c24:	2202      	movs	r2, #2
 8000c26:	4971      	ldr	r1, [pc, #452]	; (8000dec <check_command+0x1d4>)
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f006 fbca 	bl	80073c2 <strncmp>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4413      	add	r3, r2
 8000c40:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000c42:	2202      	movs	r2, #2
 8000c44:	496a      	ldr	r1, [pc, #424]	; (8000df0 <check_command+0x1d8>)
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f006 fbbb 	bl	80073c2 <strncmp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <check_command+0x3e>
 8000c52:	2202      	movs	r2, #2
 8000c54:	e000      	b.n	8000c58 <check_command+0x40>
 8000c56:	2200      	movs	r2, #0
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4964      	ldr	r1, [pc, #400]	; (8000df4 <check_command+0x1dc>)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f006 fbad 	bl	80073c2 <strncmp>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <check_command+0x5a>
 8000c6e:	2203      	movs	r2, #3
 8000c70:	e000      	b.n	8000c74 <check_command+0x5c>
 8000c72:	2200      	movs	r2, #0
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4413      	add	r3, r2
 8000c78:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	495e      	ldr	r1, [pc, #376]	; (8000df8 <check_command+0x1e0>)
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f006 fb9f 	bl	80073c2 <strncmp>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <check_command+0x76>
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	e000      	b.n	8000c90 <check_command+0x78>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	4413      	add	r3, r2
 8000c94:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000c96:	2202      	movs	r2, #2
 8000c98:	4958      	ldr	r1, [pc, #352]	; (8000dfc <check_command+0x1e4>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f006 fb91 	bl	80073c2 <strncmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <check_command+0x92>
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	e000      	b.n	8000cac <check_command+0x94>
 8000caa:	2200      	movs	r2, #0
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	4413      	add	r3, r2
 8000cb0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4952      	ldr	r1, [pc, #328]	; (8000e00 <check_command+0x1e8>)
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f006 fb83 	bl	80073c2 <strncmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <check_command+0xae>
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	e000      	b.n	8000cc8 <check_command+0xb0>
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	4413      	add	r3, r2
 8000ccc:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000cce:	2202      	movs	r2, #2
 8000cd0:	494c      	ldr	r1, [pc, #304]	; (8000e04 <check_command+0x1ec>)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f006 fb75 	bl	80073c2 <strncmp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <check_command+0xca>
 8000cde:	2207      	movs	r2, #7
 8000ce0:	e000      	b.n	8000ce4 <check_command+0xcc>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <check_command+0x1f0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <check_command+0xe4>
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	e000      	b.n	8000cfe <check_command+0xe6>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4413      	add	r3, r2
 8000d02:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <check_command+0x1f4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <check_command+0xfe>
 8000d12:	2209      	movs	r2, #9
 8000d14:	e000      	b.n	8000d18 <check_command+0x100>
 8000d16:	2200      	movs	r2, #0
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000d1e:	2203      	movs	r2, #3
 8000d20:	493b      	ldr	r1, [pc, #236]	; (8000e10 <check_command+0x1f8>)
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f006 fb4d 	bl	80073c2 <strncmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <check_command+0x11a>
 8000d2e:	220a      	movs	r2, #10
 8000d30:	e000      	b.n	8000d34 <check_command+0x11c>
 8000d32:	2200      	movs	r2, #0
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	4413      	add	r3, r2
 8000d38:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "SP", 2)) * SP;
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4935      	ldr	r1, [pc, #212]	; (8000e14 <check_command+0x1fc>)
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f006 fb3f 	bl	80073c2 <strncmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <check_command+0x136>
 8000d4a:	220b      	movs	r2, #11
 8000d4c:	e000      	b.n	8000d50 <check_command+0x138>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4413      	add	r3, r2
 8000d54:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "AC", 2)) * AC;
 8000d56:	2202      	movs	r2, #2
 8000d58:	492f      	ldr	r1, [pc, #188]	; (8000e18 <check_command+0x200>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f006 fb31 	bl	80073c2 <strncmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <check_command+0x152>
 8000d66:	220c      	movs	r2, #12
 8000d68:	e000      	b.n	8000d6c <check_command+0x154>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	4413      	add	r3, r2
 8000d70:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FN", 2)) * FN;
 8000d72:	2202      	movs	r2, #2
 8000d74:	4929      	ldr	r1, [pc, #164]	; (8000e1c <check_command+0x204>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f006 fb23 	bl	80073c2 <strncmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <check_command+0x16e>
 8000d82:	220d      	movs	r2, #13
 8000d84:	e000      	b.n	8000d88 <check_command+0x170>
 8000d86:	2200      	movs	r2, #0
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FF", 2)) * FF;
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4923      	ldr	r1, [pc, #140]	; (8000e20 <check_command+0x208>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f006 fb15 	bl	80073c2 <strncmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <check_command+0x18a>
 8000d9e:	220e      	movs	r2, #14
 8000da0:	e000      	b.n	8000da4 <check_command+0x18c>
 8000da2:	2200      	movs	r2, #0
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	4413      	add	r3, r2
 8000da8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S", 1)) * S;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <check_command+0x20c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <check_command+0x1a4>
 8000db8:	220f      	movs	r2, #15
 8000dba:	e000      	b.n	8000dbe <check_command+0x1a6>
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "ST", 2)) * ST;
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4918      	ldr	r1, [pc, #96]	; (8000e28 <check_command+0x210>)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f006 fafa 	bl	80073c2 <strncmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <check_command+0x1c0>
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	e000      	b.n	8000dda <check_command+0x1c2>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	4413      	add	r3, r2
 8000dde:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	0800b568 	.word	0x0800b568
 8000df0:	0800b56c 	.word	0x0800b56c
 8000df4:	0800b570 	.word	0x0800b570
 8000df8:	0800b574 	.word	0x0800b574
 8000dfc:	0800b578 	.word	0x0800b578
 8000e00:	0800b57c 	.word	0x0800b57c
 8000e04:	0800b580 	.word	0x0800b580
 8000e08:	0800b584 	.word	0x0800b584
 8000e0c:	0800b588 	.word	0x0800b588
 8000e10:	0800b58c 	.word	0x0800b58c
 8000e14:	0800b590 	.word	0x0800b590
 8000e18:	0800b594 	.word	0x0800b594
 8000e1c:	0800b598 	.word	0x0800b598
 8000e20:	0800b59c 	.word	0x0800b59c
 8000e24:	0800b5a0 	.word	0x0800b5a0
 8000e28:	0800b5a4 	.word	0x0800b5a4

08000e2c <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <proc_inv_cmd+0x18>)
 8000e36:	f001 f9eb 	bl	8002210 <send_UART>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0800b5a8 	.word	0x0800b5a8

08000e48 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	4932      	ldr	r1, [pc, #200]	; (8000f24 <proc_mr_cmd+0xdc>)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f006 fa40 	bl	80072e0 <siscanf>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d157      	bne.n	8000f16 <proc_mr_cmd+0xce>
	{
 8000e66:	466b      	mov	r3, sp
 8000e68:	461d      	mov	r5, r3
		char data[length];
 8000e6a:	68fc      	ldr	r4, [r7, #12]
 8000e6c:	4623      	mov	r3, r4
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	4620      	mov	r0, r4
 8000e74:	f04f 0100 	mov.w	r1, #0
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	00cb      	lsls	r3, r1, #3
 8000e82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e86:	00c2      	lsls	r2, r0, #3
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f04f 0100 	mov.w	r1, #0
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	00cb      	lsls	r3, r1, #3
 8000e98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e9c:	00c2      	lsls	r2, r0, #3
 8000e9e:	1de3      	adds	r3, r4, #7
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea8:	466b      	mov	r3, sp
 8000eaa:	3300      	adds	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fb57 	bl	8001568 <memory_read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d025      	beq.n	8000f0c <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <proc_mr_cmd+0xe0>)
 8000ec8:	f006 fa8d 	bl	80073e6 <strncpy>

			sprintf((char*) message, "Memory read: ");
 8000ecc:	4917      	ldr	r1, [pc, #92]	; (8000f2c <proc_mr_cmd+0xe4>)
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f006 f9e6 	bl	80072a0 <siprintf>

			for(int i = 0; i < length; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e010      	b.n	8000efc <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff f9b0 	bl	8000240 <strlen>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	1898      	adds	r0, r3, r2
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	490f      	ldr	r1, [pc, #60]	; (8000f30 <proc_mr_cmd+0xe8>)
 8000ef2:	f006 f9d5 	bl	80072a0 <siprintf>
			for(int i = 0; i < length; i++)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3ea      	bcc.n	8000eda <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f001 f983 	bl	8002210 <send_UART>
 8000f0a:	e002      	b.n	8000f12 <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <proc_mr_cmd+0xec>)
 8000f0e:	f001 f97f 	bl	8002210 <send_UART>
 8000f12:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 8000f14:	e002      	b.n	8000f1c <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <proc_mr_cmd+0xf0>)
 8000f18:	f001 f97a 	bl	8002210 <send_UART>
}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	0800b5d0 	.word	0x0800b5d0
 8000f28:	200104bc 	.word	0x200104bc
 8000f2c:	0800b5dc 	.word	0x0800b5dc
 8000f30:	0800b5ec 	.word	0x0800b5ec
 8000f34:	0800b5f4 	.word	0x0800b5f4
 8000f38:	0800b628 	.word	0x0800b628

08000f3c <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8000f44:	f107 0110 	add.w	r1, r7, #16
 8000f48:	f107 0214 	add.w	r2, r7, #20
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	460b      	mov	r3, r1
 8000f54:	4912      	ldr	r1, [pc, #72]	; (8000fa0 <proc_mw_cmd+0x64>)
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f006 f9c2 	bl	80072e0 <siscanf>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d116      	bne.n	8000f90 <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fb31 	bl	80015d0 <memory_write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d009      	beq.n	8000f88 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <proc_mw_cmd+0x68>)
 8000f7c:	f006 fa33 	bl	80073e6 <strncpy>
			send_UART("Memory written with success.");
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <proc_mw_cmd+0x6c>)
 8000f82:	f001 f945 	bl	8002210 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8000f86:	e006      	b.n	8000f96 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <proc_mw_cmd+0x70>)
 8000f8a:	f001 f941 	bl	8002210 <send_UART>
}
 8000f8e:	e002      	b.n	8000f96 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <proc_mw_cmd+0x74>)
 8000f92:	f001 f93d 	bl	8002210 <send_UART>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800b650 	.word	0x0800b650
 8000fa4:	200104bc 	.word	0x200104bc
 8000fa8:	0800b65c 	.word	0x0800b65c
 8000fac:	0800b67c 	.word	0x0800b67c
 8000fb0:	0800b6b0 	.word	0x0800b6b0

08000fb4 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	f107 020c 	add.w	r2, r7, #12
 8000fc4:	4918      	ldr	r1, [pc, #96]	; (8001028 <proc_mi_cmd+0x74>)
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f006 f98a 	bl	80072e0 <siscanf>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd79 	bl	8001ad0 <is_GPIO_pin_free>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d016      	beq.n	8001012 <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fb28 	bl	8001640 <make_pin_input>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <proc_mi_cmd+0x78>)
 8000ffe:	f006 f9f2 	bl	80073e6 <strncpy>
				send_UART("Pin(s) set as input with success.");
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <proc_mi_cmd+0x7c>)
 8001004:	f001 f904 	bl	8002210 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 8001008:	e00a      	b.n	8001020 <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <proc_mi_cmd+0x80>)
 800100c:	f001 f900 	bl	8002210 <send_UART>
}
 8001010:	e006      	b.n	8001020 <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <proc_mi_cmd+0x84>)
 8001014:	f001 f8fc 	bl	8002210 <send_UART>
}
 8001018:	e002      	b.n	8001020 <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <proc_mi_cmd+0x88>)
 800101c:	f001 f8f8 	bl	8002210 <send_UART>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	0800b6dc 	.word	0x0800b6dc
 800102c:	200104bc 	.word	0x200104bc
 8001030:	0800b6e8 	.word	0x0800b6e8
 8001034:	0800b70c 	.word	0x0800b70c
 8001038:	0800b740 	.word	0x0800b740
 800103c:	0800b778 	.word	0x0800b778

08001040 <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	4918      	ldr	r1, [pc, #96]	; (80010b4 <proc_mo_cmd+0x74>)
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 f944 	bl	80072e0 <siscanf>
 8001058:	4603      	mov	r3, r0
 800105a:	2b02      	cmp	r3, #2
 800105c:	d123      	bne.n	80010a6 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fd33 	bl	8001ad0 <is_GPIO_pin_free>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d016      	beq.n	800109e <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fb7e 	bl	8001778 <make_pin_output>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d009      	beq.n	8001096 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <proc_mo_cmd+0x78>)
 800108a:	f006 f9ac 	bl	80073e6 <strncpy>
				send_UART("Pin(s) set as output with success.");
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <proc_mo_cmd+0x7c>)
 8001090:	f001 f8be 	bl	8002210 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8001094:	e00a      	b.n	80010ac <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <proc_mo_cmd+0x80>)
 8001098:	f001 f8ba 	bl	8002210 <send_UART>
}
 800109c:	e006      	b.n	80010ac <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <proc_mo_cmd+0x84>)
 80010a0:	f001 f8b6 	bl	8002210 <send_UART>
}
 80010a4:	e002      	b.n	80010ac <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <proc_mo_cmd+0x88>)
 80010a8:	f001 f8b2 	bl	8002210 <send_UART>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800b7a4 	.word	0x0800b7a4
 80010b8:	200104bc 	.word	0x200104bc
 80010bc:	0800b7b0 	.word	0x0800b7b0
 80010c0:	0800b7d4 	.word	0x0800b7d4
 80010c4:	0800b740 	.word	0x0800b740
 80010c8:	0800b80c 	.word	0x0800b80c

080010cc <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	f107 0220 	add.w	r2, r7, #32
 80010dc:	492a      	ldr	r1, [pc, #168]	; (8001188 <proc_rd_cmd+0xbc>)
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f006 f8fe 	bl	80072e0 <siscanf>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d147      	bne.n	800117a <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	69f9      	ldr	r1, [r7, #28]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fbde 	bl	80018b4 <read_dig_input>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d039      	beq.n	8001172 <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4821      	ldr	r0, [pc, #132]	; (800118c <proc_rd_cmd+0xc0>)
 8001106:	f006 f96e 	bl	80073e6 <strncpy>

			sprintf((char*) message, "Digital input read: ");
 800110a:	4921      	ldr	r1, [pc, #132]	; (8001190 <proc_rd_cmd+0xc4>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f006 f8c7 	bl	80072a0 <siprintf>

			for(int i = 15; i >= 0; i--)
 8001112:	230f      	movs	r3, #15
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	e025      	b.n	8001164 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f891 	bl	8000240 <strlen>
 800111e:	4602      	mov	r2, r0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	1898      	adds	r0, r3, r2
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4918      	ldr	r1, [pc, #96]	; (8001194 <proc_rd_cmd+0xc8>)
 8001132:	f006 f8b5 	bl	80072a0 <siprintf>

				if(!(i % 4) && i)
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10e      	bne.n	800115e <proc_rd_cmd+0x92>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00b      	beq.n	800115e <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff f87a 	bl	8000240 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	4910      	ldr	r1, [pc, #64]	; (8001198 <proc_rd_cmd+0xcc>)
 8001156:	461a      	mov	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3b01      	subs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	2b00      	cmp	r3, #0
 8001168:	dad6      	bge.n	8001118 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 f850 	bl	8002210 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 8001170:	e006      	b.n	8001180 <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <proc_rd_cmd+0xd0>)
 8001174:	f001 f84c 	bl	8002210 <send_UART>
}
 8001178:	e002      	b.n	8001180 <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <proc_rd_cmd+0xd4>)
 800117c:	f001 f848 	bl	8002210 <send_UART>
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800b838 	.word	0x0800b838
 800118c:	200104bc 	.word	0x200104bc
 8001190:	0800b844 	.word	0x0800b844
 8001194:	0800b85c 	.word	0x0800b85c
 8001198:	0800b860 	.word	0x0800b860
 800119c:	0800b864 	.word	0x0800b864
 80011a0:	0800b89c 	.word	0x0800b89c

080011a4 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	f107 0214 	add.w	r2, r7, #20
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	4918      	ldr	r1, [pc, #96]	; (8001220 <proc_wd_cmd+0x7c>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 f88e 	bl	80072e0 <siscanf>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d123      	bne.n	8001212 <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fc7d 	bl	8001ad0 <is_GPIO_pin_free>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d016      	beq.n	800120a <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	6939      	ldr	r1, [r7, #16]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fbb0 	bl	8001948 <write_dig_output>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80011ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <proc_wd_cmd+0x80>)
 80011f6:	f006 f8f6 	bl	80073e6 <strncpy>
				send_UART("Digital output value wrote with success.");
 80011fa:	480b      	ldr	r0, [pc, #44]	; (8001228 <proc_wd_cmd+0x84>)
 80011fc:	f001 f808 	bl	8002210 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 8001200:	e00a      	b.n	8001218 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <proc_wd_cmd+0x88>)
 8001204:	f001 f804 	bl	8002210 <send_UART>
}
 8001208:	e006      	b.n	8001218 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <proc_wd_cmd+0x8c>)
 800120c:	f001 f800 	bl	8002210 <send_UART>
}
 8001210:	e002      	b.n	8001218 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <proc_wd_cmd+0x90>)
 8001214:	f000 fffc 	bl	8002210 <send_UART>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800b8cc 	.word	0x0800b8cc
 8001224:	200104bc 	.word	0x200104bc
 8001228:	0800b8d8 	.word	0x0800b8d8
 800122c:	0800b904 	.word	0x0800b904
 8001230:	0800b740 	.word	0x0800b740
 8001234:	0800b940 	.word	0x0800b940

08001238 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	461a      	mov	r2, r3
 8001246:	492c      	ldr	r1, [pc, #176]	; (80012f8 <proc_ra_cmd+0xc0>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f006 f849 	bl	80072e0 <siscanf>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d13f      	bne.n	80012d4 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fbbd 	bl	80019dc <analog_read>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d031      	beq.n	80012cc <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <proc_ra_cmd+0xc4>)
 8001270:	f006 f8b9 	bl	80073e6 <strncpy>

			float volts = (float) value * 3.3 / 4095;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001282:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80012e8 <proc_ra_cmd+0xb0>
 8001286:	ee27 6b06 	vmul.f64	d6, d7, d6
 800128a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80012f0 <proc_ra_cmd+0xb8>
 800128e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001292:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001296:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800129a:	4919      	ldr	r1, [pc, #100]	; (8001300 <proc_ra_cmd+0xc8>)
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f005 ffff 	bl	80072a0 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7fe ffcc 	bl	8000240 <strlen>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b8:	ed8d 7b00 	vstr	d7, [sp]
 80012bc:	4911      	ldr	r1, [pc, #68]	; (8001304 <proc_ra_cmd+0xcc>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 ffee 	bl	80072a0 <siprintf>

			send_UART((char*) message);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ffa3 	bl	8002210 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 80012ca:	e006      	b.n	80012da <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <proc_ra_cmd+0xd0>)
 80012ce:	f000 ff9f 	bl	8002210 <send_UART>
}
 80012d2:	e002      	b.n	80012da <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <proc_ra_cmd+0xd4>)
 80012d6:	f000 ff9b 	bl	8002210 <send_UART>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	66666666 	.word	0x66666666
 80012ec:	400a6666 	.word	0x400a6666
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40affe00 	.word	0x40affe00
 80012f8:	0800b974 	.word	0x0800b974
 80012fc:	200104bc 	.word	0x200104bc
 8001300:	0800b97c 	.word	0x0800b97c
 8001304:	0800b998 	.word	0x0800b998
 8001308:	0800b9a4 	.word	0x0800b9a4
 800130c:	0800b9d8 	.word	0x0800b9d8

08001310 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0c4      	sub	sp, #272	; 0x110
 8001314:	af00      	add	r7, sp, #0
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0d      	cmp	r3, #13
 8001324:	d12a      	bne.n	800137c <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800132c:	e010      	b.n	8001350 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <proc_last_cmd+0x7c>)
 8001330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001334:	4413      	add	r3, r2
 8001336:	7819      	ldrb	r1, [r3, #0]
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001340:	4413      	add	r3, r2
 8001342:	460a      	mov	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 8001346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800134a:	3301      	adds	r3, #1
 800134c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	ddea      	ble.n	800132e <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc5b 	bl	8000c18 <check_command>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 8001368:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <proc_last_cmd+0x80>)
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	f107 0208 	add.w	r2, r7, #8
 8001376:	4610      	mov	r0, r2
 8001378:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 800137a:	e002      	b.n	8001382 <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <proc_last_cmd+0x84>)
 800137e:	f000 ff47 	bl	8002210 <send_UART>
}
 8001382:	bf00      	nop
 8001384:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200104bc 	.word	0x200104bc
 8001390:	20000000 	.word	0x20000000
 8001394:	0800ba00 	.word	0x0800ba00

08001398 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b0d      	cmp	r3, #13
 80013a8:	d109      	bne.n	80013be <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <proc_help_cmd+0x34>)
 80013b2:	f006 f818 	bl	80073e6 <strncpy>

		send_UART("MR <addr> <length>\n\r"
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <proc_help_cmd+0x38>)
 80013b8:	f000 ff2a 	bl	8002210 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 80013bc:	e002      	b.n	80013c4 <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <proc_help_cmd+0x3c>)
 80013c0:	f000 ff26 	bl	8002210 <send_UART>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200104bc 	.word	0x200104bc
 80013d0:	0800ba20 	.word	0x0800ba20
 80013d4:	0800badc 	.word	0x0800badc

080013d8 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3303      	adds	r3, #3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b0d      	cmp	r3, #13
 80013e8:	d113      	bne.n	8001412 <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <proc_ver_cmd+0x48>)
 80013f2:	f005 fff8 	bl	80073e6 <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <proc_ver_cmd+0x4c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4909      	ldr	r1, [pc, #36]	; (8001424 <proc_ver_cmd+0x4c>)
 80013fe:	600a      	str	r2, [r1, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4909      	ldr	r1, [pc, #36]	; (8001428 <proc_ver_cmd+0x50>)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f005 ff4b 	bl	80072a0 <siprintf>
		send_UART((char*) message);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 ff00 	bl	8002210 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001410:	e002      	b.n	8001418 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <proc_ver_cmd+0x54>)
 8001414:	f000 fefc 	bl	8002210 <send_UART>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200104bc 	.word	0x200104bc
 8001424:	20000250 	.word	0x20000250
 8001428:	0800bafc 	.word	0x0800bafc
 800142c:	0800bb30 	.word	0x0800bb30

08001430 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	unsigned int timeunit, unit;

	if(sscanf((char*)message, "SP %x %x", &timeunit, &unit) == 2)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	490a      	ldr	r1, [pc, #40]	; (800146c <proc_sp_cmd+0x3c>)
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f005 ff4c 	bl	80072e0 <siscanf>
 8001448:	4603      	mov	r3, r0
 800144a:	2b02      	cmp	r3, #2
 800144c:	d106      	bne.n	800145c <proc_sp_cmd+0x2c>
		{
			sp_config.timeunit = timeunit;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <proc_sp_cmd+0x40>)
 8001452:	6093      	str	r3, [r2, #8]
			sp_config.unit = unit;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <proc_sp_cmd+0x40>)
 8001458:	6053      	str	r3, [r2, #4]
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 800145a:	e002      	b.n	8001462 <proc_sp_cmd+0x32>
			send_UART("Invalid Sample Period instruction syntax.");
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <proc_sp_cmd+0x44>)
 800145e:	f000 fed7 	bl	8002210 <send_UART>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800bb50 	.word	0x0800bb50
 8001470:	20000044 	.word	0x20000044
 8001474:	0800bb5c 	.word	0x0800bb5c

08001478 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	461a      	mov	r2, r3
 8001486:	490c      	ldr	r1, [pc, #48]	; (80014b8 <proc_ac_cmd+0x40>)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f005 ff29 	bl	80072e0 <siscanf>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10a      	bne.n	80014aa <proc_ac_cmd+0x32>
	{
		if(addr3 < 0 || addr3 > 0x0F)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d903      	bls.n	80014a2 <proc_ac_cmd+0x2a>
			sp_config.addr3 = addr3;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <proc_ac_cmd+0x44>)
 800149e:	6013      	str	r3, [r2, #0]
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 80014a0:	e006      	b.n	80014b0 <proc_ac_cmd+0x38>
			send_UART("Invalid Analog Channel instruction argument values.");
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <proc_ac_cmd+0x48>)
 80014a4:	f000 feb4 	bl	8002210 <send_UART>
}
 80014a8:	e002      	b.n	80014b0 <proc_ac_cmd+0x38>
		send_UART("Invalid Analog Channel instruction syntax.");
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <proc_ac_cmd+0x4c>)
 80014ac:	f000 feb0 	bl	8002210 <send_UART>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800bb88 	.word	0x0800bb88
 80014bc:	20000044 	.word	0x20000044
 80014c0:	0800bb90 	.word	0x0800bb90
 80014c4:	0800bbc4 	.word	0x0800bbc4

080014c8 <proc_fn_cmd>:

void proc_fn_cmd(char* message)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b0d      	cmp	r3, #13
 80014d8:	d103      	bne.n	80014e2 <proc_fn_cmd+0x1a>
	{
		sp_config.filter = true;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <proc_fn_cmd+0x28>)
 80014dc:	2201      	movs	r2, #1
 80014de:	731a      	strb	r2, [r3, #12]
	}
	else
		send_UART("Invalid Filter instruction syntax.");
}
 80014e0:	e002      	b.n	80014e8 <proc_fn_cmd+0x20>
		send_UART("Invalid Filter instruction syntax.");
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <proc_fn_cmd+0x2c>)
 80014e4:	f000 fe94 	bl	8002210 <send_UART>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000044 	.word	0x20000044
 80014f4:	0800bbf0 	.word	0x0800bbf0

080014f8 <proc_ff_cmd>:

void proc_ff_cmd(char* message)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3302      	adds	r3, #2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b0d      	cmp	r3, #13
 8001508:	d103      	bne.n	8001512 <proc_ff_cmd+0x1a>
	{
		sp_config.filter = false;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <proc_ff_cmd+0x28>)
 800150c:	2200      	movs	r2, #0
 800150e:	731a      	strb	r2, [r3, #12]
	}
	else
		send_UART("Invalid Filter instruction syntax.");
}
 8001510:	e002      	b.n	8001518 <proc_ff_cmd+0x20>
		send_UART("Invalid Filter instruction syntax.");
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <proc_ff_cmd+0x2c>)
 8001514:	f000 fe7c 	bl	8002210 <send_UART>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000044 	.word	0x20000044
 8001524:	0800bbf0 	.word	0x0800bbf0

08001528 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	if(message[2] == '\r')
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3302      	adds	r3, #2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0d      	cmp	r3, #13
 8001538:	d102      	bne.n	8001540 <proc_s_cmd+0x18>
	{
		HAL_TIM_Base_Start_IT(&htim10);
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <proc_s_cmd+0x20>)
 800153c:	f003 f9e4 	bl	8004908 <HAL_TIM_Base_Start_IT>

	}
	else
		send_UART("Invalid Filter instruction syntax.");

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200105c4 	.word	0x200105c4

0800154c <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim10);
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <proc_st_cmd+0x18>)
 8001556:	f003 fa4f 	bl	80049f8 <HAL_TIM_Base_Stop_IT>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200105c4 	.word	0x200105c4

08001568 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157a:	d202      	bcs.n	8001582 <memory_read+0x1a>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d901      	bls.n	8001586 <memory_read+0x1e>
		return false;
 8001582:	2300      	movs	r3, #0
 8001584:	e01b      	b.n	80015be <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	d901      	bls.n	8001596 <memory_read+0x2e>
		return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e013      	b.n	80015be <memory_read+0x56>

	for(int i = 0; i < length; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e00b      	b.n	80015b4 <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60fa      	str	r2, [r7, #12]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	440a      	add	r2, r1
 80015a8:	4908      	ldr	r1, [pc, #32]	; (80015cc <memory_read+0x64>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8ef      	bhi.n	800159c <memory_read+0x34>
	}

	return true;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200003b4 	.word	0x200003b4

080015d0 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	d208      	bcs.n	80015f6 <memory_write+0x26>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d805      	bhi.n	80015f6 <memory_write+0x26>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db02      	blt.n	80015f6 <memory_write+0x26>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2bff      	cmp	r3, #255	; 0xff
 80015f4:	dd01      	ble.n	80015fa <memory_write+0x2a>
		return false;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e019      	b.n	800162e <memory_write+0x5e>

	if((0x10000 - addr) < length)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d901      	bls.n	800160a <memory_write+0x3a>
		return false;
 8001606:	2300      	movs	r3, #0
 8001608:	e011      	b.n	800162e <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e009      	b.n	8001624 <memory_write+0x54>
	{
		memory[addr++] = data;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60fa      	str	r2, [r7, #12]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	b2d1      	uxtb	r1, r2
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <memory_write+0x6c>)
 800161c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f1      	bhi.n	8001610 <memory_write+0x40>
	}

	return true;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200003b4 	.word	0x200003b4

08001640 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <make_pin_input+0x24>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b08      	cmp	r3, #8
 8001654:	d806      	bhi.n	8001664 <make_pin_input+0x24>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <make_pin_input+0x24>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d301      	bcc.n	8001668 <make_pin_input+0x28>
		return false;
 8001664:	2300      	movs	r3, #0
 8001666:	e07f      	b.n	8001768 <make_pin_input+0x128>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b05      	subs	r3, #5
 800166c:	2b06      	cmp	r3, #6
 800166e:	d85f      	bhi.n	8001730 <make_pin_input+0xf0>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <make_pin_input+0x38>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	08001695 	.word	0x08001695
 800167c:	08001731 	.word	0x08001731
 8001680:	080016af 	.word	0x080016af
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016e3 	.word	0x080016e3
 800168c:	080016fd 	.word	0x080016fd
 8001690:	08001717 	.word	0x08001717

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <make_pin_input+0x130>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a35      	ldr	r2, [pc, #212]	; (8001770 <make_pin_input+0x130>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <make_pin_input+0x130>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	e040      	b.n	8001730 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <make_pin_input+0x130>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <make_pin_input+0x130>)
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <make_pin_input+0x130>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	e033      	b.n	8001730 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <make_pin_input+0x130>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <make_pin_input+0x130>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <make_pin_input+0x130>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	e026      	b.n	8001730 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <make_pin_input+0x130>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <make_pin_input+0x130>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <make_pin_input+0x130>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	e019      	b.n	8001730 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <make_pin_input+0x130>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <make_pin_input+0x130>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <make_pin_input+0x130>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	e00c      	b.n	8001730 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <make_pin_input+0x130>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <make_pin_input+0x130>)
 800171c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <make_pin_input+0x130>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <make_pin_input+0x134>)
 8001754:	4413      	add	r3, r2
 8001756:	029b      	lsls	r3, r3, #10
 8001758:	461a      	mov	r2, r3
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f001 fd59 	bl	8003218 <HAL_GPIO_Init>

	return true;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3738      	adds	r7, #56	; 0x38
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	0010007f 	.word	0x0010007f

08001778 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <make_pin_output+0x24>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d806      	bhi.n	800179c <make_pin_output+0x24>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <make_pin_output+0x24>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d301      	bcc.n	80017a0 <make_pin_output+0x28>
		return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e081      	b.n	80018a4 <make_pin_output+0x12c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b05      	subs	r3, #5
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d85f      	bhi.n	8001868 <make_pin_output+0xf0>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <make_pin_output+0x38>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017cd 	.word	0x080017cd
 80017b4:	08001869 	.word	0x08001869
 80017b8:	080017e7 	.word	0x080017e7
 80017bc:	08001801 	.word	0x08001801
 80017c0:	0800181b 	.word	0x0800181b
 80017c4:	08001835 	.word	0x08001835
 80017c8:	0800184f 	.word	0x0800184f

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80017cc:	4b37      	ldr	r3, [pc, #220]	; (80018ac <make_pin_output+0x134>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a36      	ldr	r2, [pc, #216]	; (80018ac <make_pin_output+0x134>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <make_pin_output+0x134>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	e040      	b.n	8001868 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <make_pin_output+0x134>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a30      	ldr	r2, [pc, #192]	; (80018ac <make_pin_output+0x134>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <make_pin_output+0x134>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	e033      	b.n	8001868 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <make_pin_output+0x134>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <make_pin_output+0x134>)
 8001806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <make_pin_output+0x134>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	e026      	b.n	8001868 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <make_pin_output+0x134>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <make_pin_output+0x134>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <make_pin_output+0x134>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	e019      	b.n	8001868 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <make_pin_output+0x134>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <make_pin_output+0x134>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <make_pin_output+0x134>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	e00c      	b.n	8001868 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <make_pin_output+0x134>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <make_pin_output+0x134>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <make_pin_output+0x134>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <make_pin_output+0x138>)
 8001890:	4413      	add	r3, r2
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	461a      	mov	r2, r3
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f001 fcbb 	bl	8003218 <HAL_GPIO_Init>

	return true;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	0010007f 	.word	0x0010007f

080018b4 <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <read_dig_input+0x26>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d806      	bhi.n	80018da <read_dig_input+0x26>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <read_dig_input+0x26>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d301      	bcc.n	80018de <read_dig_input+0x2a>
		return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e02d      	b.n	800193a <read_dig_input+0x86>

	int mask = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	e024      	b.n	8001932 <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d014      	beq.n	800191c <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <read_dig_input+0x90>)
 80018f6:	4413      	add	r3, r2
 80018f8:	029b      	lsls	r3, r3, #10
 80018fa:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 80018fc:	2201      	movs	r2, #1
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	18d4      	adds	r4, r2, r3
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	4619      	mov	r1, r3
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f001 fe2d 	bl	8003570 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]
 800191a:	e004      	b.n	8001926 <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3301      	adds	r3, #1
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	ddd7      	ble.n	80018e8 <read_dig_input+0x34>
	}

	return true;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd90      	pop	{r4, r7, pc}
 8001942:	bf00      	nop
 8001944:	0010007f 	.word	0x0010007f

08001948 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <write_dig_output+0x2e>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d80a      	bhi.n	8001976 <write_dig_output+0x2e>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <write_dig_output+0x2e>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d203      	bcs.n	8001976 <write_dig_output+0x2e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d301      	bcc.n	800197a <write_dig_output+0x32>
		return false;
 8001976:	2300      	movs	r3, #0
 8001978:	e02a      	b.n	80019d0 <write_dig_output+0x88>

	int mask = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e021      	b.n	80019c8 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <write_dig_output+0x90>)
 8001992:	4413      	add	r3, r2
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001998:	2201      	movs	r2, #1
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	401a      	ands	r2, r3
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80019b0:	7c7a      	ldrb	r2, [r7, #17]
 80019b2:	8a7b      	ldrh	r3, [r7, #18]
 80019b4:	4619      	mov	r1, r3
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f001 fdf2 	bl	80035a0 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	ddda      	ble.n	8001984 <write_dig_output+0x3c>
	}

	return true;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	0010007f 	.word	0x0010007f

080019dc <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d901      	bls.n	80019f0 <analog_read+0x14>
		return false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e008      	b.n	8001a02 <analog_read+0x26>

	config_ADC(addr3);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff f8bb 	bl	8000b6c <config_ADC>
	*value = read_ADC();
 80019f6:	f7ff f8d7 	bl	8000ba8 <read_ADC>
 80019fa:	4602      	mov	r2, r0
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	601a      	str	r2, [r3, #0]

	return true;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_GPIO_Init+0xbc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	480b      	ldr	r0, [pc, #44]	; (8001acc <MX_GPIO_Init+0xc0>)
 8001aa0:	f001 fd7e 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_GPIO_Init+0xc0>)
 8001abc:	f001 fbac 	bl	8003218 <HAL_GPIO_Init>

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <is_GPIO_pin_free>:

/* USER CODE BEGIN 2 */

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	//	ADC3

	if(port_addr == 1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x600F)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	f246 030f 	movw	r3, #24591	; 0x600f
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <is_GPIO_pin_free+0x20>
			return false;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e028      	b.n	8001b42 <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d106      	bne.n	8001b04 <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <is_GPIO_pin_free+0x34>
			return false;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e01e      	b.n	8001b42 <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d106      	bne.n	8001b18 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <is_GPIO_pin_free+0x48>
			return false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e014      	b.n	8001b42 <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d106      	bne.n	8001b2c <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <is_GPIO_pin_free+0x5c>
			return false;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e00a      	b.n	8001b42 <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d106      	bne.n	8001b40 <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <is_GPIO_pin_free+0x70>
			return false;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <is_GPIO_pin_free+0x72>

	return true;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <blink_LED>:

void blink_LED()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b54:	2101      	movs	r1, #1
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <blink_LED+0x20>)
 8001b58:	f001 fd3b 	bl	80035d2 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001b5c:	20c8      	movs	r0, #200	; 0xc8
 8001b5e:	f000 fcad 	bl	80024bc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b62:	2101      	movs	r1, #1
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <blink_LED+0x20>)
 8001b66:	f001 fd34 	bl	80035d2 <HAL_GPIO_TogglePin>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020400 	.word	0x40020400

08001b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0c2      	sub	sp, #264	; 0x108
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7a:	f000 fc42 	bl	8002402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7e:	f000 f83f 	bl	8001c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b82:	f7ff ff43 	bl	8001a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b86:	f000 fa63 	bl	8002050 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001b8a:	f7fe ff21 	bl	80009d0 <MX_ADC3_Init>
  MX_TIM10_Init();
 8001b8e:	f000 f9f1 	bl	8001f74 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <main+0x7c>)
 8001b96:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <main+0x80>)
 8001b98:	f003 fa1e 	bl	8004fd8 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001b9c:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <main+0x84>)
 8001b9e:	f000 fb37 	bl	8002210 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 8001ba2:	f000 fb05 	bl	80021b0 <has_message_from_UART>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0fa      	beq.n	8001ba2 <main+0x2e>
	  {
		  blink_LED();
 8001bac:	f7ff ffd0 	bl	8001b50 <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fb56 	bl	8002264 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f82c 	bl	8000c18 <check_command>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8001bc6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001bca:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <main+0x88>)
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	1d3a      	adds	r2, r7, #4
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8001bd6:	bf00      	nop
 8001bd8:	f000 faf6 	bl	80021c8 <is_transmitting_to_UART>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1fa      	bne.n	8001bd8 <main+0x64>

		  reset_UART();
 8001be2:	f000 fafd 	bl	80021e0 <reset_UART>
		  send_UART(PROMPT);
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <main+0x84>)
 8001be8:	f000 fb12 	bl	8002210 <send_UART>
	  if(has_message_from_UART())
 8001bec:	e7d9      	b.n	8001ba2 <main+0x2e>
 8001bee:	bf00      	nop
 8001bf0:	200002b4 	.word	0x200002b4
 8001bf4:	2001080c 	.word	0x2001080c
 8001bf8:	0800bc14 	.word	0x0800bc14
 8001bfc:	20000000 	.word	0x20000000

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	2234      	movs	r2, #52	; 0x34
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fcf0 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <SystemClock_Config+0xd8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <SystemClock_Config+0xd8>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <SystemClock_Config+0xd8>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <SystemClock_Config+0xdc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <SystemClock_Config+0xdc>)
 8001c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <SystemClock_Config+0xdc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c60:	2310      	movs	r3, #16
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c64:	2302      	movs	r3, #2
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c70:	2360      	movs	r3, #96	; 0x60
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fd0f 	bl	80036a8 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c90:	f000 f826 	bl	8001ce0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c94:	f001 fcb8 	bl	8003608 <HAL_PWREx_EnableOverDrive>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c9e:	f000 f81f 	bl	8001ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 ffa0 	bl	8003c04 <HAL_RCC_ClockConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001cca:	f000 f809 	bl	8001ce0 <Error_Handler>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3750      	adds	r7, #80	; 0x50
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x44>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x44>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x44>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x44>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 fb7c 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <ADC_IRQHandler+0x10>)
 8001d8e:	f000 fd13 	bl	80027b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000026c 	.word	0x2000026c

08001d9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001da2:	f002 fe58 	bl	8004a56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200105c4 	.word	0x200105c4

08001db0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART3_IRQHandler+0x10>)
 8001db6:	f003 f95d 	bl	8005074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2001080c 	.word	0x2001080c

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dde:	f004 fbdf 	bl	80065a0 <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2216      	movs	r2, #22
 8001de6:	601a      	str	r2, [r3, #0]
	return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe7 	bl	8001dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e06:	e7fe      	b.n	8001e06 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
	}

return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf1      	blt.n	8001e54 <_write+0x12>
	}
	return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_close>:

int _close(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_isatty>:

int _isatty(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f004 fb44 	bl	80065a0 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20080000 	.word	0x20080000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20000254 	.word	0x20000254
 8001f4c:	200108a8 	.word	0x200108a8

08001f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <MX_TIM10_Init+0x44>)
 8001f7c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000;
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f80:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f84:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000 - 1;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f92:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_TIM10_Init+0x40>)
 8001fa2:	f002 fc59 	bl	8004858 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001fac:	f7ff fe98 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200105c4 	.word	0x200105c4
 8001fb8:	40014400 	.word	0x40014400

08001fbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_TIM_Base_MspInit+0x44>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x48>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2019      	movs	r0, #25
 8001fec:	f001 f84b 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f001 f864 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40014400 	.word	0x40014400
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_TIM_PeriodElapsedCallback>:
	*adc_buf_index_cp = adc_buf_index;
}
*/
/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED

	if (htim == &htim10 )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d110      	bne.n	800203a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		adc_buf[adc_buf_index++] = read_ADC();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	1c63      	adds	r3, r4, #1
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	f7fe fdc1 	bl	8000ba8 <read_ADC>
 8002026:	4603      	mov	r3, r0
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800202a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		adc_buf_index &= ADC_BUF_SIZE;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002038:	6013      	str	r3, [r2, #0]
	}

}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	200105c4 	.word	0x200105c4
 8002048:	20000258 	.word	0x20000258
 800204c:	20010610 	.word	0x20010610

08002050 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_USART3_UART_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <MX_USART3_UART_Init+0x78>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_USART3_UART_Init+0x7c>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_USART3_UART_Init+0x80>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_USART3_UART_Init+0x84>)
 800206e:	220d      	movs	r2, #13
 8002070:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <MX_USART3_UART_Init+0x8c>)
 8002076:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 800207a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800207e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 8002094:	220c      	movs	r2, #12
 8002096:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x88>)
 80020b2:	f002 fed5 	bl	8004e60 <HAL_UART_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 80020bc:	f7ff fe10 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200103b8 	.word	0x200103b8
 80020c8:	200105bc 	.word	0x200105bc
 80020cc:	200103b4 	.word	0x200103b4
 80020d0:	200105c0 	.word	0x200105c0
 80020d4:	200103bc 	.word	0x200103bc
 80020d8:	2001080c 	.word	0x2001080c
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ae      	sub	sp, #184	; 0xb8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2290      	movs	r2, #144	; 0x90
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fa77 	bl	80065f4 <memset>
  if(uartHandle->Instance==USART3)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <HAL_UART_MspInit+0xc4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d144      	bne.n	800219a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002114:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002116:	2300      	movs	r3, #0
 8002118:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4618      	mov	r0, r3
 8002120:	f001 ff72 	bl	8004008 <HAL_RCCEx_PeriphCLKConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800212a:	f7ff fdd9 	bl	8001ce0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_MspInit+0xc8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800215e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002178:	2307      	movs	r3, #7
 800217a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002182:	4619      	mov	r1, r3
 8002184:	4809      	ldr	r0, [pc, #36]	; (80021ac <HAL_UART_MspInit+0xcc>)
 8002186:	f001 f847 	bl	8003218 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2027      	movs	r0, #39	; 0x27
 8002190:	f000 ff79 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002194:	2027      	movs	r0, #39	; 0x27
 8002196:	f000 ff92 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800219a:	bf00      	nop
 800219c:	37b8      	adds	r7, #184	; 0xb8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40004800 	.word	0x40004800
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020c00 	.word	0x40020c00

080021b0 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	return flagCPP;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <has_message_from_UART+0x14>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200103b8 	.word	0x200103b8

080021c8 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	return flagCPE;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <is_transmitting_to_UART+0x14>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200105bc 	.word	0x200105bc

080021e0 <reset_UART>:

void reset_UART()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80021e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e8:	2100      	movs	r1, #0
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <reset_UART+0x24>)
 80021ec:	f004 fa02 	bl	80065f4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	4904      	ldr	r1, [pc, #16]	; (8002204 <reset_UART+0x24>)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <reset_UART+0x28>)
 80021f6:	f002 feef 	bl	8004fd8 <HAL_UART_Receive_IT>
	flagCPP = false;
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <reset_UART+0x2c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200002b4 	.word	0x200002b4
 8002208:	2001080c 	.word	0x2001080c
 800220c:	200103b8 	.word	0x200103b8

08002210 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <send_UART+0x44>)
 8002220:	f005 f8e1 	bl	80073e6 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <send_UART+0x44>)
 8002226:	f7fe f80b 	bl	8000240 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <send_UART+0x44>)
 8002230:	4413      	add	r3, r2
 8002232:	4909      	ldr	r1, [pc, #36]	; (8002258 <send_UART+0x48>)
 8002234:	461a      	mov	r2, r3
 8002236:	460b      	mov	r3, r1
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <send_UART+0x4c>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <send_UART+0x44>)
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <send_UART+0x50>)
 8002248:	f002 fe58 	bl	8004efc <HAL_UART_Transmit_IT>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200103bc 	.word	0x200103bc
 8002258:	0800bc18 	.word	0x0800bc18
 800225c:	200105bc 	.word	0x200105bc
 8002260:	2001080c 	.word	0x2001080c

08002264 <read_UART>:

void read_UART(char* msg_to_read)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 800226c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <read_UART+0x1c>)
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f005 f8b7 	bl	80073e6 <strncpy>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200002b4 	.word	0x200002b4

08002284 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_UART_RxCpltCallback+0xa8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d146      	bne.n	8002322 <HAL_UART_RxCpltCallback+0x9e>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r') //		CARRIAGE RETURN
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	2b0d      	cmp	r3, #13
 800229e:	d106      	bne.n	80022ae <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_UART_RxCpltCallback+0xa8>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e03a      	b.n	8002324 <HAL_UART_RxCpltCallback+0xa0>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d10e      	bne.n	80022d8 <HAL_UART_RxCpltCallback+0x54>
		{
			if(UART_RX_index == 0)
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_RxCpltCallback+0x4a>
				UART_RX_index--;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e004      	b.n	80022d8 <HAL_UART_RxCpltCallback+0x54>
			else
				UART_RX_index -= 2;
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b02      	subs	r3, #2
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022d6:	6013      	str	r3, [r2, #0]
		}

		if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	2b1b      	cmp	r3, #27
 80022e2:	d103      	bne.n	80022ec <HAL_UART_RxCpltCallback+0x68>
			UART_RX_index = -1;
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022e6:	f04f 32ff 	mov.w	r2, #4294967295
 80022ea:	601a      	str	r2, [r3, #0]

		if(UART_RX_buffer[UART_RX_index] == '$') //		$
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a10      	ldr	r2, [pc, #64]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	2b24      	cmp	r3, #36	; 0x24
 80022f6:	d105      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x80>
		{
			UART_RX_index = 0;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 8002300:	2224      	movs	r2, #36	; 0x24
 8002302:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_UART_RxCpltCallback+0xac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_UART_RxCpltCallback+0xb0>)
 8002314:	4413      	add	r3, r2
 8002316:	2201      	movs	r2, #1
 8002318:	4619      	mov	r1, r3
 800231a:	4807      	ldr	r0, [pc, #28]	; (8002338 <HAL_UART_RxCpltCallback+0xb4>)
 800231c:	f002 fe5c 	bl	8004fd8 <HAL_UART_Receive_IT>
 8002320:	e000      	b.n	8002324 <HAL_UART_RxCpltCallback+0xa0>
		return;
 8002322:	bf00      	nop
	}
}
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200103b8 	.word	0x200103b8
 8002330:	200103b4 	.word	0x200103b4
 8002334:	200002b4 	.word	0x200002b4
 8002338:	2001080c 	.word	0x2001080c

0800233c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_UART_TxCpltCallback+0x64>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f083 0301 	eor.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d122      	bne.n	8002398 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_UART_TxCpltCallback+0x6c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	2b0d      	cmp	r3, #13
 800235c:	d10d      	bne.n	800237a <HAL_UART_TxCpltCallback+0x3e>
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_UART_TxCpltCallback+0x6c>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	2b0a      	cmp	r3, #10
 800236a:	d006      	beq.n	800237a <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_UART_TxCpltCallback+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e00f      	b.n	800239a <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_UART_TxCpltCallback+0x68>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_UART_TxCpltCallback+0x6c>)
 800238a:	4413      	add	r3, r2
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_UART_TxCpltCallback+0x70>)
 8002392:	f002 fdb3 	bl	8004efc <HAL_UART_Transmit_IT>
 8002396:	e000      	b.n	800239a <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002398:	bf00      	nop
}
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200105bc 	.word	0x200105bc
 80023a4:	200105c0 	.word	0x200105c0
 80023a8:	200103bc 	.word	0x200103bc
 80023ac:	2001080c 	.word	0x2001080c

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023da:	f7ff fdb9 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f004 f8e5 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff fbc7 	bl	8001b74 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80023f4:	0800c11c 	.word	0x0800c11c
  ldr r2, =_sbss
 80023f8:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80023fc:	200108a4 	.word	0x200108a4

08002400 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <CAN1_RX0_IRQHandler>

08002402 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002406:	2003      	movs	r0, #3
 8002408:	f000 fe32 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240c:	2000      	movs	r0, #0
 800240e:	f000 f805 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002412:	f7ff fc6b 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fe4d 	bl	80030da <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 fe15 	bl	8003086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000054 	.word	0x20000054
 8002474:	2000005c 	.word	0x2000005c
 8002478:	20000058 	.word	0x20000058

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	2000005c 	.word	0x2000005c
 80024a0:	20010890 	.word	0x20010890

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20010890 	.word	0x20010890

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000005c 	.word	0x2000005c

08002504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e031      	b.n	800257e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe faa6 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_ADC_Init+0x84>)
 8002548:	4013      	ands	r3, r2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fbb8 	bl	8002cc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	ffffeefd 	.word	0xffffeefd

0800258c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Start_IT+0x1a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0b5      	b.n	8002712 <HAL_ADC_Start_IT+0x186>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d018      	beq.n	80025ee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_ADC_Start_IT+0x194>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a54      	ldr	r2, [pc, #336]	; (8002724 <HAL_ADC_Start_IT+0x198>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d17d      	bne.n	80026f8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_ADC_Start_IT+0x19c>)
 8002602:	4013      	ands	r3, r2
 8002604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d106      	bne.n	8002646 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f023 0206 	bic.w	r2, r3, #6
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
 8002644:	e002      	b.n	800264c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800265c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_ADC_Start_IT+0x1a0>)
 800266a:	430b      	orrs	r3, r1
 800266c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_ADC_Start_IT+0x1a4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d143      	bne.n	8002710 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e03a      	b.n	8002710 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_ADC_Start_IT+0x1a8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10e      	bne.n	80026c2 <HAL_ADC_Start_IT+0x136>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_ADC_Start_IT+0x1a4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d120      	bne.n	8002710 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_ADC_Start_IT+0x1ac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d11b      	bne.n	8002710 <HAL_ADC_Start_IT+0x184>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d114      	bne.n	8002710 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e00b      	b.n	8002710 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000054 	.word	0x20000054
 8002724:	431bde83 	.word	0x431bde83
 8002728:	fffff8fe 	.word	0xfffff8fe
 800272c:	04000020 	.word	0x04000020
 8002730:	40012300 	.word	0x40012300
 8002734:	40012000 	.word	0x40012000
 8002738:	40012200 	.word	0x40012200

0800273c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Stop_IT+0x16>
 800274e:	2302      	movs	r3, #2
 8002750:	e027      	b.n	80027a2 <HAL_ADC_Stop_IT+0x66>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_ADC_Stop_IT+0x74>)
 8002784:	400b      	ands	r3, r1
 8002786:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_ADC_Stop_IT+0x78>)
 800278e:	4013      	ands	r3, r2
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	fbffffdf 	.word	0xfbffffdf
 80027b4:	ffffeefe 	.word	0xffffeefe

080027b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d049      	beq.n	8002882 <HAL_ADC_IRQHandler+0xca>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d046      	beq.n	8002882 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d12b      	bne.n	8002872 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d127      	bne.n	8002872 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0220 	bic.w	r2, r2, #32
 800284c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f9b8 	bl	8000be8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0212 	mvn.w	r2, #18
 8002880:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d057      	beq.n	8002948 <HAL_ADC_IRQHandler+0x190>
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d054      	beq.n	8002948 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d139      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d124      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11d      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002912:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fabf 	bl	8002ebc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 020c 	mvn.w	r2, #12
 8002946:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d017      	beq.n	800298e <HAL_ADC_IRQHandler+0x1d6>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d014      	beq.n	800298e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10d      	bne.n	800298e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f837 	bl	80029f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0201 	mvn.w	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800299c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x218>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0202 	orr.w	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0220 	mvn.w	r2, #32
 80029be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f820 	bl	8002a06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0220 	mvn.w	r2, #32
 80029ce:	601a      	str	r2, [r3, #0]
  }
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e136      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x28a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d93a      	bls.n	8002abe <HAL_ADC_ConfigChannel+0xa2>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a50:	d035      	beq.n	8002abe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	3b1e      	subs	r3, #30
 8002a68:	2207      	movs	r2, #7
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a8d      	ldr	r2, [pc, #564]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10a      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	061a      	lsls	r2, r3, #24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	e035      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4403      	add	r3, r0
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002abc:	e022      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6919      	ldr	r1, [r3, #16]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6919      	ldr	r1, [r3, #16]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4403      	add	r3, r0
 8002afa:	409a      	lsls	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d824      	bhi.n	8002b56 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b05      	subs	r3, #5
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b05      	subs	r3, #5
 8002b48:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34
 8002b54:	e04c      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d824      	bhi.n	8002ba8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b23      	subs	r3, #35	; 0x23
 8002b70:	221f      	movs	r2, #31
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b23      	subs	r3, #35	; 0x23
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba6:	e023      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b41      	subs	r3, #65	; 0x41
 8002bba:	221f      	movs	r2, #31
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b41      	subs	r3, #65	; 0x41
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10a      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1f4>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10f      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d10b      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d12b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x23a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	d122      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0c9a      	lsrs	r2, r3, #18
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c8e:	e002      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	10000012 	.word	0x10000012
 8002cb8:	40012000 	.word	0x40012000
 8002cbc:	40012300 	.word	0x40012300
 8002cc0:	20000054 	.word	0x20000054
 8002cc4:	431bde83 	.word	0x431bde83

08002cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cdc:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4973      	ldr	r1, [pc, #460]	; (8002eb4 <ADC_Init+0x1ec>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <ADC_Init+0x1f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e00f      	b.n	8002dc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0202 	bic.w	r2, r2, #2
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	005a      	lsls	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	035a      	lsls	r2, r3, #13
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e007      	b.n	8002e38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	051a      	lsls	r2, r3, #20
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7a:	025a      	lsls	r2, r3, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	029a      	lsls	r2, r3, #10
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	0f000001 	.word	0x0f000001

08002ebc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <__NVIC_SetPriorityGrouping+0x40>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <__NVIC_SetPriorityGrouping+0x40>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	60d3      	str	r3, [r2, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00
 8002f14:	05fa0000 	.word	0x05fa0000

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff29 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff3e 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa2 	bl	800302c <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff f9d0 	bl	80024a4 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d008      	beq.n	8003124 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e052      	b.n	80031ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0216 	bic.w	r2, r2, #22
 8003132:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003142:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_DMA_Abort+0x62>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0208 	bic.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003174:	e013      	b.n	800319e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003176:	f7ff f995 	bl	80024a4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b05      	cmp	r3, #5
 8003182:	d90c      	bls.n	800319e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e015      	b.n	80031ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e4      	bne.n	8003176 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	223f      	movs	r2, #63	; 0x3f
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e00c      	b.n	800320a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2205      	movs	r2, #5
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e175      	b.n	8003524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	f040 8164 	bne.w	800351e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d005      	beq.n	800326e <HAL_GPIO_Init+0x56>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d130      	bne.n	80032d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a4:	2201      	movs	r2, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 0201 	and.w	r2, r3, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d017      	beq.n	800330c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80be 	beq.w	800351e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_GPIO_Init+0x324>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a65      	ldr	r2, [pc, #404]	; (800353c <HAL_GPIO_Init+0x324>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_GPIO_Init+0x324>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033ba:	4a61      	ldr	r2, [pc, #388]	; (8003540 <HAL_GPIO_Init+0x328>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_GPIO_Init+0x32c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d037      	beq.n	8003456 <HAL_GPIO_Init+0x23e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_GPIO_Init+0x330>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_GPIO_Init+0x23a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_GPIO_Init+0x334>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02b      	beq.n	800344e <HAL_GPIO_Init+0x236>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_GPIO_Init+0x338>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d025      	beq.n	800344a <HAL_GPIO_Init+0x232>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a54      	ldr	r2, [pc, #336]	; (8003554 <HAL_GPIO_Init+0x33c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01f      	beq.n	8003446 <HAL_GPIO_Init+0x22e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_GPIO_Init+0x340>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x22a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_GPIO_Init+0x344>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x226>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a51      	ldr	r2, [pc, #324]	; (8003560 <HAL_GPIO_Init+0x348>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x222>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a50      	ldr	r2, [pc, #320]	; (8003564 <HAL_GPIO_Init+0x34c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_GPIO_Init+0x350>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x21a>
 800342e:	2309      	movs	r3, #9
 8003430:	e012      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003432:	230a      	movs	r3, #10
 8003434:	e010      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003436:	2308      	movs	r3, #8
 8003438:	e00e      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800343a:	2307      	movs	r3, #7
 800343c:	e00c      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800343e:	2306      	movs	r3, #6
 8003440:	e00a      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003442:	2305      	movs	r3, #5
 8003444:	e008      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003446:	2304      	movs	r3, #4
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <HAL_GPIO_Init+0x240>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x240>
 8003456:	2300      	movs	r3, #0
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	4093      	lsls	r3, r2
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003468:	4935      	ldr	r1, [pc, #212]	; (8003540 <HAL_GPIO_Init+0x328>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_GPIO_Init+0x354>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <HAL_GPIO_Init+0x354>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_GPIO_Init+0x354>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c4:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_GPIO_Init+0x354>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_GPIO_Init+0x354>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_GPIO_Init+0x354>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_GPIO_Init+0x354>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_GPIO_Init+0x354>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	f67f ae86 	bls.w	8003238 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40021400 	.word	0x40021400
 800355c:	40021800 	.word	0x40021800
 8003560:	40021c00 	.word	0x40021c00
 8003564:	40022000 	.word	0x40022000
 8003568:	40022400 	.word	0x40022400
 800356c:	40013c00 	.word	0x40013c00

08003570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	e001      	b.n	8003592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
 80035ac:	4613      	mov	r3, r2
 80035ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b0:	787b      	ldrb	r3, [r7, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035bc:	e003      	b.n	80035c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	041a      	lsls	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	619a      	str	r2, [r3, #24]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	460b      	mov	r3, r1
 80035dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035e4:	887a      	ldrh	r2, [r7, #2]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4013      	ands	r3, r2
 80035ea:	041a      	lsls	r2, r3, #16
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	400b      	ands	r3, r1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	619a      	str	r2, [r3, #24]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003636:	f7fe ff35 	bl	80024a4 <HAL_GetTick>
 800363a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800363c:	e009      	b.n	8003652 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800363e:	f7fe ff31 	bl	80024a4 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364c:	d901      	bls.n	8003652 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e022      	b.n	8003698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d1ee      	bne.n	800363e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800366c:	f7fe ff1a 	bl	80024a4 <HAL_GetTick>
 8003670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003672:	e009      	b.n	8003688 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003674:	f7fe ff16 	bl	80024a4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003682:	d901      	bls.n	8003688 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e007      	b.n	8003698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003694:	d1ee      	bne.n	8003674 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e29b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036cc:	4b96      	ldr	r3, [pc, #600]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d00c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d8:	4b93      	ldr	r3, [pc, #588]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d112      	bne.n	800370a <HAL_RCC_OscConfig+0x62>
 80036e4:	4b90      	ldr	r3, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d10b      	bne.n	800370a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f2:	4b8d      	ldr	r3, [pc, #564]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d06c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x130>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d168      	bne.n	80037d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e275      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x7a>
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e02e      	b.n	8003780 <HAL_RCC_OscConfig+0xd8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x9c>
 800372a:	4b7f      	ldr	r3, [pc, #508]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7e      	ldr	r2, [pc, #504]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b7c      	ldr	r3, [pc, #496]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7b      	ldr	r2, [pc, #492]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800373c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0xd8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0xc0>
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a72      	ldr	r2, [pc, #456]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0xd8>
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6b      	ldr	r2, [pc, #428]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe fe8c 	bl	80024a4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fe88 	bl	80024a4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e229      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b61      	ldr	r3, [pc, #388]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0xe8>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe fe78 	bl	80024a4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fe74 	bl	80024a4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e215      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	4b57      	ldr	r3, [pc, #348]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x110>
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d069      	beq.n	80038ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e6:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x190>
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_RCC_OscConfig+0x17a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1e9      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	493d      	ldr	r1, [pc, #244]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	e040      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d023      	beq.n	8003888 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fe2a 	bl	80024a4 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003854:	f7fe fe26 	bl	80024a4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1c7      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4929      	ldr	r1, [pc, #164]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
 8003886:	e018      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fe06 	bl	80024a4 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fe02 	bl	80024a4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1a3      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d038      	beq.n	8003938 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d019      	beq.n	8003902 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fe fde3 	bl	80024a4 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e2:	f7fe fddf 	bl	80024a4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e180      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x23a>
 8003900:	e01a      	b.n	8003938 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <HAL_RCC_OscConfig+0x280>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fe fdc9 	bl	80024a4 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00a      	b.n	800392c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe fdc5 	bl	80024a4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d903      	bls.n	800392c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e166      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
 8003928:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ee      	bne.n	8003916 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a4 	beq.w	8003a8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10d      	bne.n	800396e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b89      	ldr	r3, [pc, #548]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a88      	ldr	r2, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b86      	ldr	r3, [pc, #536]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396e:	4b83      	ldr	r3, [pc, #524]	; (8003b7c <HAL_RCC_OscConfig+0x4d4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d118      	bne.n	80039ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800397a:	4b80      	ldr	r3, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x4d4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7f      	ldr	r2, [pc, #508]	; (8003b7c <HAL_RCC_OscConfig+0x4d4>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fe fd8d 	bl	80024a4 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fe fd89 	bl	80024a4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b64      	cmp	r3, #100	; 0x64
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e12a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a0:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x4d4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x31a>
 80039b4:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a6f      	ldr	r2, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e02d      	b.n	8003a1e <HAL_RCC_OscConfig+0x376>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x33c>
 80039ca:	4b6b      	ldr	r3, [pc, #428]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
 80039d6:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a67      	ldr	r2, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	e01c      	b.n	8003a1e <HAL_RCC_OscConfig+0x376>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x35e>
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
 8003a04:	e00b      	b.n	8003a1e <HAL_RCC_OscConfig+0x376>
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a5b      	ldr	r2, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fe fd3d 	bl	80024a4 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe fd39 	bl	80024a4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0d8      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RCC_OscConfig+0x386>
 8003a50:	e014      	b.n	8003a7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe fd27 	bl	80024a4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fd23 	bl	80024a4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0c2      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ee      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a3c      	ldr	r2, [pc, #240]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80ae 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d06d      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d14b      	bne.n	8003b44 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fcf4 	bl	80024a4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fcf0 	bl	80024a4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e091      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	491b      	ldr	r1, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fcc2 	bl	80024a4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fcbe 	bl	80024a4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e05f      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x47c>
 8003b42:	e057      	b.n	8003bf4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe fca8 	bl	80024a4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fe fca4 	bl	80024a4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e045      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4b0>
 8003b76:	e03d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x54c>
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <HAL_RCC_OscConfig+0x558>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d030      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d129      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d122      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d119      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d10f      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d107      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d0      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d910      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 020f 	bic.w	r2, r3, #15
 8003c32:	4965      	ldr	r1, [pc, #404]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d040      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d115      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e073      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4936      	ldr	r1, [pc, #216]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fbd4 	bl	80024a4 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe fbd0 	bl	80024a4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e053      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d210      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 020f 	bic.w	r2, r3, #15
 8003d3e:	4922      	ldr	r1, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1d4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fb30 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800bc28 	.word	0x0800bc28
 8003dd4:	20000054 	.word	0x20000054
 8003dd8:	20000058 	.word	0x20000058

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	2300      	movs	r3, #0
 8003dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80bd 	bhi.w	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e0b7      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e12:	60bb      	str	r3, [r7, #8]
      break;
 8003e14:	e0b7      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e18:	60bb      	str	r3, [r7, #8]
      break;
 8003e1a:	e0b4      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04d      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	ea02 0800 	and.w	r8, r2, r0
 8003e4a:	ea03 0901 	and.w	r9, r3, r1
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	014b      	lsls	r3, r1, #5
 8003e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e60:	0142      	lsls	r2, r0, #5
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	ebb0 0008 	subs.w	r0, r0, r8
 8003e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e7c:	0182      	lsls	r2, r0, #6
 8003e7e:	1a12      	subs	r2, r2, r0
 8003e80:	eb63 0301 	sbc.w	r3, r3, r1
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	00d9      	lsls	r1, r3, #3
 8003e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e92:	00d0      	lsls	r0, r2, #3
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	eb12 0208 	adds.w	r2, r2, r8
 8003e9c:	eb43 0309 	adc.w	r3, r3, r9
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0259      	lsls	r1, r3, #9
 8003eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003eae:	0250      	lsls	r0, r2, #9
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f7fc fbd2 	bl	8000668 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e04a      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	ea02 0400 	and.w	r4, r2, r0
 8003ee6:	ea03 0501 	and.w	r5, r3, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	014b      	lsls	r3, r1, #5
 8003ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003efc:	0142      	lsls	r2, r0, #5
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	1b00      	subs	r0, r0, r4
 8003f04:	eb61 0105 	sbc.w	r1, r1, r5
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	018b      	lsls	r3, r1, #6
 8003f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f16:	0182      	lsls	r2, r0, #6
 8003f18:	1a12      	subs	r2, r2, r0
 8003f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	00d9      	lsls	r1, r3, #3
 8003f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2c:	00d0      	lsls	r0, r2, #3
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	1912      	adds	r2, r2, r4
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0299      	lsls	r1, r3, #10
 8003f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f46:	0290      	lsls	r0, r2, #10
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc fb86 	bl	8000668 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f82:	60bb      	str	r3, [r7, #8]
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	68bb      	ldr	r3, [r7, #8]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000054 	.word	0x20000054

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800bc38 	.word	0x0800bc38

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff ffdc 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	0800bc38 	.word	0x0800bc38

08004008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a68      	ldr	r2, [pc, #416]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800403a:	6093      	str	r3, [r2, #8]
 800403c:	4b66      	ldr	r3, [pc, #408]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	4964      	ldr	r1, [pc, #400]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004062:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	4959      	ldr	r1, [pc, #356]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004080:	d101      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d017      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800409e:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	494a      	ldr	r1, [pc, #296]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040bc:	d101      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 808b 	beq.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ec:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a39      	ldr	r2, [pc, #228]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
 80040f8:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fe f9c8 	bl	80024a4 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fe f9c4 	bl	80024a4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e38f      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004136:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d035      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d02e      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004176:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d114      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe f98c 	bl	80024a4 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fe f988 	bl	80024a4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e351      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041be:	d111      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041ce:	400b      	ands	r3, r1
 80041d0:	4901      	ldr	r1, [pc, #4]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40007000 	.word	0x40007000
 80041e0:	0ffffcff 	.word	0x0ffffcff
 80041e4:	4bb3      	ldr	r3, [pc, #716]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4ab2      	ldr	r2, [pc, #712]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041ee:	6093      	str	r3, [r2, #8]
 80041f0:	4bb0      	ldr	r3, [pc, #704]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	49ad      	ldr	r1, [pc, #692]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800420e:	4ba9      	ldr	r3, [pc, #676]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004214:	4aa7      	ldr	r2, [pc, #668]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800421a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800421e:	4ba5      	ldr	r3, [pc, #660]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004220:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	49a2      	ldr	r1, [pc, #648]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423c:	4b9d      	ldr	r3, [pc, #628]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424a:	499a      	ldr	r1, [pc, #616]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800425e:	4b95      	ldr	r3, [pc, #596]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426c:	4991      	ldr	r1, [pc, #580]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004280:	4b8c      	ldr	r3, [pc, #560]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428e:	4989      	ldr	r1, [pc, #548]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042a2:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4980      	ldr	r1, [pc, #512]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c4:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4978      	ldr	r1, [pc, #480]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f023 020c 	bic.w	r2, r3, #12
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	496f      	ldr	r1, [pc, #444]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004308:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004316:	4967      	ldr	r1, [pc, #412]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800432a:	4b62      	ldr	r3, [pc, #392]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	495e      	ldr	r1, [pc, #376]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	4956      	ldr	r1, [pc, #344]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800436e:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	494d      	ldr	r1, [pc, #308]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004390:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439e:	4945      	ldr	r1, [pc, #276]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043b2:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	493c      	ldr	r1, [pc, #240]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d011      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004404:	492b      	ldr	r1, [pc, #172]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	491b      	ldr	r1, [pc, #108]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004458:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004468:	4912      	ldr	r1, [pc, #72]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	4909      	ldr	r1, [pc, #36]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00f      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	4986      	ldr	r1, [pc, #536]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044cc:	4b81      	ldr	r3, [pc, #516]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044dc:	497d      	ldr	r1, [pc, #500]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d006      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80d6 	beq.w	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f8:	4b76      	ldr	r3, [pc, #472]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a75      	ldr	r2, [pc, #468]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fd ffce 	bl	80024a4 <HAL_GetTick>
 8004508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800450c:	f7fd ffca 	bl	80024a4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e195      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800451e:	4b6d      	ldr	r3, [pc, #436]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d021      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004552:	0e1b      	lsrs	r3, r3, #24
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	019a      	lsls	r2, r3, #6
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	4958      	ldr	r1, [pc, #352]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a4:	d129      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045a6:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045b4:	4b47      	ldr	r3, [pc, #284]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ba:	0f1b      	lsrs	r3, r3, #28
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	019a      	lsls	r2, r3, #6
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	061b      	lsls	r3, r3, #24
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	071b      	lsls	r3, r3, #28
 80045da:	493e      	ldr	r1, [pc, #248]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045e2:	4b3c      	ldr	r3, [pc, #240]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	f023 021f 	bic.w	r2, r3, #31
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4938      	ldr	r1, [pc, #224]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004606:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	0f1b      	lsrs	r3, r3, #28
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	019a      	lsls	r2, r3, #6
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	4926      	ldr	r1, [pc, #152]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	491a      	ldr	r1, [pc, #104]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800467c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467e:	f7fd ff11 	bl	80024a4 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004686:	f7fd ff0d 	bl	80024a4 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0d8      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	f040 80ce 	bne.w	8004848 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd fef4 	bl	80024a4 <HAL_GetTick>
 80046bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046be:	e00b      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046c0:	f7fd fef0 	bl	80024a4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d904      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0bb      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d8:	4b5e      	ldr	r3, [pc, #376]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e4:	d0ec      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02e      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d12a      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800470e:	4b51      	ldr	r3, [pc, #324]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800471c:	4b4d      	ldr	r3, [pc, #308]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	0f1b      	lsrs	r3, r3, #28
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	019a      	lsls	r2, r3, #6
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	071b      	lsls	r3, r3, #28
 8004742:	4944      	ldr	r1, [pc, #272]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800474a:	4b42      	ldr	r3, [pc, #264]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	493d      	ldr	r1, [pc, #244]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d022      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004778:	d11d      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	0f1b      	lsrs	r3, r3, #28
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	019a      	lsls	r2, r3, #6
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	071b      	lsls	r3, r3, #28
 80047ae:	4929      	ldr	r1, [pc, #164]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d028      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	0e1b      	lsrs	r3, r3, #24
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d0:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	0c1b      	lsrs	r3, r3, #16
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	019a      	lsls	r2, r3, #6
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	071b      	lsls	r3, r3, #28
 80047f6:	4917      	ldr	r1, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4911      	ldr	r1, [pc, #68]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fd fe40 	bl	80024a4 <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004828:	f7fd fe3c 	bl	80024a4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e007      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004846:	d1ef      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e049      	b.n	80048fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fb9c 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fa24 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d001      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e054      	b.n	80049ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d01d      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_TIM_Base_Start_IT+0xe4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d115      	bne.n	80049b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_TIM_Base_Start_IT+0xec>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d015      	beq.n	80049c6 <HAL_TIM_Base_Start_IT+0xbe>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d011      	beq.n	80049c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	e008      	b.n	80049c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40010400 	.word	0x40010400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40001800 	.word	0x40001800
 80049f4:	00010007 	.word	0x00010007

080049f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a1a      	ldr	r2, [r3, #32]
 8004a16:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10f      	bne.n	8004a40 <HAL_TIM_Base_Stop_IT+0x48>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a1a      	ldr	r2, [r3, #32]
 8004a26:	f240 4344 	movw	r3, #1092	; 0x444
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_Base_Stop_IT+0x48>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d122      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0202 	mvn.w	r2, #2
 8004a82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f905 	bl	8004ca8 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f8f7 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f908 	bl	8004cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d122      	bne.n	8004b06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d11b      	bne.n	8004b06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0204 	mvn.w	r2, #4
 8004ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f8db 	bl	8004ca8 <HAL_TIM_IC_CaptureCallback>
 8004af2:	e005      	b.n	8004b00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8cd 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8de 	bl	8004cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0208 	mvn.w	r2, #8
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8b1 	bl	8004ca8 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f8a3 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8b4 	bl	8004cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d122      	bne.n	8004bae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d11b      	bne.n	8004bae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0210 	mvn.w	r2, #16
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2208      	movs	r2, #8
 8004b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f887 	bl	8004ca8 <HAL_TIM_IC_CaptureCallback>
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f879 	bl	8004c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f88a 	bl	8004cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0201 	mvn.w	r2, #1
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fd fa17 	bl	8002008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f919 	bl	8004e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f90c 	bl	8004e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d10e      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d107      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f838 	bl	8004cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0220 	mvn.w	r2, #32
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8cc 	bl	8004e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a40      	ldr	r2, [pc, #256]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d00f      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3d      	ldr	r2, [pc, #244]	; (8004dfc <TIM_Base_SetConfig+0x118>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <TIM_Base_SetConfig+0x11c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <TIM_Base_SetConfig+0x120>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d02b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d027      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <TIM_Base_SetConfig+0x118>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d023      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <TIM_Base_SetConfig+0x11c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <TIM_Base_SetConfig+0x120>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <TIM_Base_SetConfig+0x128>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <TIM_Base_SetConfig+0x12c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <TIM_Base_SetConfig+0x130>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <TIM_Base_SetConfig+0x134>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <TIM_Base_SetConfig+0x138>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <TIM_Base_SetConfig+0x13c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0xf8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	40001800 	.word	0x40001800
 8004e1c:	40001c00 	.word	0x40001c00
 8004e20:	40002000 	.word	0x40002000

08004e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e040      	b.n	8004ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fd f92c 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	; 0x24
 8004e8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fbe8 	bl	8005674 <UART_SetConfig>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e022      	b.n	8004ef4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fe3e 	bl	8005b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fec5 	bl	8005c7c <UART_CheckIdleState>
 8004ef2:	4603      	mov	r3, r0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b08b      	sub	sp, #44	; 0x2c
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d156      	bne.n	8004fc0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_UART_Transmit_IT+0x22>
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e04f      	b.n	8004fc2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_UART_Transmit_IT+0x34>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e048      	b.n	8004fc2 <HAL_UART_Transmit_IT+0xc6>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2221      	movs	r2, #33	; 0x21
 8004f60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	d107      	bne.n	8004f7c <HAL_UART_Transmit_IT+0x80>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <HAL_UART_Transmit_IT+0xd4>)
 8004f78:	669a      	str	r2, [r3, #104]	; 0x68
 8004f7a:	e002      	b.n	8004f82 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_UART_Transmit_IT+0xd8>)
 8004f80:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	613b      	str	r3, [r7, #16]
   return(result);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	623b      	str	r3, [r7, #32]
 8004faa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	69f9      	ldr	r1, [r7, #28]
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	372c      	adds	r7, #44	; 0x2c
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	080061d5 	.word	0x080061d5
 8004fd4:	0800611f 	.word	0x0800611f

08004fd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d13d      	bne.n	800506a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_UART_Receive_IT+0x22>
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e036      	b.n	800506c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_UART_Receive_IT+0x34>
 8005008:	2302      	movs	r3, #2
 800500a:	e02f      	b.n	800506c <HAL_UART_Receive_IT+0x94>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	613b      	str	r3, [r7, #16]
   return(result);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	623b      	str	r3, [r7, #32]
 8005048:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	61bb      	str	r3, [r7, #24]
   return(result);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	461a      	mov	r2, r3
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 ff19 	bl	8005e98 <UART_Start_Receive_IT>
 8005066:	4603      	mov	r3, r0
 8005068:	e000      	b.n	800506c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0ba      	sub	sp, #232	; 0xe8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800509a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800509e:	f640 030f 	movw	r3, #2063	; 0x80f
 80050a2:	4013      	ands	r3, r2
 80050a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80050a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d115      	bne.n	80050dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00f      	beq.n	80050dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 82a4 	beq.w	800561a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
      }
      return;
 80050da:	e29e      	b.n	800561a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8117 	beq.w	8005314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80050f6:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_UART_IRQHandler+0x298>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 810a 	beq.w	8005314 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d011      	beq.n	8005130 <HAL_UART_IRQHandler+0xbc>
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d011      	beq.n	8005160 <HAL_UART_IRQHandler+0xec>
 800513c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2202      	movs	r2, #2
 800514e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005156:	f043 0204 	orr.w	r2, r3, #4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d011      	beq.n	8005190 <HAL_UART_IRQHandler+0x11c>
 800516c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2204      	movs	r2, #4
 800517e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005186:	f043 0202 	orr.w	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2208      	movs	r2, #8
 80051ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c2:	f043 0208 	orr.w	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_UART_IRQHandler+0x18a>
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00c      	beq.n	80051fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 820a 	beq.w	800561e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d005      	beq.n	8005256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800524a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800524e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04f      	beq.n	80052f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fee8 	bl	800602c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d141      	bne.n	80052ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005296:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800529a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1d9      	bne.n	800526a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d013      	beq.n	80052e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <HAL_UART_IRQHandler+0x29c>)
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd ff81 	bl	80031d2 <HAL_DMA_Abort_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d017      	beq.n	8005306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	e00f      	b.n	8005306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9a4 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ec:	e00b      	b.n	8005306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9a0 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	e007      	b.n	8005306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f99c 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005304:	e18b      	b.n	800561e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005306:	bf00      	nop
    return;
 8005308:	e189      	b.n	800561e <HAL_UART_IRQHandler+0x5aa>
 800530a:	bf00      	nop
 800530c:	04000120 	.word	0x04000120
 8005310:	080060f3 	.word	0x080060f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 8144 	bne.w	80055a6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 813d 	beq.w	80055a6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8136 	beq.w	80055a6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2210      	movs	r2, #16
 8005340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	f040 80b2 	bne.w	80054b6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800535e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 815d 	beq.w	8005622 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800536e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005372:	429a      	cmp	r2, r3
 8005374:	f080 8155 	bcs.w	8005622 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800537e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538c:	f000 8085 	beq.w	800549a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1da      	bne.n	8005390 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005402:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005406:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e1      	bne.n	80053da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800543a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800543c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005440:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e3      	bne.n	8005416 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800547c:	65bb      	str	r3, [r7, #88]	; 0x58
 800547e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e4      	bne.n	800545a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	4618      	mov	r0, r3
 8005496:	f7fd fe2c 	bl	80030f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8ca 	bl	8005648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b4:	e0b5      	b.n	8005622 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80a7 	beq.w	8005626 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80054d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80a2 	beq.w	8005626 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005504:	647b      	str	r3, [r7, #68]	; 0x44
 8005506:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800550a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e4      	bne.n	80054e2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	623b      	str	r3, [r7, #32]
   return(result);
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800553c:	633a      	str	r2, [r7, #48]	; 0x30
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e3      	bne.n	8005518 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	69b9      	ldr	r1, [r7, #24]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	617b      	str	r3, [r7, #20]
   return(result);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e4      	bne.n	8005562 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f852 	bl	8005648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055a4:	e03f      	b.n	8005626 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <HAL_UART_IRQHandler+0x55c>
 80055b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f849 	bl	8005660 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ce:	e02d      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01c      	beq.n	800562a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
    }
    return;
 80055f8:	e017      	b.n	800562a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d012      	beq.n	800562c <HAL_UART_IRQHandler+0x5b8>
 8005606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fe3e 	bl	8006294 <UART_EndTransmit_IT>
    return;
 8005618:	e008      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
      return;
 800561a:	bf00      	nop
 800561c:	e006      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
    return;
 800561e:	bf00      	nop
 8005620:	e004      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005622:	bf00      	nop
 8005624:	e002      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <HAL_UART_IRQHandler+0x5b8>
    return;
 800562a:	bf00      	nop
  }

}
 800562c:	37e8      	adds	r7, #232	; 0xe8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop

08005634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4ba7      	ldr	r3, [pc, #668]	; (800593c <UART_SetConfig+0x2c8>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a95      	ldr	r2, [pc, #596]	; (8005940 <UART_SetConfig+0x2cc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d120      	bne.n	8005732 <UART_SetConfig+0xbe>
 80056f0:	4b94      	ldr	r3, [pc, #592]	; (8005944 <UART_SetConfig+0x2d0>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d816      	bhi.n	800572c <UART_SetConfig+0xb8>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x90>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005715 	.word	0x08005715
 8005708:	08005721 	.word	0x08005721
 800570c:	0800571b 	.word	0x0800571b
 8005710:	08005727 	.word	0x08005727
 8005714:	2301      	movs	r3, #1
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e14f      	b.n	80059ba <UART_SetConfig+0x346>
 800571a:	2302      	movs	r3, #2
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e14c      	b.n	80059ba <UART_SetConfig+0x346>
 8005720:	2304      	movs	r3, #4
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e149      	b.n	80059ba <UART_SetConfig+0x346>
 8005726:	2308      	movs	r3, #8
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e146      	b.n	80059ba <UART_SetConfig+0x346>
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e143      	b.n	80059ba <UART_SetConfig+0x346>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a84      	ldr	r2, [pc, #528]	; (8005948 <UART_SetConfig+0x2d4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d132      	bne.n	80057a2 <UART_SetConfig+0x12e>
 800573c:	4b81      	ldr	r3, [pc, #516]	; (8005944 <UART_SetConfig+0x2d0>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d828      	bhi.n	800579c <UART_SetConfig+0x128>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0xdc>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005785 	.word	0x08005785
 8005754:	0800579d 	.word	0x0800579d
 8005758:	0800579d 	.word	0x0800579d
 800575c:	0800579d 	.word	0x0800579d
 8005760:	08005791 	.word	0x08005791
 8005764:	0800579d 	.word	0x0800579d
 8005768:	0800579d 	.word	0x0800579d
 800576c:	0800579d 	.word	0x0800579d
 8005770:	0800578b 	.word	0x0800578b
 8005774:	0800579d 	.word	0x0800579d
 8005778:	0800579d 	.word	0x0800579d
 800577c:	0800579d 	.word	0x0800579d
 8005780:	08005797 	.word	0x08005797
 8005784:	2300      	movs	r3, #0
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e117      	b.n	80059ba <UART_SetConfig+0x346>
 800578a:	2302      	movs	r3, #2
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e114      	b.n	80059ba <UART_SetConfig+0x346>
 8005790:	2304      	movs	r3, #4
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e111      	b.n	80059ba <UART_SetConfig+0x346>
 8005796:	2308      	movs	r3, #8
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e10e      	b.n	80059ba <UART_SetConfig+0x346>
 800579c:	2310      	movs	r3, #16
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e10b      	b.n	80059ba <UART_SetConfig+0x346>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a69      	ldr	r2, [pc, #420]	; (800594c <UART_SetConfig+0x2d8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d120      	bne.n	80057ee <UART_SetConfig+0x17a>
 80057ac:	4b65      	ldr	r3, [pc, #404]	; (8005944 <UART_SetConfig+0x2d0>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057b6:	2b30      	cmp	r3, #48	; 0x30
 80057b8:	d013      	beq.n	80057e2 <UART_SetConfig+0x16e>
 80057ba:	2b30      	cmp	r3, #48	; 0x30
 80057bc:	d814      	bhi.n	80057e8 <UART_SetConfig+0x174>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d009      	beq.n	80057d6 <UART_SetConfig+0x162>
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d810      	bhi.n	80057e8 <UART_SetConfig+0x174>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <UART_SetConfig+0x15c>
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d006      	beq.n	80057dc <UART_SetConfig+0x168>
 80057ce:	e00b      	b.n	80057e8 <UART_SetConfig+0x174>
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e0f1      	b.n	80059ba <UART_SetConfig+0x346>
 80057d6:	2302      	movs	r3, #2
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e0ee      	b.n	80059ba <UART_SetConfig+0x346>
 80057dc:	2304      	movs	r3, #4
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e0eb      	b.n	80059ba <UART_SetConfig+0x346>
 80057e2:	2308      	movs	r3, #8
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e0e8      	b.n	80059ba <UART_SetConfig+0x346>
 80057e8:	2310      	movs	r3, #16
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e0e5      	b.n	80059ba <UART_SetConfig+0x346>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a57      	ldr	r2, [pc, #348]	; (8005950 <UART_SetConfig+0x2dc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d120      	bne.n	800583a <UART_SetConfig+0x1c6>
 80057f8:	4b52      	ldr	r3, [pc, #328]	; (8005944 <UART_SetConfig+0x2d0>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005802:	2bc0      	cmp	r3, #192	; 0xc0
 8005804:	d013      	beq.n	800582e <UART_SetConfig+0x1ba>
 8005806:	2bc0      	cmp	r3, #192	; 0xc0
 8005808:	d814      	bhi.n	8005834 <UART_SetConfig+0x1c0>
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d009      	beq.n	8005822 <UART_SetConfig+0x1ae>
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d810      	bhi.n	8005834 <UART_SetConfig+0x1c0>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <UART_SetConfig+0x1a8>
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d006      	beq.n	8005828 <UART_SetConfig+0x1b4>
 800581a:	e00b      	b.n	8005834 <UART_SetConfig+0x1c0>
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e0cb      	b.n	80059ba <UART_SetConfig+0x346>
 8005822:	2302      	movs	r3, #2
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e0c8      	b.n	80059ba <UART_SetConfig+0x346>
 8005828:	2304      	movs	r3, #4
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e0c5      	b.n	80059ba <UART_SetConfig+0x346>
 800582e:	2308      	movs	r3, #8
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e0c2      	b.n	80059ba <UART_SetConfig+0x346>
 8005834:	2310      	movs	r3, #16
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e0bf      	b.n	80059ba <UART_SetConfig+0x346>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a45      	ldr	r2, [pc, #276]	; (8005954 <UART_SetConfig+0x2e0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d125      	bne.n	8005890 <UART_SetConfig+0x21c>
 8005844:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <UART_SetConfig+0x2d0>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005852:	d017      	beq.n	8005884 <UART_SetConfig+0x210>
 8005854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005858:	d817      	bhi.n	800588a <UART_SetConfig+0x216>
 800585a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585e:	d00b      	beq.n	8005878 <UART_SetConfig+0x204>
 8005860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005864:	d811      	bhi.n	800588a <UART_SetConfig+0x216>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <UART_SetConfig+0x1fe>
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	d006      	beq.n	800587e <UART_SetConfig+0x20a>
 8005870:	e00b      	b.n	800588a <UART_SetConfig+0x216>
 8005872:	2300      	movs	r3, #0
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e0a0      	b.n	80059ba <UART_SetConfig+0x346>
 8005878:	2302      	movs	r3, #2
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e09d      	b.n	80059ba <UART_SetConfig+0x346>
 800587e:	2304      	movs	r3, #4
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e09a      	b.n	80059ba <UART_SetConfig+0x346>
 8005884:	2308      	movs	r3, #8
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e097      	b.n	80059ba <UART_SetConfig+0x346>
 800588a:	2310      	movs	r3, #16
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e094      	b.n	80059ba <UART_SetConfig+0x346>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a30      	ldr	r2, [pc, #192]	; (8005958 <UART_SetConfig+0x2e4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d125      	bne.n	80058e6 <UART_SetConfig+0x272>
 800589a:	4b2a      	ldr	r3, [pc, #168]	; (8005944 <UART_SetConfig+0x2d0>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a8:	d017      	beq.n	80058da <UART_SetConfig+0x266>
 80058aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ae:	d817      	bhi.n	80058e0 <UART_SetConfig+0x26c>
 80058b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b4:	d00b      	beq.n	80058ce <UART_SetConfig+0x25a>
 80058b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ba:	d811      	bhi.n	80058e0 <UART_SetConfig+0x26c>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <UART_SetConfig+0x254>
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c4:	d006      	beq.n	80058d4 <UART_SetConfig+0x260>
 80058c6:	e00b      	b.n	80058e0 <UART_SetConfig+0x26c>
 80058c8:	2301      	movs	r3, #1
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e075      	b.n	80059ba <UART_SetConfig+0x346>
 80058ce:	2302      	movs	r3, #2
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e072      	b.n	80059ba <UART_SetConfig+0x346>
 80058d4:	2304      	movs	r3, #4
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e06f      	b.n	80059ba <UART_SetConfig+0x346>
 80058da:	2308      	movs	r3, #8
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e06c      	b.n	80059ba <UART_SetConfig+0x346>
 80058e0:	2310      	movs	r3, #16
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e069      	b.n	80059ba <UART_SetConfig+0x346>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	; (800595c <UART_SetConfig+0x2e8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d137      	bne.n	8005960 <UART_SetConfig+0x2ec>
 80058f0:	4b14      	ldr	r3, [pc, #80]	; (8005944 <UART_SetConfig+0x2d0>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058fe:	d017      	beq.n	8005930 <UART_SetConfig+0x2bc>
 8005900:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005904:	d817      	bhi.n	8005936 <UART_SetConfig+0x2c2>
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590a:	d00b      	beq.n	8005924 <UART_SetConfig+0x2b0>
 800590c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005910:	d811      	bhi.n	8005936 <UART_SetConfig+0x2c2>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <UART_SetConfig+0x2aa>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	d006      	beq.n	800592a <UART_SetConfig+0x2b6>
 800591c:	e00b      	b.n	8005936 <UART_SetConfig+0x2c2>
 800591e:	2300      	movs	r3, #0
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e04a      	b.n	80059ba <UART_SetConfig+0x346>
 8005924:	2302      	movs	r3, #2
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e047      	b.n	80059ba <UART_SetConfig+0x346>
 800592a:	2304      	movs	r3, #4
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e044      	b.n	80059ba <UART_SetConfig+0x346>
 8005930:	2308      	movs	r3, #8
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e041      	b.n	80059ba <UART_SetConfig+0x346>
 8005936:	2310      	movs	r3, #16
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e03e      	b.n	80059ba <UART_SetConfig+0x346>
 800593c:	efff69f3 	.word	0xefff69f3
 8005940:	40011000 	.word	0x40011000
 8005944:	40023800 	.word	0x40023800
 8005948:	40004400 	.word	0x40004400
 800594c:	40004800 	.word	0x40004800
 8005950:	40004c00 	.word	0x40004c00
 8005954:	40005000 	.word	0x40005000
 8005958:	40011400 	.word	0x40011400
 800595c:	40007800 	.word	0x40007800
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a71      	ldr	r2, [pc, #452]	; (8005b2c <UART_SetConfig+0x4b8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d125      	bne.n	80059b6 <UART_SetConfig+0x342>
 800596a:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <UART_SetConfig+0x4bc>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005974:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005978:	d017      	beq.n	80059aa <UART_SetConfig+0x336>
 800597a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800597e:	d817      	bhi.n	80059b0 <UART_SetConfig+0x33c>
 8005980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005984:	d00b      	beq.n	800599e <UART_SetConfig+0x32a>
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598a:	d811      	bhi.n	80059b0 <UART_SetConfig+0x33c>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <UART_SetConfig+0x324>
 8005990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005994:	d006      	beq.n	80059a4 <UART_SetConfig+0x330>
 8005996:	e00b      	b.n	80059b0 <UART_SetConfig+0x33c>
 8005998:	2300      	movs	r3, #0
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e00d      	b.n	80059ba <UART_SetConfig+0x346>
 800599e:	2302      	movs	r3, #2
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e00a      	b.n	80059ba <UART_SetConfig+0x346>
 80059a4:	2304      	movs	r3, #4
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e007      	b.n	80059ba <UART_SetConfig+0x346>
 80059aa:	2308      	movs	r3, #8
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e004      	b.n	80059ba <UART_SetConfig+0x346>
 80059b0:	2310      	movs	r3, #16
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e001      	b.n	80059ba <UART_SetConfig+0x346>
 80059b6:	2310      	movs	r3, #16
 80059b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d15a      	bne.n	8005a7a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d827      	bhi.n	8005a1a <UART_SetConfig+0x3a6>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x35c>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a1b 	.word	0x08005a1b
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a1b 	.word	0x08005a1b
 80059e8:	08005a1b 	.word	0x08005a1b
 80059ec:	08005a1b 	.word	0x08005a1b
 80059f0:	08005a13 	.word	0x08005a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe fae0 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 80059f8:	61b8      	str	r0, [r7, #24]
        break;
 80059fa:	e013      	b.n	8005a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7fe faf0 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8005a00:	61b8      	str	r0, [r7, #24]
        break;
 8005a02:	e00f      	b.n	8005a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b4b      	ldr	r3, [pc, #300]	; (8005b34 <UART_SetConfig+0x4c0>)
 8005a06:	61bb      	str	r3, [r7, #24]
        break;
 8005a08:	e00c      	b.n	8005a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7fe f9e7 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8005a0e:	61b8      	str	r0, [r7, #24]
        break;
 8005a10:	e008      	b.n	8005a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	61bb      	str	r3, [r7, #24]
        break;
 8005a18:	e004      	b.n	8005a24 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	77bb      	strb	r3, [r7, #30]
        break;
 8005a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d074      	beq.n	8005b14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	005a      	lsls	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	441a      	add	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	d916      	bls.n	8005a74 <UART_SetConfig+0x400>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d212      	bcs.n	8005a74 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f023 030f 	bic.w	r3, r3, #15
 8005a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	89fb      	ldrh	r3, [r7, #14]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	89fa      	ldrh	r2, [r7, #14]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	e04f      	b.n	8005b14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	77bb      	strb	r3, [r7, #30]
 8005a78:	e04c      	b.n	8005b14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d828      	bhi.n	8005ad2 <UART_SetConfig+0x45e>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0x414>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005ab5 	.word	0x08005ab5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fe fa84 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	61b8      	str	r0, [r7, #24]
        break;
 8005ab2:	e013      	b.n	8005adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe fa94 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	61b8      	str	r0, [r7, #24]
        break;
 8005aba:	e00f      	b.n	8005adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <UART_SetConfig+0x4c0>)
 8005abe:	61bb      	str	r3, [r7, #24]
        break;
 8005ac0:	e00c      	b.n	8005adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fe f98b 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8005ac6:	61b8      	str	r0, [r7, #24]
        break;
 8005ac8:	e008      	b.n	8005adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	61bb      	str	r3, [r7, #24]
        break;
 8005ad0:	e004      	b.n	8005adc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ada:	bf00      	nop
    }

    if (pclk != 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	085a      	lsrs	r2, r3, #1
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	441a      	add	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d909      	bls.n	8005b10 <UART_SetConfig+0x49c>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d205      	bcs.n	8005b10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	e001      	b.n	8005b14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b20:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40007c00 	.word	0x40007c00
 8005b30:	40023800 	.word	0x40023800
 8005b34:	00f42400 	.word	0x00f42400

08005b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d10a      	bne.n	8005c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c8c:	f7fc fc0a 	bl	80024a4 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10e      	bne.n	8005cbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f82d 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e023      	b.n	8005d06 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d10e      	bne.n	8005cea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f817 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e00d      	b.n	8005d06 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b09c      	sub	sp, #112	; 0x70
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	e0a5      	b.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	f000 80a1 	beq.w	8005e6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2a:	f7fc fbbb 	bl	80024a4 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d13e      	bne.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d54:	667b      	str	r3, [r7, #100]	; 0x64
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e6      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	663b      	str	r3, [r7, #96]	; 0x60
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e067      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d04f      	beq.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dda:	d147      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
 8005e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e6      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	613b      	str	r3, [r7, #16]
   return(result);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 0301 	bic.w	r3, r3, #1
 8005e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e38:	623a      	str	r2, [r7, #32]
 8005e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e010      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	f43f af4a 	beq.w	8005d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3770      	adds	r7, #112	; 0x70
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b097      	sub	sp, #92	; 0x5c
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d10e      	bne.n	8005eea <UART_Start_Receive_IT+0x52>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <UART_Start_Receive_IT+0x48>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ede:	e02d      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee8:	e028      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <UART_Start_Receive_IT+0x76>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <UART_Start_Receive_IT+0x6c>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f02:	e01b      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	227f      	movs	r2, #127	; 0x7f
 8005f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f0c:	e016      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f16:	d10d      	bne.n	8005f34 <UART_Start_Receive_IT+0x9c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <UART_Start_Receive_IT+0x92>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	227f      	movs	r2, #127	; 0x7f
 8005f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f28:	e008      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	223f      	movs	r2, #63	; 0x3f
 8005f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f32:	e003      	b.n	8005f3c <UART_Start_Receive_IT+0xa4>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2222      	movs	r2, #34	; 0x22
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3308      	adds	r3, #8
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	657b      	str	r3, [r7, #84]	; 0x54
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e5      	bne.n	8005f4a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d107      	bne.n	8005f98 <UART_Start_Receive_IT+0x100>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a24      	ldr	r2, [pc, #144]	; (8006024 <UART_Start_Receive_IT+0x18c>)
 8005f94:	665a      	str	r2, [r3, #100]	; 0x64
 8005f96:	e002      	b.n	8005f9e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a23      	ldr	r2, [pc, #140]	; (8006028 <UART_Start_Receive_IT+0x190>)
 8005f9c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d019      	beq.n	8005fe2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_Start_Receive_IT+0x116>
 8005fe0:	e018      	b.n	8006014 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f043 0320 	orr.w	r3, r3, #32
 8005ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	69f9      	ldr	r1, [r7, #28]
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	61bb      	str	r3, [r7, #24]
   return(result);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	375c      	adds	r7, #92	; 0x5c
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	08006445 	.word	0x08006445
 8006028:	080062e9 	.word	0x080062e9

0800602c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b095      	sub	sp, #84	; 0x54
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006052:	643b      	str	r3, [r7, #64]	; 0x40
 8006054:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	61fb      	str	r3, [r7, #28]
   return(result);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	64bb      	str	r3, [r7, #72]	; 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d118      	bne.n	80060d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0310 	bic.w	r3, r3, #16
 80060b6:	647b      	str	r3, [r7, #68]	; 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6979      	ldr	r1, [r7, #20]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	613b      	str	r3, [r7, #16]
   return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060e6:	bf00      	nop
 80060e8:	3754      	adds	r7, #84	; 0x54
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fa8f 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800611e:	b480      	push	{r7}
 8006120:	b08f      	sub	sp, #60	; 0x3c
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612a:	2b21      	cmp	r3, #33	; 0x21
 800612c:	d14c      	bne.n	80061c8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d132      	bne.n	80061a0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	61fb      	str	r3, [r7, #28]
   return(result);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	60bb      	str	r3, [r7, #8]
   return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	613b      	str	r3, [r7, #16]
   return(result);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e6      	bne.n	800616c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800619e:	e013      	b.n	80061c8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80061c8:	bf00      	nop
 80061ca:	373c      	adds	r7, #60	; 0x3c
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b091      	sub	sp, #68	; 0x44
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e0:	2b21      	cmp	r3, #33	; 0x21
 80061e2:	d151      	bne.n	8006288 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d132      	bne.n	8006256 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	623b      	str	r3, [r7, #32]
   return(result);
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006204:	63bb      	str	r3, [r7, #56]	; 0x38
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	633b      	str	r3, [r7, #48]	; 0x30
 8006210:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e6      	bne.n	80061f0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	617b      	str	r3, [r7, #20]
   return(result);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e6      	bne.n	8006222 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006254:	e018      	b.n	8006288 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006288:	bf00      	nop
 800628a:	3744      	adds	r7, #68	; 0x44
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fc f82e 	bl	800233c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e0:	bf00      	nop
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b096      	sub	sp, #88	; 0x58
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fe:	2b22      	cmp	r3, #34	; 0x22
 8006300:	f040 8094 	bne.w	800642c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800630e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006312:	b2d9      	uxtb	r1, r3
 8006314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	400a      	ands	r2, r1
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d177      	bne.n	800643c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e6      	bne.n	800634c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	623b      	str	r3, [r7, #32]
   return(result);
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f023 0301 	bic.w	r3, r3, #1
 8006394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800639e:	633a      	str	r2, [r7, #48]	; 0x30
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d12e      	bne.n	8006424 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	69b9      	ldr	r1, [r7, #24]
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	617b      	str	r3, [r7, #20]
   return(result);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b10      	cmp	r3, #16
 800640a:	d103      	bne.n	8006414 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2210      	movs	r2, #16
 8006412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff f913 	bl	8005648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006422:	e00b      	b.n	800643c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fb ff2d 	bl	8002284 <HAL_UART_RxCpltCallback>
}
 800642a:	e007      	b.n	800643c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0208 	orr.w	r2, r2, #8
 800643a:	619a      	str	r2, [r3, #24]
}
 800643c:	bf00      	nop
 800643e:	3758      	adds	r7, #88	; 0x58
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b096      	sub	sp, #88	; 0x58
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006452:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	2b22      	cmp	r3, #34	; 0x22
 800645c:	f040 8094 	bne.w	8006588 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006470:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006474:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006478:	4013      	ands	r3, r2
 800647a:	b29a      	uxth	r2, r3
 800647c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d177      	bne.n	8006598 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
 80064c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651e:	2b01      	cmp	r3, #1
 8006520:	d12e      	bne.n	8006580 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	60bb      	str	r3, [r7, #8]
   return(result);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f023 0310 	bic.w	r3, r3, #16
 800653c:	647b      	str	r3, [r7, #68]	; 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6979      	ldr	r1, [r7, #20]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	613b      	str	r3, [r7, #16]
   return(result);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b10      	cmp	r3, #16
 8006566:	d103      	bne.n	8006570 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2210      	movs	r2, #16
 800656e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff f865 	bl	8005648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800657e:	e00b      	b.n	8006598 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7fb fe7f 	bl	8002284 <HAL_UART_RxCpltCallback>
}
 8006586:	e007      	b.n	8006598 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0208 	orr.w	r2, r2, #8
 8006596:	619a      	str	r2, [r3, #24]
}
 8006598:	bf00      	nop
 800659a:	3758      	adds	r7, #88	; 0x58
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <__errno>:
 80065a0:	4b01      	ldr	r3, [pc, #4]	; (80065a8 <__errno+0x8>)
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000060 	.word	0x20000060

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	; (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	; (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	; (80065f0 <__libc_init_array+0x44>)
 80065c0:	f004 ffc4 	bl	800b54c <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	0800c114 	.word	0x0800c114
 80065e8:	0800c114 	.word	0x0800c114
 80065ec:	0800c114 	.word	0x0800c114
 80065f0:	0800c118 	.word	0x0800c118

080065f4 <memset>:
 80065f4:	4402      	add	r2, r0
 80065f6:	4603      	mov	r3, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__cvt>:
 8006604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006606:	ed2d 8b02 	vpush	{d8}
 800660a:	eeb0 8b40 	vmov.f64	d8, d0
 800660e:	b085      	sub	sp, #20
 8006610:	4617      	mov	r7, r2
 8006612:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006614:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006616:	ee18 2a90 	vmov	r2, s17
 800661a:	f025 0520 	bic.w	r5, r5, #32
 800661e:	2a00      	cmp	r2, #0
 8006620:	bfb6      	itet	lt
 8006622:	222d      	movlt	r2, #45	; 0x2d
 8006624:	2200      	movge	r2, #0
 8006626:	eeb1 8b40 	vneglt.f64	d8, d0
 800662a:	2d46      	cmp	r5, #70	; 0x46
 800662c:	460c      	mov	r4, r1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	d004      	beq.n	800663c <__cvt+0x38>
 8006632:	2d45      	cmp	r5, #69	; 0x45
 8006634:	d100      	bne.n	8006638 <__cvt+0x34>
 8006636:	3401      	adds	r4, #1
 8006638:	2102      	movs	r1, #2
 800663a:	e000      	b.n	800663e <__cvt+0x3a>
 800663c:	2103      	movs	r1, #3
 800663e:	ab03      	add	r3, sp, #12
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	ab02      	add	r3, sp, #8
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4622      	mov	r2, r4
 8006648:	4633      	mov	r3, r6
 800664a:	eeb0 0b48 	vmov.f64	d0, d8
 800664e:	f001 fe07 	bl	8008260 <_dtoa_r>
 8006652:	2d47      	cmp	r5, #71	; 0x47
 8006654:	d109      	bne.n	800666a <__cvt+0x66>
 8006656:	07fb      	lsls	r3, r7, #31
 8006658:	d407      	bmi.n	800666a <__cvt+0x66>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800665e:	1a1b      	subs	r3, r3, r0
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	b005      	add	sp, #20
 8006664:	ecbd 8b02 	vpop	{d8}
 8006668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666a:	2d46      	cmp	r5, #70	; 0x46
 800666c:	eb00 0204 	add.w	r2, r0, r4
 8006670:	d10c      	bne.n	800668c <__cvt+0x88>
 8006672:	7803      	ldrb	r3, [r0, #0]
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d107      	bne.n	8006688 <__cvt+0x84>
 8006678:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006680:	bf1c      	itt	ne
 8006682:	f1c4 0401 	rsbne	r4, r4, #1
 8006686:	6034      	strne	r4, [r6, #0]
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	441a      	add	r2, r3
 800668c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	bf08      	it	eq
 8006696:	9203      	streq	r2, [sp, #12]
 8006698:	2130      	movs	r1, #48	; 0x30
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	4293      	cmp	r3, r2
 800669e:	d2dc      	bcs.n	800665a <__cvt+0x56>
 80066a0:	1c5c      	adds	r4, r3, #1
 80066a2:	9403      	str	r4, [sp, #12]
 80066a4:	7019      	strb	r1, [r3, #0]
 80066a6:	e7f8      	b.n	800669a <__cvt+0x96>

080066a8 <__exponent>:
 80066a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066aa:	4603      	mov	r3, r0
 80066ac:	2900      	cmp	r1, #0
 80066ae:	bfb8      	it	lt
 80066b0:	4249      	neglt	r1, r1
 80066b2:	f803 2b02 	strb.w	r2, [r3], #2
 80066b6:	bfb4      	ite	lt
 80066b8:	222d      	movlt	r2, #45	; 0x2d
 80066ba:	222b      	movge	r2, #43	; 0x2b
 80066bc:	2909      	cmp	r1, #9
 80066be:	7042      	strb	r2, [r0, #1]
 80066c0:	dd2a      	ble.n	8006718 <__exponent+0x70>
 80066c2:	f10d 0407 	add.w	r4, sp, #7
 80066c6:	46a4      	mov	ip, r4
 80066c8:	270a      	movs	r7, #10
 80066ca:	46a6      	mov	lr, r4
 80066cc:	460a      	mov	r2, r1
 80066ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80066d2:	fb07 1516 	mls	r5, r7, r6, r1
 80066d6:	3530      	adds	r5, #48	; 0x30
 80066d8:	2a63      	cmp	r2, #99	; 0x63
 80066da:	f104 34ff 	add.w	r4, r4, #4294967295
 80066de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066e2:	4631      	mov	r1, r6
 80066e4:	dcf1      	bgt.n	80066ca <__exponent+0x22>
 80066e6:	3130      	adds	r1, #48	; 0x30
 80066e8:	f1ae 0502 	sub.w	r5, lr, #2
 80066ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066f0:	1c44      	adds	r4, r0, #1
 80066f2:	4629      	mov	r1, r5
 80066f4:	4561      	cmp	r1, ip
 80066f6:	d30a      	bcc.n	800670e <__exponent+0x66>
 80066f8:	f10d 0209 	add.w	r2, sp, #9
 80066fc:	eba2 020e 	sub.w	r2, r2, lr
 8006700:	4565      	cmp	r5, ip
 8006702:	bf88      	it	hi
 8006704:	2200      	movhi	r2, #0
 8006706:	4413      	add	r3, r2
 8006708:	1a18      	subs	r0, r3, r0
 800670a:	b003      	add	sp, #12
 800670c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006712:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006716:	e7ed      	b.n	80066f4 <__exponent+0x4c>
 8006718:	2330      	movs	r3, #48	; 0x30
 800671a:	3130      	adds	r1, #48	; 0x30
 800671c:	7083      	strb	r3, [r0, #2]
 800671e:	70c1      	strb	r1, [r0, #3]
 8006720:	1d03      	adds	r3, r0, #4
 8006722:	e7f1      	b.n	8006708 <__exponent+0x60>
 8006724:	0000      	movs	r0, r0
	...

08006728 <_printf_float>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	b08b      	sub	sp, #44	; 0x2c
 800672e:	460c      	mov	r4, r1
 8006730:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006734:	4616      	mov	r6, r2
 8006736:	461f      	mov	r7, r3
 8006738:	4605      	mov	r5, r0
 800673a:	f002 fe83 	bl	8009444 <_localeconv_r>
 800673e:	f8d0 b000 	ldr.w	fp, [r0]
 8006742:	4658      	mov	r0, fp
 8006744:	f7f9 fd7c 	bl	8000240 <strlen>
 8006748:	2300      	movs	r3, #0
 800674a:	9308      	str	r3, [sp, #32]
 800674c:	f8d8 3000 	ldr.w	r3, [r8]
 8006750:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	3307      	adds	r3, #7
 8006758:	f023 0307 	bic.w	r3, r3, #7
 800675c:	f103 0108 	add.w	r1, r3, #8
 8006760:	f8c8 1000 	str.w	r1, [r8]
 8006764:	4682      	mov	sl, r0
 8006766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800676a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800676e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80069d0 <_printf_float+0x2a8>
 8006772:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006776:	eeb0 6bc0 	vabs.f64	d6, d0
 800677a:	eeb4 6b47 	vcmp.f64	d6, d7
 800677e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006782:	dd24      	ble.n	80067ce <_printf_float+0xa6>
 8006784:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	d502      	bpl.n	8006794 <_printf_float+0x6c>
 800678e:	232d      	movs	r3, #45	; 0x2d
 8006790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006794:	4b90      	ldr	r3, [pc, #576]	; (80069d8 <_printf_float+0x2b0>)
 8006796:	4891      	ldr	r0, [pc, #580]	; (80069dc <_printf_float+0x2b4>)
 8006798:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800679c:	bf94      	ite	ls
 800679e:	4698      	movls	r8, r3
 80067a0:	4680      	movhi	r8, r0
 80067a2:	2303      	movs	r3, #3
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	f022 0204 	bic.w	r2, r2, #4
 80067aa:	2300      	movs	r3, #0
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	9700      	str	r7, [sp, #0]
 80067b2:	4633      	mov	r3, r6
 80067b4:	aa09      	add	r2, sp, #36	; 0x24
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f9d3 	bl	8006b64 <_printf_common>
 80067be:	3001      	adds	r0, #1
 80067c0:	f040 808a 	bne.w	80068d8 <_printf_float+0x1b0>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	b00b      	add	sp, #44	; 0x2c
 80067ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d709      	bvc.n	80067ec <_printf_float+0xc4>
 80067d8:	ee10 3a90 	vmov	r3, s1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfbc      	itt	lt
 80067e0:	232d      	movlt	r3, #45	; 0x2d
 80067e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067e6:	487e      	ldr	r0, [pc, #504]	; (80069e0 <_printf_float+0x2b8>)
 80067e8:	4b7e      	ldr	r3, [pc, #504]	; (80069e4 <_printf_float+0x2bc>)
 80067ea:	e7d5      	b.n	8006798 <_printf_float+0x70>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067f2:	9104      	str	r1, [sp, #16]
 80067f4:	1c59      	adds	r1, r3, #1
 80067f6:	d13c      	bne.n	8006872 <_printf_float+0x14a>
 80067f8:	2306      	movs	r3, #6
 80067fa:	6063      	str	r3, [r4, #4]
 80067fc:	2300      	movs	r3, #0
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	ab08      	add	r3, sp, #32
 8006802:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800680a:	ab07      	add	r3, sp, #28
 800680c:	6861      	ldr	r1, [r4, #4]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	6022      	str	r2, [r4, #0]
 8006812:	f10d 031b 	add.w	r3, sp, #27
 8006816:	4628      	mov	r0, r5
 8006818:	f7ff fef4 	bl	8006604 <__cvt>
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	9907      	ldr	r1, [sp, #28]
 8006820:	2b47      	cmp	r3, #71	; 0x47
 8006822:	4680      	mov	r8, r0
 8006824:	d108      	bne.n	8006838 <_printf_float+0x110>
 8006826:	1cc8      	adds	r0, r1, #3
 8006828:	db02      	blt.n	8006830 <_printf_float+0x108>
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	4299      	cmp	r1, r3
 800682e:	dd41      	ble.n	80068b4 <_printf_float+0x18c>
 8006830:	f1a9 0902 	sub.w	r9, r9, #2
 8006834:	fa5f f989 	uxtb.w	r9, r9
 8006838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800683c:	d820      	bhi.n	8006880 <_printf_float+0x158>
 800683e:	3901      	subs	r1, #1
 8006840:	464a      	mov	r2, r9
 8006842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006846:	9107      	str	r1, [sp, #28]
 8006848:	f7ff ff2e 	bl	80066a8 <__exponent>
 800684c:	9a08      	ldr	r2, [sp, #32]
 800684e:	9004      	str	r0, [sp, #16]
 8006850:	1813      	adds	r3, r2, r0
 8006852:	2a01      	cmp	r2, #1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	dc02      	bgt.n	800685e <_printf_float+0x136>
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	07d2      	lsls	r2, r2, #31
 800685c:	d501      	bpl.n	8006862 <_printf_float+0x13a>
 800685e:	3301      	adds	r3, #1
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0a2      	beq.n	80067b0 <_printf_float+0x88>
 800686a:	232d      	movs	r3, #45	; 0x2d
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006870:	e79e      	b.n	80067b0 <_printf_float+0x88>
 8006872:	9904      	ldr	r1, [sp, #16]
 8006874:	2947      	cmp	r1, #71	; 0x47
 8006876:	d1c1      	bne.n	80067fc <_printf_float+0xd4>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1bf      	bne.n	80067fc <_printf_float+0xd4>
 800687c:	2301      	movs	r3, #1
 800687e:	e7bc      	b.n	80067fa <_printf_float+0xd2>
 8006880:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006884:	d118      	bne.n	80068b8 <_printf_float+0x190>
 8006886:	2900      	cmp	r1, #0
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	dd0b      	ble.n	80068a4 <_printf_float+0x17c>
 800688c:	6121      	str	r1, [r4, #16]
 800688e:	b913      	cbnz	r3, 8006896 <_printf_float+0x16e>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	07d0      	lsls	r0, r2, #31
 8006894:	d502      	bpl.n	800689c <_printf_float+0x174>
 8006896:	3301      	adds	r3, #1
 8006898:	440b      	add	r3, r1
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	2300      	movs	r3, #0
 800689e:	65a1      	str	r1, [r4, #88]	; 0x58
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	e7de      	b.n	8006862 <_printf_float+0x13a>
 80068a4:	b913      	cbnz	r3, 80068ac <_printf_float+0x184>
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	07d2      	lsls	r2, r2, #31
 80068aa:	d501      	bpl.n	80068b0 <_printf_float+0x188>
 80068ac:	3302      	adds	r3, #2
 80068ae:	e7f4      	b.n	800689a <_printf_float+0x172>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7f2      	b.n	800689a <_printf_float+0x172>
 80068b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	4299      	cmp	r1, r3
 80068bc:	db05      	blt.n	80068ca <_printf_float+0x1a2>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	6121      	str	r1, [r4, #16]
 80068c2:	07d8      	lsls	r0, r3, #31
 80068c4:	d5ea      	bpl.n	800689c <_printf_float+0x174>
 80068c6:	1c4b      	adds	r3, r1, #1
 80068c8:	e7e7      	b.n	800689a <_printf_float+0x172>
 80068ca:	2900      	cmp	r1, #0
 80068cc:	bfd4      	ite	le
 80068ce:	f1c1 0202 	rsble	r2, r1, #2
 80068d2:	2201      	movgt	r2, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	e7e0      	b.n	800689a <_printf_float+0x172>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	055a      	lsls	r2, r3, #21
 80068dc:	d407      	bmi.n	80068ee <_printf_float+0x1c6>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	4642      	mov	r2, r8
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	d12a      	bne.n	8006942 <_printf_float+0x21a>
 80068ec:	e76a      	b.n	80067c4 <_printf_float+0x9c>
 80068ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068f2:	f240 80e2 	bls.w	8006aba <_printf_float+0x392>
 80068f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006902:	d133      	bne.n	800696c <_printf_float+0x244>
 8006904:	4a38      	ldr	r2, [pc, #224]	; (80069e8 <_printf_float+0x2c0>)
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af58 	beq.w	80067c4 <_printf_float+0x9c>
 8006914:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006918:	429a      	cmp	r2, r3
 800691a:	db02      	blt.n	8006922 <_printf_float+0x1fa>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07d8      	lsls	r0, r3, #31
 8006920:	d50f      	bpl.n	8006942 <_printf_float+0x21a>
 8006922:	4653      	mov	r3, sl
 8006924:	465a      	mov	r2, fp
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f af49 	beq.w	80067c4 <_printf_float+0x9c>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	f104 091a 	add.w	r9, r4, #26
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	3b01      	subs	r3, #1
 800693e:	4543      	cmp	r3, r8
 8006940:	dc09      	bgt.n	8006956 <_printf_float+0x22e>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	079b      	lsls	r3, r3, #30
 8006946:	f100 8108 	bmi.w	8006b5a <_printf_float+0x432>
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694e:	4298      	cmp	r0, r3
 8006950:	bfb8      	it	lt
 8006952:	4618      	movlt	r0, r3
 8006954:	e738      	b.n	80067c8 <_printf_float+0xa0>
 8006956:	2301      	movs	r3, #1
 8006958:	464a      	mov	r2, r9
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	f43f af2f 	beq.w	80067c4 <_printf_float+0x9c>
 8006966:	f108 0801 	add.w	r8, r8, #1
 800696a:	e7e6      	b.n	800693a <_printf_float+0x212>
 800696c:	9b07      	ldr	r3, [sp, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dc3c      	bgt.n	80069ec <_printf_float+0x2c4>
 8006972:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <_printf_float+0x2c0>)
 8006974:	2301      	movs	r3, #1
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f af21 	beq.w	80067c4 <_printf_float+0x9c>
 8006982:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006986:	4313      	orrs	r3, r2
 8006988:	d102      	bne.n	8006990 <_printf_float+0x268>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	07d9      	lsls	r1, r3, #31
 800698e:	d5d8      	bpl.n	8006942 <_printf_float+0x21a>
 8006990:	4653      	mov	r3, sl
 8006992:	465a      	mov	r2, fp
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	f43f af12 	beq.w	80067c4 <_printf_float+0x9c>
 80069a0:	f04f 0900 	mov.w	r9, #0
 80069a4:	f104 0a1a 	add.w	sl, r4, #26
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	425b      	negs	r3, r3
 80069ac:	454b      	cmp	r3, r9
 80069ae:	dc01      	bgt.n	80069b4 <_printf_float+0x28c>
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	e795      	b.n	80068e0 <_printf_float+0x1b8>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4652      	mov	r2, sl
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af00 	beq.w	80067c4 <_printf_float+0x9c>
 80069c4:	f109 0901 	add.w	r9, r9, #1
 80069c8:	e7ee      	b.n	80069a8 <_printf_float+0x280>
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w
 80069d0:	ffffffff 	.word	0xffffffff
 80069d4:	7fefffff 	.word	0x7fefffff
 80069d8:	0800bc44 	.word	0x0800bc44
 80069dc:	0800bc48 	.word	0x0800bc48
 80069e0:	0800bc50 	.word	0x0800bc50
 80069e4:	0800bc4c 	.word	0x0800bc4c
 80069e8:	0800c059 	.word	0x0800c059
 80069ec:	9a08      	ldr	r2, [sp, #32]
 80069ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f0:	429a      	cmp	r2, r3
 80069f2:	bfa8      	it	ge
 80069f4:	461a      	movge	r2, r3
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	4691      	mov	r9, r2
 80069fa:	dc38      	bgt.n	8006a6e <_printf_float+0x346>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9305      	str	r3, [sp, #20]
 8006a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a04:	f104 021a 	add.w	r2, r4, #26
 8006a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a0a:	9905      	ldr	r1, [sp, #20]
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	eba3 0309 	sub.w	r3, r3, r9
 8006a12:	428b      	cmp	r3, r1
 8006a14:	dc33      	bgt.n	8006a7e <_printf_float+0x356>
 8006a16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	db3c      	blt.n	8006a98 <_printf_float+0x370>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	07da      	lsls	r2, r3, #31
 8006a22:	d439      	bmi.n	8006a98 <_printf_float+0x370>
 8006a24:	9a08      	ldr	r2, [sp, #32]
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	9907      	ldr	r1, [sp, #28]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	eba2 0901 	sub.w	r9, r2, r1
 8006a30:	4599      	cmp	r9, r3
 8006a32:	bfa8      	it	ge
 8006a34:	4699      	movge	r9, r3
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	dc35      	bgt.n	8006aa8 <_printf_float+0x380>
 8006a3c:	f04f 0800 	mov.w	r8, #0
 8006a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a44:	f104 0a1a 	add.w	sl, r4, #26
 8006a48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	eba3 0309 	sub.w	r3, r3, r9
 8006a52:	4543      	cmp	r3, r8
 8006a54:	f77f af75 	ble.w	8006942 <_printf_float+0x21a>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4652      	mov	r2, sl
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f aeae 	beq.w	80067c4 <_printf_float+0x9c>
 8006a68:	f108 0801 	add.w	r8, r8, #1
 8006a6c:	e7ec      	b.n	8006a48 <_printf_float+0x320>
 8006a6e:	4613      	mov	r3, r2
 8006a70:	4631      	mov	r1, r6
 8006a72:	4642      	mov	r2, r8
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d1bf      	bne.n	80069fc <_printf_float+0x2d4>
 8006a7c:	e6a2      	b.n	80067c4 <_printf_float+0x9c>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	9204      	str	r2, [sp, #16]
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae9b 	beq.w	80067c4 <_printf_float+0x9c>
 8006a8e:	9b05      	ldr	r3, [sp, #20]
 8006a90:	9a04      	ldr	r2, [sp, #16]
 8006a92:	3301      	adds	r3, #1
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	e7b7      	b.n	8006a08 <_printf_float+0x2e0>
 8006a98:	4653      	mov	r3, sl
 8006a9a:	465a      	mov	r2, fp
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1be      	bne.n	8006a24 <_printf_float+0x2fc>
 8006aa6:	e68d      	b.n	80067c4 <_printf_float+0x9c>
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4442      	add	r2, r8
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d1c1      	bne.n	8006a3c <_printf_float+0x314>
 8006ab8:	e684      	b.n	80067c4 <_printf_float+0x9c>
 8006aba:	9a08      	ldr	r2, [sp, #32]
 8006abc:	2a01      	cmp	r2, #1
 8006abe:	dc01      	bgt.n	8006ac4 <_printf_float+0x39c>
 8006ac0:	07db      	lsls	r3, r3, #31
 8006ac2:	d537      	bpl.n	8006b34 <_printf_float+0x40c>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f ae78 	beq.w	80067c4 <_printf_float+0x9c>
 8006ad4:	4653      	mov	r3, sl
 8006ad6:	465a      	mov	r2, fp
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f ae70 	beq.w	80067c4 <_printf_float+0x9c>
 8006ae4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ae8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	d01b      	beq.n	8006b2a <_printf_float+0x402>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	f108 0201 	add.w	r2, r8, #1
 8006af8:	3b01      	subs	r3, #1
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	d10e      	bne.n	8006b22 <_printf_float+0x3fa>
 8006b04:	e65e      	b.n	80067c4 <_printf_float+0x9c>
 8006b06:	2301      	movs	r3, #1
 8006b08:	464a      	mov	r2, r9
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b8      	blx	r7
 8006b10:	3001      	adds	r0, #1
 8006b12:	f43f ae57 	beq.w	80067c4 <_printf_float+0x9c>
 8006b16:	f108 0801 	add.w	r8, r8, #1
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	4543      	cmp	r3, r8
 8006b20:	dcf1      	bgt.n	8006b06 <_printf_float+0x3de>
 8006b22:	9b04      	ldr	r3, [sp, #16]
 8006b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b28:	e6db      	b.n	80068e2 <_printf_float+0x1ba>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	f104 091a 	add.w	r9, r4, #26
 8006b32:	e7f2      	b.n	8006b1a <_printf_float+0x3f2>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4642      	mov	r2, r8
 8006b38:	e7df      	b.n	8006afa <_printf_float+0x3d2>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	464a      	mov	r2, r9
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f ae3d 	beq.w	80067c4 <_printf_float+0x9c>
 8006b4a:	f108 0801 	add.w	r8, r8, #1
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b52:	1a5b      	subs	r3, r3, r1
 8006b54:	4543      	cmp	r3, r8
 8006b56:	dcf0      	bgt.n	8006b3a <_printf_float+0x412>
 8006b58:	e6f7      	b.n	800694a <_printf_float+0x222>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	f104 0919 	add.w	r9, r4, #25
 8006b62:	e7f4      	b.n	8006b4e <_printf_float+0x426>

08006b64 <_printf_common>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4616      	mov	r6, r2
 8006b6a:	4699      	mov	r9, r3
 8006b6c:	688a      	ldr	r2, [r1, #8]
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bfb8      	it	lt
 8006b78:	4613      	movlt	r3, r2
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b80:	4607      	mov	r7, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b10a      	cbz	r2, 8006b8a <_printf_common+0x26>
 8006b86:	3301      	adds	r3, #1
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0699      	lsls	r1, r3, #26
 8006b8e:	bf42      	ittt	mi
 8006b90:	6833      	ldrmi	r3, [r6, #0]
 8006b92:	3302      	addmi	r3, #2
 8006b94:	6033      	strmi	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	f015 0506 	ands.w	r5, r5, #6
 8006b9c:	d106      	bne.n	8006bac <_printf_common+0x48>
 8006b9e:	f104 0a19 	add.w	sl, r4, #25
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc26      	bgt.n	8006bfa <_printf_common+0x96>
 8006bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bb0:	1e13      	subs	r3, r2, #0
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	0692      	lsls	r2, r2, #26
 8006bba:	d42b      	bmi.n	8006c14 <_printf_common+0xb0>
 8006bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c0      	blx	r8
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d01e      	beq.n	8006c08 <_printf_common+0xa4>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	68e5      	ldr	r5, [r4, #12]
 8006bce:	6832      	ldr	r2, [r6, #0]
 8006bd0:	f003 0306 	and.w	r3, r3, #6
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	bf08      	it	eq
 8006bd8:	1aad      	subeq	r5, r5, r2
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	6922      	ldr	r2, [r4, #16]
 8006bde:	bf0c      	ite	eq
 8006be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be4:	2500      	movne	r5, #0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfc4      	itt	gt
 8006bea:	1a9b      	subgt	r3, r3, r2
 8006bec:	18ed      	addgt	r5, r5, r3
 8006bee:	2600      	movs	r6, #0
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xc8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xa8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c0      	blx	r8
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c6      	b.n	8006ba2 <_printf_common+0x3e>
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	2030      	movs	r0, #48	; 0x30
 8006c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1e:	4422      	add	r2, r4
 8006c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7c7      	b.n	8006bbc <_printf_common+0x58>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4649      	mov	r1, r9
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c0      	blx	r8
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa4>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d9      	b.n	8006bf2 <_printf_common+0x8e>
	...

08006c40 <_printf_i>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	4691      	mov	r9, r2
 8006c48:	7e27      	ldrb	r7, [r4, #24]
 8006c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c4c:	2f78      	cmp	r7, #120	; 0x78
 8006c4e:	4680      	mov	r8, r0
 8006c50:	469a      	mov	sl, r3
 8006c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c56:	d807      	bhi.n	8006c68 <_printf_i+0x28>
 8006c58:	2f62      	cmp	r7, #98	; 0x62
 8006c5a:	d80a      	bhi.n	8006c72 <_printf_i+0x32>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f000 80d8 	beq.w	8006e12 <_printf_i+0x1d2>
 8006c62:	2f58      	cmp	r7, #88	; 0x58
 8006c64:	f000 80a3 	beq.w	8006dae <_printf_i+0x16e>
 8006c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c70:	e03a      	b.n	8006ce8 <_printf_i+0xa8>
 8006c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c76:	2b15      	cmp	r3, #21
 8006c78:	d8f6      	bhi.n	8006c68 <_printf_i+0x28>
 8006c7a:	a001      	add	r0, pc, #4	; (adr r0, 8006c80 <_printf_i+0x40>)
 8006c7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c80:	08006cd9 	.word	0x08006cd9
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006c69 	.word	0x08006c69
 8006c8c:	08006c69 	.word	0x08006c69
 8006c90:	08006c69 	.word	0x08006c69
 8006c94:	08006c69 	.word	0x08006c69
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c69 	.word	0x08006c69
 8006ca0:	08006c69 	.word	0x08006c69
 8006ca4:	08006c69 	.word	0x08006c69
 8006ca8:	08006c69 	.word	0x08006c69
 8006cac:	08006df9 	.word	0x08006df9
 8006cb0:	08006d1d 	.word	0x08006d1d
 8006cb4:	08006ddb 	.word	0x08006ddb
 8006cb8:	08006c69 	.word	0x08006c69
 8006cbc:	08006c69 	.word	0x08006c69
 8006cc0:	08006e1b 	.word	0x08006e1b
 8006cc4:	08006c69 	.word	0x08006c69
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006c69 	.word	0x08006c69
 8006cd0:	08006c69 	.word	0x08006c69
 8006cd4:	08006de3 	.word	0x08006de3
 8006cd8:	680b      	ldr	r3, [r1, #0]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	600a      	str	r2, [r1, #0]
 8006ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0a3      	b.n	8006e34 <_printf_i+0x1f4>
 8006cec:	6825      	ldr	r5, [r4, #0]
 8006cee:	6808      	ldr	r0, [r1, #0]
 8006cf0:	062e      	lsls	r6, r5, #24
 8006cf2:	f100 0304 	add.w	r3, r0, #4
 8006cf6:	d50a      	bpl.n	8006d0e <_printf_i+0xce>
 8006cf8:	6805      	ldr	r5, [r0, #0]
 8006cfa:	600b      	str	r3, [r1, #0]
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	da03      	bge.n	8006d08 <_printf_i+0xc8>
 8006d00:	232d      	movs	r3, #45	; 0x2d
 8006d02:	426d      	negs	r5, r5
 8006d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d08:	485e      	ldr	r0, [pc, #376]	; (8006e84 <_printf_i+0x244>)
 8006d0a:	230a      	movs	r3, #10
 8006d0c:	e019      	b.n	8006d42 <_printf_i+0x102>
 8006d0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d12:	6805      	ldr	r5, [r0, #0]
 8006d14:	600b      	str	r3, [r1, #0]
 8006d16:	bf18      	it	ne
 8006d18:	b22d      	sxthne	r5, r5
 8006d1a:	e7ef      	b.n	8006cfc <_printf_i+0xbc>
 8006d1c:	680b      	ldr	r3, [r1, #0]
 8006d1e:	6825      	ldr	r5, [r4, #0]
 8006d20:	1d18      	adds	r0, r3, #4
 8006d22:	6008      	str	r0, [r1, #0]
 8006d24:	0628      	lsls	r0, r5, #24
 8006d26:	d501      	bpl.n	8006d2c <_printf_i+0xec>
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	e002      	b.n	8006d32 <_printf_i+0xf2>
 8006d2c:	0669      	lsls	r1, r5, #25
 8006d2e:	d5fb      	bpl.n	8006d28 <_printf_i+0xe8>
 8006d30:	881d      	ldrh	r5, [r3, #0]
 8006d32:	4854      	ldr	r0, [pc, #336]	; (8006e84 <_printf_i+0x244>)
 8006d34:	2f6f      	cmp	r7, #111	; 0x6f
 8006d36:	bf0c      	ite	eq
 8006d38:	2308      	moveq	r3, #8
 8006d3a:	230a      	movne	r3, #10
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d42:	6866      	ldr	r6, [r4, #4]
 8006d44:	60a6      	str	r6, [r4, #8]
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	bfa2      	ittt	ge
 8006d4a:	6821      	ldrge	r1, [r4, #0]
 8006d4c:	f021 0104 	bicge.w	r1, r1, #4
 8006d50:	6021      	strge	r1, [r4, #0]
 8006d52:	b90d      	cbnz	r5, 8006d58 <_printf_i+0x118>
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	d04d      	beq.n	8006df4 <_printf_i+0x1b4>
 8006d58:	4616      	mov	r6, r2
 8006d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8006d62:	5dc7      	ldrb	r7, [r0, r7]
 8006d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d68:	462f      	mov	r7, r5
 8006d6a:	42bb      	cmp	r3, r7
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	d9f4      	bls.n	8006d5a <_printf_i+0x11a>
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d10b      	bne.n	8006d8c <_printf_i+0x14c>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07df      	lsls	r7, r3, #31
 8006d78:	d508      	bpl.n	8006d8c <_printf_i+0x14c>
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6861      	ldr	r1, [r4, #4]
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	bfde      	ittt	le
 8006d82:	2330      	movle	r3, #48	; 0x30
 8006d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d8c:	1b92      	subs	r2, r2, r6
 8006d8e:	6122      	str	r2, [r4, #16]
 8006d90:	f8cd a000 	str.w	sl, [sp]
 8006d94:	464b      	mov	r3, r9
 8006d96:	aa03      	add	r2, sp, #12
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	f7ff fee2 	bl	8006b64 <_printf_common>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d14c      	bne.n	8006e3e <_printf_i+0x1fe>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	b004      	add	sp, #16
 8006daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dae:	4835      	ldr	r0, [pc, #212]	; (8006e84 <_printf_i+0x244>)
 8006db0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	680e      	ldr	r6, [r1, #0]
 8006db8:	061f      	lsls	r7, r3, #24
 8006dba:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dbe:	600e      	str	r6, [r1, #0]
 8006dc0:	d514      	bpl.n	8006dec <_printf_i+0x1ac>
 8006dc2:	07d9      	lsls	r1, r3, #31
 8006dc4:	bf44      	itt	mi
 8006dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dca:	6023      	strmi	r3, [r4, #0]
 8006dcc:	b91d      	cbnz	r5, 8006dd6 <_printf_i+0x196>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	f023 0320 	bic.w	r3, r3, #32
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	e7b0      	b.n	8006d3c <_printf_i+0xfc>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	f043 0320 	orr.w	r3, r3, #32
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	2378      	movs	r3, #120	; 0x78
 8006de4:	4828      	ldr	r0, [pc, #160]	; (8006e88 <_printf_i+0x248>)
 8006de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dea:	e7e3      	b.n	8006db4 <_printf_i+0x174>
 8006dec:	065e      	lsls	r6, r3, #25
 8006dee:	bf48      	it	mi
 8006df0:	b2ad      	uxthmi	r5, r5
 8006df2:	e7e6      	b.n	8006dc2 <_printf_i+0x182>
 8006df4:	4616      	mov	r6, r2
 8006df6:	e7bb      	b.n	8006d70 <_printf_i+0x130>
 8006df8:	680b      	ldr	r3, [r1, #0]
 8006dfa:	6826      	ldr	r6, [r4, #0]
 8006dfc:	6960      	ldr	r0, [r4, #20]
 8006dfe:	1d1d      	adds	r5, r3, #4
 8006e00:	600d      	str	r5, [r1, #0]
 8006e02:	0635      	lsls	r5, r6, #24
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	d501      	bpl.n	8006e0c <_printf_i+0x1cc>
 8006e08:	6018      	str	r0, [r3, #0]
 8006e0a:	e002      	b.n	8006e12 <_printf_i+0x1d2>
 8006e0c:	0671      	lsls	r1, r6, #25
 8006e0e:	d5fb      	bpl.n	8006e08 <_printf_i+0x1c8>
 8006e10:	8018      	strh	r0, [r3, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	4616      	mov	r6, r2
 8006e18:	e7ba      	b.n	8006d90 <_printf_i+0x150>
 8006e1a:	680b      	ldr	r3, [r1, #0]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	600a      	str	r2, [r1, #0]
 8006e20:	681e      	ldr	r6, [r3, #0]
 8006e22:	6862      	ldr	r2, [r4, #4]
 8006e24:	2100      	movs	r1, #0
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7f9 fa12 	bl	8000250 <memchr>
 8006e2c:	b108      	cbz	r0, 8006e32 <_printf_i+0x1f2>
 8006e2e:	1b80      	subs	r0, r0, r6
 8006e30:	6060      	str	r0, [r4, #4]
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	2300      	movs	r3, #0
 8006e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e3c:	e7a8      	b.n	8006d90 <_printf_i+0x150>
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	4632      	mov	r2, r6
 8006e42:	4649      	mov	r1, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	47d0      	blx	sl
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d0ab      	beq.n	8006da4 <_printf_i+0x164>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	079b      	lsls	r3, r3, #30
 8006e50:	d413      	bmi.n	8006e7a <_printf_i+0x23a>
 8006e52:	68e0      	ldr	r0, [r4, #12]
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	4298      	cmp	r0, r3
 8006e58:	bfb8      	it	lt
 8006e5a:	4618      	movlt	r0, r3
 8006e5c:	e7a4      	b.n	8006da8 <_printf_i+0x168>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4632      	mov	r2, r6
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d09b      	beq.n	8006da4 <_printf_i+0x164>
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	68e3      	ldr	r3, [r4, #12]
 8006e70:	9903      	ldr	r1, [sp, #12]
 8006e72:	1a5b      	subs	r3, r3, r1
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dcf2      	bgt.n	8006e5e <_printf_i+0x21e>
 8006e78:	e7eb      	b.n	8006e52 <_printf_i+0x212>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	f104 0619 	add.w	r6, r4, #25
 8006e80:	e7f5      	b.n	8006e6e <_printf_i+0x22e>
 8006e82:	bf00      	nop
 8006e84:	0800bc54 	.word	0x0800bc54
 8006e88:	0800bc65 	.word	0x0800bc65

08006e8c <_scanf_float>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	b087      	sub	sp, #28
 8006e92:	4617      	mov	r7, r2
 8006e94:	9303      	str	r3, [sp, #12]
 8006e96:	688b      	ldr	r3, [r1, #8]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e9e:	bf83      	ittte	hi
 8006ea0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ea4:	195b      	addhi	r3, r3, r5
 8006ea6:	9302      	strhi	r3, [sp, #8]
 8006ea8:	2300      	movls	r3, #0
 8006eaa:	bf86      	itte	hi
 8006eac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006eb0:	608b      	strhi	r3, [r1, #8]
 8006eb2:	9302      	strls	r3, [sp, #8]
 8006eb4:	680b      	ldr	r3, [r1, #0]
 8006eb6:	468b      	mov	fp, r1
 8006eb8:	2500      	movs	r5, #0
 8006eba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ebe:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ec2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	465e      	mov	r6, fp
 8006ecc:	46aa      	mov	sl, r5
 8006ece:	46a9      	mov	r9, r5
 8006ed0:	9501      	str	r5, [sp, #4]
 8006ed2:	68a2      	ldr	r2, [r4, #8]
 8006ed4:	b152      	cbz	r2, 8006eec <_scanf_float+0x60>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b4e      	cmp	r3, #78	; 0x4e
 8006edc:	d864      	bhi.n	8006fa8 <_scanf_float+0x11c>
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d83c      	bhi.n	8006f5c <_scanf_float+0xd0>
 8006ee2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ee6:	b2c8      	uxtb	r0, r1
 8006ee8:	280e      	cmp	r0, #14
 8006eea:	d93a      	bls.n	8006f62 <_scanf_float+0xd6>
 8006eec:	f1b9 0f00 	cmp.w	r9, #0
 8006ef0:	d003      	beq.n	8006efa <_scanf_float+0x6e>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efe:	f1ba 0f01 	cmp.w	sl, #1
 8006f02:	f200 8113 	bhi.w	800712c <_scanf_float+0x2a0>
 8006f06:	455e      	cmp	r6, fp
 8006f08:	f200 8105 	bhi.w	8007116 <_scanf_float+0x28a>
 8006f0c:	2501      	movs	r5, #1
 8006f0e:	4628      	mov	r0, r5
 8006f10:	b007      	add	sp, #28
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f1a:	2a0d      	cmp	r2, #13
 8006f1c:	d8e6      	bhi.n	8006eec <_scanf_float+0x60>
 8006f1e:	a101      	add	r1, pc, #4	; (adr r1, 8006f24 <_scanf_float+0x98>)
 8006f20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f24:	08007063 	.word	0x08007063
 8006f28:	08006eed 	.word	0x08006eed
 8006f2c:	08006eed 	.word	0x08006eed
 8006f30:	08006eed 	.word	0x08006eed
 8006f34:	080070c3 	.word	0x080070c3
 8006f38:	0800709b 	.word	0x0800709b
 8006f3c:	08006eed 	.word	0x08006eed
 8006f40:	08006eed 	.word	0x08006eed
 8006f44:	08007071 	.word	0x08007071
 8006f48:	08006eed 	.word	0x08006eed
 8006f4c:	08006eed 	.word	0x08006eed
 8006f50:	08006eed 	.word	0x08006eed
 8006f54:	08006eed 	.word	0x08006eed
 8006f58:	08007029 	.word	0x08007029
 8006f5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f60:	e7db      	b.n	8006f1a <_scanf_float+0x8e>
 8006f62:	290e      	cmp	r1, #14
 8006f64:	d8c2      	bhi.n	8006eec <_scanf_float+0x60>
 8006f66:	a001      	add	r0, pc, #4	; (adr r0, 8006f6c <_scanf_float+0xe0>)
 8006f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f6c:	0800701b 	.word	0x0800701b
 8006f70:	08006eed 	.word	0x08006eed
 8006f74:	0800701b 	.word	0x0800701b
 8006f78:	080070af 	.word	0x080070af
 8006f7c:	08006eed 	.word	0x08006eed
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08007005 	.word	0x08007005
 8006f88:	08007005 	.word	0x08007005
 8006f8c:	08007005 	.word	0x08007005
 8006f90:	08007005 	.word	0x08007005
 8006f94:	08007005 	.word	0x08007005
 8006f98:	08007005 	.word	0x08007005
 8006f9c:	08007005 	.word	0x08007005
 8006fa0:	08007005 	.word	0x08007005
 8006fa4:	08007005 	.word	0x08007005
 8006fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8006faa:	d809      	bhi.n	8006fc0 <_scanf_float+0x134>
 8006fac:	2b60      	cmp	r3, #96	; 0x60
 8006fae:	d8b2      	bhi.n	8006f16 <_scanf_float+0x8a>
 8006fb0:	2b54      	cmp	r3, #84	; 0x54
 8006fb2:	d077      	beq.n	80070a4 <_scanf_float+0x218>
 8006fb4:	2b59      	cmp	r3, #89	; 0x59
 8006fb6:	d199      	bne.n	8006eec <_scanf_float+0x60>
 8006fb8:	2d07      	cmp	r5, #7
 8006fba:	d197      	bne.n	8006eec <_scanf_float+0x60>
 8006fbc:	2508      	movs	r5, #8
 8006fbe:	e029      	b.n	8007014 <_scanf_float+0x188>
 8006fc0:	2b74      	cmp	r3, #116	; 0x74
 8006fc2:	d06f      	beq.n	80070a4 <_scanf_float+0x218>
 8006fc4:	2b79      	cmp	r3, #121	; 0x79
 8006fc6:	e7f6      	b.n	8006fb6 <_scanf_float+0x12a>
 8006fc8:	6821      	ldr	r1, [r4, #0]
 8006fca:	05c8      	lsls	r0, r1, #23
 8006fcc:	d51a      	bpl.n	8007004 <_scanf_float+0x178>
 8006fce:	9b02      	ldr	r3, [sp, #8]
 8006fd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fd4:	6021      	str	r1, [r4, #0]
 8006fd6:	f109 0901 	add.w	r9, r9, #1
 8006fda:	b11b      	cbz	r3, 8006fe4 <_scanf_float+0x158>
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	3201      	adds	r2, #1
 8006fe0:	9302      	str	r3, [sp, #8]
 8006fe2:	60a2      	str	r2, [r4, #8]
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	60a3      	str	r3, [r4, #8]
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	3301      	adds	r3, #1
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	f340 8084 	ble.w	8007104 <_scanf_float+0x278>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	e766      	b.n	8006ed2 <_scanf_float+0x46>
 8007004:	eb1a 0f05 	cmn.w	sl, r5
 8007008:	f47f af70 	bne.w	8006eec <_scanf_float+0x60>
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007012:	6022      	str	r2, [r4, #0]
 8007014:	f806 3b01 	strb.w	r3, [r6], #1
 8007018:	e7e4      	b.n	8006fe4 <_scanf_float+0x158>
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	0610      	lsls	r0, r2, #24
 800701e:	f57f af65 	bpl.w	8006eec <_scanf_float+0x60>
 8007022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007026:	e7f4      	b.n	8007012 <_scanf_float+0x186>
 8007028:	f1ba 0f00 	cmp.w	sl, #0
 800702c:	d10e      	bne.n	800704c <_scanf_float+0x1c0>
 800702e:	f1b9 0f00 	cmp.w	r9, #0
 8007032:	d10e      	bne.n	8007052 <_scanf_float+0x1c6>
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800703a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800703e:	d108      	bne.n	8007052 <_scanf_float+0x1c6>
 8007040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	f04f 0a01 	mov.w	sl, #1
 800704a:	e7e3      	b.n	8007014 <_scanf_float+0x188>
 800704c:	f1ba 0f02 	cmp.w	sl, #2
 8007050:	d055      	beq.n	80070fe <_scanf_float+0x272>
 8007052:	2d01      	cmp	r5, #1
 8007054:	d002      	beq.n	800705c <_scanf_float+0x1d0>
 8007056:	2d04      	cmp	r5, #4
 8007058:	f47f af48 	bne.w	8006eec <_scanf_float+0x60>
 800705c:	3501      	adds	r5, #1
 800705e:	b2ed      	uxtb	r5, r5
 8007060:	e7d8      	b.n	8007014 <_scanf_float+0x188>
 8007062:	f1ba 0f01 	cmp.w	sl, #1
 8007066:	f47f af41 	bne.w	8006eec <_scanf_float+0x60>
 800706a:	f04f 0a02 	mov.w	sl, #2
 800706e:	e7d1      	b.n	8007014 <_scanf_float+0x188>
 8007070:	b97d      	cbnz	r5, 8007092 <_scanf_float+0x206>
 8007072:	f1b9 0f00 	cmp.w	r9, #0
 8007076:	f47f af3c 	bne.w	8006ef2 <_scanf_float+0x66>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007080:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007084:	f47f af39 	bne.w	8006efa <_scanf_float+0x6e>
 8007088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	2501      	movs	r5, #1
 8007090:	e7c0      	b.n	8007014 <_scanf_float+0x188>
 8007092:	2d03      	cmp	r5, #3
 8007094:	d0e2      	beq.n	800705c <_scanf_float+0x1d0>
 8007096:	2d05      	cmp	r5, #5
 8007098:	e7de      	b.n	8007058 <_scanf_float+0x1cc>
 800709a:	2d02      	cmp	r5, #2
 800709c:	f47f af26 	bne.w	8006eec <_scanf_float+0x60>
 80070a0:	2503      	movs	r5, #3
 80070a2:	e7b7      	b.n	8007014 <_scanf_float+0x188>
 80070a4:	2d06      	cmp	r5, #6
 80070a6:	f47f af21 	bne.w	8006eec <_scanf_float+0x60>
 80070aa:	2507      	movs	r5, #7
 80070ac:	e7b2      	b.n	8007014 <_scanf_float+0x188>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	0591      	lsls	r1, r2, #22
 80070b2:	f57f af1b 	bpl.w	8006eec <_scanf_float+0x60>
 80070b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070ba:	6022      	str	r2, [r4, #0]
 80070bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070c0:	e7a8      	b.n	8007014 <_scanf_float+0x188>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070cc:	d006      	beq.n	80070dc <_scanf_float+0x250>
 80070ce:	0550      	lsls	r0, r2, #21
 80070d0:	f57f af0c 	bpl.w	8006eec <_scanf_float+0x60>
 80070d4:	f1b9 0f00 	cmp.w	r9, #0
 80070d8:	f43f af0f 	beq.w	8006efa <_scanf_float+0x6e>
 80070dc:	0591      	lsls	r1, r2, #22
 80070de:	bf58      	it	pl
 80070e0:	9901      	ldrpl	r1, [sp, #4]
 80070e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070e6:	bf58      	it	pl
 80070e8:	eba9 0101 	subpl.w	r1, r9, r1
 80070ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070f0:	bf58      	it	pl
 80070f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	f04f 0900 	mov.w	r9, #0
 80070fc:	e78a      	b.n	8007014 <_scanf_float+0x188>
 80070fe:	f04f 0a03 	mov.w	sl, #3
 8007102:	e787      	b.n	8007014 <_scanf_float+0x188>
 8007104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007108:	4639      	mov	r1, r7
 800710a:	4640      	mov	r0, r8
 800710c:	4798      	blx	r3
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f aedf 	beq.w	8006ed2 <_scanf_float+0x46>
 8007114:	e6ea      	b.n	8006eec <_scanf_float+0x60>
 8007116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800711a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800711e:	463a      	mov	r2, r7
 8007120:	4640      	mov	r0, r8
 8007122:	4798      	blx	r3
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	3b01      	subs	r3, #1
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	e6ec      	b.n	8006f06 <_scanf_float+0x7a>
 800712c:	1e6b      	subs	r3, r5, #1
 800712e:	2b06      	cmp	r3, #6
 8007130:	d825      	bhi.n	800717e <_scanf_float+0x2f2>
 8007132:	2d02      	cmp	r5, #2
 8007134:	d836      	bhi.n	80071a4 <_scanf_float+0x318>
 8007136:	455e      	cmp	r6, fp
 8007138:	f67f aee8 	bls.w	8006f0c <_scanf_float+0x80>
 800713c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007140:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007144:	463a      	mov	r2, r7
 8007146:	4640      	mov	r0, r8
 8007148:	4798      	blx	r3
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	3b01      	subs	r3, #1
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	e7f1      	b.n	8007136 <_scanf_float+0x2aa>
 8007152:	9802      	ldr	r0, [sp, #8]
 8007154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007158:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800715c:	9002      	str	r0, [sp, #8]
 800715e:	463a      	mov	r2, r7
 8007160:	4640      	mov	r0, r8
 8007162:	4798      	blx	r3
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	3b01      	subs	r3, #1
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800716e:	fa5f fa8a 	uxtb.w	sl, sl
 8007172:	f1ba 0f02 	cmp.w	sl, #2
 8007176:	d1ec      	bne.n	8007152 <_scanf_float+0x2c6>
 8007178:	3d03      	subs	r5, #3
 800717a:	b2ed      	uxtb	r5, r5
 800717c:	1b76      	subs	r6, r6, r5
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	05da      	lsls	r2, r3, #23
 8007182:	d52f      	bpl.n	80071e4 <_scanf_float+0x358>
 8007184:	055b      	lsls	r3, r3, #21
 8007186:	d510      	bpl.n	80071aa <_scanf_float+0x31e>
 8007188:	455e      	cmp	r6, fp
 800718a:	f67f aebf 	bls.w	8006f0c <_scanf_float+0x80>
 800718e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007196:	463a      	mov	r2, r7
 8007198:	4640      	mov	r0, r8
 800719a:	4798      	blx	r3
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	3b01      	subs	r3, #1
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	e7f1      	b.n	8007188 <_scanf_float+0x2fc>
 80071a4:	46aa      	mov	sl, r5
 80071a6:	9602      	str	r6, [sp, #8]
 80071a8:	e7df      	b.n	800716a <_scanf_float+0x2de>
 80071aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	2965      	cmp	r1, #101	; 0x65
 80071b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	d00c      	beq.n	80071d8 <_scanf_float+0x34c>
 80071be:	2945      	cmp	r1, #69	; 0x45
 80071c0:	d00a      	beq.n	80071d8 <_scanf_float+0x34c>
 80071c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c6:	463a      	mov	r2, r7
 80071c8:	4640      	mov	r0, r8
 80071ca:	4798      	blx	r3
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	1eb5      	subs	r5, r6, #2
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071dc:	463a      	mov	r2, r7
 80071de:	4640      	mov	r0, r8
 80071e0:	4798      	blx	r3
 80071e2:	462e      	mov	r6, r5
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	f015 0510 	ands.w	r5, r5, #16
 80071ea:	d14d      	bne.n	8007288 <_scanf_float+0x3fc>
 80071ec:	7035      	strb	r5, [r6, #0]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f8:	d11a      	bne.n	8007230 <_scanf_float+0x3a4>
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	454b      	cmp	r3, r9
 80071fe:	eba3 0209 	sub.w	r2, r3, r9
 8007202:	d122      	bne.n	800724a <_scanf_float+0x3be>
 8007204:	2200      	movs	r2, #0
 8007206:	4659      	mov	r1, fp
 8007208:	4640      	mov	r0, r8
 800720a:	f000 feef 	bl	8007fec <_strtod_r>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	6821      	ldr	r1, [r4, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f011 0f02 	tst.w	r1, #2
 8007218:	f103 0204 	add.w	r2, r3, #4
 800721c:	d020      	beq.n	8007260 <_scanf_float+0x3d4>
 800721e:	9903      	ldr	r1, [sp, #12]
 8007220:	600a      	str	r2, [r1, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	ed83 0b00 	vstr	d0, [r3]
 8007228:	68e3      	ldr	r3, [r4, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60e3      	str	r3, [r4, #12]
 800722e:	e66e      	b.n	8006f0e <_scanf_float+0x82>
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0e6      	beq.n	8007204 <_scanf_float+0x378>
 8007236:	9905      	ldr	r1, [sp, #20]
 8007238:	230a      	movs	r3, #10
 800723a:	462a      	mov	r2, r5
 800723c:	3101      	adds	r1, #1
 800723e:	4640      	mov	r0, r8
 8007240:	f000 ff5e 	bl	8008100 <_strtol_r>
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	9e05      	ldr	r6, [sp, #20]
 8007248:	1ac2      	subs	r2, r0, r3
 800724a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800724e:	429e      	cmp	r6, r3
 8007250:	bf28      	it	cs
 8007252:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007256:	490d      	ldr	r1, [pc, #52]	; (800728c <_scanf_float+0x400>)
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f821 	bl	80072a0 <siprintf>
 800725e:	e7d1      	b.n	8007204 <_scanf_float+0x378>
 8007260:	f011 0f04 	tst.w	r1, #4
 8007264:	9903      	ldr	r1, [sp, #12]
 8007266:	600a      	str	r2, [r1, #0]
 8007268:	d1db      	bne.n	8007222 <_scanf_float+0x396>
 800726a:	eeb4 0b40 	vcmp.f64	d0, d0
 800726e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007272:	681e      	ldr	r6, [r3, #0]
 8007274:	d705      	bvc.n	8007282 <_scanf_float+0x3f6>
 8007276:	4806      	ldr	r0, [pc, #24]	; (8007290 <_scanf_float+0x404>)
 8007278:	f000 f80c 	bl	8007294 <nanf>
 800727c:	ed86 0a00 	vstr	s0, [r6]
 8007280:	e7d2      	b.n	8007228 <_scanf_float+0x39c>
 8007282:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007286:	e7f9      	b.n	800727c <_scanf_float+0x3f0>
 8007288:	2500      	movs	r5, #0
 800728a:	e640      	b.n	8006f0e <_scanf_float+0x82>
 800728c:	0800bc76 	.word	0x0800bc76
 8007290:	0800c0ab 	.word	0x0800c0ab

08007294 <nanf>:
 8007294:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800729c <nanf+0x8>
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	7fc00000 	.word	0x7fc00000

080072a0 <siprintf>:
 80072a0:	b40e      	push	{r1, r2, r3}
 80072a2:	b500      	push	{lr}
 80072a4:	b09c      	sub	sp, #112	; 0x70
 80072a6:	ab1d      	add	r3, sp, #116	; 0x74
 80072a8:	9002      	str	r0, [sp, #8]
 80072aa:	9006      	str	r0, [sp, #24]
 80072ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072b0:	4809      	ldr	r0, [pc, #36]	; (80072d8 <siprintf+0x38>)
 80072b2:	9107      	str	r1, [sp, #28]
 80072b4:	9104      	str	r1, [sp, #16]
 80072b6:	4909      	ldr	r1, [pc, #36]	; (80072dc <siprintf+0x3c>)
 80072b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072bc:	9105      	str	r1, [sp, #20]
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	a902      	add	r1, sp, #8
 80072c4:	f002 fece 	bl	800a064 <_svfiprintf_r>
 80072c8:	9b02      	ldr	r3, [sp, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	b01c      	add	sp, #112	; 0x70
 80072d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d4:	b003      	add	sp, #12
 80072d6:	4770      	bx	lr
 80072d8:	20000060 	.word	0x20000060
 80072dc:	ffff0208 	.word	0xffff0208

080072e0 <siscanf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b510      	push	{r4, lr}
 80072e4:	b09f      	sub	sp, #124	; 0x7c
 80072e6:	ac21      	add	r4, sp, #132	; 0x84
 80072e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80072ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80072f6:	9004      	str	r0, [sp, #16]
 80072f8:	9008      	str	r0, [sp, #32]
 80072fa:	f7f8 ffa1 	bl	8000240 <strlen>
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <siscanf+0x50>)
 8007300:	9005      	str	r0, [sp, #20]
 8007302:	9009      	str	r0, [sp, #36]	; 0x24
 8007304:	930d      	str	r3, [sp, #52]	; 0x34
 8007306:	480b      	ldr	r0, [pc, #44]	; (8007334 <siscanf+0x54>)
 8007308:	9a01      	ldr	r2, [sp, #4]
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	9403      	str	r4, [sp, #12]
 800730e:	2300      	movs	r3, #0
 8007310:	9311      	str	r3, [sp, #68]	; 0x44
 8007312:	9316      	str	r3, [sp, #88]	; 0x58
 8007314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007318:	f8ad 301e 	strh.w	r3, [sp, #30]
 800731c:	a904      	add	r1, sp, #16
 800731e:	4623      	mov	r3, r4
 8007320:	f002 fffa 	bl	800a318 <__ssvfiscanf_r>
 8007324:	b01f      	add	sp, #124	; 0x7c
 8007326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732a:	b003      	add	sp, #12
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	0800735b 	.word	0x0800735b
 8007334:	20000060 	.word	0x20000060

08007338 <__sread>:
 8007338:	b510      	push	{r4, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007340:	f003 faae 	bl	800a8a0 <_read_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	bfab      	itete	ge
 8007348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800734a:	89a3      	ldrhlt	r3, [r4, #12]
 800734c:	181b      	addge	r3, r3, r0
 800734e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007352:	bfac      	ite	ge
 8007354:	6563      	strge	r3, [r4, #84]	; 0x54
 8007356:	81a3      	strhlt	r3, [r4, #12]
 8007358:	bd10      	pop	{r4, pc}

0800735a <__seofread>:
 800735a:	2000      	movs	r0, #0
 800735c:	4770      	bx	lr

0800735e <__swrite>:
 800735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007362:	461f      	mov	r7, r3
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	05db      	lsls	r3, r3, #23
 8007368:	4605      	mov	r5, r0
 800736a:	460c      	mov	r4, r1
 800736c:	4616      	mov	r6, r2
 800736e:	d505      	bpl.n	800737c <__swrite+0x1e>
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	f002 f868 	bl	800944c <_lseek_r>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	4628      	mov	r0, r5
 800738e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	f000 beb7 	b.w	8008104 <_write_r>

08007396 <__sseek>:
 8007396:	b510      	push	{r4, lr}
 8007398:	460c      	mov	r4, r1
 800739a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739e:	f002 f855 	bl	800944c <_lseek_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	bf15      	itete	ne
 80073a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80073aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b2:	81a3      	strheq	r3, [r4, #12]
 80073b4:	bf18      	it	ne
 80073b6:	81a3      	strhne	r3, [r4, #12]
 80073b8:	bd10      	pop	{r4, pc}

080073ba <__sclose>:
 80073ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073be:	f000 beb3 	b.w	8008128 <_close_r>

080073c2 <strncmp>:
 80073c2:	b510      	push	{r4, lr}
 80073c4:	b16a      	cbz	r2, 80073e2 <strncmp+0x20>
 80073c6:	3901      	subs	r1, #1
 80073c8:	1884      	adds	r4, r0, r2
 80073ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80073ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d103      	bne.n	80073de <strncmp+0x1c>
 80073d6:	42a0      	cmp	r0, r4
 80073d8:	d001      	beq.n	80073de <strncmp+0x1c>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f5      	bne.n	80073ca <strncmp+0x8>
 80073de:	1a98      	subs	r0, r3, r2
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	4610      	mov	r0, r2
 80073e4:	e7fc      	b.n	80073e0 <strncmp+0x1e>

080073e6 <strncpy>:
 80073e6:	b510      	push	{r4, lr}
 80073e8:	3901      	subs	r1, #1
 80073ea:	4603      	mov	r3, r0
 80073ec:	b132      	cbz	r2, 80073fc <strncpy+0x16>
 80073ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073f2:	f803 4b01 	strb.w	r4, [r3], #1
 80073f6:	3a01      	subs	r2, #1
 80073f8:	2c00      	cmp	r4, #0
 80073fa:	d1f7      	bne.n	80073ec <strncpy+0x6>
 80073fc:	441a      	add	r2, r3
 80073fe:	2100      	movs	r1, #0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <strncpy+0x20>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <strncpy+0x1a>

0800740c <sulp>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	4616      	mov	r6, r2
 8007414:	ec45 4b10 	vmov	d0, r4, r5
 8007418:	f002 fbbe 	bl	8009b98 <__ulp>
 800741c:	b17e      	cbz	r6, 800743e <sulp+0x32>
 800741e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd09      	ble.n	800743e <sulp+0x32>
 800742a:	051b      	lsls	r3, r3, #20
 800742c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007430:	2000      	movs	r0, #0
 8007432:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007436:	ec41 0b17 	vmov	d7, r0, r1
 800743a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <_strtod_l>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	ed2d 8b0c 	vpush	{d8-d13}
 8007448:	b09d      	sub	sp, #116	; 0x74
 800744a:	461f      	mov	r7, r3
 800744c:	2300      	movs	r3, #0
 800744e:	9318      	str	r3, [sp, #96]	; 0x60
 8007450:	4ba6      	ldr	r3, [pc, #664]	; (80076ec <_strtod_l+0x2ac>)
 8007452:	9213      	str	r2, [sp, #76]	; 0x4c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	4604      	mov	r4, r0
 800745a:	4618      	mov	r0, r3
 800745c:	468a      	mov	sl, r1
 800745e:	f7f8 feef 	bl	8000240 <strlen>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	4605      	mov	r5, r0
 8007468:	f04f 0900 	mov.w	r9, #0
 800746c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	2a2b      	cmp	r2, #43	; 0x2b
 8007476:	d04d      	beq.n	8007514 <_strtod_l+0xd4>
 8007478:	d83a      	bhi.n	80074f0 <_strtod_l+0xb0>
 800747a:	2a0d      	cmp	r2, #13
 800747c:	d833      	bhi.n	80074e6 <_strtod_l+0xa6>
 800747e:	2a08      	cmp	r2, #8
 8007480:	d833      	bhi.n	80074ea <_strtod_l+0xaa>
 8007482:	2a00      	cmp	r2, #0
 8007484:	d03d      	beq.n	8007502 <_strtod_l+0xc2>
 8007486:	2300      	movs	r3, #0
 8007488:	930b      	str	r3, [sp, #44]	; 0x2c
 800748a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800748c:	7833      	ldrb	r3, [r6, #0]
 800748e:	2b30      	cmp	r3, #48	; 0x30
 8007490:	f040 80b6 	bne.w	8007600 <_strtod_l+0x1c0>
 8007494:	7873      	ldrb	r3, [r6, #1]
 8007496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800749a:	2b58      	cmp	r3, #88	; 0x58
 800749c:	d16d      	bne.n	800757a <_strtod_l+0x13a>
 800749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	ab18      	add	r3, sp, #96	; 0x60
 80074a4:	9702      	str	r7, [sp, #8]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4a91      	ldr	r2, [pc, #580]	; (80076f0 <_strtod_l+0x2b0>)
 80074aa:	ab19      	add	r3, sp, #100	; 0x64
 80074ac:	a917      	add	r1, sp, #92	; 0x5c
 80074ae:	4620      	mov	r0, r4
 80074b0:	f001 fcc0 	bl	8008e34 <__gethex>
 80074b4:	f010 0507 	ands.w	r5, r0, #7
 80074b8:	4607      	mov	r7, r0
 80074ba:	d005      	beq.n	80074c8 <_strtod_l+0x88>
 80074bc:	2d06      	cmp	r5, #6
 80074be:	d12b      	bne.n	8007518 <_strtod_l+0xd8>
 80074c0:	3601      	adds	r6, #1
 80074c2:	2300      	movs	r3, #0
 80074c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80074c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 856e 	bne.w	8007fac <_strtod_l+0xb6c>
 80074d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d2:	b1e3      	cbz	r3, 800750e <_strtod_l+0xce>
 80074d4:	ec49 8b17 	vmov	d7, r8, r9
 80074d8:	eeb1 0b47 	vneg.f64	d0, d7
 80074dc:	b01d      	add	sp, #116	; 0x74
 80074de:	ecbd 8b0c 	vpop	{d8-d13}
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	2a20      	cmp	r2, #32
 80074e8:	d1cd      	bne.n	8007486 <_strtod_l+0x46>
 80074ea:	3301      	adds	r3, #1
 80074ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ee:	e7bf      	b.n	8007470 <_strtod_l+0x30>
 80074f0:	2a2d      	cmp	r2, #45	; 0x2d
 80074f2:	d1c8      	bne.n	8007486 <_strtod_l+0x46>
 80074f4:	2201      	movs	r2, #1
 80074f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1c3      	bne.n	800748a <_strtod_l+0x4a>
 8007502:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007504:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 854d 	bne.w	8007fa8 <_strtod_l+0xb68>
 800750e:	ec49 8b10 	vmov	d0, r8, r9
 8007512:	e7e3      	b.n	80074dc <_strtod_l+0x9c>
 8007514:	2200      	movs	r2, #0
 8007516:	e7ee      	b.n	80074f6 <_strtod_l+0xb6>
 8007518:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800751a:	b13a      	cbz	r2, 800752c <_strtod_l+0xec>
 800751c:	2135      	movs	r1, #53	; 0x35
 800751e:	a81a      	add	r0, sp, #104	; 0x68
 8007520:	f002 fc46 	bl	8009db0 <__copybits>
 8007524:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007526:	4620      	mov	r0, r4
 8007528:	f002 f80a 	bl	8009540 <_Bfree>
 800752c:	3d01      	subs	r5, #1
 800752e:	2d05      	cmp	r5, #5
 8007530:	d807      	bhi.n	8007542 <_strtod_l+0x102>
 8007532:	e8df f005 	tbb	[pc, r5]
 8007536:	0b0e      	.short	0x0b0e
 8007538:	030e1d18 	.word	0x030e1d18
 800753c:	f04f 0900 	mov.w	r9, #0
 8007540:	46c8      	mov	r8, r9
 8007542:	073b      	lsls	r3, r7, #28
 8007544:	d5c0      	bpl.n	80074c8 <_strtod_l+0x88>
 8007546:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800754a:	e7bd      	b.n	80074c8 <_strtod_l+0x88>
 800754c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007550:	e7f7      	b.n	8007542 <_strtod_l+0x102>
 8007552:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8007556:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007558:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800755c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007560:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007564:	e7ed      	b.n	8007542 <_strtod_l+0x102>
 8007566:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80076f4 <_strtod_l+0x2b4>
 800756a:	f04f 0800 	mov.w	r8, #0
 800756e:	e7e8      	b.n	8007542 <_strtod_l+0x102>
 8007570:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007574:	f04f 38ff 	mov.w	r8, #4294967295
 8007578:	e7e3      	b.n	8007542 <_strtod_l+0x102>
 800757a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b30      	cmp	r3, #48	; 0x30
 8007584:	d0f9      	beq.n	800757a <_strtod_l+0x13a>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d09e      	beq.n	80074c8 <_strtod_l+0x88>
 800758a:	2301      	movs	r3, #1
 800758c:	9306      	str	r3, [sp, #24]
 800758e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007590:	930c      	str	r3, [sp, #48]	; 0x30
 8007592:	2300      	movs	r3, #0
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	930a      	str	r3, [sp, #40]	; 0x28
 8007598:	461e      	mov	r6, r3
 800759a:	220a      	movs	r2, #10
 800759c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800759e:	f890 b000 	ldrb.w	fp, [r0]
 80075a2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	2909      	cmp	r1, #9
 80075aa:	d92b      	bls.n	8007604 <_strtod_l+0x1c4>
 80075ac:	9908      	ldr	r1, [sp, #32]
 80075ae:	462a      	mov	r2, r5
 80075b0:	f7ff ff07 	bl	80073c2 <strncmp>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d035      	beq.n	8007624 <_strtod_l+0x1e4>
 80075b8:	2000      	movs	r0, #0
 80075ba:	465a      	mov	r2, fp
 80075bc:	4633      	mov	r3, r6
 80075be:	4683      	mov	fp, r0
 80075c0:	4601      	mov	r1, r0
 80075c2:	2a65      	cmp	r2, #101	; 0x65
 80075c4:	d001      	beq.n	80075ca <_strtod_l+0x18a>
 80075c6:	2a45      	cmp	r2, #69	; 0x45
 80075c8:	d118      	bne.n	80075fc <_strtod_l+0x1bc>
 80075ca:	b91b      	cbnz	r3, 80075d4 <_strtod_l+0x194>
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	4303      	orrs	r3, r0
 80075d0:	d097      	beq.n	8007502 <_strtod_l+0xc2>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80075d8:	f10a 0201 	add.w	r2, sl, #1
 80075dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80075de:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80075e2:	2a2b      	cmp	r2, #43	; 0x2b
 80075e4:	d077      	beq.n	80076d6 <_strtod_l+0x296>
 80075e6:	2a2d      	cmp	r2, #45	; 0x2d
 80075e8:	d07d      	beq.n	80076e6 <_strtod_l+0x2a6>
 80075ea:	f04f 0e00 	mov.w	lr, #0
 80075ee:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80075f2:	2d09      	cmp	r5, #9
 80075f4:	f240 8084 	bls.w	8007700 <_strtod_l+0x2c0>
 80075f8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80075fc:	2500      	movs	r5, #0
 80075fe:	e09f      	b.n	8007740 <_strtod_l+0x300>
 8007600:	2300      	movs	r3, #0
 8007602:	e7c3      	b.n	800758c <_strtod_l+0x14c>
 8007604:	2e08      	cmp	r6, #8
 8007606:	bfd5      	itete	le
 8007608:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800760a:	9904      	ldrgt	r1, [sp, #16]
 800760c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007610:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007614:	f100 0001 	add.w	r0, r0, #1
 8007618:	bfd4      	ite	le
 800761a:	930a      	strle	r3, [sp, #40]	; 0x28
 800761c:	9304      	strgt	r3, [sp, #16]
 800761e:	3601      	adds	r6, #1
 8007620:	9017      	str	r0, [sp, #92]	; 0x5c
 8007622:	e7bb      	b.n	800759c <_strtod_l+0x15c>
 8007624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007626:	195a      	adds	r2, r3, r5
 8007628:	9217      	str	r2, [sp, #92]	; 0x5c
 800762a:	5d5a      	ldrb	r2, [r3, r5]
 800762c:	b3ae      	cbz	r6, 800769a <_strtod_l+0x25a>
 800762e:	4683      	mov	fp, r0
 8007630:	4633      	mov	r3, r6
 8007632:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007636:	2909      	cmp	r1, #9
 8007638:	d912      	bls.n	8007660 <_strtod_l+0x220>
 800763a:	2101      	movs	r1, #1
 800763c:	e7c1      	b.n	80075c2 <_strtod_l+0x182>
 800763e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	9217      	str	r2, [sp, #92]	; 0x5c
 8007644:	785a      	ldrb	r2, [r3, #1]
 8007646:	3001      	adds	r0, #1
 8007648:	2a30      	cmp	r2, #48	; 0x30
 800764a:	d0f8      	beq.n	800763e <_strtod_l+0x1fe>
 800764c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007650:	2b08      	cmp	r3, #8
 8007652:	f200 84b0 	bhi.w	8007fb6 <_strtod_l+0xb76>
 8007656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007658:	930c      	str	r3, [sp, #48]	; 0x30
 800765a:	4683      	mov	fp, r0
 800765c:	2000      	movs	r0, #0
 800765e:	4603      	mov	r3, r0
 8007660:	3a30      	subs	r2, #48	; 0x30
 8007662:	f100 0101 	add.w	r1, r0, #1
 8007666:	d012      	beq.n	800768e <_strtod_l+0x24e>
 8007668:	448b      	add	fp, r1
 800766a:	eb00 0c03 	add.w	ip, r0, r3
 800766e:	4619      	mov	r1, r3
 8007670:	250a      	movs	r5, #10
 8007672:	4561      	cmp	r1, ip
 8007674:	d113      	bne.n	800769e <_strtod_l+0x25e>
 8007676:	1819      	adds	r1, r3, r0
 8007678:	2908      	cmp	r1, #8
 800767a:	f103 0301 	add.w	r3, r3, #1
 800767e:	4403      	add	r3, r0
 8007680:	dc1d      	bgt.n	80076be <_strtod_l+0x27e>
 8007682:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007684:	210a      	movs	r1, #10
 8007686:	fb01 2200 	mla	r2, r1, r0, r2
 800768a:	920a      	str	r2, [sp, #40]	; 0x28
 800768c:	2100      	movs	r1, #0
 800768e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007690:	1c50      	adds	r0, r2, #1
 8007692:	9017      	str	r0, [sp, #92]	; 0x5c
 8007694:	7852      	ldrb	r2, [r2, #1]
 8007696:	4608      	mov	r0, r1
 8007698:	e7cb      	b.n	8007632 <_strtod_l+0x1f2>
 800769a:	4630      	mov	r0, r6
 800769c:	e7d4      	b.n	8007648 <_strtod_l+0x208>
 800769e:	2908      	cmp	r1, #8
 80076a0:	dc04      	bgt.n	80076ac <_strtod_l+0x26c>
 80076a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80076a4:	436f      	muls	r7, r5
 80076a6:	970a      	str	r7, [sp, #40]	; 0x28
 80076a8:	3101      	adds	r1, #1
 80076aa:	e7e2      	b.n	8007672 <_strtod_l+0x232>
 80076ac:	f101 0e01 	add.w	lr, r1, #1
 80076b0:	f1be 0f10 	cmp.w	lr, #16
 80076b4:	bfde      	ittt	le
 80076b6:	9f04      	ldrle	r7, [sp, #16]
 80076b8:	436f      	mulle	r7, r5
 80076ba:	9704      	strle	r7, [sp, #16]
 80076bc:	e7f4      	b.n	80076a8 <_strtod_l+0x268>
 80076be:	2b10      	cmp	r3, #16
 80076c0:	bfdf      	itttt	le
 80076c2:	9804      	ldrle	r0, [sp, #16]
 80076c4:	210a      	movle	r1, #10
 80076c6:	fb01 2200 	mlale	r2, r1, r0, r2
 80076ca:	9204      	strle	r2, [sp, #16]
 80076cc:	e7de      	b.n	800768c <_strtod_l+0x24c>
 80076ce:	f04f 0b00 	mov.w	fp, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	e77a      	b.n	80075cc <_strtod_l+0x18c>
 80076d6:	f04f 0e00 	mov.w	lr, #0
 80076da:	f10a 0202 	add.w	r2, sl, #2
 80076de:	9217      	str	r2, [sp, #92]	; 0x5c
 80076e0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80076e4:	e783      	b.n	80075ee <_strtod_l+0x1ae>
 80076e6:	f04f 0e01 	mov.w	lr, #1
 80076ea:	e7f6      	b.n	80076da <_strtod_l+0x29a>
 80076ec:	0800bed0 	.word	0x0800bed0
 80076f0:	0800bc7c 	.word	0x0800bc7c
 80076f4:	7ff00000 	.word	0x7ff00000
 80076f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076fa:	1c55      	adds	r5, r2, #1
 80076fc:	9517      	str	r5, [sp, #92]	; 0x5c
 80076fe:	7852      	ldrb	r2, [r2, #1]
 8007700:	2a30      	cmp	r2, #48	; 0x30
 8007702:	d0f9      	beq.n	80076f8 <_strtod_l+0x2b8>
 8007704:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007708:	2d08      	cmp	r5, #8
 800770a:	f63f af77 	bhi.w	80075fc <_strtod_l+0x1bc>
 800770e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007712:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007714:	9208      	str	r2, [sp, #32]
 8007716:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007718:	1c55      	adds	r5, r2, #1
 800771a:	9517      	str	r5, [sp, #92]	; 0x5c
 800771c:	7852      	ldrb	r2, [r2, #1]
 800771e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007722:	2f09      	cmp	r7, #9
 8007724:	d937      	bls.n	8007796 <_strtod_l+0x356>
 8007726:	9f08      	ldr	r7, [sp, #32]
 8007728:	1bed      	subs	r5, r5, r7
 800772a:	2d08      	cmp	r5, #8
 800772c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007730:	dc02      	bgt.n	8007738 <_strtod_l+0x2f8>
 8007732:	4565      	cmp	r5, ip
 8007734:	bfa8      	it	ge
 8007736:	4665      	movge	r5, ip
 8007738:	f1be 0f00 	cmp.w	lr, #0
 800773c:	d000      	beq.n	8007740 <_strtod_l+0x300>
 800773e:	426d      	negs	r5, r5
 8007740:	2b00      	cmp	r3, #0
 8007742:	d14f      	bne.n	80077e4 <_strtod_l+0x3a4>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	4303      	orrs	r3, r0
 8007748:	f47f aebe 	bne.w	80074c8 <_strtod_l+0x88>
 800774c:	2900      	cmp	r1, #0
 800774e:	f47f aed8 	bne.w	8007502 <_strtod_l+0xc2>
 8007752:	2a69      	cmp	r2, #105	; 0x69
 8007754:	d027      	beq.n	80077a6 <_strtod_l+0x366>
 8007756:	dc24      	bgt.n	80077a2 <_strtod_l+0x362>
 8007758:	2a49      	cmp	r2, #73	; 0x49
 800775a:	d024      	beq.n	80077a6 <_strtod_l+0x366>
 800775c:	2a4e      	cmp	r2, #78	; 0x4e
 800775e:	f47f aed0 	bne.w	8007502 <_strtod_l+0xc2>
 8007762:	499b      	ldr	r1, [pc, #620]	; (80079d0 <_strtod_l+0x590>)
 8007764:	a817      	add	r0, sp, #92	; 0x5c
 8007766:	f001 fdbd 	bl	80092e4 <__match>
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f aec9 	beq.w	8007502 <_strtod_l+0xc2>
 8007770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b28      	cmp	r3, #40	; 0x28
 8007776:	d12d      	bne.n	80077d4 <_strtod_l+0x394>
 8007778:	4996      	ldr	r1, [pc, #600]	; (80079d4 <_strtod_l+0x594>)
 800777a:	aa1a      	add	r2, sp, #104	; 0x68
 800777c:	a817      	add	r0, sp, #92	; 0x5c
 800777e:	f001 fdc5 	bl	800930c <__hexnan>
 8007782:	2805      	cmp	r0, #5
 8007784:	d126      	bne.n	80077d4 <_strtod_l+0x394>
 8007786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007788:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800778c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007790:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007794:	e698      	b.n	80074c8 <_strtod_l+0x88>
 8007796:	250a      	movs	r5, #10
 8007798:	fb05 250c 	mla	r5, r5, ip, r2
 800779c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80077a0:	e7b9      	b.n	8007716 <_strtod_l+0x2d6>
 80077a2:	2a6e      	cmp	r2, #110	; 0x6e
 80077a4:	e7db      	b.n	800775e <_strtod_l+0x31e>
 80077a6:	498c      	ldr	r1, [pc, #560]	; (80079d8 <_strtod_l+0x598>)
 80077a8:	a817      	add	r0, sp, #92	; 0x5c
 80077aa:	f001 fd9b 	bl	80092e4 <__match>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f43f aea7 	beq.w	8007502 <_strtod_l+0xc2>
 80077b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077b6:	4989      	ldr	r1, [pc, #548]	; (80079dc <_strtod_l+0x59c>)
 80077b8:	3b01      	subs	r3, #1
 80077ba:	a817      	add	r0, sp, #92	; 0x5c
 80077bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80077be:	f001 fd91 	bl	80092e4 <__match>
 80077c2:	b910      	cbnz	r0, 80077ca <_strtod_l+0x38a>
 80077c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c6:	3301      	adds	r3, #1
 80077c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80079f0 <_strtod_l+0x5b0>
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	e679      	b.n	80074c8 <_strtod_l+0x88>
 80077d4:	4882      	ldr	r0, [pc, #520]	; (80079e0 <_strtod_l+0x5a0>)
 80077d6:	f003 f877 	bl	800a8c8 <nan>
 80077da:	ed8d 0b04 	vstr	d0, [sp, #16]
 80077de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80077e2:	e671      	b.n	80074c8 <_strtod_l+0x88>
 80077e4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80077e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80077ec:	eba5 020b 	sub.w	r2, r5, fp
 80077f0:	2e00      	cmp	r6, #0
 80077f2:	bf08      	it	eq
 80077f4:	461e      	moveq	r6, r3
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80077fc:	9206      	str	r2, [sp, #24]
 80077fe:	461a      	mov	r2, r3
 8007800:	bfa8      	it	ge
 8007802:	2210      	movge	r2, #16
 8007804:	2b09      	cmp	r3, #9
 8007806:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800780a:	dd0e      	ble.n	800782a <_strtod_l+0x3ea>
 800780c:	4975      	ldr	r1, [pc, #468]	; (80079e4 <_strtod_l+0x5a4>)
 800780e:	eddd 7a04 	vldr	s15, [sp, #16]
 8007812:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007816:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800781a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800781e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007822:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007826:	ec59 8b17 	vmov	r8, r9, d7
 800782a:	2b0f      	cmp	r3, #15
 800782c:	dc37      	bgt.n	800789e <_strtod_l+0x45e>
 800782e:	9906      	ldr	r1, [sp, #24]
 8007830:	2900      	cmp	r1, #0
 8007832:	f43f ae49 	beq.w	80074c8 <_strtod_l+0x88>
 8007836:	dd23      	ble.n	8007880 <_strtod_l+0x440>
 8007838:	2916      	cmp	r1, #22
 800783a:	dc0b      	bgt.n	8007854 <_strtod_l+0x414>
 800783c:	4b69      	ldr	r3, [pc, #420]	; (80079e4 <_strtod_l+0x5a4>)
 800783e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007842:	ed93 7b00 	vldr	d7, [r3]
 8007846:	ec49 8b16 	vmov	d6, r8, r9
 800784a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800784e:	ec59 8b17 	vmov	r8, r9, d7
 8007852:	e639      	b.n	80074c8 <_strtod_l+0x88>
 8007854:	9806      	ldr	r0, [sp, #24]
 8007856:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800785a:	4281      	cmp	r1, r0
 800785c:	db1f      	blt.n	800789e <_strtod_l+0x45e>
 800785e:	4a61      	ldr	r2, [pc, #388]	; (80079e4 <_strtod_l+0x5a4>)
 8007860:	f1c3 030f 	rsb	r3, r3, #15
 8007864:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007868:	ed91 7b00 	vldr	d7, [r1]
 800786c:	ec49 8b16 	vmov	d6, r8, r9
 8007870:	1ac3      	subs	r3, r0, r3
 8007872:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800787a:	ed92 6b00 	vldr	d6, [r2]
 800787e:	e7e4      	b.n	800784a <_strtod_l+0x40a>
 8007880:	9906      	ldr	r1, [sp, #24]
 8007882:	3116      	adds	r1, #22
 8007884:	db0b      	blt.n	800789e <_strtod_l+0x45e>
 8007886:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <_strtod_l+0x5a4>)
 8007888:	ebab 0505 	sub.w	r5, fp, r5
 800788c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007890:	ed95 7b00 	vldr	d7, [r5]
 8007894:	ec49 8b16 	vmov	d6, r8, r9
 8007898:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800789c:	e7d7      	b.n	800784e <_strtod_l+0x40e>
 800789e:	9906      	ldr	r1, [sp, #24]
 80078a0:	1a9a      	subs	r2, r3, r2
 80078a2:	440a      	add	r2, r1
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	dd74      	ble.n	8007992 <_strtod_l+0x552>
 80078a8:	f012 000f 	ands.w	r0, r2, #15
 80078ac:	d00a      	beq.n	80078c4 <_strtod_l+0x484>
 80078ae:	494d      	ldr	r1, [pc, #308]	; (80079e4 <_strtod_l+0x5a4>)
 80078b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80078b4:	ed91 7b00 	vldr	d7, [r1]
 80078b8:	ec49 8b16 	vmov	d6, r8, r9
 80078bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078c0:	ec59 8b17 	vmov	r8, r9, d7
 80078c4:	f032 020f 	bics.w	r2, r2, #15
 80078c8:	d04f      	beq.n	800796a <_strtod_l+0x52a>
 80078ca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80078ce:	dd22      	ble.n	8007916 <_strtod_l+0x4d6>
 80078d0:	2500      	movs	r5, #0
 80078d2:	462e      	mov	r6, r5
 80078d4:	950a      	str	r5, [sp, #40]	; 0x28
 80078d6:	462f      	mov	r7, r5
 80078d8:	2322      	movs	r3, #34	; 0x22
 80078da:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80079f0 <_strtod_l+0x5b0>
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	f04f 0800 	mov.w	r8, #0
 80078e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f43f adee 	beq.w	80074c8 <_strtod_l+0x88>
 80078ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078ee:	4620      	mov	r0, r4
 80078f0:	f001 fe26 	bl	8009540 <_Bfree>
 80078f4:	4639      	mov	r1, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	f001 fe22 	bl	8009540 <_Bfree>
 80078fc:	4631      	mov	r1, r6
 80078fe:	4620      	mov	r0, r4
 8007900:	f001 fe1e 	bl	8009540 <_Bfree>
 8007904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007906:	4620      	mov	r0, r4
 8007908:	f001 fe1a 	bl	8009540 <_Bfree>
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	f001 fe16 	bl	8009540 <_Bfree>
 8007914:	e5d8      	b.n	80074c8 <_strtod_l+0x88>
 8007916:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800791a:	2000      	movs	r0, #0
 800791c:	4f32      	ldr	r7, [pc, #200]	; (80079e8 <_strtod_l+0x5a8>)
 800791e:	1112      	asrs	r2, r2, #4
 8007920:	4601      	mov	r1, r0
 8007922:	2a01      	cmp	r2, #1
 8007924:	dc24      	bgt.n	8007970 <_strtod_l+0x530>
 8007926:	b108      	cbz	r0, 800792c <_strtod_l+0x4ec>
 8007928:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800792c:	4a2e      	ldr	r2, [pc, #184]	; (80079e8 <_strtod_l+0x5a8>)
 800792e:	482f      	ldr	r0, [pc, #188]	; (80079ec <_strtod_l+0x5ac>)
 8007930:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007934:	ed91 7b00 	vldr	d7, [r1]
 8007938:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800793c:	ec49 8b16 	vmov	d6, r8, r9
 8007940:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007948:	9905      	ldr	r1, [sp, #20]
 800794a:	4a29      	ldr	r2, [pc, #164]	; (80079f0 <_strtod_l+0x5b0>)
 800794c:	400a      	ands	r2, r1
 800794e:	4282      	cmp	r2, r0
 8007950:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007954:	d8bc      	bhi.n	80078d0 <_strtod_l+0x490>
 8007956:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800795a:	4282      	cmp	r2, r0
 800795c:	bf86      	itte	hi
 800795e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80079f4 <_strtod_l+0x5b4>
 8007962:	f04f 38ff 	movhi.w	r8, #4294967295
 8007966:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800796a:	2200      	movs	r2, #0
 800796c:	9204      	str	r2, [sp, #16]
 800796e:	e07f      	b.n	8007a70 <_strtod_l+0x630>
 8007970:	f012 0f01 	tst.w	r2, #1
 8007974:	d00a      	beq.n	800798c <_strtod_l+0x54c>
 8007976:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800797a:	ed90 7b00 	vldr	d7, [r0]
 800797e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8007982:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007986:	ed8d 7b04 	vstr	d7, [sp, #16]
 800798a:	2001      	movs	r0, #1
 800798c:	3101      	adds	r1, #1
 800798e:	1052      	asrs	r2, r2, #1
 8007990:	e7c7      	b.n	8007922 <_strtod_l+0x4e2>
 8007992:	d0ea      	beq.n	800796a <_strtod_l+0x52a>
 8007994:	4252      	negs	r2, r2
 8007996:	f012 000f 	ands.w	r0, r2, #15
 800799a:	d00a      	beq.n	80079b2 <_strtod_l+0x572>
 800799c:	4911      	ldr	r1, [pc, #68]	; (80079e4 <_strtod_l+0x5a4>)
 800799e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80079a2:	ed91 7b00 	vldr	d7, [r1]
 80079a6:	ec49 8b16 	vmov	d6, r8, r9
 80079aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80079ae:	ec59 8b17 	vmov	r8, r9, d7
 80079b2:	1112      	asrs	r2, r2, #4
 80079b4:	d0d9      	beq.n	800796a <_strtod_l+0x52a>
 80079b6:	2a1f      	cmp	r2, #31
 80079b8:	dd1e      	ble.n	80079f8 <_strtod_l+0x5b8>
 80079ba:	2500      	movs	r5, #0
 80079bc:	462e      	mov	r6, r5
 80079be:	950a      	str	r5, [sp, #40]	; 0x28
 80079c0:	462f      	mov	r7, r5
 80079c2:	2322      	movs	r3, #34	; 0x22
 80079c4:	f04f 0800 	mov.w	r8, #0
 80079c8:	f04f 0900 	mov.w	r9, #0
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	e789      	b.n	80078e4 <_strtod_l+0x4a4>
 80079d0:	0800bc51 	.word	0x0800bc51
 80079d4:	0800bc90 	.word	0x0800bc90
 80079d8:	0800bc49 	.word	0x0800bc49
 80079dc:	0800bdd4 	.word	0x0800bdd4
 80079e0:	0800c0ab 	.word	0x0800c0ab
 80079e4:	0800bf70 	.word	0x0800bf70
 80079e8:	0800bf48 	.word	0x0800bf48
 80079ec:	7ca00000 	.word	0x7ca00000
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	7fefffff 	.word	0x7fefffff
 80079f8:	f012 0110 	ands.w	r1, r2, #16
 80079fc:	bf18      	it	ne
 80079fe:	216a      	movne	r1, #106	; 0x6a
 8007a00:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007a04:	9104      	str	r1, [sp, #16]
 8007a06:	49c0      	ldr	r1, [pc, #768]	; (8007d08 <_strtod_l+0x8c8>)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	07d7      	lsls	r7, r2, #31
 8007a0c:	d508      	bpl.n	8007a20 <_strtod_l+0x5e0>
 8007a0e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8007a12:	ed91 7b00 	vldr	d7, [r1]
 8007a16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007a1a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	1052      	asrs	r2, r2, #1
 8007a22:	f101 0108 	add.w	r1, r1, #8
 8007a26:	d1f0      	bne.n	8007a0a <_strtod_l+0x5ca>
 8007a28:	b108      	cbz	r0, 8007a2e <_strtod_l+0x5ee>
 8007a2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007a2e:	9a04      	ldr	r2, [sp, #16]
 8007a30:	b1ba      	cbz	r2, 8007a62 <_strtod_l+0x622>
 8007a32:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a36:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	dd10      	ble.n	8007a62 <_strtod_l+0x622>
 8007a40:	2a1f      	cmp	r2, #31
 8007a42:	f340 8132 	ble.w	8007caa <_strtod_l+0x86a>
 8007a46:	2a34      	cmp	r2, #52	; 0x34
 8007a48:	bfde      	ittt	le
 8007a4a:	3a20      	suble	r2, #32
 8007a4c:	f04f 30ff 	movle.w	r0, #4294967295
 8007a50:	fa00 f202 	lslle.w	r2, r0, r2
 8007a54:	f04f 0800 	mov.w	r8, #0
 8007a58:	bfcc      	ite	gt
 8007a5a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a5e:	ea02 0901 	andle.w	r9, r2, r1
 8007a62:	ec49 8b17 	vmov	d7, r8, r9
 8007a66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6e:	d0a4      	beq.n	80079ba <_strtod_l+0x57a>
 8007a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a72:	9200      	str	r2, [sp, #0]
 8007a74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a76:	4632      	mov	r2, r6
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f001 fdcd 	bl	8009618 <__s2b>
 8007a7e:	900a      	str	r0, [sp, #40]	; 0x28
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f43f af25 	beq.w	80078d0 <_strtod_l+0x490>
 8007a86:	9b06      	ldr	r3, [sp, #24]
 8007a88:	ebab 0505 	sub.w	r5, fp, r5
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfb4      	ite	lt
 8007a90:	462b      	movlt	r3, r5
 8007a92:	2300      	movge	r3, #0
 8007a94:	930c      	str	r3, [sp, #48]	; 0x30
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007cf0 <_strtod_l+0x8b0>
 8007a9c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007cf8 <_strtod_l+0x8b8>
 8007aa0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007d00 <_strtod_l+0x8c0>
 8007aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aa8:	2500      	movs	r5, #0
 8007aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8007aac:	462e      	mov	r6, r5
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	6859      	ldr	r1, [r3, #4]
 8007ab4:	f001 fd04 	bl	80094c0 <_Balloc>
 8007ab8:	4607      	mov	r7, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f af0c 	beq.w	80078d8 <_strtod_l+0x498>
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	f103 010c 	add.w	r1, r3, #12
 8007aca:	0092      	lsls	r2, r2, #2
 8007acc:	300c      	adds	r0, #12
 8007ace:	f001 fce9 	bl	80094a4 <memcpy>
 8007ad2:	ec49 8b10 	vmov	d0, r8, r9
 8007ad6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ad8:	a919      	add	r1, sp, #100	; 0x64
 8007ada:	4620      	mov	r0, r4
 8007adc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007ae0:	f002 f8d6 	bl	8009c90 <__d2b>
 8007ae4:	9018      	str	r0, [sp, #96]	; 0x60
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f aef6 	beq.w	80078d8 <_strtod_l+0x498>
 8007aec:	2101      	movs	r1, #1
 8007aee:	4620      	mov	r0, r4
 8007af0:	f001 fe2c 	bl	800974c <__i2b>
 8007af4:	4606      	mov	r6, r0
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f aeee 	beq.w	80078d8 <_strtod_l+0x498>
 8007afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007afe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfab      	itete	ge
 8007b04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b08:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007b0c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007b10:	bfac      	ite	ge
 8007b12:	eb03 0b02 	addge.w	fp, r3, r2
 8007b16:	eba2 0a03 	sublt.w	sl, r2, r3
 8007b1a:	9a04      	ldr	r2, [sp, #16]
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	440b      	add	r3, r1
 8007b20:	4a7a      	ldr	r2, [pc, #488]	; (8007d0c <_strtod_l+0x8cc>)
 8007b22:	3b01      	subs	r3, #1
 8007b24:	4293      	cmp	r3, r2
 8007b26:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007b2a:	f280 80d1 	bge.w	8007cd0 <_strtod_l+0x890>
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	2a1f      	cmp	r2, #31
 8007b32:	eba1 0102 	sub.w	r1, r1, r2
 8007b36:	f04f 0001 	mov.w	r0, #1
 8007b3a:	f300 80bd 	bgt.w	8007cb8 <_strtod_l+0x878>
 8007b3e:	fa00 f302 	lsl.w	r3, r0, r2
 8007b42:	930e      	str	r3, [sp, #56]	; 0x38
 8007b44:	2300      	movs	r3, #0
 8007b46:	930d      	str	r3, [sp, #52]	; 0x34
 8007b48:	eb0b 0301 	add.w	r3, fp, r1
 8007b4c:	9a04      	ldr	r2, [sp, #16]
 8007b4e:	459b      	cmp	fp, r3
 8007b50:	448a      	add	sl, r1
 8007b52:	4492      	add	sl, r2
 8007b54:	465a      	mov	r2, fp
 8007b56:	bfa8      	it	ge
 8007b58:	461a      	movge	r2, r3
 8007b5a:	4552      	cmp	r2, sl
 8007b5c:	bfa8      	it	ge
 8007b5e:	4652      	movge	r2, sl
 8007b60:	2a00      	cmp	r2, #0
 8007b62:	bfc2      	ittt	gt
 8007b64:	1a9b      	subgt	r3, r3, r2
 8007b66:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007b6a:	ebab 0b02 	subgt.w	fp, fp, r2
 8007b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b70:	2a00      	cmp	r2, #0
 8007b72:	dd18      	ble.n	8007ba6 <_strtod_l+0x766>
 8007b74:	4631      	mov	r1, r6
 8007b76:	4620      	mov	r0, r4
 8007b78:	9315      	str	r3, [sp, #84]	; 0x54
 8007b7a:	f001 fea3 	bl	80098c4 <__pow5mult>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f43f aea9 	beq.w	80078d8 <_strtod_l+0x498>
 8007b86:	4601      	mov	r1, r0
 8007b88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f001 fdf4 	bl	8009778 <__multiply>
 8007b90:	9014      	str	r0, [sp, #80]	; 0x50
 8007b92:	2800      	cmp	r0, #0
 8007b94:	f43f aea0 	beq.w	80078d8 <_strtod_l+0x498>
 8007b98:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f001 fcd0 	bl	8009540 <_Bfree>
 8007ba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ba4:	9218      	str	r2, [sp, #96]	; 0x60
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f300 8097 	bgt.w	8007cda <_strtod_l+0x89a>
 8007bac:	9b06      	ldr	r3, [sp, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd08      	ble.n	8007bc4 <_strtod_l+0x784>
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f001 fe84 	bl	80098c4 <__pow5mult>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f43f ae8a 	beq.w	80078d8 <_strtod_l+0x498>
 8007bc4:	f1ba 0f00 	cmp.w	sl, #0
 8007bc8:	dd08      	ble.n	8007bdc <_strtod_l+0x79c>
 8007bca:	4639      	mov	r1, r7
 8007bcc:	4652      	mov	r2, sl
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f001 fed2 	bl	8009978 <__lshift>
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f43f ae7e 	beq.w	80078d8 <_strtod_l+0x498>
 8007bdc:	f1bb 0f00 	cmp.w	fp, #0
 8007be0:	dd08      	ble.n	8007bf4 <_strtod_l+0x7b4>
 8007be2:	4631      	mov	r1, r6
 8007be4:	465a      	mov	r2, fp
 8007be6:	4620      	mov	r0, r4
 8007be8:	f001 fec6 	bl	8009978 <__lshift>
 8007bec:	4606      	mov	r6, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f ae72 	beq.w	80078d8 <_strtod_l+0x498>
 8007bf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf6:	463a      	mov	r2, r7
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f001 ff45 	bl	8009a88 <__mdiff>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f ae69 	beq.w	80078d8 <_strtod_l+0x498>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007c0c:	60c3      	str	r3, [r0, #12]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	f001 ff1e 	bl	8009a50 <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	da7f      	bge.n	8007d18 <_strtod_l+0x8d8>
 8007c18:	ea5a 0308 	orrs.w	r3, sl, r8
 8007c1c:	f040 80a5 	bne.w	8007d6a <_strtod_l+0x92a>
 8007c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 80a0 	bne.w	8007d6a <_strtod_l+0x92a>
 8007c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c2e:	0d1b      	lsrs	r3, r3, #20
 8007c30:	051b      	lsls	r3, r3, #20
 8007c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c36:	f240 8098 	bls.w	8007d6a <_strtod_l+0x92a>
 8007c3a:	696b      	ldr	r3, [r5, #20]
 8007c3c:	b91b      	cbnz	r3, 8007c46 <_strtod_l+0x806>
 8007c3e:	692b      	ldr	r3, [r5, #16]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f340 8092 	ble.w	8007d6a <_strtod_l+0x92a>
 8007c46:	4629      	mov	r1, r5
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f001 fe94 	bl	8009978 <__lshift>
 8007c50:	4631      	mov	r1, r6
 8007c52:	4605      	mov	r5, r0
 8007c54:	f001 fefc 	bl	8009a50 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f340 8086 	ble.w	8007d6a <_strtod_l+0x92a>
 8007c5e:	9904      	ldr	r1, [sp, #16]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <_strtod_l+0x8d0>)
 8007c62:	464b      	mov	r3, r9
 8007c64:	2900      	cmp	r1, #0
 8007c66:	f000 80a1 	beq.w	8007dac <_strtod_l+0x96c>
 8007c6a:	ea02 0109 	and.w	r1, r2, r9
 8007c6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c72:	f300 809b 	bgt.w	8007dac <_strtod_l+0x96c>
 8007c76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c7a:	f77f aea2 	ble.w	80079c2 <_strtod_l+0x582>
 8007c7e:	4a25      	ldr	r2, [pc, #148]	; (8007d14 <_strtod_l+0x8d4>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007c86:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007c8a:	ec49 8b17 	vmov	d7, r8, r9
 8007c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	bf08      	it	eq
 8007c9e:	2322      	moveq	r3, #34	; 0x22
 8007ca0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ca4:	bf08      	it	eq
 8007ca6:	6023      	streq	r3, [r4, #0]
 8007ca8:	e620      	b.n	80078ec <_strtod_l+0x4ac>
 8007caa:	f04f 31ff 	mov.w	r1, #4294967295
 8007cae:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb2:	ea02 0808 	and.w	r8, r2, r8
 8007cb6:	e6d4      	b.n	8007a62 <_strtod_l+0x622>
 8007cb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007cbc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007cc0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007cc4:	33e2      	adds	r3, #226	; 0xe2
 8007cc6:	fa00 f303 	lsl.w	r3, r0, r3
 8007cca:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8007cce:	e73b      	b.n	8007b48 <_strtod_l+0x708>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007cd8:	e736      	b.n	8007b48 <_strtod_l+0x708>
 8007cda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f001 fe4a 	bl	8009978 <__lshift>
 8007ce4:	9018      	str	r0, [sp, #96]	; 0x60
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f47f af60 	bne.w	8007bac <_strtod_l+0x76c>
 8007cec:	e5f4      	b.n	80078d8 <_strtod_l+0x498>
 8007cee:	bf00      	nop
 8007cf0:	94a03595 	.word	0x94a03595
 8007cf4:	3fcfffff 	.word	0x3fcfffff
 8007cf8:	94a03595 	.word	0x94a03595
 8007cfc:	3fdfffff 	.word	0x3fdfffff
 8007d00:	35afe535 	.word	0x35afe535
 8007d04:	3fe00000 	.word	0x3fe00000
 8007d08:	0800bca8 	.word	0x0800bca8
 8007d0c:	fffffc02 	.word	0xfffffc02
 8007d10:	7ff00000 	.word	0x7ff00000
 8007d14:	39500000 	.word	0x39500000
 8007d18:	46cb      	mov	fp, r9
 8007d1a:	d165      	bne.n	8007de8 <_strtod_l+0x9a8>
 8007d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	d02a      	beq.n	8007d7c <_strtod_l+0x93c>
 8007d26:	4aaa      	ldr	r2, [pc, #680]	; (8007fd0 <_strtod_l+0xb90>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d12b      	bne.n	8007d84 <_strtod_l+0x944>
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	4641      	mov	r1, r8
 8007d30:	b1fb      	cbz	r3, 8007d72 <_strtod_l+0x932>
 8007d32:	4aa8      	ldr	r2, [pc, #672]	; (8007fd4 <_strtod_l+0xb94>)
 8007d34:	ea09 0202 	and.w	r2, r9, r2
 8007d38:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	d81a      	bhi.n	8007d78 <_strtod_l+0x938>
 8007d42:	0d12      	lsrs	r2, r2, #20
 8007d44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d48:	fa00 f303 	lsl.w	r3, r0, r3
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d119      	bne.n	8007d84 <_strtod_l+0x944>
 8007d50:	4ba1      	ldr	r3, [pc, #644]	; (8007fd8 <_strtod_l+0xb98>)
 8007d52:	459b      	cmp	fp, r3
 8007d54:	d102      	bne.n	8007d5c <_strtod_l+0x91c>
 8007d56:	3101      	adds	r1, #1
 8007d58:	f43f adbe 	beq.w	80078d8 <_strtod_l+0x498>
 8007d5c:	4b9d      	ldr	r3, [pc, #628]	; (8007fd4 <_strtod_l+0xb94>)
 8007d5e:	ea0b 0303 	and.w	r3, fp, r3
 8007d62:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007d66:	f04f 0800 	mov.w	r8, #0
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d186      	bne.n	8007c7e <_strtod_l+0x83e>
 8007d70:	e5bc      	b.n	80078ec <_strtod_l+0x4ac>
 8007d72:	f04f 33ff 	mov.w	r3, #4294967295
 8007d76:	e7e9      	b.n	8007d4c <_strtod_l+0x90c>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	e7e7      	b.n	8007d4c <_strtod_l+0x90c>
 8007d7c:	ea53 0308 	orrs.w	r3, r3, r8
 8007d80:	f43f af6d 	beq.w	8007c5e <_strtod_l+0x81e>
 8007d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d86:	b1db      	cbz	r3, 8007dc0 <_strtod_l+0x980>
 8007d88:	ea13 0f0b 	tst.w	r3, fp
 8007d8c:	d0ed      	beq.n	8007d6a <_strtod_l+0x92a>
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f1ba 0f00 	cmp.w	sl, #0
 8007d98:	d016      	beq.n	8007dc8 <_strtod_l+0x988>
 8007d9a:	f7ff fb37 	bl	800740c <sulp>
 8007d9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007da2:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007da6:	ec59 8b17 	vmov	r8, r9, d7
 8007daa:	e7de      	b.n	8007d6a <_strtod_l+0x92a>
 8007dac:	4013      	ands	r3, r2
 8007dae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007db2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007db6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007dba:	f04f 38ff 	mov.w	r8, #4294967295
 8007dbe:	e7d4      	b.n	8007d6a <_strtod_l+0x92a>
 8007dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc2:	ea13 0f08 	tst.w	r3, r8
 8007dc6:	e7e1      	b.n	8007d8c <_strtod_l+0x94c>
 8007dc8:	f7ff fb20 	bl	800740c <sulp>
 8007dcc:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007dd0:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007dd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007de4:	d1c1      	bne.n	8007d6a <_strtod_l+0x92a>
 8007de6:	e5ec      	b.n	80079c2 <_strtod_l+0x582>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4628      	mov	r0, r5
 8007dec:	f001 ffac 	bl	8009d48 <__ratio>
 8007df0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007df4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfc:	d867      	bhi.n	8007ece <_strtod_l+0xa8e>
 8007dfe:	f1ba 0f00 	cmp.w	sl, #0
 8007e02:	d044      	beq.n	8007e8e <_strtod_l+0xa4e>
 8007e04:	4b75      	ldr	r3, [pc, #468]	; (8007fdc <_strtod_l+0xb9c>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007e0c:	4971      	ldr	r1, [pc, #452]	; (8007fd4 <_strtod_l+0xb94>)
 8007e0e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007fe8 <_strtod_l+0xba8>
 8007e12:	ea0b 0001 	and.w	r0, fp, r1
 8007e16:	4560      	cmp	r0, ip
 8007e18:	900d      	str	r0, [sp, #52]	; 0x34
 8007e1a:	f040 808b 	bne.w	8007f34 <_strtod_l+0xaf4>
 8007e1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e22:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007e26:	ec49 8b10 	vmov	d0, r8, r9
 8007e2a:	ec43 2b1c 	vmov	d12, r2, r3
 8007e2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e32:	f001 feb1 	bl	8009b98 <__ulp>
 8007e36:	ec49 8b1d 	vmov	d13, r8, r9
 8007e3a:	eeac db00 	vfma.f64	d13, d12, d0
 8007e3e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e44:	4963      	ldr	r1, [pc, #396]	; (8007fd4 <_strtod_l+0xb94>)
 8007e46:	4a66      	ldr	r2, [pc, #408]	; (8007fe0 <_strtod_l+0xba0>)
 8007e48:	4019      	ands	r1, r3
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007e50:	d947      	bls.n	8007ee2 <_strtod_l+0xaa2>
 8007e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d103      	bne.n	8007e64 <_strtod_l+0xa24>
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	f43f ad3a 	beq.w	80078d8 <_strtod_l+0x498>
 8007e64:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007fd8 <_strtod_l+0xb98>
 8007e68:	f04f 38ff 	mov.w	r8, #4294967295
 8007e6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f001 fb66 	bl	8009540 <_Bfree>
 8007e74:	4639      	mov	r1, r7
 8007e76:	4620      	mov	r0, r4
 8007e78:	f001 fb62 	bl	8009540 <_Bfree>
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f001 fb5e 	bl	8009540 <_Bfree>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4620      	mov	r0, r4
 8007e88:	f001 fb5a 	bl	8009540 <_Bfree>
 8007e8c:	e60f      	b.n	8007aae <_strtod_l+0x66e>
 8007e8e:	f1b8 0f00 	cmp.w	r8, #0
 8007e92:	d112      	bne.n	8007eba <_strtod_l+0xa7a>
 8007e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e98:	b9b3      	cbnz	r3, 8007ec8 <_strtod_l+0xa88>
 8007e9a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007e9e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007eaa:	d401      	bmi.n	8007eb0 <_strtod_l+0xa70>
 8007eac:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007eb0:	eeb1 7b48 	vneg.f64	d7, d8
 8007eb4:	ec53 2b17 	vmov	r2, r3, d7
 8007eb8:	e7a8      	b.n	8007e0c <_strtod_l+0x9cc>
 8007eba:	f1b8 0f01 	cmp.w	r8, #1
 8007ebe:	d103      	bne.n	8007ec8 <_strtod_l+0xa88>
 8007ec0:	f1b9 0f00 	cmp.w	r9, #0
 8007ec4:	f43f ad7d 	beq.w	80079c2 <_strtod_l+0x582>
 8007ec8:	4b46      	ldr	r3, [pc, #280]	; (8007fe4 <_strtod_l+0xba4>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	e79c      	b.n	8007e08 <_strtod_l+0x9c8>
 8007ece:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007ed2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007ed6:	f1ba 0f00 	cmp.w	sl, #0
 8007eda:	d0e9      	beq.n	8007eb0 <_strtod_l+0xa70>
 8007edc:	ec53 2b18 	vmov	r2, r3, d8
 8007ee0:	e794      	b.n	8007e0c <_strtod_l+0x9cc>
 8007ee2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1bf      	bne.n	8007e6c <_strtod_l+0xa2c>
 8007eec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef2:	0d1b      	lsrs	r3, r3, #20
 8007ef4:	051b      	lsls	r3, r3, #20
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d1b8      	bne.n	8007e6c <_strtod_l+0xa2c>
 8007efa:	ec51 0b18 	vmov	r0, r1, d8
 8007efe:	f7f8 fbcb 	bl	8000698 <__aeabi_d2lz>
 8007f02:	f7f8 fb83 	bl	800060c <__aeabi_l2d>
 8007f06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f0a:	ec41 0b17 	vmov	d7, r0, r1
 8007f0e:	ea43 0308 	orr.w	r3, r3, r8
 8007f12:	ea53 030a 	orrs.w	r3, r3, sl
 8007f16:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007f1a:	d03e      	beq.n	8007f9a <_strtod_l+0xb5a>
 8007f1c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f24:	f53f ace2 	bmi.w	80078ec <_strtod_l+0x4ac>
 8007f28:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	dd9c      	ble.n	8007e6c <_strtod_l+0xa2c>
 8007f32:	e4db      	b.n	80078ec <_strtod_l+0x4ac>
 8007f34:	9904      	ldr	r1, [sp, #16]
 8007f36:	b301      	cbz	r1, 8007f7a <_strtod_l+0xb3a>
 8007f38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f3a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007f3e:	d81c      	bhi.n	8007f7a <_strtod_l+0xb3a>
 8007f40:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007fc8 <_strtod_l+0xb88>
 8007f44:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4c:	d811      	bhi.n	8007f72 <_strtod_l+0xb32>
 8007f4e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007f52:	ee18 3a10 	vmov	r3, s16
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	bf38      	it	cc
 8007f5a:	2301      	movcc	r3, #1
 8007f5c:	ee08 3a10 	vmov	s16, r3
 8007f60:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007f64:	f1ba 0f00 	cmp.w	sl, #0
 8007f68:	d114      	bne.n	8007f94 <_strtod_l+0xb54>
 8007f6a:	eeb1 7b48 	vneg.f64	d7, d8
 8007f6e:	ec53 2b17 	vmov	r2, r3, d7
 8007f72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f74:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007f78:	1a0b      	subs	r3, r1, r0
 8007f7a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007f7e:	ec43 2b1c 	vmov	d12, r2, r3
 8007f82:	f001 fe09 	bl	8009b98 <__ulp>
 8007f86:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007f8a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007f8e:	ec59 8b17 	vmov	r8, r9, d7
 8007f92:	e7a8      	b.n	8007ee6 <_strtod_l+0xaa6>
 8007f94:	ec53 2b18 	vmov	r2, r3, d8
 8007f98:	e7eb      	b.n	8007f72 <_strtod_l+0xb32>
 8007f9a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	f57f af63 	bpl.w	8007e6c <_strtod_l+0xa2c>
 8007fa6:	e4a1      	b.n	80078ec <_strtod_l+0x4ac>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	f7ff ba8d 	b.w	80074d0 <_strtod_l+0x90>
 8007fb6:	2a65      	cmp	r2, #101	; 0x65
 8007fb8:	f43f ab89 	beq.w	80076ce <_strtod_l+0x28e>
 8007fbc:	2a45      	cmp	r2, #69	; 0x45
 8007fbe:	f43f ab86 	beq.w	80076ce <_strtod_l+0x28e>
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	f7ff bbbe 	b.w	8007744 <_strtod_l+0x304>
 8007fc8:	ffc00000 	.word	0xffc00000
 8007fcc:	41dfffff 	.word	0x41dfffff
 8007fd0:	000fffff 	.word	0x000fffff
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	7fefffff 	.word	0x7fefffff
 8007fdc:	3ff00000 	.word	0x3ff00000
 8007fe0:	7c9fffff 	.word	0x7c9fffff
 8007fe4:	bff00000 	.word	0xbff00000
 8007fe8:	7fe00000 	.word	0x7fe00000

08007fec <_strtod_r>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <_strtod_r+0x8>)
 8007fee:	f7ff ba27 	b.w	8007440 <_strtod_l>
 8007ff2:	bf00      	nop
 8007ff4:	200000c8 	.word	0x200000c8

08007ff8 <_strtol_l.isra.0>:
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffe:	d001      	beq.n	8008004 <_strtol_l.isra.0+0xc>
 8008000:	2b24      	cmp	r3, #36	; 0x24
 8008002:	d906      	bls.n	8008012 <_strtol_l.isra.0+0x1a>
 8008004:	f7fe facc 	bl	80065a0 <__errno>
 8008008:	2316      	movs	r3, #22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	4f3a      	ldr	r7, [pc, #232]	; (80080fc <_strtol_l.isra.0+0x104>)
 8008014:	468e      	mov	lr, r1
 8008016:	4676      	mov	r6, lr
 8008018:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800801c:	5de5      	ldrb	r5, [r4, r7]
 800801e:	f015 0508 	ands.w	r5, r5, #8
 8008022:	d1f8      	bne.n	8008016 <_strtol_l.isra.0+0x1e>
 8008024:	2c2d      	cmp	r4, #45	; 0x2d
 8008026:	d134      	bne.n	8008092 <_strtol_l.isra.0+0x9a>
 8008028:	f89e 4000 	ldrb.w	r4, [lr]
 800802c:	f04f 0801 	mov.w	r8, #1
 8008030:	f106 0e02 	add.w	lr, r6, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05c      	beq.n	80080f2 <_strtol_l.isra.0+0xfa>
 8008038:	2b10      	cmp	r3, #16
 800803a:	d10c      	bne.n	8008056 <_strtol_l.isra.0+0x5e>
 800803c:	2c30      	cmp	r4, #48	; 0x30
 800803e:	d10a      	bne.n	8008056 <_strtol_l.isra.0+0x5e>
 8008040:	f89e 4000 	ldrb.w	r4, [lr]
 8008044:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008048:	2c58      	cmp	r4, #88	; 0x58
 800804a:	d14d      	bne.n	80080e8 <_strtol_l.isra.0+0xf0>
 800804c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008050:	2310      	movs	r3, #16
 8008052:	f10e 0e02 	add.w	lr, lr, #2
 8008056:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800805a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800805e:	2600      	movs	r6, #0
 8008060:	fbbc f9f3 	udiv	r9, ip, r3
 8008064:	4635      	mov	r5, r6
 8008066:	fb03 ca19 	mls	sl, r3, r9, ip
 800806a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800806e:	2f09      	cmp	r7, #9
 8008070:	d818      	bhi.n	80080a4 <_strtol_l.isra.0+0xac>
 8008072:	463c      	mov	r4, r7
 8008074:	42a3      	cmp	r3, r4
 8008076:	dd24      	ble.n	80080c2 <_strtol_l.isra.0+0xca>
 8008078:	2e00      	cmp	r6, #0
 800807a:	db1f      	blt.n	80080bc <_strtol_l.isra.0+0xc4>
 800807c:	45a9      	cmp	r9, r5
 800807e:	d31d      	bcc.n	80080bc <_strtol_l.isra.0+0xc4>
 8008080:	d101      	bne.n	8008086 <_strtol_l.isra.0+0x8e>
 8008082:	45a2      	cmp	sl, r4
 8008084:	db1a      	blt.n	80080bc <_strtol_l.isra.0+0xc4>
 8008086:	fb05 4503 	mla	r5, r5, r3, r4
 800808a:	2601      	movs	r6, #1
 800808c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008090:	e7eb      	b.n	800806a <_strtol_l.isra.0+0x72>
 8008092:	2c2b      	cmp	r4, #43	; 0x2b
 8008094:	bf08      	it	eq
 8008096:	f89e 4000 	ldrbeq.w	r4, [lr]
 800809a:	46a8      	mov	r8, r5
 800809c:	bf08      	it	eq
 800809e:	f106 0e02 	addeq.w	lr, r6, #2
 80080a2:	e7c7      	b.n	8008034 <_strtol_l.isra.0+0x3c>
 80080a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80080a8:	2f19      	cmp	r7, #25
 80080aa:	d801      	bhi.n	80080b0 <_strtol_l.isra.0+0xb8>
 80080ac:	3c37      	subs	r4, #55	; 0x37
 80080ae:	e7e1      	b.n	8008074 <_strtol_l.isra.0+0x7c>
 80080b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80080b4:	2f19      	cmp	r7, #25
 80080b6:	d804      	bhi.n	80080c2 <_strtol_l.isra.0+0xca>
 80080b8:	3c57      	subs	r4, #87	; 0x57
 80080ba:	e7db      	b.n	8008074 <_strtol_l.isra.0+0x7c>
 80080bc:	f04f 36ff 	mov.w	r6, #4294967295
 80080c0:	e7e4      	b.n	800808c <_strtol_l.isra.0+0x94>
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	da05      	bge.n	80080d2 <_strtol_l.isra.0+0xda>
 80080c6:	2322      	movs	r3, #34	; 0x22
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	4665      	mov	r5, ip
 80080cc:	b942      	cbnz	r2, 80080e0 <_strtol_l.isra.0+0xe8>
 80080ce:	4628      	mov	r0, r5
 80080d0:	e79d      	b.n	800800e <_strtol_l.isra.0+0x16>
 80080d2:	f1b8 0f00 	cmp.w	r8, #0
 80080d6:	d000      	beq.n	80080da <_strtol_l.isra.0+0xe2>
 80080d8:	426d      	negs	r5, r5
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d0f7      	beq.n	80080ce <_strtol_l.isra.0+0xd6>
 80080de:	b10e      	cbz	r6, 80080e4 <_strtol_l.isra.0+0xec>
 80080e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	e7f2      	b.n	80080ce <_strtol_l.isra.0+0xd6>
 80080e8:	2430      	movs	r4, #48	; 0x30
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1b3      	bne.n	8008056 <_strtol_l.isra.0+0x5e>
 80080ee:	2308      	movs	r3, #8
 80080f0:	e7b1      	b.n	8008056 <_strtol_l.isra.0+0x5e>
 80080f2:	2c30      	cmp	r4, #48	; 0x30
 80080f4:	d0a4      	beq.n	8008040 <_strtol_l.isra.0+0x48>
 80080f6:	230a      	movs	r3, #10
 80080f8:	e7ad      	b.n	8008056 <_strtol_l.isra.0+0x5e>
 80080fa:	bf00      	nop
 80080fc:	0800bcd1 	.word	0x0800bcd1

08008100 <_strtol_r>:
 8008100:	f7ff bf7a 	b.w	8007ff8 <_strtol_l.isra.0>

08008104 <_write_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_write_r+0x20>)
 8008108:	4604      	mov	r4, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 fe95 	bl	8001e42 <_write>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_write_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_write_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20010894 	.word	0x20010894

08008128 <_close_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d06      	ldr	r5, [pc, #24]	; (8008144 <_close_r+0x1c>)
 800812c:	2300      	movs	r3, #0
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 fea1 	bl	8001e7a <_close>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_close_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_close_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	20010894 	.word	0x20010894

08008148 <quorem>:
 8008148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	6903      	ldr	r3, [r0, #16]
 800814e:	690c      	ldr	r4, [r1, #16]
 8008150:	42a3      	cmp	r3, r4
 8008152:	4607      	mov	r7, r0
 8008154:	f2c0 8081 	blt.w	800825a <quorem+0x112>
 8008158:	3c01      	subs	r4, #1
 800815a:	f101 0814 	add.w	r8, r1, #20
 800815e:	f100 0514 	add.w	r5, r0, #20
 8008162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800816c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008170:	3301      	adds	r3, #1
 8008172:	429a      	cmp	r2, r3
 8008174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800817c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008180:	d331      	bcc.n	80081e6 <quorem+0x9e>
 8008182:	f04f 0e00 	mov.w	lr, #0
 8008186:	4640      	mov	r0, r8
 8008188:	46ac      	mov	ip, r5
 800818a:	46f2      	mov	sl, lr
 800818c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008190:	b293      	uxth	r3, r2
 8008192:	fb06 e303 	mla	r3, r6, r3, lr
 8008196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800819a:	b29b      	uxth	r3, r3
 800819c:	ebaa 0303 	sub.w	r3, sl, r3
 80081a0:	0c12      	lsrs	r2, r2, #16
 80081a2:	f8dc a000 	ldr.w	sl, [ip]
 80081a6:	fb06 e202 	mla	r2, r6, r2, lr
 80081aa:	fa13 f38a 	uxtah	r3, r3, sl
 80081ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081b2:	fa1f fa82 	uxth.w	sl, r2
 80081b6:	f8dc 2000 	ldr.w	r2, [ip]
 80081ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80081be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c8:	4581      	cmp	r9, r0
 80081ca:	f84c 3b04 	str.w	r3, [ip], #4
 80081ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081d2:	d2db      	bcs.n	800818c <quorem+0x44>
 80081d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80081d8:	b92b      	cbnz	r3, 80081e6 <quorem+0x9e>
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	3b04      	subs	r3, #4
 80081de:	429d      	cmp	r5, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	d32e      	bcc.n	8008242 <quorem+0xfa>
 80081e4:	613c      	str	r4, [r7, #16]
 80081e6:	4638      	mov	r0, r7
 80081e8:	f001 fc32 	bl	8009a50 <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	db24      	blt.n	800823a <quorem+0xf2>
 80081f0:	3601      	adds	r6, #1
 80081f2:	4628      	mov	r0, r5
 80081f4:	f04f 0c00 	mov.w	ip, #0
 80081f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80081fc:	f8d0 e000 	ldr.w	lr, [r0]
 8008200:	b293      	uxth	r3, r2
 8008202:	ebac 0303 	sub.w	r3, ip, r3
 8008206:	0c12      	lsrs	r2, r2, #16
 8008208:	fa13 f38e 	uxtah	r3, r3, lr
 800820c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008214:	b29b      	uxth	r3, r3
 8008216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800821a:	45c1      	cmp	r9, r8
 800821c:	f840 3b04 	str.w	r3, [r0], #4
 8008220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008224:	d2e8      	bcs.n	80081f8 <quorem+0xb0>
 8008226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800822a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800822e:	b922      	cbnz	r2, 800823a <quorem+0xf2>
 8008230:	3b04      	subs	r3, #4
 8008232:	429d      	cmp	r5, r3
 8008234:	461a      	mov	r2, r3
 8008236:	d30a      	bcc.n	800824e <quorem+0x106>
 8008238:	613c      	str	r4, [r7, #16]
 800823a:	4630      	mov	r0, r6
 800823c:	b003      	add	sp, #12
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008242:	6812      	ldr	r2, [r2, #0]
 8008244:	3b04      	subs	r3, #4
 8008246:	2a00      	cmp	r2, #0
 8008248:	d1cc      	bne.n	80081e4 <quorem+0x9c>
 800824a:	3c01      	subs	r4, #1
 800824c:	e7c7      	b.n	80081de <quorem+0x96>
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	3b04      	subs	r3, #4
 8008252:	2a00      	cmp	r2, #0
 8008254:	d1f0      	bne.n	8008238 <quorem+0xf0>
 8008256:	3c01      	subs	r4, #1
 8008258:	e7eb      	b.n	8008232 <quorem+0xea>
 800825a:	2000      	movs	r0, #0
 800825c:	e7ee      	b.n	800823c <quorem+0xf4>
	...

08008260 <_dtoa_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ec59 8b10 	vmov	r8, r9, d0
 8008268:	b095      	sub	sp, #84	; 0x54
 800826a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800826c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800826e:	9107      	str	r1, [sp, #28]
 8008270:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008274:	4606      	mov	r6, r0
 8008276:	9209      	str	r2, [sp, #36]	; 0x24
 8008278:	9310      	str	r3, [sp, #64]	; 0x40
 800827a:	b975      	cbnz	r5, 800829a <_dtoa_r+0x3a>
 800827c:	2010      	movs	r0, #16
 800827e:	f001 f8f7 	bl	8009470 <malloc>
 8008282:	4602      	mov	r2, r0
 8008284:	6270      	str	r0, [r6, #36]	; 0x24
 8008286:	b920      	cbnz	r0, 8008292 <_dtoa_r+0x32>
 8008288:	4bab      	ldr	r3, [pc, #684]	; (8008538 <_dtoa_r+0x2d8>)
 800828a:	21ea      	movs	r1, #234	; 0xea
 800828c:	48ab      	ldr	r0, [pc, #684]	; (800853c <_dtoa_r+0x2dc>)
 800828e:	f002 fc33 	bl	800aaf8 <__assert_func>
 8008292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008296:	6005      	str	r5, [r0, #0]
 8008298:	60c5      	str	r5, [r0, #12]
 800829a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800829c:	6819      	ldr	r1, [r3, #0]
 800829e:	b151      	cbz	r1, 80082b6 <_dtoa_r+0x56>
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	604a      	str	r2, [r1, #4]
 80082a4:	2301      	movs	r3, #1
 80082a6:	4093      	lsls	r3, r2
 80082a8:	608b      	str	r3, [r1, #8]
 80082aa:	4630      	mov	r0, r6
 80082ac:	f001 f948 	bl	8009540 <_Bfree>
 80082b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	f1b9 0300 	subs.w	r3, r9, #0
 80082ba:	bfbb      	ittet	lt
 80082bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082c0:	9303      	strlt	r3, [sp, #12]
 80082c2:	2300      	movge	r3, #0
 80082c4:	2201      	movlt	r2, #1
 80082c6:	bfac      	ite	ge
 80082c8:	6023      	strge	r3, [r4, #0]
 80082ca:	6022      	strlt	r2, [r4, #0]
 80082cc:	4b9c      	ldr	r3, [pc, #624]	; (8008540 <_dtoa_r+0x2e0>)
 80082ce:	9c03      	ldr	r4, [sp, #12]
 80082d0:	43a3      	bics	r3, r4
 80082d2:	d11a      	bne.n	800830a <_dtoa_r+0xaa>
 80082d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80082e0:	ea53 0308 	orrs.w	r3, r3, r8
 80082e4:	f000 8512 	beq.w	8008d0c <_dtoa_r+0xaac>
 80082e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082ea:	b953      	cbnz	r3, 8008302 <_dtoa_r+0xa2>
 80082ec:	4b95      	ldr	r3, [pc, #596]	; (8008544 <_dtoa_r+0x2e4>)
 80082ee:	e01f      	b.n	8008330 <_dtoa_r+0xd0>
 80082f0:	4b95      	ldr	r3, [pc, #596]	; (8008548 <_dtoa_r+0x2e8>)
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	9800      	ldr	r0, [sp, #0]
 80082fc:	b015      	add	sp, #84	; 0x54
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	4b90      	ldr	r3, [pc, #576]	; (8008544 <_dtoa_r+0x2e4>)
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	3303      	adds	r3, #3
 8008308:	e7f5      	b.n	80082f6 <_dtoa_r+0x96>
 800830a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008316:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800831a:	d10b      	bne.n	8008334 <_dtoa_r+0xd4>
 800831c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800831e:	2301      	movs	r3, #1
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 84ee 	beq.w	8008d06 <_dtoa_r+0xaa6>
 800832a:	4888      	ldr	r0, [pc, #544]	; (800854c <_dtoa_r+0x2ec>)
 800832c:	6018      	str	r0, [r3, #0]
 800832e:	1e43      	subs	r3, r0, #1
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	e7e2      	b.n	80082fa <_dtoa_r+0x9a>
 8008334:	a913      	add	r1, sp, #76	; 0x4c
 8008336:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800833a:	aa12      	add	r2, sp, #72	; 0x48
 800833c:	4630      	mov	r0, r6
 800833e:	f001 fca7 	bl	8009c90 <__d2b>
 8008342:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008346:	4605      	mov	r5, r0
 8008348:	9812      	ldr	r0, [sp, #72]	; 0x48
 800834a:	2900      	cmp	r1, #0
 800834c:	d047      	beq.n	80083de <_dtoa_r+0x17e>
 800834e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008350:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008354:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008358:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800835c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008360:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008364:	2400      	movs	r4, #0
 8008366:	ec43 2b16 	vmov	d6, r2, r3
 800836a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800836e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008520 <_dtoa_r+0x2c0>
 8008372:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008376:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008528 <_dtoa_r+0x2c8>
 800837a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800837e:	eeb0 7b46 	vmov.f64	d7, d6
 8008382:	ee06 1a90 	vmov	s13, r1
 8008386:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800838a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008530 <_dtoa_r+0x2d0>
 800838e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008392:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008396:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839e:	ee16 ba90 	vmov	fp, s13
 80083a2:	9411      	str	r4, [sp, #68]	; 0x44
 80083a4:	d508      	bpl.n	80083b8 <_dtoa_r+0x158>
 80083a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80083aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	bf18      	it	ne
 80083b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80083b8:	f1bb 0f16 	cmp.w	fp, #22
 80083bc:	d832      	bhi.n	8008424 <_dtoa_r+0x1c4>
 80083be:	4b64      	ldr	r3, [pc, #400]	; (8008550 <_dtoa_r+0x2f0>)
 80083c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083c4:	ed93 7b00 	vldr	d7, [r3]
 80083c8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80083cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d4:	d501      	bpl.n	80083da <_dtoa_r+0x17a>
 80083d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083da:	2300      	movs	r3, #0
 80083dc:	e023      	b.n	8008426 <_dtoa_r+0x1c6>
 80083de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083e0:	4401      	add	r1, r0
 80083e2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	bfc3      	ittte	gt
 80083ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ee:	fa04 f303 	lslgt.w	r3, r4, r3
 80083f2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80083f6:	f1c3 0320 	rsble	r3, r3, #32
 80083fa:	bfc6      	itte	gt
 80083fc:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008400:	ea43 0308 	orrgt.w	r3, r3, r8
 8008404:	fa08 f303 	lslle.w	r3, r8, r3
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008410:	3901      	subs	r1, #1
 8008412:	ed8d 7b00 	vstr	d7, [sp]
 8008416:	9c01      	ldr	r4, [sp, #4]
 8008418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800841c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008420:	2401      	movs	r4, #1
 8008422:	e7a0      	b.n	8008366 <_dtoa_r+0x106>
 8008424:	2301      	movs	r3, #1
 8008426:	930f      	str	r3, [sp, #60]	; 0x3c
 8008428:	1a43      	subs	r3, r0, r1
 800842a:	1e5a      	subs	r2, r3, #1
 800842c:	bf45      	ittet	mi
 800842e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008432:	9305      	strmi	r3, [sp, #20]
 8008434:	2300      	movpl	r3, #0
 8008436:	2300      	movmi	r3, #0
 8008438:	9206      	str	r2, [sp, #24]
 800843a:	bf54      	ite	pl
 800843c:	9305      	strpl	r3, [sp, #20]
 800843e:	9306      	strmi	r3, [sp, #24]
 8008440:	f1bb 0f00 	cmp.w	fp, #0
 8008444:	db18      	blt.n	8008478 <_dtoa_r+0x218>
 8008446:	9b06      	ldr	r3, [sp, #24]
 8008448:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800844c:	445b      	add	r3, fp
 800844e:	9306      	str	r3, [sp, #24]
 8008450:	2300      	movs	r3, #0
 8008452:	9a07      	ldr	r2, [sp, #28]
 8008454:	2a09      	cmp	r2, #9
 8008456:	d849      	bhi.n	80084ec <_dtoa_r+0x28c>
 8008458:	2a05      	cmp	r2, #5
 800845a:	bfc4      	itt	gt
 800845c:	3a04      	subgt	r2, #4
 800845e:	9207      	strgt	r2, [sp, #28]
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	f1a2 0202 	sub.w	r2, r2, #2
 8008466:	bfcc      	ite	gt
 8008468:	2400      	movgt	r4, #0
 800846a:	2401      	movle	r4, #1
 800846c:	2a03      	cmp	r2, #3
 800846e:	d848      	bhi.n	8008502 <_dtoa_r+0x2a2>
 8008470:	e8df f002 	tbb	[pc, r2]
 8008474:	3a2c2e0b 	.word	0x3a2c2e0b
 8008478:	9b05      	ldr	r3, [sp, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	eba3 030b 	sub.w	r3, r3, fp
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	920e      	str	r2, [sp, #56]	; 0x38
 8008484:	f1cb 0300 	rsb	r3, fp, #0
 8008488:	e7e3      	b.n	8008452 <_dtoa_r+0x1f2>
 800848a:	2200      	movs	r2, #0
 800848c:	9208      	str	r2, [sp, #32]
 800848e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008490:	2a00      	cmp	r2, #0
 8008492:	dc39      	bgt.n	8008508 <_dtoa_r+0x2a8>
 8008494:	f04f 0a01 	mov.w	sl, #1
 8008498:	46d1      	mov	r9, sl
 800849a:	4652      	mov	r2, sl
 800849c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80084a2:	2100      	movs	r1, #0
 80084a4:	6079      	str	r1, [r7, #4]
 80084a6:	2004      	movs	r0, #4
 80084a8:	f100 0c14 	add.w	ip, r0, #20
 80084ac:	4594      	cmp	ip, r2
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	d92f      	bls.n	8008512 <_dtoa_r+0x2b2>
 80084b2:	4630      	mov	r0, r6
 80084b4:	930c      	str	r3, [sp, #48]	; 0x30
 80084b6:	f001 f803 	bl	80094c0 <_Balloc>
 80084ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084bc:	9000      	str	r0, [sp, #0]
 80084be:	4602      	mov	r2, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d149      	bne.n	8008558 <_dtoa_r+0x2f8>
 80084c4:	4b23      	ldr	r3, [pc, #140]	; (8008554 <_dtoa_r+0x2f4>)
 80084c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084ca:	e6df      	b.n	800828c <_dtoa_r+0x2c>
 80084cc:	2201      	movs	r2, #1
 80084ce:	e7dd      	b.n	800848c <_dtoa_r+0x22c>
 80084d0:	2200      	movs	r2, #0
 80084d2:	9208      	str	r2, [sp, #32]
 80084d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d6:	eb0b 0a02 	add.w	sl, fp, r2
 80084da:	f10a 0901 	add.w	r9, sl, #1
 80084de:	464a      	mov	r2, r9
 80084e0:	2a01      	cmp	r2, #1
 80084e2:	bfb8      	it	lt
 80084e4:	2201      	movlt	r2, #1
 80084e6:	e7db      	b.n	80084a0 <_dtoa_r+0x240>
 80084e8:	2201      	movs	r2, #1
 80084ea:	e7f2      	b.n	80084d2 <_dtoa_r+0x272>
 80084ec:	2401      	movs	r4, #1
 80084ee:	2200      	movs	r2, #0
 80084f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80084f4:	f04f 3aff 	mov.w	sl, #4294967295
 80084f8:	2100      	movs	r1, #0
 80084fa:	46d1      	mov	r9, sl
 80084fc:	2212      	movs	r2, #18
 80084fe:	9109      	str	r1, [sp, #36]	; 0x24
 8008500:	e7ce      	b.n	80084a0 <_dtoa_r+0x240>
 8008502:	2201      	movs	r2, #1
 8008504:	9208      	str	r2, [sp, #32]
 8008506:	e7f5      	b.n	80084f4 <_dtoa_r+0x294>
 8008508:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800850c:	46d1      	mov	r9, sl
 800850e:	4652      	mov	r2, sl
 8008510:	e7c6      	b.n	80084a0 <_dtoa_r+0x240>
 8008512:	3101      	adds	r1, #1
 8008514:	6079      	str	r1, [r7, #4]
 8008516:	0040      	lsls	r0, r0, #1
 8008518:	e7c6      	b.n	80084a8 <_dtoa_r+0x248>
 800851a:	bf00      	nop
 800851c:	f3af 8000 	nop.w
 8008520:	636f4361 	.word	0x636f4361
 8008524:	3fd287a7 	.word	0x3fd287a7
 8008528:	8b60c8b3 	.word	0x8b60c8b3
 800852c:	3fc68a28 	.word	0x3fc68a28
 8008530:	509f79fb 	.word	0x509f79fb
 8008534:	3fd34413 	.word	0x3fd34413
 8008538:	0800bdde 	.word	0x0800bdde
 800853c:	0800bdf5 	.word	0x0800bdf5
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	0800bdda 	.word	0x0800bdda
 8008548:	0800bdd1 	.word	0x0800bdd1
 800854c:	0800c05a 	.word	0x0800c05a
 8008550:	0800bf70 	.word	0x0800bf70
 8008554:	0800be54 	.word	0x0800be54
 8008558:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800855a:	9900      	ldr	r1, [sp, #0]
 800855c:	6011      	str	r1, [r2, #0]
 800855e:	f1b9 0f0e 	cmp.w	r9, #14
 8008562:	d872      	bhi.n	800864a <_dtoa_r+0x3ea>
 8008564:	2c00      	cmp	r4, #0
 8008566:	d070      	beq.n	800864a <_dtoa_r+0x3ea>
 8008568:	f1bb 0f00 	cmp.w	fp, #0
 800856c:	f340 80a6 	ble.w	80086bc <_dtoa_r+0x45c>
 8008570:	49ca      	ldr	r1, [pc, #808]	; (800889c <_dtoa_r+0x63c>)
 8008572:	f00b 020f 	and.w	r2, fp, #15
 8008576:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800857a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800857e:	ed92 7b00 	vldr	d7, [r2]
 8008582:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008586:	f000 808d 	beq.w	80086a4 <_dtoa_r+0x444>
 800858a:	4ac5      	ldr	r2, [pc, #788]	; (80088a0 <_dtoa_r+0x640>)
 800858c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008590:	ed92 6b08 	vldr	d6, [r2, #32]
 8008594:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008598:	ed8d 6b02 	vstr	d6, [sp, #8]
 800859c:	f001 010f 	and.w	r1, r1, #15
 80085a0:	2203      	movs	r2, #3
 80085a2:	48bf      	ldr	r0, [pc, #764]	; (80088a0 <_dtoa_r+0x640>)
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d17f      	bne.n	80086a8 <_dtoa_r+0x448>
 80085a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085ac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80085b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085b6:	2900      	cmp	r1, #0
 80085b8:	f000 80b2 	beq.w	8008720 <_dtoa_r+0x4c0>
 80085bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80085c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	f140 80a8 	bpl.w	8008720 <_dtoa_r+0x4c0>
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	f000 80a4 	beq.w	8008720 <_dtoa_r+0x4c0>
 80085d8:	f1ba 0f00 	cmp.w	sl, #0
 80085dc:	dd31      	ble.n	8008642 <_dtoa_r+0x3e2>
 80085de:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80085e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085ea:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085ee:	3201      	adds	r2, #1
 80085f0:	4650      	mov	r0, sl
 80085f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085f6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80085fa:	ee07 2a90 	vmov	s15, r2
 80085fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008602:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008606:	ed8d 5b02 	vstr	d5, [sp, #8]
 800860a:	9c03      	ldr	r4, [sp, #12]
 800860c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008610:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008614:	2800      	cmp	r0, #0
 8008616:	f040 8086 	bne.w	8008726 <_dtoa_r+0x4c6>
 800861a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800861e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008622:	ec42 1b17 	vmov	d7, r1, r2
 8008626:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862e:	f300 8272 	bgt.w	8008b16 <_dtoa_r+0x8b6>
 8008632:	eeb1 7b47 	vneg.f64	d7, d7
 8008636:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800863a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863e:	f100 8267 	bmi.w	8008b10 <_dtoa_r+0x8b0>
 8008642:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008646:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800864a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800864c:	2a00      	cmp	r2, #0
 800864e:	f2c0 8129 	blt.w	80088a4 <_dtoa_r+0x644>
 8008652:	f1bb 0f0e 	cmp.w	fp, #14
 8008656:	f300 8125 	bgt.w	80088a4 <_dtoa_r+0x644>
 800865a:	4b90      	ldr	r3, [pc, #576]	; (800889c <_dtoa_r+0x63c>)
 800865c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008660:	ed93 6b00 	vldr	d6, [r3]
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	f280 80c3 	bge.w	80087f2 <_dtoa_r+0x592>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	f300 80bf 	bgt.w	80087f2 <_dtoa_r+0x592>
 8008674:	f040 824c 	bne.w	8008b10 <_dtoa_r+0x8b0>
 8008678:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800867c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008684:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	464c      	mov	r4, r9
 800868e:	464f      	mov	r7, r9
 8008690:	f280 8222 	bge.w	8008ad8 <_dtoa_r+0x878>
 8008694:	f8dd 8000 	ldr.w	r8, [sp]
 8008698:	2331      	movs	r3, #49	; 0x31
 800869a:	f808 3b01 	strb.w	r3, [r8], #1
 800869e:	f10b 0b01 	add.w	fp, fp, #1
 80086a2:	e21e      	b.n	8008ae2 <_dtoa_r+0x882>
 80086a4:	2202      	movs	r2, #2
 80086a6:	e77c      	b.n	80085a2 <_dtoa_r+0x342>
 80086a8:	07cc      	lsls	r4, r1, #31
 80086aa:	d504      	bpl.n	80086b6 <_dtoa_r+0x456>
 80086ac:	ed90 6b00 	vldr	d6, [r0]
 80086b0:	3201      	adds	r2, #1
 80086b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086b6:	1049      	asrs	r1, r1, #1
 80086b8:	3008      	adds	r0, #8
 80086ba:	e773      	b.n	80085a4 <_dtoa_r+0x344>
 80086bc:	d02e      	beq.n	800871c <_dtoa_r+0x4bc>
 80086be:	f1cb 0100 	rsb	r1, fp, #0
 80086c2:	4a76      	ldr	r2, [pc, #472]	; (800889c <_dtoa_r+0x63c>)
 80086c4:	f001 000f 	and.w	r0, r1, #15
 80086c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80086cc:	ed92 7b00 	vldr	d7, [r2]
 80086d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80086d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086dc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80086e0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80086e4:	486e      	ldr	r0, [pc, #440]	; (80088a0 <_dtoa_r+0x640>)
 80086e6:	1109      	asrs	r1, r1, #4
 80086e8:	2400      	movs	r4, #0
 80086ea:	2202      	movs	r2, #2
 80086ec:	b939      	cbnz	r1, 80086fe <_dtoa_r+0x49e>
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	f43f af60 	beq.w	80085b4 <_dtoa_r+0x354>
 80086f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086fc:	e75a      	b.n	80085b4 <_dtoa_r+0x354>
 80086fe:	07cf      	lsls	r7, r1, #31
 8008700:	d509      	bpl.n	8008716 <_dtoa_r+0x4b6>
 8008702:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008706:	ed90 7b00 	vldr	d7, [r0]
 800870a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800870e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008712:	3201      	adds	r2, #1
 8008714:	2401      	movs	r4, #1
 8008716:	1049      	asrs	r1, r1, #1
 8008718:	3008      	adds	r0, #8
 800871a:	e7e7      	b.n	80086ec <_dtoa_r+0x48c>
 800871c:	2202      	movs	r2, #2
 800871e:	e749      	b.n	80085b4 <_dtoa_r+0x354>
 8008720:	465f      	mov	r7, fp
 8008722:	4648      	mov	r0, r9
 8008724:	e765      	b.n	80085f2 <_dtoa_r+0x392>
 8008726:	ec42 1b17 	vmov	d7, r1, r2
 800872a:	4a5c      	ldr	r2, [pc, #368]	; (800889c <_dtoa_r+0x63c>)
 800872c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008730:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008734:	9a00      	ldr	r2, [sp, #0]
 8008736:	1814      	adds	r4, r2, r0
 8008738:	9a08      	ldr	r2, [sp, #32]
 800873a:	b352      	cbz	r2, 8008792 <_dtoa_r+0x532>
 800873c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008740:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008744:	f8dd 8000 	ldr.w	r8, [sp]
 8008748:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800874c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008750:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008754:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008758:	ee14 2a90 	vmov	r2, s9
 800875c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008760:	3230      	adds	r2, #48	; 0x30
 8008762:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800876a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876e:	f808 2b01 	strb.w	r2, [r8], #1
 8008772:	d439      	bmi.n	80087e8 <_dtoa_r+0x588>
 8008774:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008778:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008780:	d472      	bmi.n	8008868 <_dtoa_r+0x608>
 8008782:	45a0      	cmp	r8, r4
 8008784:	f43f af5d 	beq.w	8008642 <_dtoa_r+0x3e2>
 8008788:	ee27 7b03 	vmul.f64	d7, d7, d3
 800878c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008790:	e7e0      	b.n	8008754 <_dtoa_r+0x4f4>
 8008792:	f8dd 8000 	ldr.w	r8, [sp]
 8008796:	ee27 7b04 	vmul.f64	d7, d7, d4
 800879a:	4621      	mov	r1, r4
 800879c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80087a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087a4:	ee14 2a90 	vmov	r2, s9
 80087a8:	3230      	adds	r2, #48	; 0x30
 80087aa:	f808 2b01 	strb.w	r2, [r8], #1
 80087ae:	45a0      	cmp	r8, r4
 80087b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80087b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80087b8:	d118      	bne.n	80087ec <_dtoa_r+0x58c>
 80087ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80087be:	ee37 4b05 	vadd.f64	d4, d7, d5
 80087c2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80087c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ca:	dc4d      	bgt.n	8008868 <_dtoa_r+0x608>
 80087cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d8:	f57f af33 	bpl.w	8008642 <_dtoa_r+0x3e2>
 80087dc:	4688      	mov	r8, r1
 80087de:	3901      	subs	r1, #1
 80087e0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80087e4:	2b30      	cmp	r3, #48	; 0x30
 80087e6:	d0f9      	beq.n	80087dc <_dtoa_r+0x57c>
 80087e8:	46bb      	mov	fp, r7
 80087ea:	e02a      	b.n	8008842 <_dtoa_r+0x5e2>
 80087ec:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087f0:	e7d6      	b.n	80087a0 <_dtoa_r+0x540>
 80087f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087f6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80087fa:	f8dd 8000 	ldr.w	r8, [sp]
 80087fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008802:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008806:	ee15 3a10 	vmov	r3, s10
 800880a:	3330      	adds	r3, #48	; 0x30
 800880c:	f808 3b01 	strb.w	r3, [r8], #1
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	eba8 0303 	sub.w	r3, r8, r3
 8008816:	4599      	cmp	r9, r3
 8008818:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800881c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008820:	d133      	bne.n	800888a <_dtoa_r+0x62a>
 8008822:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008826:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800882a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882e:	dc1a      	bgt.n	8008866 <_dtoa_r+0x606>
 8008830:	eeb4 7b46 	vcmp.f64	d7, d6
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	d103      	bne.n	8008842 <_dtoa_r+0x5e2>
 800883a:	ee15 3a10 	vmov	r3, s10
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	d411      	bmi.n	8008866 <_dtoa_r+0x606>
 8008842:	4629      	mov	r1, r5
 8008844:	4630      	mov	r0, r6
 8008846:	f000 fe7b 	bl	8009540 <_Bfree>
 800884a:	2300      	movs	r3, #0
 800884c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800884e:	f888 3000 	strb.w	r3, [r8]
 8008852:	f10b 0301 	add.w	r3, fp, #1
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800885a:	2b00      	cmp	r3, #0
 800885c:	f43f ad4d 	beq.w	80082fa <_dtoa_r+0x9a>
 8008860:	f8c3 8000 	str.w	r8, [r3]
 8008864:	e549      	b.n	80082fa <_dtoa_r+0x9a>
 8008866:	465f      	mov	r7, fp
 8008868:	4643      	mov	r3, r8
 800886a:	4698      	mov	r8, r3
 800886c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008870:	2a39      	cmp	r2, #57	; 0x39
 8008872:	d106      	bne.n	8008882 <_dtoa_r+0x622>
 8008874:	9a00      	ldr	r2, [sp, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d1f7      	bne.n	800886a <_dtoa_r+0x60a>
 800887a:	9900      	ldr	r1, [sp, #0]
 800887c:	2230      	movs	r2, #48	; 0x30
 800887e:	3701      	adds	r7, #1
 8008880:	700a      	strb	r2, [r1, #0]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7ae      	b.n	80087e8 <_dtoa_r+0x588>
 800888a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800888e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008896:	d1b2      	bne.n	80087fe <_dtoa_r+0x59e>
 8008898:	e7d3      	b.n	8008842 <_dtoa_r+0x5e2>
 800889a:	bf00      	nop
 800889c:	0800bf70 	.word	0x0800bf70
 80088a0:	0800bf48 	.word	0x0800bf48
 80088a4:	9908      	ldr	r1, [sp, #32]
 80088a6:	2900      	cmp	r1, #0
 80088a8:	f000 80d1 	beq.w	8008a4e <_dtoa_r+0x7ee>
 80088ac:	9907      	ldr	r1, [sp, #28]
 80088ae:	2901      	cmp	r1, #1
 80088b0:	f300 80b4 	bgt.w	8008a1c <_dtoa_r+0x7bc>
 80088b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088b6:	2900      	cmp	r1, #0
 80088b8:	f000 80ac 	beq.w	8008a14 <_dtoa_r+0x7b4>
 80088bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80088c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80088c4:	461c      	mov	r4, r3
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	4413      	add	r3, r2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	2101      	movs	r1, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	4630      	mov	r0, r6
 80088d6:	9306      	str	r3, [sp, #24]
 80088d8:	f000 ff38 	bl	800974c <__i2b>
 80088dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088de:	4607      	mov	r7, r0
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	dd0d      	ble.n	8008902 <_dtoa_r+0x6a2>
 80088e6:	9a06      	ldr	r2, [sp, #24]
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	dd0a      	ble.n	8008902 <_dtoa_r+0x6a2>
 80088ec:	4542      	cmp	r2, r8
 80088ee:	9905      	ldr	r1, [sp, #20]
 80088f0:	bfa8      	it	ge
 80088f2:	4642      	movge	r2, r8
 80088f4:	1a89      	subs	r1, r1, r2
 80088f6:	9105      	str	r1, [sp, #20]
 80088f8:	9906      	ldr	r1, [sp, #24]
 80088fa:	eba8 0802 	sub.w	r8, r8, r2
 80088fe:	1a8a      	subs	r2, r1, r2
 8008900:	9206      	str	r2, [sp, #24]
 8008902:	b303      	cbz	r3, 8008946 <_dtoa_r+0x6e6>
 8008904:	9a08      	ldr	r2, [sp, #32]
 8008906:	2a00      	cmp	r2, #0
 8008908:	f000 80a6 	beq.w	8008a58 <_dtoa_r+0x7f8>
 800890c:	2c00      	cmp	r4, #0
 800890e:	dd13      	ble.n	8008938 <_dtoa_r+0x6d8>
 8008910:	4639      	mov	r1, r7
 8008912:	4622      	mov	r2, r4
 8008914:	4630      	mov	r0, r6
 8008916:	930c      	str	r3, [sp, #48]	; 0x30
 8008918:	f000 ffd4 	bl	80098c4 <__pow5mult>
 800891c:	462a      	mov	r2, r5
 800891e:	4601      	mov	r1, r0
 8008920:	4607      	mov	r7, r0
 8008922:	4630      	mov	r0, r6
 8008924:	f000 ff28 	bl	8009778 <__multiply>
 8008928:	4629      	mov	r1, r5
 800892a:	900a      	str	r0, [sp, #40]	; 0x28
 800892c:	4630      	mov	r0, r6
 800892e:	f000 fe07 	bl	8009540 <_Bfree>
 8008932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008936:	4615      	mov	r5, r2
 8008938:	1b1a      	subs	r2, r3, r4
 800893a:	d004      	beq.n	8008946 <_dtoa_r+0x6e6>
 800893c:	4629      	mov	r1, r5
 800893e:	4630      	mov	r0, r6
 8008940:	f000 ffc0 	bl	80098c4 <__pow5mult>
 8008944:	4605      	mov	r5, r0
 8008946:	2101      	movs	r1, #1
 8008948:	4630      	mov	r0, r6
 800894a:	f000 feff 	bl	800974c <__i2b>
 800894e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	f340 8082 	ble.w	8008a5c <_dtoa_r+0x7fc>
 8008958:	461a      	mov	r2, r3
 800895a:	4601      	mov	r1, r0
 800895c:	4630      	mov	r0, r6
 800895e:	f000 ffb1 	bl	80098c4 <__pow5mult>
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	2b01      	cmp	r3, #1
 8008966:	4604      	mov	r4, r0
 8008968:	dd7b      	ble.n	8008a62 <_dtoa_r+0x802>
 800896a:	2300      	movs	r3, #0
 800896c:	930a      	str	r3, [sp, #40]	; 0x28
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008974:	6910      	ldr	r0, [r2, #16]
 8008976:	f000 fe99 	bl	80096ac <__hi0bits>
 800897a:	f1c0 0020 	rsb	r0, r0, #32
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	4418      	add	r0, r3
 8008982:	f010 001f 	ands.w	r0, r0, #31
 8008986:	f000 808d 	beq.w	8008aa4 <_dtoa_r+0x844>
 800898a:	f1c0 0220 	rsb	r2, r0, #32
 800898e:	2a04      	cmp	r2, #4
 8008990:	f340 8086 	ble.w	8008aa0 <_dtoa_r+0x840>
 8008994:	f1c0 001c 	rsb	r0, r0, #28
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	4403      	add	r3, r0
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	4403      	add	r3, r0
 80089a2:	4480      	add	r8, r0
 80089a4:	9306      	str	r3, [sp, #24]
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dd05      	ble.n	80089b8 <_dtoa_r+0x758>
 80089ac:	4629      	mov	r1, r5
 80089ae:	461a      	mov	r2, r3
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 ffe1 	bl	8009978 <__lshift>
 80089b6:	4605      	mov	r5, r0
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd05      	ble.n	80089ca <_dtoa_r+0x76a>
 80089be:	4621      	mov	r1, r4
 80089c0:	461a      	mov	r2, r3
 80089c2:	4630      	mov	r0, r6
 80089c4:	f000 ffd8 	bl	8009978 <__lshift>
 80089c8:	4604      	mov	r4, r0
 80089ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d06b      	beq.n	8008aa8 <_dtoa_r+0x848>
 80089d0:	4621      	mov	r1, r4
 80089d2:	4628      	mov	r0, r5
 80089d4:	f001 f83c 	bl	8009a50 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	da65      	bge.n	8008aa8 <_dtoa_r+0x848>
 80089dc:	2300      	movs	r3, #0
 80089de:	4629      	mov	r1, r5
 80089e0:	220a      	movs	r2, #10
 80089e2:	4630      	mov	r0, r6
 80089e4:	f000 fdce 	bl	8009584 <__multadd>
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089ee:	4605      	mov	r5, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8192 	beq.w	8008d1a <_dtoa_r+0xaba>
 80089f6:	4639      	mov	r1, r7
 80089f8:	2300      	movs	r3, #0
 80089fa:	220a      	movs	r2, #10
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 fdc1 	bl	8009584 <__multadd>
 8008a02:	f1ba 0f00 	cmp.w	sl, #0
 8008a06:	4607      	mov	r7, r0
 8008a08:	f300 808e 	bgt.w	8008b28 <_dtoa_r+0x8c8>
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc51      	bgt.n	8008ab6 <_dtoa_r+0x856>
 8008a12:	e089      	b.n	8008b28 <_dtoa_r+0x8c8>
 8008a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a1a:	e751      	b.n	80088c0 <_dtoa_r+0x660>
 8008a1c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	bfbf      	itttt	lt
 8008a24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008a26:	1ae3      	sublt	r3, r4, r3
 8008a28:	18d2      	addlt	r2, r2, r3
 8008a2a:	4613      	movlt	r3, r2
 8008a2c:	bfb7      	itett	lt
 8008a2e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a30:	1b1c      	subge	r4, r3, r4
 8008a32:	4623      	movlt	r3, r4
 8008a34:	2400      	movlt	r4, #0
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	bfb5      	itete	lt
 8008a3c:	9a05      	ldrlt	r2, [sp, #20]
 8008a3e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008a42:	eba2 0809 	sublt.w	r8, r2, r9
 8008a46:	464a      	movge	r2, r9
 8008a48:	bfb8      	it	lt
 8008a4a:	2200      	movlt	r2, #0
 8008a4c:	e73b      	b.n	80088c6 <_dtoa_r+0x666>
 8008a4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008a52:	9f08      	ldr	r7, [sp, #32]
 8008a54:	461c      	mov	r4, r3
 8008a56:	e743      	b.n	80088e0 <_dtoa_r+0x680>
 8008a58:	461a      	mov	r2, r3
 8008a5a:	e76f      	b.n	800893c <_dtoa_r+0x6dc>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	dc18      	bgt.n	8008a94 <_dtoa_r+0x834>
 8008a62:	9b02      	ldr	r3, [sp, #8]
 8008a64:	b9b3      	cbnz	r3, 8008a94 <_dtoa_r+0x834>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008a6c:	b9a2      	cbnz	r2, 8008a98 <_dtoa_r+0x838>
 8008a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a72:	0d12      	lsrs	r2, r2, #20
 8008a74:	0512      	lsls	r2, r2, #20
 8008a76:	b18a      	cbz	r2, 8008a9c <_dtoa_r+0x83c>
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	3301      	adds	r3, #1
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	2301      	movs	r3, #1
 8008a86:	930a      	str	r3, [sp, #40]	; 0x28
 8008a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f47f af6f 	bne.w	800896e <_dtoa_r+0x70e>
 8008a90:	2001      	movs	r0, #1
 8008a92:	e774      	b.n	800897e <_dtoa_r+0x71e>
 8008a94:	2300      	movs	r3, #0
 8008a96:	e7f6      	b.n	8008a86 <_dtoa_r+0x826>
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	e7f4      	b.n	8008a86 <_dtoa_r+0x826>
 8008a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a9e:	e7f3      	b.n	8008a88 <_dtoa_r+0x828>
 8008aa0:	d081      	beq.n	80089a6 <_dtoa_r+0x746>
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	301c      	adds	r0, #28
 8008aa6:	e777      	b.n	8008998 <_dtoa_r+0x738>
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	dc37      	bgt.n	8008b1e <_dtoa_r+0x8be>
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	dd34      	ble.n	8008b1e <_dtoa_r+0x8be>
 8008ab4:	46ca      	mov	sl, r9
 8008ab6:	f1ba 0f00 	cmp.w	sl, #0
 8008aba:	d10d      	bne.n	8008ad8 <_dtoa_r+0x878>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4653      	mov	r3, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 fd5e 	bl	8009584 <__multadd>
 8008ac8:	4601      	mov	r1, r0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 ffbf 	bl	8009a50 <__mcmp>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f73f adde 	bgt.w	8008694 <_dtoa_r+0x434>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ada:	f8dd 8000 	ldr.w	r8, [sp]
 8008ade:	ea6f 0b03 	mvn.w	fp, r3
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 fd29 	bl	8009540 <_Bfree>
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	f43f aea7 	beq.w	8008842 <_dtoa_r+0x5e2>
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	d005      	beq.n	8008b06 <_dtoa_r+0x8a6>
 8008afa:	45b9      	cmp	r9, r7
 8008afc:	d003      	beq.n	8008b06 <_dtoa_r+0x8a6>
 8008afe:	4649      	mov	r1, r9
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 fd1d 	bl	8009540 <_Bfree>
 8008b06:	4639      	mov	r1, r7
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 fd19 	bl	8009540 <_Bfree>
 8008b0e:	e698      	b.n	8008842 <_dtoa_r+0x5e2>
 8008b10:	2400      	movs	r4, #0
 8008b12:	4627      	mov	r7, r4
 8008b14:	e7e0      	b.n	8008ad8 <_dtoa_r+0x878>
 8008b16:	46bb      	mov	fp, r7
 8008b18:	4604      	mov	r4, r0
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	e5ba      	b.n	8008694 <_dtoa_r+0x434>
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	46ca      	mov	sl, r9
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 8100 	beq.w	8008d28 <_dtoa_r+0xac8>
 8008b28:	f1b8 0f00 	cmp.w	r8, #0
 8008b2c:	dd05      	ble.n	8008b3a <_dtoa_r+0x8da>
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4642      	mov	r2, r8
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 ff20 	bl	8009978 <__lshift>
 8008b38:	4607      	mov	r7, r0
 8008b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05d      	beq.n	8008bfc <_dtoa_r+0x99c>
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4630      	mov	r0, r6
 8008b44:	f000 fcbc 	bl	80094c0 <_Balloc>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	b928      	cbnz	r0, 8008b58 <_dtoa_r+0x8f8>
 8008b4c:	4b82      	ldr	r3, [pc, #520]	; (8008d58 <_dtoa_r+0xaf8>)
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b54:	f7ff bb9a 	b.w	800828c <_dtoa_r+0x2c>
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	3202      	adds	r2, #2
 8008b5c:	0092      	lsls	r2, r2, #2
 8008b5e:	f107 010c 	add.w	r1, r7, #12
 8008b62:	300c      	adds	r0, #12
 8008b64:	f000 fc9e 	bl	80094a4 <memcpy>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 ff03 	bl	8009978 <__lshift>
 8008b72:	9b00      	ldr	r3, [sp, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	4453      	add	r3, sl
 8008b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	46b9      	mov	r9, r7
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	4607      	mov	r7, r0
 8008b8a:	9b05      	ldr	r3, [sp, #20]
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	4628      	mov	r0, r5
 8008b92:	9302      	str	r3, [sp, #8]
 8008b94:	f7ff fad8 	bl	8008148 <quorem>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	3330      	adds	r3, #48	; 0x30
 8008b9c:	9006      	str	r0, [sp, #24]
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba4:	f000 ff54 	bl	8009a50 <__mcmp>
 8008ba8:	463a      	mov	r2, r7
 8008baa:	4682      	mov	sl, r0
 8008bac:	4621      	mov	r1, r4
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 ff6a 	bl	8009a88 <__mdiff>
 8008bb4:	68c2      	ldr	r2, [r0, #12]
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	4680      	mov	r8, r0
 8008bba:	bb0a      	cbnz	r2, 8008c00 <_dtoa_r+0x9a0>
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 ff46 	bl	8009a50 <__mcmp>
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4630      	mov	r0, r6
 8008bcc:	920e      	str	r2, [sp, #56]	; 0x38
 8008bce:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd0:	f000 fcb6 	bl	8009540 <_Bfree>
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008bdc:	ea43 0102 	orr.w	r1, r3, r2
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	430b      	orrs	r3, r1
 8008be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be6:	d10d      	bne.n	8008c04 <_dtoa_r+0x9a4>
 8008be8:	2b39      	cmp	r3, #57	; 0x39
 8008bea:	d029      	beq.n	8008c40 <_dtoa_r+0x9e0>
 8008bec:	f1ba 0f00 	cmp.w	sl, #0
 8008bf0:	dd01      	ble.n	8008bf6 <_dtoa_r+0x996>
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	3331      	adds	r3, #49	; 0x31
 8008bf6:	9a02      	ldr	r2, [sp, #8]
 8008bf8:	7013      	strb	r3, [r2, #0]
 8008bfa:	e774      	b.n	8008ae6 <_dtoa_r+0x886>
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	e7b8      	b.n	8008b72 <_dtoa_r+0x912>
 8008c00:	2201      	movs	r2, #1
 8008c02:	e7e1      	b.n	8008bc8 <_dtoa_r+0x968>
 8008c04:	f1ba 0f00 	cmp.w	sl, #0
 8008c08:	db06      	blt.n	8008c18 <_dtoa_r+0x9b8>
 8008c0a:	9907      	ldr	r1, [sp, #28]
 8008c0c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008c10:	9908      	ldr	r1, [sp, #32]
 8008c12:	ea5a 0101 	orrs.w	r1, sl, r1
 8008c16:	d120      	bne.n	8008c5a <_dtoa_r+0x9fa>
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	ddec      	ble.n	8008bf6 <_dtoa_r+0x996>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4630      	mov	r0, r6
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f000 fea8 	bl	8009978 <__lshift>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	f000 ff10 	bl	8009a50 <__mcmp>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	dc02      	bgt.n	8008c3c <_dtoa_r+0x9dc>
 8008c36:	d1de      	bne.n	8008bf6 <_dtoa_r+0x996>
 8008c38:	07da      	lsls	r2, r3, #31
 8008c3a:	d5dc      	bpl.n	8008bf6 <_dtoa_r+0x996>
 8008c3c:	2b39      	cmp	r3, #57	; 0x39
 8008c3e:	d1d8      	bne.n	8008bf2 <_dtoa_r+0x992>
 8008c40:	9a02      	ldr	r2, [sp, #8]
 8008c42:	2339      	movs	r3, #57	; 0x39
 8008c44:	7013      	strb	r3, [r2, #0]
 8008c46:	4643      	mov	r3, r8
 8008c48:	4698      	mov	r8, r3
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008c50:	2a39      	cmp	r2, #57	; 0x39
 8008c52:	d051      	beq.n	8008cf8 <_dtoa_r+0xa98>
 8008c54:	3201      	adds	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e745      	b.n	8008ae6 <_dtoa_r+0x886>
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	dd03      	ble.n	8008c66 <_dtoa_r+0xa06>
 8008c5e:	2b39      	cmp	r3, #57	; 0x39
 8008c60:	d0ee      	beq.n	8008c40 <_dtoa_r+0x9e0>
 8008c62:	3301      	adds	r3, #1
 8008c64:	e7c7      	b.n	8008bf6 <_dtoa_r+0x996>
 8008c66:	9a05      	ldr	r2, [sp, #20]
 8008c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c6e:	428a      	cmp	r2, r1
 8008c70:	d02b      	beq.n	8008cca <_dtoa_r+0xa6a>
 8008c72:	4629      	mov	r1, r5
 8008c74:	2300      	movs	r3, #0
 8008c76:	220a      	movs	r2, #10
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 fc83 	bl	8009584 <__multadd>
 8008c7e:	45b9      	cmp	r9, r7
 8008c80:	4605      	mov	r5, r0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f04f 020a 	mov.w	r2, #10
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	d107      	bne.n	8008ca0 <_dtoa_r+0xa40>
 8008c90:	f000 fc78 	bl	8009584 <__multadd>
 8008c94:	4681      	mov	r9, r0
 8008c96:	4607      	mov	r7, r0
 8008c98:	9b05      	ldr	r3, [sp, #20]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	e774      	b.n	8008b8a <_dtoa_r+0x92a>
 8008ca0:	f000 fc70 	bl	8009584 <__multadd>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4681      	mov	r9, r0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	220a      	movs	r2, #10
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 fc69 	bl	8009584 <__multadd>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	e7f0      	b.n	8008c98 <_dtoa_r+0xa38>
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	9a00      	ldr	r2, [sp, #0]
 8008cbc:	bfcc      	ite	gt
 8008cbe:	46d0      	movgt	r8, sl
 8008cc0:	f04f 0801 	movle.w	r8, #1
 8008cc4:	4490      	add	r8, r2
 8008cc6:	f04f 0900 	mov.w	r9, #0
 8008cca:	4629      	mov	r1, r5
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4630      	mov	r0, r6
 8008cd0:	9302      	str	r3, [sp, #8]
 8008cd2:	f000 fe51 	bl	8009978 <__lshift>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4605      	mov	r5, r0
 8008cda:	f000 feb9 	bl	8009a50 <__mcmp>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	dcb1      	bgt.n	8008c46 <_dtoa_r+0x9e6>
 8008ce2:	d102      	bne.n	8008cea <_dtoa_r+0xa8a>
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d4ad      	bmi.n	8008c46 <_dtoa_r+0x9e6>
 8008cea:	4643      	mov	r3, r8
 8008cec:	4698      	mov	r8, r3
 8008cee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf2:	2a30      	cmp	r2, #48	; 0x30
 8008cf4:	d0fa      	beq.n	8008cec <_dtoa_r+0xa8c>
 8008cf6:	e6f6      	b.n	8008ae6 <_dtoa_r+0x886>
 8008cf8:	9a00      	ldr	r2, [sp, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d1a4      	bne.n	8008c48 <_dtoa_r+0x9e8>
 8008cfe:	f10b 0b01 	add.w	fp, fp, #1
 8008d02:	2331      	movs	r3, #49	; 0x31
 8008d04:	e778      	b.n	8008bf8 <_dtoa_r+0x998>
 8008d06:	4b15      	ldr	r3, [pc, #84]	; (8008d5c <_dtoa_r+0xafc>)
 8008d08:	f7ff bb12 	b.w	8008330 <_dtoa_r+0xd0>
 8008d0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f47f aaee 	bne.w	80082f0 <_dtoa_r+0x90>
 8008d14:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <_dtoa_r+0xb00>)
 8008d16:	f7ff bb0b 	b.w	8008330 <_dtoa_r+0xd0>
 8008d1a:	f1ba 0f00 	cmp.w	sl, #0
 8008d1e:	dc03      	bgt.n	8008d28 <_dtoa_r+0xac8>
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	f73f aec7 	bgt.w	8008ab6 <_dtoa_r+0x856>
 8008d28:	f8dd 8000 	ldr.w	r8, [sp]
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7ff fa0a 	bl	8008148 <quorem>
 8008d34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d38:	f808 3b01 	strb.w	r3, [r8], #1
 8008d3c:	9a00      	ldr	r2, [sp, #0]
 8008d3e:	eba8 0202 	sub.w	r2, r8, r2
 8008d42:	4592      	cmp	sl, r2
 8008d44:	ddb7      	ble.n	8008cb6 <_dtoa_r+0xa56>
 8008d46:	4629      	mov	r1, r5
 8008d48:	2300      	movs	r3, #0
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 fc19 	bl	8009584 <__multadd>
 8008d52:	4605      	mov	r5, r0
 8008d54:	e7ea      	b.n	8008d2c <_dtoa_r+0xacc>
 8008d56:	bf00      	nop
 8008d58:	0800be54 	.word	0x0800be54
 8008d5c:	0800c059 	.word	0x0800c059
 8008d60:	0800bdd1 	.word	0x0800bdd1

08008d64 <rshift>:
 8008d64:	6903      	ldr	r3, [r0, #16]
 8008d66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d72:	f100 0414 	add.w	r4, r0, #20
 8008d76:	dd45      	ble.n	8008e04 <rshift+0xa0>
 8008d78:	f011 011f 	ands.w	r1, r1, #31
 8008d7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d84:	d10c      	bne.n	8008da0 <rshift+0x3c>
 8008d86:	f100 0710 	add.w	r7, r0, #16
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	42b1      	cmp	r1, r6
 8008d8e:	d334      	bcc.n	8008dfa <rshift+0x96>
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	1eea      	subs	r2, r5, #3
 8008d96:	4296      	cmp	r6, r2
 8008d98:	bf38      	it	cc
 8008d9a:	2300      	movcc	r3, #0
 8008d9c:	4423      	add	r3, r4
 8008d9e:	e015      	b.n	8008dcc <rshift+0x68>
 8008da0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008da4:	f1c1 0820 	rsb	r8, r1, #32
 8008da8:	40cf      	lsrs	r7, r1
 8008daa:	f105 0e04 	add.w	lr, r5, #4
 8008dae:	46a1      	mov	r9, r4
 8008db0:	4576      	cmp	r6, lr
 8008db2:	46f4      	mov	ip, lr
 8008db4:	d815      	bhi.n	8008de2 <rshift+0x7e>
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	009a      	lsls	r2, r3, #2
 8008dba:	3a04      	subs	r2, #4
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	42ae      	cmp	r6, r5
 8008dc0:	bf38      	it	cc
 8008dc2:	2200      	movcc	r2, #0
 8008dc4:	18a3      	adds	r3, r4, r2
 8008dc6:	50a7      	str	r7, [r4, r2]
 8008dc8:	b107      	cbz	r7, 8008dcc <rshift+0x68>
 8008dca:	3304      	adds	r3, #4
 8008dcc:	1b1a      	subs	r2, r3, r4
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dd4:	bf08      	it	eq
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	6102      	str	r2, [r0, #16]
 8008dda:	bf08      	it	eq
 8008ddc:	6143      	streq	r3, [r0, #20]
 8008dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de2:	f8dc c000 	ldr.w	ip, [ip]
 8008de6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dea:	ea4c 0707 	orr.w	r7, ip, r7
 8008dee:	f849 7b04 	str.w	r7, [r9], #4
 8008df2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008df6:	40cf      	lsrs	r7, r1
 8008df8:	e7da      	b.n	8008db0 <rshift+0x4c>
 8008dfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e02:	e7c3      	b.n	8008d8c <rshift+0x28>
 8008e04:	4623      	mov	r3, r4
 8008e06:	e7e1      	b.n	8008dcc <rshift+0x68>

08008e08 <__hexdig_fun>:
 8008e08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d802      	bhi.n	8008e16 <__hexdig_fun+0xe>
 8008e10:	3820      	subs	r0, #32
 8008e12:	b2c0      	uxtb	r0, r0
 8008e14:	4770      	bx	lr
 8008e16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d801      	bhi.n	8008e22 <__hexdig_fun+0x1a>
 8008e1e:	3847      	subs	r0, #71	; 0x47
 8008e20:	e7f7      	b.n	8008e12 <__hexdig_fun+0xa>
 8008e22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d801      	bhi.n	8008e2e <__hexdig_fun+0x26>
 8008e2a:	3827      	subs	r0, #39	; 0x27
 8008e2c:	e7f1      	b.n	8008e12 <__hexdig_fun+0xa>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	4770      	bx	lr
	...

08008e34 <__gethex>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	ed2d 8b02 	vpush	{d8}
 8008e3c:	b089      	sub	sp, #36	; 0x24
 8008e3e:	ee08 0a10 	vmov	s16, r0
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	4bbc      	ldr	r3, [pc, #752]	; (8009138 <__gethex+0x304>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	468b      	mov	fp, r1
 8008e4e:	4690      	mov	r8, r2
 8008e50:	f7f7 f9f6 	bl	8000240 <strlen>
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	f8db 2000 	ldr.w	r2, [fp]
 8008e5a:	4403      	add	r3, r0
 8008e5c:	4682      	mov	sl, r0
 8008e5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	1c93      	adds	r3, r2, #2
 8008e66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e6e:	32fe      	adds	r2, #254	; 0xfe
 8008e70:	18d1      	adds	r1, r2, r3
 8008e72:	461f      	mov	r7, r3
 8008e74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e78:	9100      	str	r1, [sp, #0]
 8008e7a:	2830      	cmp	r0, #48	; 0x30
 8008e7c:	d0f8      	beq.n	8008e70 <__gethex+0x3c>
 8008e7e:	f7ff ffc3 	bl	8008e08 <__hexdig_fun>
 8008e82:	4604      	mov	r4, r0
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d13a      	bne.n	8008efe <__gethex+0xca>
 8008e88:	9901      	ldr	r1, [sp, #4]
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f7fe fa98 	bl	80073c2 <strncmp>
 8008e92:	4605      	mov	r5, r0
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d168      	bne.n	8008f6a <__gethex+0x136>
 8008e98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e9c:	eb07 060a 	add.w	r6, r7, sl
 8008ea0:	f7ff ffb2 	bl	8008e08 <__hexdig_fun>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d062      	beq.n	8008f6e <__gethex+0x13a>
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	7818      	ldrb	r0, [r3, #0]
 8008eac:	2830      	cmp	r0, #48	; 0x30
 8008eae:	461f      	mov	r7, r3
 8008eb0:	f103 0301 	add.w	r3, r3, #1
 8008eb4:	d0f9      	beq.n	8008eaa <__gethex+0x76>
 8008eb6:	f7ff ffa7 	bl	8008e08 <__hexdig_fun>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	fab0 f480 	clz	r4, r0
 8008ec0:	0964      	lsrs	r4, r4, #5
 8008ec2:	4635      	mov	r5, r6
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	463a      	mov	r2, r7
 8008ec8:	4616      	mov	r6, r2
 8008eca:	3201      	adds	r2, #1
 8008ecc:	7830      	ldrb	r0, [r6, #0]
 8008ece:	f7ff ff9b 	bl	8008e08 <__hexdig_fun>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d1f8      	bne.n	8008ec8 <__gethex+0x94>
 8008ed6:	9901      	ldr	r1, [sp, #4]
 8008ed8:	4652      	mov	r2, sl
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7fe fa71 	bl	80073c2 <strncmp>
 8008ee0:	b980      	cbnz	r0, 8008f04 <__gethex+0xd0>
 8008ee2:	b94d      	cbnz	r5, 8008ef8 <__gethex+0xc4>
 8008ee4:	eb06 050a 	add.w	r5, r6, sl
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4616      	mov	r6, r2
 8008eec:	3201      	adds	r2, #1
 8008eee:	7830      	ldrb	r0, [r6, #0]
 8008ef0:	f7ff ff8a 	bl	8008e08 <__hexdig_fun>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1f8      	bne.n	8008eea <__gethex+0xb6>
 8008ef8:	1bad      	subs	r5, r5, r6
 8008efa:	00ad      	lsls	r5, r5, #2
 8008efc:	e004      	b.n	8008f08 <__gethex+0xd4>
 8008efe:	2400      	movs	r4, #0
 8008f00:	4625      	mov	r5, r4
 8008f02:	e7e0      	b.n	8008ec6 <__gethex+0x92>
 8008f04:	2d00      	cmp	r5, #0
 8008f06:	d1f7      	bne.n	8008ef8 <__gethex+0xc4>
 8008f08:	7833      	ldrb	r3, [r6, #0]
 8008f0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f0e:	2b50      	cmp	r3, #80	; 0x50
 8008f10:	d13b      	bne.n	8008f8a <__gethex+0x156>
 8008f12:	7873      	ldrb	r3, [r6, #1]
 8008f14:	2b2b      	cmp	r3, #43	; 0x2b
 8008f16:	d02c      	beq.n	8008f72 <__gethex+0x13e>
 8008f18:	2b2d      	cmp	r3, #45	; 0x2d
 8008f1a:	d02e      	beq.n	8008f7a <__gethex+0x146>
 8008f1c:	1c71      	adds	r1, r6, #1
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	7808      	ldrb	r0, [r1, #0]
 8008f24:	f7ff ff70 	bl	8008e08 <__hexdig_fun>
 8008f28:	1e43      	subs	r3, r0, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d82c      	bhi.n	8008f8a <__gethex+0x156>
 8008f30:	f1a0 0210 	sub.w	r2, r0, #16
 8008f34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f38:	f7ff ff66 	bl	8008e08 <__hexdig_fun>
 8008f3c:	1e43      	subs	r3, r0, #1
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b18      	cmp	r3, #24
 8008f42:	d91d      	bls.n	8008f80 <__gethex+0x14c>
 8008f44:	f1b9 0f00 	cmp.w	r9, #0
 8008f48:	d000      	beq.n	8008f4c <__gethex+0x118>
 8008f4a:	4252      	negs	r2, r2
 8008f4c:	4415      	add	r5, r2
 8008f4e:	f8cb 1000 	str.w	r1, [fp]
 8008f52:	b1e4      	cbz	r4, 8008f8e <__gethex+0x15a>
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf14      	ite	ne
 8008f5a:	2700      	movne	r7, #0
 8008f5c:	2706      	moveq	r7, #6
 8008f5e:	4638      	mov	r0, r7
 8008f60:	b009      	add	sp, #36	; 0x24
 8008f62:	ecbd 8b02 	vpop	{d8}
 8008f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6a:	463e      	mov	r6, r7
 8008f6c:	4625      	mov	r5, r4
 8008f6e:	2401      	movs	r4, #1
 8008f70:	e7ca      	b.n	8008f08 <__gethex+0xd4>
 8008f72:	f04f 0900 	mov.w	r9, #0
 8008f76:	1cb1      	adds	r1, r6, #2
 8008f78:	e7d3      	b.n	8008f22 <__gethex+0xee>
 8008f7a:	f04f 0901 	mov.w	r9, #1
 8008f7e:	e7fa      	b.n	8008f76 <__gethex+0x142>
 8008f80:	230a      	movs	r3, #10
 8008f82:	fb03 0202 	mla	r2, r3, r2, r0
 8008f86:	3a10      	subs	r2, #16
 8008f88:	e7d4      	b.n	8008f34 <__gethex+0x100>
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	e7df      	b.n	8008f4e <__gethex+0x11a>
 8008f8e:	1bf3      	subs	r3, r6, r7
 8008f90:	3b01      	subs	r3, #1
 8008f92:	4621      	mov	r1, r4
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	dc0b      	bgt.n	8008fb0 <__gethex+0x17c>
 8008f98:	ee18 0a10 	vmov	r0, s16
 8008f9c:	f000 fa90 	bl	80094c0 <_Balloc>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	b940      	cbnz	r0, 8008fb6 <__gethex+0x182>
 8008fa4:	4b65      	ldr	r3, [pc, #404]	; (800913c <__gethex+0x308>)
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	21de      	movs	r1, #222	; 0xde
 8008faa:	4865      	ldr	r0, [pc, #404]	; (8009140 <__gethex+0x30c>)
 8008fac:	f001 fda4 	bl	800aaf8 <__assert_func>
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	105b      	asrs	r3, r3, #1
 8008fb4:	e7ee      	b.n	8008f94 <__gethex+0x160>
 8008fb6:	f100 0914 	add.w	r9, r0, #20
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	f1ca 0301 	rsb	r3, sl, #1
 8008fc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fc6:	f8cd b000 	str.w	fp, [sp]
 8008fca:	9306      	str	r3, [sp, #24]
 8008fcc:	42b7      	cmp	r7, r6
 8008fce:	d340      	bcc.n	8009052 <__gethex+0x21e>
 8008fd0:	9802      	ldr	r0, [sp, #8]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	f840 3b04 	str.w	r3, [r0], #4
 8008fd8:	eba0 0009 	sub.w	r0, r0, r9
 8008fdc:	1080      	asrs	r0, r0, #2
 8008fde:	0146      	lsls	r6, r0, #5
 8008fe0:	6120      	str	r0, [r4, #16]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fb62 	bl	80096ac <__hi0bits>
 8008fe8:	1a30      	subs	r0, r6, r0
 8008fea:	f8d8 6000 	ldr.w	r6, [r8]
 8008fee:	42b0      	cmp	r0, r6
 8008ff0:	dd63      	ble.n	80090ba <__gethex+0x286>
 8008ff2:	1b87      	subs	r7, r0, r6
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fefd 	bl	8009df6 <__any_on>
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	b1a8      	cbz	r0, 800902c <__gethex+0x1f8>
 8009000:	1e7b      	subs	r3, r7, #1
 8009002:	1159      	asrs	r1, r3, #5
 8009004:	f003 021f 	and.w	r2, r3, #31
 8009008:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800900c:	f04f 0a01 	mov.w	sl, #1
 8009010:	fa0a f202 	lsl.w	r2, sl, r2
 8009014:	420a      	tst	r2, r1
 8009016:	d009      	beq.n	800902c <__gethex+0x1f8>
 8009018:	4553      	cmp	r3, sl
 800901a:	dd05      	ble.n	8009028 <__gethex+0x1f4>
 800901c:	1eb9      	subs	r1, r7, #2
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fee9 	bl	8009df6 <__any_on>
 8009024:	2800      	cmp	r0, #0
 8009026:	d145      	bne.n	80090b4 <__gethex+0x280>
 8009028:	f04f 0a02 	mov.w	sl, #2
 800902c:	4639      	mov	r1, r7
 800902e:	4620      	mov	r0, r4
 8009030:	f7ff fe98 	bl	8008d64 <rshift>
 8009034:	443d      	add	r5, r7
 8009036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800903a:	42ab      	cmp	r3, r5
 800903c:	da4c      	bge.n	80090d8 <__gethex+0x2a4>
 800903e:	ee18 0a10 	vmov	r0, s16
 8009042:	4621      	mov	r1, r4
 8009044:	f000 fa7c 	bl	8009540 <_Bfree>
 8009048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800904a:	2300      	movs	r3, #0
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	27a3      	movs	r7, #163	; 0xa3
 8009050:	e785      	b.n	8008f5e <__gethex+0x12a>
 8009052:	1e73      	subs	r3, r6, #1
 8009054:	9a05      	ldr	r2, [sp, #20]
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800905c:	4293      	cmp	r3, r2
 800905e:	d019      	beq.n	8009094 <__gethex+0x260>
 8009060:	f1bb 0f20 	cmp.w	fp, #32
 8009064:	d107      	bne.n	8009076 <__gethex+0x242>
 8009066:	9b02      	ldr	r3, [sp, #8]
 8009068:	9a00      	ldr	r2, [sp, #0]
 800906a:	f843 2b04 	str.w	r2, [r3], #4
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	2300      	movs	r3, #0
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	469b      	mov	fp, r3
 8009076:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800907a:	f7ff fec5 	bl	8008e08 <__hexdig_fun>
 800907e:	9b00      	ldr	r3, [sp, #0]
 8009080:	f000 000f 	and.w	r0, r0, #15
 8009084:	fa00 f00b 	lsl.w	r0, r0, fp
 8009088:	4303      	orrs	r3, r0
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	f10b 0b04 	add.w	fp, fp, #4
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	e00d      	b.n	80090b0 <__gethex+0x27c>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	9a06      	ldr	r2, [sp, #24]
 8009098:	4413      	add	r3, r2
 800909a:	42bb      	cmp	r3, r7
 800909c:	d3e0      	bcc.n	8009060 <__gethex+0x22c>
 800909e:	4618      	mov	r0, r3
 80090a0:	9901      	ldr	r1, [sp, #4]
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	4652      	mov	r2, sl
 80090a6:	f7fe f98c 	bl	80073c2 <strncmp>
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1d7      	bne.n	8009060 <__gethex+0x22c>
 80090b0:	461e      	mov	r6, r3
 80090b2:	e78b      	b.n	8008fcc <__gethex+0x198>
 80090b4:	f04f 0a03 	mov.w	sl, #3
 80090b8:	e7b8      	b.n	800902c <__gethex+0x1f8>
 80090ba:	da0a      	bge.n	80090d2 <__gethex+0x29e>
 80090bc:	1a37      	subs	r7, r6, r0
 80090be:	4621      	mov	r1, r4
 80090c0:	ee18 0a10 	vmov	r0, s16
 80090c4:	463a      	mov	r2, r7
 80090c6:	f000 fc57 	bl	8009978 <__lshift>
 80090ca:	1bed      	subs	r5, r5, r7
 80090cc:	4604      	mov	r4, r0
 80090ce:	f100 0914 	add.w	r9, r0, #20
 80090d2:	f04f 0a00 	mov.w	sl, #0
 80090d6:	e7ae      	b.n	8009036 <__gethex+0x202>
 80090d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80090dc:	42a8      	cmp	r0, r5
 80090de:	dd72      	ble.n	80091c6 <__gethex+0x392>
 80090e0:	1b45      	subs	r5, r0, r5
 80090e2:	42ae      	cmp	r6, r5
 80090e4:	dc36      	bgt.n	8009154 <__gethex+0x320>
 80090e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d02a      	beq.n	8009144 <__gethex+0x310>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d02c      	beq.n	800914c <__gethex+0x318>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d115      	bne.n	8009122 <__gethex+0x2ee>
 80090f6:	42ae      	cmp	r6, r5
 80090f8:	d113      	bne.n	8009122 <__gethex+0x2ee>
 80090fa:	2e01      	cmp	r6, #1
 80090fc:	d10b      	bne.n	8009116 <__gethex+0x2e2>
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	2301      	movs	r3, #1
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	f8c9 3000 	str.w	r3, [r9]
 800910e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009110:	2762      	movs	r7, #98	; 0x62
 8009112:	601c      	str	r4, [r3, #0]
 8009114:	e723      	b.n	8008f5e <__gethex+0x12a>
 8009116:	1e71      	subs	r1, r6, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fe6c 	bl	8009df6 <__any_on>
 800911e:	2800      	cmp	r0, #0
 8009120:	d1ed      	bne.n	80090fe <__gethex+0x2ca>
 8009122:	ee18 0a10 	vmov	r0, s16
 8009126:	4621      	mov	r1, r4
 8009128:	f000 fa0a 	bl	8009540 <_Bfree>
 800912c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800912e:	2300      	movs	r3, #0
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	2750      	movs	r7, #80	; 0x50
 8009134:	e713      	b.n	8008f5e <__gethex+0x12a>
 8009136:	bf00      	nop
 8009138:	0800bed0 	.word	0x0800bed0
 800913c:	0800be54 	.word	0x0800be54
 8009140:	0800be65 	.word	0x0800be65
 8009144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1eb      	bne.n	8009122 <__gethex+0x2ee>
 800914a:	e7d8      	b.n	80090fe <__gethex+0x2ca>
 800914c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1d5      	bne.n	80090fe <__gethex+0x2ca>
 8009152:	e7e6      	b.n	8009122 <__gethex+0x2ee>
 8009154:	1e6f      	subs	r7, r5, #1
 8009156:	f1ba 0f00 	cmp.w	sl, #0
 800915a:	d131      	bne.n	80091c0 <__gethex+0x38c>
 800915c:	b127      	cbz	r7, 8009168 <__gethex+0x334>
 800915e:	4639      	mov	r1, r7
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fe48 	bl	8009df6 <__any_on>
 8009166:	4682      	mov	sl, r0
 8009168:	117b      	asrs	r3, r7, #5
 800916a:	2101      	movs	r1, #1
 800916c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009170:	f007 071f 	and.w	r7, r7, #31
 8009174:	fa01 f707 	lsl.w	r7, r1, r7
 8009178:	421f      	tst	r7, r3
 800917a:	4629      	mov	r1, r5
 800917c:	4620      	mov	r0, r4
 800917e:	bf18      	it	ne
 8009180:	f04a 0a02 	orrne.w	sl, sl, #2
 8009184:	1b76      	subs	r6, r6, r5
 8009186:	f7ff fded 	bl	8008d64 <rshift>
 800918a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800918e:	2702      	movs	r7, #2
 8009190:	f1ba 0f00 	cmp.w	sl, #0
 8009194:	d048      	beq.n	8009228 <__gethex+0x3f4>
 8009196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d015      	beq.n	80091ca <__gethex+0x396>
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d017      	beq.n	80091d2 <__gethex+0x39e>
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d109      	bne.n	80091ba <__gethex+0x386>
 80091a6:	f01a 0f02 	tst.w	sl, #2
 80091aa:	d006      	beq.n	80091ba <__gethex+0x386>
 80091ac:	f8d9 0000 	ldr.w	r0, [r9]
 80091b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80091b4:	f01a 0f01 	tst.w	sl, #1
 80091b8:	d10e      	bne.n	80091d8 <__gethex+0x3a4>
 80091ba:	f047 0710 	orr.w	r7, r7, #16
 80091be:	e033      	b.n	8009228 <__gethex+0x3f4>
 80091c0:	f04f 0a01 	mov.w	sl, #1
 80091c4:	e7d0      	b.n	8009168 <__gethex+0x334>
 80091c6:	2701      	movs	r7, #1
 80091c8:	e7e2      	b.n	8009190 <__gethex+0x35c>
 80091ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091cc:	f1c3 0301 	rsb	r3, r3, #1
 80091d0:	9315      	str	r3, [sp, #84]	; 0x54
 80091d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f0      	beq.n	80091ba <__gethex+0x386>
 80091d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091dc:	f104 0314 	add.w	r3, r4, #20
 80091e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091e8:	f04f 0c00 	mov.w	ip, #0
 80091ec:	4618      	mov	r0, r3
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091f6:	d01c      	beq.n	8009232 <__gethex+0x3fe>
 80091f8:	3201      	adds	r2, #1
 80091fa:	6002      	str	r2, [r0, #0]
 80091fc:	2f02      	cmp	r7, #2
 80091fe:	f104 0314 	add.w	r3, r4, #20
 8009202:	d13f      	bne.n	8009284 <__gethex+0x450>
 8009204:	f8d8 2000 	ldr.w	r2, [r8]
 8009208:	3a01      	subs	r2, #1
 800920a:	42b2      	cmp	r2, r6
 800920c:	d10a      	bne.n	8009224 <__gethex+0x3f0>
 800920e:	1171      	asrs	r1, r6, #5
 8009210:	2201      	movs	r2, #1
 8009212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009216:	f006 061f 	and.w	r6, r6, #31
 800921a:	fa02 f606 	lsl.w	r6, r2, r6
 800921e:	421e      	tst	r6, r3
 8009220:	bf18      	it	ne
 8009222:	4617      	movne	r7, r2
 8009224:	f047 0720 	orr.w	r7, r7, #32
 8009228:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800922a:	601c      	str	r4, [r3, #0]
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	601d      	str	r5, [r3, #0]
 8009230:	e695      	b.n	8008f5e <__gethex+0x12a>
 8009232:	4299      	cmp	r1, r3
 8009234:	f843 cc04 	str.w	ip, [r3, #-4]
 8009238:	d8d8      	bhi.n	80091ec <__gethex+0x3b8>
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	459b      	cmp	fp, r3
 800923e:	db19      	blt.n	8009274 <__gethex+0x440>
 8009240:	6861      	ldr	r1, [r4, #4]
 8009242:	ee18 0a10 	vmov	r0, s16
 8009246:	3101      	adds	r1, #1
 8009248:	f000 f93a 	bl	80094c0 <_Balloc>
 800924c:	4681      	mov	r9, r0
 800924e:	b918      	cbnz	r0, 8009258 <__gethex+0x424>
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <__gethex+0x488>)
 8009252:	4602      	mov	r2, r0
 8009254:	2184      	movs	r1, #132	; 0x84
 8009256:	e6a8      	b.n	8008faa <__gethex+0x176>
 8009258:	6922      	ldr	r2, [r4, #16]
 800925a:	3202      	adds	r2, #2
 800925c:	f104 010c 	add.w	r1, r4, #12
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	300c      	adds	r0, #12
 8009264:	f000 f91e 	bl	80094a4 <memcpy>
 8009268:	4621      	mov	r1, r4
 800926a:	ee18 0a10 	vmov	r0, s16
 800926e:	f000 f967 	bl	8009540 <_Bfree>
 8009272:	464c      	mov	r4, r9
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800927c:	6122      	str	r2, [r4, #16]
 800927e:	2201      	movs	r2, #1
 8009280:	615a      	str	r2, [r3, #20]
 8009282:	e7bb      	b.n	80091fc <__gethex+0x3c8>
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	455a      	cmp	r2, fp
 8009288:	dd0b      	ble.n	80092a2 <__gethex+0x46e>
 800928a:	2101      	movs	r1, #1
 800928c:	4620      	mov	r0, r4
 800928e:	f7ff fd69 	bl	8008d64 <rshift>
 8009292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009296:	3501      	adds	r5, #1
 8009298:	42ab      	cmp	r3, r5
 800929a:	f6ff aed0 	blt.w	800903e <__gethex+0x20a>
 800929e:	2701      	movs	r7, #1
 80092a0:	e7c0      	b.n	8009224 <__gethex+0x3f0>
 80092a2:	f016 061f 	ands.w	r6, r6, #31
 80092a6:	d0fa      	beq.n	800929e <__gethex+0x46a>
 80092a8:	449a      	add	sl, r3
 80092aa:	f1c6 0620 	rsb	r6, r6, #32
 80092ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80092b2:	f000 f9fb 	bl	80096ac <__hi0bits>
 80092b6:	42b0      	cmp	r0, r6
 80092b8:	dbe7      	blt.n	800928a <__gethex+0x456>
 80092ba:	e7f0      	b.n	800929e <__gethex+0x46a>
 80092bc:	0800be54 	.word	0x0800be54

080092c0 <L_shift>:
 80092c0:	f1c2 0208 	rsb	r2, r2, #8
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	b570      	push	{r4, r5, r6, lr}
 80092c8:	f1c2 0620 	rsb	r6, r2, #32
 80092cc:	6843      	ldr	r3, [r0, #4]
 80092ce:	6804      	ldr	r4, [r0, #0]
 80092d0:	fa03 f506 	lsl.w	r5, r3, r6
 80092d4:	432c      	orrs	r4, r5
 80092d6:	40d3      	lsrs	r3, r2
 80092d8:	6004      	str	r4, [r0, #0]
 80092da:	f840 3f04 	str.w	r3, [r0, #4]!
 80092de:	4288      	cmp	r0, r1
 80092e0:	d3f4      	bcc.n	80092cc <L_shift+0xc>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}

080092e4 <__match>:
 80092e4:	b530      	push	{r4, r5, lr}
 80092e6:	6803      	ldr	r3, [r0, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ee:	b914      	cbnz	r4, 80092f6 <__match+0x12>
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	2001      	movs	r0, #1
 80092f4:	bd30      	pop	{r4, r5, pc}
 80092f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092fe:	2d19      	cmp	r5, #25
 8009300:	bf98      	it	ls
 8009302:	3220      	addls	r2, #32
 8009304:	42a2      	cmp	r2, r4
 8009306:	d0f0      	beq.n	80092ea <__match+0x6>
 8009308:	2000      	movs	r0, #0
 800930a:	e7f3      	b.n	80092f4 <__match+0x10>

0800930c <__hexnan>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	680b      	ldr	r3, [r1, #0]
 8009312:	6801      	ldr	r1, [r0, #0]
 8009314:	115e      	asrs	r6, r3, #5
 8009316:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800931a:	f013 031f 	ands.w	r3, r3, #31
 800931e:	b087      	sub	sp, #28
 8009320:	bf18      	it	ne
 8009322:	3604      	addne	r6, #4
 8009324:	2500      	movs	r5, #0
 8009326:	1f37      	subs	r7, r6, #4
 8009328:	4682      	mov	sl, r0
 800932a:	4690      	mov	r8, r2
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009332:	46b9      	mov	r9, r7
 8009334:	463c      	mov	r4, r7
 8009336:	9502      	str	r5, [sp, #8]
 8009338:	46ab      	mov	fp, r5
 800933a:	784a      	ldrb	r2, [r1, #1]
 800933c:	1c4b      	adds	r3, r1, #1
 800933e:	9303      	str	r3, [sp, #12]
 8009340:	b342      	cbz	r2, 8009394 <__hexnan+0x88>
 8009342:	4610      	mov	r0, r2
 8009344:	9105      	str	r1, [sp, #20]
 8009346:	9204      	str	r2, [sp, #16]
 8009348:	f7ff fd5e 	bl	8008e08 <__hexdig_fun>
 800934c:	2800      	cmp	r0, #0
 800934e:	d14f      	bne.n	80093f0 <__hexnan+0xe4>
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	9905      	ldr	r1, [sp, #20]
 8009354:	2a20      	cmp	r2, #32
 8009356:	d818      	bhi.n	800938a <__hexnan+0x7e>
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	459b      	cmp	fp, r3
 800935c:	dd13      	ble.n	8009386 <__hexnan+0x7a>
 800935e:	454c      	cmp	r4, r9
 8009360:	d206      	bcs.n	8009370 <__hexnan+0x64>
 8009362:	2d07      	cmp	r5, #7
 8009364:	dc04      	bgt.n	8009370 <__hexnan+0x64>
 8009366:	462a      	mov	r2, r5
 8009368:	4649      	mov	r1, r9
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff ffa8 	bl	80092c0 <L_shift>
 8009370:	4544      	cmp	r4, r8
 8009372:	d950      	bls.n	8009416 <__hexnan+0x10a>
 8009374:	2300      	movs	r3, #0
 8009376:	f1a4 0904 	sub.w	r9, r4, #4
 800937a:	f844 3c04 	str.w	r3, [r4, #-4]
 800937e:	f8cd b008 	str.w	fp, [sp, #8]
 8009382:	464c      	mov	r4, r9
 8009384:	461d      	mov	r5, r3
 8009386:	9903      	ldr	r1, [sp, #12]
 8009388:	e7d7      	b.n	800933a <__hexnan+0x2e>
 800938a:	2a29      	cmp	r2, #41	; 0x29
 800938c:	d156      	bne.n	800943c <__hexnan+0x130>
 800938e:	3102      	adds	r1, #2
 8009390:	f8ca 1000 	str.w	r1, [sl]
 8009394:	f1bb 0f00 	cmp.w	fp, #0
 8009398:	d050      	beq.n	800943c <__hexnan+0x130>
 800939a:	454c      	cmp	r4, r9
 800939c:	d206      	bcs.n	80093ac <__hexnan+0xa0>
 800939e:	2d07      	cmp	r5, #7
 80093a0:	dc04      	bgt.n	80093ac <__hexnan+0xa0>
 80093a2:	462a      	mov	r2, r5
 80093a4:	4649      	mov	r1, r9
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7ff ff8a 	bl	80092c0 <L_shift>
 80093ac:	4544      	cmp	r4, r8
 80093ae:	d934      	bls.n	800941a <__hexnan+0x10e>
 80093b0:	f1a8 0204 	sub.w	r2, r8, #4
 80093b4:	4623      	mov	r3, r4
 80093b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80093be:	429f      	cmp	r7, r3
 80093c0:	d2f9      	bcs.n	80093b6 <__hexnan+0xaa>
 80093c2:	1b3b      	subs	r3, r7, r4
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	3304      	adds	r3, #4
 80093ca:	3401      	adds	r4, #1
 80093cc:	3e03      	subs	r6, #3
 80093ce:	42b4      	cmp	r4, r6
 80093d0:	bf88      	it	hi
 80093d2:	2304      	movhi	r3, #4
 80093d4:	4443      	add	r3, r8
 80093d6:	2200      	movs	r2, #0
 80093d8:	f843 2b04 	str.w	r2, [r3], #4
 80093dc:	429f      	cmp	r7, r3
 80093de:	d2fb      	bcs.n	80093d8 <__hexnan+0xcc>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	b91b      	cbnz	r3, 80093ec <__hexnan+0xe0>
 80093e4:	4547      	cmp	r7, r8
 80093e6:	d127      	bne.n	8009438 <__hexnan+0x12c>
 80093e8:	2301      	movs	r3, #1
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	2005      	movs	r0, #5
 80093ee:	e026      	b.n	800943e <__hexnan+0x132>
 80093f0:	3501      	adds	r5, #1
 80093f2:	2d08      	cmp	r5, #8
 80093f4:	f10b 0b01 	add.w	fp, fp, #1
 80093f8:	dd06      	ble.n	8009408 <__hexnan+0xfc>
 80093fa:	4544      	cmp	r4, r8
 80093fc:	d9c3      	bls.n	8009386 <__hexnan+0x7a>
 80093fe:	2300      	movs	r3, #0
 8009400:	f844 3c04 	str.w	r3, [r4, #-4]
 8009404:	2501      	movs	r5, #1
 8009406:	3c04      	subs	r4, #4
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	f000 000f 	and.w	r0, r0, #15
 800940e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009412:	6022      	str	r2, [r4, #0]
 8009414:	e7b7      	b.n	8009386 <__hexnan+0x7a>
 8009416:	2508      	movs	r5, #8
 8009418:	e7b5      	b.n	8009386 <__hexnan+0x7a>
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0df      	beq.n	80093e0 <__hexnan+0xd4>
 8009420:	f04f 32ff 	mov.w	r2, #4294967295
 8009424:	f1c3 0320 	rsb	r3, r3, #32
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009430:	401a      	ands	r2, r3
 8009432:	f846 2c04 	str.w	r2, [r6, #-4]
 8009436:	e7d3      	b.n	80093e0 <__hexnan+0xd4>
 8009438:	3f04      	subs	r7, #4
 800943a:	e7d1      	b.n	80093e0 <__hexnan+0xd4>
 800943c:	2004      	movs	r0, #4
 800943e:	b007      	add	sp, #28
 8009440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009444 <_localeconv_r>:
 8009444:	4800      	ldr	r0, [pc, #0]	; (8009448 <_localeconv_r+0x4>)
 8009446:	4770      	bx	lr
 8009448:	200001b8 	.word	0x200001b8

0800944c <_lseek_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	; (800946c <_lseek_r+0x20>)
 8009450:	4604      	mov	r4, r0
 8009452:	4608      	mov	r0, r1
 8009454:	4611      	mov	r1, r2
 8009456:	2200      	movs	r2, #0
 8009458:	602a      	str	r2, [r5, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	f7f8 fd34 	bl	8001ec8 <_lseek>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_lseek_r+0x1e>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_lseek_r+0x1e>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20010894 	.word	0x20010894

08009470 <malloc>:
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <malloc+0xc>)
 8009472:	4601      	mov	r1, r0
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	f000 bd3f 	b.w	8009ef8 <_malloc_r>
 800947a:	bf00      	nop
 800947c:	20000060 	.word	0x20000060

08009480 <__ascii_mbtowc>:
 8009480:	b082      	sub	sp, #8
 8009482:	b901      	cbnz	r1, 8009486 <__ascii_mbtowc+0x6>
 8009484:	a901      	add	r1, sp, #4
 8009486:	b142      	cbz	r2, 800949a <__ascii_mbtowc+0x1a>
 8009488:	b14b      	cbz	r3, 800949e <__ascii_mbtowc+0x1e>
 800948a:	7813      	ldrb	r3, [r2, #0]
 800948c:	600b      	str	r3, [r1, #0]
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	1e10      	subs	r0, r2, #0
 8009492:	bf18      	it	ne
 8009494:	2001      	movne	r0, #1
 8009496:	b002      	add	sp, #8
 8009498:	4770      	bx	lr
 800949a:	4610      	mov	r0, r2
 800949c:	e7fb      	b.n	8009496 <__ascii_mbtowc+0x16>
 800949e:	f06f 0001 	mvn.w	r0, #1
 80094a2:	e7f8      	b.n	8009496 <__ascii_mbtowc+0x16>

080094a4 <memcpy>:
 80094a4:	440a      	add	r2, r1
 80094a6:	4291      	cmp	r1, r2
 80094a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ac:	d100      	bne.n	80094b0 <memcpy+0xc>
 80094ae:	4770      	bx	lr
 80094b0:	b510      	push	{r4, lr}
 80094b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ba:	4291      	cmp	r1, r2
 80094bc:	d1f9      	bne.n	80094b2 <memcpy+0xe>
 80094be:	bd10      	pop	{r4, pc}

080094c0 <_Balloc>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	b976      	cbnz	r6, 80094e8 <_Balloc+0x28>
 80094ca:	2010      	movs	r0, #16
 80094cc:	f7ff ffd0 	bl	8009470 <malloc>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6260      	str	r0, [r4, #36]	; 0x24
 80094d4:	b920      	cbnz	r0, 80094e0 <_Balloc+0x20>
 80094d6:	4b18      	ldr	r3, [pc, #96]	; (8009538 <_Balloc+0x78>)
 80094d8:	4818      	ldr	r0, [pc, #96]	; (800953c <_Balloc+0x7c>)
 80094da:	2166      	movs	r1, #102	; 0x66
 80094dc:	f001 fb0c 	bl	800aaf8 <__assert_func>
 80094e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094e4:	6006      	str	r6, [r0, #0]
 80094e6:	60c6      	str	r6, [r0, #12]
 80094e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094ea:	68f3      	ldr	r3, [r6, #12]
 80094ec:	b183      	cbz	r3, 8009510 <_Balloc+0x50>
 80094ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094f6:	b9b8      	cbnz	r0, 8009528 <_Balloc+0x68>
 80094f8:	2101      	movs	r1, #1
 80094fa:	fa01 f605 	lsl.w	r6, r1, r5
 80094fe:	1d72      	adds	r2, r6, #5
 8009500:	0092      	lsls	r2, r2, #2
 8009502:	4620      	mov	r0, r4
 8009504:	f000 fc98 	bl	8009e38 <_calloc_r>
 8009508:	b160      	cbz	r0, 8009524 <_Balloc+0x64>
 800950a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800950e:	e00e      	b.n	800952e <_Balloc+0x6e>
 8009510:	2221      	movs	r2, #33	; 0x21
 8009512:	2104      	movs	r1, #4
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fc8f 	bl	8009e38 <_calloc_r>
 800951a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951c:	60f0      	str	r0, [r6, #12]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e4      	bne.n	80094ee <_Balloc+0x2e>
 8009524:	2000      	movs	r0, #0
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	6802      	ldr	r2, [r0, #0]
 800952a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800952e:	2300      	movs	r3, #0
 8009530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009534:	e7f7      	b.n	8009526 <_Balloc+0x66>
 8009536:	bf00      	nop
 8009538:	0800bdde 	.word	0x0800bdde
 800953c:	0800bee4 	.word	0x0800bee4

08009540 <_Bfree>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	b976      	cbnz	r6, 8009568 <_Bfree+0x28>
 800954a:	2010      	movs	r0, #16
 800954c:	f7ff ff90 	bl	8009470 <malloc>
 8009550:	4602      	mov	r2, r0
 8009552:	6268      	str	r0, [r5, #36]	; 0x24
 8009554:	b920      	cbnz	r0, 8009560 <_Bfree+0x20>
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <_Bfree+0x3c>)
 8009558:	4809      	ldr	r0, [pc, #36]	; (8009580 <_Bfree+0x40>)
 800955a:	218a      	movs	r1, #138	; 0x8a
 800955c:	f001 facc 	bl	800aaf8 <__assert_func>
 8009560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009564:	6006      	str	r6, [r0, #0]
 8009566:	60c6      	str	r6, [r0, #12]
 8009568:	b13c      	cbz	r4, 800957a <_Bfree+0x3a>
 800956a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800956c:	6862      	ldr	r2, [r4, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009574:	6021      	str	r1, [r4, #0]
 8009576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	0800bdde 	.word	0x0800bdde
 8009580:	0800bee4 	.word	0x0800bee4

08009584 <__multadd>:
 8009584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009588:	690e      	ldr	r6, [r1, #16]
 800958a:	4607      	mov	r7, r0
 800958c:	4698      	mov	r8, r3
 800958e:	460c      	mov	r4, r1
 8009590:	f101 0014 	add.w	r0, r1, #20
 8009594:	2300      	movs	r3, #0
 8009596:	6805      	ldr	r5, [r0, #0]
 8009598:	b2a9      	uxth	r1, r5
 800959a:	fb02 8101 	mla	r1, r2, r1, r8
 800959e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095a2:	0c2d      	lsrs	r5, r5, #16
 80095a4:	fb02 c505 	mla	r5, r2, r5, ip
 80095a8:	b289      	uxth	r1, r1
 80095aa:	3301      	adds	r3, #1
 80095ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095b0:	429e      	cmp	r6, r3
 80095b2:	f840 1b04 	str.w	r1, [r0], #4
 80095b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095ba:	dcec      	bgt.n	8009596 <__multadd+0x12>
 80095bc:	f1b8 0f00 	cmp.w	r8, #0
 80095c0:	d022      	beq.n	8009608 <__multadd+0x84>
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	42b3      	cmp	r3, r6
 80095c6:	dc19      	bgt.n	80095fc <__multadd+0x78>
 80095c8:	6861      	ldr	r1, [r4, #4]
 80095ca:	4638      	mov	r0, r7
 80095cc:	3101      	adds	r1, #1
 80095ce:	f7ff ff77 	bl	80094c0 <_Balloc>
 80095d2:	4605      	mov	r5, r0
 80095d4:	b928      	cbnz	r0, 80095e2 <__multadd+0x5e>
 80095d6:	4602      	mov	r2, r0
 80095d8:	4b0d      	ldr	r3, [pc, #52]	; (8009610 <__multadd+0x8c>)
 80095da:	480e      	ldr	r0, [pc, #56]	; (8009614 <__multadd+0x90>)
 80095dc:	21b5      	movs	r1, #181	; 0xb5
 80095de:	f001 fa8b 	bl	800aaf8 <__assert_func>
 80095e2:	6922      	ldr	r2, [r4, #16]
 80095e4:	3202      	adds	r2, #2
 80095e6:	f104 010c 	add.w	r1, r4, #12
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	300c      	adds	r0, #12
 80095ee:	f7ff ff59 	bl	80094a4 <memcpy>
 80095f2:	4621      	mov	r1, r4
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff ffa3 	bl	8009540 <_Bfree>
 80095fa:	462c      	mov	r4, r5
 80095fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009600:	3601      	adds	r6, #1
 8009602:	f8c3 8014 	str.w	r8, [r3, #20]
 8009606:	6126      	str	r6, [r4, #16]
 8009608:	4620      	mov	r0, r4
 800960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960e:	bf00      	nop
 8009610:	0800be54 	.word	0x0800be54
 8009614:	0800bee4 	.word	0x0800bee4

08009618 <__s2b>:
 8009618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800961c:	460c      	mov	r4, r1
 800961e:	4615      	mov	r5, r2
 8009620:	461f      	mov	r7, r3
 8009622:	2209      	movs	r2, #9
 8009624:	3308      	adds	r3, #8
 8009626:	4606      	mov	r6, r0
 8009628:	fb93 f3f2 	sdiv	r3, r3, r2
 800962c:	2100      	movs	r1, #0
 800962e:	2201      	movs	r2, #1
 8009630:	429a      	cmp	r2, r3
 8009632:	db09      	blt.n	8009648 <__s2b+0x30>
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff ff43 	bl	80094c0 <_Balloc>
 800963a:	b940      	cbnz	r0, 800964e <__s2b+0x36>
 800963c:	4602      	mov	r2, r0
 800963e:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <__s2b+0x8c>)
 8009640:	4819      	ldr	r0, [pc, #100]	; (80096a8 <__s2b+0x90>)
 8009642:	21ce      	movs	r1, #206	; 0xce
 8009644:	f001 fa58 	bl	800aaf8 <__assert_func>
 8009648:	0052      	lsls	r2, r2, #1
 800964a:	3101      	adds	r1, #1
 800964c:	e7f0      	b.n	8009630 <__s2b+0x18>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	6143      	str	r3, [r0, #20]
 8009652:	2d09      	cmp	r5, #9
 8009654:	f04f 0301 	mov.w	r3, #1
 8009658:	6103      	str	r3, [r0, #16]
 800965a:	dd16      	ble.n	800968a <__s2b+0x72>
 800965c:	f104 0909 	add.w	r9, r4, #9
 8009660:	46c8      	mov	r8, r9
 8009662:	442c      	add	r4, r5
 8009664:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009668:	4601      	mov	r1, r0
 800966a:	3b30      	subs	r3, #48	; 0x30
 800966c:	220a      	movs	r2, #10
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ff88 	bl	8009584 <__multadd>
 8009674:	45a0      	cmp	r8, r4
 8009676:	d1f5      	bne.n	8009664 <__s2b+0x4c>
 8009678:	f1a5 0408 	sub.w	r4, r5, #8
 800967c:	444c      	add	r4, r9
 800967e:	1b2d      	subs	r5, r5, r4
 8009680:	1963      	adds	r3, r4, r5
 8009682:	42bb      	cmp	r3, r7
 8009684:	db04      	blt.n	8009690 <__s2b+0x78>
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	340a      	adds	r4, #10
 800968c:	2509      	movs	r5, #9
 800968e:	e7f6      	b.n	800967e <__s2b+0x66>
 8009690:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009694:	4601      	mov	r1, r0
 8009696:	3b30      	subs	r3, #48	; 0x30
 8009698:	220a      	movs	r2, #10
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff ff72 	bl	8009584 <__multadd>
 80096a0:	e7ee      	b.n	8009680 <__s2b+0x68>
 80096a2:	bf00      	nop
 80096a4:	0800be54 	.word	0x0800be54
 80096a8:	0800bee4 	.word	0x0800bee4

080096ac <__hi0bits>:
 80096ac:	0c03      	lsrs	r3, r0, #16
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	b9d3      	cbnz	r3, 80096e8 <__hi0bits+0x3c>
 80096b2:	0400      	lsls	r0, r0, #16
 80096b4:	2310      	movs	r3, #16
 80096b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096ba:	bf04      	itt	eq
 80096bc:	0200      	lsleq	r0, r0, #8
 80096be:	3308      	addeq	r3, #8
 80096c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096c4:	bf04      	itt	eq
 80096c6:	0100      	lsleq	r0, r0, #4
 80096c8:	3304      	addeq	r3, #4
 80096ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096ce:	bf04      	itt	eq
 80096d0:	0080      	lsleq	r0, r0, #2
 80096d2:	3302      	addeq	r3, #2
 80096d4:	2800      	cmp	r0, #0
 80096d6:	db05      	blt.n	80096e4 <__hi0bits+0x38>
 80096d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096dc:	f103 0301 	add.w	r3, r3, #1
 80096e0:	bf08      	it	eq
 80096e2:	2320      	moveq	r3, #32
 80096e4:	4618      	mov	r0, r3
 80096e6:	4770      	bx	lr
 80096e8:	2300      	movs	r3, #0
 80096ea:	e7e4      	b.n	80096b6 <__hi0bits+0xa>

080096ec <__lo0bits>:
 80096ec:	6803      	ldr	r3, [r0, #0]
 80096ee:	f013 0207 	ands.w	r2, r3, #7
 80096f2:	4601      	mov	r1, r0
 80096f4:	d00b      	beq.n	800970e <__lo0bits+0x22>
 80096f6:	07da      	lsls	r2, r3, #31
 80096f8:	d424      	bmi.n	8009744 <__lo0bits+0x58>
 80096fa:	0798      	lsls	r0, r3, #30
 80096fc:	bf49      	itett	mi
 80096fe:	085b      	lsrmi	r3, r3, #1
 8009700:	089b      	lsrpl	r3, r3, #2
 8009702:	2001      	movmi	r0, #1
 8009704:	600b      	strmi	r3, [r1, #0]
 8009706:	bf5c      	itt	pl
 8009708:	600b      	strpl	r3, [r1, #0]
 800970a:	2002      	movpl	r0, #2
 800970c:	4770      	bx	lr
 800970e:	b298      	uxth	r0, r3
 8009710:	b9b0      	cbnz	r0, 8009740 <__lo0bits+0x54>
 8009712:	0c1b      	lsrs	r3, r3, #16
 8009714:	2010      	movs	r0, #16
 8009716:	f013 0fff 	tst.w	r3, #255	; 0xff
 800971a:	bf04      	itt	eq
 800971c:	0a1b      	lsreq	r3, r3, #8
 800971e:	3008      	addeq	r0, #8
 8009720:	071a      	lsls	r2, r3, #28
 8009722:	bf04      	itt	eq
 8009724:	091b      	lsreq	r3, r3, #4
 8009726:	3004      	addeq	r0, #4
 8009728:	079a      	lsls	r2, r3, #30
 800972a:	bf04      	itt	eq
 800972c:	089b      	lsreq	r3, r3, #2
 800972e:	3002      	addeq	r0, #2
 8009730:	07da      	lsls	r2, r3, #31
 8009732:	d403      	bmi.n	800973c <__lo0bits+0x50>
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	f100 0001 	add.w	r0, r0, #1
 800973a:	d005      	beq.n	8009748 <__lo0bits+0x5c>
 800973c:	600b      	str	r3, [r1, #0]
 800973e:	4770      	bx	lr
 8009740:	4610      	mov	r0, r2
 8009742:	e7e8      	b.n	8009716 <__lo0bits+0x2a>
 8009744:	2000      	movs	r0, #0
 8009746:	4770      	bx	lr
 8009748:	2020      	movs	r0, #32
 800974a:	4770      	bx	lr

0800974c <__i2b>:
 800974c:	b510      	push	{r4, lr}
 800974e:	460c      	mov	r4, r1
 8009750:	2101      	movs	r1, #1
 8009752:	f7ff feb5 	bl	80094c0 <_Balloc>
 8009756:	4602      	mov	r2, r0
 8009758:	b928      	cbnz	r0, 8009766 <__i2b+0x1a>
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <__i2b+0x24>)
 800975c:	4805      	ldr	r0, [pc, #20]	; (8009774 <__i2b+0x28>)
 800975e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009762:	f001 f9c9 	bl	800aaf8 <__assert_func>
 8009766:	2301      	movs	r3, #1
 8009768:	6144      	str	r4, [r0, #20]
 800976a:	6103      	str	r3, [r0, #16]
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop
 8009770:	0800be54 	.word	0x0800be54
 8009774:	0800bee4 	.word	0x0800bee4

08009778 <__multiply>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	4614      	mov	r4, r2
 800977e:	690a      	ldr	r2, [r1, #16]
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	429a      	cmp	r2, r3
 8009784:	bfb8      	it	lt
 8009786:	460b      	movlt	r3, r1
 8009788:	460d      	mov	r5, r1
 800978a:	bfbc      	itt	lt
 800978c:	4625      	movlt	r5, r4
 800978e:	461c      	movlt	r4, r3
 8009790:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009794:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009798:	68ab      	ldr	r3, [r5, #8]
 800979a:	6869      	ldr	r1, [r5, #4]
 800979c:	eb0a 0709 	add.w	r7, sl, r9
 80097a0:	42bb      	cmp	r3, r7
 80097a2:	b085      	sub	sp, #20
 80097a4:	bfb8      	it	lt
 80097a6:	3101      	addlt	r1, #1
 80097a8:	f7ff fe8a 	bl	80094c0 <_Balloc>
 80097ac:	b930      	cbnz	r0, 80097bc <__multiply+0x44>
 80097ae:	4602      	mov	r2, r0
 80097b0:	4b42      	ldr	r3, [pc, #264]	; (80098bc <__multiply+0x144>)
 80097b2:	4843      	ldr	r0, [pc, #268]	; (80098c0 <__multiply+0x148>)
 80097b4:	f240 115d 	movw	r1, #349	; 0x15d
 80097b8:	f001 f99e 	bl	800aaf8 <__assert_func>
 80097bc:	f100 0614 	add.w	r6, r0, #20
 80097c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097c4:	4633      	mov	r3, r6
 80097c6:	2200      	movs	r2, #0
 80097c8:	4543      	cmp	r3, r8
 80097ca:	d31e      	bcc.n	800980a <__multiply+0x92>
 80097cc:	f105 0c14 	add.w	ip, r5, #20
 80097d0:	f104 0314 	add.w	r3, r4, #20
 80097d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097dc:	9202      	str	r2, [sp, #8]
 80097de:	ebac 0205 	sub.w	r2, ip, r5
 80097e2:	3a15      	subs	r2, #21
 80097e4:	f022 0203 	bic.w	r2, r2, #3
 80097e8:	3204      	adds	r2, #4
 80097ea:	f105 0115 	add.w	r1, r5, #21
 80097ee:	458c      	cmp	ip, r1
 80097f0:	bf38      	it	cc
 80097f2:	2204      	movcc	r2, #4
 80097f4:	9201      	str	r2, [sp, #4]
 80097f6:	9a02      	ldr	r2, [sp, #8]
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d808      	bhi.n	8009810 <__multiply+0x98>
 80097fe:	2f00      	cmp	r7, #0
 8009800:	dc55      	bgt.n	80098ae <__multiply+0x136>
 8009802:	6107      	str	r7, [r0, #16]
 8009804:	b005      	add	sp, #20
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	f843 2b04 	str.w	r2, [r3], #4
 800980e:	e7db      	b.n	80097c8 <__multiply+0x50>
 8009810:	f8b3 a000 	ldrh.w	sl, [r3]
 8009814:	f1ba 0f00 	cmp.w	sl, #0
 8009818:	d020      	beq.n	800985c <__multiply+0xe4>
 800981a:	f105 0e14 	add.w	lr, r5, #20
 800981e:	46b1      	mov	r9, r6
 8009820:	2200      	movs	r2, #0
 8009822:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009826:	f8d9 b000 	ldr.w	fp, [r9]
 800982a:	b2a1      	uxth	r1, r4
 800982c:	fa1f fb8b 	uxth.w	fp, fp
 8009830:	fb0a b101 	mla	r1, sl, r1, fp
 8009834:	4411      	add	r1, r2
 8009836:	f8d9 2000 	ldr.w	r2, [r9]
 800983a:	0c24      	lsrs	r4, r4, #16
 800983c:	0c12      	lsrs	r2, r2, #16
 800983e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009842:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009846:	b289      	uxth	r1, r1
 8009848:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800984c:	45f4      	cmp	ip, lr
 800984e:	f849 1b04 	str.w	r1, [r9], #4
 8009852:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009856:	d8e4      	bhi.n	8009822 <__multiply+0xaa>
 8009858:	9901      	ldr	r1, [sp, #4]
 800985a:	5072      	str	r2, [r6, r1]
 800985c:	9a03      	ldr	r2, [sp, #12]
 800985e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009862:	3304      	adds	r3, #4
 8009864:	f1b9 0f00 	cmp.w	r9, #0
 8009868:	d01f      	beq.n	80098aa <__multiply+0x132>
 800986a:	6834      	ldr	r4, [r6, #0]
 800986c:	f105 0114 	add.w	r1, r5, #20
 8009870:	46b6      	mov	lr, r6
 8009872:	f04f 0a00 	mov.w	sl, #0
 8009876:	880a      	ldrh	r2, [r1, #0]
 8009878:	f8be b002 	ldrh.w	fp, [lr, #2]
 800987c:	fb09 b202 	mla	r2, r9, r2, fp
 8009880:	4492      	add	sl, r2
 8009882:	b2a4      	uxth	r4, r4
 8009884:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009888:	f84e 4b04 	str.w	r4, [lr], #4
 800988c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009890:	f8be 2000 	ldrh.w	r2, [lr]
 8009894:	0c24      	lsrs	r4, r4, #16
 8009896:	fb09 2404 	mla	r4, r9, r4, r2
 800989a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800989e:	458c      	cmp	ip, r1
 80098a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098a4:	d8e7      	bhi.n	8009876 <__multiply+0xfe>
 80098a6:	9a01      	ldr	r2, [sp, #4]
 80098a8:	50b4      	str	r4, [r6, r2]
 80098aa:	3604      	adds	r6, #4
 80098ac:	e7a3      	b.n	80097f6 <__multiply+0x7e>
 80098ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1a5      	bne.n	8009802 <__multiply+0x8a>
 80098b6:	3f01      	subs	r7, #1
 80098b8:	e7a1      	b.n	80097fe <__multiply+0x86>
 80098ba:	bf00      	nop
 80098bc:	0800be54 	.word	0x0800be54
 80098c0:	0800bee4 	.word	0x0800bee4

080098c4 <__pow5mult>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	4615      	mov	r5, r2
 80098ca:	f012 0203 	ands.w	r2, r2, #3
 80098ce:	4606      	mov	r6, r0
 80098d0:	460f      	mov	r7, r1
 80098d2:	d007      	beq.n	80098e4 <__pow5mult+0x20>
 80098d4:	4c25      	ldr	r4, [pc, #148]	; (800996c <__pow5mult+0xa8>)
 80098d6:	3a01      	subs	r2, #1
 80098d8:	2300      	movs	r3, #0
 80098da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098de:	f7ff fe51 	bl	8009584 <__multadd>
 80098e2:	4607      	mov	r7, r0
 80098e4:	10ad      	asrs	r5, r5, #2
 80098e6:	d03d      	beq.n	8009964 <__pow5mult+0xa0>
 80098e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098ea:	b97c      	cbnz	r4, 800990c <__pow5mult+0x48>
 80098ec:	2010      	movs	r0, #16
 80098ee:	f7ff fdbf 	bl	8009470 <malloc>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6270      	str	r0, [r6, #36]	; 0x24
 80098f6:	b928      	cbnz	r0, 8009904 <__pow5mult+0x40>
 80098f8:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <__pow5mult+0xac>)
 80098fa:	481e      	ldr	r0, [pc, #120]	; (8009974 <__pow5mult+0xb0>)
 80098fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009900:	f001 f8fa 	bl	800aaf8 <__assert_func>
 8009904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009908:	6004      	str	r4, [r0, #0]
 800990a:	60c4      	str	r4, [r0, #12]
 800990c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009914:	b94c      	cbnz	r4, 800992a <__pow5mult+0x66>
 8009916:	f240 2171 	movw	r1, #625	; 0x271
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ff16 	bl	800974c <__i2b>
 8009920:	2300      	movs	r3, #0
 8009922:	f8c8 0008 	str.w	r0, [r8, #8]
 8009926:	4604      	mov	r4, r0
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	f04f 0900 	mov.w	r9, #0
 800992e:	07eb      	lsls	r3, r5, #31
 8009930:	d50a      	bpl.n	8009948 <__pow5mult+0x84>
 8009932:	4639      	mov	r1, r7
 8009934:	4622      	mov	r2, r4
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ff1e 	bl	8009778 <__multiply>
 800993c:	4639      	mov	r1, r7
 800993e:	4680      	mov	r8, r0
 8009940:	4630      	mov	r0, r6
 8009942:	f7ff fdfd 	bl	8009540 <_Bfree>
 8009946:	4647      	mov	r7, r8
 8009948:	106d      	asrs	r5, r5, #1
 800994a:	d00b      	beq.n	8009964 <__pow5mult+0xa0>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	b938      	cbnz	r0, 8009960 <__pow5mult+0x9c>
 8009950:	4622      	mov	r2, r4
 8009952:	4621      	mov	r1, r4
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff ff0f 	bl	8009778 <__multiply>
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	f8c0 9000 	str.w	r9, [r0]
 8009960:	4604      	mov	r4, r0
 8009962:	e7e4      	b.n	800992e <__pow5mult+0x6a>
 8009964:	4638      	mov	r0, r7
 8009966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996a:	bf00      	nop
 800996c:	0800c038 	.word	0x0800c038
 8009970:	0800bdde 	.word	0x0800bdde
 8009974:	0800bee4 	.word	0x0800bee4

08009978 <__lshift>:
 8009978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800997c:	460c      	mov	r4, r1
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	4607      	mov	r7, r0
 800998a:	4691      	mov	r9, r2
 800998c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009990:	f108 0601 	add.w	r6, r8, #1
 8009994:	42b3      	cmp	r3, r6
 8009996:	db0b      	blt.n	80099b0 <__lshift+0x38>
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff fd91 	bl	80094c0 <_Balloc>
 800999e:	4605      	mov	r5, r0
 80099a0:	b948      	cbnz	r0, 80099b6 <__lshift+0x3e>
 80099a2:	4602      	mov	r2, r0
 80099a4:	4b28      	ldr	r3, [pc, #160]	; (8009a48 <__lshift+0xd0>)
 80099a6:	4829      	ldr	r0, [pc, #164]	; (8009a4c <__lshift+0xd4>)
 80099a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099ac:	f001 f8a4 	bl	800aaf8 <__assert_func>
 80099b0:	3101      	adds	r1, #1
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	e7ee      	b.n	8009994 <__lshift+0x1c>
 80099b6:	2300      	movs	r3, #0
 80099b8:	f100 0114 	add.w	r1, r0, #20
 80099bc:	f100 0210 	add.w	r2, r0, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	4553      	cmp	r3, sl
 80099c4:	db33      	blt.n	8009a2e <__lshift+0xb6>
 80099c6:	6920      	ldr	r0, [r4, #16]
 80099c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099cc:	f104 0314 	add.w	r3, r4, #20
 80099d0:	f019 091f 	ands.w	r9, r9, #31
 80099d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099dc:	d02b      	beq.n	8009a36 <__lshift+0xbe>
 80099de:	f1c9 0e20 	rsb	lr, r9, #32
 80099e2:	468a      	mov	sl, r1
 80099e4:	2200      	movs	r2, #0
 80099e6:	6818      	ldr	r0, [r3, #0]
 80099e8:	fa00 f009 	lsl.w	r0, r0, r9
 80099ec:	4302      	orrs	r2, r0
 80099ee:	f84a 2b04 	str.w	r2, [sl], #4
 80099f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f6:	459c      	cmp	ip, r3
 80099f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099fc:	d8f3      	bhi.n	80099e6 <__lshift+0x6e>
 80099fe:	ebac 0304 	sub.w	r3, ip, r4
 8009a02:	3b15      	subs	r3, #21
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	3304      	adds	r3, #4
 8009a0a:	f104 0015 	add.w	r0, r4, #21
 8009a0e:	4584      	cmp	ip, r0
 8009a10:	bf38      	it	cc
 8009a12:	2304      	movcc	r3, #4
 8009a14:	50ca      	str	r2, [r1, r3]
 8009a16:	b10a      	cbz	r2, 8009a1c <__lshift+0xa4>
 8009a18:	f108 0602 	add.w	r6, r8, #2
 8009a1c:	3e01      	subs	r6, #1
 8009a1e:	4638      	mov	r0, r7
 8009a20:	612e      	str	r6, [r5, #16]
 8009a22:	4621      	mov	r1, r4
 8009a24:	f7ff fd8c 	bl	8009540 <_Bfree>
 8009a28:	4628      	mov	r0, r5
 8009a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a32:	3301      	adds	r3, #1
 8009a34:	e7c5      	b.n	80099c2 <__lshift+0x4a>
 8009a36:	3904      	subs	r1, #4
 8009a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a40:	459c      	cmp	ip, r3
 8009a42:	d8f9      	bhi.n	8009a38 <__lshift+0xc0>
 8009a44:	e7ea      	b.n	8009a1c <__lshift+0xa4>
 8009a46:	bf00      	nop
 8009a48:	0800be54 	.word	0x0800be54
 8009a4c:	0800bee4 	.word	0x0800bee4

08009a50 <__mcmp>:
 8009a50:	b530      	push	{r4, r5, lr}
 8009a52:	6902      	ldr	r2, [r0, #16]
 8009a54:	690c      	ldr	r4, [r1, #16]
 8009a56:	1b12      	subs	r2, r2, r4
 8009a58:	d10e      	bne.n	8009a78 <__mcmp+0x28>
 8009a5a:	f100 0314 	add.w	r3, r0, #20
 8009a5e:	3114      	adds	r1, #20
 8009a60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a70:	42a5      	cmp	r5, r4
 8009a72:	d003      	beq.n	8009a7c <__mcmp+0x2c>
 8009a74:	d305      	bcc.n	8009a82 <__mcmp+0x32>
 8009a76:	2201      	movs	r2, #1
 8009a78:	4610      	mov	r0, r2
 8009a7a:	bd30      	pop	{r4, r5, pc}
 8009a7c:	4283      	cmp	r3, r0
 8009a7e:	d3f3      	bcc.n	8009a68 <__mcmp+0x18>
 8009a80:	e7fa      	b.n	8009a78 <__mcmp+0x28>
 8009a82:	f04f 32ff 	mov.w	r2, #4294967295
 8009a86:	e7f7      	b.n	8009a78 <__mcmp+0x28>

08009a88 <__mdiff>:
 8009a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	4606      	mov	r6, r0
 8009a90:	4611      	mov	r1, r2
 8009a92:	4620      	mov	r0, r4
 8009a94:	4617      	mov	r7, r2
 8009a96:	f7ff ffdb 	bl	8009a50 <__mcmp>
 8009a9a:	1e05      	subs	r5, r0, #0
 8009a9c:	d110      	bne.n	8009ac0 <__mdiff+0x38>
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff fd0d 	bl	80094c0 <_Balloc>
 8009aa6:	b930      	cbnz	r0, 8009ab6 <__mdiff+0x2e>
 8009aa8:	4b39      	ldr	r3, [pc, #228]	; (8009b90 <__mdiff+0x108>)
 8009aaa:	4602      	mov	r2, r0
 8009aac:	f240 2132 	movw	r1, #562	; 0x232
 8009ab0:	4838      	ldr	r0, [pc, #224]	; (8009b94 <__mdiff+0x10c>)
 8009ab2:	f001 f821 	bl	800aaf8 <__assert_func>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	bfa4      	itt	ge
 8009ac2:	463b      	movge	r3, r7
 8009ac4:	4627      	movge	r7, r4
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	bfa6      	itte	ge
 8009acc:	461c      	movge	r4, r3
 8009ace:	2500      	movge	r5, #0
 8009ad0:	2501      	movlt	r5, #1
 8009ad2:	f7ff fcf5 	bl	80094c0 <_Balloc>
 8009ad6:	b920      	cbnz	r0, 8009ae2 <__mdiff+0x5a>
 8009ad8:	4b2d      	ldr	r3, [pc, #180]	; (8009b90 <__mdiff+0x108>)
 8009ada:	4602      	mov	r2, r0
 8009adc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ae0:	e7e6      	b.n	8009ab0 <__mdiff+0x28>
 8009ae2:	693e      	ldr	r6, [r7, #16]
 8009ae4:	60c5      	str	r5, [r0, #12]
 8009ae6:	6925      	ldr	r5, [r4, #16]
 8009ae8:	f107 0114 	add.w	r1, r7, #20
 8009aec:	f104 0914 	add.w	r9, r4, #20
 8009af0:	f100 0e14 	add.w	lr, r0, #20
 8009af4:	f107 0210 	add.w	r2, r7, #16
 8009af8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009afc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009b00:	46f2      	mov	sl, lr
 8009b02:	2700      	movs	r7, #0
 8009b04:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b0c:	fa1f f883 	uxth.w	r8, r3
 8009b10:	fa17 f78b 	uxtah	r7, r7, fp
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	eba7 0808 	sub.w	r8, r7, r8
 8009b1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b22:	fa1f f888 	uxth.w	r8, r8
 8009b26:	141f      	asrs	r7, r3, #16
 8009b28:	454d      	cmp	r5, r9
 8009b2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b2e:	f84a 3b04 	str.w	r3, [sl], #4
 8009b32:	d8e7      	bhi.n	8009b04 <__mdiff+0x7c>
 8009b34:	1b2b      	subs	r3, r5, r4
 8009b36:	3b15      	subs	r3, #21
 8009b38:	f023 0303 	bic.w	r3, r3, #3
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	3415      	adds	r4, #21
 8009b40:	42a5      	cmp	r5, r4
 8009b42:	bf38      	it	cc
 8009b44:	2304      	movcc	r3, #4
 8009b46:	4419      	add	r1, r3
 8009b48:	4473      	add	r3, lr
 8009b4a:	469e      	mov	lr, r3
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	4565      	cmp	r5, ip
 8009b50:	d30e      	bcc.n	8009b70 <__mdiff+0xe8>
 8009b52:	f10c 0203 	add.w	r2, ip, #3
 8009b56:	1a52      	subs	r2, r2, r1
 8009b58:	f022 0203 	bic.w	r2, r2, #3
 8009b5c:	3903      	subs	r1, #3
 8009b5e:	458c      	cmp	ip, r1
 8009b60:	bf38      	it	cc
 8009b62:	2200      	movcc	r2, #0
 8009b64:	441a      	add	r2, r3
 8009b66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b6a:	b17b      	cbz	r3, 8009b8c <__mdiff+0x104>
 8009b6c:	6106      	str	r6, [r0, #16]
 8009b6e:	e7a5      	b.n	8009abc <__mdiff+0x34>
 8009b70:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b74:	fa17 f488 	uxtah	r4, r7, r8
 8009b78:	1422      	asrs	r2, r4, #16
 8009b7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009b7e:	b2a4      	uxth	r4, r4
 8009b80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b84:	f84e 4b04 	str.w	r4, [lr], #4
 8009b88:	1417      	asrs	r7, r2, #16
 8009b8a:	e7e0      	b.n	8009b4e <__mdiff+0xc6>
 8009b8c:	3e01      	subs	r6, #1
 8009b8e:	e7ea      	b.n	8009b66 <__mdiff+0xde>
 8009b90:	0800be54 	.word	0x0800be54
 8009b94:	0800bee4 	.word	0x0800bee4

08009b98 <__ulp>:
 8009b98:	b082      	sub	sp, #8
 8009b9a:	ed8d 0b00 	vstr	d0, [sp]
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	4912      	ldr	r1, [pc, #72]	; (8009bec <__ulp+0x54>)
 8009ba2:	4019      	ands	r1, r3
 8009ba4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	dd05      	ble.n	8009bb8 <__ulp+0x20>
 8009bac:	2200      	movs	r2, #0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	ec43 2b10 	vmov	d0, r2, r3
 8009bb4:	b002      	add	sp, #8
 8009bb6:	4770      	bx	lr
 8009bb8:	4249      	negs	r1, r1
 8009bba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009bbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009bc2:	f04f 0200 	mov.w	r2, #0
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	da04      	bge.n	8009bd6 <__ulp+0x3e>
 8009bcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009bd0:	fa41 f300 	asr.w	r3, r1, r0
 8009bd4:	e7ec      	b.n	8009bb0 <__ulp+0x18>
 8009bd6:	f1a0 0114 	sub.w	r1, r0, #20
 8009bda:	291e      	cmp	r1, #30
 8009bdc:	bfda      	itte	le
 8009bde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009be2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009be6:	2101      	movgt	r1, #1
 8009be8:	460a      	mov	r2, r1
 8009bea:	e7e1      	b.n	8009bb0 <__ulp+0x18>
 8009bec:	7ff00000 	.word	0x7ff00000

08009bf0 <__b2d>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	6905      	ldr	r5, [r0, #16]
 8009bf4:	f100 0714 	add.w	r7, r0, #20
 8009bf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009bfc:	1f2e      	subs	r6, r5, #4
 8009bfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff fd52 	bl	80096ac <__hi0bits>
 8009c08:	f1c0 0320 	rsb	r3, r0, #32
 8009c0c:	280a      	cmp	r0, #10
 8009c0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c8c <__b2d+0x9c>
 8009c12:	600b      	str	r3, [r1, #0]
 8009c14:	dc14      	bgt.n	8009c40 <__b2d+0x50>
 8009c16:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009c1e:	42b7      	cmp	r7, r6
 8009c20:	ea41 030c 	orr.w	r3, r1, ip
 8009c24:	bf34      	ite	cc
 8009c26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c2a:	2100      	movcs	r1, #0
 8009c2c:	3015      	adds	r0, #21
 8009c2e:	fa04 f000 	lsl.w	r0, r4, r0
 8009c32:	fa21 f10e 	lsr.w	r1, r1, lr
 8009c36:	ea40 0201 	orr.w	r2, r0, r1
 8009c3a:	ec43 2b10 	vmov	d0, r2, r3
 8009c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c40:	42b7      	cmp	r7, r6
 8009c42:	bf3a      	itte	cc
 8009c44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c48:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c4c:	2100      	movcs	r1, #0
 8009c4e:	380b      	subs	r0, #11
 8009c50:	d017      	beq.n	8009c82 <__b2d+0x92>
 8009c52:	f1c0 0c20 	rsb	ip, r0, #32
 8009c56:	fa04 f500 	lsl.w	r5, r4, r0
 8009c5a:	42be      	cmp	r6, r7
 8009c5c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c60:	ea45 0504 	orr.w	r5, r5, r4
 8009c64:	bf8c      	ite	hi
 8009c66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c6a:	2400      	movls	r4, #0
 8009c6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c70:	fa01 f000 	lsl.w	r0, r1, r0
 8009c74:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c7c:	ea40 0204 	orr.w	r2, r0, r4
 8009c80:	e7db      	b.n	8009c3a <__b2d+0x4a>
 8009c82:	ea44 030c 	orr.w	r3, r4, ip
 8009c86:	460a      	mov	r2, r1
 8009c88:	e7d7      	b.n	8009c3a <__b2d+0x4a>
 8009c8a:	bf00      	nop
 8009c8c:	3ff00000 	.word	0x3ff00000

08009c90 <__d2b>:
 8009c90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	4689      	mov	r9, r1
 8009c96:	2101      	movs	r1, #1
 8009c98:	ec57 6b10 	vmov	r6, r7, d0
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	f7ff fc0f 	bl	80094c0 <_Balloc>
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	b930      	cbnz	r0, 8009cb4 <__d2b+0x24>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <__d2b+0xb0>)
 8009caa:	4826      	ldr	r0, [pc, #152]	; (8009d44 <__d2b+0xb4>)
 8009cac:	f240 310a 	movw	r1, #778	; 0x30a
 8009cb0:	f000 ff22 	bl	800aaf8 <__assert_func>
 8009cb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cbc:	bb35      	cbnz	r5, 8009d0c <__d2b+0x7c>
 8009cbe:	2e00      	cmp	r6, #0
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	d028      	beq.n	8009d16 <__d2b+0x86>
 8009cc4:	4668      	mov	r0, sp
 8009cc6:	9600      	str	r6, [sp, #0]
 8009cc8:	f7ff fd10 	bl	80096ec <__lo0bits>
 8009ccc:	9900      	ldr	r1, [sp, #0]
 8009cce:	b300      	cbz	r0, 8009d12 <__d2b+0x82>
 8009cd0:	9a01      	ldr	r2, [sp, #4]
 8009cd2:	f1c0 0320 	rsb	r3, r0, #32
 8009cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	40c2      	lsrs	r2, r0
 8009cde:	6163      	str	r3, [r4, #20]
 8009ce0:	9201      	str	r2, [sp, #4]
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	61a3      	str	r3, [r4, #24]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bf14      	ite	ne
 8009cea:	2202      	movne	r2, #2
 8009cec:	2201      	moveq	r2, #1
 8009cee:	6122      	str	r2, [r4, #16]
 8009cf0:	b1d5      	cbz	r5, 8009d28 <__d2b+0x98>
 8009cf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cf6:	4405      	add	r5, r0
 8009cf8:	f8c9 5000 	str.w	r5, [r9]
 8009cfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d00:	f8c8 0000 	str.w	r0, [r8]
 8009d04:	4620      	mov	r0, r4
 8009d06:	b003      	add	sp, #12
 8009d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d10:	e7d5      	b.n	8009cbe <__d2b+0x2e>
 8009d12:	6161      	str	r1, [r4, #20]
 8009d14:	e7e5      	b.n	8009ce2 <__d2b+0x52>
 8009d16:	a801      	add	r0, sp, #4
 8009d18:	f7ff fce8 	bl	80096ec <__lo0bits>
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	6163      	str	r3, [r4, #20]
 8009d20:	2201      	movs	r2, #1
 8009d22:	6122      	str	r2, [r4, #16]
 8009d24:	3020      	adds	r0, #32
 8009d26:	e7e3      	b.n	8009cf0 <__d2b+0x60>
 8009d28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d30:	f8c9 0000 	str.w	r0, [r9]
 8009d34:	6918      	ldr	r0, [r3, #16]
 8009d36:	f7ff fcb9 	bl	80096ac <__hi0bits>
 8009d3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d3e:	e7df      	b.n	8009d00 <__d2b+0x70>
 8009d40:	0800be54 	.word	0x0800be54
 8009d44:	0800bee4 	.word	0x0800bee4

08009d48 <__ratio>:
 8009d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	468a      	mov	sl, r1
 8009d4e:	4669      	mov	r1, sp
 8009d50:	4683      	mov	fp, r0
 8009d52:	f7ff ff4d 	bl	8009bf0 <__b2d>
 8009d56:	a901      	add	r1, sp, #4
 8009d58:	4650      	mov	r0, sl
 8009d5a:	ec59 8b10 	vmov	r8, r9, d0
 8009d5e:	ee10 6a10 	vmov	r6, s0
 8009d62:	f7ff ff45 	bl	8009bf0 <__b2d>
 8009d66:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009d6a:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009d6e:	eba3 0c02 	sub.w	ip, r3, r2
 8009d72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d7c:	ec55 4b10 	vmov	r4, r5, d0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	ee10 0a10 	vmov	r0, s0
 8009d86:	bfce      	itee	gt
 8009d88:	464a      	movgt	r2, r9
 8009d8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d8e:	462a      	movle	r2, r5
 8009d90:	464f      	mov	r7, r9
 8009d92:	4629      	mov	r1, r5
 8009d94:	bfcc      	ite	gt
 8009d96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d9a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009d9e:	ec47 6b17 	vmov	d7, r6, r7
 8009da2:	ec41 0b16 	vmov	d6, r0, r1
 8009da6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009daa:	b003      	add	sp, #12
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009db0 <__copybits>:
 8009db0:	3901      	subs	r1, #1
 8009db2:	b570      	push	{r4, r5, r6, lr}
 8009db4:	1149      	asrs	r1, r1, #5
 8009db6:	6914      	ldr	r4, [r2, #16]
 8009db8:	3101      	adds	r1, #1
 8009dba:	f102 0314 	add.w	r3, r2, #20
 8009dbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009dc6:	1f05      	subs	r5, r0, #4
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d30c      	bcc.n	8009de6 <__copybits+0x36>
 8009dcc:	1aa3      	subs	r3, r4, r2
 8009dce:	3b11      	subs	r3, #17
 8009dd0:	f023 0303 	bic.w	r3, r3, #3
 8009dd4:	3211      	adds	r2, #17
 8009dd6:	42a2      	cmp	r2, r4
 8009dd8:	bf88      	it	hi
 8009dda:	2300      	movhi	r3, #0
 8009ddc:	4418      	add	r0, r3
 8009dde:	2300      	movs	r3, #0
 8009de0:	4288      	cmp	r0, r1
 8009de2:	d305      	bcc.n	8009df0 <__copybits+0x40>
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dea:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dee:	e7eb      	b.n	8009dc8 <__copybits+0x18>
 8009df0:	f840 3b04 	str.w	r3, [r0], #4
 8009df4:	e7f4      	b.n	8009de0 <__copybits+0x30>

08009df6 <__any_on>:
 8009df6:	f100 0214 	add.w	r2, r0, #20
 8009dfa:	6900      	ldr	r0, [r0, #16]
 8009dfc:	114b      	asrs	r3, r1, #5
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	b510      	push	{r4, lr}
 8009e02:	db11      	blt.n	8009e28 <__any_on+0x32>
 8009e04:	dd0a      	ble.n	8009e1c <__any_on+0x26>
 8009e06:	f011 011f 	ands.w	r1, r1, #31
 8009e0a:	d007      	beq.n	8009e1c <__any_on+0x26>
 8009e0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e10:	fa24 f001 	lsr.w	r0, r4, r1
 8009e14:	fa00 f101 	lsl.w	r1, r0, r1
 8009e18:	428c      	cmp	r4, r1
 8009e1a:	d10b      	bne.n	8009e34 <__any_on+0x3e>
 8009e1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d803      	bhi.n	8009e2c <__any_on+0x36>
 8009e24:	2000      	movs	r0, #0
 8009e26:	bd10      	pop	{r4, pc}
 8009e28:	4603      	mov	r3, r0
 8009e2a:	e7f7      	b.n	8009e1c <__any_on+0x26>
 8009e2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d0f5      	beq.n	8009e20 <__any_on+0x2a>
 8009e34:	2001      	movs	r0, #1
 8009e36:	e7f6      	b.n	8009e26 <__any_on+0x30>

08009e38 <_calloc_r>:
 8009e38:	b513      	push	{r0, r1, r4, lr}
 8009e3a:	434a      	muls	r2, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	f000 f85a 	bl	8009ef8 <_malloc_r>
 8009e44:	4604      	mov	r4, r0
 8009e46:	b118      	cbz	r0, 8009e50 <_calloc_r+0x18>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	f7fc fbd2 	bl	80065f4 <memset>
 8009e50:	4620      	mov	r0, r4
 8009e52:	b002      	add	sp, #8
 8009e54:	bd10      	pop	{r4, pc}
	...

08009e58 <_free_r>:
 8009e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e5a:	2900      	cmp	r1, #0
 8009e5c:	d048      	beq.n	8009ef0 <_free_r+0x98>
 8009e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e62:	9001      	str	r0, [sp, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f1a1 0404 	sub.w	r4, r1, #4
 8009e6a:	bfb8      	it	lt
 8009e6c:	18e4      	addlt	r4, r4, r3
 8009e6e:	f001 f847 	bl	800af00 <__malloc_lock>
 8009e72:	4a20      	ldr	r2, [pc, #128]	; (8009ef4 <_free_r+0x9c>)
 8009e74:	9801      	ldr	r0, [sp, #4]
 8009e76:	6813      	ldr	r3, [r2, #0]
 8009e78:	4615      	mov	r5, r2
 8009e7a:	b933      	cbnz	r3, 8009e8a <_free_r+0x32>
 8009e7c:	6063      	str	r3, [r4, #4]
 8009e7e:	6014      	str	r4, [r2, #0]
 8009e80:	b003      	add	sp, #12
 8009e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e86:	f001 b841 	b.w	800af0c <__malloc_unlock>
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	d90b      	bls.n	8009ea6 <_free_r+0x4e>
 8009e8e:	6821      	ldr	r1, [r4, #0]
 8009e90:	1862      	adds	r2, r4, r1
 8009e92:	4293      	cmp	r3, r2
 8009e94:	bf04      	itt	eq
 8009e96:	681a      	ldreq	r2, [r3, #0]
 8009e98:	685b      	ldreq	r3, [r3, #4]
 8009e9a:	6063      	str	r3, [r4, #4]
 8009e9c:	bf04      	itt	eq
 8009e9e:	1852      	addeq	r2, r2, r1
 8009ea0:	6022      	streq	r2, [r4, #0]
 8009ea2:	602c      	str	r4, [r5, #0]
 8009ea4:	e7ec      	b.n	8009e80 <_free_r+0x28>
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	b10b      	cbz	r3, 8009eb0 <_free_r+0x58>
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d9fa      	bls.n	8009ea6 <_free_r+0x4e>
 8009eb0:	6811      	ldr	r1, [r2, #0]
 8009eb2:	1855      	adds	r5, r2, r1
 8009eb4:	42a5      	cmp	r5, r4
 8009eb6:	d10b      	bne.n	8009ed0 <_free_r+0x78>
 8009eb8:	6824      	ldr	r4, [r4, #0]
 8009eba:	4421      	add	r1, r4
 8009ebc:	1854      	adds	r4, r2, r1
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	6011      	str	r1, [r2, #0]
 8009ec2:	d1dd      	bne.n	8009e80 <_free_r+0x28>
 8009ec4:	681c      	ldr	r4, [r3, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	6053      	str	r3, [r2, #4]
 8009eca:	4421      	add	r1, r4
 8009ecc:	6011      	str	r1, [r2, #0]
 8009ece:	e7d7      	b.n	8009e80 <_free_r+0x28>
 8009ed0:	d902      	bls.n	8009ed8 <_free_r+0x80>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	e7d3      	b.n	8009e80 <_free_r+0x28>
 8009ed8:	6825      	ldr	r5, [r4, #0]
 8009eda:	1961      	adds	r1, r4, r5
 8009edc:	428b      	cmp	r3, r1
 8009ede:	bf04      	itt	eq
 8009ee0:	6819      	ldreq	r1, [r3, #0]
 8009ee2:	685b      	ldreq	r3, [r3, #4]
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	bf04      	itt	eq
 8009ee8:	1949      	addeq	r1, r1, r5
 8009eea:	6021      	streq	r1, [r4, #0]
 8009eec:	6054      	str	r4, [r2, #4]
 8009eee:	e7c7      	b.n	8009e80 <_free_r+0x28>
 8009ef0:	b003      	add	sp, #12
 8009ef2:	bd30      	pop	{r4, r5, pc}
 8009ef4:	2000025c 	.word	0x2000025c

08009ef8 <_malloc_r>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	1ccd      	adds	r5, r1, #3
 8009efc:	f025 0503 	bic.w	r5, r5, #3
 8009f00:	3508      	adds	r5, #8
 8009f02:	2d0c      	cmp	r5, #12
 8009f04:	bf38      	it	cc
 8009f06:	250c      	movcc	r5, #12
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	db01      	blt.n	8009f12 <_malloc_r+0x1a>
 8009f0e:	42a9      	cmp	r1, r5
 8009f10:	d903      	bls.n	8009f1a <_malloc_r+0x22>
 8009f12:	230c      	movs	r3, #12
 8009f14:	6033      	str	r3, [r6, #0]
 8009f16:	2000      	movs	r0, #0
 8009f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1a:	f000 fff1 	bl	800af00 <__malloc_lock>
 8009f1e:	4921      	ldr	r1, [pc, #132]	; (8009fa4 <_malloc_r+0xac>)
 8009f20:	680a      	ldr	r2, [r1, #0]
 8009f22:	4614      	mov	r4, r2
 8009f24:	b99c      	cbnz	r4, 8009f4e <_malloc_r+0x56>
 8009f26:	4f20      	ldr	r7, [pc, #128]	; (8009fa8 <_malloc_r+0xb0>)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	b923      	cbnz	r3, 8009f36 <_malloc_r+0x3e>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 fcd2 	bl	800a8d8 <_sbrk_r>
 8009f34:	6038      	str	r0, [r7, #0]
 8009f36:	4629      	mov	r1, r5
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 fccd 	bl	800a8d8 <_sbrk_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d123      	bne.n	8009f8a <_malloc_r+0x92>
 8009f42:	230c      	movs	r3, #12
 8009f44:	6033      	str	r3, [r6, #0]
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 ffe0 	bl	800af0c <__malloc_unlock>
 8009f4c:	e7e3      	b.n	8009f16 <_malloc_r+0x1e>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	1b5b      	subs	r3, r3, r5
 8009f52:	d417      	bmi.n	8009f84 <_malloc_r+0x8c>
 8009f54:	2b0b      	cmp	r3, #11
 8009f56:	d903      	bls.n	8009f60 <_malloc_r+0x68>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	441c      	add	r4, r3
 8009f5c:	6025      	str	r5, [r4, #0]
 8009f5e:	e004      	b.n	8009f6a <_malloc_r+0x72>
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	42a2      	cmp	r2, r4
 8009f64:	bf0c      	ite	eq
 8009f66:	600b      	streq	r3, [r1, #0]
 8009f68:	6053      	strne	r3, [r2, #4]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 ffce 	bl	800af0c <__malloc_unlock>
 8009f70:	f104 000b 	add.w	r0, r4, #11
 8009f74:	1d23      	adds	r3, r4, #4
 8009f76:	f020 0007 	bic.w	r0, r0, #7
 8009f7a:	1ac2      	subs	r2, r0, r3
 8009f7c:	d0cc      	beq.n	8009f18 <_malloc_r+0x20>
 8009f7e:	1a1b      	subs	r3, r3, r0
 8009f80:	50a3      	str	r3, [r4, r2]
 8009f82:	e7c9      	b.n	8009f18 <_malloc_r+0x20>
 8009f84:	4622      	mov	r2, r4
 8009f86:	6864      	ldr	r4, [r4, #4]
 8009f88:	e7cc      	b.n	8009f24 <_malloc_r+0x2c>
 8009f8a:	1cc4      	adds	r4, r0, #3
 8009f8c:	f024 0403 	bic.w	r4, r4, #3
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d0e3      	beq.n	8009f5c <_malloc_r+0x64>
 8009f94:	1a21      	subs	r1, r4, r0
 8009f96:	4630      	mov	r0, r6
 8009f98:	f000 fc9e 	bl	800a8d8 <_sbrk_r>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d1dd      	bne.n	8009f5c <_malloc_r+0x64>
 8009fa0:	e7cf      	b.n	8009f42 <_malloc_r+0x4a>
 8009fa2:	bf00      	nop
 8009fa4:	2000025c 	.word	0x2000025c
 8009fa8:	20000260 	.word	0x20000260

08009fac <__ssputs_r>:
 8009fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	688e      	ldr	r6, [r1, #8]
 8009fb2:	429e      	cmp	r6, r3
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	4690      	mov	r8, r2
 8009fba:	461f      	mov	r7, r3
 8009fbc:	d838      	bhi.n	800a030 <__ssputs_r+0x84>
 8009fbe:	898a      	ldrh	r2, [r1, #12]
 8009fc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fc4:	d032      	beq.n	800a02c <__ssputs_r+0x80>
 8009fc6:	6825      	ldr	r5, [r4, #0]
 8009fc8:	6909      	ldr	r1, [r1, #16]
 8009fca:	eba5 0901 	sub.w	r9, r5, r1
 8009fce:	6965      	ldr	r5, [r4, #20]
 8009fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd8:	3301      	adds	r3, #1
 8009fda:	444b      	add	r3, r9
 8009fdc:	106d      	asrs	r5, r5, #1
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	bf38      	it	cc
 8009fe2:	461d      	movcc	r5, r3
 8009fe4:	0553      	lsls	r3, r2, #21
 8009fe6:	d531      	bpl.n	800a04c <__ssputs_r+0xa0>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7ff ff85 	bl	8009ef8 <_malloc_r>
 8009fee:	4606      	mov	r6, r0
 8009ff0:	b950      	cbnz	r0, 800a008 <__ssputs_r+0x5c>
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	f8ca 3000 	str.w	r3, [sl]
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	6921      	ldr	r1, [r4, #16]
 800a00a:	464a      	mov	r2, r9
 800a00c:	f7ff fa4a 	bl	80094a4 <memcpy>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	6126      	str	r6, [r4, #16]
 800a01e:	6165      	str	r5, [r4, #20]
 800a020:	444e      	add	r6, r9
 800a022:	eba5 0509 	sub.w	r5, r5, r9
 800a026:	6026      	str	r6, [r4, #0]
 800a028:	60a5      	str	r5, [r4, #8]
 800a02a:	463e      	mov	r6, r7
 800a02c:	42be      	cmp	r6, r7
 800a02e:	d900      	bls.n	800a032 <__ssputs_r+0x86>
 800a030:	463e      	mov	r6, r7
 800a032:	4632      	mov	r2, r6
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	4641      	mov	r1, r8
 800a038:	f000 ff48 	bl	800aecc <memmove>
 800a03c:	68a3      	ldr	r3, [r4, #8]
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	1b9b      	subs	r3, r3, r6
 800a042:	4432      	add	r2, r6
 800a044:	60a3      	str	r3, [r4, #8]
 800a046:	6022      	str	r2, [r4, #0]
 800a048:	2000      	movs	r0, #0
 800a04a:	e7db      	b.n	800a004 <__ssputs_r+0x58>
 800a04c:	462a      	mov	r2, r5
 800a04e:	f000 ff63 	bl	800af18 <_realloc_r>
 800a052:	4606      	mov	r6, r0
 800a054:	2800      	cmp	r0, #0
 800a056:	d1e1      	bne.n	800a01c <__ssputs_r+0x70>
 800a058:	6921      	ldr	r1, [r4, #16]
 800a05a:	4650      	mov	r0, sl
 800a05c:	f7ff fefc 	bl	8009e58 <_free_r>
 800a060:	e7c7      	b.n	8009ff2 <__ssputs_r+0x46>
	...

0800a064 <_svfiprintf_r>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	4698      	mov	r8, r3
 800a06a:	898b      	ldrh	r3, [r1, #12]
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	b09d      	sub	sp, #116	; 0x74
 800a070:	4607      	mov	r7, r0
 800a072:	460d      	mov	r5, r1
 800a074:	4614      	mov	r4, r2
 800a076:	d50e      	bpl.n	800a096 <_svfiprintf_r+0x32>
 800a078:	690b      	ldr	r3, [r1, #16]
 800a07a:	b963      	cbnz	r3, 800a096 <_svfiprintf_r+0x32>
 800a07c:	2140      	movs	r1, #64	; 0x40
 800a07e:	f7ff ff3b 	bl	8009ef8 <_malloc_r>
 800a082:	6028      	str	r0, [r5, #0]
 800a084:	6128      	str	r0, [r5, #16]
 800a086:	b920      	cbnz	r0, 800a092 <_svfiprintf_r+0x2e>
 800a088:	230c      	movs	r3, #12
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	e0d1      	b.n	800a236 <_svfiprintf_r+0x1d2>
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	616b      	str	r3, [r5, #20]
 800a096:	2300      	movs	r3, #0
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	2320      	movs	r3, #32
 800a09c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a4:	2330      	movs	r3, #48	; 0x30
 800a0a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a250 <_svfiprintf_r+0x1ec>
 800a0aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ae:	f04f 0901 	mov.w	r9, #1
 800a0b2:	4623      	mov	r3, r4
 800a0b4:	469a      	mov	sl, r3
 800a0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ba:	b10a      	cbz	r2, 800a0c0 <_svfiprintf_r+0x5c>
 800a0bc:	2a25      	cmp	r2, #37	; 0x25
 800a0be:	d1f9      	bne.n	800a0b4 <_svfiprintf_r+0x50>
 800a0c0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c4:	d00b      	beq.n	800a0de <_svfiprintf_r+0x7a>
 800a0c6:	465b      	mov	r3, fp
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f7ff ff6d 	bl	8009fac <__ssputs_r>
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	f000 80aa 	beq.w	800a22c <_svfiprintf_r+0x1c8>
 800a0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0da:	445a      	add	r2, fp
 800a0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0de:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 80a2 	beq.w	800a22c <_svfiprintf_r+0x1c8>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f2:	f10a 0a01 	add.w	sl, sl, #1
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0fe:	931a      	str	r3, [sp, #104]	; 0x68
 800a100:	4654      	mov	r4, sl
 800a102:	2205      	movs	r2, #5
 800a104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a108:	4851      	ldr	r0, [pc, #324]	; (800a250 <_svfiprintf_r+0x1ec>)
 800a10a:	f7f6 f8a1 	bl	8000250 <memchr>
 800a10e:	9a04      	ldr	r2, [sp, #16]
 800a110:	b9d8      	cbnz	r0, 800a14a <_svfiprintf_r+0xe6>
 800a112:	06d0      	lsls	r0, r2, #27
 800a114:	bf44      	itt	mi
 800a116:	2320      	movmi	r3, #32
 800a118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11c:	0711      	lsls	r1, r2, #28
 800a11e:	bf44      	itt	mi
 800a120:	232b      	movmi	r3, #43	; 0x2b
 800a122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a126:	f89a 3000 	ldrb.w	r3, [sl]
 800a12a:	2b2a      	cmp	r3, #42	; 0x2a
 800a12c:	d015      	beq.n	800a15a <_svfiprintf_r+0xf6>
 800a12e:	9a07      	ldr	r2, [sp, #28]
 800a130:	4654      	mov	r4, sl
 800a132:	2000      	movs	r0, #0
 800a134:	f04f 0c0a 	mov.w	ip, #10
 800a138:	4621      	mov	r1, r4
 800a13a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13e:	3b30      	subs	r3, #48	; 0x30
 800a140:	2b09      	cmp	r3, #9
 800a142:	d94e      	bls.n	800a1e2 <_svfiprintf_r+0x17e>
 800a144:	b1b0      	cbz	r0, 800a174 <_svfiprintf_r+0x110>
 800a146:	9207      	str	r2, [sp, #28]
 800a148:	e014      	b.n	800a174 <_svfiprintf_r+0x110>
 800a14a:	eba0 0308 	sub.w	r3, r0, r8
 800a14e:	fa09 f303 	lsl.w	r3, r9, r3
 800a152:	4313      	orrs	r3, r2
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	46a2      	mov	sl, r4
 800a158:	e7d2      	b.n	800a100 <_svfiprintf_r+0x9c>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	1d19      	adds	r1, r3, #4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	9103      	str	r1, [sp, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	bfbb      	ittet	lt
 800a166:	425b      	neglt	r3, r3
 800a168:	f042 0202 	orrlt.w	r2, r2, #2
 800a16c:	9307      	strge	r3, [sp, #28]
 800a16e:	9307      	strlt	r3, [sp, #28]
 800a170:	bfb8      	it	lt
 800a172:	9204      	strlt	r2, [sp, #16]
 800a174:	7823      	ldrb	r3, [r4, #0]
 800a176:	2b2e      	cmp	r3, #46	; 0x2e
 800a178:	d10c      	bne.n	800a194 <_svfiprintf_r+0x130>
 800a17a:	7863      	ldrb	r3, [r4, #1]
 800a17c:	2b2a      	cmp	r3, #42	; 0x2a
 800a17e:	d135      	bne.n	800a1ec <_svfiprintf_r+0x188>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	1d1a      	adds	r2, r3, #4
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	9203      	str	r2, [sp, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bfb8      	it	lt
 800a18c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a190:	3402      	adds	r4, #2
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a260 <_svfiprintf_r+0x1fc>
 800a198:	7821      	ldrb	r1, [r4, #0]
 800a19a:	2203      	movs	r2, #3
 800a19c:	4650      	mov	r0, sl
 800a19e:	f7f6 f857 	bl	8000250 <memchr>
 800a1a2:	b140      	cbz	r0, 800a1b6 <_svfiprintf_r+0x152>
 800a1a4:	2340      	movs	r3, #64	; 0x40
 800a1a6:	eba0 000a 	sub.w	r0, r0, sl
 800a1aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	4303      	orrs	r3, r0
 800a1b2:	3401      	adds	r4, #1
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ba:	4826      	ldr	r0, [pc, #152]	; (800a254 <_svfiprintf_r+0x1f0>)
 800a1bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1c0:	2206      	movs	r2, #6
 800a1c2:	f7f6 f845 	bl	8000250 <memchr>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d038      	beq.n	800a23c <_svfiprintf_r+0x1d8>
 800a1ca:	4b23      	ldr	r3, [pc, #140]	; (800a258 <_svfiprintf_r+0x1f4>)
 800a1cc:	bb1b      	cbnz	r3, 800a216 <_svfiprintf_r+0x1b2>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	3307      	adds	r3, #7
 800a1d2:	f023 0307 	bic.w	r3, r3, #7
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1dc:	4433      	add	r3, r6
 800a1de:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e0:	e767      	b.n	800a0b2 <_svfiprintf_r+0x4e>
 800a1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	e7a5      	b.n	800a138 <_svfiprintf_r+0xd4>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	3401      	adds	r4, #1
 800a1f0:	9305      	str	r3, [sp, #20]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	f04f 0c0a 	mov.w	ip, #10
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fe:	3a30      	subs	r2, #48	; 0x30
 800a200:	2a09      	cmp	r2, #9
 800a202:	d903      	bls.n	800a20c <_svfiprintf_r+0x1a8>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0c5      	beq.n	800a194 <_svfiprintf_r+0x130>
 800a208:	9105      	str	r1, [sp, #20]
 800a20a:	e7c3      	b.n	800a194 <_svfiprintf_r+0x130>
 800a20c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a210:	4604      	mov	r4, r0
 800a212:	2301      	movs	r3, #1
 800a214:	e7f0      	b.n	800a1f8 <_svfiprintf_r+0x194>
 800a216:	ab03      	add	r3, sp, #12
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	462a      	mov	r2, r5
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <_svfiprintf_r+0x1f8>)
 800a21e:	a904      	add	r1, sp, #16
 800a220:	4638      	mov	r0, r7
 800a222:	f7fc fa81 	bl	8006728 <_printf_float>
 800a226:	1c42      	adds	r2, r0, #1
 800a228:	4606      	mov	r6, r0
 800a22a:	d1d6      	bne.n	800a1da <_svfiprintf_r+0x176>
 800a22c:	89ab      	ldrh	r3, [r5, #12]
 800a22e:	065b      	lsls	r3, r3, #25
 800a230:	f53f af2c 	bmi.w	800a08c <_svfiprintf_r+0x28>
 800a234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a236:	b01d      	add	sp, #116	; 0x74
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	ab03      	add	r3, sp, #12
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	462a      	mov	r2, r5
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <_svfiprintf_r+0x1f8>)
 800a244:	a904      	add	r1, sp, #16
 800a246:	4638      	mov	r0, r7
 800a248:	f7fc fcfa 	bl	8006c40 <_printf_i>
 800a24c:	e7eb      	b.n	800a226 <_svfiprintf_r+0x1c2>
 800a24e:	bf00      	nop
 800a250:	0800c044 	.word	0x0800c044
 800a254:	0800c04e 	.word	0x0800c04e
 800a258:	08006729 	.word	0x08006729
 800a25c:	08009fad 	.word	0x08009fad
 800a260:	0800c04a 	.word	0x0800c04a

0800a264 <_sungetc_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	1c4b      	adds	r3, r1, #1
 800a268:	4614      	mov	r4, r2
 800a26a:	d103      	bne.n	800a274 <_sungetc_r+0x10>
 800a26c:	f04f 35ff 	mov.w	r5, #4294967295
 800a270:	4628      	mov	r0, r5
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	8993      	ldrh	r3, [r2, #12]
 800a276:	f023 0320 	bic.w	r3, r3, #32
 800a27a:	8193      	strh	r3, [r2, #12]
 800a27c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a27e:	6852      	ldr	r2, [r2, #4]
 800a280:	b2cd      	uxtb	r5, r1
 800a282:	b18b      	cbz	r3, 800a2a8 <_sungetc_r+0x44>
 800a284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a286:	4293      	cmp	r3, r2
 800a288:	dd08      	ble.n	800a29c <_sungetc_r+0x38>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	1e5a      	subs	r2, r3, #1
 800a28e:	6022      	str	r2, [r4, #0]
 800a290:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a294:	6863      	ldr	r3, [r4, #4]
 800a296:	3301      	adds	r3, #1
 800a298:	6063      	str	r3, [r4, #4]
 800a29a:	e7e9      	b.n	800a270 <_sungetc_r+0xc>
 800a29c:	4621      	mov	r1, r4
 800a29e:	f000 fbe3 	bl	800aa68 <__submore>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d0f1      	beq.n	800a28a <_sungetc_r+0x26>
 800a2a6:	e7e1      	b.n	800a26c <_sungetc_r+0x8>
 800a2a8:	6921      	ldr	r1, [r4, #16]
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	b151      	cbz	r1, 800a2c4 <_sungetc_r+0x60>
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	d208      	bcs.n	800a2c4 <_sungetc_r+0x60>
 800a2b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a2b6:	42a9      	cmp	r1, r5
 800a2b8:	d104      	bne.n	800a2c4 <_sungetc_r+0x60>
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	3201      	adds	r2, #1
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	6062      	str	r2, [r4, #4]
 800a2c2:	e7d5      	b.n	800a270 <_sungetc_r+0xc>
 800a2c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2d2:	4623      	mov	r3, r4
 800a2d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e7dc      	b.n	800a298 <_sungetc_r+0x34>

0800a2de <__ssrefill_r>:
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a2e4:	b169      	cbz	r1, 800a302 <__ssrefill_r+0x24>
 800a2e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	d001      	beq.n	800a2f2 <__ssrefill_r+0x14>
 800a2ee:	f7ff fdb3 	bl	8009e58 <_free_r>
 800a2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a2fa:	b113      	cbz	r3, 800a302 <__ssrefill_r+0x24>
 800a2fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	bd10      	pop	{r4, pc}
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	2300      	movs	r3, #0
 800a308:	6063      	str	r3, [r4, #4]
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f043 0320 	orr.w	r3, r3, #32
 800a310:	81a3      	strh	r3, [r4, #12]
 800a312:	f04f 30ff 	mov.w	r0, #4294967295
 800a316:	e7f3      	b.n	800a300 <__ssrefill_r+0x22>

0800a318 <__ssvfiscanf_r>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	460c      	mov	r4, r1
 800a31e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a322:	2100      	movs	r1, #0
 800a324:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a328:	49b2      	ldr	r1, [pc, #712]	; (800a5f4 <__ssvfiscanf_r+0x2dc>)
 800a32a:	91a0      	str	r1, [sp, #640]	; 0x280
 800a32c:	f10d 0804 	add.w	r8, sp, #4
 800a330:	49b1      	ldr	r1, [pc, #708]	; (800a5f8 <__ssvfiscanf_r+0x2e0>)
 800a332:	4fb2      	ldr	r7, [pc, #712]	; (800a5fc <__ssvfiscanf_r+0x2e4>)
 800a334:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a600 <__ssvfiscanf_r+0x2e8>
 800a338:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a33c:	4606      	mov	r6, r0
 800a33e:	91a1      	str	r1, [sp, #644]	; 0x284
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	f892 a000 	ldrb.w	sl, [r2]
 800a346:	f1ba 0f00 	cmp.w	sl, #0
 800a34a:	f000 8151 	beq.w	800a5f0 <__ssvfiscanf_r+0x2d8>
 800a34e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a352:	f013 0308 	ands.w	r3, r3, #8
 800a356:	f102 0501 	add.w	r5, r2, #1
 800a35a:	d019      	beq.n	800a390 <__ssvfiscanf_r+0x78>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	dd0f      	ble.n	800a382 <__ssvfiscanf_r+0x6a>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	781a      	ldrb	r2, [r3, #0]
 800a366:	5cba      	ldrb	r2, [r7, r2]
 800a368:	0712      	lsls	r2, r2, #28
 800a36a:	d401      	bmi.n	800a370 <__ssvfiscanf_r+0x58>
 800a36c:	462a      	mov	r2, r5
 800a36e:	e7e8      	b.n	800a342 <__ssvfiscanf_r+0x2a>
 800a370:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a372:	3201      	adds	r2, #1
 800a374:	9245      	str	r2, [sp, #276]	; 0x114
 800a376:	6862      	ldr	r2, [r4, #4]
 800a378:	3301      	adds	r3, #1
 800a37a:	3a01      	subs	r2, #1
 800a37c:	6062      	str	r2, [r4, #4]
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	e7ec      	b.n	800a35c <__ssvfiscanf_r+0x44>
 800a382:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a384:	4621      	mov	r1, r4
 800a386:	4630      	mov	r0, r6
 800a388:	4798      	blx	r3
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0e9      	beq.n	800a362 <__ssvfiscanf_r+0x4a>
 800a38e:	e7ed      	b.n	800a36c <__ssvfiscanf_r+0x54>
 800a390:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a394:	f040 8083 	bne.w	800a49e <__ssvfiscanf_r+0x186>
 800a398:	9341      	str	r3, [sp, #260]	; 0x104
 800a39a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a39c:	7853      	ldrb	r3, [r2, #1]
 800a39e:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a0:	bf02      	ittt	eq
 800a3a2:	2310      	moveq	r3, #16
 800a3a4:	1c95      	addeq	r5, r2, #2
 800a3a6:	9341      	streq	r3, [sp, #260]	; 0x104
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	46ab      	mov	fp, r5
 800a3ac:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a3b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a3b4:	2b09      	cmp	r3, #9
 800a3b6:	d91d      	bls.n	800a3f4 <__ssvfiscanf_r+0xdc>
 800a3b8:	4891      	ldr	r0, [pc, #580]	; (800a600 <__ssvfiscanf_r+0x2e8>)
 800a3ba:	2203      	movs	r2, #3
 800a3bc:	f7f5 ff48 	bl	8000250 <memchr>
 800a3c0:	b140      	cbz	r0, 800a3d4 <__ssvfiscanf_r+0xbc>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	eba0 0009 	sub.w	r0, r0, r9
 800a3c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3ce:	4318      	orrs	r0, r3
 800a3d0:	9041      	str	r0, [sp, #260]	; 0x104
 800a3d2:	465d      	mov	r5, fp
 800a3d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3d8:	2b78      	cmp	r3, #120	; 0x78
 800a3da:	d806      	bhi.n	800a3ea <__ssvfiscanf_r+0xd2>
 800a3dc:	2b57      	cmp	r3, #87	; 0x57
 800a3de:	d810      	bhi.n	800a402 <__ssvfiscanf_r+0xea>
 800a3e0:	2b25      	cmp	r3, #37	; 0x25
 800a3e2:	d05c      	beq.n	800a49e <__ssvfiscanf_r+0x186>
 800a3e4:	d856      	bhi.n	800a494 <__ssvfiscanf_r+0x17c>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d074      	beq.n	800a4d4 <__ssvfiscanf_r+0x1bc>
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	9347      	str	r3, [sp, #284]	; 0x11c
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	9342      	str	r3, [sp, #264]	; 0x108
 800a3f2:	e081      	b.n	800a4f8 <__ssvfiscanf_r+0x1e0>
 800a3f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a3f6:	fb02 1303 	mla	r3, r2, r3, r1
 800a3fa:	3b30      	subs	r3, #48	; 0x30
 800a3fc:	9343      	str	r3, [sp, #268]	; 0x10c
 800a3fe:	465d      	mov	r5, fp
 800a400:	e7d3      	b.n	800a3aa <__ssvfiscanf_r+0x92>
 800a402:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a406:	2a20      	cmp	r2, #32
 800a408:	d8ef      	bhi.n	800a3ea <__ssvfiscanf_r+0xd2>
 800a40a:	a101      	add	r1, pc, #4	; (adr r1, 800a410 <__ssvfiscanf_r+0xf8>)
 800a40c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a410:	0800a4e3 	.word	0x0800a4e3
 800a414:	0800a3eb 	.word	0x0800a3eb
 800a418:	0800a3eb 	.word	0x0800a3eb
 800a41c:	0800a541 	.word	0x0800a541
 800a420:	0800a3eb 	.word	0x0800a3eb
 800a424:	0800a3eb 	.word	0x0800a3eb
 800a428:	0800a3eb 	.word	0x0800a3eb
 800a42c:	0800a3eb 	.word	0x0800a3eb
 800a430:	0800a3eb 	.word	0x0800a3eb
 800a434:	0800a3eb 	.word	0x0800a3eb
 800a438:	0800a3eb 	.word	0x0800a3eb
 800a43c:	0800a557 	.word	0x0800a557
 800a440:	0800a52d 	.word	0x0800a52d
 800a444:	0800a49b 	.word	0x0800a49b
 800a448:	0800a49b 	.word	0x0800a49b
 800a44c:	0800a49b 	.word	0x0800a49b
 800a450:	0800a3eb 	.word	0x0800a3eb
 800a454:	0800a531 	.word	0x0800a531
 800a458:	0800a3eb 	.word	0x0800a3eb
 800a45c:	0800a3eb 	.word	0x0800a3eb
 800a460:	0800a3eb 	.word	0x0800a3eb
 800a464:	0800a3eb 	.word	0x0800a3eb
 800a468:	0800a567 	.word	0x0800a567
 800a46c:	0800a539 	.word	0x0800a539
 800a470:	0800a4db 	.word	0x0800a4db
 800a474:	0800a3eb 	.word	0x0800a3eb
 800a478:	0800a3eb 	.word	0x0800a3eb
 800a47c:	0800a563 	.word	0x0800a563
 800a480:	0800a3eb 	.word	0x0800a3eb
 800a484:	0800a52d 	.word	0x0800a52d
 800a488:	0800a3eb 	.word	0x0800a3eb
 800a48c:	0800a3eb 	.word	0x0800a3eb
 800a490:	0800a4e3 	.word	0x0800a4e3
 800a494:	3b45      	subs	r3, #69	; 0x45
 800a496:	2b02      	cmp	r3, #2
 800a498:	d8a7      	bhi.n	800a3ea <__ssvfiscanf_r+0xd2>
 800a49a:	2305      	movs	r3, #5
 800a49c:	e02b      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dd0d      	ble.n	800a4c0 <__ssvfiscanf_r+0x1a8>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	781a      	ldrb	r2, [r3, #0]
 800a4a8:	4552      	cmp	r2, sl
 800a4aa:	f040 80a1 	bne.w	800a5f0 <__ssvfiscanf_r+0x2d8>
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	6862      	ldr	r2, [r4, #4]
 800a4b2:	6023      	str	r3, [r4, #0]
 800a4b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a4b6:	3a01      	subs	r2, #1
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	6062      	str	r2, [r4, #4]
 800a4bc:	9345      	str	r3, [sp, #276]	; 0x114
 800a4be:	e755      	b.n	800a36c <__ssvfiscanf_r+0x54>
 800a4c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4798      	blx	r3
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d0eb      	beq.n	800a4a4 <__ssvfiscanf_r+0x18c>
 800a4cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f040 8084 	bne.w	800a5dc <__ssvfiscanf_r+0x2c4>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e086      	b.n	800a5e8 <__ssvfiscanf_r+0x2d0>
 800a4da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a4dc:	f042 0220 	orr.w	r2, r2, #32
 800a4e0:	9241      	str	r2, [sp, #260]	; 0x104
 800a4e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a4e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4e8:	9241      	str	r2, [sp, #260]	; 0x104
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	2b6f      	cmp	r3, #111	; 0x6f
 800a4ee:	9242      	str	r2, [sp, #264]	; 0x108
 800a4f0:	bf34      	ite	cc
 800a4f2:	2303      	movcc	r3, #3
 800a4f4:	2304      	movcs	r3, #4
 800a4f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800a4f8:	6863      	ldr	r3, [r4, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dd41      	ble.n	800a582 <__ssvfiscanf_r+0x26a>
 800a4fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a500:	0659      	lsls	r1, r3, #25
 800a502:	d404      	bmi.n	800a50e <__ssvfiscanf_r+0x1f6>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	781a      	ldrb	r2, [r3, #0]
 800a508:	5cba      	ldrb	r2, [r7, r2]
 800a50a:	0712      	lsls	r2, r2, #28
 800a50c:	d440      	bmi.n	800a590 <__ssvfiscanf_r+0x278>
 800a50e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a510:	2b02      	cmp	r3, #2
 800a512:	dc4f      	bgt.n	800a5b4 <__ssvfiscanf_r+0x29c>
 800a514:	466b      	mov	r3, sp
 800a516:	4622      	mov	r2, r4
 800a518:	a941      	add	r1, sp, #260	; 0x104
 800a51a:	4630      	mov	r0, r6
 800a51c:	f000 f874 	bl	800a608 <_scanf_chars>
 800a520:	2801      	cmp	r0, #1
 800a522:	d065      	beq.n	800a5f0 <__ssvfiscanf_r+0x2d8>
 800a524:	2802      	cmp	r0, #2
 800a526:	f47f af21 	bne.w	800a36c <__ssvfiscanf_r+0x54>
 800a52a:	e7cf      	b.n	800a4cc <__ssvfiscanf_r+0x1b4>
 800a52c:	220a      	movs	r2, #10
 800a52e:	e7dd      	b.n	800a4ec <__ssvfiscanf_r+0x1d4>
 800a530:	2300      	movs	r3, #0
 800a532:	9342      	str	r3, [sp, #264]	; 0x108
 800a534:	2303      	movs	r3, #3
 800a536:	e7de      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a538:	2308      	movs	r3, #8
 800a53a:	9342      	str	r3, [sp, #264]	; 0x108
 800a53c:	2304      	movs	r3, #4
 800a53e:	e7da      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a540:	4629      	mov	r1, r5
 800a542:	4640      	mov	r0, r8
 800a544:	f000 f9d8 	bl	800a8f8 <__sccl>
 800a548:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54e:	9341      	str	r3, [sp, #260]	; 0x104
 800a550:	4605      	mov	r5, r0
 800a552:	2301      	movs	r3, #1
 800a554:	e7cf      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a556:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55c:	9341      	str	r3, [sp, #260]	; 0x104
 800a55e:	2300      	movs	r3, #0
 800a560:	e7c9      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a562:	2302      	movs	r3, #2
 800a564:	e7c7      	b.n	800a4f6 <__ssvfiscanf_r+0x1de>
 800a566:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a568:	06c3      	lsls	r3, r0, #27
 800a56a:	f53f aeff 	bmi.w	800a36c <__ssvfiscanf_r+0x54>
 800a56e:	9b00      	ldr	r3, [sp, #0]
 800a570:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a572:	1d19      	adds	r1, r3, #4
 800a574:	9100      	str	r1, [sp, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	07c0      	lsls	r0, r0, #31
 800a57a:	bf4c      	ite	mi
 800a57c:	801a      	strhmi	r2, [r3, #0]
 800a57e:	601a      	strpl	r2, [r3, #0]
 800a580:	e6f4      	b.n	800a36c <__ssvfiscanf_r+0x54>
 800a582:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a584:	4621      	mov	r1, r4
 800a586:	4630      	mov	r0, r6
 800a588:	4798      	blx	r3
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0b7      	beq.n	800a4fe <__ssvfiscanf_r+0x1e6>
 800a58e:	e79d      	b.n	800a4cc <__ssvfiscanf_r+0x1b4>
 800a590:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a592:	3201      	adds	r2, #1
 800a594:	9245      	str	r2, [sp, #276]	; 0x114
 800a596:	6862      	ldr	r2, [r4, #4]
 800a598:	3a01      	subs	r2, #1
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	6062      	str	r2, [r4, #4]
 800a59e:	dd02      	ble.n	800a5a6 <__ssvfiscanf_r+0x28e>
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	e7ae      	b.n	800a504 <__ssvfiscanf_r+0x1ec>
 800a5a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4798      	blx	r3
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d0a8      	beq.n	800a504 <__ssvfiscanf_r+0x1ec>
 800a5b2:	e78b      	b.n	800a4cc <__ssvfiscanf_r+0x1b4>
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	dc06      	bgt.n	800a5c6 <__ssvfiscanf_r+0x2ae>
 800a5b8:	466b      	mov	r3, sp
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	a941      	add	r1, sp, #260	; 0x104
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f000 f87a 	bl	800a6b8 <_scanf_i>
 800a5c4:	e7ac      	b.n	800a520 <__ssvfiscanf_r+0x208>
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <__ssvfiscanf_r+0x2ec>)
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f43f aecf 	beq.w	800a36c <__ssvfiscanf_r+0x54>
 800a5ce:	466b      	mov	r3, sp
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	a941      	add	r1, sp, #260	; 0x104
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7fc fc59 	bl	8006e8c <_scanf_float>
 800a5da:	e7a1      	b.n	800a520 <__ssvfiscanf_r+0x208>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a5e2:	bf18      	it	ne
 800a5e4:	f04f 30ff 	movne.w	r0, #4294967295
 800a5e8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a5f2:	e7f9      	b.n	800a5e8 <__ssvfiscanf_r+0x2d0>
 800a5f4:	0800a265 	.word	0x0800a265
 800a5f8:	0800a2df 	.word	0x0800a2df
 800a5fc:	0800bcd1 	.word	0x0800bcd1
 800a600:	0800c04a 	.word	0x0800c04a
 800a604:	08006e8d 	.word	0x08006e8d

0800a608 <_scanf_chars>:
 800a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	4615      	mov	r5, r2
 800a60e:	688a      	ldr	r2, [r1, #8]
 800a610:	4680      	mov	r8, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b932      	cbnz	r2, 800a624 <_scanf_chars+0x1c>
 800a616:	698a      	ldr	r2, [r1, #24]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	bf0c      	ite	eq
 800a61c:	2201      	moveq	r2, #1
 800a61e:	f04f 32ff 	movne.w	r2, #4294967295
 800a622:	608a      	str	r2, [r1, #8]
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a6b4 <_scanf_chars+0xac>
 800a62a:	06d1      	lsls	r1, r2, #27
 800a62c:	bf5f      	itttt	pl
 800a62e:	681a      	ldrpl	r2, [r3, #0]
 800a630:	1d11      	addpl	r1, r2, #4
 800a632:	6019      	strpl	r1, [r3, #0]
 800a634:	6816      	ldrpl	r6, [r2, #0]
 800a636:	2700      	movs	r7, #0
 800a638:	69a0      	ldr	r0, [r4, #24]
 800a63a:	b188      	cbz	r0, 800a660 <_scanf_chars+0x58>
 800a63c:	2801      	cmp	r0, #1
 800a63e:	d107      	bne.n	800a650 <_scanf_chars+0x48>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	6963      	ldr	r3, [r4, #20]
 800a646:	5c9b      	ldrb	r3, [r3, r2]
 800a648:	b953      	cbnz	r3, 800a660 <_scanf_chars+0x58>
 800a64a:	bb27      	cbnz	r7, 800a696 <_scanf_chars+0x8e>
 800a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a650:	2802      	cmp	r0, #2
 800a652:	d120      	bne.n	800a696 <_scanf_chars+0x8e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a65c:	071b      	lsls	r3, r3, #28
 800a65e:	d41a      	bmi.n	800a696 <_scanf_chars+0x8e>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	06da      	lsls	r2, r3, #27
 800a664:	bf5e      	ittt	pl
 800a666:	682b      	ldrpl	r3, [r5, #0]
 800a668:	781b      	ldrbpl	r3, [r3, #0]
 800a66a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a66e:	682a      	ldr	r2, [r5, #0]
 800a670:	686b      	ldr	r3, [r5, #4]
 800a672:	3201      	adds	r2, #1
 800a674:	602a      	str	r2, [r5, #0]
 800a676:	68a2      	ldr	r2, [r4, #8]
 800a678:	3b01      	subs	r3, #1
 800a67a:	3a01      	subs	r2, #1
 800a67c:	606b      	str	r3, [r5, #4]
 800a67e:	3701      	adds	r7, #1
 800a680:	60a2      	str	r2, [r4, #8]
 800a682:	b142      	cbz	r2, 800a696 <_scanf_chars+0x8e>
 800a684:	2b00      	cmp	r3, #0
 800a686:	dcd7      	bgt.n	800a638 <_scanf_chars+0x30>
 800a688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a68c:	4629      	mov	r1, r5
 800a68e:	4640      	mov	r0, r8
 800a690:	4798      	blx	r3
 800a692:	2800      	cmp	r0, #0
 800a694:	d0d0      	beq.n	800a638 <_scanf_chars+0x30>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f013 0310 	ands.w	r3, r3, #16
 800a69c:	d105      	bne.n	800a6aa <_scanf_chars+0xa2>
 800a69e:	68e2      	ldr	r2, [r4, #12]
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	60e2      	str	r2, [r4, #12]
 800a6a4:	69a2      	ldr	r2, [r4, #24]
 800a6a6:	b102      	cbz	r2, 800a6aa <_scanf_chars+0xa2>
 800a6a8:	7033      	strb	r3, [r6, #0]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	441f      	add	r7, r3
 800a6ae:	6127      	str	r7, [r4, #16]
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7cb      	b.n	800a64c <_scanf_chars+0x44>
 800a6b4:	0800bcd1 	.word	0x0800bcd1

0800a6b8 <_scanf_i>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4698      	mov	r8, r3
 800a6be:	4b74      	ldr	r3, [pc, #464]	; (800a890 <_scanf_i+0x1d8>)
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	ab03      	add	r3, sp, #12
 800a6ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a6d2:	4b70      	ldr	r3, [pc, #448]	; (800a894 <_scanf_i+0x1dc>)
 800a6d4:	69a1      	ldr	r1, [r4, #24]
 800a6d6:	4a70      	ldr	r2, [pc, #448]	; (800a898 <_scanf_i+0x1e0>)
 800a6d8:	2903      	cmp	r1, #3
 800a6da:	bf18      	it	ne
 800a6dc:	461a      	movne	r2, r3
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	9201      	str	r2, [sp, #4]
 800a6e2:	1e5a      	subs	r2, r3, #1
 800a6e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6e8:	bf88      	it	hi
 800a6ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6ee:	4627      	mov	r7, r4
 800a6f0:	bf82      	ittt	hi
 800a6f2:	eb03 0905 	addhi.w	r9, r3, r5
 800a6f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6fa:	60a3      	strhi	r3, [r4, #8]
 800a6fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a700:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a704:	bf98      	it	ls
 800a706:	f04f 0900 	movls.w	r9, #0
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	463d      	mov	r5, r7
 800a70e:	f04f 0b00 	mov.w	fp, #0
 800a712:	6831      	ldr	r1, [r6, #0]
 800a714:	ab03      	add	r3, sp, #12
 800a716:	7809      	ldrb	r1, [r1, #0]
 800a718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a71c:	2202      	movs	r2, #2
 800a71e:	f7f5 fd97 	bl	8000250 <memchr>
 800a722:	b328      	cbz	r0, 800a770 <_scanf_i+0xb8>
 800a724:	f1bb 0f01 	cmp.w	fp, #1
 800a728:	d159      	bne.n	800a7de <_scanf_i+0x126>
 800a72a:	6862      	ldr	r2, [r4, #4]
 800a72c:	b92a      	cbnz	r2, 800a73a <_scanf_i+0x82>
 800a72e:	6822      	ldr	r2, [r4, #0]
 800a730:	2308      	movs	r3, #8
 800a732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	6822      	ldr	r2, [r4, #0]
 800a73c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a740:	6022      	str	r2, [r4, #0]
 800a742:	68a2      	ldr	r2, [r4, #8]
 800a744:	1e51      	subs	r1, r2, #1
 800a746:	60a1      	str	r1, [r4, #8]
 800a748:	b192      	cbz	r2, 800a770 <_scanf_i+0xb8>
 800a74a:	6832      	ldr	r2, [r6, #0]
 800a74c:	1c51      	adds	r1, r2, #1
 800a74e:	6031      	str	r1, [r6, #0]
 800a750:	7812      	ldrb	r2, [r2, #0]
 800a752:	f805 2b01 	strb.w	r2, [r5], #1
 800a756:	6872      	ldr	r2, [r6, #4]
 800a758:	3a01      	subs	r2, #1
 800a75a:	2a00      	cmp	r2, #0
 800a75c:	6072      	str	r2, [r6, #4]
 800a75e:	dc07      	bgt.n	800a770 <_scanf_i+0xb8>
 800a760:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a764:	4631      	mov	r1, r6
 800a766:	4650      	mov	r0, sl
 800a768:	4790      	blx	r2
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f040 8085 	bne.w	800a87a <_scanf_i+0x1c2>
 800a770:	f10b 0b01 	add.w	fp, fp, #1
 800a774:	f1bb 0f03 	cmp.w	fp, #3
 800a778:	d1cb      	bne.n	800a712 <_scanf_i+0x5a>
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	b90b      	cbnz	r3, 800a782 <_scanf_i+0xca>
 800a77e:	230a      	movs	r3, #10
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	4945      	ldr	r1, [pc, #276]	; (800a89c <_scanf_i+0x1e4>)
 800a786:	6960      	ldr	r0, [r4, #20]
 800a788:	1ac9      	subs	r1, r1, r3
 800a78a:	f000 f8b5 	bl	800a8f8 <__sccl>
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d03d      	beq.n	800a816 <_scanf_i+0x15e>
 800a79a:	6831      	ldr	r1, [r6, #0]
 800a79c:	6960      	ldr	r0, [r4, #20]
 800a79e:	f891 c000 	ldrb.w	ip, [r1]
 800a7a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d035      	beq.n	800a816 <_scanf_i+0x15e>
 800a7aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a7ae:	d124      	bne.n	800a7fa <_scanf_i+0x142>
 800a7b0:	0510      	lsls	r0, r2, #20
 800a7b2:	d522      	bpl.n	800a7fa <_scanf_i+0x142>
 800a7b4:	f10b 0b01 	add.w	fp, fp, #1
 800a7b8:	f1b9 0f00 	cmp.w	r9, #0
 800a7bc:	d003      	beq.n	800a7c6 <_scanf_i+0x10e>
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7c4:	60a3      	str	r3, [r4, #8]
 800a7c6:	6873      	ldr	r3, [r6, #4]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	6073      	str	r3, [r6, #4]
 800a7ce:	dd1b      	ble.n	800a808 <_scanf_i+0x150>
 800a7d0:	6833      	ldr	r3, [r6, #0]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	6033      	str	r3, [r6, #0]
 800a7d6:	68a3      	ldr	r3, [r4, #8]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	60a3      	str	r3, [r4, #8]
 800a7dc:	e7d9      	b.n	800a792 <_scanf_i+0xda>
 800a7de:	f1bb 0f02 	cmp.w	fp, #2
 800a7e2:	d1ae      	bne.n	800a742 <_scanf_i+0x8a>
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a7ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a7ee:	d1bf      	bne.n	800a770 <_scanf_i+0xb8>
 800a7f0:	2310      	movs	r3, #16
 800a7f2:	6063      	str	r3, [r4, #4]
 800a7f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7f8:	e7a2      	b.n	800a740 <_scanf_i+0x88>
 800a7fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a7fe:	6022      	str	r2, [r4, #0]
 800a800:	780b      	ldrb	r3, [r1, #0]
 800a802:	f805 3b01 	strb.w	r3, [r5], #1
 800a806:	e7de      	b.n	800a7c6 <_scanf_i+0x10e>
 800a808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a80c:	4631      	mov	r1, r6
 800a80e:	4650      	mov	r0, sl
 800a810:	4798      	blx	r3
 800a812:	2800      	cmp	r0, #0
 800a814:	d0df      	beq.n	800a7d6 <_scanf_i+0x11e>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	05d9      	lsls	r1, r3, #23
 800a81a:	d50d      	bpl.n	800a838 <_scanf_i+0x180>
 800a81c:	42bd      	cmp	r5, r7
 800a81e:	d909      	bls.n	800a834 <_scanf_i+0x17c>
 800a820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a828:	4632      	mov	r2, r6
 800a82a:	4650      	mov	r0, sl
 800a82c:	4798      	blx	r3
 800a82e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a832:	464d      	mov	r5, r9
 800a834:	42bd      	cmp	r5, r7
 800a836:	d028      	beq.n	800a88a <_scanf_i+0x1d2>
 800a838:	6822      	ldr	r2, [r4, #0]
 800a83a:	f012 0210 	ands.w	r2, r2, #16
 800a83e:	d113      	bne.n	800a868 <_scanf_i+0x1b0>
 800a840:	702a      	strb	r2, [r5, #0]
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	9e01      	ldr	r6, [sp, #4]
 800a846:	4639      	mov	r1, r7
 800a848:	4650      	mov	r0, sl
 800a84a:	47b0      	blx	r6
 800a84c:	f8d8 3000 	ldr.w	r3, [r8]
 800a850:	6821      	ldr	r1, [r4, #0]
 800a852:	1d1a      	adds	r2, r3, #4
 800a854:	f8c8 2000 	str.w	r2, [r8]
 800a858:	f011 0f20 	tst.w	r1, #32
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	d00f      	beq.n	800a880 <_scanf_i+0x1c8>
 800a860:	6018      	str	r0, [r3, #0]
 800a862:	68e3      	ldr	r3, [r4, #12]
 800a864:	3301      	adds	r3, #1
 800a866:	60e3      	str	r3, [r4, #12]
 800a868:	1bed      	subs	r5, r5, r7
 800a86a:	44ab      	add	fp, r5
 800a86c:	6925      	ldr	r5, [r4, #16]
 800a86e:	445d      	add	r5, fp
 800a870:	6125      	str	r5, [r4, #16]
 800a872:	2000      	movs	r0, #0
 800a874:	b007      	add	sp, #28
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	f04f 0b00 	mov.w	fp, #0
 800a87e:	e7ca      	b.n	800a816 <_scanf_i+0x15e>
 800a880:	07ca      	lsls	r2, r1, #31
 800a882:	bf4c      	ite	mi
 800a884:	8018      	strhmi	r0, [r3, #0]
 800a886:	6018      	strpl	r0, [r3, #0]
 800a888:	e7eb      	b.n	800a862 <_scanf_i+0x1aa>
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7f2      	b.n	800a874 <_scanf_i+0x1bc>
 800a88e:	bf00      	nop
 800a890:	0800bc1c 	.word	0x0800bc1c
 800a894:	0800aa65 	.word	0x0800aa65
 800a898:	08008101 	.word	0x08008101
 800a89c:	0800c06e 	.word	0x0800c06e

0800a8a0 <_read_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_read_r+0x20>)
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f7f7 faaa 	bl	8001e08 <_read>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_read_r+0x1e>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_read_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	20010894 	.word	0x20010894
 800a8c4:	00000000 	.word	0x00000000

0800a8c8 <nan>:
 800a8c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8d0 <nan+0x8>
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	00000000 	.word	0x00000000
 800a8d4:	7ff80000 	.word	0x7ff80000

0800a8d8 <_sbrk_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4d06      	ldr	r5, [pc, #24]	; (800a8f4 <_sbrk_r+0x1c>)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	f7f7 fafe 	bl	8001ee4 <_sbrk>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_sbrk_r+0x1a>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_sbrk_r+0x1a>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	20010894 	.word	0x20010894

0800a8f8 <__sccl>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	780b      	ldrb	r3, [r1, #0]
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	2b5e      	cmp	r3, #94	; 0x5e
 800a900:	bf0b      	itete	eq
 800a902:	784b      	ldrbeq	r3, [r1, #1]
 800a904:	1c48      	addne	r0, r1, #1
 800a906:	1c88      	addeq	r0, r1, #2
 800a908:	2200      	movne	r2, #0
 800a90a:	bf08      	it	eq
 800a90c:	2201      	moveq	r2, #1
 800a90e:	1e61      	subs	r1, r4, #1
 800a910:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a914:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a918:	42a9      	cmp	r1, r5
 800a91a:	d1fb      	bne.n	800a914 <__sccl+0x1c>
 800a91c:	b90b      	cbnz	r3, 800a922 <__sccl+0x2a>
 800a91e:	3801      	subs	r0, #1
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	f082 0101 	eor.w	r1, r2, #1
 800a926:	54e1      	strb	r1, [r4, r3]
 800a928:	1c42      	adds	r2, r0, #1
 800a92a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a92e:	2d2d      	cmp	r5, #45	; 0x2d
 800a930:	f102 36ff 	add.w	r6, r2, #4294967295
 800a934:	4610      	mov	r0, r2
 800a936:	d006      	beq.n	800a946 <__sccl+0x4e>
 800a938:	2d5d      	cmp	r5, #93	; 0x5d
 800a93a:	d0f1      	beq.n	800a920 <__sccl+0x28>
 800a93c:	b90d      	cbnz	r5, 800a942 <__sccl+0x4a>
 800a93e:	4630      	mov	r0, r6
 800a940:	e7ee      	b.n	800a920 <__sccl+0x28>
 800a942:	462b      	mov	r3, r5
 800a944:	e7ef      	b.n	800a926 <__sccl+0x2e>
 800a946:	7816      	ldrb	r6, [r2, #0]
 800a948:	2e5d      	cmp	r6, #93	; 0x5d
 800a94a:	d0fa      	beq.n	800a942 <__sccl+0x4a>
 800a94c:	42b3      	cmp	r3, r6
 800a94e:	dcf8      	bgt.n	800a942 <__sccl+0x4a>
 800a950:	4618      	mov	r0, r3
 800a952:	3001      	adds	r0, #1
 800a954:	4286      	cmp	r6, r0
 800a956:	5421      	strb	r1, [r4, r0]
 800a958:	dcfb      	bgt.n	800a952 <__sccl+0x5a>
 800a95a:	43d8      	mvns	r0, r3
 800a95c:	4430      	add	r0, r6
 800a95e:	1c5d      	adds	r5, r3, #1
 800a960:	42b3      	cmp	r3, r6
 800a962:	bfa8      	it	ge
 800a964:	2000      	movge	r0, #0
 800a966:	182b      	adds	r3, r5, r0
 800a968:	3202      	adds	r2, #2
 800a96a:	e7de      	b.n	800a92a <__sccl+0x32>

0800a96c <_strtoul_l.isra.0>:
 800a96c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a970:	4e3b      	ldr	r6, [pc, #236]	; (800aa60 <_strtoul_l.isra.0+0xf4>)
 800a972:	4686      	mov	lr, r0
 800a974:	468c      	mov	ip, r1
 800a976:	4660      	mov	r0, ip
 800a978:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a97c:	5da5      	ldrb	r5, [r4, r6]
 800a97e:	f015 0508 	ands.w	r5, r5, #8
 800a982:	d1f8      	bne.n	800a976 <_strtoul_l.isra.0+0xa>
 800a984:	2c2d      	cmp	r4, #45	; 0x2d
 800a986:	d134      	bne.n	800a9f2 <_strtoul_l.isra.0+0x86>
 800a988:	f89c 4000 	ldrb.w	r4, [ip]
 800a98c:	f04f 0801 	mov.w	r8, #1
 800a990:	f100 0c02 	add.w	ip, r0, #2
 800a994:	2b00      	cmp	r3, #0
 800a996:	d05e      	beq.n	800aa56 <_strtoul_l.isra.0+0xea>
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d10c      	bne.n	800a9b6 <_strtoul_l.isra.0+0x4a>
 800a99c:	2c30      	cmp	r4, #48	; 0x30
 800a99e:	d10a      	bne.n	800a9b6 <_strtoul_l.isra.0+0x4a>
 800a9a0:	f89c 0000 	ldrb.w	r0, [ip]
 800a9a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9a8:	2858      	cmp	r0, #88	; 0x58
 800a9aa:	d14f      	bne.n	800aa4c <_strtoul_l.isra.0+0xe0>
 800a9ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	f10c 0c02 	add.w	ip, ip, #2
 800a9b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	fbb7 f7f3 	udiv	r7, r7, r3
 800a9c0:	fb03 f907 	mul.w	r9, r3, r7
 800a9c4:	ea6f 0909 	mvn.w	r9, r9
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a9ce:	2e09      	cmp	r6, #9
 800a9d0:	d818      	bhi.n	800aa04 <_strtoul_l.isra.0+0x98>
 800a9d2:	4634      	mov	r4, r6
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	dd24      	ble.n	800aa22 <_strtoul_l.isra.0+0xb6>
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	db1f      	blt.n	800aa1c <_strtoul_l.isra.0+0xb0>
 800a9dc:	4287      	cmp	r7, r0
 800a9de:	d31d      	bcc.n	800aa1c <_strtoul_l.isra.0+0xb0>
 800a9e0:	d101      	bne.n	800a9e6 <_strtoul_l.isra.0+0x7a>
 800a9e2:	45a1      	cmp	r9, r4
 800a9e4:	db1a      	blt.n	800aa1c <_strtoul_l.isra.0+0xb0>
 800a9e6:	fb00 4003 	mla	r0, r0, r3, r4
 800a9ea:	2501      	movs	r5, #1
 800a9ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a9f0:	e7eb      	b.n	800a9ca <_strtoul_l.isra.0+0x5e>
 800a9f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a9f4:	bf08      	it	eq
 800a9f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a9fa:	46a8      	mov	r8, r5
 800a9fc:	bf08      	it	eq
 800a9fe:	f100 0c02 	addeq.w	ip, r0, #2
 800aa02:	e7c7      	b.n	800a994 <_strtoul_l.isra.0+0x28>
 800aa04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800aa08:	2e19      	cmp	r6, #25
 800aa0a:	d801      	bhi.n	800aa10 <_strtoul_l.isra.0+0xa4>
 800aa0c:	3c37      	subs	r4, #55	; 0x37
 800aa0e:	e7e1      	b.n	800a9d4 <_strtoul_l.isra.0+0x68>
 800aa10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800aa14:	2e19      	cmp	r6, #25
 800aa16:	d804      	bhi.n	800aa22 <_strtoul_l.isra.0+0xb6>
 800aa18:	3c57      	subs	r4, #87	; 0x57
 800aa1a:	e7db      	b.n	800a9d4 <_strtoul_l.isra.0+0x68>
 800aa1c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa20:	e7e4      	b.n	800a9ec <_strtoul_l.isra.0+0x80>
 800aa22:	2d00      	cmp	r5, #0
 800aa24:	da07      	bge.n	800aa36 <_strtoul_l.isra.0+0xca>
 800aa26:	2322      	movs	r3, #34	; 0x22
 800aa28:	f8ce 3000 	str.w	r3, [lr]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	b942      	cbnz	r2, 800aa44 <_strtoul_l.isra.0+0xd8>
 800aa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa36:	f1b8 0f00 	cmp.w	r8, #0
 800aa3a:	d000      	beq.n	800aa3e <_strtoul_l.isra.0+0xd2>
 800aa3c:	4240      	negs	r0, r0
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d0f7      	beq.n	800aa32 <_strtoul_l.isra.0+0xc6>
 800aa42:	b10d      	cbz	r5, 800aa48 <_strtoul_l.isra.0+0xdc>
 800aa44:	f10c 31ff 	add.w	r1, ip, #4294967295
 800aa48:	6011      	str	r1, [r2, #0]
 800aa4a:	e7f2      	b.n	800aa32 <_strtoul_l.isra.0+0xc6>
 800aa4c:	2430      	movs	r4, #48	; 0x30
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1b1      	bne.n	800a9b6 <_strtoul_l.isra.0+0x4a>
 800aa52:	2308      	movs	r3, #8
 800aa54:	e7af      	b.n	800a9b6 <_strtoul_l.isra.0+0x4a>
 800aa56:	2c30      	cmp	r4, #48	; 0x30
 800aa58:	d0a2      	beq.n	800a9a0 <_strtoul_l.isra.0+0x34>
 800aa5a:	230a      	movs	r3, #10
 800aa5c:	e7ab      	b.n	800a9b6 <_strtoul_l.isra.0+0x4a>
 800aa5e:	bf00      	nop
 800aa60:	0800bcd1 	.word	0x0800bcd1

0800aa64 <_strtoul_r>:
 800aa64:	f7ff bf82 	b.w	800a96c <_strtoul_l.isra.0>

0800aa68 <__submore>:
 800aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d11d      	bne.n	800aab4 <__submore+0x4c>
 800aa78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aa7c:	f7ff fa3c 	bl	8009ef8 <_malloc_r>
 800aa80:	b918      	cbnz	r0, 800aa8a <__submore+0x22>
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa8e:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aa94:	6360      	str	r0, [r4, #52]	; 0x34
 800aa96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aa9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aa9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aaa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aaa6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aaaa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aaae:	6020      	str	r0, [r4, #0]
 800aab0:	2000      	movs	r0, #0
 800aab2:	e7e8      	b.n	800aa86 <__submore+0x1e>
 800aab4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aab6:	0077      	lsls	r7, r6, #1
 800aab8:	463a      	mov	r2, r7
 800aaba:	f000 fa2d 	bl	800af18 <_realloc_r>
 800aabe:	4605      	mov	r5, r0
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0de      	beq.n	800aa82 <__submore+0x1a>
 800aac4:	eb00 0806 	add.w	r8, r0, r6
 800aac8:	4601      	mov	r1, r0
 800aaca:	4632      	mov	r2, r6
 800aacc:	4640      	mov	r0, r8
 800aace:	f7fe fce9 	bl	80094a4 <memcpy>
 800aad2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aad6:	f8c4 8000 	str.w	r8, [r4]
 800aada:	e7e9      	b.n	800aab0 <__submore+0x48>

0800aadc <__ascii_wctomb>:
 800aadc:	b149      	cbz	r1, 800aaf2 <__ascii_wctomb+0x16>
 800aade:	2aff      	cmp	r2, #255	; 0xff
 800aae0:	bf85      	ittet	hi
 800aae2:	238a      	movhi	r3, #138	; 0x8a
 800aae4:	6003      	strhi	r3, [r0, #0]
 800aae6:	700a      	strbls	r2, [r1, #0]
 800aae8:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaec:	bf98      	it	ls
 800aaee:	2001      	movls	r0, #1
 800aaf0:	4770      	bx	lr
 800aaf2:	4608      	mov	r0, r1
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <__assert_func>:
 800aaf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafa:	4614      	mov	r4, r2
 800aafc:	461a      	mov	r2, r3
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <__assert_func+0x2c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4605      	mov	r5, r0
 800ab04:	68d8      	ldr	r0, [r3, #12]
 800ab06:	b14c      	cbz	r4, 800ab1c <__assert_func+0x24>
 800ab08:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <__assert_func+0x30>)
 800ab0a:	9100      	str	r1, [sp, #0]
 800ab0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab10:	4906      	ldr	r1, [pc, #24]	; (800ab2c <__assert_func+0x34>)
 800ab12:	462b      	mov	r3, r5
 800ab14:	f000 f9a6 	bl	800ae64 <fiprintf>
 800ab18:	f000 fc3e 	bl	800b398 <abort>
 800ab1c:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <__assert_func+0x38>)
 800ab1e:	461c      	mov	r4, r3
 800ab20:	e7f3      	b.n	800ab0a <__assert_func+0x12>
 800ab22:	bf00      	nop
 800ab24:	20000060 	.word	0x20000060
 800ab28:	0800c070 	.word	0x0800c070
 800ab2c:	0800c07d 	.word	0x0800c07d
 800ab30:	0800c0ab 	.word	0x0800c0ab

0800ab34 <__sflush_r>:
 800ab34:	898a      	ldrh	r2, [r1, #12]
 800ab36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	0710      	lsls	r0, r2, #28
 800ab3e:	460c      	mov	r4, r1
 800ab40:	d458      	bmi.n	800abf4 <__sflush_r+0xc0>
 800ab42:	684b      	ldr	r3, [r1, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc05      	bgt.n	800ab54 <__sflush_r+0x20>
 800ab48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dc02      	bgt.n	800ab54 <__sflush_r+0x20>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	d0f9      	beq.n	800ab4e <__sflush_r+0x1a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab60:	682f      	ldr	r7, [r5, #0]
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	d032      	beq.n	800abcc <__sflush_r+0x98>
 800ab66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	075a      	lsls	r2, r3, #29
 800ab6c:	d505      	bpl.n	800ab7a <__sflush_r+0x46>
 800ab6e:	6863      	ldr	r3, [r4, #4]
 800ab70:	1ac0      	subs	r0, r0, r3
 800ab72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab74:	b10b      	cbz	r3, 800ab7a <__sflush_r+0x46>
 800ab76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab78:	1ac0      	subs	r0, r0, r3
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab80:	6a21      	ldr	r1, [r4, #32]
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b0      	blx	r6
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	d106      	bne.n	800ab9a <__sflush_r+0x66>
 800ab8c:	6829      	ldr	r1, [r5, #0]
 800ab8e:	291d      	cmp	r1, #29
 800ab90:	d82c      	bhi.n	800abec <__sflush_r+0xb8>
 800ab92:	4a2a      	ldr	r2, [pc, #168]	; (800ac3c <__sflush_r+0x108>)
 800ab94:	40ca      	lsrs	r2, r1
 800ab96:	07d6      	lsls	r6, r2, #31
 800ab98:	d528      	bpl.n	800abec <__sflush_r+0xb8>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	6062      	str	r2, [r4, #4]
 800ab9e:	04d9      	lsls	r1, r3, #19
 800aba0:	6922      	ldr	r2, [r4, #16]
 800aba2:	6022      	str	r2, [r4, #0]
 800aba4:	d504      	bpl.n	800abb0 <__sflush_r+0x7c>
 800aba6:	1c42      	adds	r2, r0, #1
 800aba8:	d101      	bne.n	800abae <__sflush_r+0x7a>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	b903      	cbnz	r3, 800abb0 <__sflush_r+0x7c>
 800abae:	6560      	str	r0, [r4, #84]	; 0x54
 800abb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb2:	602f      	str	r7, [r5, #0]
 800abb4:	2900      	cmp	r1, #0
 800abb6:	d0ca      	beq.n	800ab4e <__sflush_r+0x1a>
 800abb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abbc:	4299      	cmp	r1, r3
 800abbe:	d002      	beq.n	800abc6 <__sflush_r+0x92>
 800abc0:	4628      	mov	r0, r5
 800abc2:	f7ff f949 	bl	8009e58 <_free_r>
 800abc6:	2000      	movs	r0, #0
 800abc8:	6360      	str	r0, [r4, #52]	; 0x34
 800abca:	e7c1      	b.n	800ab50 <__sflush_r+0x1c>
 800abcc:	6a21      	ldr	r1, [r4, #32]
 800abce:	2301      	movs	r3, #1
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b0      	blx	r6
 800abd4:	1c41      	adds	r1, r0, #1
 800abd6:	d1c7      	bne.n	800ab68 <__sflush_r+0x34>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0c4      	beq.n	800ab68 <__sflush_r+0x34>
 800abde:	2b1d      	cmp	r3, #29
 800abe0:	d001      	beq.n	800abe6 <__sflush_r+0xb2>
 800abe2:	2b16      	cmp	r3, #22
 800abe4:	d101      	bne.n	800abea <__sflush_r+0xb6>
 800abe6:	602f      	str	r7, [r5, #0]
 800abe8:	e7b1      	b.n	800ab4e <__sflush_r+0x1a>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	e7ad      	b.n	800ab50 <__sflush_r+0x1c>
 800abf4:	690f      	ldr	r7, [r1, #16]
 800abf6:	2f00      	cmp	r7, #0
 800abf8:	d0a9      	beq.n	800ab4e <__sflush_r+0x1a>
 800abfa:	0793      	lsls	r3, r2, #30
 800abfc:	680e      	ldr	r6, [r1, #0]
 800abfe:	bf08      	it	eq
 800ac00:	694b      	ldreq	r3, [r1, #20]
 800ac02:	600f      	str	r7, [r1, #0]
 800ac04:	bf18      	it	ne
 800ac06:	2300      	movne	r3, #0
 800ac08:	eba6 0807 	sub.w	r8, r6, r7
 800ac0c:	608b      	str	r3, [r1, #8]
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	dd9c      	ble.n	800ab4e <__sflush_r+0x1a>
 800ac14:	6a21      	ldr	r1, [r4, #32]
 800ac16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac18:	4643      	mov	r3, r8
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b0      	blx	r6
 800ac20:	2800      	cmp	r0, #0
 800ac22:	dc06      	bgt.n	800ac32 <__sflush_r+0xfe>
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac2a:	81a3      	strh	r3, [r4, #12]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e78e      	b.n	800ab50 <__sflush_r+0x1c>
 800ac32:	4407      	add	r7, r0
 800ac34:	eba8 0800 	sub.w	r8, r8, r0
 800ac38:	e7e9      	b.n	800ac0e <__sflush_r+0xda>
 800ac3a:	bf00      	nop
 800ac3c:	20400001 	.word	0x20400001

0800ac40 <_fflush_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	690b      	ldr	r3, [r1, #16]
 800ac44:	4605      	mov	r5, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	b913      	cbnz	r3, 800ac50 <_fflush_r+0x10>
 800ac4a:	2500      	movs	r5, #0
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	b118      	cbz	r0, 800ac5a <_fflush_r+0x1a>
 800ac52:	6983      	ldr	r3, [r0, #24]
 800ac54:	b90b      	cbnz	r3, 800ac5a <_fflush_r+0x1a>
 800ac56:	f000 f887 	bl	800ad68 <__sinit>
 800ac5a:	4b14      	ldr	r3, [pc, #80]	; (800acac <_fflush_r+0x6c>)
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	d11b      	bne.n	800ac98 <_fflush_r+0x58>
 800ac60:	686c      	ldr	r4, [r5, #4]
 800ac62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0ef      	beq.n	800ac4a <_fflush_r+0xa>
 800ac6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac6c:	07d0      	lsls	r0, r2, #31
 800ac6e:	d404      	bmi.n	800ac7a <_fflush_r+0x3a>
 800ac70:	0599      	lsls	r1, r3, #22
 800ac72:	d402      	bmi.n	800ac7a <_fflush_r+0x3a>
 800ac74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac76:	f000 f927 	bl	800aec8 <__retarget_lock_acquire_recursive>
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	f7ff ff59 	bl	800ab34 <__sflush_r>
 800ac82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac84:	07da      	lsls	r2, r3, #31
 800ac86:	4605      	mov	r5, r0
 800ac88:	d4e0      	bmi.n	800ac4c <_fflush_r+0xc>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	059b      	lsls	r3, r3, #22
 800ac8e:	d4dd      	bmi.n	800ac4c <_fflush_r+0xc>
 800ac90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac92:	f000 f91a 	bl	800aeca <__retarget_lock_release_recursive>
 800ac96:	e7d9      	b.n	800ac4c <_fflush_r+0xc>
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <_fflush_r+0x70>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	d101      	bne.n	800aca2 <_fflush_r+0x62>
 800ac9e:	68ac      	ldr	r4, [r5, #8]
 800aca0:	e7df      	b.n	800ac62 <_fflush_r+0x22>
 800aca2:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <_fflush_r+0x74>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	bf08      	it	eq
 800aca8:	68ec      	ldreq	r4, [r5, #12]
 800acaa:	e7da      	b.n	800ac62 <_fflush_r+0x22>
 800acac:	0800c0cc 	.word	0x0800c0cc
 800acb0:	0800c0ec 	.word	0x0800c0ec
 800acb4:	0800c0ac 	.word	0x0800c0ac

0800acb8 <std>:
 800acb8:	2300      	movs	r3, #0
 800acba:	b510      	push	{r4, lr}
 800acbc:	4604      	mov	r4, r0
 800acbe:	e9c0 3300 	strd	r3, r3, [r0]
 800acc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acc6:	6083      	str	r3, [r0, #8]
 800acc8:	8181      	strh	r1, [r0, #12]
 800acca:	6643      	str	r3, [r0, #100]	; 0x64
 800accc:	81c2      	strh	r2, [r0, #14]
 800acce:	6183      	str	r3, [r0, #24]
 800acd0:	4619      	mov	r1, r3
 800acd2:	2208      	movs	r2, #8
 800acd4:	305c      	adds	r0, #92	; 0x5c
 800acd6:	f7fb fc8d 	bl	80065f4 <memset>
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <std+0x38>)
 800acdc:	6263      	str	r3, [r4, #36]	; 0x24
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x3c>)
 800ace0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <std+0x40>)
 800ace4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x44>)
 800ace8:	6224      	str	r4, [r4, #32]
 800acea:	6323      	str	r3, [r4, #48]	; 0x30
 800acec:	bd10      	pop	{r4, pc}
 800acee:	bf00      	nop
 800acf0:	08007339 	.word	0x08007339
 800acf4:	0800735f 	.word	0x0800735f
 800acf8:	08007397 	.word	0x08007397
 800acfc:	080073bb 	.word	0x080073bb

0800ad00 <_cleanup_r>:
 800ad00:	4901      	ldr	r1, [pc, #4]	; (800ad08 <_cleanup_r+0x8>)
 800ad02:	f000 b8c1 	b.w	800ae88 <_fwalk_reent>
 800ad06:	bf00      	nop
 800ad08:	0800ac41 	.word	0x0800ac41

0800ad0c <__sfmoreglue>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	1e4a      	subs	r2, r1, #1
 800ad10:	2568      	movs	r5, #104	; 0x68
 800ad12:	4355      	muls	r5, r2
 800ad14:	460e      	mov	r6, r1
 800ad16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad1a:	f7ff f8ed 	bl	8009ef8 <_malloc_r>
 800ad1e:	4604      	mov	r4, r0
 800ad20:	b140      	cbz	r0, 800ad34 <__sfmoreglue+0x28>
 800ad22:	2100      	movs	r1, #0
 800ad24:	e9c0 1600 	strd	r1, r6, [r0]
 800ad28:	300c      	adds	r0, #12
 800ad2a:	60a0      	str	r0, [r4, #8]
 800ad2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad30:	f7fb fc60 	bl	80065f4 <memset>
 800ad34:	4620      	mov	r0, r4
 800ad36:	bd70      	pop	{r4, r5, r6, pc}

0800ad38 <__sfp_lock_acquire>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__sfp_lock_acquire+0x8>)
 800ad3a:	f000 b8c5 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800ad3e:	bf00      	nop
 800ad40:	200108a0 	.word	0x200108a0

0800ad44 <__sfp_lock_release>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__sfp_lock_release+0x8>)
 800ad46:	f000 b8c0 	b.w	800aeca <__retarget_lock_release_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	200108a0 	.word	0x200108a0

0800ad50 <__sinit_lock_acquire>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sinit_lock_acquire+0x8>)
 800ad52:	f000 b8b9 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800ad56:	bf00      	nop
 800ad58:	2001089b 	.word	0x2001089b

0800ad5c <__sinit_lock_release>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sinit_lock_release+0x8>)
 800ad5e:	f000 b8b4 	b.w	800aeca <__retarget_lock_release_recursive>
 800ad62:	bf00      	nop
 800ad64:	2001089b 	.word	0x2001089b

0800ad68 <__sinit>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	f7ff fff0 	bl	800ad50 <__sinit_lock_acquire>
 800ad70:	69a3      	ldr	r3, [r4, #24]
 800ad72:	b11b      	cbz	r3, 800ad7c <__sinit+0x14>
 800ad74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad78:	f7ff bff0 	b.w	800ad5c <__sinit_lock_release>
 800ad7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad80:	6523      	str	r3, [r4, #80]	; 0x50
 800ad82:	4b13      	ldr	r3, [pc, #76]	; (800add0 <__sinit+0x68>)
 800ad84:	4a13      	ldr	r2, [pc, #76]	; (800add4 <__sinit+0x6c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	bf04      	itt	eq
 800ad8e:	2301      	moveq	r3, #1
 800ad90:	61a3      	streq	r3, [r4, #24]
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 f820 	bl	800add8 <__sfp>
 800ad98:	6060      	str	r0, [r4, #4]
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 f81c 	bl	800add8 <__sfp>
 800ada0:	60a0      	str	r0, [r4, #8]
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 f818 	bl	800add8 <__sfp>
 800ada8:	2200      	movs	r2, #0
 800adaa:	60e0      	str	r0, [r4, #12]
 800adac:	2104      	movs	r1, #4
 800adae:	6860      	ldr	r0, [r4, #4]
 800adb0:	f7ff ff82 	bl	800acb8 <std>
 800adb4:	68a0      	ldr	r0, [r4, #8]
 800adb6:	2201      	movs	r2, #1
 800adb8:	2109      	movs	r1, #9
 800adba:	f7ff ff7d 	bl	800acb8 <std>
 800adbe:	68e0      	ldr	r0, [r4, #12]
 800adc0:	2202      	movs	r2, #2
 800adc2:	2112      	movs	r1, #18
 800adc4:	f7ff ff78 	bl	800acb8 <std>
 800adc8:	2301      	movs	r3, #1
 800adca:	61a3      	str	r3, [r4, #24]
 800adcc:	e7d2      	b.n	800ad74 <__sinit+0xc>
 800adce:	bf00      	nop
 800add0:	0800bc40 	.word	0x0800bc40
 800add4:	0800ad01 	.word	0x0800ad01

0800add8 <__sfp>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	4607      	mov	r7, r0
 800addc:	f7ff ffac 	bl	800ad38 <__sfp_lock_acquire>
 800ade0:	4b1e      	ldr	r3, [pc, #120]	; (800ae5c <__sfp+0x84>)
 800ade2:	681e      	ldr	r6, [r3, #0]
 800ade4:	69b3      	ldr	r3, [r6, #24]
 800ade6:	b913      	cbnz	r3, 800adee <__sfp+0x16>
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff ffbd 	bl	800ad68 <__sinit>
 800adee:	3648      	adds	r6, #72	; 0x48
 800adf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	d503      	bpl.n	800ae00 <__sfp+0x28>
 800adf8:	6833      	ldr	r3, [r6, #0]
 800adfa:	b30b      	cbz	r3, 800ae40 <__sfp+0x68>
 800adfc:	6836      	ldr	r6, [r6, #0]
 800adfe:	e7f7      	b.n	800adf0 <__sfp+0x18>
 800ae00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae04:	b9d5      	cbnz	r5, 800ae3c <__sfp+0x64>
 800ae06:	4b16      	ldr	r3, [pc, #88]	; (800ae60 <__sfp+0x88>)
 800ae08:	60e3      	str	r3, [r4, #12]
 800ae0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae10:	f000 f859 	bl	800aec6 <__retarget_lock_init_recursive>
 800ae14:	f7ff ff96 	bl	800ad44 <__sfp_lock_release>
 800ae18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae20:	6025      	str	r5, [r4, #0]
 800ae22:	61a5      	str	r5, [r4, #24]
 800ae24:	2208      	movs	r2, #8
 800ae26:	4629      	mov	r1, r5
 800ae28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae2c:	f7fb fbe2 	bl	80065f4 <memset>
 800ae30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae38:	4620      	mov	r0, r4
 800ae3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae3c:	3468      	adds	r4, #104	; 0x68
 800ae3e:	e7d9      	b.n	800adf4 <__sfp+0x1c>
 800ae40:	2104      	movs	r1, #4
 800ae42:	4638      	mov	r0, r7
 800ae44:	f7ff ff62 	bl	800ad0c <__sfmoreglue>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	6030      	str	r0, [r6, #0]
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d1d5      	bne.n	800adfc <__sfp+0x24>
 800ae50:	f7ff ff78 	bl	800ad44 <__sfp_lock_release>
 800ae54:	230c      	movs	r3, #12
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	e7ee      	b.n	800ae38 <__sfp+0x60>
 800ae5a:	bf00      	nop
 800ae5c:	0800bc40 	.word	0x0800bc40
 800ae60:	ffff0001 	.word	0xffff0001

0800ae64 <fiprintf>:
 800ae64:	b40e      	push	{r1, r2, r3}
 800ae66:	b503      	push	{r0, r1, lr}
 800ae68:	4601      	mov	r1, r0
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	4805      	ldr	r0, [pc, #20]	; (800ae84 <fiprintf+0x20>)
 800ae6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	f000 f89f 	bl	800afb8 <_vfiprintf_r>
 800ae7a:	b002      	add	sp, #8
 800ae7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae80:	b003      	add	sp, #12
 800ae82:	4770      	bx	lr
 800ae84:	20000060 	.word	0x20000060

0800ae88 <_fwalk_reent>:
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	4688      	mov	r8, r1
 800ae90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae94:	2700      	movs	r7, #0
 800ae96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae9e:	d505      	bpl.n	800aeac <_fwalk_reent+0x24>
 800aea0:	6824      	ldr	r4, [r4, #0]
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	d1f7      	bne.n	800ae96 <_fwalk_reent+0xe>
 800aea6:	4638      	mov	r0, r7
 800aea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeac:	89ab      	ldrh	r3, [r5, #12]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d907      	bls.n	800aec2 <_fwalk_reent+0x3a>
 800aeb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	d003      	beq.n	800aec2 <_fwalk_reent+0x3a>
 800aeba:	4629      	mov	r1, r5
 800aebc:	4630      	mov	r0, r6
 800aebe:	47c0      	blx	r8
 800aec0:	4307      	orrs	r7, r0
 800aec2:	3568      	adds	r5, #104	; 0x68
 800aec4:	e7e9      	b.n	800ae9a <_fwalk_reent+0x12>

0800aec6 <__retarget_lock_init_recursive>:
 800aec6:	4770      	bx	lr

0800aec8 <__retarget_lock_acquire_recursive>:
 800aec8:	4770      	bx	lr

0800aeca <__retarget_lock_release_recursive>:
 800aeca:	4770      	bx	lr

0800aecc <memmove>:
 800aecc:	4288      	cmp	r0, r1
 800aece:	b510      	push	{r4, lr}
 800aed0:	eb01 0402 	add.w	r4, r1, r2
 800aed4:	d902      	bls.n	800aedc <memmove+0x10>
 800aed6:	4284      	cmp	r4, r0
 800aed8:	4623      	mov	r3, r4
 800aeda:	d807      	bhi.n	800aeec <memmove+0x20>
 800aedc:	1e43      	subs	r3, r0, #1
 800aede:	42a1      	cmp	r1, r4
 800aee0:	d008      	beq.n	800aef4 <memmove+0x28>
 800aee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeea:	e7f8      	b.n	800aede <memmove+0x12>
 800aeec:	4402      	add	r2, r0
 800aeee:	4601      	mov	r1, r0
 800aef0:	428a      	cmp	r2, r1
 800aef2:	d100      	bne.n	800aef6 <memmove+0x2a>
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aefe:	e7f7      	b.n	800aef0 <memmove+0x24>

0800af00 <__malloc_lock>:
 800af00:	4801      	ldr	r0, [pc, #4]	; (800af08 <__malloc_lock+0x8>)
 800af02:	f7ff bfe1 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800af06:	bf00      	nop
 800af08:	2001089c 	.word	0x2001089c

0800af0c <__malloc_unlock>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__malloc_unlock+0x8>)
 800af0e:	f7ff bfdc 	b.w	800aeca <__retarget_lock_release_recursive>
 800af12:	bf00      	nop
 800af14:	2001089c 	.word	0x2001089c

0800af18 <_realloc_r>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	4607      	mov	r7, r0
 800af1c:	4614      	mov	r4, r2
 800af1e:	460e      	mov	r6, r1
 800af20:	b921      	cbnz	r1, 800af2c <_realloc_r+0x14>
 800af22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af26:	4611      	mov	r1, r2
 800af28:	f7fe bfe6 	b.w	8009ef8 <_malloc_r>
 800af2c:	b922      	cbnz	r2, 800af38 <_realloc_r+0x20>
 800af2e:	f7fe ff93 	bl	8009e58 <_free_r>
 800af32:	4625      	mov	r5, r4
 800af34:	4628      	mov	r0, r5
 800af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af38:	f000 fa9a 	bl	800b470 <_malloc_usable_size_r>
 800af3c:	42a0      	cmp	r0, r4
 800af3e:	d20f      	bcs.n	800af60 <_realloc_r+0x48>
 800af40:	4621      	mov	r1, r4
 800af42:	4638      	mov	r0, r7
 800af44:	f7fe ffd8 	bl	8009ef8 <_malloc_r>
 800af48:	4605      	mov	r5, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d0f2      	beq.n	800af34 <_realloc_r+0x1c>
 800af4e:	4631      	mov	r1, r6
 800af50:	4622      	mov	r2, r4
 800af52:	f7fe faa7 	bl	80094a4 <memcpy>
 800af56:	4631      	mov	r1, r6
 800af58:	4638      	mov	r0, r7
 800af5a:	f7fe ff7d 	bl	8009e58 <_free_r>
 800af5e:	e7e9      	b.n	800af34 <_realloc_r+0x1c>
 800af60:	4635      	mov	r5, r6
 800af62:	e7e7      	b.n	800af34 <_realloc_r+0x1c>

0800af64 <__sfputc_r>:
 800af64:	6893      	ldr	r3, [r2, #8]
 800af66:	3b01      	subs	r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	b410      	push	{r4}
 800af6c:	6093      	str	r3, [r2, #8]
 800af6e:	da08      	bge.n	800af82 <__sfputc_r+0x1e>
 800af70:	6994      	ldr	r4, [r2, #24]
 800af72:	42a3      	cmp	r3, r4
 800af74:	db01      	blt.n	800af7a <__sfputc_r+0x16>
 800af76:	290a      	cmp	r1, #10
 800af78:	d103      	bne.n	800af82 <__sfputc_r+0x1e>
 800af7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7e:	f000 b94b 	b.w	800b218 <__swbuf_r>
 800af82:	6813      	ldr	r3, [r2, #0]
 800af84:	1c58      	adds	r0, r3, #1
 800af86:	6010      	str	r0, [r2, #0]
 800af88:	7019      	strb	r1, [r3, #0]
 800af8a:	4608      	mov	r0, r1
 800af8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <__sfputs_r>:
 800af92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af94:	4606      	mov	r6, r0
 800af96:	460f      	mov	r7, r1
 800af98:	4614      	mov	r4, r2
 800af9a:	18d5      	adds	r5, r2, r3
 800af9c:	42ac      	cmp	r4, r5
 800af9e:	d101      	bne.n	800afa4 <__sfputs_r+0x12>
 800afa0:	2000      	movs	r0, #0
 800afa2:	e007      	b.n	800afb4 <__sfputs_r+0x22>
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	463a      	mov	r2, r7
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff ffda 	bl	800af64 <__sfputc_r>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d1f3      	bne.n	800af9c <__sfputs_r+0xa>
 800afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afb8 <_vfiprintf_r>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	460d      	mov	r5, r1
 800afbe:	b09d      	sub	sp, #116	; 0x74
 800afc0:	4614      	mov	r4, r2
 800afc2:	4698      	mov	r8, r3
 800afc4:	4606      	mov	r6, r0
 800afc6:	b118      	cbz	r0, 800afd0 <_vfiprintf_r+0x18>
 800afc8:	6983      	ldr	r3, [r0, #24]
 800afca:	b90b      	cbnz	r3, 800afd0 <_vfiprintf_r+0x18>
 800afcc:	f7ff fecc 	bl	800ad68 <__sinit>
 800afd0:	4b89      	ldr	r3, [pc, #548]	; (800b1f8 <_vfiprintf_r+0x240>)
 800afd2:	429d      	cmp	r5, r3
 800afd4:	d11b      	bne.n	800b00e <_vfiprintf_r+0x56>
 800afd6:	6875      	ldr	r5, [r6, #4]
 800afd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afda:	07d9      	lsls	r1, r3, #31
 800afdc:	d405      	bmi.n	800afea <_vfiprintf_r+0x32>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	059a      	lsls	r2, r3, #22
 800afe2:	d402      	bmi.n	800afea <_vfiprintf_r+0x32>
 800afe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe6:	f7ff ff6f 	bl	800aec8 <__retarget_lock_acquire_recursive>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	071b      	lsls	r3, r3, #28
 800afee:	d501      	bpl.n	800aff4 <_vfiprintf_r+0x3c>
 800aff0:	692b      	ldr	r3, [r5, #16]
 800aff2:	b9eb      	cbnz	r3, 800b030 <_vfiprintf_r+0x78>
 800aff4:	4629      	mov	r1, r5
 800aff6:	4630      	mov	r0, r6
 800aff8:	f000 f960 	bl	800b2bc <__swsetup_r>
 800affc:	b1c0      	cbz	r0, 800b030 <_vfiprintf_r+0x78>
 800affe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b000:	07dc      	lsls	r4, r3, #31
 800b002:	d50e      	bpl.n	800b022 <_vfiprintf_r+0x6a>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	b01d      	add	sp, #116	; 0x74
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00e:	4b7b      	ldr	r3, [pc, #492]	; (800b1fc <_vfiprintf_r+0x244>)
 800b010:	429d      	cmp	r5, r3
 800b012:	d101      	bne.n	800b018 <_vfiprintf_r+0x60>
 800b014:	68b5      	ldr	r5, [r6, #8]
 800b016:	e7df      	b.n	800afd8 <_vfiprintf_r+0x20>
 800b018:	4b79      	ldr	r3, [pc, #484]	; (800b200 <_vfiprintf_r+0x248>)
 800b01a:	429d      	cmp	r5, r3
 800b01c:	bf08      	it	eq
 800b01e:	68f5      	ldreq	r5, [r6, #12]
 800b020:	e7da      	b.n	800afd8 <_vfiprintf_r+0x20>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	0598      	lsls	r0, r3, #22
 800b026:	d4ed      	bmi.n	800b004 <_vfiprintf_r+0x4c>
 800b028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02a:	f7ff ff4e 	bl	800aeca <__retarget_lock_release_recursive>
 800b02e:	e7e9      	b.n	800b004 <_vfiprintf_r+0x4c>
 800b030:	2300      	movs	r3, #0
 800b032:	9309      	str	r3, [sp, #36]	; 0x24
 800b034:	2320      	movs	r3, #32
 800b036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b03e:	2330      	movs	r3, #48	; 0x30
 800b040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b204 <_vfiprintf_r+0x24c>
 800b044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b048:	f04f 0901 	mov.w	r9, #1
 800b04c:	4623      	mov	r3, r4
 800b04e:	469a      	mov	sl, r3
 800b050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b054:	b10a      	cbz	r2, 800b05a <_vfiprintf_r+0xa2>
 800b056:	2a25      	cmp	r2, #37	; 0x25
 800b058:	d1f9      	bne.n	800b04e <_vfiprintf_r+0x96>
 800b05a:	ebba 0b04 	subs.w	fp, sl, r4
 800b05e:	d00b      	beq.n	800b078 <_vfiprintf_r+0xc0>
 800b060:	465b      	mov	r3, fp
 800b062:	4622      	mov	r2, r4
 800b064:	4629      	mov	r1, r5
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff ff93 	bl	800af92 <__sfputs_r>
 800b06c:	3001      	adds	r0, #1
 800b06e:	f000 80aa 	beq.w	800b1c6 <_vfiprintf_r+0x20e>
 800b072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b074:	445a      	add	r2, fp
 800b076:	9209      	str	r2, [sp, #36]	; 0x24
 800b078:	f89a 3000 	ldrb.w	r3, [sl]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80a2 	beq.w	800b1c6 <_vfiprintf_r+0x20e>
 800b082:	2300      	movs	r3, #0
 800b084:	f04f 32ff 	mov.w	r2, #4294967295
 800b088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b08c:	f10a 0a01 	add.w	sl, sl, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	9307      	str	r3, [sp, #28]
 800b094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b098:	931a      	str	r3, [sp, #104]	; 0x68
 800b09a:	4654      	mov	r4, sl
 800b09c:	2205      	movs	r2, #5
 800b09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a2:	4858      	ldr	r0, [pc, #352]	; (800b204 <_vfiprintf_r+0x24c>)
 800b0a4:	f7f5 f8d4 	bl	8000250 <memchr>
 800b0a8:	9a04      	ldr	r2, [sp, #16]
 800b0aa:	b9d8      	cbnz	r0, 800b0e4 <_vfiprintf_r+0x12c>
 800b0ac:	06d1      	lsls	r1, r2, #27
 800b0ae:	bf44      	itt	mi
 800b0b0:	2320      	movmi	r3, #32
 800b0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b6:	0713      	lsls	r3, r2, #28
 800b0b8:	bf44      	itt	mi
 800b0ba:	232b      	movmi	r3, #43	; 0x2b
 800b0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c6:	d015      	beq.n	800b0f4 <_vfiprintf_r+0x13c>
 800b0c8:	9a07      	ldr	r2, [sp, #28]
 800b0ca:	4654      	mov	r4, sl
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d8:	3b30      	subs	r3, #48	; 0x30
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d94e      	bls.n	800b17c <_vfiprintf_r+0x1c4>
 800b0de:	b1b0      	cbz	r0, 800b10e <_vfiprintf_r+0x156>
 800b0e0:	9207      	str	r2, [sp, #28]
 800b0e2:	e014      	b.n	800b10e <_vfiprintf_r+0x156>
 800b0e4:	eba0 0308 	sub.w	r3, r0, r8
 800b0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	46a2      	mov	sl, r4
 800b0f2:	e7d2      	b.n	800b09a <_vfiprintf_r+0xe2>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	1d19      	adds	r1, r3, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	9103      	str	r1, [sp, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfbb      	ittet	lt
 800b100:	425b      	neglt	r3, r3
 800b102:	f042 0202 	orrlt.w	r2, r2, #2
 800b106:	9307      	strge	r3, [sp, #28]
 800b108:	9307      	strlt	r3, [sp, #28]
 800b10a:	bfb8      	it	lt
 800b10c:	9204      	strlt	r2, [sp, #16]
 800b10e:	7823      	ldrb	r3, [r4, #0]
 800b110:	2b2e      	cmp	r3, #46	; 0x2e
 800b112:	d10c      	bne.n	800b12e <_vfiprintf_r+0x176>
 800b114:	7863      	ldrb	r3, [r4, #1]
 800b116:	2b2a      	cmp	r3, #42	; 0x2a
 800b118:	d135      	bne.n	800b186 <_vfiprintf_r+0x1ce>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	1d1a      	adds	r2, r3, #4
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	9203      	str	r2, [sp, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfb8      	it	lt
 800b126:	f04f 33ff 	movlt.w	r3, #4294967295
 800b12a:	3402      	adds	r4, #2
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b214 <_vfiprintf_r+0x25c>
 800b132:	7821      	ldrb	r1, [r4, #0]
 800b134:	2203      	movs	r2, #3
 800b136:	4650      	mov	r0, sl
 800b138:	f7f5 f88a 	bl	8000250 <memchr>
 800b13c:	b140      	cbz	r0, 800b150 <_vfiprintf_r+0x198>
 800b13e:	2340      	movs	r3, #64	; 0x40
 800b140:	eba0 000a 	sub.w	r0, r0, sl
 800b144:	fa03 f000 	lsl.w	r0, r3, r0
 800b148:	9b04      	ldr	r3, [sp, #16]
 800b14a:	4303      	orrs	r3, r0
 800b14c:	3401      	adds	r4, #1
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	482c      	ldr	r0, [pc, #176]	; (800b208 <_vfiprintf_r+0x250>)
 800b156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b15a:	2206      	movs	r2, #6
 800b15c:	f7f5 f878 	bl	8000250 <memchr>
 800b160:	2800      	cmp	r0, #0
 800b162:	d03f      	beq.n	800b1e4 <_vfiprintf_r+0x22c>
 800b164:	4b29      	ldr	r3, [pc, #164]	; (800b20c <_vfiprintf_r+0x254>)
 800b166:	bb1b      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x1f8>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	3307      	adds	r3, #7
 800b16c:	f023 0307 	bic.w	r3, r3, #7
 800b170:	3308      	adds	r3, #8
 800b172:	9303      	str	r3, [sp, #12]
 800b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b176:	443b      	add	r3, r7
 800b178:	9309      	str	r3, [sp, #36]	; 0x24
 800b17a:	e767      	b.n	800b04c <_vfiprintf_r+0x94>
 800b17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b180:	460c      	mov	r4, r1
 800b182:	2001      	movs	r0, #1
 800b184:	e7a5      	b.n	800b0d2 <_vfiprintf_r+0x11a>
 800b186:	2300      	movs	r3, #0
 800b188:	3401      	adds	r4, #1
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	4619      	mov	r1, r3
 800b18e:	f04f 0c0a 	mov.w	ip, #10
 800b192:	4620      	mov	r0, r4
 800b194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b198:	3a30      	subs	r2, #48	; 0x30
 800b19a:	2a09      	cmp	r2, #9
 800b19c:	d903      	bls.n	800b1a6 <_vfiprintf_r+0x1ee>
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d0c5      	beq.n	800b12e <_vfiprintf_r+0x176>
 800b1a2:	9105      	str	r1, [sp, #20]
 800b1a4:	e7c3      	b.n	800b12e <_vfiprintf_r+0x176>
 800b1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e7f0      	b.n	800b192 <_vfiprintf_r+0x1da>
 800b1b0:	ab03      	add	r3, sp, #12
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4b16      	ldr	r3, [pc, #88]	; (800b210 <_vfiprintf_r+0x258>)
 800b1b8:	a904      	add	r1, sp, #16
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7fb fab4 	bl	8006728 <_printf_float>
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	1c78      	adds	r0, r7, #1
 800b1c4:	d1d6      	bne.n	800b174 <_vfiprintf_r+0x1bc>
 800b1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c8:	07d9      	lsls	r1, r3, #31
 800b1ca:	d405      	bmi.n	800b1d8 <_vfiprintf_r+0x220>
 800b1cc:	89ab      	ldrh	r3, [r5, #12]
 800b1ce:	059a      	lsls	r2, r3, #22
 800b1d0:	d402      	bmi.n	800b1d8 <_vfiprintf_r+0x220>
 800b1d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d4:	f7ff fe79 	bl	800aeca <__retarget_lock_release_recursive>
 800b1d8:	89ab      	ldrh	r3, [r5, #12]
 800b1da:	065b      	lsls	r3, r3, #25
 800b1dc:	f53f af12 	bmi.w	800b004 <_vfiprintf_r+0x4c>
 800b1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1e2:	e711      	b.n	800b008 <_vfiprintf_r+0x50>
 800b1e4:	ab03      	add	r3, sp, #12
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <_vfiprintf_r+0x258>)
 800b1ec:	a904      	add	r1, sp, #16
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7fb fd26 	bl	8006c40 <_printf_i>
 800b1f4:	e7e4      	b.n	800b1c0 <_vfiprintf_r+0x208>
 800b1f6:	bf00      	nop
 800b1f8:	0800c0cc 	.word	0x0800c0cc
 800b1fc:	0800c0ec 	.word	0x0800c0ec
 800b200:	0800c0ac 	.word	0x0800c0ac
 800b204:	0800c044 	.word	0x0800c044
 800b208:	0800c04e 	.word	0x0800c04e
 800b20c:	08006729 	.word	0x08006729
 800b210:	0800af93 	.word	0x0800af93
 800b214:	0800c04a 	.word	0x0800c04a

0800b218 <__swbuf_r>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	460e      	mov	r6, r1
 800b21c:	4614      	mov	r4, r2
 800b21e:	4605      	mov	r5, r0
 800b220:	b118      	cbz	r0, 800b22a <__swbuf_r+0x12>
 800b222:	6983      	ldr	r3, [r0, #24]
 800b224:	b90b      	cbnz	r3, 800b22a <__swbuf_r+0x12>
 800b226:	f7ff fd9f 	bl	800ad68 <__sinit>
 800b22a:	4b21      	ldr	r3, [pc, #132]	; (800b2b0 <__swbuf_r+0x98>)
 800b22c:	429c      	cmp	r4, r3
 800b22e:	d12b      	bne.n	800b288 <__swbuf_r+0x70>
 800b230:	686c      	ldr	r4, [r5, #4]
 800b232:	69a3      	ldr	r3, [r4, #24]
 800b234:	60a3      	str	r3, [r4, #8]
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	071a      	lsls	r2, r3, #28
 800b23a:	d52f      	bpl.n	800b29c <__swbuf_r+0x84>
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	b36b      	cbz	r3, 800b29c <__swbuf_r+0x84>
 800b240:	6923      	ldr	r3, [r4, #16]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	6963      	ldr	r3, [r4, #20]
 800b248:	b2f6      	uxtb	r6, r6
 800b24a:	4283      	cmp	r3, r0
 800b24c:	4637      	mov	r7, r6
 800b24e:	dc04      	bgt.n	800b25a <__swbuf_r+0x42>
 800b250:	4621      	mov	r1, r4
 800b252:	4628      	mov	r0, r5
 800b254:	f7ff fcf4 	bl	800ac40 <_fflush_r>
 800b258:	bb30      	cbnz	r0, 800b2a8 <__swbuf_r+0x90>
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	60a3      	str	r3, [r4, #8]
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	6022      	str	r2, [r4, #0]
 800b266:	701e      	strb	r6, [r3, #0]
 800b268:	6963      	ldr	r3, [r4, #20]
 800b26a:	3001      	adds	r0, #1
 800b26c:	4283      	cmp	r3, r0
 800b26e:	d004      	beq.n	800b27a <__swbuf_r+0x62>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	07db      	lsls	r3, r3, #31
 800b274:	d506      	bpl.n	800b284 <__swbuf_r+0x6c>
 800b276:	2e0a      	cmp	r6, #10
 800b278:	d104      	bne.n	800b284 <__swbuf_r+0x6c>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7ff fcdf 	bl	800ac40 <_fflush_r>
 800b282:	b988      	cbnz	r0, 800b2a8 <__swbuf_r+0x90>
 800b284:	4638      	mov	r0, r7
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <__swbuf_r+0x9c>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d101      	bne.n	800b292 <__swbuf_r+0x7a>
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	e7cf      	b.n	800b232 <__swbuf_r+0x1a>
 800b292:	4b09      	ldr	r3, [pc, #36]	; (800b2b8 <__swbuf_r+0xa0>)
 800b294:	429c      	cmp	r4, r3
 800b296:	bf08      	it	eq
 800b298:	68ec      	ldreq	r4, [r5, #12]
 800b29a:	e7ca      	b.n	800b232 <__swbuf_r+0x1a>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f80c 	bl	800b2bc <__swsetup_r>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d0cb      	beq.n	800b240 <__swbuf_r+0x28>
 800b2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b2ac:	e7ea      	b.n	800b284 <__swbuf_r+0x6c>
 800b2ae:	bf00      	nop
 800b2b0:	0800c0cc 	.word	0x0800c0cc
 800b2b4:	0800c0ec 	.word	0x0800c0ec
 800b2b8:	0800c0ac 	.word	0x0800c0ac

0800b2bc <__swsetup_r>:
 800b2bc:	4b32      	ldr	r3, [pc, #200]	; (800b388 <__swsetup_r+0xcc>)
 800b2be:	b570      	push	{r4, r5, r6, lr}
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	b125      	cbz	r5, 800b2d2 <__swsetup_r+0x16>
 800b2c8:	69ab      	ldr	r3, [r5, #24]
 800b2ca:	b913      	cbnz	r3, 800b2d2 <__swsetup_r+0x16>
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f7ff fd4b 	bl	800ad68 <__sinit>
 800b2d2:	4b2e      	ldr	r3, [pc, #184]	; (800b38c <__swsetup_r+0xd0>)
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	d10f      	bne.n	800b2f8 <__swsetup_r+0x3c>
 800b2d8:	686c      	ldr	r4, [r5, #4]
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2e0:	0719      	lsls	r1, r3, #28
 800b2e2:	d42c      	bmi.n	800b33e <__swsetup_r+0x82>
 800b2e4:	06dd      	lsls	r5, r3, #27
 800b2e6:	d411      	bmi.n	800b30c <__swsetup_r+0x50>
 800b2e8:	2309      	movs	r3, #9
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f6:	e03e      	b.n	800b376 <__swsetup_r+0xba>
 800b2f8:	4b25      	ldr	r3, [pc, #148]	; (800b390 <__swsetup_r+0xd4>)
 800b2fa:	429c      	cmp	r4, r3
 800b2fc:	d101      	bne.n	800b302 <__swsetup_r+0x46>
 800b2fe:	68ac      	ldr	r4, [r5, #8]
 800b300:	e7eb      	b.n	800b2da <__swsetup_r+0x1e>
 800b302:	4b24      	ldr	r3, [pc, #144]	; (800b394 <__swsetup_r+0xd8>)
 800b304:	429c      	cmp	r4, r3
 800b306:	bf08      	it	eq
 800b308:	68ec      	ldreq	r4, [r5, #12]
 800b30a:	e7e6      	b.n	800b2da <__swsetup_r+0x1e>
 800b30c:	0758      	lsls	r0, r3, #29
 800b30e:	d512      	bpl.n	800b336 <__swsetup_r+0x7a>
 800b310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b312:	b141      	cbz	r1, 800b326 <__swsetup_r+0x6a>
 800b314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b318:	4299      	cmp	r1, r3
 800b31a:	d002      	beq.n	800b322 <__swsetup_r+0x66>
 800b31c:	4630      	mov	r0, r6
 800b31e:	f7fe fd9b 	bl	8009e58 <_free_r>
 800b322:	2300      	movs	r3, #0
 800b324:	6363      	str	r3, [r4, #52]	; 0x34
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	2300      	movs	r3, #0
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f043 0308 	orr.w	r3, r3, #8
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	6923      	ldr	r3, [r4, #16]
 800b340:	b94b      	cbnz	r3, 800b356 <__swsetup_r+0x9a>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b34c:	d003      	beq.n	800b356 <__swsetup_r+0x9a>
 800b34e:	4621      	mov	r1, r4
 800b350:	4630      	mov	r0, r6
 800b352:	f000 f84d 	bl	800b3f0 <__smakebuf_r>
 800b356:	89a0      	ldrh	r0, [r4, #12]
 800b358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b35c:	f010 0301 	ands.w	r3, r0, #1
 800b360:	d00a      	beq.n	800b378 <__swsetup_r+0xbc>
 800b362:	2300      	movs	r3, #0
 800b364:	60a3      	str	r3, [r4, #8]
 800b366:	6963      	ldr	r3, [r4, #20]
 800b368:	425b      	negs	r3, r3
 800b36a:	61a3      	str	r3, [r4, #24]
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	b943      	cbnz	r3, 800b382 <__swsetup_r+0xc6>
 800b370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b374:	d1ba      	bne.n	800b2ec <__swsetup_r+0x30>
 800b376:	bd70      	pop	{r4, r5, r6, pc}
 800b378:	0781      	lsls	r1, r0, #30
 800b37a:	bf58      	it	pl
 800b37c:	6963      	ldrpl	r3, [r4, #20]
 800b37e:	60a3      	str	r3, [r4, #8]
 800b380:	e7f4      	b.n	800b36c <__swsetup_r+0xb0>
 800b382:	2000      	movs	r0, #0
 800b384:	e7f7      	b.n	800b376 <__swsetup_r+0xba>
 800b386:	bf00      	nop
 800b388:	20000060 	.word	0x20000060
 800b38c:	0800c0cc 	.word	0x0800c0cc
 800b390:	0800c0ec 	.word	0x0800c0ec
 800b394:	0800c0ac 	.word	0x0800c0ac

0800b398 <abort>:
 800b398:	b508      	push	{r3, lr}
 800b39a:	2006      	movs	r0, #6
 800b39c:	f000 f898 	bl	800b4d0 <raise>
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f7f6 fd27 	bl	8001df4 <_exit>

0800b3a6 <__swhatbuf_r>:
 800b3a6:	b570      	push	{r4, r5, r6, lr}
 800b3a8:	460e      	mov	r6, r1
 800b3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ae:	2900      	cmp	r1, #0
 800b3b0:	b096      	sub	sp, #88	; 0x58
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	461d      	mov	r5, r3
 800b3b6:	da07      	bge.n	800b3c8 <__swhatbuf_r+0x22>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	89b3      	ldrh	r3, [r6, #12]
 800b3be:	061a      	lsls	r2, r3, #24
 800b3c0:	d410      	bmi.n	800b3e4 <__swhatbuf_r+0x3e>
 800b3c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3c6:	e00e      	b.n	800b3e6 <__swhatbuf_r+0x40>
 800b3c8:	466a      	mov	r2, sp
 800b3ca:	f000 f89d 	bl	800b508 <_fstat_r>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	dbf2      	blt.n	800b3b8 <__swhatbuf_r+0x12>
 800b3d2:	9a01      	ldr	r2, [sp, #4]
 800b3d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3dc:	425a      	negs	r2, r3
 800b3de:	415a      	adcs	r2, r3
 800b3e0:	602a      	str	r2, [r5, #0]
 800b3e2:	e7ee      	b.n	800b3c2 <__swhatbuf_r+0x1c>
 800b3e4:	2340      	movs	r3, #64	; 0x40
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	b016      	add	sp, #88	; 0x58
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3f0 <__smakebuf_r>:
 800b3f0:	898b      	ldrh	r3, [r1, #12]
 800b3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f4:	079d      	lsls	r5, r3, #30
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	d507      	bpl.n	800b40c <__smakebuf_r+0x1c>
 800b3fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	2301      	movs	r3, #1
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	b002      	add	sp, #8
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	ab01      	add	r3, sp, #4
 800b40e:	466a      	mov	r2, sp
 800b410:	f7ff ffc9 	bl	800b3a6 <__swhatbuf_r>
 800b414:	9900      	ldr	r1, [sp, #0]
 800b416:	4605      	mov	r5, r0
 800b418:	4630      	mov	r0, r6
 800b41a:	f7fe fd6d 	bl	8009ef8 <_malloc_r>
 800b41e:	b948      	cbnz	r0, 800b434 <__smakebuf_r+0x44>
 800b420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b424:	059a      	lsls	r2, r3, #22
 800b426:	d4ef      	bmi.n	800b408 <__smakebuf_r+0x18>
 800b428:	f023 0303 	bic.w	r3, r3, #3
 800b42c:	f043 0302 	orr.w	r3, r3, #2
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	e7e3      	b.n	800b3fc <__smakebuf_r+0xc>
 800b434:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <__smakebuf_r+0x7c>)
 800b436:	62b3      	str	r3, [r6, #40]	; 0x28
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	6020      	str	r0, [r4, #0]
 800b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	9b00      	ldr	r3, [sp, #0]
 800b444:	6163      	str	r3, [r4, #20]
 800b446:	9b01      	ldr	r3, [sp, #4]
 800b448:	6120      	str	r0, [r4, #16]
 800b44a:	b15b      	cbz	r3, 800b464 <__smakebuf_r+0x74>
 800b44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b450:	4630      	mov	r0, r6
 800b452:	f000 f86b 	bl	800b52c <_isatty_r>
 800b456:	b128      	cbz	r0, 800b464 <__smakebuf_r+0x74>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	f023 0303 	bic.w	r3, r3, #3
 800b45e:	f043 0301 	orr.w	r3, r3, #1
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	89a0      	ldrh	r0, [r4, #12]
 800b466:	4305      	orrs	r5, r0
 800b468:	81a5      	strh	r5, [r4, #12]
 800b46a:	e7cd      	b.n	800b408 <__smakebuf_r+0x18>
 800b46c:	0800ad01 	.word	0x0800ad01

0800b470 <_malloc_usable_size_r>:
 800b470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b474:	1f18      	subs	r0, r3, #4
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfbc      	itt	lt
 800b47a:	580b      	ldrlt	r3, [r1, r0]
 800b47c:	18c0      	addlt	r0, r0, r3
 800b47e:	4770      	bx	lr

0800b480 <_raise_r>:
 800b480:	291f      	cmp	r1, #31
 800b482:	b538      	push	{r3, r4, r5, lr}
 800b484:	4604      	mov	r4, r0
 800b486:	460d      	mov	r5, r1
 800b488:	d904      	bls.n	800b494 <_raise_r+0x14>
 800b48a:	2316      	movs	r3, #22
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	f04f 30ff 	mov.w	r0, #4294967295
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b496:	b112      	cbz	r2, 800b49e <_raise_r+0x1e>
 800b498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b49c:	b94b      	cbnz	r3, 800b4b2 <_raise_r+0x32>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 f830 	bl	800b504 <_getpid_r>
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4ae:	f000 b817 	b.w	800b4e0 <_kill_r>
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d00a      	beq.n	800b4cc <_raise_r+0x4c>
 800b4b6:	1c59      	adds	r1, r3, #1
 800b4b8:	d103      	bne.n	800b4c2 <_raise_r+0x42>
 800b4ba:	2316      	movs	r3, #22
 800b4bc:	6003      	str	r3, [r0, #0]
 800b4be:	2001      	movs	r0, #1
 800b4c0:	e7e7      	b.n	800b492 <_raise_r+0x12>
 800b4c2:	2400      	movs	r4, #0
 800b4c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	4798      	blx	r3
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e7e0      	b.n	800b492 <_raise_r+0x12>

0800b4d0 <raise>:
 800b4d0:	4b02      	ldr	r3, [pc, #8]	; (800b4dc <raise+0xc>)
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	6818      	ldr	r0, [r3, #0]
 800b4d6:	f7ff bfd3 	b.w	800b480 <_raise_r>
 800b4da:	bf00      	nop
 800b4dc:	20000060 	.word	0x20000060

0800b4e0 <_kill_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d07      	ldr	r5, [pc, #28]	; (800b500 <_kill_r+0x20>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	f7f6 fc71 	bl	8001dd4 <_kill>
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	d102      	bne.n	800b4fc <_kill_r+0x1c>
 800b4f6:	682b      	ldr	r3, [r5, #0]
 800b4f8:	b103      	cbz	r3, 800b4fc <_kill_r+0x1c>
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	bf00      	nop
 800b500:	20010894 	.word	0x20010894

0800b504 <_getpid_r>:
 800b504:	f7f6 bc5e 	b.w	8001dc4 <_getpid>

0800b508 <_fstat_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d07      	ldr	r5, [pc, #28]	; (800b528 <_fstat_r+0x20>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f7f6 fcbc 	bl	8001e92 <_fstat>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d102      	bne.n	800b524 <_fstat_r+0x1c>
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	b103      	cbz	r3, 800b524 <_fstat_r+0x1c>
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	bd38      	pop	{r3, r4, r5, pc}
 800b526:	bf00      	nop
 800b528:	20010894 	.word	0x20010894

0800b52c <_isatty_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d06      	ldr	r5, [pc, #24]	; (800b548 <_isatty_r+0x1c>)
 800b530:	2300      	movs	r3, #0
 800b532:	4604      	mov	r4, r0
 800b534:	4608      	mov	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7f6 fcbb 	bl	8001eb2 <_isatty>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_isatty_r+0x1a>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_isatty_r+0x1a>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	20010894 	.word	0x20010894

0800b54c <_init>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	bf00      	nop
 800b550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b552:	bc08      	pop	{r3}
 800b554:	469e      	mov	lr, r3
 800b556:	4770      	bx	lr

0800b558 <_fini>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	bf00      	nop
 800b55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55e:	bc08      	pop	{r3}
 800b560:	469e      	mov	lr, r3
 800b562:	4770      	bx	lr
