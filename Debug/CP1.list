
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005534  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b5c  08005b5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b64  08005b64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101d0  20000070  08005bdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010240  08005bdc  00020240  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e030  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f10  00000000  00000000  0002e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747d  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c087  00000000  00000000  00058485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a48  00000000  00000000  0006450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  00155fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800571c 	.word	0x0800571c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800571c 	.word	0x0800571c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_GPIO_Init+0x8c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_GPIO_Init+0x8c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2101      	movs	r1, #1
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0x90>)
 800064c:	f001 fa3c 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000650:	2301      	movs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x90>)
 8000668:	f001 f882 	bl	8001770 <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a0      	sub	sp, #128	; 0x80
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fe74 	bl	800136e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f82b 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f7ff ffad 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fcc7 	bl	8001020 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	4910      	ldr	r1, [pc, #64]	; (80006d8 <main+0x5c>)
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <main+0x60>)
 8000698:	f002 fc14 	bl	8002ec4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 800069c:	f000 fd70 	bl	8001180 <has_message_from_UART>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0fa      	beq.n	800069c <main+0x20>
	  {
		  uint8_t message[128];
		  read_UART((char*)message);
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fdc3 	bl	8001234 <read_UART>

		  exec_command(check_command((char*)message),(char*)message);
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f885 	bl	80007c0 <check_command>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f000 f8dc 	bl	800087c <exec_command>
		  }
		  else
			  send_UART("Invalid instruction.");
		   */

		  while(is_transmitting_to_UART());
 80006c4:	bf00      	nop
 80006c6:	f000 fd67 	bl	8001198 <is_transmitting_to_UART>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1fa      	bne.n	80006c6 <main+0x4a>

		  reset_UART();
 80006d0:	f000 fd6e 	bl	80011b0 <reset_UART>
	  if(has_message_from_UART())
 80006d4:	e7e2      	b.n	800069c <main+0x20>
 80006d6:	bf00      	nop
 80006d8:	20000098 	.word	0x20000098
 80006dc:	200101a8 	.word	0x200101a8

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fef6 	bl	80044e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xd8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xd8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a25      	ldr	r2, [pc, #148]	; (80007bc <SystemClock_Config+0xdc>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xdc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fa19 	bl	8001b9c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 fbb0 	bl	8000ed4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000774:	f001 f9c2 	bl	8001afc <HAL_PWREx_EnableOverDrive>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800077e:	f000 fba9 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2103      	movs	r1, #3
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fcaa 	bl	80020f8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007aa:	f000 fb93 	bl	8000ed4 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <check_command>:

/* USER CODE BEGIN 4 */

char check_command(char* message)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(!strncmp((char*) message, "MR ", 3))
 80007c8:	2203      	movs	r2, #3
 80007ca:	4925      	ldr	r1, [pc, #148]	; (8000860 <check_command+0xa0>)
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f003 fedd 	bl	800458c <strncmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <check_command+0x1c>
		return MR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e03c      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "MW ", 3))
 80007dc:	2203      	movs	r2, #3
 80007de:	4921      	ldr	r1, [pc, #132]	; (8000864 <check_command+0xa4>)
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f003 fed3 	bl	800458c <strncmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <check_command+0x30>
		return MW;
 80007ec:	2302      	movs	r3, #2
 80007ee:	e032      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "MI ", 3))
 80007f0:	2203      	movs	r2, #3
 80007f2:	491d      	ldr	r1, [pc, #116]	; (8000868 <check_command+0xa8>)
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f003 fec9 	bl	800458c <strncmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <check_command+0x44>
		return MI;
 8000800:	2303      	movs	r3, #3
 8000802:	e028      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "MO ", 3))
 8000804:	2203      	movs	r2, #3
 8000806:	4919      	ldr	r1, [pc, #100]	; (800086c <check_command+0xac>)
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f003 febf 	bl	800458c <strncmp>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <check_command+0x58>
		return MO;
 8000814:	2304      	movs	r3, #4
 8000816:	e01e      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "RD ", 3))
 8000818:	2203      	movs	r2, #3
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <check_command+0xb0>)
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f003 feb5 	bl	800458c <strncmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <check_command+0x6c>
		return RD;
 8000828:	2305      	movs	r3, #5
 800082a:	e014      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "WD ", 3))
 800082c:	2203      	movs	r2, #3
 800082e:	4911      	ldr	r1, [pc, #68]	; (8000874 <check_command+0xb4>)
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f003 feab 	bl	800458c <strncmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <check_command+0x80>
		return WD;
 800083c:	2306      	movs	r3, #6
 800083e:	e00a      	b.n	8000856 <check_command+0x96>

	else if(!strncmp((char*) message, "RA ", 3))
 8000840:	2203      	movs	r2, #3
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <check_command+0xb8>)
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f003 fea1 	bl	800458c <strncmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <check_command+0x94>
		return RA;
 8000850:	2307      	movs	r3, #7
 8000852:	e000      	b.n	8000856 <check_command+0x96>

	else return INV;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08005734 	.word	0x08005734
 8000864:	08005738 	.word	0x08005738
 8000868:	0800573c 	.word	0x0800573c
 800086c:	08005740 	.word	0x08005740
 8000870:	08005744 	.word	0x08005744
 8000874:	08005748 	.word	0x08005748
 8000878:	0800574c 	.word	0x0800574c

0800087c <exec_command>:

void exec_command(char command,char* message)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af02      	add	r7, sp, #8
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
	unsigned int addr, length, data, port_addr, pin_setting;

	switch(command){
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b07      	cmp	r3, #7
 800088c:	f200 80dd 	bhi.w	8000a4a <exec_command+0x1ce>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <exec_command+0x1c>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008b9 	.word	0x080008b9
 800089c:	080008c1 	.word	0x080008c1
 80008a0:	08000983 	.word	0x08000983
 80008a4:	080009cb 	.word	0x080009cb
 80008a8:	08000a0b 	.word	0x08000a0b
 80008ac:	08000a4b 	.word	0x08000a4b
 80008b0:	08000a4b 	.word	0x08000a4b
 80008b4:	08000a4b 	.word	0x08000a4b
		case 0:

			send_UART("Invalid instruction.");
 80008b8:	4866      	ldr	r0, [pc, #408]	; (8000a54 <exec_command+0x1d8>)
 80008ba:	f000 fc91 	bl	80011e0 <send_UART>

			break;
 80008be:	e0c5      	b.n	8000a4c <exec_command+0x1d0>

		case 1:

			if(sscanf((char*) message, "%*s %x %x", &addr, &length) == 2)
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	f107 0218 	add.w	r2, r7, #24
 80008c8:	4963      	ldr	r1, [pc, #396]	; (8000a58 <exec_command+0x1dc>)
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f003 fe30 	bl	8004530 <siscanf>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d151      	bne.n	800097a <exec_command+0xfe>
			{
 80008d6:	466b      	mov	r3, sp
 80008d8:	461d      	mov	r5, r3
				unsigned char data[length];
 80008da:	697c      	ldr	r4, [r7, #20]
 80008dc:	4623      	mov	r3, r4
 80008de:	3b01      	subs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
 80008e2:	4620      	mov	r0, r4
 80008e4:	f04f 0100 	mov.w	r1, #0
 80008e8:	f04f 0200 	mov.w	r2, #0
 80008ec:	f04f 0300 	mov.w	r3, #0
 80008f0:	00cb      	lsls	r3, r1, #3
 80008f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008f6:	00c2      	lsls	r2, r0, #3
 80008f8:	4620      	mov	r0, r4
 80008fa:	f04f 0100 	mov.w	r1, #0
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	00cb      	lsls	r3, r1, #3
 8000908:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800090c:	00c2      	lsls	r2, r0, #3
 800090e:	1de3      	adds	r3, r4, #7
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	ebad 0d03 	sub.w	sp, sp, r3
 8000918:	ab02      	add	r3, sp, #8
 800091a:	3300      	adds	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

				if(memory_read(addr, length, data))
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	6979      	ldr	r1, [r7, #20]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f8b5 	bl	8000a94 <memory_read>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d01f      	beq.n	8000970 <exec_command+0xf4>
				{
					sprintf((char*) message, "Memory read: ");
 8000930:	494a      	ldr	r1, [pc, #296]	; (8000a5c <exec_command+0x1e0>)
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f003 fddc 	bl	80044f0 <siprintf>

					for(int i = 0; i < length; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
 800093c:	e010      	b.n	8000960 <exec_command+0xe4>
					{
						sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff fc7e 	bl	8000240 <strlen>
 8000944:	4602      	mov	r2, r0
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	1898      	adds	r0, r3, r2
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4942      	ldr	r1, [pc, #264]	; (8000a60 <exec_command+0x1e4>)
 8000956:	f003 fdcb 	bl	80044f0 <siprintf>
					for(int i = 0; i < length; i++)
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
 8000960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3ea      	bcc.n	800093e <exec_command+0xc2>
					}

					send_UART((char*) message);
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f000 fc39 	bl	80011e0 <send_UART>
 800096e:	e002      	b.n	8000976 <exec_command+0xfa>
				}
				else
					send_UART("Invalid Memory Read instruction argument values.\r");
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <exec_command+0x1e8>)
 8000972:	f000 fc35 	bl	80011e0 <send_UART>
 8000976:	46ad      	mov	sp, r5
			}
			else
				send_UART("Invalid Memory Read instruction syntax.");

			break;
 8000978:	e068      	b.n	8000a4c <exec_command+0x1d0>
				send_UART("Invalid Memory Read instruction syntax.");
 800097a:	483b      	ldr	r0, [pc, #236]	; (8000a68 <exec_command+0x1ec>)
 800097c:	f000 fc30 	bl	80011e0 <send_UART>
			break;
 8000980:	e064      	b.n	8000a4c <exec_command+0x1d0>

		case 2:

			if(sscanf((char*) message, "%*s %x %x %x", &addr, &length, &data) == 3)
 8000982:	f107 0114 	add.w	r1, r7, #20
 8000986:	f107 0218 	add.w	r2, r7, #24
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	460b      	mov	r3, r1
 8000992:	4936      	ldr	r1, [pc, #216]	; (8000a6c <exec_command+0x1f0>)
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f003 fdcb 	bl	8004530 <siscanf>
 800099a:	4603      	mov	r3, r0
 800099c:	2b03      	cmp	r3, #3
 800099e:	d110      	bne.n	80009c2 <exec_command+0x146>
			{
				if(memory_write(addr, length, data))
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	6979      	ldr	r1, [r7, #20]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f89e 	bl	8000ae8 <memory_write>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <exec_command+0x13e>
					send_UART("Memory written with success.");
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <exec_command+0x1f4>)
 80009b4:	f000 fc14 	bl	80011e0 <send_UART>
					send_UART("Invalid Memory Write instruction argument values.");
			}
			else
				send_UART("Invalid Memory Write instruction syntax.");

			break;
 80009b8:	e048      	b.n	8000a4c <exec_command+0x1d0>
					send_UART("Invalid Memory Write instruction argument values.");
 80009ba:	482e      	ldr	r0, [pc, #184]	; (8000a74 <exec_command+0x1f8>)
 80009bc:	f000 fc10 	bl	80011e0 <send_UART>
			break;
 80009c0:	e044      	b.n	8000a4c <exec_command+0x1d0>
				send_UART("Invalid Memory Write instruction syntax.");
 80009c2:	482d      	ldr	r0, [pc, #180]	; (8000a78 <exec_command+0x1fc>)
 80009c4:	f000 fc0c 	bl	80011e0 <send_UART>
			break;
 80009c8:	e040      	b.n	8000a4c <exec_command+0x1d0>

		case 3:

			if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	4921      	ldr	r1, [pc, #132]	; (8000a58 <exec_command+0x1dc>)
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f003 fdab 	bl	8004530 <siscanf>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d110      	bne.n	8000a02 <exec_command+0x186>
			{
				if(make_pin_input(port_addr, pin_setting))
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f8a6 	bl	8000b38 <make_pin_input>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <exec_command+0x17e>
					send_UART("Pin(s) set as input with success.");
 80009f2:	4822      	ldr	r0, [pc, #136]	; (8000a7c <exec_command+0x200>)
 80009f4:	f000 fbf4 	bl	80011e0 <send_UART>
					send_UART("Invalid Make Pin Input instruction argument values.");
			}
			else
			  send_UART("Invalid Make Pin Input instruction syntax.");

			break;
 80009f8:	e028      	b.n	8000a4c <exec_command+0x1d0>
					send_UART("Invalid Make Pin Input instruction argument values.");
 80009fa:	4821      	ldr	r0, [pc, #132]	; (8000a80 <exec_command+0x204>)
 80009fc:	f000 fbf0 	bl	80011e0 <send_UART>
			break;
 8000a00:	e024      	b.n	8000a4c <exec_command+0x1d0>
			  send_UART("Invalid Make Pin Input instruction syntax.");
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <exec_command+0x208>)
 8000a04:	f000 fbec 	bl	80011e0 <send_UART>
			break;
 8000a08:	e020      	b.n	8000a4c <exec_command+0x1d0>

		case 4:

			if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	4911      	ldr	r1, [pc, #68]	; (8000a58 <exec_command+0x1dc>)
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f003 fd8b 	bl	8004530 <siscanf>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d110      	bne.n	8000a42 <exec_command+0x1c6>
			{
				if(make_pin_output(port_addr, pin_setting))
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f96c 	bl	8000d04 <make_pin_output>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <exec_command+0x1be>
					send_UART("Pin(s) set as output with success.");
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <exec_command+0x20c>)
 8000a34:	f000 fbd4 	bl	80011e0 <send_UART>
					send_UART("Invalid Make Pin Output instruction argument values.");
			}
			else
				send_UART("Invalid Make Pin Output instruction syntax.");

			break;
 8000a38:	e008      	b.n	8000a4c <exec_command+0x1d0>
					send_UART("Invalid Make Pin Output instruction argument values.");
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <exec_command+0x210>)
 8000a3c:	f000 fbd0 	bl	80011e0 <send_UART>
			break;
 8000a40:	e004      	b.n	8000a4c <exec_command+0x1d0>
				send_UART("Invalid Make Pin Output instruction syntax.");
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <exec_command+0x214>)
 8000a44:	f000 fbcc 	bl	80011e0 <send_UART>
			break;
 8000a48:	e000      	b.n	8000a4c <exec_command+0x1d0>

			break;

		default:

			break;
 8000a4a:	bf00      	nop
	}

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bdb0      	pop	{r4, r5, r7, pc}
 8000a54:	08005750 	.word	0x08005750
 8000a58:	08005768 	.word	0x08005768
 8000a5c:	08005774 	.word	0x08005774
 8000a60:	08005784 	.word	0x08005784
 8000a64:	0800578c 	.word	0x0800578c
 8000a68:	080057c0 	.word	0x080057c0
 8000a6c:	080057e8 	.word	0x080057e8
 8000a70:	080057f8 	.word	0x080057f8
 8000a74:	08005818 	.word	0x08005818
 8000a78:	0800584c 	.word	0x0800584c
 8000a7c:	08005878 	.word	0x08005878
 8000a80:	0800589c 	.word	0x0800589c
 8000a84:	080058d0 	.word	0x080058d0
 8000a88:	080058fc 	.word	0x080058fc
 8000a8c:	08005920 	.word	0x08005920
 8000a90:	08005958 	.word	0x08005958

08000a94 <memory_read>:

bool memory_read(unsigned int addr_r, unsigned int length, unsigned char* data)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF)
		return false;

	if((0x10000 - addr_r) < length)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d901      	bls.n	8000ab0 <memory_read+0x1c>
		return false;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e013      	b.n	8000ad8 <memory_read+0x44>

	for(int i = 0; i < length; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00b      	b.n	8000ace <memory_read+0x3a>
	{
		data[i] = memory[addr_r++];
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	60fa      	str	r2, [r7, #12]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	440a      	add	r2, r1
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <memory_read+0x50>)
 8000ac4:	5ccb      	ldrb	r3, [r1, r3]
 8000ac6:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d8ef      	bhi.n	8000ab6 <memory_read+0x22>
	}

	return true;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000118 	.word	0x20000118

08000ae8 <memory_write>:

bool memory_write(unsigned int addr, unsigned int length, unsigned int data)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	if(addr < 0 && addr > 0xFFFF && length < 0 && length > 0xFF && data < 0 && data > 0xFF)
		return false;

	if((0x10000 - addr) < length)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d901      	bls.n	8000b04 <memory_write+0x1c>
		return false;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e011      	b.n	8000b28 <memory_write+0x40>

	for(int i = 0; i < length; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e009      	b.n	8000b1e <memory_write+0x36>
	{
		memory[addr++] = data;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	60fa      	str	r2, [r7, #12]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	b2d1      	uxtb	r1, r2
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <memory_write+0x4c>)
 8000b16:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d8f1      	bhi.n	8000b0a <memory_write+0x22>
	}

	return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	20000118 	.word	0x20000118

08000b38 <make_pin_input>:

bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b092      	sub	sp, #72	; 0x48
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10b      	bne.n	8000b60 <make_pin_input+0x28>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0b      	cmp	r3, #11
 8000b4c:	d908      	bls.n	8000b60 <make_pin_input+0x28>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <make_pin_input+0x28>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5a:	d301      	bcc.n	8000b60 <make_pin_input+0x28>
		return false;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e0c8      	b.n	8000cf2 <make_pin_input+0x1ba>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	f200 80a8 	bhi.w	8000cba <make_pin_input+0x182>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <make_pin_input+0x38>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b9d 	.word	0x08000b9d
 8000b74:	08000bb7 	.word	0x08000bb7
 8000b78:	08000bd1 	.word	0x08000bd1
 8000b7c:	08000beb 	.word	0x08000beb
 8000b80:	08000c05 	.word	0x08000c05
 8000b84:	08000c1f 	.word	0x08000c1f
 8000b88:	08000c39 	.word	0x08000c39
 8000b8c:	08000c53 	.word	0x08000c53
 8000b90:	08000c6d 	.word	0x08000c6d
 8000b94:	08000c87 	.word	0x08000c87
 8000b98:	08000ca1 	.word	0x08000ca1

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000b9c:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <make_pin_input+0x1c4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <make_pin_input+0x1c4>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <make_pin_input+0x1c4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8000bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb4:	e081      	b.n	8000cba <make_pin_input+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <make_pin_input+0x1c4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <make_pin_input+0x1c4>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <make_pin_input+0x1c4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bce:	e074      	b.n	8000cba <make_pin_input+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <make_pin_input+0x1c4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <make_pin_input+0x1c4>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <make_pin_input+0x1c4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	e067      	b.n	8000cba <make_pin_input+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000bea:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <make_pin_input+0x1c4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a43      	ldr	r2, [pc, #268]	; (8000cfc <make_pin_input+0x1c4>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <make_pin_input+0x1c4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	e05a      	b.n	8000cba <make_pin_input+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <make_pin_input+0x1c4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a3c      	ldr	r2, [pc, #240]	; (8000cfc <make_pin_input+0x1c4>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <make_pin_input+0x1c4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	623b      	str	r3, [r7, #32]
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	e04d      	b.n	8000cba <make_pin_input+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <make_pin_input+0x1c4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <make_pin_input+0x1c4>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <make_pin_input+0x1c4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	e040      	b.n	8000cba <make_pin_input+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <make_pin_input+0x1c4>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <make_pin_input+0x1c4>)
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <make_pin_input+0x1c4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	e033      	b.n	8000cba <make_pin_input+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <make_pin_input+0x1c4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a29      	ldr	r2, [pc, #164]	; (8000cfc <make_pin_input+0x1c4>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <make_pin_input+0x1c4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	e026      	b.n	8000cba <make_pin_input+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <make_pin_input+0x1c4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <make_pin_input+0x1c4>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <make_pin_input+0x1c4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	e019      	b.n	8000cba <make_pin_input+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <make_pin_input+0x1c4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <make_pin_input+0x1c4>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <make_pin_input+0x1c4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	e00c      	b.n	8000cba <make_pin_input+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <make_pin_input+0x1c4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <make_pin_input+0x1c4>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <make_pin_input+0x1c4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <make_pin_input+0x1c8>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f000 fd40 	bl	8001770 <HAL_GPIO_Init>

	return true;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3748      	adds	r7, #72	; 0x48
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	0010007f 	.word	0x0010007f

08000d04 <make_pin_output>:

bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	; 0x48
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10b      	bne.n	8000d2c <make_pin_output+0x28>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b0b      	cmp	r3, #11
 8000d18:	d908      	bls.n	8000d2c <make_pin_output+0x28>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <make_pin_output+0x28>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d301      	bcc.n	8000d2c <make_pin_output+0x28>
		return false;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e0ca      	b.n	8000ec2 <make_pin_output+0x1be>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	2b0a      	cmp	r3, #10
 8000d32:	f200 80a8 	bhi.w	8000e86 <make_pin_output+0x182>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <make_pin_output+0x38>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d69 	.word	0x08000d69
 8000d40:	08000d83 	.word	0x08000d83
 8000d44:	08000d9d 	.word	0x08000d9d
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000dd1 	.word	0x08000dd1
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000e05 	.word	0x08000e05
 8000d58:	08000e1f 	.word	0x08000e1f
 8000d5c:	08000e39 	.word	0x08000e39
 8000d60:	08000e53 	.word	0x08000e53
 8000d64:	08000e6d 	.word	0x08000e6d

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000d68:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <make_pin_output+0x1c8>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <make_pin_output+0x1c8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <make_pin_output+0x1c8>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d80:	e081      	b.n	8000e86 <make_pin_output+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <make_pin_output+0x1c8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a51      	ldr	r2, [pc, #324]	; (8000ecc <make_pin_output+0x1c8>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <make_pin_output+0x1c8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	e074      	b.n	8000e86 <make_pin_output+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <make_pin_output+0x1c8>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a4a      	ldr	r2, [pc, #296]	; (8000ecc <make_pin_output+0x1c8>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <make_pin_output+0x1c8>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db4:	e067      	b.n	8000e86 <make_pin_output+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <make_pin_output+0x1c8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a44      	ldr	r2, [pc, #272]	; (8000ecc <make_pin_output+0x1c8>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <make_pin_output+0x1c8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	e05a      	b.n	8000e86 <make_pin_output+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <make_pin_output+0x1c8>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <make_pin_output+0x1c8>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <make_pin_output+0x1c8>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	e04d      	b.n	8000e86 <make_pin_output+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <make_pin_output+0x1c8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <make_pin_output+0x1c8>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <make_pin_output+0x1c8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	e040      	b.n	8000e86 <make_pin_output+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <make_pin_output+0x1c8>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <make_pin_output+0x1c8>)
 8000e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <make_pin_output+0x1c8>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	e033      	b.n	8000e86 <make_pin_output+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <make_pin_output+0x1c8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <make_pin_output+0x1c8>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <make_pin_output+0x1c8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	e026      	b.n	8000e86 <make_pin_output+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <make_pin_output+0x1c8>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <make_pin_output+0x1c8>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <make_pin_output+0x1c8>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	e019      	b.n	8000e86 <make_pin_output+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <make_pin_output+0x1c8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <make_pin_output+0x1c8>)
 8000e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <make_pin_output+0x1c8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	e00c      	b.n	8000e86 <make_pin_output+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <make_pin_output+0x1c8>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <make_pin_output+0x1c8>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <make_pin_output+0x1c8>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40

//	HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <make_pin_output+0x1cc>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f000 fc58 	bl	8001770 <HAL_GPIO_Init>

	return true;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3748      	adds	r7, #72	; 0x48
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	0010007f 	.word	0x0010007f

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 fa38 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART3_IRQHandler+0x10>)
 8000f82:	f001 ffed 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200101a8 	.word	0x200101a8

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f003 fa64 	bl	800448c <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20080000 	.word	0x20080000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	20010240 	.word	0x20010240

08000ffc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_USART3_UART_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_USART3_UART_Init+0x78>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_USART3_UART_Init+0x7c>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_USART3_UART_Init+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_USART3_UART_Init+0x84>)
 800103e:	220d      	movs	r2, #13
 8001040:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <MX_USART3_UART_Init+0x8c>)
 8001046:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 800104a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001064:	220c      	movs	r2, #12
 8001066:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_USART3_UART_Init+0x88>)
 8001082:	f001 fe63 	bl	8002d4c <HAL_UART_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 800108c:	f7ff ff22 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2001011c 	.word	0x2001011c
 8001098:	200101a0 	.word	0x200101a0
 800109c:	20010118 	.word	0x20010118
 80010a0:	200101a4 	.word	0x200101a4
 80010a4:	20010120 	.word	0x20010120
 80010a8:	200101a8 	.word	0x200101a8
 80010ac:	40004800 	.word	0x40004800

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ae      	sub	sp, #184	; 0xb8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2290      	movs	r2, #144	; 0x90
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fa05 	bl	80044e0 <memset>
  if(uartHandle->Instance==USART3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_UART_MspInit+0xc4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d144      	bne.n	800116a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fa04 	bl	80024fc <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010fa:	f7ff feeb 	bl	8000ed4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_UART_MspInit+0xc8>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_UART_MspInit+0xc8>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0xc8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0xc8>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_UART_MspInit+0xcc>)
 8001156:	f000 fb0b 	bl	8001770 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2027      	movs	r0, #39	; 0x27
 8001160:	f000 fa3d 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001164:	2027      	movs	r0, #39	; 0x27
 8001166:	f000 fa56 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	37b8      	adds	r7, #184	; 0xb8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004800 	.word	0x40004800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00

08001180 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	return flagCPP;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <has_message_from_UART+0x14>)
 8001186:	781b      	ldrb	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2001011c 	.word	0x2001011c

08001198 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return flagCPE;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <is_transmitting_to_UART+0x14>)
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200101a0 	.word	0x200101a0

080011b0 <reset_UART>:

void reset_UART()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	2100      	movs	r1, #0
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <reset_UART+0x24>)
 80011ba:	f003 f991 	bl	80044e0 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80011be:	2201      	movs	r2, #1
 80011c0:	4904      	ldr	r1, [pc, #16]	; (80011d4 <reset_UART+0x24>)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <reset_UART+0x28>)
 80011c4:	f001 fe7e 	bl	8002ec4 <HAL_UART_Receive_IT>
	flagCPP = false;
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <reset_UART+0x2c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000098 	.word	0x20000098
 80011d8:	200101a8 	.word	0x200101a8
 80011dc:	2001011c 	.word	0x2001011c

080011e0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, 128);
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <send_UART+0x44>)
 80011ee:	f003 f9df 	bl	80045b0 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <send_UART+0x44>)
 80011f4:	f7ff f824 	bl	8000240 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <send_UART+0x44>)
 80011fe:	4413      	add	r3, r2
 8001200:	4909      	ldr	r1, [pc, #36]	; (8001228 <send_UART+0x48>)
 8001202:	461a      	mov	r2, r3
 8001204:	460b      	mov	r3, r1
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <send_UART+0x4c>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	4904      	ldr	r1, [pc, #16]	; (8001224 <send_UART+0x44>)
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <send_UART+0x50>)
 8001216:	f001 fde7 	bl	8002de8 <HAL_UART_Transmit_IT>

	return;
 800121a:	bf00      	nop
}
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20010120 	.word	0x20010120
 8001228:	08005984 	.word	0x08005984
 800122c:	200101a0 	.word	0x200101a0
 8001230:	200101a8 	.word	0x200101a8

08001234 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	// formatar backspaces

	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, 128);
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <read_UART+0x1c>)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f003 f9b5 	bl	80045b0 <strncpy>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000098 	.word	0x20000098

08001254 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_RxCpltCallback+0x50>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11b      	bne.n	800129c <HAL_UART_RxCpltCallback+0x48>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r')
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_UART_RxCpltCallback+0x54>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_UART_RxCpltCallback+0x58>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	2b0d      	cmp	r3, #13
 800126e:	d106      	bne.n	800127e <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_UART_RxCpltCallback+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_UART_RxCpltCallback+0x50>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}

	return;
 800127c:	e00f      	b.n	800129e <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_UART_RxCpltCallback+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_UART_RxCpltCallback+0x54>)
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_UART_RxCpltCallback+0x54>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_UART_RxCpltCallback+0x58>)
 800128e:	4413      	add	r3, r2
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <HAL_UART_RxCpltCallback+0x5c>)
 8001296:	f001 fe15 	bl	8002ec4 <HAL_UART_Receive_IT>
	return;
 800129a:	e000      	b.n	800129e <HAL_UART_RxCpltCallback+0x4a>
		return;
 800129c:	bf00      	nop
}
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2001011c 	.word	0x2001011c
 80012a8:	20010118 	.word	0x20010118
 80012ac:	20000098 	.word	0x20000098
 80012b0:	200101a8 	.word	0x200101a8

080012b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_UART_TxCpltCallback+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11b      	bne.n	8001302 <HAL_UART_TxCpltCallback+0x4e>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r')
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_UART_TxCpltCallback+0x5c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_UART_TxCpltCallback+0x60>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	2b0d      	cmp	r3, #13
 80012d4:	d106      	bne.n	80012e4 <HAL_UART_TxCpltCallback+0x30>
	{
		UART_TX_index = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_UART_TxCpltCallback+0x5c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_UART_TxCpltCallback+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
	}

	return;
 80012e2:	e00f      	b.n	8001304 <HAL_UART_TxCpltCallback+0x50>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_UART_TxCpltCallback+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_UART_TxCpltCallback+0x5c>)
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_UART_TxCpltCallback+0x5c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_UART_TxCpltCallback+0x60>)
 80012f4:	4413      	add	r3, r2
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_UART_TxCpltCallback+0x64>)
 80012fc:	f001 fd74 	bl	8002de8 <HAL_UART_Transmit_IT>
	return;
 8001300:	e000      	b.n	8001304 <HAL_UART_TxCpltCallback+0x50>
		return;
 8001302:	bf00      	nop
}
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200101a0 	.word	0x200101a0
 8001310:	200101a4 	.word	0x200101a4
 8001314:	20010120 	.word	0x20010120
 8001318:	200101a8 	.word	0x200101a8

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001322:	490e      	ldr	r1, [pc, #56]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001338:	4c0b      	ldr	r4, [pc, #44]	; (8001368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001346:	f7ff fe59 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f003 f8a5 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff f995 	bl	800067c <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001360:	08005b6c 	.word	0x08005b6c
  ldr r2, =_sbss
 8001364:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001368:	20010240 	.word	0x20010240

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>

0800136e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f928 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f805 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137e:	f7ff fdaf 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f943 	bl	8001632 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f90b 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	2001022c 	.word	0x2001022c

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2001022c 	.word	0x2001022c

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <__NVIC_SetPriorityGrouping+0x40>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	4313      	orrs	r3, r2
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x40>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	05fa0000 	.word	0x05fa0000

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff feda 	bl	8001410 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d008      	beq.n	800167c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e052      	b.n	8001722 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0216 	bic.w	r2, r2, #22
 800168a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800169a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_DMA_Abort+0x62>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0208 	bic.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016cc:	e013      	b.n	80016f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7ff fe9f 	bl	8001410 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d90c      	bls.n	80016f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e015      	b.n	8001722 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e4      	bne.n	80016ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d004      	beq.n	8001748 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e00c      	b.n	8001762 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2205      	movs	r2, #5
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e175      	b.n	8001a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8164 	bne.w	8001a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x56>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80be 	beq.w	8001a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <HAL_GPIO_Init+0x324>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_GPIO_Init+0x324>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_GPIO_Init+0x324>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001912:	4a61      	ldr	r2, [pc, #388]	; (8001a98 <HAL_GPIO_Init+0x328>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x32c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d037      	beq.n	80019ae <HAL_GPIO_Init+0x23e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a57      	ldr	r2, [pc, #348]	; (8001aa0 <HAL_GPIO_Init+0x330>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d031      	beq.n	80019aa <HAL_GPIO_Init+0x23a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x236>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_GPIO_Init+0x338>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x232>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_GPIO_Init+0x33c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a53      	ldr	r2, [pc, #332]	; (8001ab0 <HAL_GPIO_Init+0x340>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x22a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_GPIO_Init+0x344>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x226>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x348>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x222>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a50      	ldr	r2, [pc, #320]	; (8001abc <HAL_GPIO_Init+0x34c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x21e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <HAL_GPIO_Init+0x350>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x21a>
 8001986:	2309      	movs	r3, #9
 8001988:	e012      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800198a:	230a      	movs	r3, #10
 800198c:	e010      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800198e:	2308      	movs	r3, #8
 8001990:	e00e      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 8001992:	2307      	movs	r3, #7
 8001994:	e00c      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 8001996:	2306      	movs	r3, #6
 8001998:	e00a      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800199a:	2305      	movs	r3, #5
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800199e:	2304      	movs	r3, #4
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x328>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f ae86 	bls.w	8001790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40022400 	.word	0x40022400
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2a:	f7ff fc71 	bl	8001410 <HAL_GetTick>
 8001b2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b30:	e009      	b.n	8001b46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b32:	f7ff fc6d 	bl	8001410 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b40:	d901      	bls.n	8001b46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e022      	b.n	8001b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d1ee      	bne.n	8001b32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b60:	f7ff fc56 	bl	8001410 <HAL_GetTick>
 8001b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b66:	e009      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b68:	f7ff fc52 	bl	8001410 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b76:	d901      	bls.n	8001b7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e007      	b.n	8001b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b88:	d1ee      	bne.n	8001b68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e29b      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8087 	beq.w	8001cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc0:	4b96      	ldr	r3, [pc, #600]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bcc:	4b93      	ldr	r3, [pc, #588]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d112      	bne.n	8001bfe <HAL_RCC_OscConfig+0x62>
 8001bd8:	4b90      	ldr	r3, [pc, #576]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b8d      	ldr	r3, [pc, #564]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x130>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d168      	bne.n	8001ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e275      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x7a>
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a83      	ldr	r2, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0xd8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x9c>
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7e      	ldr	r2, [pc, #504]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7b      	ldr	r2, [pc, #492]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e01d      	b.n	8001c74 <HAL_RCC_OscConfig+0xd8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a72      	ldr	r2, [pc, #456]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xd8>
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6b      	ldr	r2, [pc, #428]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fbc8 	bl	8001410 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fbc4 	bl	8001410 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e229      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fbb4 	bl	8001410 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fbb0 	bl	8001410 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e215      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x110>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d069      	beq.n	8001dae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cda:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x190>
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x17a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1e9      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	493d      	ldr	r1, [pc, #244]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e040      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb66 	bl	8001410 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff fb62 	bl	8001410 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1c7      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4929      	ldr	r1, [pc, #164]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fb42 	bl	8001410 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fb3e 	bl	8001410 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1a3      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d038      	beq.n	8001e2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb1f 	bl	8001410 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fb1b 	bl	8001410 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e180      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x23a>
 8001df4:	e01a      	b.n	8001e2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_RCC_OscConfig+0x280>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb05 	bl	8001410 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fb01 	bl	8001410 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d903      	bls.n	8001e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e166      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
 8001e1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a4 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a88      	ldr	r2, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	4b83      	ldr	r3, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e6e:	4b80      	ldr	r3, [pc, #512]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7f      	ldr	r2, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fac9 	bl	8001410 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fac5 	bl	8001410 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e12a      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x31a>
 8001ea8:	4b70      	ldr	r3, [pc, #448]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a6f      	ldr	r2, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x33c>
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x35e>
 8001ee0:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fa79 	bl	8001410 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fa75 	bl	8001410 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0d8      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x386>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff fa63 	bl	8001410 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fa5f 	bl	8001410 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0c2      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80ae 	beq.w	80020e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d06d      	beq.n	8002074 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d14b      	bne.n	8002038 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff fa30 	bl	8001410 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fa2c 	bl	8001410 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e091      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	071b      	lsls	r3, r3, #28
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f9fe 	bl	8001410 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f9fa 	bl	8001410 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e05f      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x47c>
 8002036:	e057      	b.n	80020e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff f9e4 	bl	8001410 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f9e0 	bl	8001410 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e045      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_RCC_OscConfig+0x4d0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x4b0>
 800206a:	e03d      	b.n	80020e8 <HAL_RCC_OscConfig+0x54c>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_OscConfig+0x558>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d030      	beq.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d129      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d122      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d119      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10f      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d0      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	4965      	ldr	r1, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800215e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800217a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d040      	beq.n	800221c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e073      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4936      	ldr	r1, [pc, #216]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ec:	f7ff f910 	bl	8001410 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7ff f90c 	bl	8001410 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e053      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d210      	bcs.n	800224c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4922      	ldr	r1, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f821 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1cc>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1d0>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1d4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f86c 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08005994 	.word	0x08005994
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	2300      	movs	r3, #0
 80022e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e8:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d00d      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x40>
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	f200 80bd 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x34>
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d003      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x3a>
 8002302:	e0b7      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002306:	60bb      	str	r3, [r7, #8]
      break;
 8002308:	e0b7      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800230c:	60bb      	str	r3, [r7, #8]
      break;
 800230e:	e0b4      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002310:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002318:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04d      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	461a      	mov	r2, r3
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	ea02 0800 	and.w	r8, r2, r0
 800233e:	ea03 0901 	and.w	r9, r3, r1
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	014b      	lsls	r3, r1, #5
 8002350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002354:	0142      	lsls	r2, r0, #5
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	ebb0 0008 	subs.w	r0, r0, r8
 800235e:	eb61 0109 	sbc.w	r1, r1, r9
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002370:	0182      	lsls	r2, r0, #6
 8002372:	1a12      	subs	r2, r2, r0
 8002374:	eb63 0301 	sbc.w	r3, r3, r1
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	00d9      	lsls	r1, r3, #3
 8002382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002386:	00d0      	lsls	r0, r2, #3
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	eb12 0208 	adds.w	r2, r2, r8
 8002390:	eb43 0309 	adc.w	r3, r3, r9
 8002394:	f04f 0000 	mov.w	r0, #0
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	0259      	lsls	r1, r3, #9
 800239e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023a2:	0250      	lsls	r0, r2, #9
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	f7fd ff9c 	bl	80002f0 <__aeabi_uldivmod>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4613      	mov	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e04a      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	461a      	mov	r2, r3
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	ea02 0400 	and.w	r4, r2, r0
 80023da:	ea03 0501 	and.w	r5, r3, r1
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	014b      	lsls	r3, r1, #5
 80023ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023f0:	0142      	lsls	r2, r0, #5
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	1b00      	subs	r0, r0, r4
 80023f8:	eb61 0105 	sbc.w	r1, r1, r5
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	018b      	lsls	r3, r1, #6
 8002406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800240a:	0182      	lsls	r2, r0, #6
 800240c:	1a12      	subs	r2, r2, r0
 800240e:	eb63 0301 	sbc.w	r3, r3, r1
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	00d9      	lsls	r1, r3, #3
 800241c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002420:	00d0      	lsls	r0, r2, #3
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	1912      	adds	r2, r2, r4
 8002428:	eb45 0303 	adc.w	r3, r5, r3
 800242c:	f04f 0000 	mov.w	r0, #0
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	0299      	lsls	r1, r3, #10
 8002436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800243a:	0290      	lsls	r0, r2, #10
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	f7fd ff50 	bl	80002f0 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	60bb      	str	r3, [r7, #8]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002476:	60bb      	str	r3, [r7, #8]
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	68bb      	ldr	r3, [r7, #8]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	080059a4 	.word	0x080059a4

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	080059a4 	.word	0x080059a4

080024fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002524:	4b69      	ldr	r3, [pc, #420]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a68      	ldr	r2, [pc, #416]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800252e:	6093      	str	r3, [r2, #8]
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	4964      	ldr	r1, [pc, #400]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d017      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002556:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	4959      	ldr	r1, [pc, #356]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002592:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	494a      	ldr	r1, [pc, #296]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 808b 	beq.w	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a39      	ldr	r2, [pc, #228]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a34      	ldr	r2, [pc, #208]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe ff04 	bl	8001410 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7fe ff00 	bl	8001410 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e38f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d035      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d02e      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002650:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d114      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fec8 	bl	8001410 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fec4 	bl	8001410 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e351      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ee      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b2:	d111      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	4901      	ldr	r1, [pc, #4]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	0ffffcff 	.word	0x0ffffcff
 80026d8:	4bb3      	ldr	r3, [pc, #716]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4ab2      	ldr	r2, [pc, #712]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026e2:	6093      	str	r3, [r2, #8]
 80026e4:	4bb0      	ldr	r3, [pc, #704]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	49ad      	ldr	r1, [pc, #692]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002702:	4ba9      	ldr	r3, [pc, #676]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002708:	4aa7      	ldr	r2, [pc, #668]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002712:	4ba5      	ldr	r3, [pc, #660]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002714:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	49a2      	ldr	r1, [pc, #648]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002730:	4b9d      	ldr	r3, [pc, #628]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273e:	499a      	ldr	r1, [pc, #616]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002752:	4b95      	ldr	r3, [pc, #596]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002760:	4991      	ldr	r1, [pc, #580]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	4989      	ldr	r1, [pc, #548]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002796:	4b84      	ldr	r3, [pc, #528]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4980      	ldr	r1, [pc, #512]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b8:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4978      	ldr	r1, [pc, #480]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027da:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f023 020c 	bic.w	r2, r3, #12
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	496f      	ldr	r1, [pc, #444]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4967      	ldr	r1, [pc, #412]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	495e      	ldr	r1, [pc, #376]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	4956      	ldr	r1, [pc, #344]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	4945      	ldr	r1, [pc, #276]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	493c      	ldr	r1, [pc, #240]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d011      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f8:	492b      	ldr	r1, [pc, #172]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	491b      	ldr	r1, [pc, #108]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295c:	4912      	ldr	r1, [pc, #72]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	4909      	ldr	r1, [pc, #36]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00f      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	e002      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	4986      	ldr	r1, [pc, #536]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d0:	497d      	ldr	r1, [pc, #500]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d006      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80d6 	beq.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029ec:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe fd0a 	bl	8001410 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a00:	f7fe fd06 	bl	8001410 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e195      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d021      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0e1b      	lsrs	r3, r3, #24
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	071b      	lsls	r3, r3, #28
 8002a66:	4958      	ldr	r1, [pc, #352]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02e      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d129      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a9a:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0f1b      	lsrs	r3, r3, #28
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	019a      	lsls	r2, r3, #6
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	071b      	lsls	r3, r3, #28
 8002ace:	493e      	ldr	r1, [pc, #248]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	f023 021f 	bic.w	r2, r3, #31
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	4938      	ldr	r1, [pc, #224]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b00:	0e1b      	lsrs	r3, r3, #24
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	0f1b      	lsrs	r3, r3, #28
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	019a      	lsls	r2, r3, #6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	071b      	lsls	r3, r3, #28
 8002b2e:	4926      	ldr	r1, [pc, #152]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	491a      	ldr	r1, [pc, #104]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b72:	f7fe fc4d 	bl	8001410 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fe fc49 	bl	8001410 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 80ce 	bne.w	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe fc30 	bl	8001410 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fe fc2c 	bl	8001410 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d904      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0bb      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd8:	d0ec      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02e      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c10:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	0f1b      	lsrs	r3, r3, #28
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	019a      	lsls	r2, r3, #6
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	4944      	ldr	r1, [pc, #272]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	493d      	ldr	r1, [pc, #244]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6c:	d11d      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	0e1b      	lsrs	r3, r3, #24
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	0f1b      	lsrs	r3, r3, #28
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	019a      	lsls	r2, r3, #6
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	4929      	ldr	r1, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	019a      	lsls	r2, r3, #6
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	071b      	lsls	r3, r3, #28
 8002cea:	4917      	ldr	r1, [pc, #92]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4911      	ldr	r1, [pc, #68]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d14:	f7fe fb7c 	bl	8001410 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d1c:	f7fe fb78 	bl	8001410 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e007      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3a:	d1ef      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e040      	b.n	8002de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe f99e 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fbe8 	bl	8003560 <UART_SetConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e022      	b.n	8002de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fe3e 	bl	8003a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fec5 	bl	8003b68 <UART_CheckIdleState>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d156      	bne.n	8002eac <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_UART_Transmit_IT+0x22>
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e04f      	b.n	8002eae <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit_IT+0x34>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e048      	b.n	8002eae <HAL_UART_Transmit_IT+0xc6>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2221      	movs	r2, #33	; 0x21
 8002e4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	d107      	bne.n	8002e68 <HAL_UART_Transmit_IT+0x80>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_UART_Transmit_IT+0xd4>)
 8002e64:	669a      	str	r2, [r3, #104]	; 0x68
 8002e66:	e002      	b.n	8002e6e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_UART_Transmit_IT+0xd8>)
 8002e6c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	613b      	str	r3, [r7, #16]
   return(result);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	69f9      	ldr	r1, [r7, #28]
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e6      	bne.n	8002e76 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	372c      	adds	r7, #44	; 0x2c
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	080040c1 	.word	0x080040c1
 8002ec0:	0800400b 	.word	0x0800400b

08002ec4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d13d      	bne.n	8002f56 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_Receive_IT+0x22>
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e036      	b.n	8002f58 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x34>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e02f      	b.n	8002f58 <HAL_UART_Receive_IT+0x94>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e6      	bne.n	8002f14 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 ff19 	bl	8003d84 <UART_Start_Receive_IT>
 8002f52:	4603      	mov	r3, r0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	; 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f8e:	4013      	ands	r3, r2
 8002f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 82a4 	beq.w	8003506 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
      }
      return;
 8002fc6:	e29e      	b.n	8003506 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8117 	beq.w	8003200 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_UART_IRQHandler+0x298>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 810a 	beq.w	8003200 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d011      	beq.n	800301c <HAL_UART_IRQHandler+0xbc>
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d011      	beq.n	800304c <HAL_UART_IRQHandler+0xec>
 8003028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2202      	movs	r2, #2
 800303a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003042:	f043 0204 	orr.w	r2, r3, #4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_UART_IRQHandler+0x11c>
 8003058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2204      	movs	r2, #4
 800306a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003072:	f043 0202 	orr.w	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003098:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2208      	movs	r2, #8
 80030a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_UART_IRQHandler+0x18a>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 820a 	beq.w	800350a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d005      	beq.n	8003142 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800313a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04f      	beq.n	80031e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fee8 	bl	8003f18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d141      	bne.n	80031da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3308      	adds	r3, #8
 800315c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800316c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3308      	adds	r3, #8
 800317e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800318e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800319a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1d9      	bne.n	8003156 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d013      	beq.n	80031d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_UART_IRQHandler+0x29c>)
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fab7 	bl	800172a <HAL_DMA_Abort_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d017      	beq.n	80031f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031cc:	4610      	mov	r0, r2
 80031ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e00f      	b.n	80031f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f9a4 	bl	8003520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e00b      	b.n	80031f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9a0 	bl	8003520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e007      	b.n	80031f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f99c 	bl	8003520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031f0:	e18b      	b.n	800350a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f2:	bf00      	nop
    return;
 80031f4:	e189      	b.n	800350a <HAL_UART_IRQHandler+0x5aa>
 80031f6:	bf00      	nop
 80031f8:	04000120 	.word	0x04000120
 80031fc:	08003fdf 	.word	0x08003fdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 8144 	bne.w	8003492 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 813d 	beq.w	8003492 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8136 	beq.w	8003492 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2210      	movs	r2, #16
 800322c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	f040 80b2 	bne.w	80033a2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800324a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 815d 	beq.w	800350e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800325a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800325e:	429a      	cmp	r2, r3
 8003260:	f080 8155 	bcs.w	800350e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800326a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	f000 8085 	beq.w	8003386 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1da      	bne.n	800327c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e1      	bne.n	80032c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3308      	adds	r3, #8
 8003322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800332c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e3      	bne.n	8003302 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003356:	f023 0310 	bic.w	r3, r3, #16
 800335a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003368:	65bb      	str	r3, [r7, #88]	; 0x58
 800336a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800336e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e4      	bne.n	8003346 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f962 	bl	800164a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003392:	b29b      	uxth	r3, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8ca 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033a0:	e0b5      	b.n	800350e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a7 	beq.w	8003512 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a2 	beq.w	8003512 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
 80033f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e4      	bne.n	80033ce <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	623b      	str	r3, [r7, #32]
   return(result);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003428:	633a      	str	r2, [r7, #48]	; 0x30
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e3      	bne.n	8003404 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	60fb      	str	r3, [r7, #12]
   return(result);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0310 	bic.w	r3, r3, #16
 8003462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	617b      	str	r3, [r7, #20]
   return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e4      	bne.n	800344e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f852 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003490:	e03f      	b.n	8003512 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_UART_IRQHandler+0x55c>
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f849 	bl	800354c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034ba:	e02d      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01c      	beq.n	8003516 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    }
    return;
 80034e4:	e017      	b.n	8003516 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <HAL_UART_IRQHandler+0x5b8>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fe3e 	bl	8004180 <UART_EndTransmit_IT>
    return;
 8003504:	e008      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
    return;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
      return;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003516:	bf00      	nop
  }

}
 8003518:	37e8      	adds	r7, #232	; 0xe8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4ba7      	ldr	r3, [pc, #668]	; (8003828 <UART_SetConfig+0x2c8>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	430b      	orrs	r3, r1
 8003596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a95      	ldr	r2, [pc, #596]	; (800382c <UART_SetConfig+0x2cc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d120      	bne.n	800361e <UART_SetConfig+0xbe>
 80035dc:	4b94      	ldr	r3, [pc, #592]	; (8003830 <UART_SetConfig+0x2d0>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d816      	bhi.n	8003618 <UART_SetConfig+0xb8>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <UART_SetConfig+0x90>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003601 	.word	0x08003601
 80035f4:	0800360d 	.word	0x0800360d
 80035f8:	08003607 	.word	0x08003607
 80035fc:	08003613 	.word	0x08003613
 8003600:	2301      	movs	r3, #1
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e14f      	b.n	80038a6 <UART_SetConfig+0x346>
 8003606:	2302      	movs	r3, #2
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e14c      	b.n	80038a6 <UART_SetConfig+0x346>
 800360c:	2304      	movs	r3, #4
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e149      	b.n	80038a6 <UART_SetConfig+0x346>
 8003612:	2308      	movs	r3, #8
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e146      	b.n	80038a6 <UART_SetConfig+0x346>
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e143      	b.n	80038a6 <UART_SetConfig+0x346>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a84      	ldr	r2, [pc, #528]	; (8003834 <UART_SetConfig+0x2d4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d132      	bne.n	800368e <UART_SetConfig+0x12e>
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <UART_SetConfig+0x2d0>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d828      	bhi.n	8003688 <UART_SetConfig+0x128>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <UART_SetConfig+0xdc>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	08003671 	.word	0x08003671
 8003640:	08003689 	.word	0x08003689
 8003644:	08003689 	.word	0x08003689
 8003648:	08003689 	.word	0x08003689
 800364c:	0800367d 	.word	0x0800367d
 8003650:	08003689 	.word	0x08003689
 8003654:	08003689 	.word	0x08003689
 8003658:	08003689 	.word	0x08003689
 800365c:	08003677 	.word	0x08003677
 8003660:	08003689 	.word	0x08003689
 8003664:	08003689 	.word	0x08003689
 8003668:	08003689 	.word	0x08003689
 800366c:	08003683 	.word	0x08003683
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e117      	b.n	80038a6 <UART_SetConfig+0x346>
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e114      	b.n	80038a6 <UART_SetConfig+0x346>
 800367c:	2304      	movs	r3, #4
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e111      	b.n	80038a6 <UART_SetConfig+0x346>
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e10e      	b.n	80038a6 <UART_SetConfig+0x346>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e10b      	b.n	80038a6 <UART_SetConfig+0x346>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <UART_SetConfig+0x2d8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d120      	bne.n	80036da <UART_SetConfig+0x17a>
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <UART_SetConfig+0x2d0>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	d013      	beq.n	80036ce <UART_SetConfig+0x16e>
 80036a6:	2b30      	cmp	r3, #48	; 0x30
 80036a8:	d814      	bhi.n	80036d4 <UART_SetConfig+0x174>
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d009      	beq.n	80036c2 <UART_SetConfig+0x162>
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d810      	bhi.n	80036d4 <UART_SetConfig+0x174>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <UART_SetConfig+0x15c>
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d006      	beq.n	80036c8 <UART_SetConfig+0x168>
 80036ba:	e00b      	b.n	80036d4 <UART_SetConfig+0x174>
 80036bc:	2300      	movs	r3, #0
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e0f1      	b.n	80038a6 <UART_SetConfig+0x346>
 80036c2:	2302      	movs	r3, #2
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e0ee      	b.n	80038a6 <UART_SetConfig+0x346>
 80036c8:	2304      	movs	r3, #4
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e0eb      	b.n	80038a6 <UART_SetConfig+0x346>
 80036ce:	2308      	movs	r3, #8
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e0e8      	b.n	80038a6 <UART_SetConfig+0x346>
 80036d4:	2310      	movs	r3, #16
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e0e5      	b.n	80038a6 <UART_SetConfig+0x346>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a57      	ldr	r2, [pc, #348]	; (800383c <UART_SetConfig+0x2dc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d120      	bne.n	8003726 <UART_SetConfig+0x1c6>
 80036e4:	4b52      	ldr	r3, [pc, #328]	; (8003830 <UART_SetConfig+0x2d0>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ee:	2bc0      	cmp	r3, #192	; 0xc0
 80036f0:	d013      	beq.n	800371a <UART_SetConfig+0x1ba>
 80036f2:	2bc0      	cmp	r3, #192	; 0xc0
 80036f4:	d814      	bhi.n	8003720 <UART_SetConfig+0x1c0>
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d009      	beq.n	800370e <UART_SetConfig+0x1ae>
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d810      	bhi.n	8003720 <UART_SetConfig+0x1c0>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <UART_SetConfig+0x1a8>
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d006      	beq.n	8003714 <UART_SetConfig+0x1b4>
 8003706:	e00b      	b.n	8003720 <UART_SetConfig+0x1c0>
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e0cb      	b.n	80038a6 <UART_SetConfig+0x346>
 800370e:	2302      	movs	r3, #2
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e0c8      	b.n	80038a6 <UART_SetConfig+0x346>
 8003714:	2304      	movs	r3, #4
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e0c5      	b.n	80038a6 <UART_SetConfig+0x346>
 800371a:	2308      	movs	r3, #8
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e0c2      	b.n	80038a6 <UART_SetConfig+0x346>
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e0bf      	b.n	80038a6 <UART_SetConfig+0x346>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a45      	ldr	r2, [pc, #276]	; (8003840 <UART_SetConfig+0x2e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d125      	bne.n	800377c <UART_SetConfig+0x21c>
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <UART_SetConfig+0x2d0>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373e:	d017      	beq.n	8003770 <UART_SetConfig+0x210>
 8003740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003744:	d817      	bhi.n	8003776 <UART_SetConfig+0x216>
 8003746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374a:	d00b      	beq.n	8003764 <UART_SetConfig+0x204>
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d811      	bhi.n	8003776 <UART_SetConfig+0x216>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <UART_SetConfig+0x1fe>
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d006      	beq.n	800376a <UART_SetConfig+0x20a>
 800375c:	e00b      	b.n	8003776 <UART_SetConfig+0x216>
 800375e:	2300      	movs	r3, #0
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e0a0      	b.n	80038a6 <UART_SetConfig+0x346>
 8003764:	2302      	movs	r3, #2
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e09d      	b.n	80038a6 <UART_SetConfig+0x346>
 800376a:	2304      	movs	r3, #4
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e09a      	b.n	80038a6 <UART_SetConfig+0x346>
 8003770:	2308      	movs	r3, #8
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e097      	b.n	80038a6 <UART_SetConfig+0x346>
 8003776:	2310      	movs	r3, #16
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e094      	b.n	80038a6 <UART_SetConfig+0x346>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a30      	ldr	r2, [pc, #192]	; (8003844 <UART_SetConfig+0x2e4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d125      	bne.n	80037d2 <UART_SetConfig+0x272>
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <UART_SetConfig+0x2d0>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003790:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003794:	d017      	beq.n	80037c6 <UART_SetConfig+0x266>
 8003796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800379a:	d817      	bhi.n	80037cc <UART_SetConfig+0x26c>
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a0:	d00b      	beq.n	80037ba <UART_SetConfig+0x25a>
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a6:	d811      	bhi.n	80037cc <UART_SetConfig+0x26c>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <UART_SetConfig+0x254>
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d006      	beq.n	80037c0 <UART_SetConfig+0x260>
 80037b2:	e00b      	b.n	80037cc <UART_SetConfig+0x26c>
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e075      	b.n	80038a6 <UART_SetConfig+0x346>
 80037ba:	2302      	movs	r3, #2
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e072      	b.n	80038a6 <UART_SetConfig+0x346>
 80037c0:	2304      	movs	r3, #4
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e06f      	b.n	80038a6 <UART_SetConfig+0x346>
 80037c6:	2308      	movs	r3, #8
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e06c      	b.n	80038a6 <UART_SetConfig+0x346>
 80037cc:	2310      	movs	r3, #16
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e069      	b.n	80038a6 <UART_SetConfig+0x346>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <UART_SetConfig+0x2e8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d137      	bne.n	800384c <UART_SetConfig+0x2ec>
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <UART_SetConfig+0x2d0>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ea:	d017      	beq.n	800381c <UART_SetConfig+0x2bc>
 80037ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037f0:	d817      	bhi.n	8003822 <UART_SetConfig+0x2c2>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	d00b      	beq.n	8003810 <UART_SetConfig+0x2b0>
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fc:	d811      	bhi.n	8003822 <UART_SetConfig+0x2c2>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <UART_SetConfig+0x2aa>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d006      	beq.n	8003816 <UART_SetConfig+0x2b6>
 8003808:	e00b      	b.n	8003822 <UART_SetConfig+0x2c2>
 800380a:	2300      	movs	r3, #0
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e04a      	b.n	80038a6 <UART_SetConfig+0x346>
 8003810:	2302      	movs	r3, #2
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e047      	b.n	80038a6 <UART_SetConfig+0x346>
 8003816:	2304      	movs	r3, #4
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e044      	b.n	80038a6 <UART_SetConfig+0x346>
 800381c:	2308      	movs	r3, #8
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e041      	b.n	80038a6 <UART_SetConfig+0x346>
 8003822:	2310      	movs	r3, #16
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e03e      	b.n	80038a6 <UART_SetConfig+0x346>
 8003828:	efff69f3 	.word	0xefff69f3
 800382c:	40011000 	.word	0x40011000
 8003830:	40023800 	.word	0x40023800
 8003834:	40004400 	.word	0x40004400
 8003838:	40004800 	.word	0x40004800
 800383c:	40004c00 	.word	0x40004c00
 8003840:	40005000 	.word	0x40005000
 8003844:	40011400 	.word	0x40011400
 8003848:	40007800 	.word	0x40007800
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a71      	ldr	r2, [pc, #452]	; (8003a18 <UART_SetConfig+0x4b8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d125      	bne.n	80038a2 <UART_SetConfig+0x342>
 8003856:	4b71      	ldr	r3, [pc, #452]	; (8003a1c <UART_SetConfig+0x4bc>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003860:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003864:	d017      	beq.n	8003896 <UART_SetConfig+0x336>
 8003866:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800386a:	d817      	bhi.n	800389c <UART_SetConfig+0x33c>
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	d00b      	beq.n	800388a <UART_SetConfig+0x32a>
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003876:	d811      	bhi.n	800389c <UART_SetConfig+0x33c>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <UART_SetConfig+0x324>
 800387c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003880:	d006      	beq.n	8003890 <UART_SetConfig+0x330>
 8003882:	e00b      	b.n	800389c <UART_SetConfig+0x33c>
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e00d      	b.n	80038a6 <UART_SetConfig+0x346>
 800388a:	2302      	movs	r3, #2
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e00a      	b.n	80038a6 <UART_SetConfig+0x346>
 8003890:	2304      	movs	r3, #4
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e007      	b.n	80038a6 <UART_SetConfig+0x346>
 8003896:	2308      	movs	r3, #8
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e004      	b.n	80038a6 <UART_SetConfig+0x346>
 800389c:	2310      	movs	r3, #16
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e001      	b.n	80038a6 <UART_SetConfig+0x346>
 80038a2:	2310      	movs	r3, #16
 80038a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d15a      	bne.n	8003966 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80038b0:	7ffb      	ldrb	r3, [r7, #31]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d827      	bhi.n	8003906 <UART_SetConfig+0x3a6>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x35c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	08003907 	.word	0x08003907
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	08003907 	.word	0x08003907
 80038d4:	08003907 	.word	0x08003907
 80038d8:	08003907 	.word	0x08003907
 80038dc:	080038ff 	.word	0x080038ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fde4 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80038e4:	61b8      	str	r0, [r7, #24]
        break;
 80038e6:	e013      	b.n	8003910 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7fe fdf4 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80038ec:	61b8      	str	r0, [r7, #24]
        break;
 80038ee:	e00f      	b.n	8003910 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <UART_SetConfig+0x4c0>)
 80038f2:	61bb      	str	r3, [r7, #24]
        break;
 80038f4:	e00c      	b.n	8003910 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f6:	f7fe fceb 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 80038fa:	61b8      	str	r0, [r7, #24]
        break;
 80038fc:	e008      	b.n	8003910 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e004      	b.n	8003910 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	77bb      	strb	r3, [r7, #30]
        break;
 800390e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d074      	beq.n	8003a00 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	005a      	lsls	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d916      	bls.n	8003960 <UART_SetConfig+0x400>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d212      	bcs.n	8003960 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f023 030f 	bic.w	r3, r3, #15
 8003942:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	b29b      	uxth	r3, r3
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	b29a      	uxth	r2, r3
 8003950:	89fb      	ldrh	r3, [r7, #14]
 8003952:	4313      	orrs	r3, r2
 8003954:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	89fa      	ldrh	r2, [r7, #14]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	e04f      	b.n	8003a00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	77bb      	strb	r3, [r7, #30]
 8003964:	e04c      	b.n	8003a00 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d828      	bhi.n	80039be <UART_SetConfig+0x45e>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x414>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003999 	.word	0x08003999
 8003978:	080039a1 	.word	0x080039a1
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039af 	.word	0x080039af
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7fe fd88 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 800399c:	61b8      	str	r0, [r7, #24]
        break;
 800399e:	e013      	b.n	80039c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7fe fd98 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80039a4:	61b8      	str	r0, [r7, #24]
        break;
 80039a6:	e00f      	b.n	80039c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <UART_SetConfig+0x4c0>)
 80039aa:	61bb      	str	r3, [r7, #24]
        break;
 80039ac:	e00c      	b.n	80039c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe fc8f 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 80039b2:	61b8      	str	r0, [r7, #24]
        break;
 80039b4:	e008      	b.n	80039c8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ba:	61bb      	str	r3, [r7, #24]
        break;
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	77bb      	strb	r3, [r7, #30]
        break;
 80039c6:	bf00      	nop
    }

    if (pclk != 0U)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085a      	lsrs	r2, r3, #1
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d909      	bls.n	80039fc <UART_SetConfig+0x49c>
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ee:	d205      	bcs.n	80039fc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e001      	b.n	8003a00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40007c00 	.word	0x40007c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400

08003a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01a      	beq.n	8003b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b22:	d10a      	bne.n	8003b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b78:	f7fd fc4a 	bl	8001410 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d10e      	bne.n	8003baa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f82d 	bl	8003bfa <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e023      	b.n	8003bf2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d10e      	bne.n	8003bd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f817 	bl	8003bfa <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e00d      	b.n	8003bf2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b09c      	sub	sp, #112	; 0x70
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	e0a5      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	f000 80a1 	beq.w	8003d58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fd fbfb 	bl	8001410 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d13e      	bne.n	8003caa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	663b      	str	r3, [r7, #96]	; 0x60
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e067      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d04f      	beq.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc6:	d147      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e6      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d24:	623a      	str	r2, [r7, #32]
 8003d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	69f9      	ldr	r1, [r7, #28]
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e010      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f43f af4a 	beq.w	8003c0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3770      	adds	r7, #112	; 0x70
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b097      	sub	sp, #92	; 0x5c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d10e      	bne.n	8003dd6 <UART_Start_Receive_IT+0x52>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <UART_Start_Receive_IT+0x48>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dca:	e02d      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd4:	e028      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <UART_Start_Receive_IT+0x76>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <UART_Start_Receive_IT+0x6c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	22ff      	movs	r2, #255	; 0xff
 8003dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dee:	e01b      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	227f      	movs	r2, #127	; 0x7f
 8003df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003df8:	e016      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e02:	d10d      	bne.n	8003e20 <UART_Start_Receive_IT+0x9c>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <UART_Start_Receive_IT+0x92>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	227f      	movs	r2, #127	; 0x7f
 8003e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e14:	e008      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	223f      	movs	r2, #63	; 0x3f
 8003e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e1e:	e003      	b.n	8003e28 <UART_Start_Receive_IT+0xa4>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2222      	movs	r2, #34	; 0x22
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e56:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d107      	bne.n	8003e84 <UART_Start_Receive_IT+0x100>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <UART_Start_Receive_IT+0x18c>)
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64
 8003e82:	e002      	b.n	8003e8a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <UART_Start_Receive_IT+0x190>)
 8003e88:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d019      	beq.n	8003ece <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e6      	bne.n	8003e9a <UART_Start_Receive_IT+0x116>
 8003ecc:	e018      	b.n	8003f00 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	613b      	str	r3, [r7, #16]
   return(result);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	69f9      	ldr	r1, [r7, #28]
 8003ef2:	6a3a      	ldr	r2, [r7, #32]
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	375c      	adds	r7, #92	; 0x5c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	08004331 	.word	0x08004331
 8003f14:	080041d5 	.word	0x080041d5

08003f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b095      	sub	sp, #84	; 0x54
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d118      	bne.n	8003fc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f023 0310 	bic.w	r3, r3, #16
 8003fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6979      	ldr	r1, [r7, #20]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fd2:	bf00      	nop
 8003fd4:	3754      	adds	r7, #84	; 0x54
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff fa8f 	bl	8003520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800400a:	b480      	push	{r7}
 800400c:	b08f      	sub	sp, #60	; 0x3c
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004016:	2b21      	cmp	r3, #33	; 0x21
 8004018:	d14c      	bne.n	80040b4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d132      	bne.n	800408c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	61fb      	str	r3, [r7, #28]
   return(result);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800404a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	60bb      	str	r3, [r7, #8]
   return(result);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800408a:	e013      	b.n	80040b4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80040b4:	bf00      	nop
 80040b6:	373c      	adds	r7, #60	; 0x3c
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b091      	sub	sp, #68	; 0x44
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040cc:	2b21      	cmp	r3, #33	; 0x21
 80040ce:	d151      	bne.n	8004174 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d132      	bne.n	8004142 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
 80040fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60fb      	str	r3, [r7, #12]
   return(result);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	617b      	str	r3, [r7, #20]
   return(result);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004140:	e018      	b.n	8004174 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004174:	bf00      	nop
 8004176:	3744      	adds	r7, #68	; 0x44
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	60bb      	str	r3, [r7, #8]
   return(result);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	613b      	str	r3, [r7, #16]
   return(result);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd f874 	bl	80012b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041cc:	bf00      	nop
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b096      	sub	sp, #88	; 0x58
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ea:	2b22      	cmp	r3, #34	; 0x22
 80041ec:	f040 8094 	bne.w	8004318 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80041fe:	b2d9      	uxtb	r1, r3
 8004200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	400a      	ands	r2, r1
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d177      	bne.n	8004328 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800425c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e6      	bne.n	8004238 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	623b      	str	r3, [r7, #32]
   return(result);
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3308      	adds	r3, #8
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	633a      	str	r2, [r7, #48]	; 0x30
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d12e      	bne.n	8004310 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	617b      	str	r3, [r7, #20]
   return(result);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d103      	bne.n	8004300 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2210      	movs	r2, #16
 80042fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff f913 	bl	8003534 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800430e:	e00b      	b.n	8004328 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fc ff9f 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 8004316:	e007      	b.n	8004328 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	3758      	adds	r7, #88	; 0x58
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b096      	sub	sp, #88	; 0x58
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800433e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004346:	2b22      	cmp	r3, #34	; 0x22
 8004348:	f040 8094 	bne.w	8004474 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800435c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004360:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004364:	4013      	ands	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d177      	bne.n	8004484 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b2:	643b      	str	r3, [r7, #64]	; 0x40
 80043b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	2b01      	cmp	r3, #1
 800440c:	d12e      	bne.n	800446c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	60bb      	str	r3, [r7, #8]
   return(result);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0310 	bic.w	r3, r3, #16
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	613b      	str	r3, [r7, #16]
   return(result);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d103      	bne.n	800445c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff f865 	bl	8003534 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800446a:	e00b      	b.n	8004484 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc fef1 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 8004472:	e007      	b.n	8004484 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	619a      	str	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	3758      	adds	r7, #88	; 0x58
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <__errno>:
 800448c:	4b01      	ldr	r3, [pc, #4]	; (8004494 <__errno+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	; (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	; (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	; (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	; (80044dc <__libc_init_array+0x44>)
 80044ac:	f001 f936 	bl	800571c <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	08005b64 	.word	0x08005b64
 80044d4:	08005b64 	.word	0x08005b64
 80044d8:	08005b64 	.word	0x08005b64
 80044dc:	08005b68 	.word	0x08005b68

080044e0 <memset>:
 80044e0:	4402      	add	r2, r0
 80044e2:	4603      	mov	r3, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d100      	bne.n	80044ea <memset+0xa>
 80044e8:	4770      	bx	lr
 80044ea:	f803 1b01 	strb.w	r1, [r3], #1
 80044ee:	e7f9      	b.n	80044e4 <memset+0x4>

080044f0 <siprintf>:
 80044f0:	b40e      	push	{r1, r2, r3}
 80044f2:	b500      	push	{lr}
 80044f4:	b09c      	sub	sp, #112	; 0x70
 80044f6:	ab1d      	add	r3, sp, #116	; 0x74
 80044f8:	9002      	str	r0, [sp, #8]
 80044fa:	9006      	str	r0, [sp, #24]
 80044fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004500:	4809      	ldr	r0, [pc, #36]	; (8004528 <siprintf+0x38>)
 8004502:	9107      	str	r1, [sp, #28]
 8004504:	9104      	str	r1, [sp, #16]
 8004506:	4909      	ldr	r1, [pc, #36]	; (800452c <siprintf+0x3c>)
 8004508:	f853 2b04 	ldr.w	r2, [r3], #4
 800450c:	9105      	str	r1, [sp, #20]
 800450e:	6800      	ldr	r0, [r0, #0]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	a902      	add	r1, sp, #8
 8004514:	f000 f8ba 	bl	800468c <_svfiprintf_r>
 8004518:	9b02      	ldr	r3, [sp, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	b01c      	add	sp, #112	; 0x70
 8004520:	f85d eb04 	ldr.w	lr, [sp], #4
 8004524:	b003      	add	sp, #12
 8004526:	4770      	bx	lr
 8004528:	2000000c 	.word	0x2000000c
 800452c:	ffff0208 	.word	0xffff0208

08004530 <siscanf>:
 8004530:	b40e      	push	{r1, r2, r3}
 8004532:	b510      	push	{r4, lr}
 8004534:	b09f      	sub	sp, #124	; 0x7c
 8004536:	ac21      	add	r4, sp, #132	; 0x84
 8004538:	f44f 7101 	mov.w	r1, #516	; 0x204
 800453c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004540:	9201      	str	r2, [sp, #4]
 8004542:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004546:	9004      	str	r0, [sp, #16]
 8004548:	9008      	str	r0, [sp, #32]
 800454a:	f7fb fe79 	bl	8000240 <strlen>
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <siscanf+0x50>)
 8004550:	9005      	str	r0, [sp, #20]
 8004552:	9009      	str	r0, [sp, #36]	; 0x24
 8004554:	930d      	str	r3, [sp, #52]	; 0x34
 8004556:	480b      	ldr	r0, [pc, #44]	; (8004584 <siscanf+0x54>)
 8004558:	9a01      	ldr	r2, [sp, #4]
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	9403      	str	r4, [sp, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	9311      	str	r3, [sp, #68]	; 0x44
 8004562:	9316      	str	r3, [sp, #88]	; 0x58
 8004564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004568:	f8ad 301e 	strh.w	r3, [sp, #30]
 800456c:	a904      	add	r1, sp, #16
 800456e:	4623      	mov	r3, r4
 8004570:	f000 f9e6 	bl	8004940 <__ssvfiscanf_r>
 8004574:	b01f      	add	sp, #124	; 0x7c
 8004576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457a:	b003      	add	sp, #12
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08004589 	.word	0x08004589
 8004584:	2000000c 	.word	0x2000000c

08004588 <__seofread>:
 8004588:	2000      	movs	r0, #0
 800458a:	4770      	bx	lr

0800458c <strncmp>:
 800458c:	b510      	push	{r4, lr}
 800458e:	b16a      	cbz	r2, 80045ac <strncmp+0x20>
 8004590:	3901      	subs	r1, #1
 8004592:	1884      	adds	r4, r0, r2
 8004594:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004598:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <strncmp+0x1c>
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d001      	beq.n	80045a8 <strncmp+0x1c>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f5      	bne.n	8004594 <strncmp+0x8>
 80045a8:	1a98      	subs	r0, r3, r2
 80045aa:	bd10      	pop	{r4, pc}
 80045ac:	4610      	mov	r0, r2
 80045ae:	e7fc      	b.n	80045aa <strncmp+0x1e>

080045b0 <strncpy>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	3901      	subs	r1, #1
 80045b4:	4603      	mov	r3, r0
 80045b6:	b132      	cbz	r2, 80045c6 <strncpy+0x16>
 80045b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045bc:	f803 4b01 	strb.w	r4, [r3], #1
 80045c0:	3a01      	subs	r2, #1
 80045c2:	2c00      	cmp	r4, #0
 80045c4:	d1f7      	bne.n	80045b6 <strncpy+0x6>
 80045c6:	441a      	add	r2, r3
 80045c8:	2100      	movs	r1, #0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d100      	bne.n	80045d0 <strncpy+0x20>
 80045ce:	bd10      	pop	{r4, pc}
 80045d0:	f803 1b01 	strb.w	r1, [r3], #1
 80045d4:	e7f9      	b.n	80045ca <strncpy+0x1a>

080045d6 <__ssputs_r>:
 80045d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045da:	688e      	ldr	r6, [r1, #8]
 80045dc:	429e      	cmp	r6, r3
 80045de:	4682      	mov	sl, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	4690      	mov	r8, r2
 80045e4:	461f      	mov	r7, r3
 80045e6:	d838      	bhi.n	800465a <__ssputs_r+0x84>
 80045e8:	898a      	ldrh	r2, [r1, #12]
 80045ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ee:	d032      	beq.n	8004656 <__ssputs_r+0x80>
 80045f0:	6825      	ldr	r5, [r4, #0]
 80045f2:	6909      	ldr	r1, [r1, #16]
 80045f4:	eba5 0901 	sub.w	r9, r5, r1
 80045f8:	6965      	ldr	r5, [r4, #20]
 80045fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004602:	3301      	adds	r3, #1
 8004604:	444b      	add	r3, r9
 8004606:	106d      	asrs	r5, r5, #1
 8004608:	429d      	cmp	r5, r3
 800460a:	bf38      	it	cc
 800460c:	461d      	movcc	r5, r3
 800460e:	0553      	lsls	r3, r2, #21
 8004610:	d531      	bpl.n	8004676 <__ssputs_r+0xa0>
 8004612:	4629      	mov	r1, r5
 8004614:	f000 ffde 	bl	80055d4 <_malloc_r>
 8004618:	4606      	mov	r6, r0
 800461a:	b950      	cbnz	r0, 8004632 <__ssputs_r+0x5c>
 800461c:	230c      	movs	r3, #12
 800461e:	f8ca 3000 	str.w	r3, [sl]
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	6921      	ldr	r1, [r4, #16]
 8004634:	464a      	mov	r2, r9
 8004636:	f000 ff55 	bl	80054e4 <memcpy>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	6126      	str	r6, [r4, #16]
 8004648:	6165      	str	r5, [r4, #20]
 800464a:	444e      	add	r6, r9
 800464c:	eba5 0509 	sub.w	r5, r5, r9
 8004650:	6026      	str	r6, [r4, #0]
 8004652:	60a5      	str	r5, [r4, #8]
 8004654:	463e      	mov	r6, r7
 8004656:	42be      	cmp	r6, r7
 8004658:	d900      	bls.n	800465c <__ssputs_r+0x86>
 800465a:	463e      	mov	r6, r7
 800465c:	4632      	mov	r2, r6
 800465e:	6820      	ldr	r0, [r4, #0]
 8004660:	4641      	mov	r1, r8
 8004662:	f000 ff4d 	bl	8005500 <memmove>
 8004666:	68a3      	ldr	r3, [r4, #8]
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	1b9b      	subs	r3, r3, r6
 800466c:	4432      	add	r2, r6
 800466e:	60a3      	str	r3, [r4, #8]
 8004670:	6022      	str	r2, [r4, #0]
 8004672:	2000      	movs	r0, #0
 8004674:	e7db      	b.n	800462e <__ssputs_r+0x58>
 8004676:	462a      	mov	r2, r5
 8004678:	f001 f806 	bl	8005688 <_realloc_r>
 800467c:	4606      	mov	r6, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d1e1      	bne.n	8004646 <__ssputs_r+0x70>
 8004682:	6921      	ldr	r1, [r4, #16]
 8004684:	4650      	mov	r0, sl
 8004686:	f000 ff55 	bl	8005534 <_free_r>
 800468a:	e7c7      	b.n	800461c <__ssputs_r+0x46>

0800468c <_svfiprintf_r>:
 800468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	4698      	mov	r8, r3
 8004692:	898b      	ldrh	r3, [r1, #12]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	b09d      	sub	sp, #116	; 0x74
 8004698:	4607      	mov	r7, r0
 800469a:	460d      	mov	r5, r1
 800469c:	4614      	mov	r4, r2
 800469e:	d50e      	bpl.n	80046be <_svfiprintf_r+0x32>
 80046a0:	690b      	ldr	r3, [r1, #16]
 80046a2:	b963      	cbnz	r3, 80046be <_svfiprintf_r+0x32>
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	f000 ff95 	bl	80055d4 <_malloc_r>
 80046aa:	6028      	str	r0, [r5, #0]
 80046ac:	6128      	str	r0, [r5, #16]
 80046ae:	b920      	cbnz	r0, 80046ba <_svfiprintf_r+0x2e>
 80046b0:	230c      	movs	r3, #12
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	e0d1      	b.n	800485e <_svfiprintf_r+0x1d2>
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	616b      	str	r3, [r5, #20]
 80046be:	2300      	movs	r3, #0
 80046c0:	9309      	str	r3, [sp, #36]	; 0x24
 80046c2:	2320      	movs	r3, #32
 80046c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046cc:	2330      	movs	r3, #48	; 0x30
 80046ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004878 <_svfiprintf_r+0x1ec>
 80046d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046d6:	f04f 0901 	mov.w	r9, #1
 80046da:	4623      	mov	r3, r4
 80046dc:	469a      	mov	sl, r3
 80046de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e2:	b10a      	cbz	r2, 80046e8 <_svfiprintf_r+0x5c>
 80046e4:	2a25      	cmp	r2, #37	; 0x25
 80046e6:	d1f9      	bne.n	80046dc <_svfiprintf_r+0x50>
 80046e8:	ebba 0b04 	subs.w	fp, sl, r4
 80046ec:	d00b      	beq.n	8004706 <_svfiprintf_r+0x7a>
 80046ee:	465b      	mov	r3, fp
 80046f0:	4622      	mov	r2, r4
 80046f2:	4629      	mov	r1, r5
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff ff6e 	bl	80045d6 <__ssputs_r>
 80046fa:	3001      	adds	r0, #1
 80046fc:	f000 80aa 	beq.w	8004854 <_svfiprintf_r+0x1c8>
 8004700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004702:	445a      	add	r2, fp
 8004704:	9209      	str	r2, [sp, #36]	; 0x24
 8004706:	f89a 3000 	ldrb.w	r3, [sl]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80a2 	beq.w	8004854 <_svfiprintf_r+0x1c8>
 8004710:	2300      	movs	r3, #0
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800471a:	f10a 0a01 	add.w	sl, sl, #1
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	9307      	str	r3, [sp, #28]
 8004722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004726:	931a      	str	r3, [sp, #104]	; 0x68
 8004728:	4654      	mov	r4, sl
 800472a:	2205      	movs	r2, #5
 800472c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004730:	4851      	ldr	r0, [pc, #324]	; (8004878 <_svfiprintf_r+0x1ec>)
 8004732:	f7fb fd8d 	bl	8000250 <memchr>
 8004736:	9a04      	ldr	r2, [sp, #16]
 8004738:	b9d8      	cbnz	r0, 8004772 <_svfiprintf_r+0xe6>
 800473a:	06d0      	lsls	r0, r2, #27
 800473c:	bf44      	itt	mi
 800473e:	2320      	movmi	r3, #32
 8004740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004744:	0711      	lsls	r1, r2, #28
 8004746:	bf44      	itt	mi
 8004748:	232b      	movmi	r3, #43	; 0x2b
 800474a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800474e:	f89a 3000 	ldrb.w	r3, [sl]
 8004752:	2b2a      	cmp	r3, #42	; 0x2a
 8004754:	d015      	beq.n	8004782 <_svfiprintf_r+0xf6>
 8004756:	9a07      	ldr	r2, [sp, #28]
 8004758:	4654      	mov	r4, sl
 800475a:	2000      	movs	r0, #0
 800475c:	f04f 0c0a 	mov.w	ip, #10
 8004760:	4621      	mov	r1, r4
 8004762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004766:	3b30      	subs	r3, #48	; 0x30
 8004768:	2b09      	cmp	r3, #9
 800476a:	d94e      	bls.n	800480a <_svfiprintf_r+0x17e>
 800476c:	b1b0      	cbz	r0, 800479c <_svfiprintf_r+0x110>
 800476e:	9207      	str	r2, [sp, #28]
 8004770:	e014      	b.n	800479c <_svfiprintf_r+0x110>
 8004772:	eba0 0308 	sub.w	r3, r0, r8
 8004776:	fa09 f303 	lsl.w	r3, r9, r3
 800477a:	4313      	orrs	r3, r2
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	46a2      	mov	sl, r4
 8004780:	e7d2      	b.n	8004728 <_svfiprintf_r+0x9c>
 8004782:	9b03      	ldr	r3, [sp, #12]
 8004784:	1d19      	adds	r1, r3, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	9103      	str	r1, [sp, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbb      	ittet	lt
 800478e:	425b      	neglt	r3, r3
 8004790:	f042 0202 	orrlt.w	r2, r2, #2
 8004794:	9307      	strge	r3, [sp, #28]
 8004796:	9307      	strlt	r3, [sp, #28]
 8004798:	bfb8      	it	lt
 800479a:	9204      	strlt	r2, [sp, #16]
 800479c:	7823      	ldrb	r3, [r4, #0]
 800479e:	2b2e      	cmp	r3, #46	; 0x2e
 80047a0:	d10c      	bne.n	80047bc <_svfiprintf_r+0x130>
 80047a2:	7863      	ldrb	r3, [r4, #1]
 80047a4:	2b2a      	cmp	r3, #42	; 0x2a
 80047a6:	d135      	bne.n	8004814 <_svfiprintf_r+0x188>
 80047a8:	9b03      	ldr	r3, [sp, #12]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	9203      	str	r2, [sp, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfb8      	it	lt
 80047b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047b8:	3402      	adds	r4, #2
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004888 <_svfiprintf_r+0x1fc>
 80047c0:	7821      	ldrb	r1, [r4, #0]
 80047c2:	2203      	movs	r2, #3
 80047c4:	4650      	mov	r0, sl
 80047c6:	f7fb fd43 	bl	8000250 <memchr>
 80047ca:	b140      	cbz	r0, 80047de <_svfiprintf_r+0x152>
 80047cc:	2340      	movs	r3, #64	; 0x40
 80047ce:	eba0 000a 	sub.w	r0, r0, sl
 80047d2:	fa03 f000 	lsl.w	r0, r3, r0
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	4303      	orrs	r3, r0
 80047da:	3401      	adds	r4, #1
 80047dc:	9304      	str	r3, [sp, #16]
 80047de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e2:	4826      	ldr	r0, [pc, #152]	; (800487c <_svfiprintf_r+0x1f0>)
 80047e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e8:	2206      	movs	r2, #6
 80047ea:	f7fb fd31 	bl	8000250 <memchr>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d038      	beq.n	8004864 <_svfiprintf_r+0x1d8>
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <_svfiprintf_r+0x1f4>)
 80047f4:	bb1b      	cbnz	r3, 800483e <_svfiprintf_r+0x1b2>
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	3307      	adds	r3, #7
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	3308      	adds	r3, #8
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004804:	4433      	add	r3, r6
 8004806:	9309      	str	r3, [sp, #36]	; 0x24
 8004808:	e767      	b.n	80046da <_svfiprintf_r+0x4e>
 800480a:	fb0c 3202 	mla	r2, ip, r2, r3
 800480e:	460c      	mov	r4, r1
 8004810:	2001      	movs	r0, #1
 8004812:	e7a5      	b.n	8004760 <_svfiprintf_r+0xd4>
 8004814:	2300      	movs	r3, #0
 8004816:	3401      	adds	r4, #1
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	4619      	mov	r1, r3
 800481c:	f04f 0c0a 	mov.w	ip, #10
 8004820:	4620      	mov	r0, r4
 8004822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004826:	3a30      	subs	r2, #48	; 0x30
 8004828:	2a09      	cmp	r2, #9
 800482a:	d903      	bls.n	8004834 <_svfiprintf_r+0x1a8>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0c5      	beq.n	80047bc <_svfiprintf_r+0x130>
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	e7c3      	b.n	80047bc <_svfiprintf_r+0x130>
 8004834:	fb0c 2101 	mla	r1, ip, r1, r2
 8004838:	4604      	mov	r4, r0
 800483a:	2301      	movs	r3, #1
 800483c:	e7f0      	b.n	8004820 <_svfiprintf_r+0x194>
 800483e:	ab03      	add	r3, sp, #12
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	462a      	mov	r2, r5
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <_svfiprintf_r+0x1f8>)
 8004846:	a904      	add	r1, sp, #16
 8004848:	4638      	mov	r0, r7
 800484a:	f3af 8000 	nop.w
 800484e:	1c42      	adds	r2, r0, #1
 8004850:	4606      	mov	r6, r0
 8004852:	d1d6      	bne.n	8004802 <_svfiprintf_r+0x176>
 8004854:	89ab      	ldrh	r3, [r5, #12]
 8004856:	065b      	lsls	r3, r3, #25
 8004858:	f53f af2c 	bmi.w	80046b4 <_svfiprintf_r+0x28>
 800485c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800485e:	b01d      	add	sp, #116	; 0x74
 8004860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004864:	ab03      	add	r3, sp, #12
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	462a      	mov	r2, r5
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <_svfiprintf_r+0x1f8>)
 800486c:	a904      	add	r1, sp, #16
 800486e:	4638      	mov	r0, r7
 8004870:	f000 fa4c 	bl	8004d0c <_printf_i>
 8004874:	e7eb      	b.n	800484e <_svfiprintf_r+0x1c2>
 8004876:	bf00      	nop
 8004878:	080059ac 	.word	0x080059ac
 800487c:	080059b6 	.word	0x080059b6
 8004880:	00000000 	.word	0x00000000
 8004884:	080045d7 	.word	0x080045d7
 8004888:	080059b2 	.word	0x080059b2

0800488c <_sungetc_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	1c4b      	adds	r3, r1, #1
 8004890:	4614      	mov	r4, r2
 8004892:	d103      	bne.n	800489c <_sungetc_r+0x10>
 8004894:	f04f 35ff 	mov.w	r5, #4294967295
 8004898:	4628      	mov	r0, r5
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	8993      	ldrh	r3, [r2, #12]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	8193      	strh	r3, [r2, #12]
 80048a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048a6:	6852      	ldr	r2, [r2, #4]
 80048a8:	b2cd      	uxtb	r5, r1
 80048aa:	b18b      	cbz	r3, 80048d0 <_sungetc_r+0x44>
 80048ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ae:	4293      	cmp	r3, r2
 80048b0:	dd08      	ble.n	80048c4 <_sungetc_r+0x38>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	e7e9      	b.n	8004898 <_sungetc_r+0xc>
 80048c4:	4621      	mov	r1, r4
 80048c6:	f000 fdd1 	bl	800546c <__submore>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0f1      	beq.n	80048b2 <_sungetc_r+0x26>
 80048ce:	e7e1      	b.n	8004894 <_sungetc_r+0x8>
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	b151      	cbz	r1, 80048ec <_sungetc_r+0x60>
 80048d6:	4299      	cmp	r1, r3
 80048d8:	d208      	bcs.n	80048ec <_sungetc_r+0x60>
 80048da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80048de:	42a9      	cmp	r1, r5
 80048e0:	d104      	bne.n	80048ec <_sungetc_r+0x60>
 80048e2:	3b01      	subs	r3, #1
 80048e4:	3201      	adds	r2, #1
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	6062      	str	r2, [r4, #4]
 80048ea:	e7d5      	b.n	8004898 <_sungetc_r+0xc>
 80048ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80048f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048f4:	6363      	str	r3, [r4, #52]	; 0x34
 80048f6:	2303      	movs	r3, #3
 80048f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80048fa:	4623      	mov	r3, r4
 80048fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	2301      	movs	r3, #1
 8004904:	e7dc      	b.n	80048c0 <_sungetc_r+0x34>

08004906 <__ssrefill_r>:
 8004906:	b510      	push	{r4, lr}
 8004908:	460c      	mov	r4, r1
 800490a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800490c:	b169      	cbz	r1, 800492a <__ssrefill_r+0x24>
 800490e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004912:	4299      	cmp	r1, r3
 8004914:	d001      	beq.n	800491a <__ssrefill_r+0x14>
 8004916:	f000 fe0d 	bl	8005534 <_free_r>
 800491a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	2000      	movs	r0, #0
 8004920:	6360      	str	r0, [r4, #52]	; 0x34
 8004922:	b113      	cbz	r3, 800492a <__ssrefill_r+0x24>
 8004924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	bd10      	pop	{r4, pc}
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	f04f 30ff 	mov.w	r0, #4294967295
 800493e:	e7f3      	b.n	8004928 <__ssrefill_r+0x22>

08004940 <__ssvfiscanf_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	460c      	mov	r4, r1
 8004946:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800494a:	2100      	movs	r1, #0
 800494c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004950:	49b2      	ldr	r1, [pc, #712]	; (8004c1c <__ssvfiscanf_r+0x2dc>)
 8004952:	91a0      	str	r1, [sp, #640]	; 0x280
 8004954:	f10d 0804 	add.w	r8, sp, #4
 8004958:	49b1      	ldr	r1, [pc, #708]	; (8004c20 <__ssvfiscanf_r+0x2e0>)
 800495a:	4fb2      	ldr	r7, [pc, #712]	; (8004c24 <__ssvfiscanf_r+0x2e4>)
 800495c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004c28 <__ssvfiscanf_r+0x2e8>
 8004960:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004964:	4606      	mov	r6, r0
 8004966:	91a1      	str	r1, [sp, #644]	; 0x284
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	f892 a000 	ldrb.w	sl, [r2]
 800496e:	f1ba 0f00 	cmp.w	sl, #0
 8004972:	f000 8151 	beq.w	8004c18 <__ssvfiscanf_r+0x2d8>
 8004976:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800497a:	f013 0308 	ands.w	r3, r3, #8
 800497e:	f102 0501 	add.w	r5, r2, #1
 8004982:	d019      	beq.n	80049b8 <__ssvfiscanf_r+0x78>
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd0f      	ble.n	80049aa <__ssvfiscanf_r+0x6a>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	5cba      	ldrb	r2, [r7, r2]
 8004990:	0712      	lsls	r2, r2, #28
 8004992:	d401      	bmi.n	8004998 <__ssvfiscanf_r+0x58>
 8004994:	462a      	mov	r2, r5
 8004996:	e7e8      	b.n	800496a <__ssvfiscanf_r+0x2a>
 8004998:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800499a:	3201      	adds	r2, #1
 800499c:	9245      	str	r2, [sp, #276]	; 0x114
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	3301      	adds	r3, #1
 80049a2:	3a01      	subs	r2, #1
 80049a4:	6062      	str	r2, [r4, #4]
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	e7ec      	b.n	8004984 <__ssvfiscanf_r+0x44>
 80049aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80049ac:	4621      	mov	r1, r4
 80049ae:	4630      	mov	r0, r6
 80049b0:	4798      	blx	r3
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0e9      	beq.n	800498a <__ssvfiscanf_r+0x4a>
 80049b6:	e7ed      	b.n	8004994 <__ssvfiscanf_r+0x54>
 80049b8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80049bc:	f040 8083 	bne.w	8004ac6 <__ssvfiscanf_r+0x186>
 80049c0:	9341      	str	r3, [sp, #260]	; 0x104
 80049c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80049c4:	7853      	ldrb	r3, [r2, #1]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	bf02      	ittt	eq
 80049ca:	2310      	moveq	r3, #16
 80049cc:	1c95      	addeq	r5, r2, #2
 80049ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80049d0:	220a      	movs	r2, #10
 80049d2:	46ab      	mov	fp, r5
 80049d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80049d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80049dc:	2b09      	cmp	r3, #9
 80049de:	d91d      	bls.n	8004a1c <__ssvfiscanf_r+0xdc>
 80049e0:	4891      	ldr	r0, [pc, #580]	; (8004c28 <__ssvfiscanf_r+0x2e8>)
 80049e2:	2203      	movs	r2, #3
 80049e4:	f7fb fc34 	bl	8000250 <memchr>
 80049e8:	b140      	cbz	r0, 80049fc <__ssvfiscanf_r+0xbc>
 80049ea:	2301      	movs	r3, #1
 80049ec:	eba0 0009 	sub.w	r0, r0, r9
 80049f0:	fa03 f000 	lsl.w	r0, r3, r0
 80049f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049f6:	4318      	orrs	r0, r3
 80049f8:	9041      	str	r0, [sp, #260]	; 0x104
 80049fa:	465d      	mov	r5, fp
 80049fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a00:	2b78      	cmp	r3, #120	; 0x78
 8004a02:	d806      	bhi.n	8004a12 <__ssvfiscanf_r+0xd2>
 8004a04:	2b57      	cmp	r3, #87	; 0x57
 8004a06:	d810      	bhi.n	8004a2a <__ssvfiscanf_r+0xea>
 8004a08:	2b25      	cmp	r3, #37	; 0x25
 8004a0a:	d05c      	beq.n	8004ac6 <__ssvfiscanf_r+0x186>
 8004a0c:	d856      	bhi.n	8004abc <__ssvfiscanf_r+0x17c>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d074      	beq.n	8004afc <__ssvfiscanf_r+0x1bc>
 8004a12:	2303      	movs	r3, #3
 8004a14:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a16:	230a      	movs	r3, #10
 8004a18:	9342      	str	r3, [sp, #264]	; 0x108
 8004a1a:	e081      	b.n	8004b20 <__ssvfiscanf_r+0x1e0>
 8004a1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a1e:	fb02 1303 	mla	r3, r2, r3, r1
 8004a22:	3b30      	subs	r3, #48	; 0x30
 8004a24:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a26:	465d      	mov	r5, fp
 8004a28:	e7d3      	b.n	80049d2 <__ssvfiscanf_r+0x92>
 8004a2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004a2e:	2a20      	cmp	r2, #32
 8004a30:	d8ef      	bhi.n	8004a12 <__ssvfiscanf_r+0xd2>
 8004a32:	a101      	add	r1, pc, #4	; (adr r1, 8004a38 <__ssvfiscanf_r+0xf8>)
 8004a34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a38:	08004b0b 	.word	0x08004b0b
 8004a3c:	08004a13 	.word	0x08004a13
 8004a40:	08004a13 	.word	0x08004a13
 8004a44:	08004b69 	.word	0x08004b69
 8004a48:	08004a13 	.word	0x08004a13
 8004a4c:	08004a13 	.word	0x08004a13
 8004a50:	08004a13 	.word	0x08004a13
 8004a54:	08004a13 	.word	0x08004a13
 8004a58:	08004a13 	.word	0x08004a13
 8004a5c:	08004a13 	.word	0x08004a13
 8004a60:	08004a13 	.word	0x08004a13
 8004a64:	08004b7f 	.word	0x08004b7f
 8004a68:	08004b55 	.word	0x08004b55
 8004a6c:	08004ac3 	.word	0x08004ac3
 8004a70:	08004ac3 	.word	0x08004ac3
 8004a74:	08004ac3 	.word	0x08004ac3
 8004a78:	08004a13 	.word	0x08004a13
 8004a7c:	08004b59 	.word	0x08004b59
 8004a80:	08004a13 	.word	0x08004a13
 8004a84:	08004a13 	.word	0x08004a13
 8004a88:	08004a13 	.word	0x08004a13
 8004a8c:	08004a13 	.word	0x08004a13
 8004a90:	08004b8f 	.word	0x08004b8f
 8004a94:	08004b61 	.word	0x08004b61
 8004a98:	08004b03 	.word	0x08004b03
 8004a9c:	08004a13 	.word	0x08004a13
 8004aa0:	08004a13 	.word	0x08004a13
 8004aa4:	08004b8b 	.word	0x08004b8b
 8004aa8:	08004a13 	.word	0x08004a13
 8004aac:	08004b55 	.word	0x08004b55
 8004ab0:	08004a13 	.word	0x08004a13
 8004ab4:	08004a13 	.word	0x08004a13
 8004ab8:	08004b0b 	.word	0x08004b0b
 8004abc:	3b45      	subs	r3, #69	; 0x45
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d8a7      	bhi.n	8004a12 <__ssvfiscanf_r+0xd2>
 8004ac2:	2305      	movs	r3, #5
 8004ac4:	e02b      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dd0d      	ble.n	8004ae8 <__ssvfiscanf_r+0x1a8>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	4552      	cmp	r2, sl
 8004ad2:	f040 80a1 	bne.w	8004c18 <__ssvfiscanf_r+0x2d8>
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	6862      	ldr	r2, [r4, #4]
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	6062      	str	r2, [r4, #4]
 8004ae4:	9345      	str	r3, [sp, #276]	; 0x114
 8004ae6:	e755      	b.n	8004994 <__ssvfiscanf_r+0x54>
 8004ae8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004aea:	4621      	mov	r1, r4
 8004aec:	4630      	mov	r0, r6
 8004aee:	4798      	blx	r3
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0eb      	beq.n	8004acc <__ssvfiscanf_r+0x18c>
 8004af4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f040 8084 	bne.w	8004c04 <__ssvfiscanf_r+0x2c4>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e086      	b.n	8004c10 <__ssvfiscanf_r+0x2d0>
 8004b02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	9241      	str	r2, [sp, #260]	; 0x104
 8004b0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b10:	9241      	str	r2, [sp, #260]	; 0x104
 8004b12:	2210      	movs	r2, #16
 8004b14:	2b6f      	cmp	r3, #111	; 0x6f
 8004b16:	9242      	str	r2, [sp, #264]	; 0x108
 8004b18:	bf34      	ite	cc
 8004b1a:	2303      	movcc	r3, #3
 8004b1c:	2304      	movcs	r3, #4
 8004b1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dd41      	ble.n	8004baa <__ssvfiscanf_r+0x26a>
 8004b26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b28:	0659      	lsls	r1, r3, #25
 8004b2a:	d404      	bmi.n	8004b36 <__ssvfiscanf_r+0x1f6>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	5cba      	ldrb	r2, [r7, r2]
 8004b32:	0712      	lsls	r2, r2, #28
 8004b34:	d440      	bmi.n	8004bb8 <__ssvfiscanf_r+0x278>
 8004b36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	dc4f      	bgt.n	8004bdc <__ssvfiscanf_r+0x29c>
 8004b3c:	466b      	mov	r3, sp
 8004b3e:	4622      	mov	r2, r4
 8004b40:	a941      	add	r1, sp, #260	; 0x104
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fa08 	bl	8004f58 <_scanf_chars>
 8004b48:	2801      	cmp	r0, #1
 8004b4a:	d065      	beq.n	8004c18 <__ssvfiscanf_r+0x2d8>
 8004b4c:	2802      	cmp	r0, #2
 8004b4e:	f47f af21 	bne.w	8004994 <__ssvfiscanf_r+0x54>
 8004b52:	e7cf      	b.n	8004af4 <__ssvfiscanf_r+0x1b4>
 8004b54:	220a      	movs	r2, #10
 8004b56:	e7dd      	b.n	8004b14 <__ssvfiscanf_r+0x1d4>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9342      	str	r3, [sp, #264]	; 0x108
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e7de      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004b60:	2308      	movs	r3, #8
 8004b62:	9342      	str	r3, [sp, #264]	; 0x108
 8004b64:	2304      	movs	r3, #4
 8004b66:	e7da      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f000 fb40 	bl	80051f0 <__sccl>
 8004b70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b76:	9341      	str	r3, [sp, #260]	; 0x104
 8004b78:	4605      	mov	r5, r0
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7cf      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004b7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b84:	9341      	str	r3, [sp, #260]	; 0x104
 8004b86:	2300      	movs	r3, #0
 8004b88:	e7c9      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e7c7      	b.n	8004b1e <__ssvfiscanf_r+0x1de>
 8004b8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004b90:	06c3      	lsls	r3, r0, #27
 8004b92:	f53f aeff 	bmi.w	8004994 <__ssvfiscanf_r+0x54>
 8004b96:	9b00      	ldr	r3, [sp, #0]
 8004b98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b9a:	1d19      	adds	r1, r3, #4
 8004b9c:	9100      	str	r1, [sp, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	07c0      	lsls	r0, r0, #31
 8004ba2:	bf4c      	ite	mi
 8004ba4:	801a      	strhmi	r2, [r3, #0]
 8004ba6:	601a      	strpl	r2, [r3, #0]
 8004ba8:	e6f4      	b.n	8004994 <__ssvfiscanf_r+0x54>
 8004baa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004bac:	4621      	mov	r1, r4
 8004bae:	4630      	mov	r0, r6
 8004bb0:	4798      	blx	r3
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d0b7      	beq.n	8004b26 <__ssvfiscanf_r+0x1e6>
 8004bb6:	e79d      	b.n	8004af4 <__ssvfiscanf_r+0x1b4>
 8004bb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004bba:	3201      	adds	r2, #1
 8004bbc:	9245      	str	r2, [sp, #276]	; 0x114
 8004bbe:	6862      	ldr	r2, [r4, #4]
 8004bc0:	3a01      	subs	r2, #1
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	6062      	str	r2, [r4, #4]
 8004bc6:	dd02      	ble.n	8004bce <__ssvfiscanf_r+0x28e>
 8004bc8:	3301      	adds	r3, #1
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	e7ae      	b.n	8004b2c <__ssvfiscanf_r+0x1ec>
 8004bce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4798      	blx	r3
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0a8      	beq.n	8004b2c <__ssvfiscanf_r+0x1ec>
 8004bda:	e78b      	b.n	8004af4 <__ssvfiscanf_r+0x1b4>
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	dc06      	bgt.n	8004bee <__ssvfiscanf_r+0x2ae>
 8004be0:	466b      	mov	r3, sp
 8004be2:	4622      	mov	r2, r4
 8004be4:	a941      	add	r1, sp, #260	; 0x104
 8004be6:	4630      	mov	r0, r6
 8004be8:	f000 fa0e 	bl	8005008 <_scanf_i>
 8004bec:	e7ac      	b.n	8004b48 <__ssvfiscanf_r+0x208>
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <__ssvfiscanf_r+0x2ec>)
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f43f aecf 	beq.w	8004994 <__ssvfiscanf_r+0x54>
 8004bf6:	466b      	mov	r3, sp
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	a941      	add	r1, sp, #260	; 0x104
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f3af 8000 	nop.w
 8004c02:	e7a1      	b.n	8004b48 <__ssvfiscanf_r+0x208>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c0a:	bf18      	it	ne
 8004c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8004c10:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004c1a:	e7f9      	b.n	8004c10 <__ssvfiscanf_r+0x2d0>
 8004c1c:	0800488d 	.word	0x0800488d
 8004c20:	08004907 	.word	0x08004907
 8004c24:	080059fb 	.word	0x080059fb
 8004c28:	080059b2 	.word	0x080059b2
 8004c2c:	00000000 	.word	0x00000000

08004c30 <_printf_common>:
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	4616      	mov	r6, r2
 8004c36:	4699      	mov	r9, r3
 8004c38:	688a      	ldr	r2, [r1, #8]
 8004c3a:	690b      	ldr	r3, [r1, #16]
 8004c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bfb8      	it	lt
 8004c44:	4613      	movlt	r3, r2
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	b10a      	cbz	r2, 8004c56 <_printf_common+0x26>
 8004c52:	3301      	adds	r3, #1
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	0699      	lsls	r1, r3, #26
 8004c5a:	bf42      	ittt	mi
 8004c5c:	6833      	ldrmi	r3, [r6, #0]
 8004c5e:	3302      	addmi	r3, #2
 8004c60:	6033      	strmi	r3, [r6, #0]
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	f015 0506 	ands.w	r5, r5, #6
 8004c68:	d106      	bne.n	8004c78 <_printf_common+0x48>
 8004c6a:	f104 0a19 	add.w	sl, r4, #25
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	6832      	ldr	r2, [r6, #0]
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	42ab      	cmp	r3, r5
 8004c76:	dc26      	bgt.n	8004cc6 <_printf_common+0x96>
 8004c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c7c:	1e13      	subs	r3, r2, #0
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	bf18      	it	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	0692      	lsls	r2, r2, #26
 8004c86:	d42b      	bmi.n	8004ce0 <_printf_common+0xb0>
 8004c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	4638      	mov	r0, r7
 8004c90:	47c0      	blx	r8
 8004c92:	3001      	adds	r0, #1
 8004c94:	d01e      	beq.n	8004cd4 <_printf_common+0xa4>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	68e5      	ldr	r5, [r4, #12]
 8004c9a:	6832      	ldr	r2, [r6, #0]
 8004c9c:	f003 0306 	and.w	r3, r3, #6
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	bf08      	it	eq
 8004ca4:	1aad      	subeq	r5, r5, r2
 8004ca6:	68a3      	ldr	r3, [r4, #8]
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	bf0c      	ite	eq
 8004cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb0:	2500      	movne	r5, #0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	bfc4      	itt	gt
 8004cb6:	1a9b      	subgt	r3, r3, r2
 8004cb8:	18ed      	addgt	r5, r5, r3
 8004cba:	2600      	movs	r6, #0
 8004cbc:	341a      	adds	r4, #26
 8004cbe:	42b5      	cmp	r5, r6
 8004cc0:	d11a      	bne.n	8004cf8 <_printf_common+0xc8>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e008      	b.n	8004cd8 <_printf_common+0xa8>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4652      	mov	r2, sl
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4638      	mov	r0, r7
 8004cce:	47c0      	blx	r8
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_printf_common+0xac>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	3501      	adds	r5, #1
 8004cde:	e7c6      	b.n	8004c6e <_printf_common+0x3e>
 8004ce0:	18e1      	adds	r1, r4, r3
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	2030      	movs	r0, #48	; 0x30
 8004ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cea:	4422      	add	r2, r4
 8004cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	e7c7      	b.n	8004c88 <_printf_common+0x58>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	4638      	mov	r0, r7
 8004d00:	47c0      	blx	r8
 8004d02:	3001      	adds	r0, #1
 8004d04:	d0e6      	beq.n	8004cd4 <_printf_common+0xa4>
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7d9      	b.n	8004cbe <_printf_common+0x8e>
	...

08004d0c <_printf_i>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	460c      	mov	r4, r1
 8004d12:	4691      	mov	r9, r2
 8004d14:	7e27      	ldrb	r7, [r4, #24]
 8004d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d18:	2f78      	cmp	r7, #120	; 0x78
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d22:	d807      	bhi.n	8004d34 <_printf_i+0x28>
 8004d24:	2f62      	cmp	r7, #98	; 0x62
 8004d26:	d80a      	bhi.n	8004d3e <_printf_i+0x32>
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	f000 80d8 	beq.w	8004ede <_printf_i+0x1d2>
 8004d2e:	2f58      	cmp	r7, #88	; 0x58
 8004d30:	f000 80a3 	beq.w	8004e7a <_printf_i+0x16e>
 8004d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d3c:	e03a      	b.n	8004db4 <_printf_i+0xa8>
 8004d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d42:	2b15      	cmp	r3, #21
 8004d44:	d8f6      	bhi.n	8004d34 <_printf_i+0x28>
 8004d46:	a001      	add	r0, pc, #4	; (adr r0, 8004d4c <_printf_i+0x40>)
 8004d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d4c:	08004da5 	.word	0x08004da5
 8004d50:	08004db9 	.word	0x08004db9
 8004d54:	08004d35 	.word	0x08004d35
 8004d58:	08004d35 	.word	0x08004d35
 8004d5c:	08004d35 	.word	0x08004d35
 8004d60:	08004d35 	.word	0x08004d35
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004d35 	.word	0x08004d35
 8004d6c:	08004d35 	.word	0x08004d35
 8004d70:	08004d35 	.word	0x08004d35
 8004d74:	08004d35 	.word	0x08004d35
 8004d78:	08004ec5 	.word	0x08004ec5
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004ea7 	.word	0x08004ea7
 8004d84:	08004d35 	.word	0x08004d35
 8004d88:	08004d35 	.word	0x08004d35
 8004d8c:	08004ee7 	.word	0x08004ee7
 8004d90:	08004d35 	.word	0x08004d35
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004d35 	.word	0x08004d35
 8004d9c:	08004d35 	.word	0x08004d35
 8004da0:	08004eaf 	.word	0x08004eaf
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	600a      	str	r2, [r1, #0]
 8004dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0a3      	b.n	8004f00 <_printf_i+0x1f4>
 8004db8:	6825      	ldr	r5, [r4, #0]
 8004dba:	6808      	ldr	r0, [r1, #0]
 8004dbc:	062e      	lsls	r6, r5, #24
 8004dbe:	f100 0304 	add.w	r3, r0, #4
 8004dc2:	d50a      	bpl.n	8004dda <_printf_i+0xce>
 8004dc4:	6805      	ldr	r5, [r0, #0]
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	da03      	bge.n	8004dd4 <_printf_i+0xc8>
 8004dcc:	232d      	movs	r3, #45	; 0x2d
 8004dce:	426d      	negs	r5, r5
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	485e      	ldr	r0, [pc, #376]	; (8004f50 <_printf_i+0x244>)
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	e019      	b.n	8004e0e <_printf_i+0x102>
 8004dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dde:	6805      	ldr	r5, [r0, #0]
 8004de0:	600b      	str	r3, [r1, #0]
 8004de2:	bf18      	it	ne
 8004de4:	b22d      	sxthne	r5, r5
 8004de6:	e7ef      	b.n	8004dc8 <_printf_i+0xbc>
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	6825      	ldr	r5, [r4, #0]
 8004dec:	1d18      	adds	r0, r3, #4
 8004dee:	6008      	str	r0, [r1, #0]
 8004df0:	0628      	lsls	r0, r5, #24
 8004df2:	d501      	bpl.n	8004df8 <_printf_i+0xec>
 8004df4:	681d      	ldr	r5, [r3, #0]
 8004df6:	e002      	b.n	8004dfe <_printf_i+0xf2>
 8004df8:	0669      	lsls	r1, r5, #25
 8004dfa:	d5fb      	bpl.n	8004df4 <_printf_i+0xe8>
 8004dfc:	881d      	ldrh	r5, [r3, #0]
 8004dfe:	4854      	ldr	r0, [pc, #336]	; (8004f50 <_printf_i+0x244>)
 8004e00:	2f6f      	cmp	r7, #111	; 0x6f
 8004e02:	bf0c      	ite	eq
 8004e04:	2308      	moveq	r3, #8
 8004e06:	230a      	movne	r3, #10
 8004e08:	2100      	movs	r1, #0
 8004e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e0e:	6866      	ldr	r6, [r4, #4]
 8004e10:	60a6      	str	r6, [r4, #8]
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	bfa2      	ittt	ge
 8004e16:	6821      	ldrge	r1, [r4, #0]
 8004e18:	f021 0104 	bicge.w	r1, r1, #4
 8004e1c:	6021      	strge	r1, [r4, #0]
 8004e1e:	b90d      	cbnz	r5, 8004e24 <_printf_i+0x118>
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	d04d      	beq.n	8004ec0 <_printf_i+0x1b4>
 8004e24:	4616      	mov	r6, r2
 8004e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e2e:	5dc7      	ldrb	r7, [r0, r7]
 8004e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e34:	462f      	mov	r7, r5
 8004e36:	42bb      	cmp	r3, r7
 8004e38:	460d      	mov	r5, r1
 8004e3a:	d9f4      	bls.n	8004e26 <_printf_i+0x11a>
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d10b      	bne.n	8004e58 <_printf_i+0x14c>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	07df      	lsls	r7, r3, #31
 8004e44:	d508      	bpl.n	8004e58 <_printf_i+0x14c>
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	6861      	ldr	r1, [r4, #4]
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	bfde      	ittt	le
 8004e4e:	2330      	movle	r3, #48	; 0x30
 8004e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e58:	1b92      	subs	r2, r2, r6
 8004e5a:	6122      	str	r2, [r4, #16]
 8004e5c:	f8cd a000 	str.w	sl, [sp]
 8004e60:	464b      	mov	r3, r9
 8004e62:	aa03      	add	r2, sp, #12
 8004e64:	4621      	mov	r1, r4
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff fee2 	bl	8004c30 <_printf_common>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d14c      	bne.n	8004f0a <_printf_i+0x1fe>
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	b004      	add	sp, #16
 8004e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7a:	4835      	ldr	r0, [pc, #212]	; (8004f50 <_printf_i+0x244>)
 8004e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	680e      	ldr	r6, [r1, #0]
 8004e84:	061f      	lsls	r7, r3, #24
 8004e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e8a:	600e      	str	r6, [r1, #0]
 8004e8c:	d514      	bpl.n	8004eb8 <_printf_i+0x1ac>
 8004e8e:	07d9      	lsls	r1, r3, #31
 8004e90:	bf44      	itt	mi
 8004e92:	f043 0320 	orrmi.w	r3, r3, #32
 8004e96:	6023      	strmi	r3, [r4, #0]
 8004e98:	b91d      	cbnz	r5, 8004ea2 <_printf_i+0x196>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	f023 0320 	bic.w	r3, r3, #32
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	e7b0      	b.n	8004e08 <_printf_i+0xfc>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f043 0320 	orr.w	r3, r3, #32
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	2378      	movs	r3, #120	; 0x78
 8004eb0:	4828      	ldr	r0, [pc, #160]	; (8004f54 <_printf_i+0x248>)
 8004eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eb6:	e7e3      	b.n	8004e80 <_printf_i+0x174>
 8004eb8:	065e      	lsls	r6, r3, #25
 8004eba:	bf48      	it	mi
 8004ebc:	b2ad      	uxthmi	r5, r5
 8004ebe:	e7e6      	b.n	8004e8e <_printf_i+0x182>
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	e7bb      	b.n	8004e3c <_printf_i+0x130>
 8004ec4:	680b      	ldr	r3, [r1, #0]
 8004ec6:	6826      	ldr	r6, [r4, #0]
 8004ec8:	6960      	ldr	r0, [r4, #20]
 8004eca:	1d1d      	adds	r5, r3, #4
 8004ecc:	600d      	str	r5, [r1, #0]
 8004ece:	0635      	lsls	r5, r6, #24
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0x1cc>
 8004ed4:	6018      	str	r0, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0x1d2>
 8004ed8:	0671      	lsls	r1, r6, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0x1c8>
 8004edc:	8018      	strh	r0, [r3, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6123      	str	r3, [r4, #16]
 8004ee2:	4616      	mov	r6, r2
 8004ee4:	e7ba      	b.n	8004e5c <_printf_i+0x150>
 8004ee6:	680b      	ldr	r3, [r1, #0]
 8004ee8:	1d1a      	adds	r2, r3, #4
 8004eea:	600a      	str	r2, [r1, #0]
 8004eec:	681e      	ldr	r6, [r3, #0]
 8004eee:	6862      	ldr	r2, [r4, #4]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7fb f9ac 	bl	8000250 <memchr>
 8004ef8:	b108      	cbz	r0, 8004efe <_printf_i+0x1f2>
 8004efa:	1b80      	subs	r0, r0, r6
 8004efc:	6060      	str	r0, [r4, #4]
 8004efe:	6863      	ldr	r3, [r4, #4]
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	2300      	movs	r3, #0
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f08:	e7a8      	b.n	8004e5c <_printf_i+0x150>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	4632      	mov	r2, r6
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4640      	mov	r0, r8
 8004f12:	47d0      	blx	sl
 8004f14:	3001      	adds	r0, #1
 8004f16:	d0ab      	beq.n	8004e70 <_printf_i+0x164>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	079b      	lsls	r3, r3, #30
 8004f1c:	d413      	bmi.n	8004f46 <_printf_i+0x23a>
 8004f1e:	68e0      	ldr	r0, [r4, #12]
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	4298      	cmp	r0, r3
 8004f24:	bfb8      	it	lt
 8004f26:	4618      	movlt	r0, r3
 8004f28:	e7a4      	b.n	8004e74 <_printf_i+0x168>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d09b      	beq.n	8004e70 <_printf_i+0x164>
 8004f38:	3501      	adds	r5, #1
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	9903      	ldr	r1, [sp, #12]
 8004f3e:	1a5b      	subs	r3, r3, r1
 8004f40:	42ab      	cmp	r3, r5
 8004f42:	dcf2      	bgt.n	8004f2a <_printf_i+0x21e>
 8004f44:	e7eb      	b.n	8004f1e <_printf_i+0x212>
 8004f46:	2500      	movs	r5, #0
 8004f48:	f104 0619 	add.w	r6, r4, #25
 8004f4c:	e7f5      	b.n	8004f3a <_printf_i+0x22e>
 8004f4e:	bf00      	nop
 8004f50:	080059bd 	.word	0x080059bd
 8004f54:	080059ce 	.word	0x080059ce

08004f58 <_scanf_chars>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	4615      	mov	r5, r2
 8004f5e:	688a      	ldr	r2, [r1, #8]
 8004f60:	4680      	mov	r8, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	b932      	cbnz	r2, 8004f74 <_scanf_chars+0x1c>
 8004f66:	698a      	ldr	r2, [r1, #24]
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2201      	moveq	r2, #1
 8004f6e:	f04f 32ff 	movne.w	r2, #4294967295
 8004f72:	608a      	str	r2, [r1, #8]
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005004 <_scanf_chars+0xac>
 8004f7a:	06d1      	lsls	r1, r2, #27
 8004f7c:	bf5f      	itttt	pl
 8004f7e:	681a      	ldrpl	r2, [r3, #0]
 8004f80:	1d11      	addpl	r1, r2, #4
 8004f82:	6019      	strpl	r1, [r3, #0]
 8004f84:	6816      	ldrpl	r6, [r2, #0]
 8004f86:	2700      	movs	r7, #0
 8004f88:	69a0      	ldr	r0, [r4, #24]
 8004f8a:	b188      	cbz	r0, 8004fb0 <_scanf_chars+0x58>
 8004f8c:	2801      	cmp	r0, #1
 8004f8e:	d107      	bne.n	8004fa0 <_scanf_chars+0x48>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	5c9b      	ldrb	r3, [r3, r2]
 8004f98:	b953      	cbnz	r3, 8004fb0 <_scanf_chars+0x58>
 8004f9a:	bb27      	cbnz	r7, 8004fe6 <_scanf_chars+0x8e>
 8004f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa0:	2802      	cmp	r0, #2
 8004fa2:	d120      	bne.n	8004fe6 <_scanf_chars+0x8e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004fac:	071b      	lsls	r3, r3, #28
 8004fae:	d41a      	bmi.n	8004fe6 <_scanf_chars+0x8e>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	06da      	lsls	r2, r3, #27
 8004fb4:	bf5e      	ittt	pl
 8004fb6:	682b      	ldrpl	r3, [r5, #0]
 8004fb8:	781b      	ldrbpl	r3, [r3, #0]
 8004fba:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004fbe:	682a      	ldr	r2, [r5, #0]
 8004fc0:	686b      	ldr	r3, [r5, #4]
 8004fc2:	3201      	adds	r2, #1
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	68a2      	ldr	r2, [r4, #8]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	3a01      	subs	r2, #1
 8004fcc:	606b      	str	r3, [r5, #4]
 8004fce:	3701      	adds	r7, #1
 8004fd0:	60a2      	str	r2, [r4, #8]
 8004fd2:	b142      	cbz	r2, 8004fe6 <_scanf_chars+0x8e>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dcd7      	bgt.n	8004f88 <_scanf_chars+0x30>
 8004fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4798      	blx	r3
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0d0      	beq.n	8004f88 <_scanf_chars+0x30>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f013 0310 	ands.w	r3, r3, #16
 8004fec:	d105      	bne.n	8004ffa <_scanf_chars+0xa2>
 8004fee:	68e2      	ldr	r2, [r4, #12]
 8004ff0:	3201      	adds	r2, #1
 8004ff2:	60e2      	str	r2, [r4, #12]
 8004ff4:	69a2      	ldr	r2, [r4, #24]
 8004ff6:	b102      	cbz	r2, 8004ffa <_scanf_chars+0xa2>
 8004ff8:	7033      	strb	r3, [r6, #0]
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	441f      	add	r7, r3
 8004ffe:	6127      	str	r7, [r4, #16]
 8005000:	2000      	movs	r0, #0
 8005002:	e7cb      	b.n	8004f9c <_scanf_chars+0x44>
 8005004:	080059fb 	.word	0x080059fb

08005008 <_scanf_i>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4698      	mov	r8, r3
 800500e:	4b74      	ldr	r3, [pc, #464]	; (80051e0 <_scanf_i+0x1d8>)
 8005010:	460c      	mov	r4, r1
 8005012:	4682      	mov	sl, r0
 8005014:	4616      	mov	r6, r2
 8005016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800501a:	b087      	sub	sp, #28
 800501c:	ab03      	add	r3, sp, #12
 800501e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005022:	4b70      	ldr	r3, [pc, #448]	; (80051e4 <_scanf_i+0x1dc>)
 8005024:	69a1      	ldr	r1, [r4, #24]
 8005026:	4a70      	ldr	r2, [pc, #448]	; (80051e8 <_scanf_i+0x1e0>)
 8005028:	2903      	cmp	r1, #3
 800502a:	bf18      	it	ne
 800502c:	461a      	movne	r2, r3
 800502e:	68a3      	ldr	r3, [r4, #8]
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005038:	bf88      	it	hi
 800503a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800503e:	4627      	mov	r7, r4
 8005040:	bf82      	ittt	hi
 8005042:	eb03 0905 	addhi.w	r9, r3, r5
 8005046:	f240 135d 	movwhi	r3, #349	; 0x15d
 800504a:	60a3      	strhi	r3, [r4, #8]
 800504c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005050:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005054:	bf98      	it	ls
 8005056:	f04f 0900 	movls.w	r9, #0
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	463d      	mov	r5, r7
 800505e:	f04f 0b00 	mov.w	fp, #0
 8005062:	6831      	ldr	r1, [r6, #0]
 8005064:	ab03      	add	r3, sp, #12
 8005066:	7809      	ldrb	r1, [r1, #0]
 8005068:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800506c:	2202      	movs	r2, #2
 800506e:	f7fb f8ef 	bl	8000250 <memchr>
 8005072:	b328      	cbz	r0, 80050c0 <_scanf_i+0xb8>
 8005074:	f1bb 0f01 	cmp.w	fp, #1
 8005078:	d159      	bne.n	800512e <_scanf_i+0x126>
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	b92a      	cbnz	r2, 800508a <_scanf_i+0x82>
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	2308      	movs	r3, #8
 8005082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005090:	6022      	str	r2, [r4, #0]
 8005092:	68a2      	ldr	r2, [r4, #8]
 8005094:	1e51      	subs	r1, r2, #1
 8005096:	60a1      	str	r1, [r4, #8]
 8005098:	b192      	cbz	r2, 80050c0 <_scanf_i+0xb8>
 800509a:	6832      	ldr	r2, [r6, #0]
 800509c:	1c51      	adds	r1, r2, #1
 800509e:	6031      	str	r1, [r6, #0]
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	f805 2b01 	strb.w	r2, [r5], #1
 80050a6:	6872      	ldr	r2, [r6, #4]
 80050a8:	3a01      	subs	r2, #1
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	6072      	str	r2, [r6, #4]
 80050ae:	dc07      	bgt.n	80050c0 <_scanf_i+0xb8>
 80050b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80050b4:	4631      	mov	r1, r6
 80050b6:	4650      	mov	r0, sl
 80050b8:	4790      	blx	r2
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f040 8085 	bne.w	80051ca <_scanf_i+0x1c2>
 80050c0:	f10b 0b01 	add.w	fp, fp, #1
 80050c4:	f1bb 0f03 	cmp.w	fp, #3
 80050c8:	d1cb      	bne.n	8005062 <_scanf_i+0x5a>
 80050ca:	6863      	ldr	r3, [r4, #4]
 80050cc:	b90b      	cbnz	r3, 80050d2 <_scanf_i+0xca>
 80050ce:	230a      	movs	r3, #10
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	4945      	ldr	r1, [pc, #276]	; (80051ec <_scanf_i+0x1e4>)
 80050d6:	6960      	ldr	r0, [r4, #20]
 80050d8:	1ac9      	subs	r1, r1, r3
 80050da:	f000 f889 	bl	80051f0 <__sccl>
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d03d      	beq.n	8005166 <_scanf_i+0x15e>
 80050ea:	6831      	ldr	r1, [r6, #0]
 80050ec:	6960      	ldr	r0, [r4, #20]
 80050ee:	f891 c000 	ldrb.w	ip, [r1]
 80050f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d035      	beq.n	8005166 <_scanf_i+0x15e>
 80050fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80050fe:	d124      	bne.n	800514a <_scanf_i+0x142>
 8005100:	0510      	lsls	r0, r2, #20
 8005102:	d522      	bpl.n	800514a <_scanf_i+0x142>
 8005104:	f10b 0b01 	add.w	fp, fp, #1
 8005108:	f1b9 0f00 	cmp.w	r9, #0
 800510c:	d003      	beq.n	8005116 <_scanf_i+0x10e>
 800510e:	3301      	adds	r3, #1
 8005110:	f109 39ff 	add.w	r9, r9, #4294967295
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	6873      	ldr	r3, [r6, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	6073      	str	r3, [r6, #4]
 800511e:	dd1b      	ble.n	8005158 <_scanf_i+0x150>
 8005120:	6833      	ldr	r3, [r6, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	68a3      	ldr	r3, [r4, #8]
 8005128:	3b01      	subs	r3, #1
 800512a:	60a3      	str	r3, [r4, #8]
 800512c:	e7d9      	b.n	80050e2 <_scanf_i+0xda>
 800512e:	f1bb 0f02 	cmp.w	fp, #2
 8005132:	d1ae      	bne.n	8005092 <_scanf_i+0x8a>
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800513a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800513e:	d1bf      	bne.n	80050c0 <_scanf_i+0xb8>
 8005140:	2310      	movs	r3, #16
 8005142:	6063      	str	r3, [r4, #4]
 8005144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005148:	e7a2      	b.n	8005090 <_scanf_i+0x88>
 800514a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	780b      	ldrb	r3, [r1, #0]
 8005152:	f805 3b01 	strb.w	r3, [r5], #1
 8005156:	e7de      	b.n	8005116 <_scanf_i+0x10e>
 8005158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800515c:	4631      	mov	r1, r6
 800515e:	4650      	mov	r0, sl
 8005160:	4798      	blx	r3
 8005162:	2800      	cmp	r0, #0
 8005164:	d0df      	beq.n	8005126 <_scanf_i+0x11e>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	05d9      	lsls	r1, r3, #23
 800516a:	d50d      	bpl.n	8005188 <_scanf_i+0x180>
 800516c:	42bd      	cmp	r5, r7
 800516e:	d909      	bls.n	8005184 <_scanf_i+0x17c>
 8005170:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005178:	4632      	mov	r2, r6
 800517a:	4650      	mov	r0, sl
 800517c:	4798      	blx	r3
 800517e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005182:	464d      	mov	r5, r9
 8005184:	42bd      	cmp	r5, r7
 8005186:	d028      	beq.n	80051da <_scanf_i+0x1d2>
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	f012 0210 	ands.w	r2, r2, #16
 800518e:	d113      	bne.n	80051b8 <_scanf_i+0x1b0>
 8005190:	702a      	strb	r2, [r5, #0]
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	9e01      	ldr	r6, [sp, #4]
 8005196:	4639      	mov	r1, r7
 8005198:	4650      	mov	r0, sl
 800519a:	47b0      	blx	r6
 800519c:	f8d8 3000 	ldr.w	r3, [r8]
 80051a0:	6821      	ldr	r1, [r4, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	f8c8 2000 	str.w	r2, [r8]
 80051a8:	f011 0f20 	tst.w	r1, #32
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	d00f      	beq.n	80051d0 <_scanf_i+0x1c8>
 80051b0:	6018      	str	r0, [r3, #0]
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60e3      	str	r3, [r4, #12]
 80051b8:	1bed      	subs	r5, r5, r7
 80051ba:	44ab      	add	fp, r5
 80051bc:	6925      	ldr	r5, [r4, #16]
 80051be:	445d      	add	r5, fp
 80051c0:	6125      	str	r5, [r4, #16]
 80051c2:	2000      	movs	r0, #0
 80051c4:	b007      	add	sp, #28
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	f04f 0b00 	mov.w	fp, #0
 80051ce:	e7ca      	b.n	8005166 <_scanf_i+0x15e>
 80051d0:	07ca      	lsls	r2, r1, #31
 80051d2:	bf4c      	ite	mi
 80051d4:	8018      	strhmi	r0, [r3, #0]
 80051d6:	6018      	strpl	r0, [r3, #0]
 80051d8:	e7eb      	b.n	80051b2 <_scanf_i+0x1aa>
 80051da:	2001      	movs	r0, #1
 80051dc:	e7f2      	b.n	80051c4 <_scanf_i+0x1bc>
 80051de:	bf00      	nop
 80051e0:	08005988 	.word	0x08005988
 80051e4:	08005469 	.word	0x08005469
 80051e8:	0800536d 	.word	0x0800536d
 80051ec:	080059f8 	.word	0x080059f8

080051f0 <__sccl>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	780b      	ldrb	r3, [r1, #0]
 80051f4:	4604      	mov	r4, r0
 80051f6:	2b5e      	cmp	r3, #94	; 0x5e
 80051f8:	bf0b      	itete	eq
 80051fa:	784b      	ldrbeq	r3, [r1, #1]
 80051fc:	1c48      	addne	r0, r1, #1
 80051fe:	1c88      	addeq	r0, r1, #2
 8005200:	2200      	movne	r2, #0
 8005202:	bf08      	it	eq
 8005204:	2201      	moveq	r2, #1
 8005206:	1e61      	subs	r1, r4, #1
 8005208:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800520c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005210:	42a9      	cmp	r1, r5
 8005212:	d1fb      	bne.n	800520c <__sccl+0x1c>
 8005214:	b90b      	cbnz	r3, 800521a <__sccl+0x2a>
 8005216:	3801      	subs	r0, #1
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	f082 0101 	eor.w	r1, r2, #1
 800521e:	54e1      	strb	r1, [r4, r3]
 8005220:	1c42      	adds	r2, r0, #1
 8005222:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005226:	2d2d      	cmp	r5, #45	; 0x2d
 8005228:	f102 36ff 	add.w	r6, r2, #4294967295
 800522c:	4610      	mov	r0, r2
 800522e:	d006      	beq.n	800523e <__sccl+0x4e>
 8005230:	2d5d      	cmp	r5, #93	; 0x5d
 8005232:	d0f1      	beq.n	8005218 <__sccl+0x28>
 8005234:	b90d      	cbnz	r5, 800523a <__sccl+0x4a>
 8005236:	4630      	mov	r0, r6
 8005238:	e7ee      	b.n	8005218 <__sccl+0x28>
 800523a:	462b      	mov	r3, r5
 800523c:	e7ef      	b.n	800521e <__sccl+0x2e>
 800523e:	7816      	ldrb	r6, [r2, #0]
 8005240:	2e5d      	cmp	r6, #93	; 0x5d
 8005242:	d0fa      	beq.n	800523a <__sccl+0x4a>
 8005244:	42b3      	cmp	r3, r6
 8005246:	dcf8      	bgt.n	800523a <__sccl+0x4a>
 8005248:	4618      	mov	r0, r3
 800524a:	3001      	adds	r0, #1
 800524c:	4286      	cmp	r6, r0
 800524e:	5421      	strb	r1, [r4, r0]
 8005250:	dcfb      	bgt.n	800524a <__sccl+0x5a>
 8005252:	43d8      	mvns	r0, r3
 8005254:	4430      	add	r0, r6
 8005256:	1c5d      	adds	r5, r3, #1
 8005258:	42b3      	cmp	r3, r6
 800525a:	bfa8      	it	ge
 800525c:	2000      	movge	r0, #0
 800525e:	182b      	adds	r3, r5, r0
 8005260:	3202      	adds	r2, #2
 8005262:	e7de      	b.n	8005222 <__sccl+0x32>

08005264 <_strtol_l.isra.0>:
 8005264:	2b01      	cmp	r3, #1
 8005266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800526a:	d001      	beq.n	8005270 <_strtol_l.isra.0+0xc>
 800526c:	2b24      	cmp	r3, #36	; 0x24
 800526e:	d906      	bls.n	800527e <_strtol_l.isra.0+0x1a>
 8005270:	f7ff f90c 	bl	800448c <__errno>
 8005274:	2316      	movs	r3, #22
 8005276:	6003      	str	r3, [r0, #0]
 8005278:	2000      	movs	r0, #0
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	4f3a      	ldr	r7, [pc, #232]	; (8005368 <_strtol_l.isra.0+0x104>)
 8005280:	468e      	mov	lr, r1
 8005282:	4676      	mov	r6, lr
 8005284:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005288:	5de5      	ldrb	r5, [r4, r7]
 800528a:	f015 0508 	ands.w	r5, r5, #8
 800528e:	d1f8      	bne.n	8005282 <_strtol_l.isra.0+0x1e>
 8005290:	2c2d      	cmp	r4, #45	; 0x2d
 8005292:	d134      	bne.n	80052fe <_strtol_l.isra.0+0x9a>
 8005294:	f89e 4000 	ldrb.w	r4, [lr]
 8005298:	f04f 0801 	mov.w	r8, #1
 800529c:	f106 0e02 	add.w	lr, r6, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d05c      	beq.n	800535e <_strtol_l.isra.0+0xfa>
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d10c      	bne.n	80052c2 <_strtol_l.isra.0+0x5e>
 80052a8:	2c30      	cmp	r4, #48	; 0x30
 80052aa:	d10a      	bne.n	80052c2 <_strtol_l.isra.0+0x5e>
 80052ac:	f89e 4000 	ldrb.w	r4, [lr]
 80052b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052b4:	2c58      	cmp	r4, #88	; 0x58
 80052b6:	d14d      	bne.n	8005354 <_strtol_l.isra.0+0xf0>
 80052b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80052bc:	2310      	movs	r3, #16
 80052be:	f10e 0e02 	add.w	lr, lr, #2
 80052c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80052c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80052ca:	2600      	movs	r6, #0
 80052cc:	fbbc f9f3 	udiv	r9, ip, r3
 80052d0:	4635      	mov	r5, r6
 80052d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80052d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80052da:	2f09      	cmp	r7, #9
 80052dc:	d818      	bhi.n	8005310 <_strtol_l.isra.0+0xac>
 80052de:	463c      	mov	r4, r7
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	dd24      	ble.n	800532e <_strtol_l.isra.0+0xca>
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	db1f      	blt.n	8005328 <_strtol_l.isra.0+0xc4>
 80052e8:	45a9      	cmp	r9, r5
 80052ea:	d31d      	bcc.n	8005328 <_strtol_l.isra.0+0xc4>
 80052ec:	d101      	bne.n	80052f2 <_strtol_l.isra.0+0x8e>
 80052ee:	45a2      	cmp	sl, r4
 80052f0:	db1a      	blt.n	8005328 <_strtol_l.isra.0+0xc4>
 80052f2:	fb05 4503 	mla	r5, r5, r3, r4
 80052f6:	2601      	movs	r6, #1
 80052f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80052fc:	e7eb      	b.n	80052d6 <_strtol_l.isra.0+0x72>
 80052fe:	2c2b      	cmp	r4, #43	; 0x2b
 8005300:	bf08      	it	eq
 8005302:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005306:	46a8      	mov	r8, r5
 8005308:	bf08      	it	eq
 800530a:	f106 0e02 	addeq.w	lr, r6, #2
 800530e:	e7c7      	b.n	80052a0 <_strtol_l.isra.0+0x3c>
 8005310:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005314:	2f19      	cmp	r7, #25
 8005316:	d801      	bhi.n	800531c <_strtol_l.isra.0+0xb8>
 8005318:	3c37      	subs	r4, #55	; 0x37
 800531a:	e7e1      	b.n	80052e0 <_strtol_l.isra.0+0x7c>
 800531c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005320:	2f19      	cmp	r7, #25
 8005322:	d804      	bhi.n	800532e <_strtol_l.isra.0+0xca>
 8005324:	3c57      	subs	r4, #87	; 0x57
 8005326:	e7db      	b.n	80052e0 <_strtol_l.isra.0+0x7c>
 8005328:	f04f 36ff 	mov.w	r6, #4294967295
 800532c:	e7e4      	b.n	80052f8 <_strtol_l.isra.0+0x94>
 800532e:	2e00      	cmp	r6, #0
 8005330:	da05      	bge.n	800533e <_strtol_l.isra.0+0xda>
 8005332:	2322      	movs	r3, #34	; 0x22
 8005334:	6003      	str	r3, [r0, #0]
 8005336:	4665      	mov	r5, ip
 8005338:	b942      	cbnz	r2, 800534c <_strtol_l.isra.0+0xe8>
 800533a:	4628      	mov	r0, r5
 800533c:	e79d      	b.n	800527a <_strtol_l.isra.0+0x16>
 800533e:	f1b8 0f00 	cmp.w	r8, #0
 8005342:	d000      	beq.n	8005346 <_strtol_l.isra.0+0xe2>
 8005344:	426d      	negs	r5, r5
 8005346:	2a00      	cmp	r2, #0
 8005348:	d0f7      	beq.n	800533a <_strtol_l.isra.0+0xd6>
 800534a:	b10e      	cbz	r6, 8005350 <_strtol_l.isra.0+0xec>
 800534c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	e7f2      	b.n	800533a <_strtol_l.isra.0+0xd6>
 8005354:	2430      	movs	r4, #48	; 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1b3      	bne.n	80052c2 <_strtol_l.isra.0+0x5e>
 800535a:	2308      	movs	r3, #8
 800535c:	e7b1      	b.n	80052c2 <_strtol_l.isra.0+0x5e>
 800535e:	2c30      	cmp	r4, #48	; 0x30
 8005360:	d0a4      	beq.n	80052ac <_strtol_l.isra.0+0x48>
 8005362:	230a      	movs	r3, #10
 8005364:	e7ad      	b.n	80052c2 <_strtol_l.isra.0+0x5e>
 8005366:	bf00      	nop
 8005368:	080059fb 	.word	0x080059fb

0800536c <_strtol_r>:
 800536c:	f7ff bf7a 	b.w	8005264 <_strtol_l.isra.0>

08005370 <_strtoul_l.isra.0>:
 8005370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005374:	4e3b      	ldr	r6, [pc, #236]	; (8005464 <_strtoul_l.isra.0+0xf4>)
 8005376:	4686      	mov	lr, r0
 8005378:	468c      	mov	ip, r1
 800537a:	4660      	mov	r0, ip
 800537c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005380:	5da5      	ldrb	r5, [r4, r6]
 8005382:	f015 0508 	ands.w	r5, r5, #8
 8005386:	d1f8      	bne.n	800537a <_strtoul_l.isra.0+0xa>
 8005388:	2c2d      	cmp	r4, #45	; 0x2d
 800538a:	d134      	bne.n	80053f6 <_strtoul_l.isra.0+0x86>
 800538c:	f89c 4000 	ldrb.w	r4, [ip]
 8005390:	f04f 0801 	mov.w	r8, #1
 8005394:	f100 0c02 	add.w	ip, r0, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05e      	beq.n	800545a <_strtoul_l.isra.0+0xea>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d10c      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 80053a0:	2c30      	cmp	r4, #48	; 0x30
 80053a2:	d10a      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 80053a4:	f89c 0000 	ldrb.w	r0, [ip]
 80053a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80053ac:	2858      	cmp	r0, #88	; 0x58
 80053ae:	d14f      	bne.n	8005450 <_strtoul_l.isra.0+0xe0>
 80053b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80053b4:	2310      	movs	r3, #16
 80053b6:	f10c 0c02 	add.w	ip, ip, #2
 80053ba:	f04f 37ff 	mov.w	r7, #4294967295
 80053be:	2500      	movs	r5, #0
 80053c0:	fbb7 f7f3 	udiv	r7, r7, r3
 80053c4:	fb03 f907 	mul.w	r9, r3, r7
 80053c8:	ea6f 0909 	mvn.w	r9, r9
 80053cc:	4628      	mov	r0, r5
 80053ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80053d2:	2e09      	cmp	r6, #9
 80053d4:	d818      	bhi.n	8005408 <_strtoul_l.isra.0+0x98>
 80053d6:	4634      	mov	r4, r6
 80053d8:	42a3      	cmp	r3, r4
 80053da:	dd24      	ble.n	8005426 <_strtoul_l.isra.0+0xb6>
 80053dc:	2d00      	cmp	r5, #0
 80053de:	db1f      	blt.n	8005420 <_strtoul_l.isra.0+0xb0>
 80053e0:	4287      	cmp	r7, r0
 80053e2:	d31d      	bcc.n	8005420 <_strtoul_l.isra.0+0xb0>
 80053e4:	d101      	bne.n	80053ea <_strtoul_l.isra.0+0x7a>
 80053e6:	45a1      	cmp	r9, r4
 80053e8:	db1a      	blt.n	8005420 <_strtoul_l.isra.0+0xb0>
 80053ea:	fb00 4003 	mla	r0, r0, r3, r4
 80053ee:	2501      	movs	r5, #1
 80053f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80053f4:	e7eb      	b.n	80053ce <_strtoul_l.isra.0+0x5e>
 80053f6:	2c2b      	cmp	r4, #43	; 0x2b
 80053f8:	bf08      	it	eq
 80053fa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80053fe:	46a8      	mov	r8, r5
 8005400:	bf08      	it	eq
 8005402:	f100 0c02 	addeq.w	ip, r0, #2
 8005406:	e7c7      	b.n	8005398 <_strtoul_l.isra.0+0x28>
 8005408:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800540c:	2e19      	cmp	r6, #25
 800540e:	d801      	bhi.n	8005414 <_strtoul_l.isra.0+0xa4>
 8005410:	3c37      	subs	r4, #55	; 0x37
 8005412:	e7e1      	b.n	80053d8 <_strtoul_l.isra.0+0x68>
 8005414:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005418:	2e19      	cmp	r6, #25
 800541a:	d804      	bhi.n	8005426 <_strtoul_l.isra.0+0xb6>
 800541c:	3c57      	subs	r4, #87	; 0x57
 800541e:	e7db      	b.n	80053d8 <_strtoul_l.isra.0+0x68>
 8005420:	f04f 35ff 	mov.w	r5, #4294967295
 8005424:	e7e4      	b.n	80053f0 <_strtoul_l.isra.0+0x80>
 8005426:	2d00      	cmp	r5, #0
 8005428:	da07      	bge.n	800543a <_strtoul_l.isra.0+0xca>
 800542a:	2322      	movs	r3, #34	; 0x22
 800542c:	f8ce 3000 	str.w	r3, [lr]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	b942      	cbnz	r2, 8005448 <_strtoul_l.isra.0+0xd8>
 8005436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800543a:	f1b8 0f00 	cmp.w	r8, #0
 800543e:	d000      	beq.n	8005442 <_strtoul_l.isra.0+0xd2>
 8005440:	4240      	negs	r0, r0
 8005442:	2a00      	cmp	r2, #0
 8005444:	d0f7      	beq.n	8005436 <_strtoul_l.isra.0+0xc6>
 8005446:	b10d      	cbz	r5, 800544c <_strtoul_l.isra.0+0xdc>
 8005448:	f10c 31ff 	add.w	r1, ip, #4294967295
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	e7f2      	b.n	8005436 <_strtoul_l.isra.0+0xc6>
 8005450:	2430      	movs	r4, #48	; 0x30
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1b1      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 8005456:	2308      	movs	r3, #8
 8005458:	e7af      	b.n	80053ba <_strtoul_l.isra.0+0x4a>
 800545a:	2c30      	cmp	r4, #48	; 0x30
 800545c:	d0a2      	beq.n	80053a4 <_strtoul_l.isra.0+0x34>
 800545e:	230a      	movs	r3, #10
 8005460:	e7ab      	b.n	80053ba <_strtoul_l.isra.0+0x4a>
 8005462:	bf00      	nop
 8005464:	080059fb 	.word	0x080059fb

08005468 <_strtoul_r>:
 8005468:	f7ff bf82 	b.w	8005370 <_strtoul_l.isra.0>

0800546c <__submore>:
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005478:	4299      	cmp	r1, r3
 800547a:	d11d      	bne.n	80054b8 <__submore+0x4c>
 800547c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005480:	f000 f8a8 	bl	80055d4 <_malloc_r>
 8005484:	b918      	cbnz	r0, 800548e <__submore+0x22>
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005492:	63a3      	str	r3, [r4, #56]	; 0x38
 8005494:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005498:	6360      	str	r0, [r4, #52]	; 0x34
 800549a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800549e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80054a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80054a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80054aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80054ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80054b2:	6020      	str	r0, [r4, #0]
 80054b4:	2000      	movs	r0, #0
 80054b6:	e7e8      	b.n	800548a <__submore+0x1e>
 80054b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054ba:	0077      	lsls	r7, r6, #1
 80054bc:	463a      	mov	r2, r7
 80054be:	f000 f8e3 	bl	8005688 <_realloc_r>
 80054c2:	4605      	mov	r5, r0
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0de      	beq.n	8005486 <__submore+0x1a>
 80054c8:	eb00 0806 	add.w	r8, r0, r6
 80054cc:	4601      	mov	r1, r0
 80054ce:	4632      	mov	r2, r6
 80054d0:	4640      	mov	r0, r8
 80054d2:	f000 f807 	bl	80054e4 <memcpy>
 80054d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80054da:	f8c4 8000 	str.w	r8, [r4]
 80054de:	e7e9      	b.n	80054b4 <__submore+0x48>

080054e0 <__retarget_lock_acquire_recursive>:
 80054e0:	4770      	bx	lr

080054e2 <__retarget_lock_release_recursive>:
 80054e2:	4770      	bx	lr

080054e4 <memcpy>:
 80054e4:	440a      	add	r2, r1
 80054e6:	4291      	cmp	r1, r2
 80054e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ec:	d100      	bne.n	80054f0 <memcpy+0xc>
 80054ee:	4770      	bx	lr
 80054f0:	b510      	push	{r4, lr}
 80054f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054fa:	4291      	cmp	r1, r2
 80054fc:	d1f9      	bne.n	80054f2 <memcpy+0xe>
 80054fe:	bd10      	pop	{r4, pc}

08005500 <memmove>:
 8005500:	4288      	cmp	r0, r1
 8005502:	b510      	push	{r4, lr}
 8005504:	eb01 0402 	add.w	r4, r1, r2
 8005508:	d902      	bls.n	8005510 <memmove+0x10>
 800550a:	4284      	cmp	r4, r0
 800550c:	4623      	mov	r3, r4
 800550e:	d807      	bhi.n	8005520 <memmove+0x20>
 8005510:	1e43      	subs	r3, r0, #1
 8005512:	42a1      	cmp	r1, r4
 8005514:	d008      	beq.n	8005528 <memmove+0x28>
 8005516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800551e:	e7f8      	b.n	8005512 <memmove+0x12>
 8005520:	4402      	add	r2, r0
 8005522:	4601      	mov	r1, r0
 8005524:	428a      	cmp	r2, r1
 8005526:	d100      	bne.n	800552a <memmove+0x2a>
 8005528:	bd10      	pop	{r4, pc}
 800552a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800552e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005532:	e7f7      	b.n	8005524 <memmove+0x24>

08005534 <_free_r>:
 8005534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005536:	2900      	cmp	r1, #0
 8005538:	d048      	beq.n	80055cc <_free_r+0x98>
 800553a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553e:	9001      	str	r0, [sp, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f1a1 0404 	sub.w	r4, r1, #4
 8005546:	bfb8      	it	lt
 8005548:	18e4      	addlt	r4, r4, r3
 800554a:	f000 f8d3 	bl	80056f4 <__malloc_lock>
 800554e:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <_free_r+0x9c>)
 8005550:	9801      	ldr	r0, [sp, #4]
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	4615      	mov	r5, r2
 8005556:	b933      	cbnz	r3, 8005566 <_free_r+0x32>
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6014      	str	r4, [r2, #0]
 800555c:	b003      	add	sp, #12
 800555e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005562:	f000 b8cd 	b.w	8005700 <__malloc_unlock>
 8005566:	42a3      	cmp	r3, r4
 8005568:	d90b      	bls.n	8005582 <_free_r+0x4e>
 800556a:	6821      	ldr	r1, [r4, #0]
 800556c:	1862      	adds	r2, r4, r1
 800556e:	4293      	cmp	r3, r2
 8005570:	bf04      	itt	eq
 8005572:	681a      	ldreq	r2, [r3, #0]
 8005574:	685b      	ldreq	r3, [r3, #4]
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	bf04      	itt	eq
 800557a:	1852      	addeq	r2, r2, r1
 800557c:	6022      	streq	r2, [r4, #0]
 800557e:	602c      	str	r4, [r5, #0]
 8005580:	e7ec      	b.n	800555c <_free_r+0x28>
 8005582:	461a      	mov	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b10b      	cbz	r3, 800558c <_free_r+0x58>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d9fa      	bls.n	8005582 <_free_r+0x4e>
 800558c:	6811      	ldr	r1, [r2, #0]
 800558e:	1855      	adds	r5, r2, r1
 8005590:	42a5      	cmp	r5, r4
 8005592:	d10b      	bne.n	80055ac <_free_r+0x78>
 8005594:	6824      	ldr	r4, [r4, #0]
 8005596:	4421      	add	r1, r4
 8005598:	1854      	adds	r4, r2, r1
 800559a:	42a3      	cmp	r3, r4
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	d1dd      	bne.n	800555c <_free_r+0x28>
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6053      	str	r3, [r2, #4]
 80055a6:	4421      	add	r1, r4
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	e7d7      	b.n	800555c <_free_r+0x28>
 80055ac:	d902      	bls.n	80055b4 <_free_r+0x80>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	e7d3      	b.n	800555c <_free_r+0x28>
 80055b4:	6825      	ldr	r5, [r4, #0]
 80055b6:	1961      	adds	r1, r4, r5
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf04      	itt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	bf04      	itt	eq
 80055c4:	1949      	addeq	r1, r1, r5
 80055c6:	6021      	streq	r1, [r4, #0]
 80055c8:	6054      	str	r4, [r2, #4]
 80055ca:	e7c7      	b.n	800555c <_free_r+0x28>
 80055cc:	b003      	add	sp, #12
 80055ce:	bd30      	pop	{r4, r5, pc}
 80055d0:	20000090 	.word	0x20000090

080055d4 <_malloc_r>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	1ccd      	adds	r5, r1, #3
 80055d8:	f025 0503 	bic.w	r5, r5, #3
 80055dc:	3508      	adds	r5, #8
 80055de:	2d0c      	cmp	r5, #12
 80055e0:	bf38      	it	cc
 80055e2:	250c      	movcc	r5, #12
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	4606      	mov	r6, r0
 80055e8:	db01      	blt.n	80055ee <_malloc_r+0x1a>
 80055ea:	42a9      	cmp	r1, r5
 80055ec:	d903      	bls.n	80055f6 <_malloc_r+0x22>
 80055ee:	230c      	movs	r3, #12
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	2000      	movs	r0, #0
 80055f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f6:	f000 f87d 	bl	80056f4 <__malloc_lock>
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <_malloc_r+0xac>)
 80055fc:	680a      	ldr	r2, [r1, #0]
 80055fe:	4614      	mov	r4, r2
 8005600:	b99c      	cbnz	r4, 800562a <_malloc_r+0x56>
 8005602:	4f20      	ldr	r7, [pc, #128]	; (8005684 <_malloc_r+0xb0>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b923      	cbnz	r3, 8005612 <_malloc_r+0x3e>
 8005608:	4621      	mov	r1, r4
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f862 	bl	80056d4 <_sbrk_r>
 8005610:	6038      	str	r0, [r7, #0]
 8005612:	4629      	mov	r1, r5
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f85d 	bl	80056d4 <_sbrk_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d123      	bne.n	8005666 <_malloc_r+0x92>
 800561e:	230c      	movs	r3, #12
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	4630      	mov	r0, r6
 8005624:	f000 f86c 	bl	8005700 <__malloc_unlock>
 8005628:	e7e3      	b.n	80055f2 <_malloc_r+0x1e>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	1b5b      	subs	r3, r3, r5
 800562e:	d417      	bmi.n	8005660 <_malloc_r+0x8c>
 8005630:	2b0b      	cmp	r3, #11
 8005632:	d903      	bls.n	800563c <_malloc_r+0x68>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	441c      	add	r4, r3
 8005638:	6025      	str	r5, [r4, #0]
 800563a:	e004      	b.n	8005646 <_malloc_r+0x72>
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	42a2      	cmp	r2, r4
 8005640:	bf0c      	ite	eq
 8005642:	600b      	streq	r3, [r1, #0]
 8005644:	6053      	strne	r3, [r2, #4]
 8005646:	4630      	mov	r0, r6
 8005648:	f000 f85a 	bl	8005700 <__malloc_unlock>
 800564c:	f104 000b 	add.w	r0, r4, #11
 8005650:	1d23      	adds	r3, r4, #4
 8005652:	f020 0007 	bic.w	r0, r0, #7
 8005656:	1ac2      	subs	r2, r0, r3
 8005658:	d0cc      	beq.n	80055f4 <_malloc_r+0x20>
 800565a:	1a1b      	subs	r3, r3, r0
 800565c:	50a3      	str	r3, [r4, r2]
 800565e:	e7c9      	b.n	80055f4 <_malloc_r+0x20>
 8005660:	4622      	mov	r2, r4
 8005662:	6864      	ldr	r4, [r4, #4]
 8005664:	e7cc      	b.n	8005600 <_malloc_r+0x2c>
 8005666:	1cc4      	adds	r4, r0, #3
 8005668:	f024 0403 	bic.w	r4, r4, #3
 800566c:	42a0      	cmp	r0, r4
 800566e:	d0e3      	beq.n	8005638 <_malloc_r+0x64>
 8005670:	1a21      	subs	r1, r4, r0
 8005672:	4630      	mov	r0, r6
 8005674:	f000 f82e 	bl	80056d4 <_sbrk_r>
 8005678:	3001      	adds	r0, #1
 800567a:	d1dd      	bne.n	8005638 <_malloc_r+0x64>
 800567c:	e7cf      	b.n	800561e <_malloc_r+0x4a>
 800567e:	bf00      	nop
 8005680:	20000090 	.word	0x20000090
 8005684:	20000094 	.word	0x20000094

08005688 <_realloc_r>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	4607      	mov	r7, r0
 800568c:	4614      	mov	r4, r2
 800568e:	460e      	mov	r6, r1
 8005690:	b921      	cbnz	r1, 800569c <_realloc_r+0x14>
 8005692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005696:	4611      	mov	r1, r2
 8005698:	f7ff bf9c 	b.w	80055d4 <_malloc_r>
 800569c:	b922      	cbnz	r2, 80056a8 <_realloc_r+0x20>
 800569e:	f7ff ff49 	bl	8005534 <_free_r>
 80056a2:	4625      	mov	r5, r4
 80056a4:	4628      	mov	r0, r5
 80056a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a8:	f000 f830 	bl	800570c <_malloc_usable_size_r>
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d20f      	bcs.n	80056d0 <_realloc_r+0x48>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ff8e 	bl	80055d4 <_malloc_r>
 80056b8:	4605      	mov	r5, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0f2      	beq.n	80056a4 <_realloc_r+0x1c>
 80056be:	4631      	mov	r1, r6
 80056c0:	4622      	mov	r2, r4
 80056c2:	f7ff ff0f 	bl	80054e4 <memcpy>
 80056c6:	4631      	mov	r1, r6
 80056c8:	4638      	mov	r0, r7
 80056ca:	f7ff ff33 	bl	8005534 <_free_r>
 80056ce:	e7e9      	b.n	80056a4 <_realloc_r+0x1c>
 80056d0:	4635      	mov	r5, r6
 80056d2:	e7e7      	b.n	80056a4 <_realloc_r+0x1c>

080056d4 <_sbrk_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d06      	ldr	r5, [pc, #24]	; (80056f0 <_sbrk_r+0x1c>)
 80056d8:	2300      	movs	r3, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	4608      	mov	r0, r1
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	f7fb fc56 	bl	8000f90 <_sbrk>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_sbrk_r+0x1a>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_sbrk_r+0x1a>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	20010230 	.word	0x20010230

080056f4 <__malloc_lock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__malloc_lock+0x8>)
 80056f6:	f7ff bef3 	b.w	80054e0 <__retarget_lock_acquire_recursive>
 80056fa:	bf00      	nop
 80056fc:	20010238 	.word	0x20010238

08005700 <__malloc_unlock>:
 8005700:	4801      	ldr	r0, [pc, #4]	; (8005708 <__malloc_unlock+0x8>)
 8005702:	f7ff beee 	b.w	80054e2 <__retarget_lock_release_recursive>
 8005706:	bf00      	nop
 8005708:	20010238 	.word	0x20010238

0800570c <_malloc_usable_size_r>:
 800570c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005710:	1f18      	subs	r0, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	bfbc      	itt	lt
 8005716:	580b      	ldrlt	r3, [r1, r0]
 8005718:	18c0      	addlt	r0, r0, r3
 800571a:	4770      	bx	lr

0800571c <_init>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr

08005728 <_fini>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	bf00      	nop
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr
