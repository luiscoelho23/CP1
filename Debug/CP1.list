
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c57c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e84  0800c780  0800c780  0001c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d604  0800d604  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d604  0800d604  0001d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d60c  0800d60c  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d60c  0800d60c  0001d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800d614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018484  2000026c  0800d880  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200186f0  0800d880  000286f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e0  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  0003d77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00040e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000420b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b50c  00000000  00000000  000431f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001879d  00000000  00000000  0006e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104072  00000000  00000000  00086e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018af0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f8  00000000  00000000  0018af60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000026c 	.word	0x2000026c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c764 	.word	0x0800c764

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000270 	.word	0x20000270
 800023c:	0800c764 	.word	0x0800c764

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC3_Init1>:
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_ADC3_Init1+0xc0>)
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a40:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <MX_ADC3_Init1+0x7e>
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_ADC3_Init1+0xc4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a70:	f002 fa26 	bl	8002ec0 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC3_Init1+0x8e>
 8000a7a:	f001 fd45 	bl	8002508 <Error_Handler>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a92:	f002 fca1 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC3_Init1+0xb0>
 8000a9c:	f001 fd34 	bl	8002508 <Error_Handler>
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200003a1 	.word	0x200003a1
 8000aac:	200103a8 	.word	0x200103a8
 8000ab0:	40012200 	.word	0x40012200
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_ADC3_Init>:
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_ADC3_Init+0xa0>)
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000afa:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b1c:	f002 f9d0 	bl	8002ec0 <HAL_ADC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC3_Init+0x72>
 8000b26:	f001 fcef 	bl	8002508 <Error_Handler>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b3c:	f002 fc4c 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC3_Init+0x92>
 8000b46:	f001 fcdf 	bl	8002508 <Error_Handler>
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200103a8 	.word	0x200103a8
 8000b58:	40012200 	.word	0x40012200

08000b5c <HAL_ADC_MspInit>:
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d15c      	bne.n	8000c38 <HAL_ADC_MspInit+0xdc>
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0xec>)
 8000bf4:	f003 f8d6 	bl	8003da4 <HAL_GPIO_Init>
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_ADC_MspInit+0xf0>)
 8000c0c:	f003 f8ca 	bl	8003da4 <HAL_GPIO_Init>
 8000c10:	230f      	movs	r3, #15
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xf4>)
 8000c24:	f003 f8be 	bl	8003da4 <HAL_GPIO_Init>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f002 ff08 	bl	8003a42 <HAL_NVIC_SetPriority>
 8000c32:	2012      	movs	r0, #18
 8000c34:	f002 ff21 	bl	8003a7a <HAL_NVIC_EnableIRQ>
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40012200 	.word	0x40012200
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <config_ADC>:
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <config_ADC+0x38>)
 8000c7e:	f002 fbab 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200103a8 	.word	0x200103a8

08000c90 <read_ADC>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <read_ADC+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <read_ADC+0x38>)
 8000c9c:	f002 f954 	bl	8002f48 <HAL_ADC_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <read_ADC+0x2c>
 8000ca6:	bf00      	nop
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <read_ADC+0x34>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f8      	bne.n	8000ca8 <read_ADC+0x18>
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <read_ADC+0x38>)
 8000cb8:	f002 fa1e 	bl	80030f8 <HAL_ADC_Stop_IT>
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <read_ADC+0x3c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200003a0 	.word	0x200003a0
 8000cc8:	200103a8 	.word	0x200103a8
 8000ccc:	200103a4 	.word	0x200103a4

08000cd0 <HAL_ADC_ConvCpltCallback>:
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_ADC_ConvCpltCallback+0x60>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <HAL_ADC_ConvCpltCallback+0x24>
 8000ce0:	4814      	ldr	r0, [pc, #80]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x64>)
 8000ce2:	f002 fb57 	bl	8003394 <HAL_ADC_GetValue>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_ADC_ConvCpltCallback+0x68>)
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e019      	b.n	8000d28 <HAL_ADC_ConvCpltCallback+0x58>
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	480e      	ldr	r0, [pc, #56]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cfa:	f002 fb4b 	bl	8003394 <HAL_ADC_GetValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000d02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000d0e:	f001 f927 	bl	8001f60 <process_buf>
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	200003a1 	.word	0x200003a1
 8000d34:	200103a8 	.word	0x200103a8
 8000d38:	200103a4 	.word	0x200103a4
 8000d3c:	200003a0 	.word	0x200003a0
 8000d40:	20000288 	.word	0x20000288
 8000d44:	200104f8 	.word	0x200104f8

08000d48 <check_command>:
unsigned int counter = 0;

float coef[10] = {-0.0416,-0.0865,0.0000,0.2018,0.3742,0.3742,0.2018,0.0000,-0.0865,-0.0416};

unsigned char check_command(char* message)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	char cmd = INV;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000d54:	2203      	movs	r2, #3
 8000d56:	4990      	ldr	r1, [pc, #576]	; (8000f98 <check_command+0x250>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f007 fbf9 	bl	8008550 <strncmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <check_command+0x20>
 8000d64:	220b      	movs	r2, #11
 8000d66:	e000      	b.n	8000d6a <check_command+0x22>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FNF", 3)) * FNF;
 8000d70:	2203      	movs	r2, #3
 8000d72:	498a      	ldr	r1, [pc, #552]	; (8000f9c <check_command+0x254>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f007 fbeb 	bl	8008550 <strncmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <check_command+0x3c>
 8000d80:	2210      	movs	r2, #16
 8000d82:	e000      	b.n	8000d86 <check_command+0x3e>
 8000d84:	2200      	movs	r2, #0
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4413      	add	r3, r2
 8000d8a:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FFF", 3)) * FFF;
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4984      	ldr	r1, [pc, #528]	; (8000fa0 <check_command+0x258>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f007 fbdd 	bl	8008550 <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <check_command+0x58>
 8000d9c:	2211      	movs	r2, #17
 8000d9e:	e000      	b.n	8000da2 <check_command+0x5a>
 8000da0:	2200      	movs	r2, #0
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4413      	add	r3, r2
 8000da6:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FNI", 3)) * FNI;
 8000da8:	2203      	movs	r2, #3
 8000daa:	497e      	ldr	r1, [pc, #504]	; (8000fa4 <check_command+0x25c>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f007 fbcf 	bl	8008550 <strncmp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <check_command+0x74>
 8000db8:	220e      	movs	r2, #14
 8000dba:	e000      	b.n	8000dbe <check_command+0x76>
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "FFI", 3)) * FFI;
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4978      	ldr	r1, [pc, #480]	; (8000fa8 <check_command+0x260>)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f007 fbc1 	bl	8008550 <strncmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <check_command+0x90>
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	e000      	b.n	8000dda <check_command+0x92>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	4413      	add	r3, r2
 8000dde:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "ST", 2)) * ST;
 8000de0:	2202      	movs	r2, #2
 8000de2:	4972      	ldr	r1, [pc, #456]	; (8000fac <check_command+0x264>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f007 fbb3 	bl	8008550 <strncmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <check_command+0xac>
 8000df0:	2213      	movs	r2, #19
 8000df2:	e000      	b.n	8000df6 <check_command+0xae>
 8000df4:	2200      	movs	r2, #0
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4413      	add	r3, r2
 8000dfa:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	496c      	ldr	r1, [pc, #432]	; (8000fb0 <check_command+0x268>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f007 fba5 	bl	8008550 <strncmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4413      	add	r3, r2
 8000e18:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4965      	ldr	r1, [pc, #404]	; (8000fb4 <check_command+0x26c>)
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f007 fb96 	bl	8008550 <strncmp>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <check_command+0xe6>
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	e000      	b.n	8000e30 <check_command+0xe8>
 8000e2e:	2200      	movs	r2, #0
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4413      	add	r3, r2
 8000e34:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000e36:	2202      	movs	r2, #2
 8000e38:	495f      	ldr	r1, [pc, #380]	; (8000fb8 <check_command+0x270>)
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f007 fb88 	bl	8008550 <strncmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <check_command+0x102>
 8000e46:	2203      	movs	r2, #3
 8000e48:	e000      	b.n	8000e4c <check_command+0x104>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4413      	add	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000e52:	2202      	movs	r2, #2
 8000e54:	4959      	ldr	r1, [pc, #356]	; (8000fbc <check_command+0x274>)
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f007 fb7a 	bl	8008550 <strncmp>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <check_command+0x11e>
 8000e62:	2204      	movs	r2, #4
 8000e64:	e000      	b.n	8000e68 <check_command+0x120>
 8000e66:	2200      	movs	r2, #0
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4953      	ldr	r1, [pc, #332]	; (8000fc0 <check_command+0x278>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f007 fb6c 	bl	8008550 <strncmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <check_command+0x13a>
 8000e7e:	2205      	movs	r2, #5
 8000e80:	e000      	b.n	8000e84 <check_command+0x13c>
 8000e82:	2200      	movs	r2, #0
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4413      	add	r3, r2
 8000e88:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	494d      	ldr	r1, [pc, #308]	; (8000fc4 <check_command+0x27c>)
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f007 fb5e 	bl	8008550 <strncmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <check_command+0x156>
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	e000      	b.n	8000ea0 <check_command+0x158>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4947      	ldr	r1, [pc, #284]	; (8000fc8 <check_command+0x280>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f007 fb50 	bl	8008550 <strncmp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <check_command+0x172>
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	e000      	b.n	8000ebc <check_command+0x174>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WA", 2)) * WA;
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4941      	ldr	r1, [pc, #260]	; (8000fcc <check_command+0x284>)
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f007 fb42 	bl	8008550 <strncmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <check_command+0x18e>
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	e000      	b.n	8000ed8 <check_command+0x190>
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	4413      	add	r3, r2
 8000edc:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "SP", 2)) * SP;
 8000ede:	2202      	movs	r2, #2
 8000ee0:	493b      	ldr	r1, [pc, #236]	; (8000fd0 <check_command+0x288>)
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f007 fb34 	bl	8008550 <strncmp>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <check_command+0x1aa>
 8000eee:	220c      	movs	r2, #12
 8000ef0:	e000      	b.n	8000ef4 <check_command+0x1ac>
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "AC", 2)) * AC;
 8000efa:	2202      	movs	r2, #2
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <check_command+0x28c>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f007 fb26 	bl	8008550 <strncmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <check_command+0x1c6>
 8000f0a:	220d      	movs	r2, #13
 8000f0c:	e000      	b.n	8000f10 <check_command+0x1c8>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4413      	add	r3, r2
 8000f14:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S ", 2)) * S;
 8000f16:	2202      	movs	r2, #2
 8000f18:	492f      	ldr	r1, [pc, #188]	; (8000fd8 <check_command+0x290>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f007 fb18 	bl	8008550 <strncmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <check_command+0x1e2>
 8000f26:	2212      	movs	r2, #18
 8000f28:	e000      	b.n	8000f2c <check_command+0x1e4>
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4413      	add	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "S\r", 2)) * S;
 8000f32:	2202      	movs	r2, #2
 8000f34:	4929      	ldr	r1, [pc, #164]	; (8000fdc <check_command+0x294>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f007 fb0a 	bl	8008550 <strncmp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <check_command+0x1fe>
 8000f42:	2212      	movs	r2, #18
 8000f44:	e000      	b.n	8000f48 <check_command+0x200>
 8000f46:	2200      	movs	r2, #0
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <check_command+0x298>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <check_command+0x218>
 8000f5c:	2209      	movs	r2, #9
 8000f5e:	e000      	b.n	8000f62 <check_command+0x21a>
 8000f60:	2200      	movs	r2, #0
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4413      	add	r3, r2
 8000f66:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <check_command+0x29c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <check_command+0x232>
 8000f76:	220a      	movs	r2, #10
 8000f78:	e000      	b.n	8000f7c <check_command+0x234>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4413      	add	r3, r2
 8000f80:	73fb      	strb	r3, [r7, #15]

	if(cmd > ST)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b13      	cmp	r3, #19
 8000f86:	d901      	bls.n	8000f8c <check_command+0x244>
		cmd = INV;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800c780 	.word	0x0800c780
 8000f9c:	0800c784 	.word	0x0800c784
 8000fa0:	0800c788 	.word	0x0800c788
 8000fa4:	0800c78c 	.word	0x0800c78c
 8000fa8:	0800c790 	.word	0x0800c790
 8000fac:	0800c794 	.word	0x0800c794
 8000fb0:	0800c798 	.word	0x0800c798
 8000fb4:	0800c79c 	.word	0x0800c79c
 8000fb8:	0800c7a0 	.word	0x0800c7a0
 8000fbc:	0800c7a4 	.word	0x0800c7a4
 8000fc0:	0800c7a8 	.word	0x0800c7a8
 8000fc4:	0800c7ac 	.word	0x0800c7ac
 8000fc8:	0800c7b0 	.word	0x0800c7b0
 8000fcc:	0800c7b4 	.word	0x0800c7b4
 8000fd0:	0800c7b8 	.word	0x0800c7b8
 8000fd4:	0800c7bc 	.word	0x0800c7bc
 8000fd8:	0800c7c0 	.word	0x0800c7c0
 8000fdc:	0800c7c4 	.word	0x0800c7c4
 8000fe0:	0800c7c8 	.word	0x0800c7c8
 8000fe4:	0800c7cc 	.word	0x0800c7cc

08000fe8 <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <proc_inv_cmd+0x18>)
 8000ff2:	f001 fdeb 	bl	8002bcc <send_UART>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800c7d0 	.word	0x0800c7d0

08001004 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	f107 0210 	add.w	r2, r7, #16
 8001014:	4932      	ldr	r1, [pc, #200]	; (80010e0 <proc_mr_cmd+0xdc>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f007 fa12 	bl	8008440 <siscanf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b02      	cmp	r3, #2
 8001020:	d157      	bne.n	80010d2 <proc_mr_cmd+0xce>
	{
 8001022:	466b      	mov	r3, sp
 8001024:	461d      	mov	r5, r3
		char data[length];
 8001026:	68fc      	ldr	r4, [r7, #12]
 8001028:	4623      	mov	r3, r4
 800102a:	3b01      	subs	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4620      	mov	r0, r4
 8001030:	f04f 0100 	mov.w	r1, #0
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	00cb      	lsls	r3, r1, #3
 800103e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001042:	00c2      	lsls	r2, r0, #3
 8001044:	4620      	mov	r0, r4
 8001046:	f04f 0100 	mov.w	r1, #0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00cb      	lsls	r3, r1, #3
 8001054:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001058:	00c2      	lsls	r2, r0, #3
 800105a:	1de3      	adds	r3, r4, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3300      	adds	r3, #0
 8001068:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	68f9      	ldr	r1, [r7, #12]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fcfd 	bl	8001a70 <memory_read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d025      	beq.n	80010c8 <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <proc_mr_cmd+0xe0>)
 8001084:	f007 fa76 	bl	8008574 <strncpy>

			sprintf((char*) message, "Memory read: ");
 8001088:	4917      	ldr	r1, [pc, #92]	; (80010e8 <proc_mr_cmd+0xe4>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f007 f9b8 	bl	8008400 <siprintf>

			for(int i = 0; i < length; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e010      	b.n	80010b8 <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff f8dc 	bl	8000254 <strlen>
 800109c:	4602      	mov	r2, r0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1898      	adds	r0, r3, r2
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <proc_mr_cmd+0xe8>)
 80010ae:	f007 f9a7 	bl	8008400 <siprintf>
			for(int i = 0; i < length; i++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3ea      	bcc.n	8001096 <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fd83 	bl	8002bcc <send_UART>
 80010c6:	e002      	b.n	80010ce <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <proc_mr_cmd+0xec>)
 80010ca:	f001 fd7f 	bl	8002bcc <send_UART>
 80010ce:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 80010d0:	e002      	b.n	80010d8 <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <proc_mr_cmd+0xf0>)
 80010d4:	f001 fd7a 	bl	8002bcc <send_UART>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}
 80010e0:	0800c7f8 	.word	0x0800c7f8
 80010e4:	200144f4 	.word	0x200144f4
 80010e8:	0800c804 	.word	0x0800c804
 80010ec:	0800c814 	.word	0x0800c814
 80010f0:	0800c81c 	.word	0x0800c81c
 80010f4:	0800c850 	.word	0x0800c850

080010f8 <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8001100:	f107 0110 	add.w	r1, r7, #16
 8001104:	f107 0214 	add.w	r2, r7, #20
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	460b      	mov	r3, r1
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <proc_mw_cmd+0x64>)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f007 f994 	bl	8008440 <siscanf>
 8001118:	4603      	mov	r3, r0
 800111a:	2b03      	cmp	r3, #3
 800111c:	d116      	bne.n	800114c <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fcd7 	bl	8001ad8 <memory_write>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d009      	beq.n	8001144 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <proc_mw_cmd+0x68>)
 8001138:	f007 fa1c 	bl	8008574 <strncpy>
			send_UART("Memory written with success.");
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <proc_mw_cmd+0x6c>)
 800113e:	f001 fd45 	bl	8002bcc <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8001142:	e006      	b.n	8001152 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <proc_mw_cmd+0x70>)
 8001146:	f001 fd41 	bl	8002bcc <send_UART>
}
 800114a:	e002      	b.n	8001152 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <proc_mw_cmd+0x74>)
 800114e:	f001 fd3d 	bl	8002bcc <send_UART>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800c878 	.word	0x0800c878
 8001160:	200144f4 	.word	0x200144f4
 8001164:	0800c884 	.word	0x0800c884
 8001168:	0800c8a4 	.word	0x0800c8a4
 800116c:	0800c8d8 	.word	0x0800c8d8

08001170 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	4918      	ldr	r1, [pc, #96]	; (80011e4 <proc_mi_cmd+0x74>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 f95c 	bl	8008440 <siscanf>
 8001188:	4603      	mov	r3, r0
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f8af 	bl	80022f8 <is_GPIO_pin_free>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fcce 	bl	8001b48 <make_pin_input>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80011b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <proc_mi_cmd+0x78>)
 80011ba:	f007 f9db 	bl	8008574 <strncpy>
				send_UART("Pin(s) set as input with success.");
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <proc_mi_cmd+0x7c>)
 80011c0:	f001 fd04 	bl	8002bcc <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 80011c4:	e00a      	b.n	80011dc <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <proc_mi_cmd+0x80>)
 80011c8:	f001 fd00 	bl	8002bcc <send_UART>
}
 80011cc:	e006      	b.n	80011dc <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <proc_mi_cmd+0x84>)
 80011d0:	f001 fcfc 	bl	8002bcc <send_UART>
}
 80011d4:	e002      	b.n	80011dc <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <proc_mi_cmd+0x88>)
 80011d8:	f001 fcf8 	bl	8002bcc <send_UART>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800c904 	.word	0x0800c904
 80011e8:	200144f4 	.word	0x200144f4
 80011ec:	0800c910 	.word	0x0800c910
 80011f0:	0800c934 	.word	0x0800c934
 80011f4:	0800c968 	.word	0x0800c968
 80011f8:	0800c9a0 	.word	0x0800c9a0

080011fc <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	4918      	ldr	r1, [pc, #96]	; (8001270 <proc_mo_cmd+0x74>)
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f007 f916 	bl	8008440 <siscanf>
 8001214:	4603      	mov	r3, r0
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f001 f869 	bl	80022f8 <is_GPIO_pin_free>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd24 	bl	8001c80 <make_pin_output>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800123e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <proc_mo_cmd+0x78>)
 8001246:	f007 f995 	bl	8008574 <strncpy>
				send_UART("Pin(s) set as output with success.");
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <proc_mo_cmd+0x7c>)
 800124c:	f001 fcbe 	bl	8002bcc <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8001250:	e00a      	b.n	8001268 <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8001252:	480a      	ldr	r0, [pc, #40]	; (800127c <proc_mo_cmd+0x80>)
 8001254:	f001 fcba 	bl	8002bcc <send_UART>
}
 8001258:	e006      	b.n	8001268 <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <proc_mo_cmd+0x84>)
 800125c:	f001 fcb6 	bl	8002bcc <send_UART>
}
 8001260:	e002      	b.n	8001268 <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <proc_mo_cmd+0x88>)
 8001264:	f001 fcb2 	bl	8002bcc <send_UART>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800c9cc 	.word	0x0800c9cc
 8001274:	200144f4 	.word	0x200144f4
 8001278:	0800c9d8 	.word	0x0800c9d8
 800127c:	0800c9fc 	.word	0x0800c9fc
 8001280:	0800c968 	.word	0x0800c968
 8001284:	0800ca34 	.word	0x0800ca34

08001288 <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	f107 0220 	add.w	r2, r7, #32
 8001298:	492a      	ldr	r1, [pc, #168]	; (8001344 <proc_rd_cmd+0xbc>)
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f007 f8d0 	bl	8008440 <siscanf>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d147      	bne.n	8001336 <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	69f9      	ldr	r1, [r7, #28]
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fd84 	bl	8001dbc <read_dig_input>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d039      	beq.n	800132e <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80012ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4821      	ldr	r0, [pc, #132]	; (8001348 <proc_rd_cmd+0xc0>)
 80012c2:	f007 f957 	bl	8008574 <strncpy>

			sprintf((char*) message, "Digital input read: ");
 80012c6:	4921      	ldr	r1, [pc, #132]	; (800134c <proc_rd_cmd+0xc4>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f007 f899 	bl	8008400 <siprintf>

			for(int i = 15; i >= 0; i--)
 80012ce:	230f      	movs	r3, #15
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	e025      	b.n	8001320 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7fe ffbd 	bl	8000254 <strlen>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1898      	adds	r0, r3, r2
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4918      	ldr	r1, [pc, #96]	; (8001350 <proc_rd_cmd+0xc8>)
 80012ee:	f007 f887 	bl	8008400 <siprintf>

				if(!(i % 4) && i)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10e      	bne.n	800131a <proc_rd_cmd+0x92>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7fe ffa6 	bl	8000254 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	4910      	ldr	r1, [pc, #64]	; (8001354 <proc_rd_cmd+0xcc>)
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3b01      	subs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	dad6      	bge.n	80012d4 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f001 fc50 	bl	8002bcc <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 800132c:	e006      	b.n	800133c <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <proc_rd_cmd+0xd0>)
 8001330:	f001 fc4c 	bl	8002bcc <send_UART>
}
 8001334:	e002      	b.n	800133c <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <proc_rd_cmd+0xd4>)
 8001338:	f001 fc48 	bl	8002bcc <send_UART>
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0800ca60 	.word	0x0800ca60
 8001348:	200144f4 	.word	0x200144f4
 800134c:	0800ca6c 	.word	0x0800ca6c
 8001350:	0800ca84 	.word	0x0800ca84
 8001354:	0800ca88 	.word	0x0800ca88
 8001358:	0800ca8c 	.word	0x0800ca8c
 800135c:	0800cac4 	.word	0x0800cac4

08001360 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 8001368:	f107 0110 	add.w	r1, r7, #16
 800136c:	f107 0214 	add.w	r2, r7, #20
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	4918      	ldr	r1, [pc, #96]	; (80013dc <proc_wd_cmd+0x7c>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f007 f860 	bl	8008440 <siscanf>
 8001380:	4603      	mov	r3, r0
 8001382:	2b03      	cmp	r3, #3
 8001384:	d123      	bne.n	80013ce <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 ffb3 	bl	80022f8 <is_GPIO_pin_free>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d016      	beq.n	80013c6 <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd56 	bl	8001e50 <write_dig_output>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <proc_wd_cmd+0x80>)
 80013b2:	f007 f8df 	bl	8008574 <strncpy>
				send_UART("Digital output value wrote with success.");
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <proc_wd_cmd+0x84>)
 80013b8:	f001 fc08 	bl	8002bcc <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 80013bc:	e00a      	b.n	80013d4 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <proc_wd_cmd+0x88>)
 80013c0:	f001 fc04 	bl	8002bcc <send_UART>
}
 80013c4:	e006      	b.n	80013d4 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <proc_wd_cmd+0x8c>)
 80013c8:	f001 fc00 	bl	8002bcc <send_UART>
}
 80013cc:	e002      	b.n	80013d4 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <proc_wd_cmd+0x90>)
 80013d0:	f001 fbfc 	bl	8002bcc <send_UART>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800caf4 	.word	0x0800caf4
 80013e0:	200144f4 	.word	0x200144f4
 80013e4:	0800cb00 	.word	0x0800cb00
 80013e8:	0800cb2c 	.word	0x0800cb2c
 80013ec:	0800c968 	.word	0x0800c968
 80013f0:	0800cb68 	.word	0x0800cb68
 80013f4:	00000000 	.word	0x00000000

080013f8 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	461a      	mov	r2, r3
 8001406:	492c      	ldr	r1, [pc, #176]	; (80014b8 <proc_ra_cmd+0xc0>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f007 f819 	bl	8008440 <siscanf>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d13f      	bne.n	8001494 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fd61 	bl	8001ee4 <analog_read>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d031      	beq.n	800148c <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <proc_ra_cmd+0xc4>)
 8001430:	f007 f8a0 	bl	8008574 <strncpy>

			float volts = (float) value * 3.3 / 4095;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001442:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80014a8 <proc_ra_cmd+0xb0>
 8001446:	ee27 6b06 	vmul.f64	d6, d7, d6
 800144a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80014b0 <proc_ra_cmd+0xb8>
 800144e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001452:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001456:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800145a:	4919      	ldr	r1, [pc, #100]	; (80014c0 <proc_ra_cmd+0xc8>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f006 ffcf 	bl	8008400 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7fe fef6 	bl	8000254 <strlen>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	edd7 7a05 	vldr	s15, [r7, #20]
 8001474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001478:	ed8d 7b00 	vstr	d7, [sp]
 800147c:	4911      	ldr	r1, [pc, #68]	; (80014c4 <proc_ra_cmd+0xcc>)
 800147e:	4618      	mov	r0, r3
 8001480:	f006 ffbe 	bl	8008400 <siprintf>

			send_UART((char*) message);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 fba1 	bl	8002bcc <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 800148a:	e006      	b.n	800149a <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <proc_ra_cmd+0xd0>)
 800148e:	f001 fb9d 	bl	8002bcc <send_UART>
}
 8001492:	e002      	b.n	800149a <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <proc_ra_cmd+0xd4>)
 8001496:	f001 fb99 	bl	8002bcc <send_UART>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	66666666 	.word	0x66666666
 80014ac:	400a6666 	.word	0x400a6666
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40affe00 	.word	0x40affe00
 80014b8:	0800cb9c 	.word	0x0800cb9c
 80014bc:	200144f4 	.word	0x200144f4
 80014c0:	0800cba4 	.word	0x0800cba4
 80014c4:	0800cbc0 	.word	0x0800cbc0
 80014c8:	0800cbcc 	.word	0x0800cbcc
 80014cc:	0800cc00 	.word	0x0800cc00

080014d0 <proc_wa_cmd>:

void proc_wa_cmd(char* message)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    unsigned int addr3, volts;

    if(sscanf((char*) message, "WA %x %d", &addr3, &volts) == 2)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	491f      	ldr	r1, [pc, #124]	; (8001560 <proc_wa_cmd+0x90>)
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f006 ffac 	bl	8008440 <siscanf>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d12d      	bne.n	800154a <proc_wa_cmd+0x7a>
    {
    	float value = (float) volts * 4095 / 3.3;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001564 <proc_wa_cmd+0x94>
 80014fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001500:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001504:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001558 <proc_wa_cmd+0x88>
 8001508:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800150c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001510:	edc7 7a05 	vstr	s15, [r7, #20]

        if(analog_write(addr3, value))
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151e:	ee17 1a90 	vmov	r1, s15
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fcf8 	bl	8001f18 <analog_write>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <proc_wa_cmd+0x72>
        {
            strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <proc_wa_cmd+0x98>)
 8001536:	f007 f81d 	bl	8008574 <strncpy>
            send_UART("Analog value wrote with success.");
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <proc_wa_cmd+0x9c>)
 800153c:	f001 fb46 	bl	8002bcc <send_UART>
        else
            send_UART("Invalid Analog Write instruction argument values.");
    }
    else
        send_UART("Invalid Analog Write instruction syntax.");
}
 8001540:	e006      	b.n	8001550 <proc_wa_cmd+0x80>
            send_UART("Invalid Analog Write instruction argument values.");
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <proc_wa_cmd+0xa0>)
 8001544:	f001 fb42 	bl	8002bcc <send_UART>
}
 8001548:	e002      	b.n	8001550 <proc_wa_cmd+0x80>
        send_UART("Invalid Analog Write instruction syntax.");
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <proc_wa_cmd+0xa4>)
 800154c:	f001 fb3e 	bl	8002bcc <send_UART>
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	66666666 	.word	0x66666666
 800155c:	400a6666 	.word	0x400a6666
 8001560:	0800cc28 	.word	0x0800cc28
 8001564:	457ff000 	.word	0x457ff000
 8001568:	200144f4 	.word	0x200144f4
 800156c:	0800cc34 	.word	0x0800cc34
 8001570:	0800cc58 	.word	0x0800cc58
 8001574:	0800cc8c 	.word	0x0800cc8c

08001578 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0c4      	sub	sp, #272	; 0x110
 800157c:	af00      	add	r7, sp, #0
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b0d      	cmp	r3, #13
 800158c:	d12a      	bne.n	80015e4 <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001594:	e010      	b.n	80015b8 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <proc_last_cmd+0x7c>)
 8001598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 80015ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80015b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015bc:	2bff      	cmp	r3, #255	; 0xff
 80015be:	ddea      	ble.n	8001596 <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fbbf 	bl	8000d48 <check_command>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 80015d0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <proc_last_cmd+0x80>)
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	f107 0208 	add.w	r2, r7, #8
 80015de:	4610      	mov	r0, r2
 80015e0:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80015e2:	e002      	b.n	80015ea <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <proc_last_cmd+0x84>)
 80015e6:	f001 faf1 	bl	8002bcc <send_UART>
}
 80015ea:	bf00      	nop
 80015ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200144f4 	.word	0x200144f4
 80015f8:	20000000 	.word	0x20000000
 80015fc:	0800ccb8 	.word	0x0800ccb8

08001600 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0d      	cmp	r3, #13
 8001610:	d109      	bne.n	8001626 <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <proc_help_cmd+0x34>)
 800161a:	f006 ffab 	bl	8008574 <strncpy>

		send_UART("MR <addr> <length>\n\r"
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <proc_help_cmd+0x38>)
 8001620:	f001 fad4 	bl	8002bcc <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 8001624:	e002      	b.n	800162c <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <proc_help_cmd+0x3c>)
 8001628:	f001 fad0 	bl	8002bcc <send_UART>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200144f4 	.word	0x200144f4
 8001638:	0800ccd8 	.word	0x0800ccd8
 800163c:	0800cd94 	.word	0x0800cd94

08001640 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3303      	adds	r3, #3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b0d      	cmp	r3, #13
 8001650:	d113      	bne.n	800167a <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <proc_ver_cmd+0x48>)
 800165a:	f006 ff8b 	bl	8008574 <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <proc_ver_cmd+0x4c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	4909      	ldr	r1, [pc, #36]	; (800168c <proc_ver_cmd+0x4c>)
 8001666:	600a      	str	r2, [r1, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4909      	ldr	r1, [pc, #36]	; (8001690 <proc_ver_cmd+0x50>)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f006 fec7 	bl	8008400 <siprintf>
		send_UART((char*) message);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f001 faaa 	bl	8002bcc <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001678:	e002      	b.n	8001680 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <proc_ver_cmd+0x54>)
 800167c:	f001 faa6 	bl	8002bcc <send_UART>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200144f4 	.word	0x200144f4
 800168c:	20000290 	.word	0x20000290
 8001690:	0800cdb4 	.word	0x0800cdb4
 8001694:	0800cde8 	.word	0x0800cde8

08001698 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "SP %s %d", timeunit, &unit) == 2)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	f107 0208 	add.w	r2, r7, #8
 80016a8:	491f      	ldr	r1, [pc, #124]	; (8001728 <proc_sp_cmd+0x90>)
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 fec8 	bl	8008440 <siscanf>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d131      	bne.n	800171a <proc_sp_cmd+0x82>
		{
			if(!strcmp(timeunit,"ms") == 0 || !strcmp(timeunit,"s") == 0 || !strcmp(timeunit,"us") == 0)
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	491c      	ldr	r1, [pc, #112]	; (800172c <proc_sp_cmd+0x94>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fdbf 	bl	8000240 <strcmp>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <proc_sp_cmd+0x54>
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4918      	ldr	r1, [pc, #96]	; (8001730 <proc_sp_cmd+0x98>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fdb6 	bl	8000240 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <proc_sp_cmd+0x54>
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <proc_sp_cmd+0x9c>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fdad 	bl	8000240 <strcmp>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <proc_sp_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <proc_sp_cmd+0xa0>)
 80016f4:	f006 ff3e 	bl	8008574 <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <proc_sp_cmd+0xa4>)
 8001700:	f006 ff1e 	bl	8008540 <strcpy>
				sp_config.unit = unit;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <proc_sp_cmd+0xa8>)
 8001708:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <proc_sp_cmd+0xac>)
 800170c:	f001 fa5e 	bl	8002bcc <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 8001710:	e006      	b.n	8001720 <proc_sp_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <proc_sp_cmd+0xb0>)
 8001714:	f001 fa5a 	bl	8002bcc <send_UART>
}
 8001718:	e002      	b.n	8001720 <proc_sp_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <proc_sp_cmd+0xb4>)
 800171c:	f001 fa56 	bl	8002bcc <send_UART>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800ce08 	.word	0x0800ce08
 800172c:	0800ce14 	.word	0x0800ce14
 8001730:	0800ce18 	.word	0x0800ce18
 8001734:	0800ce1c 	.word	0x0800ce1c
 8001738:	200144f4 	.word	0x200144f4
 800173c:	20000060 	.word	0x20000060
 8001740:	20000054 	.word	0x20000054
 8001744:	0800ce20 	.word	0x0800ce20
 8001748:	0800ce54 	.word	0x0800ce54
 800174c:	0800ce88 	.word	0x0800ce88

08001750 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	461a      	mov	r2, r3
 800175e:	4912      	ldr	r1, [pc, #72]	; (80017a8 <proc_ac_cmd+0x58>)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f006 fe6d 	bl	8008440 <siscanf>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d116      	bne.n	800179a <proc_ac_cmd+0x4a>
	{
		if(addr3 > 0 && addr3 <= 0x0F)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <proc_ac_cmd+0x42>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80c      	bhi.n	8001792 <proc_ac_cmd+0x42>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <proc_ac_cmd+0x5c>)
 8001780:	f006 fef8 	bl	8008574 <strncpy>

			sp_config.addr3 = addr3;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <proc_ac_cmd+0x60>)
 8001788:	6013      	str	r3, [r2, #0]
			send_UART("Analog Channel for Sampling changed with success.");
 800178a:	480a      	ldr	r0, [pc, #40]	; (80017b4 <proc_ac_cmd+0x64>)
 800178c:	f001 fa1e 	bl	8002bcc <send_UART>
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 8001790:	e006      	b.n	80017a0 <proc_ac_cmd+0x50>
			send_UART("Invalid Analog Channel instruction argument values.");
 8001792:	4809      	ldr	r0, [pc, #36]	; (80017b8 <proc_ac_cmd+0x68>)
 8001794:	f001 fa1a 	bl	8002bcc <send_UART>
}
 8001798:	e002      	b.n	80017a0 <proc_ac_cmd+0x50>
		send_UART("Invalid Analog Channel instruction syntax.");
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <proc_ac_cmd+0x6c>)
 800179c:	f001 fa16 	bl	8002bcc <send_UART>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0800ceb4 	.word	0x0800ceb4
 80017ac:	200144f4 	.word	0x200144f4
 80017b0:	20000054 	.word	0x20000054
 80017b4:	0800cebc 	.word	0x0800cebc
 80017b8:	0800cef0 	.word	0x0800cef0
 80017bc:	0800cf24 	.word	0x0800cf24

080017c0 <proc_fni_cmd>:

void proc_fni_cmd(char* message)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3303      	adds	r3, #3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b0d      	cmp	r3, #13
 80017d0:	d10f      	bne.n	80017f2 <proc_fni_cmd+0x32>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <proc_fni_cmd+0x40>)
 80017da:	f006 fecb 	bl	8008574 <strncpy>
		sp_config.filter_type = Inf;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <proc_fni_cmd+0x44>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
		sp_config.filter = true;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <proc_fni_cmd+0x44>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <proc_fni_cmd+0x48>)
 80017ec:	f001 f9ee 	bl	8002bcc <send_UART>
	}
	else
		send_UART("Invalid IRR Filter On instruction syntax.");
}
 80017f0:	e002      	b.n	80017f8 <proc_fni_cmd+0x38>
		send_UART("Invalid IRR Filter On instruction syntax.");
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <proc_fni_cmd+0x4c>)
 80017f4:	f001 f9ea 	bl	8002bcc <send_UART>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200144f4 	.word	0x200144f4
 8001804:	20000054 	.word	0x20000054
 8001808:	0800cf50 	.word	0x0800cf50
 800180c:	0800cf5c 	.word	0x0800cf5c

08001810 <proc_ffi_cmd>:

void proc_ffi_cmd(char* message)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3303      	adds	r3, #3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0d      	cmp	r3, #13
 8001820:	d11b      	bne.n	800185a <proc_ffi_cmd+0x4a>
	{
		if(sp_config.filter_type == Inf && sp_config.filter){
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <proc_ffi_cmd+0x58>)
 8001824:	7bdb      	ldrb	r3, [r3, #15]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d113      	bne.n	8001852 <proc_ffi_cmd+0x42>
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <proc_ffi_cmd+0x58>)
 800182c:	7b9b      	ldrb	r3, [r3, #14]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <proc_ffi_cmd+0x42>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <proc_ffi_cmd+0x5c>)
 800183a:	f006 fe9b 	bl	8008574 <strncpy>
			sp_config.filter_type = Inf;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <proc_ffi_cmd+0x58>)
 8001840:	2201      	movs	r2, #1
 8001842:	73da      	strb	r2, [r3, #15]
			sp_config.filter = false;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <proc_ffi_cmd+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <proc_ffi_cmd+0x60>)
 800184c:	f001 f9be 	bl	8002bcc <send_UART>
		else
			send_UART("IRR Filter is already off.");
	}
	else
		send_UART("Invalid IRR Filter Off instruction syntax.");
}
 8001850:	e006      	b.n	8001860 <proc_ffi_cmd+0x50>
			send_UART("IRR Filter is already off.");
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <proc_ffi_cmd+0x64>)
 8001854:	f001 f9ba 	bl	8002bcc <send_UART>
}
 8001858:	e002      	b.n	8001860 <proc_ffi_cmd+0x50>
		send_UART("Invalid IRR Filter Off instruction syntax.");
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <proc_ffi_cmd+0x68>)
 800185c:	f001 f9b6 	bl	8002bcc <send_UART>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000054 	.word	0x20000054
 800186c:	200144f4 	.word	0x200144f4
 8001870:	0800cf88 	.word	0x0800cf88
 8001874:	0800cf94 	.word	0x0800cf94
 8001878:	0800cfb0 	.word	0x0800cfb0

0800187c <proc_fnf_cmd>:

void proc_fnf_cmd(char* message)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3303      	adds	r3, #3
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b0d      	cmp	r3, #13
 800188c:	d10f      	bne.n	80018ae <proc_fnf_cmd+0x32>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800188e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <proc_fnf_cmd+0x40>)
 8001896:	f006 fe6d 	bl	8008574 <strncpy>
		sp_config.filter_type = Fin;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <proc_fnf_cmd+0x44>)
 800189c:	2202      	movs	r2, #2
 800189e:	73da      	strb	r2, [r3, #15]
		sp_config.filter = true;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <proc_fnf_cmd+0x44>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <proc_fnf_cmd+0x48>)
 80018a8:	f001 f990 	bl	8002bcc <send_UART>
	}
	else
		send_UART("Invalid FIR Filter On instruction syntax.");
}
 80018ac:	e002      	b.n	80018b4 <proc_fnf_cmd+0x38>
		send_UART("Invalid FIR Filter On instruction syntax.");
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <proc_fnf_cmd+0x4c>)
 80018b0:	f001 f98c 	bl	8002bcc <send_UART>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200144f4 	.word	0x200144f4
 80018c0:	20000054 	.word	0x20000054
 80018c4:	0800cf50 	.word	0x0800cf50
 80018c8:	0800cfdc 	.word	0x0800cfdc

080018cc <proc_fff_cmd>:

void proc_fff_cmd(char* message)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3303      	adds	r3, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b0d      	cmp	r3, #13
 80018dc:	d11b      	bne.n	8001916 <proc_fff_cmd+0x4a>
	{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <proc_fff_cmd+0x58>)
 80018e6:	f006 fe45 	bl	8008574 <strncpy>
		if(sp_config.filter_type == Inf && sp_config.filter){
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <proc_fff_cmd+0x5c>)
 80018ec:	7bdb      	ldrb	r3, [r3, #15]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10d      	bne.n	800190e <proc_fff_cmd+0x42>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <proc_fff_cmd+0x5c>)
 80018f4:	7b9b      	ldrb	r3, [r3, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <proc_fff_cmd+0x42>
			sp_config.filter_type = Fin;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <proc_fff_cmd+0x5c>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	73da      	strb	r2, [r3, #15]
			sp_config.filter = false;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <proc_fff_cmd+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <proc_fff_cmd+0x60>)
 8001908:	f001 f960 	bl	8002bcc <send_UART>
		else
			send_UART("FIR Filter is already off.");
	}
	else
		send_UART("Invalid FIR Filter Off instruction syntax.");
}
 800190c:	e006      	b.n	800191c <proc_fff_cmd+0x50>
			send_UART("FIR Filter is already off.");
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <proc_fff_cmd+0x64>)
 8001910:	f001 f95c 	bl	8002bcc <send_UART>
}
 8001914:	e002      	b.n	800191c <proc_fff_cmd+0x50>
		send_UART("Invalid FIR Filter Off instruction syntax.");
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <proc_fff_cmd+0x68>)
 8001918:	f001 f958 	bl	8002bcc <send_UART>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200144f4 	.word	0x200144f4
 8001928:	20000054 	.word	0x20000054
 800192c:	0800cf88 	.word	0x0800cf88
 8001930:	0800d008 	.word	0x0800d008
 8001934:	0800d024 	.word	0x0800d024

08001938 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[1] == '\r')
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0d      	cmp	r3, #13
 8001948:	d11e      	bne.n	8001988 <proc_s_cmd+0x50>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4825      	ldr	r0, [pc, #148]	; (80019e8 <proc_s_cmd+0xb0>)
 8001952:	f006 fe0f 	bl	8008574 <strncpy>

		counter = 0;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <proc_s_cmd+0xb4>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = 0;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <proc_s_cmd+0xb8>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
		MX_ADC3_Init1(false);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff f844 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <proc_s_cmd+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f971 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <proc_s_cmd+0xb8>)
 8001974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001976:	f000 ff11 	bl	800279c <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 800197a:	481e      	ldr	r0, [pc, #120]	; (80019f4 <proc_s_cmd+0xbc>)
 800197c:	f001 fae4 	bl	8002f48 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001980:	481d      	ldr	r0, [pc, #116]	; (80019f8 <proc_s_cmd+0xc0>)
 8001982:	f003 fd87 	bl	8005494 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
	}
	else
		send_UART("Invalid Sample instruction syntax.");

}
 8001986:	e02b      	b.n	80019e0 <proc_s_cmd+0xa8>
	else if(sscanf((char*)message, "S %d", &k_values) == 1)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	461a      	mov	r2, r3
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <proc_s_cmd+0xc4>)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f006 fd55 	bl	8008440 <siscanf>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d11e      	bne.n	80019da <proc_s_cmd+0xa2>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <proc_s_cmd+0xb0>)
 80019a4:	f006 fde6 	bl	8008574 <strncpy>
		counter = 0;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <proc_s_cmd+0xb4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = k_values;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <proc_s_cmd+0xb8>)
 80019b2:	6093      	str	r3, [r2, #8]
		MX_ADC3_Init1(false);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff f81b 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <proc_s_cmd+0xb8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f948 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <proc_s_cmd+0xb8>)
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	f000 fee8 	bl	800279c <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <proc_s_cmd+0xbc>)
 80019ce:	f001 fabb 	bl	8002f48 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <proc_s_cmd+0xc0>)
 80019d4:	f003 fd5e 	bl	8005494 <HAL_TIM_Base_Start_IT>
}
 80019d8:	e002      	b.n	80019e0 <proc_s_cmd+0xa8>
		send_UART("Invalid Sample instruction syntax.");
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <proc_s_cmd+0xc8>)
 80019dc:	f001 f8f6 	bl	8002bcc <send_UART>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200144f4 	.word	0x200144f4
 80019ec:	2000028c 	.word	0x2000028c
 80019f0:	20000054 	.word	0x20000054
 80019f4:	200103a8 	.word	0x200103a8
 80019f8:	2001860c 	.word	0x2001860c
 80019fc:	0800d050 	.word	0x0800d050
 8001a00:	0800d058 	.word	0x0800d058

08001a04 <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if(counter > 0)
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <proc_st_cmd+0x50>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d018      	beq.n	8001a46 <proc_st_cmd+0x42>
	{
		if(message[2] == '\r')
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3302      	adds	r3, #2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b0d      	cmp	r3, #13
 8001a1c:	d10f      	bne.n	8001a3e <proc_st_cmd+0x3a>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <proc_st_cmd+0x54>)
 8001a26:	f006 fda5 	bl	8008574 <strncpy>

			HAL_ADC_Stop_IT(&hadc3);
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <proc_st_cmd+0x58>)
 8001a2c:	f001 fb64 	bl	80030f8 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <proc_st_cmd+0x5c>)
 8001a32:	f003 fda7 	bl	8005584 <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 8001a36:	480b      	ldr	r0, [pc, #44]	; (8001a64 <proc_st_cmd+0x60>)
 8001a38:	f001 f8c8 	bl	8002bcc <send_UART>
		else
			send_UART("Invalid Stop Sampling instruction syntax.");
	}
	else
		send_UART("Sampling is not running.");
}
 8001a3c:	e006      	b.n	8001a4c <proc_st_cmd+0x48>
			send_UART("Invalid Stop Sampling instruction syntax.");
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <proc_st_cmd+0x64>)
 8001a40:	f001 f8c4 	bl	8002bcc <send_UART>
}
 8001a44:	e002      	b.n	8001a4c <proc_st_cmd+0x48>
		send_UART("Sampling is not running.");
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <proc_st_cmd+0x68>)
 8001a48:	f001 f8c0 	bl	8002bcc <send_UART>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000028c 	.word	0x2000028c
 8001a58:	200144f4 	.word	0x200144f4
 8001a5c:	200103a8 	.word	0x200103a8
 8001a60:	2001860c 	.word	0x2001860c
 8001a64:	0800d07c 	.word	0x0800d07c
 8001a68:	0800d090 	.word	0x0800d090
 8001a6c:	0800d0bc 	.word	0x0800d0bc

08001a70 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d202      	bcs.n	8001a8a <memory_read+0x1a>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d901      	bls.n	8001a8e <memory_read+0x1e>
		return false;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e01b      	b.n	8001ac6 <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d901      	bls.n	8001a9e <memory_read+0x2e>
		return false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e013      	b.n	8001ac6 <memory_read+0x56>

	for(int i = 0; i < length; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00b      	b.n	8001abc <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60fa      	str	r2, [r7, #12]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	440a      	add	r2, r1
 8001ab0:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <memory_read+0x64>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8ef      	bhi.n	8001aa4 <memory_read+0x34>
	}

	return true;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200003a4 	.word	0x200003a4

08001ad8 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d208      	bcs.n	8001afe <memory_write+0x26>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d805      	bhi.n	8001afe <memory_write+0x26>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db02      	blt.n	8001afe <memory_write+0x26>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	dd01      	ble.n	8001b02 <memory_write+0x2a>
		return false;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e019      	b.n	8001b36 <memory_write+0x5e>

	if((0x10000 - addr) < length)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d901      	bls.n	8001b12 <memory_write+0x3a>
		return false;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e011      	b.n	8001b36 <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e009      	b.n	8001b2c <memory_write+0x54>
	{
		memory[addr++] = data;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60fa      	str	r2, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	b2d1      	uxtb	r1, r2
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <memory_write+0x6c>)
 8001b24:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f1      	bhi.n	8001b18 <memory_write+0x40>
	}

	return true;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200003a4 	.word	0x200003a4

08001b48 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08e      	sub	sp, #56	; 0x38
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <make_pin_input+0x24>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d806      	bhi.n	8001b6c <make_pin_input+0x24>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <make_pin_input+0x24>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d301      	bcc.n	8001b70 <make_pin_input+0x28>
		return false;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e07f      	b.n	8001c70 <make_pin_input+0x128>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b05      	subs	r3, #5
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d85f      	bhi.n	8001c38 <make_pin_input+0xf0>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <make_pin_input+0x38>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b9d 	.word	0x08001b9d
 8001b84:	08001c39 	.word	0x08001c39
 8001b88:	08001bb7 	.word	0x08001bb7
 8001b8c:	08001bd1 	.word	0x08001bd1
 8001b90:	08001beb 	.word	0x08001beb
 8001b94:	08001c05 	.word	0x08001c05
 8001b98:	08001c1f 	.word	0x08001c1f

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <make_pin_input+0x130>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <make_pin_input+0x130>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <make_pin_input+0x130>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	e040      	b.n	8001c38 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <make_pin_input+0x130>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <make_pin_input+0x130>)
 8001bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <make_pin_input+0x130>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	e033      	b.n	8001c38 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <make_pin_input+0x130>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <make_pin_input+0x130>)
 8001bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bda:	6313      	str	r3, [r2, #48]	; 0x30
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <make_pin_input+0x130>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	e026      	b.n	8001c38 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <make_pin_input+0x130>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <make_pin_input+0x130>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <make_pin_input+0x130>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	e019      	b.n	8001c38 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <make_pin_input+0x130>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <make_pin_input+0x130>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <make_pin_input+0x130>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	e00c      	b.n	8001c38 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <make_pin_input+0x130>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <make_pin_input+0x130>)
 8001c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <make_pin_input+0x130>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <make_pin_input+0x134>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	029b      	lsls	r3, r3, #10
 8001c60:	461a      	mov	r2, r3
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f002 f89b 	bl	8003da4 <HAL_GPIO_Init>

	return true;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	0010007f 	.word	0x0010007f

08001c80 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <make_pin_output+0x24>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d806      	bhi.n	8001ca4 <make_pin_output+0x24>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <make_pin_output+0x24>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d301      	bcc.n	8001ca8 <make_pin_output+0x28>
		return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e081      	b.n	8001dac <make_pin_output+0x12c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b05      	subs	r3, #5
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d85f      	bhi.n	8001d70 <make_pin_output+0xf0>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <make_pin_output+0x38>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cd5 	.word	0x08001cd5
 8001cbc:	08001d71 	.word	0x08001d71
 8001cc0:	08001cef 	.word	0x08001cef
 8001cc4:	08001d09 	.word	0x08001d09
 8001cc8:	08001d23 	.word	0x08001d23
 8001ccc:	08001d3d 	.word	0x08001d3d
 8001cd0:	08001d57 	.word	0x08001d57

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001cd4:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <make_pin_output+0x134>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a36      	ldr	r2, [pc, #216]	; (8001db4 <make_pin_output+0x134>)
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <make_pin_output+0x134>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	e040      	b.n	8001d70 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <make_pin_output+0x134>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <make_pin_output+0x134>)
 8001cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <make_pin_output+0x134>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	e033      	b.n	8001d70 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <make_pin_output+0x134>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <make_pin_output+0x134>)
 8001d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <make_pin_output+0x134>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	e026      	b.n	8001d70 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <make_pin_output+0x134>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <make_pin_output+0x134>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <make_pin_output+0x134>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	e019      	b.n	8001d70 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <make_pin_output+0x134>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <make_pin_output+0x134>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <make_pin_output+0x134>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	e00c      	b.n	8001d70 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <make_pin_output+0x134>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <make_pin_output+0x134>)
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <make_pin_output+0x134>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <make_pin_output+0x138>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f001 fffd 	bl	8003da4 <HAL_GPIO_Init>

	return true;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	0010007f 	.word	0x0010007f

08001dbc <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <read_dig_input+0x26>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d806      	bhi.n	8001de2 <read_dig_input+0x26>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <read_dig_input+0x26>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d301      	bcc.n	8001de6 <read_dig_input+0x2a>
		return false;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e02d      	b.n	8001e42 <read_dig_input+0x86>

	int mask = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	e024      	b.n	8001e3a <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d014      	beq.n	8001e24 <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <read_dig_input+0x90>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001e04:	2201      	movs	r2, #1
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	18d4      	adds	r4, r2, r3
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	4619      	mov	r1, r3
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f002 f96f 	bl	80040fc <HAL_GPIO_ReadPin>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	7023      	strb	r3, [r4, #0]
 8001e22:	e004      	b.n	8001e2e <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	3301      	adds	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	ddd7      	ble.n	8001df0 <read_dig_input+0x34>
	}

	return true;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	0010007f 	.word	0x0010007f

08001e50 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <write_dig_output+0x2e>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d80a      	bhi.n	8001e7e <write_dig_output+0x2e>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <write_dig_output+0x2e>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d203      	bcs.n	8001e7e <write_dig_output+0x2e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d301      	bcc.n	8001e82 <write_dig_output+0x32>
		return false;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e02a      	b.n	8001ed8 <write_dig_output+0x88>

	int mask = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e021      	b.n	8001ed0 <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <write_dig_output+0x90>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8001eb8:	7c7a      	ldrb	r2, [r7, #17]
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f002 f934 	bl	800412c <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	ddda      	ble.n	8001e8c <write_dig_output+0x3c>
	}

	return true;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	0010007f 	.word	0x0010007f

08001ee4 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d901      	bls.n	8001ef8 <analog_read+0x14>
		return false;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e00b      	b.n	8001f10 <analog_read+0x2c>

	MX_ADC3_Init1(true);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7fe fd79 	bl	80009f0 <MX_ADC3_Init1>
	config_ADC(addr3);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fea8 	bl	8000c54 <config_ADC>
	*value = read_ADC();
 8001f04:	f7fe fec4 	bl	8000c90 <read_ADC>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]

	return true;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <analog_write>:

bool analog_write(unsigned int addr3, unsigned int value)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x01)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d901      	bls.n	8001f2c <analog_write+0x14>
		return false;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e013      	b.n	8001f54 <analog_write+0x3c>

	if(HAL_DAC_Start(&hdac, (addr3 << addr3)) == HAL_OK){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	409b      	lsls	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	480a      	ldr	r0, [pc, #40]	; (8001f5c <analog_write+0x44>)
 8001f34:	f001 fddd 	bl	8003af2 <HAL_DAC_Start>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <analog_write+0x3a>
	    HAL_DAC_SetValue(&hdac, (addr3 << addr3), DAC_ALIGN_12B_R, value);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	fa03 f103 	lsl.w	r1, r3, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <analog_write+0x44>)
 8001f4a:	f001 fe24 	bl	8003b96 <HAL_DAC_SetValue>
	    return true;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <analog_write+0x3c>
	}else
		return false;
 8001f52:	2300      	movs	r3, #0

}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200185f8 	.word	0x200185f8

08001f60 <process_buf>:
     while (*dest++ = *src++);
     return --dest;
}

void process_buf(uint32_t* x_buf, uint32_t n)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	if(sp_config.filter)
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <process_buf+0x1c8>)
 8001f6c:	7b9b      	ldrb	r3, [r3, #14]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06d      	beq.n	800204e <process_buf+0xee>
	{
		if(sp_config.filter_type == Fin)
 8001f72:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <process_buf+0x1c8>)
 8001f74:	7bdb      	ldrb	r3, [r3, #15]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d136      	bne.n	8001fe8 <process_buf+0x88>
		{
			unsigned int temp = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]

			for(int i = 0 ; i <= M; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e021      	b.n	8001fc8 <process_buf+0x68>
			{
				temp += coef[i] * x_buf[n-i];
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f8e:	4a67      	ldr	r2, [pc, #412]	; (800212c <process_buf+0x1cc>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	edd3 6a00 	vldr	s13, [r3]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	617b      	str	r3, [r7, #20]
			for(int i = 0 ; i <= M; i++)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0a      	cmp	r3, #10
 8001fcc:	ddda      	ble.n	8001f84 <process_buf+0x24>
			}
			y_buf[n] = temp;
 8001fce:	4958      	ldr	r1, [pc, #352]	; (8002130 <process_buf+0x1d0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			analog_write(0,y_buf[n]);
 8001fd8:	4a55      	ldr	r2, [pc, #340]	; (8002130 <process_buf+0x1d0>)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff ff98 	bl	8001f18 <analog_write>
		}
		if(sp_config.filter_type == Inf)
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <process_buf+0x1c8>)
 8001fea:	7bdb      	ldrb	r3, [r3, #15]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d137      	bne.n	8002060 <process_buf+0x100>
		{
			y_buf[(n+1) & ADC_BUF_SIZE] = a*y_buf[n] + (1-a)*x_buf[n];
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <process_buf+0x1d0>)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002000:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002118 <process_buf+0x1b8>
 8002004:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800201a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002120 <process_buf+0x1c0>
 800201e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002022:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002032:	ee17 1a90 	vmov	r1, s15
 8002036:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <process_buf+0x1d0>)
 8002038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			analog_write(0,y_buf[n]);
 800203c:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <process_buf+0x1d0>)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	4619      	mov	r1, r3
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff ff66 	bl	8001f18 <analog_write>
 800204c:	e008      	b.n	8002060 <process_buf+0x100>
		}
	}else{
		analog_write(0,x_buf[n]);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff ff5c 	bl	8001f18 <analog_write>
	}

	char *message, *aux;

	itoa(n+1, aux, 10);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	220a      	movs	r2, #10
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fb73 	bl	8007754 <itoa>
	strcat(message, aux);
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	68b8      	ldr	r0, [r7, #8]
 8002072:	f006 fa56 	bl	8008522 <strcat>
	strcat(message, " va");
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f7fe f8ec 	bl	8000254 <strlen>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <process_buf+0x1d4>)
 8002086:	6810      	ldr	r0, [r2, #0]
 8002088:	6018      	str	r0, [r3, #0]
	itoa(x_buf[n], aux, 10);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	220a      	movs	r2, #10
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	f005 fb5b 	bl	8007754 <itoa>
	strcat(message, aux);
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	68b8      	ldr	r0, [r7, #8]
 80020a2:	f006 fa3e 	bl	8008522 <strcat>
	strcat(message, " vf");
 80020a6:	68b8      	ldr	r0, [r7, #8]
 80020a8:	f7fe f8d4 	bl	8000254 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <process_buf+0x1d8>)
 80020b6:	6810      	ldr	r0, [r2, #0]
 80020b8:	6018      	str	r0, [r3, #0]
	itoa(y_buf[n], aux, 10);
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <process_buf+0x1d0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	220a      	movs	r2, #10
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 fb44 	bl	8007754 <itoa>
	strcat(message, aux);
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	f006 fa27 	bl	8008522 <strcat>

	//sprintf(message, "n%lu va%lu vf%lu", n, x_buf[n], y_buf[n]);
	send_UART(message);
 80020d4:	68b8      	ldr	r0, [r7, #8]
 80020d6:	f000 fd79 	bl	8002bcc <send_UART>

	counter ++;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <process_buf+0x1dc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <process_buf+0x1dc>)
 80020e2:	6013      	str	r3, [r2, #0]

	if(sp_config.sp_limit > 0)
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <process_buf+0x1c8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <process_buf+0x1b0>
		if(counter == sp_config.sp_limit)
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <process_buf+0x1c8>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <process_buf+0x1dc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d10b      	bne.n	8002110 <process_buf+0x1b0>
		{
			counter = 0;
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <process_buf+0x1dc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop_IT(&hadc3);
 80020fe:	4810      	ldr	r0, [pc, #64]	; (8002140 <process_buf+0x1e0>)
 8002100:	f000 fffa 	bl	80030f8 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <process_buf+0x1e4>)
 8002106:	f003 fa3d 	bl	8005584 <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <process_buf+0x1e8>)
 800210c:	f000 fd5e 	bl	8002bcc <send_UART>
		}
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	9999999a 	.word	0x9999999a
 800211c:	3fd99999 	.word	0x3fd99999
 8002120:	33333333 	.word	0x33333333
 8002124:	3fe33333 	.word	0x3fe33333
 8002128:	20000054 	.word	0x20000054
 800212c:	20000064 	.word	0x20000064
 8002130:	200145fc 	.word	0x200145fc
 8002134:	0800d0d8 	.word	0x0800d0d8
 8002138:	0800d0dc 	.word	0x0800d0dc
 800213c:	2000028c 	.word	0x2000028c
 8002140:	200103a8 	.word	0x200103a8
 8002144:	2001860c 	.word	0x2001860c
 8002148:	0800d07c 	.word	0x0800d07c

0800214c <MX_DAC_Init>:
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	463b      	mov	r3, r7
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_DAC_Init+0x60>)
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <MX_DAC_Init+0x64>)
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	4812      	ldr	r0, [pc, #72]	; (80021ac <MX_DAC_Init+0x60>)
 8002162:	f001 fca4 	bl	8003aae <HAL_DAC_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_DAC_Init+0x24>
 800216c:	f000 f9cc 	bl	8002508 <Error_Handler>
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <MX_DAC_Init+0x60>)
 8002180:	f001 fd2e 	bl	8003be0 <HAL_DAC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_DAC_Init+0x42>
 800218a:	f000 f9bd 	bl	8002508 <Error_Handler>
 800218e:	463b      	mov	r3, r7
 8002190:	2210      	movs	r2, #16
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_DAC_Init+0x60>)
 8002196:	f001 fd23 	bl	8003be0 <HAL_DAC_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_DAC_Init+0x58>
 80021a0:	f000 f9b2 	bl	8002508 <Error_Handler>
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200185f8 	.word	0x200185f8
 80021b0:	40007400 	.word	0x40007400

080021b4 <HAL_DAC_MspInit>:
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_DAC_MspInit+0x74>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d123      	bne.n	800221e <HAL_DAC_MspInit+0x6a>
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_DAC_MspInit+0x78>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2330      	movs	r3, #48	; 0x30
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	2303      	movs	r3, #3
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_DAC_MspInit+0x7c>)
 800221a:	f001 fdc3 	bl	8003da4 <HAL_GPIO_Init>
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40007400 	.word	0x40007400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000

08002234 <MX_GPIO_Init>:
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <MX_GPIO_Init+0xbc>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002250:	f043 0320 	orr.w	r3, r3, #32
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_GPIO_Init+0xbc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <MX_GPIO_Init+0xbc>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <MX_GPIO_Init+0xbc>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_GPIO_Init+0xbc>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <MX_GPIO_Init+0xbc>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_GPIO_Init+0xbc>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <MX_GPIO_Init+0xc0>)
 80022c8:	f001 ff30 	bl	800412c <HAL_GPIO_WritePin>
 80022cc:	2301      	movs	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_GPIO_Init+0xc0>)
 80022e4:	f001 fd5e 	bl	8003da4 <HAL_GPIO_Init>
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400

080022f8 <is_GPIO_pin_free>:
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <is_GPIO_pin_free+0x20>
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	f246 033f 	movw	r3, #24639	; 0x603f
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <is_GPIO_pin_free+0x20>
 8002314:	2300      	movs	r3, #0
 8002316:	e028      	b.n	800236a <is_GPIO_pin_free+0x72>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d106      	bne.n	800232c <is_GPIO_pin_free+0x34>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <is_GPIO_pin_free+0x34>
 8002328:	2300      	movs	r3, #0
 800232a:	e01e      	b.n	800236a <is_GPIO_pin_free+0x72>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d106      	bne.n	8002340 <is_GPIO_pin_free+0x48>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <is_GPIO_pin_free+0x48>
 800233c:	2300      	movs	r3, #0
 800233e:	e014      	b.n	800236a <is_GPIO_pin_free+0x72>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d106      	bne.n	8002354 <is_GPIO_pin_free+0x5c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <is_GPIO_pin_free+0x5c>
 8002350:	2300      	movs	r3, #0
 8002352:	e00a      	b.n	800236a <is_GPIO_pin_free+0x72>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d106      	bne.n	8002368 <is_GPIO_pin_free+0x70>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <is_GPIO_pin_free+0x70>
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <is_GPIO_pin_free+0x72>
 8002368:	2301      	movs	r3, #1
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <blink_LED>:
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
 800237c:	2101      	movs	r1, #1
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <blink_LED+0x20>)
 8002380:	f001 feed 	bl	800415e <HAL_GPIO_TogglePin>
 8002384:	20c8      	movs	r0, #200	; 0xc8
 8002386:	f000 fd77 	bl	8002e78 <HAL_Delay>
 800238a:	2101      	movs	r1, #1
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <blink_LED+0x20>)
 800238e:	f001 fee6 	bl	800415e <HAL_GPIO_TogglePin>
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40020400 	.word	0x40020400

0800239c <main>:
 800239c:	b580      	push	{r7, lr}
 800239e:	b0c2      	sub	sp, #264	; 0x108
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	f000 fd0c 	bl	8002dbe <HAL_Init>
 80023a6:	f000 f841 	bl	800242c <SystemClock_Config>
 80023aa:	f7ff ff43 	bl	8002234 <MX_GPIO_Init>
 80023ae:	f000 fb2d 	bl	8002a0c <MX_USART3_UART_Init>
 80023b2:	f7fe fb81 	bl	8000ab8 <MX_ADC3_Init>
 80023b6:	f000 fa97 	bl	80028e8 <MX_TIM1_Init>
 80023ba:	f7ff fec7 	bl	800214c <MX_DAC_Init>
 80023be:	2201      	movs	r2, #1
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <main+0x80>)
 80023c2:	4817      	ldr	r0, [pc, #92]	; (8002420 <main+0x84>)
 80023c4:	f003 fea0 	bl	8006108 <HAL_UART_Receive_IT>
 80023c8:	4816      	ldr	r0, [pc, #88]	; (8002424 <main+0x88>)
 80023ca:	f000 fbff 	bl	8002bcc <send_UART>
 80023ce:	f000 fbcd 	bl	8002b6c <has_message_from_UART>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0fa      	beq.n	80023ce <main+0x32>
 80023d8:	f7ff ffce 	bl	8002378 <blink_LED>
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fc1e 	bl	8002c20 <read_UART>
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fcae 	bl	8000d48 <check_command>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80023f2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <main+0x8c>)
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	1d3a      	adds	r2, r7, #4
 80023fe:	4610      	mov	r0, r2
 8002400:	4798      	blx	r3
 8002402:	bf00      	nop
 8002404:	f000 fbbe 	bl	8002b84 <is_transmitting_to_UART>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1fa      	bne.n	8002404 <main+0x68>
 800240e:	f000 fbc5 	bl	8002b9c <reset_UART>
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <main+0x88>)
 8002414:	f000 fbda 	bl	8002bcc <send_UART>
 8002418:	e7d9      	b.n	80023ce <main+0x32>
 800241a:	bf00      	nop
 800241c:	200002a0 	.word	0x200002a0
 8002420:	20018658 	.word	0x20018658
 8002424:	0800d0e0 	.word	0x0800d0e0
 8002428:	20000000 	.word	0x20000000

0800242c <SystemClock_Config>:
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	2234      	movs	r2, #52	; 0x34
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f005 f98c 	bl	8007758 <memset>
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <SystemClock_Config+0xd4>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <SystemClock_Config+0xd4>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <SystemClock_Config+0xd4>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <SystemClock_Config+0xd8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a25      	ldr	r2, [pc, #148]	; (8002504 <SystemClock_Config+0xd8>)
 800246e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <SystemClock_Config+0xd8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	2301      	movs	r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
 8002488:	2310      	movs	r3, #16
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	2302      	movs	r3, #2
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
 8002494:	2308      	movs	r3, #8
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002498:	23c0      	movs	r3, #192	; 0xc0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
 800249c:	2302      	movs	r3, #2
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
 80024a0:	2304      	movs	r3, #4
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a4:	2302      	movs	r3, #2
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fec1 	bl	8004234 <HAL_RCC_OscConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x90>
 80024b8:	f000 f826 	bl	8002508 <Error_Handler>
 80024bc:	f001 fe6a 	bl	8004194 <HAL_PWREx_EnableOverDrive>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x9e>
 80024c6:	f000 f81f 	bl	8002508 <Error_Handler>
 80024ca:	230f      	movs	r3, #15
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	2302      	movs	r3, #2
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2106      	movs	r1, #6
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 f951 	bl	8004790 <HAL_RCC_ClockConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0xcc>
 80024f4:	f000 f808 	bl	8002508 <Error_Handler>
 80024f8:	bf00      	nop
 80024fa:	3750      	adds	r7, #80	; 0x50
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000

08002508 <Error_Handler>:
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
 800250c:	b672      	cpsid	i
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>
	...

08002514 <HAL_MspInit>:
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_MspInit+0x44>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_MspInit+0x44>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_MspInit+0x44>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x44>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x44>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x44>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <NMI_Handler>:
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f000 fc46 	bl	8002e38 <HAL_IncTick>
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <ADC_IRQHandler>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <ADC_IRQHandler+0x10>)
 80025b6:	f000 fddd 	bl	8003174 <HAL_ADC_IRQHandler>
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200103a8 	.word	0x200103a8

080025c4 <TIM1_UP_TIM10_IRQHandler>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ca:	f003 f80a 	bl	80055e2 <HAL_TIM_IRQHandler>
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2001860c 	.word	0x2001860c

080025d8 <USART3_IRQHandler>:
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART3_IRQHandler+0x10>)
 80025de:	f003 fde1 	bl	80061a4 <HAL_UART_IRQHandler>
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20018658 	.word	0x20018658

080025ec <_getpid>:
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	2301      	movs	r3, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_kill>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	f005 f863 	bl	80076d0 <__errno>
 800260a:	4603      	mov	r3, r0
 800260c:	2216      	movs	r2, #22
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_exit>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffe7 	bl	80025fc <_kill>
 800262e:	e7fe      	b.n	800262e <_exit+0x12>

08002630 <_read>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e00a      	b.n	8002658 <_read+0x28>
 8002642:	f3af 8000 	nop.w
 8002646:	4601      	mov	r1, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60ba      	str	r2, [r7, #8]
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbf0      	blt.n	8002642 <_read+0x12>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_write>:
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e009      	b.n	8002690 <_write+0x26>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f3af 8000 	nop.w
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf1      	blt.n	800267c <_write+0x12>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_close>:
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <_fstat>:
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	2300      	movs	r3, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_isatty>:
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	2301      	movs	r3, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_lseek>:
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	2300      	movs	r3, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <_sbrk>:
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
 800273c:	f004 ffc8 	bl	80076d0 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20080000 	.word	0x20080000
 800276c:	00000400 	.word	0x00000400
 8002770:	20000294 	.word	0x20000294
 8002774:	200186f0 	.word	0x200186f0

08002778 <SystemInit>:
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <MX_TIM1_Init1>:
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b093      	sub	sp, #76	; 0x4c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	463c      	mov	r4, r7
 80027a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	2301      	movs	r3, #1
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
 80027d6:	2301      	movs	r3, #1
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
 80027da:	463b      	mov	r3, r7
 80027dc:	330c      	adds	r3, #12
 80027de:	2202      	movs	r2, #2
 80027e0:	493c      	ldr	r1, [pc, #240]	; (80028d4 <MX_TIM1_Init1+0x138>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 feb4 	bl	8008550 <strncmp>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <MX_TIM1_Init1+0x84>
 80027ee:	463b      	mov	r3, r7
 80027f0:	330c      	adds	r3, #12
 80027f2:	2202      	movs	r2, #2
 80027f4:	4938      	ldr	r1, [pc, #224]	; (80028d8 <MX_TIM1_Init1+0x13c>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 feaa 	bl	8008550 <strncmp>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <MX_TIM1_Init1+0x6e>
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
 8002808:	e00a      	b.n	8002820 <MX_TIM1_Init1+0x84>
 800280a:	7b3a      	ldrb	r2, [r7, #12]
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <MX_TIM1_Init1+0x140>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <MX_TIM1_Init1+0x84>
 8002816:	f242 7310 	movw	r3, #10000	; 0x2710
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
 800281c:	2364      	movs	r3, #100	; 0x64
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <MX_TIM1_Init1+0x144>)
 8002822:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <MX_TIM1_Init1+0x148>)
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800282c:	6053      	str	r3, [r2, #4]
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <MX_TIM1_Init1+0x144>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002838:	fb02 f203 	mul.w	r2, r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	3b01      	subs	r3, #1
 8002846:	b29b      	uxth	r3, r3
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800284a:	60d3      	str	r3, [r2, #12]
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <MX_TIM1_Init1+0x144>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
 800285e:	4820      	ldr	r0, [pc, #128]	; (80028e0 <MX_TIM1_Init1+0x144>)
 8002860:	f002 fdc0 	bl	80053e4 <HAL_TIM_Base_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM1_Init1+0xd2>
 800286a:	f7ff fe4d 	bl	8002508 <Error_Handler>
 800286e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
 8002874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002878:	4619      	mov	r1, r3
 800287a:	4819      	ldr	r0, [pc, #100]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800287c:	f002 ffd0 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM1_Init1+0xee>
 8002886:	f7ff fe3f 	bl	8002508 <Error_Handler>
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	2310      	movs	r3, #16
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	4811      	ldr	r0, [pc, #68]	; (80028e0 <MX_TIM1_Init1+0x144>)
 800289a:	f003 f88b 	bl	80059b4 <HAL_TIM_SlaveConfigSynchro>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM1_Init1+0x10c>
 80028a4:	f7ff fe30 	bl	8002508 <Error_Handler>
 80028a8:	2320      	movs	r3, #32
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4809      	ldr	r0, [pc, #36]	; (80028e0 <MX_TIM1_Init1+0x144>)
 80028bc:	f003 fabc 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM1_Init1+0x12e>
 80028c6:	f7ff fe1f 	bl	8002508 <Error_Handler>
 80028ca:	bf00      	nop
 80028cc:	374c      	adds	r7, #76	; 0x4c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	0800d0e4 	.word	0x0800d0e4
 80028d8:	0800d0e8 	.word	0x0800d0e8
 80028dc:	0800d0ec 	.word	0x0800d0ec
 80028e0:	2001860c 	.word	0x2001860c
 80028e4:	40010000 	.word	0x40010000

080028e8 <MX_TIM1_Init>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	463b      	mov	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <MX_TIM1_Init+0xd4>)
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <MX_TIM1_Init+0xd0>)
 800291e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <MX_TIM1_Init+0xd0>)
 800292c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <MX_TIM1_Init+0xd0>)
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
 8002944:	481c      	ldr	r0, [pc, #112]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002946:	f002 fd4d 	bl	80053e4 <HAL_TIM_Base_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM1_Init+0x6c>
 8002950:	f7ff fdda 	bl	8002508 <Error_Handler>
 8002954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	f107 0320 	add.w	r3, r7, #32
 800295e:	4619      	mov	r1, r3
 8002960:	4815      	ldr	r0, [pc, #84]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002962:	f002 ff5d 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM1_Init+0x88>
 800296c:	f7ff fdcc 	bl	8002508 <Error_Handler>
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	2310      	movs	r3, #16
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	4619      	mov	r1, r3
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <MX_TIM1_Init+0xd0>)
 8002980:	f003 f818 	bl	80059b4 <HAL_TIM_SlaveConfigSynchro>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM1_Init+0xa6>
 800298a:	f7ff fdbd 	bl	8002508 <Error_Handler>
 800298e:	2320      	movs	r3, #32
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	463b      	mov	r3, r7
 800299c:	4619      	mov	r1, r3
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MX_TIM1_Init+0xd0>)
 80029a0:	f003 fa4a 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0xc6>
 80029aa:	f7ff fdad 	bl	8002508 <Error_Handler>
 80029ae:	bf00      	nop
 80029b0:	3730      	adds	r7, #48	; 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2001860c 	.word	0x2001860c
 80029bc:	40010000 	.word	0x40010000

080029c0 <HAL_TIM_Base_MspInit>:
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_TIM_Base_MspInit+0x44>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x3a>
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2019      	movs	r0, #25
 80029f0:	f001 f827 	bl	8003a42 <HAL_NVIC_SetPriority>
 80029f4:	2019      	movs	r0, #25
 80029f6:	f001 f840 	bl	8003a7a <HAL_NVIC_EnableIRQ>
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40023800 	.word	0x40023800

08002a0c <MX_USART3_UART_Init>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <MX_USART3_UART_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_USART3_UART_Init+0x78>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_USART3_UART_Init+0x7c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <MX_USART3_UART_Init+0x80>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MX_USART3_UART_Init+0x84>)
 8002a2a:	220d      	movs	r2, #13
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <MX_USART3_UART_Init+0x8c>)
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a36:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a50:	220c      	movs	r2, #12
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <MX_USART3_UART_Init+0x88>)
 8002a6e:	f003 fa8f 	bl	8005f90 <HAL_UART_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_USART3_UART_Init+0x70>
 8002a78:	f7ff fd46 	bl	8002508 <Error_Handler>
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200103f4 	.word	0x200103f4
 8002a84:	200145f4 	.word	0x200145f4
 8002a88:	200103f0 	.word	0x200103f0
 8002a8c:	200145f8 	.word	0x200145f8
 8002a90:	200103f8 	.word	0x200103f8
 8002a94:	20018658 	.word	0x20018658
 8002a98:	40004800 	.word	0x40004800

08002a9c <HAL_UART_MspInit>:
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0ae      	sub	sp, #184	; 0xb8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2290      	movs	r2, #144	; 0x90
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fe4b 	bl	8007758 <memset>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_UART_MspInit+0xc4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d144      	bne.n	8002b56 <HAL_UART_MspInit+0xba>
 8002acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 f85a 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_UART_MspInit+0x4e>
 8002ae6:	f7ff fd0f 	bl	8002508 <Error_Handler>
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_UART_MspInit+0xc8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b34:	2307      	movs	r3, #7
 8002b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <HAL_UART_MspInit+0xcc>)
 8002b42:	f001 f92f 	bl	8003da4 <HAL_GPIO_Init>
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2027      	movs	r0, #39	; 0x27
 8002b4c:	f000 ff79 	bl	8003a42 <HAL_NVIC_SetPriority>
 8002b50:	2027      	movs	r0, #39	; 0x27
 8002b52:	f000 ff92 	bl	8003a7a <HAL_NVIC_EnableIRQ>
 8002b56:	bf00      	nop
 8002b58:	37b8      	adds	r7, #184	; 0xb8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40004800 	.word	0x40004800
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020c00 	.word	0x40020c00

08002b6c <has_message_from_UART>:
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <has_message_from_UART+0x14>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	200103f4 	.word	0x200103f4

08002b84 <is_transmitting_to_UART>:
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <is_transmitting_to_UART+0x14>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200145f4 	.word	0x200145f4

08002b9c <reset_UART>:
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <reset_UART+0x24>)
 8002ba8:	f004 fdd6 	bl	8007758 <memset>
 8002bac:	2201      	movs	r2, #1
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <reset_UART+0x24>)
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <reset_UART+0x28>)
 8002bb2:	f003 faa9 	bl	8006108 <HAL_UART_Receive_IT>
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <reset_UART+0x2c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200002a0 	.word	0x200002a0
 8002bc4:	20018658 	.word	0x20018658
 8002bc8:	200103f4 	.word	0x200103f4

08002bcc <send_UART>:
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <send_UART+0x44>)
 8002bdc:	f005 fcca 	bl	8008574 <strncpy>
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <send_UART+0x44>)
 8002be2:	f7fd fb37 	bl	8000254 <strlen>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <send_UART+0x44>)
 8002bec:	4413      	add	r3, r2
 8002bee:	4909      	ldr	r1, [pc, #36]	; (8002c14 <send_UART+0x48>)
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	8013      	strh	r3, [r2, #0]
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <send_UART+0x4c>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <send_UART+0x44>)
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <send_UART+0x50>)
 8002c04:	f003 fa12 	bl	800602c <HAL_UART_Transmit_IT>
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200103f8 	.word	0x200103f8
 8002c14:	0800d0f0 	.word	0x0800d0f0
 8002c18:	200145f4 	.word	0x200145f4
 8002c1c:	20018658 	.word	0x20018658

08002c20 <read_UART>:
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <read_UART+0x1c>)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f005 fca0 	bl	8008574 <strncpy>
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200002a0 	.word	0x200002a0

08002c40 <HAL_UART_RxCpltCallback>:
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa8>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d146      	bne.n	8002cde <HAL_UART_RxCpltCallback+0x9e>
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	2b0d      	cmp	r3, #13
 8002c5a:	d106      	bne.n	8002c6a <HAL_UART_RxCpltCallback+0x2a>
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa8>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e03a      	b.n	8002ce0 <HAL_UART_RxCpltCallback+0xa0>
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d10e      	bne.n	8002c94 <HAL_UART_RxCpltCallback+0x54>
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_UART_RxCpltCallback+0x4a>
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e004      	b.n	8002c94 <HAL_UART_RxCpltCallback+0x54>
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b02      	subs	r3, #2
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	2b1b      	cmp	r3, #27
 8002c9e:	d103      	bne.n	8002ca8 <HAL_UART_RxCpltCallback+0x68>
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	2b24      	cmp	r3, #36	; 0x24
 8002cb2:	d105      	bne.n	8002cc0 <HAL_UART_RxCpltCallback+0x80>
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_UART_RxCpltCallback+0xac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_UART_RxCpltCallback+0xb0>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <HAL_UART_RxCpltCallback+0xb4>)
 8002cd8:	f003 fa16 	bl	8006108 <HAL_UART_Receive_IT>
 8002cdc:	e000      	b.n	8002ce0 <HAL_UART_RxCpltCallback+0xa0>
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200103f4 	.word	0x200103f4
 8002cec:	200103f0 	.word	0x200103f0
 8002cf0:	200002a0 	.word	0x200002a0
 8002cf4:	20018658 	.word	0x20018658

08002cf8 <HAL_UART_TxCpltCallback>:
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_UART_TxCpltCallback+0x64>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	f083 0301 	eor.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d122      	bne.n	8002d54 <HAL_UART_TxCpltCallback+0x5c>
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_UART_TxCpltCallback+0x6c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	2b0d      	cmp	r3, #13
 8002d18:	d10d      	bne.n	8002d36 <HAL_UART_TxCpltCallback+0x3e>
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_UART_TxCpltCallback+0x6c>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	d006      	beq.n	8002d36 <HAL_UART_TxCpltCallback+0x3e>
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_UART_TxCpltCallback+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e00f      	b.n	8002d56 <HAL_UART_TxCpltCallback+0x5e>
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_UART_TxCpltCallback+0x68>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_UART_TxCpltCallback+0x6c>)
 8002d46:	4413      	add	r3, r2
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4806      	ldr	r0, [pc, #24]	; (8002d68 <HAL_UART_TxCpltCallback+0x70>)
 8002d4e:	f003 f96d 	bl	800602c <HAL_UART_Transmit_IT>
 8002d52:	e000      	b.n	8002d56 <HAL_UART_TxCpltCallback+0x5e>
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200145f4 	.word	0x200145f4
 8002d60:	200145f8 	.word	0x200145f8
 8002d64:	200103f8 	.word	0x200103f8
 8002d68:	20018658 	.word	0x20018658

08002d6c <Reset_Handler>:
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da4 <LoopFillZerobss+0x12>
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <LoopFillZerobss+0x16>)
 8002d72:	490e      	ldr	r1, [pc, #56]	; (8002dac <LoopFillZerobss+0x1a>)
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <LoopFillZerobss+0x1e>)
 8002d76:	2300      	movs	r3, #0
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:
 8002d7a:	58d4      	ldr	r4, [r2, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:
 8002d80:	18c4      	adds	r4, r0, r3
 8002d82:	428c      	cmp	r4, r1
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <LoopFillZerobss+0x22>)
 8002d88:	4c0b      	ldr	r4, [pc, #44]	; (8002db8 <LoopFillZerobss+0x26>)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:
 8002d92:	42a2      	cmp	r2, r4
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>
 8002d96:	f7ff fcef 	bl	8002778 <SystemInit>
 8002d9a:	f004 fc9f 	bl	80076dc <__libc_init_array>
 8002d9e:	f7ff fafd 	bl	800239c <main>
 8002da2:	4770      	bx	lr
 8002da4:	20080000 	.word	0x20080000
 8002da8:	20000000 	.word	0x20000000
 8002dac:	2000026c 	.word	0x2000026c
 8002db0:	0800d614 	.word	0x0800d614
 8002db4:	2000026c 	.word	0x2000026c
 8002db8:	200186f0 	.word	0x200186f0

08002dbc <CAN1_RX0_IRQHandler>:
 8002dbc:	e7fe      	b.n	8002dbc <CAN1_RX0_IRQHandler>

08002dbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f000 fe32 	bl	8003a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f000 f805 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dce:	f7ff fba1 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fe4d 	bl	8003a96 <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 fe15 	bl	8003a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000008c 	.word	0x2000008c
 8002e30:	20000094 	.word	0x20000094
 8002e34:	20000090 	.word	0x20000090

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000094 	.word	0x20000094
 8002e5c:	200186dc 	.word	0x200186dc

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200186dc 	.word	0x200186dc

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000094 	.word	0x20000094

08002ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fe3c 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_ADC_Init+0x84>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fbb8 	bl	8003684 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
 8002f2a:	e001      	b.n	8002f30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	ffffeefd 	.word	0xffffeefd

08002f48 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Start_IT+0x1a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0b5      	b.n	80030ce <HAL_ADC_Start_IT+0x186>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d018      	beq.n	8002faa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f88:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_ADC_Start_IT+0x194>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a54      	ldr	r2, [pc, #336]	; (80030e0 <HAL_ADC_Start_IT+0x198>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0c9a      	lsrs	r2, r3, #18
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f9c:	e002      	b.n	8002fa4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f9      	bne.n	8002f9e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d17d      	bne.n	80030b4 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_ADC_Start_IT+0x19c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d106      	bne.n	8003002 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f023 0206 	bic.w	r2, r3, #6
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
 8003000:	e002      	b.n	8003008 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003018:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_ADC_Start_IT+0x1a0>)
 8003026:	430b      	orrs	r3, r1
 8003028:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_ADC_Start_IT+0x1a4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d143      	bne.n	80030cc <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e03a      	b.n	80030cc <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a25      	ldr	r2, [pc, #148]	; (80030f0 <HAL_ADC_Start_IT+0x1a8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10e      	bne.n	800307e <HAL_ADC_Start_IT+0x136>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_ADC_Start_IT+0x1a4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d120      	bne.n	80030cc <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_ADC_Start_IT+0x1ac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d11b      	bne.n	80030cc <HAL_ADC_Start_IT+0x184>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	e00b      	b.n	80030cc <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000008c 	.word	0x2000008c
 80030e0:	431bde83 	.word	0x431bde83
 80030e4:	fffff8fe 	.word	0xfffff8fe
 80030e8:	04000020 	.word	0x04000020
 80030ec:	40012300 	.word	0x40012300
 80030f0:	40012000 	.word	0x40012000
 80030f4:	40012200 	.word	0x40012200

080030f8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_ADC_Stop_IT+0x16>
 800310a:	2302      	movs	r3, #2
 800310c:	e027      	b.n	800315e <HAL_ADC_Stop_IT+0x66>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_ADC_Stop_IT+0x74>)
 8003140:	400b      	ands	r3, r1
 8003142:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_ADC_Stop_IT+0x78>)
 800314a:	4013      	ands	r3, r2
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	fbffffdf 	.word	0xfbffffdf
 8003170:	ffffeefe 	.word	0xffffeefe

08003174 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d049      	beq.n	800323e <HAL_ADC_IRQHandler+0xca>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d046      	beq.n	800323e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d12b      	bne.n	800322e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d127      	bne.n	800322e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0220 	bic.w	r2, r2, #32
 8003208:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd4e 	bl	8000cd0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0212 	mvn.w	r2, #18
 800323c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d057      	beq.n	8003304 <HAL_ADC_IRQHandler+0x190>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d054      	beq.n	8003304 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d139      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12b      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d124      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11d      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d119      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fabf 	bl	8003878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 020c 	mvn.w	r2, #12
 8003302:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <HAL_ADC_IRQHandler+0x1d6>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d014      	beq.n	800334a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10d      	bne.n	800334a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f837 	bl	80033ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0201 	mvn.w	r2, #1
 8003348:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003358:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_ADC_IRQHandler+0x218>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0220 	mvn.w	r2, #32
 800337a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f820 	bl	80033c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0220 	mvn.w	r2, #32
 800338a:	601a      	str	r2, [r3, #0]
  }
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e136      	b.n	8003662 <HAL_ADC_ConfigChannel+0x28a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d93a      	bls.n	800347a <HAL_ADC_ConfigChannel+0xa2>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340c:	d035      	beq.n	800347a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68d9      	ldr	r1, [r3, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	3b1e      	subs	r3, #30
 8003424:	2207      	movs	r2, #7
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a8d      	ldr	r2, [pc, #564]	; (8003670 <HAL_ADC_ConfigChannel+0x298>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	061a      	lsls	r2, r3, #24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003452:	e035      	b.n	80034c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68d9      	ldr	r1, [r3, #12]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	4603      	mov	r3, r0
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4403      	add	r3, r0
 800346c:	3b1e      	subs	r3, #30
 800346e:	409a      	lsls	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003478:	e022      	b.n	80034c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6919      	ldr	r1, [r3, #16]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43da      	mvns	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	400a      	ands	r2, r1
 800349c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6919      	ldr	r1, [r3, #16]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	4603      	mov	r3, r0
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4403      	add	r3, r0
 80034b6:	409a      	lsls	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d824      	bhi.n	8003512 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b05      	subs	r3, #5
 80034da:	221f      	movs	r2, #31
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43da      	mvns	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	400a      	ands	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	4618      	mov	r0, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b05      	subs	r3, #5
 8003504:	fa00 f203 	lsl.w	r2, r0, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	635a      	str	r2, [r3, #52]	; 0x34
 8003510:	e04c      	b.n	80035ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d824      	bhi.n	8003564 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b23      	subs	r3, #35	; 0x23
 800352c:	221f      	movs	r2, #31
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	400a      	ands	r2, r1
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b23      	subs	r3, #35	; 0x23
 8003556:	fa00 f203 	lsl.w	r2, r0, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
 8003562:	e023      	b.n	80035ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b41      	subs	r3, #65	; 0x41
 8003576:	221f      	movs	r2, #31
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	4618      	mov	r0, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b41      	subs	r3, #65	; 0x41
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_ADC_ConfigChannel+0x29c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10a      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1f4>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035be:	d105      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_ADC_ConfigChannel+0x29c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10f      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d10b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a25      	ldr	r2, [pc, #148]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035ea:	4b23      	ldr	r3, [pc, #140]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 80035f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_ADC_ConfigChannel+0x29c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d12b      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x280>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_ADC_ConfigChannel+0x298>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b11      	cmp	r3, #17
 8003610:	d122      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 8003618:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800361c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_ADC_ConfigChannel+0x2a0>)
 8003624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003628:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_ADC_ConfigChannel+0x298>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d111      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_ADC_ConfigChannel+0x2a4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <HAL_ADC_ConfigChannel+0x2a8>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9a      	lsrs	r2, r3, #18
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800364a:	e002      	b.n	8003652 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b01      	subs	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	10000012 	.word	0x10000012
 8003674:	40012000 	.word	0x40012000
 8003678:	40012300 	.word	0x40012300
 800367c:	2000008c 	.word	0x2000008c
 8003680:	431bde83 	.word	0x431bde83

08003684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800368c:	4b78      	ldr	r3, [pc, #480]	; (8003870 <ADC_Init+0x1ec>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a77      	ldr	r2, [pc, #476]	; (8003870 <ADC_Init+0x1ec>)
 8003692:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003696:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003698:	4b75      	ldr	r3, [pc, #468]	; (8003870 <ADC_Init+0x1ec>)
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4973      	ldr	r1, [pc, #460]	; (8003870 <ADC_Init+0x1ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	4a58      	ldr	r2, [pc, #352]	; (8003874 <ADC_Init+0x1f0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e00f      	b.n	800377e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800376c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800377c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0202 	bic.w	r2, r2, #2
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	005a      	lsls	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	3b01      	subs	r3, #1
 80037d8:	035a      	lsls	r2, r3, #13
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	e007      	b.n	80037f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	3b01      	subs	r3, #1
 8003810:	051a      	lsls	r2, r3, #20
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003836:	025a      	lsls	r2, r3, #9
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	029a      	lsls	r2, r3, #10
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40012300 	.word	0x40012300
 8003874:	0f000001 	.word	0x0f000001

08003878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60d3      	str	r3, [r2, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00
 80038d0:	05fa0000 	.word	0x05fa0000

080038d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f1c3 0307 	rsb	r3, r3, #7
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf28      	it	cs
 800399e:	2304      	movcs	r3, #4
 80039a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d902      	bls.n	80039b0 <NVIC_EncodePriority+0x30>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	e000      	b.n	80039b2 <NVIC_EncodePriority+0x32>
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	4313      	orrs	r3, r2
         );
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d301      	bcc.n	80039fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00f      	b.n	8003a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <SysTick_Config+0x40>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a06:	210f      	movs	r1, #15
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f7ff ff8e 	bl	800392c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <SysTick_Config+0x40>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <SysTick_Config+0x40>)
 8003a18:	2207      	movs	r2, #7
 8003a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	e000e010 	.word	0xe000e010

08003a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff29 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a54:	f7ff ff3e 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f7ff ff8e 	bl	8003980 <NVIC_EncodePriority>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff5d 	bl	800392c <__NVIC_SetPriority>
}
 8003a72:	bf00      	nop
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff31 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ffa2 	bl	80039e8 <SysTick_Config>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e014      	b.n	8003aea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	791b      	ldrb	r3, [r3, #4]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fe fb6f 	bl	80021b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	795b      	ldrb	r3, [r3, #5]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_DAC_Start+0x16>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e040      	b.n	8003b8a <HAL_DAC_Start+0x98>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2201      	movs	r2, #1
 8003b22:	409a      	lsls	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003b3c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b3e:	d11d      	bne.n	8003b7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	e014      	b.n	8003b7c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	213c      	movs	r1, #60	; 0x3c
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0202 	orr.w	r2, r2, #2
 8003b7a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3308      	adds	r3, #8
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e004      	b.n	8003bca <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	795b      	ldrb	r3, [r3, #5]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_DAC_ConfigChannel+0x18>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e03c      	b.n	8003c72 <HAL_DAC_ConfigChannel+0x92>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2202      	movs	r2, #2
 8003c02:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	22c0      	movs	r2, #192	; 0xc0
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	400a      	ands	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8c:	f7ff f8e8 	bl	8002e60 <HAL_GetTick>
 8003c90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d008      	beq.n	8003cb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e052      	b.n	8003d56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0216 	bic.w	r2, r2, #22
 8003cbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_DMA_Abort+0x62>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0208 	bic.w	r2, r2, #8
 8003cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d00:	e013      	b.n	8003d2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d02:	f7ff f8ad 	bl	8002e60 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d90c      	bls.n	8003d2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e015      	b.n	8003d56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e4      	bne.n	8003d02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	223f      	movs	r2, #63	; 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2280      	movs	r2, #128	; 0x80
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e00c      	b.n	8003d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e175      	b.n	80040b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 8164 	bne.w	80040aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d005      	beq.n	8003dfa <HAL_GPIO_Init+0x56>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d130      	bne.n	8003e5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0201 	and.w	r2, r3, #1
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d017      	beq.n	8003e98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d123      	bne.n	8003eec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	08da      	lsrs	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3208      	adds	r2, #8
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	08da      	lsrs	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80be 	beq.w	80040aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4a65      	ldr	r2, [pc, #404]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8003f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f38:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3a:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f46:	4a61      	ldr	r2, [pc, #388]	; (80040cc <HAL_GPIO_Init+0x328>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_GPIO_Init+0x32c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d037      	beq.n	8003fe2 <HAL_GPIO_Init+0x23e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a57      	ldr	r2, [pc, #348]	; (80040d4 <HAL_GPIO_Init+0x330>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_GPIO_Init+0x23a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_GPIO_Init+0x334>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02b      	beq.n	8003fda <HAL_GPIO_Init+0x236>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a55      	ldr	r2, [pc, #340]	; (80040dc <HAL_GPIO_Init+0x338>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d025      	beq.n	8003fd6 <HAL_GPIO_Init+0x232>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a54      	ldr	r2, [pc, #336]	; (80040e0 <HAL_GPIO_Init+0x33c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <HAL_GPIO_Init+0x22e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_GPIO_Init+0x340>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d019      	beq.n	8003fce <HAL_GPIO_Init+0x22a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_GPIO_Init+0x344>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_GPIO_Init+0x226>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a51      	ldr	r2, [pc, #324]	; (80040ec <HAL_GPIO_Init+0x348>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_GPIO_Init+0x222>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a50      	ldr	r2, [pc, #320]	; (80040f0 <HAL_GPIO_Init+0x34c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <HAL_GPIO_Init+0x21e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_GPIO_Init+0x21a>
 8003fba:	2309      	movs	r3, #9
 8003fbc:	e012      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	e010      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	e00e      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	e00c      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fca:	2306      	movs	r3, #6
 8003fcc:	e00a      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fce:	2305      	movs	r3, #5
 8003fd0:	e008      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	e006      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e004      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e002      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_GPIO_Init+0x240>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f002 0203 	and.w	r2, r2, #3
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	4093      	lsls	r3, r2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ff4:	4935      	ldr	r1, [pc, #212]	; (80040cc <HAL_GPIO_Init+0x328>)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_GPIO_Init+0x354>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004026:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_GPIO_Init+0x354>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_GPIO_Init+0x354>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_GPIO_Init+0x354>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <HAL_GPIO_Init+0x354>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_GPIO_Init+0x354>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_GPIO_Init+0x354>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_GPIO_Init+0x354>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b0f      	cmp	r3, #15
 80040b4:	f67f ae86 	bls.w	8003dc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40022400 	.word	0x40022400
 80040f8:	40013c00 	.word	0x40013c00

080040fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e001      	b.n	800411e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
 8004138:	4613      	mov	r3, r2
 800413a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800413c:	787b      	ldrb	r3, [r7, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004148:	e003      	b.n	8004152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	041a      	lsls	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4013      	ands	r3, r2
 8004176:	041a      	lsls	r2, r3, #16
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43d9      	mvns	r1, r3
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	400b      	ands	r3, r1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	619a      	str	r2, [r3, #24]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	; 0x40
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_PWREx_EnableOverDrive+0x98>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c2:	f7fe fe4d 	bl	8002e60 <HAL_GetTick>
 80041c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041c8:	e009      	b.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ca:	f7fe fe49 	bl	8002e60 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	d901      	bls.n	80041de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e022      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d1ee      	bne.n	80041ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f8:	f7fe fe32 	bl	8002e60 <HAL_GetTick>
 80041fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041fe:	e009      	b.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004200:	f7fe fe2e 	bl	8002e60 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420e:	d901      	bls.n	8004214 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e007      	b.n	8004224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004220:	d1ee      	bne.n	8004200 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e29b      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b96      	ldr	r3, [pc, #600]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004264:	4b93      	ldr	r3, [pc, #588]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
 8004270:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b8d      	ldr	r3, [pc, #564]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x130>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e275      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x7a>
 80042a0:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a83      	ldr	r2, [pc, #524]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x9c>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7c      	ldr	r3, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 80042da:	4b76      	ldr	r3, [pc, #472]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fda4 	bl	8002e60 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fda0 	bl	8002e60 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e229      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe fd90 	bl	8002e60 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fd8c 	bl	8002e60 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e215      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x110>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d069      	beq.n	8004446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1e9      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	493d      	ldr	r1, [pc, #244]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe fd42 	bl	8002e60 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe fd3e 	bl	8002e60 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1c7      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4929      	ldr	r1, [pc, #164]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
 8004412:	e018      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe fd1e 	bl	8002e60 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fe fd1a 	bl	8002e60 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1a3      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d038      	beq.n	80044c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d019      	beq.n	800448e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe fcfb 	bl	8002e60 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fe fcf7 	bl	8002e60 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e180      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x23a>
 800448c:	e01a      	b.n	80044c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fe fce1 	bl	8002e60 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fe fcdd 	bl	8002e60 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d903      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e166      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
 80044b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	4b92      	ldr	r3, [pc, #584]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a4 	beq.w	800461a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8c      	ldr	r3, [pc, #560]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b89      	ldr	r3, [pc, #548]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a88      	ldr	r2, [pc, #544]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b86      	ldr	r3, [pc, #536]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	4b83      	ldr	r3, [pc, #524]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004506:	4b80      	ldr	r3, [pc, #512]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7f      	ldr	r2, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fe fca5 	bl	8002e60 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fe fca1 	bl	8002e60 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	; 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e12a      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x4d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x31a>
 8004540:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a6f      	ldr	r2, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x33c>
 8004556:	4b6b      	ldr	r3, [pc, #428]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a6a      	ldr	r2, [pc, #424]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a67      	ldr	r2, [pc, #412]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
 8004578:	4b62      	ldr	r3, [pc, #392]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a61      	ldr	r2, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a5e      	ldr	r2, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004592:	4b5c      	ldr	r3, [pc, #368]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a5b      	ldr	r2, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe fc55 	bl	8002e60 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe fc51 	bl	8002e60 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0d8      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4c      	ldr	r3, [pc, #304]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x386>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fe fc3f 	bl	8002e60 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe fc3b 	bl	8002e60 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0c2      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80ae 	beq.w	8004780 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b37      	ldr	r3, [pc, #220]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d06d      	beq.n	800470c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d14b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b32      	ldr	r3, [pc, #200]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a31      	ldr	r2, [pc, #196]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe fc0c 	bl	8002e60 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fc08 	bl	8002e60 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e091      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	491b      	ldr	r1, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe fbda 	bl	8002e60 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe fbd6 	bl	8002e60 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e05f      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x47c>
 80046ce:	e057      	b.n	8004780 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fe fbc0 	bl	8002e60 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe fbbc 	bl	8002e60 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e045      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4b0>
 8004702:	e03d      	b.n	8004780 <HAL_RCC_OscConfig+0x54c>
 8004704:	40023800 	.word	0x40023800
 8004708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800470c:	4b1f      	ldr	r3, [pc, #124]	; (800478c <HAL_RCC_OscConfig+0x558>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d030      	beq.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d129      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d122      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d119      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d10f      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0d0      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b6a      	ldr	r3, [pc, #424]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d910      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b67      	ldr	r3, [pc, #412]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4965      	ldr	r1, [pc, #404]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0b8      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d020      	beq.n	8004826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f0:	4b59      	ldr	r3, [pc, #356]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004808:	4b53      	ldr	r3, [pc, #332]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a52      	ldr	r2, [pc, #328]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b50      	ldr	r3, [pc, #320]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	494d      	ldr	r1, [pc, #308]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d040      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e073      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06b      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4936      	ldr	r1, [pc, #216]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fe faec 	bl	8002e60 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fe fae8 	bl	8002e60 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e053      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d210      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 020f 	bic.w	r2, r3, #15
 80048ca:	4922      	ldr	r1, [pc, #136]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e032      	b.n	800494a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4916      	ldr	r1, [pc, #88]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004922:	f000 f821 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8004926:	4602      	mov	r2, r0
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	490a      	ldr	r1, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x1cc>)
 8004934:	5ccb      	ldrb	r3, [r1, r3]
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1d0>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_ClockConfig+0x1d4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe fa48 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00
 8004958:	40023800 	.word	0x40023800
 800495c:	0800d100 	.word	0x0800d100
 8004960:	2000008c 	.word	0x2000008c
 8004964:	20000090 	.word	0x20000090

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	2300      	movs	r3, #0
 800497a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004980:	4b67      	ldr	r3, [pc, #412]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d00d      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x40>
 800498c:	2b08      	cmp	r3, #8
 800498e:	f200 80bd 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x34>
 8004996:	2b04      	cmp	r3, #4
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800499a:	e0b7      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800499e:	60bb      	str	r3, [r7, #8]
      break;
 80049a0:	e0b7      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a2:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049a4:	60bb      	str	r3, [r7, #8]
      break;
 80049a6:	e0b4      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a8:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049b2:	4b5b      	ldr	r3, [pc, #364]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d04d      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	461a      	mov	r2, r3
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	ea02 0800 	and.w	r8, r2, r0
 80049d6:	ea03 0901 	and.w	r9, r3, r1
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	014b      	lsls	r3, r1, #5
 80049e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049ec:	0142      	lsls	r2, r0, #5
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	ebb0 0008 	subs.w	r0, r0, r8
 80049f6:	eb61 0109 	sbc.w	r1, r1, r9
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	018b      	lsls	r3, r1, #6
 8004a04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a08:	0182      	lsls	r2, r0, #6
 8004a0a:	1a12      	subs	r2, r2, r0
 8004a0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	00d9      	lsls	r1, r3, #3
 8004a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1e:	00d0      	lsls	r0, r2, #3
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	eb12 0208 	adds.w	r2, r2, r8
 8004a28:	eb43 0309 	adc.w	r3, r3, r9
 8004a2c:	f04f 0000 	mov.w	r0, #0
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	0259      	lsls	r1, r3, #9
 8004a36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a3a:	0250      	lsls	r0, r2, #9
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	f7fb fe1c 	bl	8000688 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e04a      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	461a      	mov	r2, r3
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	ea02 0400 	and.w	r4, r2, r0
 8004a72:	ea03 0501 	and.w	r5, r3, r1
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	014b      	lsls	r3, r1, #5
 8004a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a88:	0142      	lsls	r2, r0, #5
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	1b00      	subs	r0, r0, r4
 8004a90:	eb61 0105 	sbc.w	r1, r1, r5
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	018b      	lsls	r3, r1, #6
 8004a9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aa2:	0182      	lsls	r2, r0, #6
 8004aa4:	1a12      	subs	r2, r2, r0
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	f04f 0000 	mov.w	r0, #0
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	00d9      	lsls	r1, r3, #3
 8004ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ab8:	00d0      	lsls	r0, r2, #3
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	1912      	adds	r2, r2, r4
 8004ac0:	eb45 0303 	adc.w	r3, r5, r3
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	0299      	lsls	r1, r3, #10
 8004ace:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ad2:	0290      	lsls	r0, r2, #10
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	f7fb fdd0 	bl	8000688 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	60bb      	str	r3, [r7, #8]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b0e:	60bb      	str	r3, [r7, #8]
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	68bb      	ldr	r3, [r7, #8]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	2000008c 	.word	0x2000008c

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800d110 	.word	0x0800d110

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800d110 	.word	0x0800d110

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d012      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	4964      	ldr	r1, [pc, #400]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bee:	4b5d      	ldr	r3, [pc, #372]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	4959      	ldr	r1, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	494a      	ldr	r1, [pc, #296]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 808b 	beq.w	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6413      	str	r3, [r2, #64]	; 0x40
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a34      	ldr	r2, [pc, #208]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9c:	f7fe f8e0 	bl	8002e60 <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fe f8dc 	bl	8002e60 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e38f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d035      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d02e      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d114      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fe f8a4 	bl	8002e60 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fe f8a0 	bl	8002e60 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e351      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4a:	d111      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	4901      	ldr	r1, [pc, #4]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000
 8004d6c:	0ffffcff 	.word	0x0ffffcff
 8004d70:	4bb3      	ldr	r3, [pc, #716]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4ab2      	ldr	r2, [pc, #712]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d7a:	6093      	str	r3, [r2, #8]
 8004d7c:	4bb0      	ldr	r3, [pc, #704]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d88:	49ad      	ldr	r1, [pc, #692]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d9a:	4ba9      	ldr	r3, [pc, #676]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	4aa7      	ldr	r2, [pc, #668]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004daa:	4ba5      	ldr	r3, [pc, #660]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	49a2      	ldr	r1, [pc, #648]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd6:	499a      	ldr	r1, [pc, #616]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dea:	4b95      	ldr	r3, [pc, #596]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df8:	4991      	ldr	r1, [pc, #580]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0c:	4b8c      	ldr	r3, [pc, #560]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	4989      	ldr	r1, [pc, #548]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2e:	4b84      	ldr	r3, [pc, #528]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	4980      	ldr	r1, [pc, #512]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e50:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	4978      	ldr	r1, [pc, #480]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f023 020c 	bic.w	r2, r3, #12
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	496f      	ldr	r1, [pc, #444]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e94:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	4967      	ldr	r1, [pc, #412]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb6:	4b62      	ldr	r3, [pc, #392]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	495e      	ldr	r1, [pc, #376]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	4956      	ldr	r1, [pc, #344]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004efa:	4b51      	ldr	r3, [pc, #324]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f1c:	4b48      	ldr	r3, [pc, #288]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	4945      	ldr	r1, [pc, #276]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f3e:	4b40      	ldr	r3, [pc, #256]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	493c      	ldr	r1, [pc, #240]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f60:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	4934      	ldr	r1, [pc, #208]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f82:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f90:	492b      	ldr	r1, [pc, #172]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	491b      	ldr	r1, [pc, #108]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fe4:	4b16      	ldr	r3, [pc, #88]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	4912      	ldr	r1, [pc, #72]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005018:	4909      	ldr	r1, [pc, #36]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	e002      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	4986      	ldr	r1, [pc, #536]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005058:	4b81      	ldr	r3, [pc, #516]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005068:	497d      	ldr	r1, [pc, #500]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d006      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80d6 	beq.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005084:	4b76      	ldr	r3, [pc, #472]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a75      	ldr	r2, [pc, #468]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fd fee6 	bl	8002e60 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005098:	f7fd fee2 	bl	8002e60 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e195      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050aa:	4b6d      	ldr	r3, [pc, #436]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d021      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11d      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050ca:	4b65      	ldr	r3, [pc, #404]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d8:	4b61      	ldr	r3, [pc, #388]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050de:	0e1b      	lsrs	r3, r3, #24
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	019a      	lsls	r2, r3, #6
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	4958      	ldr	r1, [pc, #352]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02e      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005130:	d129      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005140:	4b47      	ldr	r3, [pc, #284]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005146:	0f1b      	lsrs	r3, r3, #28
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	019a      	lsls	r2, r3, #6
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	071b      	lsls	r3, r3, #28
 8005166:	493e      	ldr	r1, [pc, #248]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800516e:	4b3c      	ldr	r3, [pc, #240]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	f023 021f 	bic.w	r2, r3, #31
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	3b01      	subs	r3, #1
 800517e:	4938      	ldr	r1, [pc, #224]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01d      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005192:	4b33      	ldr	r3, [pc, #204]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	0e1b      	lsrs	r3, r3, #24
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	431a      	orrs	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4926      	ldr	r1, [pc, #152]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d011      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	071b      	lsls	r3, r3, #28
 80051f6:	491a      	ldr	r1, [pc, #104]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520a:	f7fd fe29 	bl	8002e60 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005212:	f7fd fe25 	bl	8002e60 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	; 0x64
 800521e:	d901      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0d8      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	f040 80ce 	bne.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005244:	f7fd fe0c 	bl	8002e60 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800524a:	e00b      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524c:	f7fd fe08 	bl	8002e60 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d904      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0bb      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005264:	4b5e      	ldr	r3, [pc, #376]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800526c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005270:	d0ec      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800528e:	2b00      	cmp	r3, #0
 8005290:	d02e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d12a      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	0f1b      	lsrs	r3, r3, #28
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	019a      	lsls	r2, r3, #6
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4944      	ldr	r1, [pc, #272]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	493d      	ldr	r1, [pc, #244]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d022      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d11d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005306:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	0e1b      	lsrs	r3, r3, #24
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005314:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	0f1b      	lsrs	r3, r3, #28
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	019a      	lsls	r2, r3, #6
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	4929      	ldr	r1, [pc, #164]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d028      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	0e1b      	lsrs	r3, r3, #24
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	019a      	lsls	r2, r3, #6
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	431a      	orrs	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	4917      	ldr	r1, [pc, #92]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	4911      	ldr	r1, [pc, #68]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fd fd58 	bl	8002e60 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053b4:	f7fd fd54 	bl	8002e60 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e007      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d2:	d1ef      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800

080053e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e049      	b.n	800548a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd fad8 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fb3a 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e054      	b.n	8005556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a26      	ldr	r2, [pc, #152]	; (8005564 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d01d      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <HAL_TIM_Base_Start_IT+0xd4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_TIM_Base_Start_IT+0xd8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <HAL_TIM_Base_Start_IT+0xdc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <HAL_TIM_Base_Start_IT+0xe0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <HAL_TIM_Base_Start_IT+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_TIM_Base_Start_IT+0xe8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d115      	bne.n	8005540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_TIM_Base_Start_IT+0xec>)
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d015      	beq.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d011      	beq.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	e008      	b.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e000      	b.n	8005554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40010400 	.word	0x40010400
 8005578:	40014000 	.word	0x40014000
 800557c:	40001800 	.word	0x40001800
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <HAL_TIM_Base_Stop_IT+0x48>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	f240 4344 	movw	r3, #1092	; 0x444
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_Base_Stop_IT+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d122      	bne.n	800563e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d11b      	bne.n	800563e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0202 	mvn.w	r2, #2
 800560e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa1b 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 800562a:	e005      	b.n	8005638 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa0d 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa1e 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d122      	bne.n	8005692 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d11b      	bne.n	8005692 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0204 	mvn.w	r2, #4
 8005662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f9f1 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 800567e:	e005      	b.n	800568c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9e3 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9f4 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d122      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d11b      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f06f 0208 	mvn.w	r2, #8
 80056b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2204      	movs	r2, #4
 80056bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9c7 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 80056d2:	e005      	b.n	80056e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9b9 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9ca 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d122      	bne.n	800573a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d11b      	bne.n	800573a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0210 	mvn.w	r2, #16
 800570a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2208      	movs	r2, #8
 8005710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f99d 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 8005726:	e005      	b.n	8005734 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f98f 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f9a0 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10e      	bne.n	8005766 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0201 	mvn.w	r2, #1
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f969 	bl	8005a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fbeb 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fbde 	bl	8005f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f94e 	bl	8005a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d10e      	bne.n	8005818 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b20      	cmp	r3, #32
 8005806:	d107      	bne.n	8005818 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0220 	mvn.w	r2, #32
 8005810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fb9e 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIM_ConfigClockSource+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e0b4      	b.n	80059a6 <HAL_TIM_ConfigClockSource+0x186>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4b56      	ldr	r3, [pc, #344]	; (80059b0 <HAL_TIM_ConfigClockSource+0x190>)
 8005858:	4013      	ands	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005874:	d03e      	beq.n	80058f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587a:	f200 8087 	bhi.w	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	f000 8086 	beq.w	8005992 <HAL_TIM_ConfigClockSource+0x172>
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d87f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b70      	cmp	r3, #112	; 0x70
 800588e:	d01a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d87b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b60      	cmp	r3, #96	; 0x60
 8005896:	d050      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x11a>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d877      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b50      	cmp	r3, #80	; 0x50
 800589e:	d03c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xfa>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d873      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d058      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x13a>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d86f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d064      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d86b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d060      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d867      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d05c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d05a      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	e062      	b.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6899      	ldr	r1, [r3, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f000 fa8f 	bl	8005df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
      break;
 80058f2:	e04f      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	6899      	ldr	r1, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f000 fa78 	bl	8005df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e03c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	461a      	mov	r2, r3
 8005928:	f000 f9ec 	bl	8005d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2150      	movs	r1, #80	; 0x50
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa45 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005938:	e02c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fa0b 	bl	8005d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2160      	movs	r1, #96	; 0x60
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fa35 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005958:	e01c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 f9cc 	bl	8005d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2140      	movs	r1, #64	; 0x40
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa25 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005978:	e00c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 fa1c 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 800598a:	e003      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	fffeff88 	.word	0xfffeff88

080059b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e031      	b.n	8005a30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8fc 	bl	8005bdc <TIM_SlaveTimer_SetConfig>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e018      	b.n	8005a30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a40      	ldr	r2, [pc, #256]	; (8005bb0 <TIM_Base_SetConfig+0x114>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d00f      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3d      	ldr	r2, [pc, #244]	; (8005bb4 <TIM_Base_SetConfig+0x118>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <TIM_Base_SetConfig+0x11c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <TIM_Base_SetConfig+0x120>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a3a      	ldr	r2, [pc, #232]	; (8005bc0 <TIM_Base_SetConfig+0x124>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d108      	bne.n	8005aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <TIM_Base_SetConfig+0x114>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d027      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2c      	ldr	r2, [pc, #176]	; (8005bb4 <TIM_Base_SetConfig+0x118>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d023      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2b      	ldr	r2, [pc, #172]	; (8005bb8 <TIM_Base_SetConfig+0x11c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01f      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <TIM_Base_SetConfig+0x120>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <TIM_Base_SetConfig+0x124>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d017      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <TIM_Base_SetConfig+0x128>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <TIM_Base_SetConfig+0x130>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <TIM_Base_SetConfig+0x134>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <TIM_Base_SetConfig+0x138>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a23      	ldr	r2, [pc, #140]	; (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d108      	bne.n	8005b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <TIM_Base_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <TIM_Base_SetConfig+0x124>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	615a      	str	r2, [r3, #20]
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800
 8005bd0:	40001800 	.word	0x40001800
 8005bd4:	40001c00 	.word	0x40001c00
 8005bd8:	40002000 	.word	0x40002000

08005bdc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <TIM_SlaveTimer_SetConfig+0x124>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b70      	cmp	r3, #112	; 0x70
 8005c24:	d01a      	beq.n	8005c5c <TIM_SlaveTimer_SetConfig+0x80>
 8005c26:	2b70      	cmp	r3, #112	; 0x70
 8005c28:	d860      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c2a:	2b60      	cmp	r3, #96	; 0x60
 8005c2c:	d054      	beq.n	8005cd8 <TIM_SlaveTimer_SetConfig+0xfc>
 8005c2e:	2b60      	cmp	r3, #96	; 0x60
 8005c30:	d85c      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c32:	2b50      	cmp	r3, #80	; 0x50
 8005c34:	d046      	beq.n	8005cc4 <TIM_SlaveTimer_SetConfig+0xe8>
 8005c36:	2b50      	cmp	r3, #80	; 0x50
 8005c38:	d858      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d019      	beq.n	8005c72 <TIM_SlaveTimer_SetConfig+0x96>
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d854      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c42:	2b30      	cmp	r3, #48	; 0x30
 8005c44:	d055      	beq.n	8005cf2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c46:	2b30      	cmp	r3, #48	; 0x30
 8005c48:	d850      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d051      	beq.n	8005cf2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d84c      	bhi.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d04d      	beq.n	8005cf2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d04b      	beq.n	8005cf2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c5a:	e047      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68d9      	ldr	r1, [r3, #12]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f000 f8c4 	bl	8005df8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005c70:	e040      	b.n	8005cf4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d101      	bne.n	8005c7e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e03b      	b.n	8005cf6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
      break;
 8005cc2:	e017      	b.n	8005cf4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f000 f817 	bl	8005d04 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005cd6:	e00d      	b.n	8005cf4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f000 f83c 	bl	8005d62 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005cea:	e003      	b.n	8005cf4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf0:	e000      	b.n	8005cf4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005cf2:	bf00      	nop
  }

  return status;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	fffefff8 	.word	0xfffefff8

08005d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 030a 	bic.w	r3, r3, #10
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f043 0307 	orr.w	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e06d      	b.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a30      	ldr	r2, [pc, #192]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d01d      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10c      	bne.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e040      	b.n	8006024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc fd72 	bl	8002a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2224      	movs	r2, #36	; 0x24
 8005fbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fbe8 	bl	80067a4 <UART_SetConfig>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e022      	b.n	8006024 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fe3e 	bl	8006c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800600a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fec5 	bl	8006dac <UART_CheckIdleState>
 8006022:	4603      	mov	r3, r0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800602c:	b480      	push	{r7}
 800602e:	b08b      	sub	sp, #44	; 0x2c
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603e:	2b20      	cmp	r3, #32
 8006040:	d156      	bne.n	80060f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_UART_Transmit_IT+0x22>
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e04f      	b.n	80060f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_UART_Transmit_IT+0x34>
 800605c:	2302      	movs	r3, #2
 800605e:	e048      	b.n	80060f2 <HAL_UART_Transmit_IT+0xc6>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2221      	movs	r2, #33	; 0x21
 8006090:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d107      	bne.n	80060ac <HAL_UART_Transmit_IT+0x80>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_UART_Transmit_IT+0xd4>)
 80060a8:	669a      	str	r2, [r3, #104]	; 0x68
 80060aa:	e002      	b.n	80060b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_UART_Transmit_IT+0xd8>)
 80060b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	372c      	adds	r7, #44	; 0x2c
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	08007305 	.word	0x08007305
 8006104:	0800724f 	.word	0x0800724f

08006108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611a:	2b20      	cmp	r3, #32
 800611c:	d13d      	bne.n	800619a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_UART_Receive_IT+0x22>
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e036      	b.n	800619c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_UART_Receive_IT+0x34>
 8006138:	2302      	movs	r3, #2
 800613a:	e02f      	b.n	800619c <HAL_UART_Receive_IT+0x94>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d018      	beq.n	800618a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	613b      	str	r3, [r7, #16]
   return(result);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	69f9      	ldr	r1, [r7, #28]
 800617c:	6a3a      	ldr	r2, [r7, #32]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	61bb      	str	r3, [r7, #24]
   return(result);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	461a      	mov	r2, r3
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 ff19 	bl	8006fc8 <UART_Start_Receive_IT>
 8006196:	4603      	mov	r3, r0
 8006198:	e000      	b.n	800619c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800619a:	2302      	movs	r3, #2
  }
}
 800619c:	4618      	mov	r0, r3
 800619e:	3728      	adds	r7, #40	; 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b0ba      	sub	sp, #232	; 0xe8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80061d2:	4013      	ands	r3, r2
 80061d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d115      	bne.n	800620c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00f      	beq.n	800620c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 82a4 	beq.w	800674a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
      }
      return;
 800620a:	e29e      	b.n	800674a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800620c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8117 	beq.w	8006444 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006226:	4b85      	ldr	r3, [pc, #532]	; (800643c <HAL_UART_IRQHandler+0x298>)
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 810a 	beq.w	8006444 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d011      	beq.n	8006260 <HAL_UART_IRQHandler+0xbc>
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006256:	f043 0201 	orr.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <HAL_UART_IRQHandler+0xec>
 800626c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2202      	movs	r2, #2
 800627e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d011      	beq.n	80062c0 <HAL_UART_IRQHandler+0x11c>
 800629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2204      	movs	r2, #4
 80062ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b6:	f043 0202 	orr.w	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d017      	beq.n	80062fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d105      	bne.n	80062e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2208      	movs	r2, #8
 80062ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f2:	f043 0208 	orr.w	r2, r3, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <HAL_UART_IRQHandler+0x18a>
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800631c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 820a 	beq.w	800674e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00d      	beq.n	8006362 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800637a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800637e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006382:	2b00      	cmp	r3, #0
 8006384:	d04f      	beq.n	8006426 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fee8 	bl	800715c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d141      	bne.n	800641e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1d9      	bne.n	800639a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d013      	beq.n	8006416 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a13      	ldr	r2, [pc, #76]	; (8006440 <HAL_UART_IRQHandler+0x29c>)
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fcaf 	bl	8003d5e <HAL_DMA_Abort_IT>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	e00f      	b.n	8006436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9a4 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	e00b      	b.n	8006436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9a0 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	e007      	b.n	8006436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f99c 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006434:	e18b      	b.n	800674e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006436:	bf00      	nop
    return;
 8006438:	e189      	b.n	800674e <HAL_UART_IRQHandler+0x5aa>
 800643a:	bf00      	nop
 800643c:	04000120 	.word	0x04000120
 8006440:	08007223 	.word	0x08007223

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 8144 	bne.w	80066d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 813d 	beq.w	80066d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8136 	beq.w	80066d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	f040 80b2 	bne.w	80065e6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800648e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 815d 	beq.w	8006752 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800649e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064a2:	429a      	cmp	r2, r3
 80064a4:	f080 8155 	bcs.w	8006752 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	f000 8085 	beq.w	80065ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1da      	bne.n	80064c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800651a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800652e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e1      	bne.n	800650a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800656a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800656c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e3      	bne.n	8006546 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659a:	f023 0310 	bic.w	r3, r3, #16
 800659e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e4      	bne.n	800658a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fd fb5a 	bl	8003c7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f8ca 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065e4:	e0b5      	b.n	8006752 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80a7 	beq.w	8006756 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a2 	beq.w	8006756 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800663a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e4      	bne.n	8006612 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	623b      	str	r3, [r7, #32]
   return(result);
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800666c:	633a      	str	r2, [r7, #48]	; 0x30
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e3      	bne.n	8006648 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	617b      	str	r3, [r7, #20]
   return(result);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e4      	bne.n	8006692 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f852 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d4:	e03f      	b.n	8006756 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <HAL_UART_IRQHandler+0x55c>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f849 	bl	8006790 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066fe:	e02d      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01c      	beq.n	800675a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
    }
    return;
 8006728:	e017      	b.n	800675a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d012      	beq.n	800675c <HAL_UART_IRQHandler+0x5b8>
 8006736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fe3e 	bl	80073c4 <UART_EndTransmit_IT>
    return;
 8006748:	e008      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
      return;
 800674a:	bf00      	nop
 800674c:	e006      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
    return;
 800674e:	bf00      	nop
 8006750:	e004      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <HAL_UART_IRQHandler+0x5b8>
    return;
 800675a:	bf00      	nop
  }

}
 800675c:	37e8      	adds	r7, #232	; 0xe8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop

08006764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4ba7      	ldr	r3, [pc, #668]	; (8006a6c <UART_SetConfig+0x2c8>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	6979      	ldr	r1, [r7, #20]
 80067d8:	430b      	orrs	r3, r1
 80067da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a95      	ldr	r2, [pc, #596]	; (8006a70 <UART_SetConfig+0x2cc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d120      	bne.n	8006862 <UART_SetConfig+0xbe>
 8006820:	4b94      	ldr	r3, [pc, #592]	; (8006a74 <UART_SetConfig+0x2d0>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d816      	bhi.n	800685c <UART_SetConfig+0xb8>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x90>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006845 	.word	0x08006845
 8006838:	08006851 	.word	0x08006851
 800683c:	0800684b 	.word	0x0800684b
 8006840:	08006857 	.word	0x08006857
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e14f      	b.n	8006aea <UART_SetConfig+0x346>
 800684a:	2302      	movs	r3, #2
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e14c      	b.n	8006aea <UART_SetConfig+0x346>
 8006850:	2304      	movs	r3, #4
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e149      	b.n	8006aea <UART_SetConfig+0x346>
 8006856:	2308      	movs	r3, #8
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e146      	b.n	8006aea <UART_SetConfig+0x346>
 800685c:	2310      	movs	r3, #16
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e143      	b.n	8006aea <UART_SetConfig+0x346>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a84      	ldr	r2, [pc, #528]	; (8006a78 <UART_SetConfig+0x2d4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d132      	bne.n	80068d2 <UART_SetConfig+0x12e>
 800686c:	4b81      	ldr	r3, [pc, #516]	; (8006a74 <UART_SetConfig+0x2d0>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b0c      	cmp	r3, #12
 8006878:	d828      	bhi.n	80068cc <UART_SetConfig+0x128>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0xdc>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068cd 	.word	0x080068cd
 8006888:	080068cd 	.word	0x080068cd
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068c1 	.word	0x080068c1
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080068cd 	.word	0x080068cd
 80068a0:	080068bb 	.word	0x080068bb
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068cd 	.word	0x080068cd
 80068b0:	080068c7 	.word	0x080068c7
 80068b4:	2300      	movs	r3, #0
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e117      	b.n	8006aea <UART_SetConfig+0x346>
 80068ba:	2302      	movs	r3, #2
 80068bc:	77fb      	strb	r3, [r7, #31]
 80068be:	e114      	b.n	8006aea <UART_SetConfig+0x346>
 80068c0:	2304      	movs	r3, #4
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e111      	b.n	8006aea <UART_SetConfig+0x346>
 80068c6:	2308      	movs	r3, #8
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e10e      	b.n	8006aea <UART_SetConfig+0x346>
 80068cc:	2310      	movs	r3, #16
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e10b      	b.n	8006aea <UART_SetConfig+0x346>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a69      	ldr	r2, [pc, #420]	; (8006a7c <UART_SetConfig+0x2d8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d120      	bne.n	800691e <UART_SetConfig+0x17a>
 80068dc:	4b65      	ldr	r3, [pc, #404]	; (8006a74 <UART_SetConfig+0x2d0>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068e6:	2b30      	cmp	r3, #48	; 0x30
 80068e8:	d013      	beq.n	8006912 <UART_SetConfig+0x16e>
 80068ea:	2b30      	cmp	r3, #48	; 0x30
 80068ec:	d814      	bhi.n	8006918 <UART_SetConfig+0x174>
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d009      	beq.n	8006906 <UART_SetConfig+0x162>
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d810      	bhi.n	8006918 <UART_SetConfig+0x174>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <UART_SetConfig+0x15c>
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d006      	beq.n	800690c <UART_SetConfig+0x168>
 80068fe:	e00b      	b.n	8006918 <UART_SetConfig+0x174>
 8006900:	2300      	movs	r3, #0
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e0f1      	b.n	8006aea <UART_SetConfig+0x346>
 8006906:	2302      	movs	r3, #2
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e0ee      	b.n	8006aea <UART_SetConfig+0x346>
 800690c:	2304      	movs	r3, #4
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e0eb      	b.n	8006aea <UART_SetConfig+0x346>
 8006912:	2308      	movs	r3, #8
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e0e8      	b.n	8006aea <UART_SetConfig+0x346>
 8006918:	2310      	movs	r3, #16
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	e0e5      	b.n	8006aea <UART_SetConfig+0x346>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a57      	ldr	r2, [pc, #348]	; (8006a80 <UART_SetConfig+0x2dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d120      	bne.n	800696a <UART_SetConfig+0x1c6>
 8006928:	4b52      	ldr	r3, [pc, #328]	; (8006a74 <UART_SetConfig+0x2d0>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006932:	2bc0      	cmp	r3, #192	; 0xc0
 8006934:	d013      	beq.n	800695e <UART_SetConfig+0x1ba>
 8006936:	2bc0      	cmp	r3, #192	; 0xc0
 8006938:	d814      	bhi.n	8006964 <UART_SetConfig+0x1c0>
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d009      	beq.n	8006952 <UART_SetConfig+0x1ae>
 800693e:	2b80      	cmp	r3, #128	; 0x80
 8006940:	d810      	bhi.n	8006964 <UART_SetConfig+0x1c0>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <UART_SetConfig+0x1a8>
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d006      	beq.n	8006958 <UART_SetConfig+0x1b4>
 800694a:	e00b      	b.n	8006964 <UART_SetConfig+0x1c0>
 800694c:	2300      	movs	r3, #0
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e0cb      	b.n	8006aea <UART_SetConfig+0x346>
 8006952:	2302      	movs	r3, #2
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e0c8      	b.n	8006aea <UART_SetConfig+0x346>
 8006958:	2304      	movs	r3, #4
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e0c5      	b.n	8006aea <UART_SetConfig+0x346>
 800695e:	2308      	movs	r3, #8
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e0c2      	b.n	8006aea <UART_SetConfig+0x346>
 8006964:	2310      	movs	r3, #16
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e0bf      	b.n	8006aea <UART_SetConfig+0x346>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a45      	ldr	r2, [pc, #276]	; (8006a84 <UART_SetConfig+0x2e0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d125      	bne.n	80069c0 <UART_SetConfig+0x21c>
 8006974:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <UART_SetConfig+0x2d0>)
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006982:	d017      	beq.n	80069b4 <UART_SetConfig+0x210>
 8006984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006988:	d817      	bhi.n	80069ba <UART_SetConfig+0x216>
 800698a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698e:	d00b      	beq.n	80069a8 <UART_SetConfig+0x204>
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d811      	bhi.n	80069ba <UART_SetConfig+0x216>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <UART_SetConfig+0x1fe>
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d006      	beq.n	80069ae <UART_SetConfig+0x20a>
 80069a0:	e00b      	b.n	80069ba <UART_SetConfig+0x216>
 80069a2:	2300      	movs	r3, #0
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e0a0      	b.n	8006aea <UART_SetConfig+0x346>
 80069a8:	2302      	movs	r3, #2
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e09d      	b.n	8006aea <UART_SetConfig+0x346>
 80069ae:	2304      	movs	r3, #4
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e09a      	b.n	8006aea <UART_SetConfig+0x346>
 80069b4:	2308      	movs	r3, #8
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e097      	b.n	8006aea <UART_SetConfig+0x346>
 80069ba:	2310      	movs	r3, #16
 80069bc:	77fb      	strb	r3, [r7, #31]
 80069be:	e094      	b.n	8006aea <UART_SetConfig+0x346>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a30      	ldr	r2, [pc, #192]	; (8006a88 <UART_SetConfig+0x2e4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d125      	bne.n	8006a16 <UART_SetConfig+0x272>
 80069ca:	4b2a      	ldr	r3, [pc, #168]	; (8006a74 <UART_SetConfig+0x2d0>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d8:	d017      	beq.n	8006a0a <UART_SetConfig+0x266>
 80069da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069de:	d817      	bhi.n	8006a10 <UART_SetConfig+0x26c>
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e4:	d00b      	beq.n	80069fe <UART_SetConfig+0x25a>
 80069e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ea:	d811      	bhi.n	8006a10 <UART_SetConfig+0x26c>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x254>
 80069f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f4:	d006      	beq.n	8006a04 <UART_SetConfig+0x260>
 80069f6:	e00b      	b.n	8006a10 <UART_SetConfig+0x26c>
 80069f8:	2301      	movs	r3, #1
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e075      	b.n	8006aea <UART_SetConfig+0x346>
 80069fe:	2302      	movs	r3, #2
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e072      	b.n	8006aea <UART_SetConfig+0x346>
 8006a04:	2304      	movs	r3, #4
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e06f      	b.n	8006aea <UART_SetConfig+0x346>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e06c      	b.n	8006aea <UART_SetConfig+0x346>
 8006a10:	2310      	movs	r3, #16
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e069      	b.n	8006aea <UART_SetConfig+0x346>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <UART_SetConfig+0x2e8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d137      	bne.n	8006a90 <UART_SetConfig+0x2ec>
 8006a20:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <UART_SetConfig+0x2d0>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2e:	d017      	beq.n	8006a60 <UART_SetConfig+0x2bc>
 8006a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a34:	d817      	bhi.n	8006a66 <UART_SetConfig+0x2c2>
 8006a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3a:	d00b      	beq.n	8006a54 <UART_SetConfig+0x2b0>
 8006a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a40:	d811      	bhi.n	8006a66 <UART_SetConfig+0x2c2>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <UART_SetConfig+0x2aa>
 8006a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4a:	d006      	beq.n	8006a5a <UART_SetConfig+0x2b6>
 8006a4c:	e00b      	b.n	8006a66 <UART_SetConfig+0x2c2>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e04a      	b.n	8006aea <UART_SetConfig+0x346>
 8006a54:	2302      	movs	r3, #2
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e047      	b.n	8006aea <UART_SetConfig+0x346>
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e044      	b.n	8006aea <UART_SetConfig+0x346>
 8006a60:	2308      	movs	r3, #8
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e041      	b.n	8006aea <UART_SetConfig+0x346>
 8006a66:	2310      	movs	r3, #16
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e03e      	b.n	8006aea <UART_SetConfig+0x346>
 8006a6c:	efff69f3 	.word	0xefff69f3
 8006a70:	40011000 	.word	0x40011000
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	40004800 	.word	0x40004800
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	40005000 	.word	0x40005000
 8006a88:	40011400 	.word	0x40011400
 8006a8c:	40007800 	.word	0x40007800
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a71      	ldr	r2, [pc, #452]	; (8006c5c <UART_SetConfig+0x4b8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d125      	bne.n	8006ae6 <UART_SetConfig+0x342>
 8006a9a:	4b71      	ldr	r3, [pc, #452]	; (8006c60 <UART_SetConfig+0x4bc>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006aa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aa8:	d017      	beq.n	8006ada <UART_SetConfig+0x336>
 8006aaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aae:	d817      	bhi.n	8006ae0 <UART_SetConfig+0x33c>
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d00b      	beq.n	8006ace <UART_SetConfig+0x32a>
 8006ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aba:	d811      	bhi.n	8006ae0 <UART_SetConfig+0x33c>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <UART_SetConfig+0x324>
 8006ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac4:	d006      	beq.n	8006ad4 <UART_SetConfig+0x330>
 8006ac6:	e00b      	b.n	8006ae0 <UART_SetConfig+0x33c>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e00d      	b.n	8006aea <UART_SetConfig+0x346>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e00a      	b.n	8006aea <UART_SetConfig+0x346>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e007      	b.n	8006aea <UART_SetConfig+0x346>
 8006ada:	2308      	movs	r3, #8
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e004      	b.n	8006aea <UART_SetConfig+0x346>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e001      	b.n	8006aea <UART_SetConfig+0x346>
 8006ae6:	2310      	movs	r3, #16
 8006ae8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	d15a      	bne.n	8006baa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006af4:	7ffb      	ldrb	r3, [r7, #31]
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d827      	bhi.n	8006b4a <UART_SetConfig+0x3a6>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x35c>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fe f80e 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006b28:	61b8      	str	r0, [r7, #24]
        break;
 8006b2a:	e013      	b.n	8006b54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fe f81e 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8006b30:	61b8      	str	r0, [r7, #24]
        break;
 8006b32:	e00f      	b.n	8006b54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b4b      	ldr	r3, [pc, #300]	; (8006c64 <UART_SetConfig+0x4c0>)
 8006b36:	61bb      	str	r3, [r7, #24]
        break;
 8006b38:	e00c      	b.n	8006b54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fd ff15 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8006b3e:	61b8      	str	r0, [r7, #24]
        break;
 8006b40:	e008      	b.n	8006b54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61bb      	str	r3, [r7, #24]
        break;
 8006b48:	e004      	b.n	8006b54 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	77bb      	strb	r3, [r7, #30]
        break;
 8006b52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d074      	beq.n	8006c44 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d916      	bls.n	8006ba4 <UART_SetConfig+0x400>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d212      	bcs.n	8006ba4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f023 030f 	bic.w	r3, r3, #15
 8006b86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	89fa      	ldrh	r2, [r7, #14]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	e04f      	b.n	8006c44 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	77bb      	strb	r3, [r7, #30]
 8006ba8:	e04c      	b.n	8006c44 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d828      	bhi.n	8006c02 <UART_SetConfig+0x45e>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x414>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006c03 	.word	0x08006c03
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fd ffb2 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006be0:	61b8      	str	r0, [r7, #24]
        break;
 8006be2:	e013      	b.n	8006c0c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fd ffc2 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8006be8:	61b8      	str	r0, [r7, #24]
        break;
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <UART_SetConfig+0x4c0>)
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e00c      	b.n	8006c0c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd feb9 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8006bf6:	61b8      	str	r0, [r7, #24]
        break;
 8006bf8:	e008      	b.n	8006c0c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e004      	b.n	8006c0c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77bb      	strb	r3, [r7, #30]
        break;
 8006c0a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d018      	beq.n	8006c44 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085a      	lsrs	r2, r3, #1
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	d909      	bls.n	8006c40 <UART_SetConfig+0x49c>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d205      	bcs.n	8006c40 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	e001      	b.n	8006c44 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c50:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40007c00 	.word	0x40007c00
 8006c60:	40023800 	.word	0x40023800
 8006c64:	00f42400 	.word	0x00f42400

08006c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01a      	beq.n	8006d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d10a      	bne.n	8006d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dbc:	f7fc f850 	bl	8002e60 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10e      	bne.n	8006dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f82d 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e023      	b.n	8006e36 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d10e      	bne.n	8006e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f817 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e00d      	b.n	8006e36 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b09c      	sub	sp, #112	; 0x70
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	e0a5      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	f000 80a1 	beq.w	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5a:	f7fc f801 	bl	8002e60 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d302      	bcc.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d13e      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e84:	667b      	str	r3, [r7, #100]	; 0x64
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e067      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d04f      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0a:	d147      	bne.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
 8006f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e6      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	613b      	str	r3, [r7, #16]
   return(result);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f68:	623a      	str	r2, [r7, #32]
 8006f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	69f9      	ldr	r1, [r7, #28]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e010      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	f43f af4a 	beq.w	8006e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3770      	adds	r7, #112	; 0x70
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b097      	sub	sp, #92	; 0x5c
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d10e      	bne.n	800701a <UART_Start_Receive_IT+0x52>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <UART_Start_Receive_IT+0x48>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f240 12ff 	movw	r2, #511	; 0x1ff
 800700a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800700e:	e02d      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	22ff      	movs	r2, #255	; 0xff
 8007014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007018:	e028      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10d      	bne.n	800703e <UART_Start_Receive_IT+0x76>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <UART_Start_Receive_IT+0x6c>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007032:	e01b      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	227f      	movs	r2, #127	; 0x7f
 8007038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800703c:	e016      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007046:	d10d      	bne.n	8007064 <UART_Start_Receive_IT+0x9c>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <UART_Start_Receive_IT+0x92>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	227f      	movs	r2, #127	; 0x7f
 8007054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007058:	e008      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	223f      	movs	r2, #63	; 0x3f
 800705e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007062:	e003      	b.n	800706c <UART_Start_Receive_IT+0xa4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2222      	movs	r2, #34	; 0x22
 8007078:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	657b      	str	r3, [r7, #84]	; 0x54
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800709a:	64ba      	str	r2, [r7, #72]	; 0x48
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b6:	d107      	bne.n	80070c8 <UART_Start_Receive_IT+0x100>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a24      	ldr	r2, [pc, #144]	; (8007154 <UART_Start_Receive_IT+0x18c>)
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64
 80070c6:	e002      	b.n	80070ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4a23      	ldr	r2, [pc, #140]	; (8007158 <UART_Start_Receive_IT+0x190>)
 80070cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d019      	beq.n	8007112 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
 80070fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_Start_Receive_IT+0x116>
 8007110:	e018      	b.n	8007144 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f043 0320 	orr.w	r3, r3, #32
 8007126:	653b      	str	r3, [r7, #80]	; 0x50
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	69f9      	ldr	r1, [r7, #28]
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	61bb      	str	r3, [r7, #24]
   return(result);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e6      	bne.n	8007112 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	375c      	adds	r7, #92	; 0x5c
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	08007575 	.word	0x08007575
 8007158:	08007419 	.word	0x08007419

0800715c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b095      	sub	sp, #84	; 0x54
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007182:	643b      	str	r3, [r7, #64]	; 0x40
 8007184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e6      	bne.n	8007164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d118      	bne.n	8007204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	647b      	str	r3, [r7, #68]	; 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6979      	ldr	r1, [r7, #20]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	613b      	str	r3, [r7, #16]
   return(result);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007216:	bf00      	nop
 8007218:	3754      	adds	r7, #84	; 0x54
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fa8f 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800724e:	b480      	push	{r7}
 8007250:	b08f      	sub	sp, #60	; 0x3c
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800725a:	2b21      	cmp	r3, #33	; 0x21
 800725c:	d14c      	bne.n	80072f8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d132      	bne.n	80072d0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	61fb      	str	r3, [r7, #28]
   return(result);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727e:	637b      	str	r3, [r7, #52]	; 0x34
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800728a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6979      	ldr	r1, [r7, #20]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	613b      	str	r3, [r7, #16]
   return(result);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80072ce:	e013      	b.n	80072f8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072f8:	bf00      	nop
 80072fa:	373c      	adds	r7, #60	; 0x3c
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b091      	sub	sp, #68	; 0x44
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007310:	2b21      	cmp	r3, #33	; 0x21
 8007312:	d151      	bne.n	80073b8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d132      	bne.n	8007386 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	623b      	str	r3, [r7, #32]
   return(result);
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007334:	63bb      	str	r3, [r7, #56]	; 0x38
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
 8007340:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e6      	bne.n	8007320 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	69b9      	ldr	r1, [r7, #24]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	617b      	str	r3, [r7, #20]
   return(result);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007384:	e018      	b.n	80073b8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800738c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073b8:	bf00      	nop
 80073ba:	3744      	adds	r7, #68	; 0x44
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	613b      	str	r3, [r7, #16]
   return(result);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e6      	bne.n	80073cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb fc74 	bl	8002cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007410:	bf00      	nop
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b096      	sub	sp, #88	; 0x58
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007426:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	2b22      	cmp	r3, #34	; 0x22
 8007430:	f040 8094 	bne.w	800755c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800743e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007442:	b2d9      	uxtb	r1, r3
 8007444:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	400a      	ands	r2, r1
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d177      	bne.n	800756c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007490:	653b      	str	r3, [r7, #80]	; 0x50
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
 800749c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e6      	bne.n	800747c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3308      	adds	r3, #8
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	623b      	str	r3, [r7, #32]
   return(result);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3308      	adds	r3, #8
 80074cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ce:	633a      	str	r2, [r7, #48]	; 0x30
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d12e      	bne.n	8007554 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	60fb      	str	r3, [r7, #12]
   return(result);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f023 0310 	bic.w	r3, r3, #16
 8007510:	64bb      	str	r3, [r7, #72]	; 0x48
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	69b9      	ldr	r1, [r7, #24]
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	617b      	str	r3, [r7, #20]
   return(result);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e6      	bne.n	80074fc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b10      	cmp	r3, #16
 800753a:	d103      	bne.n	8007544 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2210      	movs	r2, #16
 8007542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff f913 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007552:	e00b      	b.n	800756c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fb fb73 	bl	8002c40 <HAL_UART_RxCpltCallback>
}
 800755a:	e007      	b.n	800756c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0208 	orr.w	r2, r2, #8
 800756a:	619a      	str	r2, [r3, #24]
}
 800756c:	bf00      	nop
 800756e:	3758      	adds	r7, #88	; 0x58
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b096      	sub	sp, #88	; 0x58
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007582:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800758a:	2b22      	cmp	r3, #34	; 0x22
 800758c:	f040 8094 	bne.w	80076b8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075a8:	4013      	ands	r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	1c9a      	adds	r2, r3, #2
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d177      	bne.n	80076c8 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f6:	643b      	str	r3, [r7, #64]	; 0x40
 80075f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e6      	bne.n	80075d8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	61fb      	str	r3, [r7, #28]
   return(result);
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	64bb      	str	r3, [r7, #72]	; 0x48
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764e:	2b01      	cmp	r3, #1
 8007650:	d12e      	bne.n	80076b0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	60bb      	str	r3, [r7, #8]
   return(result);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6979      	ldr	r1, [r7, #20]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	613b      	str	r3, [r7, #16]
   return(result);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e6      	bne.n	8007658 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b10      	cmp	r3, #16
 8007696:	d103      	bne.n	80076a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2210      	movs	r2, #16
 800769e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff f865 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ae:	e00b      	b.n	80076c8 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fb fac5 	bl	8002c40 <HAL_UART_RxCpltCallback>
}
 80076b6:	e007      	b.n	80076c8 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	619a      	str	r2, [r3, #24]
}
 80076c8:	bf00      	nop
 80076ca:	3758      	adds	r7, #88	; 0x58
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <__errno>:
 80076d0:	4b01      	ldr	r3, [pc, #4]	; (80076d8 <__errno+0x8>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20000098 	.word	0x20000098

080076dc <__libc_init_array>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4d0d      	ldr	r5, [pc, #52]	; (8007714 <__libc_init_array+0x38>)
 80076e0:	4c0d      	ldr	r4, [pc, #52]	; (8007718 <__libc_init_array+0x3c>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	2600      	movs	r6, #0
 80076e8:	42a6      	cmp	r6, r4
 80076ea:	d109      	bne.n	8007700 <__libc_init_array+0x24>
 80076ec:	4d0b      	ldr	r5, [pc, #44]	; (800771c <__libc_init_array+0x40>)
 80076ee:	4c0c      	ldr	r4, [pc, #48]	; (8007720 <__libc_init_array+0x44>)
 80076f0:	f005 f838 	bl	800c764 <_init>
 80076f4:	1b64      	subs	r4, r4, r5
 80076f6:	10a4      	asrs	r4, r4, #2
 80076f8:	2600      	movs	r6, #0
 80076fa:	42a6      	cmp	r6, r4
 80076fc:	d105      	bne.n	800770a <__libc_init_array+0x2e>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	f855 3b04 	ldr.w	r3, [r5], #4
 8007704:	4798      	blx	r3
 8007706:	3601      	adds	r6, #1
 8007708:	e7ee      	b.n	80076e8 <__libc_init_array+0xc>
 800770a:	f855 3b04 	ldr.w	r3, [r5], #4
 800770e:	4798      	blx	r3
 8007710:	3601      	adds	r6, #1
 8007712:	e7f2      	b.n	80076fa <__libc_init_array+0x1e>
 8007714:	0800d60c 	.word	0x0800d60c
 8007718:	0800d60c 	.word	0x0800d60c
 800771c:	0800d60c 	.word	0x0800d60c
 8007720:	0800d610 	.word	0x0800d610

08007724 <__itoa>:
 8007724:	1e93      	subs	r3, r2, #2
 8007726:	2b22      	cmp	r3, #34	; 0x22
 8007728:	b510      	push	{r4, lr}
 800772a:	460c      	mov	r4, r1
 800772c:	d904      	bls.n	8007738 <__itoa+0x14>
 800772e:	2300      	movs	r3, #0
 8007730:	700b      	strb	r3, [r1, #0]
 8007732:	461c      	mov	r4, r3
 8007734:	4620      	mov	r0, r4
 8007736:	bd10      	pop	{r4, pc}
 8007738:	2a0a      	cmp	r2, #10
 800773a:	d109      	bne.n	8007750 <__itoa+0x2c>
 800773c:	2800      	cmp	r0, #0
 800773e:	da07      	bge.n	8007750 <__itoa+0x2c>
 8007740:	232d      	movs	r3, #45	; 0x2d
 8007742:	700b      	strb	r3, [r1, #0]
 8007744:	4240      	negs	r0, r0
 8007746:	2101      	movs	r1, #1
 8007748:	4421      	add	r1, r4
 800774a:	f001 fda3 	bl	8009294 <__utoa>
 800774e:	e7f1      	b.n	8007734 <__itoa+0x10>
 8007750:	2100      	movs	r1, #0
 8007752:	e7f9      	b.n	8007748 <__itoa+0x24>

08007754 <itoa>:
 8007754:	f7ff bfe6 	b.w	8007724 <__itoa>

08007758 <memset>:
 8007758:	4402      	add	r2, r0
 800775a:	4603      	mov	r3, r0
 800775c:	4293      	cmp	r3, r2
 800775e:	d100      	bne.n	8007762 <memset+0xa>
 8007760:	4770      	bx	lr
 8007762:	f803 1b01 	strb.w	r1, [r3], #1
 8007766:	e7f9      	b.n	800775c <memset+0x4>

08007768 <__cvt>:
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	ed2d 8b02 	vpush	{d8}
 800776e:	eeb0 8b40 	vmov.f64	d8, d0
 8007772:	b085      	sub	sp, #20
 8007774:	4617      	mov	r7, r2
 8007776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007778:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800777a:	ee18 2a90 	vmov	r2, s17
 800777e:	f025 0520 	bic.w	r5, r5, #32
 8007782:	2a00      	cmp	r2, #0
 8007784:	bfb6      	itet	lt
 8007786:	222d      	movlt	r2, #45	; 0x2d
 8007788:	2200      	movge	r2, #0
 800778a:	eeb1 8b40 	vneglt.f64	d8, d0
 800778e:	2d46      	cmp	r5, #70	; 0x46
 8007790:	460c      	mov	r4, r1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	d004      	beq.n	80077a0 <__cvt+0x38>
 8007796:	2d45      	cmp	r5, #69	; 0x45
 8007798:	d100      	bne.n	800779c <__cvt+0x34>
 800779a:	3401      	adds	r4, #1
 800779c:	2102      	movs	r1, #2
 800779e:	e000      	b.n	80077a2 <__cvt+0x3a>
 80077a0:	2103      	movs	r1, #3
 80077a2:	ab03      	add	r3, sp, #12
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	ab02      	add	r3, sp, #8
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4622      	mov	r2, r4
 80077ac:	4633      	mov	r3, r6
 80077ae:	eeb0 0b48 	vmov.f64	d0, d8
 80077b2:	f001 fe61 	bl	8009478 <_dtoa_r>
 80077b6:	2d47      	cmp	r5, #71	; 0x47
 80077b8:	d109      	bne.n	80077ce <__cvt+0x66>
 80077ba:	07fb      	lsls	r3, r7, #31
 80077bc:	d407      	bmi.n	80077ce <__cvt+0x66>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077c2:	1a1b      	subs	r3, r3, r0
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	b005      	add	sp, #20
 80077c8:	ecbd 8b02 	vpop	{d8}
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ce:	2d46      	cmp	r5, #70	; 0x46
 80077d0:	eb00 0204 	add.w	r2, r0, r4
 80077d4:	d10c      	bne.n	80077f0 <__cvt+0x88>
 80077d6:	7803      	ldrb	r3, [r0, #0]
 80077d8:	2b30      	cmp	r3, #48	; 0x30
 80077da:	d107      	bne.n	80077ec <__cvt+0x84>
 80077dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	bf1c      	itt	ne
 80077e6:	f1c4 0401 	rsbne	r4, r4, #1
 80077ea:	6034      	strne	r4, [r6, #0]
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	441a      	add	r2, r3
 80077f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	bf08      	it	eq
 80077fa:	9203      	streq	r2, [sp, #12]
 80077fc:	2130      	movs	r1, #48	; 0x30
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	4293      	cmp	r3, r2
 8007802:	d2dc      	bcs.n	80077be <__cvt+0x56>
 8007804:	1c5c      	adds	r4, r3, #1
 8007806:	9403      	str	r4, [sp, #12]
 8007808:	7019      	strb	r1, [r3, #0]
 800780a:	e7f8      	b.n	80077fe <__cvt+0x96>

0800780c <__exponent>:
 800780c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800780e:	4603      	mov	r3, r0
 8007810:	2900      	cmp	r1, #0
 8007812:	bfb8      	it	lt
 8007814:	4249      	neglt	r1, r1
 8007816:	f803 2b02 	strb.w	r2, [r3], #2
 800781a:	bfb4      	ite	lt
 800781c:	222d      	movlt	r2, #45	; 0x2d
 800781e:	222b      	movge	r2, #43	; 0x2b
 8007820:	2909      	cmp	r1, #9
 8007822:	7042      	strb	r2, [r0, #1]
 8007824:	dd2a      	ble.n	800787c <__exponent+0x70>
 8007826:	f10d 0407 	add.w	r4, sp, #7
 800782a:	46a4      	mov	ip, r4
 800782c:	270a      	movs	r7, #10
 800782e:	46a6      	mov	lr, r4
 8007830:	460a      	mov	r2, r1
 8007832:	fb91 f6f7 	sdiv	r6, r1, r7
 8007836:	fb07 1516 	mls	r5, r7, r6, r1
 800783a:	3530      	adds	r5, #48	; 0x30
 800783c:	2a63      	cmp	r2, #99	; 0x63
 800783e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007846:	4631      	mov	r1, r6
 8007848:	dcf1      	bgt.n	800782e <__exponent+0x22>
 800784a:	3130      	adds	r1, #48	; 0x30
 800784c:	f1ae 0502 	sub.w	r5, lr, #2
 8007850:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007854:	1c44      	adds	r4, r0, #1
 8007856:	4629      	mov	r1, r5
 8007858:	4561      	cmp	r1, ip
 800785a:	d30a      	bcc.n	8007872 <__exponent+0x66>
 800785c:	f10d 0209 	add.w	r2, sp, #9
 8007860:	eba2 020e 	sub.w	r2, r2, lr
 8007864:	4565      	cmp	r5, ip
 8007866:	bf88      	it	hi
 8007868:	2200      	movhi	r2, #0
 800786a:	4413      	add	r3, r2
 800786c:	1a18      	subs	r0, r3, r0
 800786e:	b003      	add	sp, #12
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007876:	f804 2f01 	strb.w	r2, [r4, #1]!
 800787a:	e7ed      	b.n	8007858 <__exponent+0x4c>
 800787c:	2330      	movs	r3, #48	; 0x30
 800787e:	3130      	adds	r1, #48	; 0x30
 8007880:	7083      	strb	r3, [r0, #2]
 8007882:	70c1      	strb	r1, [r0, #3]
 8007884:	1d03      	adds	r3, r0, #4
 8007886:	e7f1      	b.n	800786c <__exponent+0x60>

08007888 <_printf_float>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	b08b      	sub	sp, #44	; 0x2c
 800788e:	460c      	mov	r4, r1
 8007890:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007894:	4616      	mov	r6, r2
 8007896:	461f      	mov	r7, r3
 8007898:	4605      	mov	r5, r0
 800789a:	f002 fedf 	bl	800a65c <_localeconv_r>
 800789e:	f8d0 b000 	ldr.w	fp, [r0]
 80078a2:	4658      	mov	r0, fp
 80078a4:	f7f8 fcd6 	bl	8000254 <strlen>
 80078a8:	2300      	movs	r3, #0
 80078aa:	9308      	str	r3, [sp, #32]
 80078ac:	f8d8 3000 	ldr.w	r3, [r8]
 80078b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	f103 0108 	add.w	r1, r3, #8
 80078c0:	f8c8 1000 	str.w	r1, [r8]
 80078c4:	4682      	mov	sl, r0
 80078c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80078ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007b30 <_printf_float+0x2a8>
 80078d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80078d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80078da:	eeb4 6b47 	vcmp.f64	d6, d7
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	dd24      	ble.n	800792e <_printf_float+0xa6>
 80078e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80078e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ec:	d502      	bpl.n	80078f4 <_printf_float+0x6c>
 80078ee:	232d      	movs	r3, #45	; 0x2d
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f4:	4b90      	ldr	r3, [pc, #576]	; (8007b38 <_printf_float+0x2b0>)
 80078f6:	4891      	ldr	r0, [pc, #580]	; (8007b3c <_printf_float+0x2b4>)
 80078f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80078fc:	bf94      	ite	ls
 80078fe:	4698      	movls	r8, r3
 8007900:	4680      	movhi	r8, r0
 8007902:	2303      	movs	r3, #3
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	f022 0204 	bic.w	r2, r2, #4
 800790a:	2300      	movs	r3, #0
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	9700      	str	r7, [sp, #0]
 8007912:	4633      	mov	r3, r6
 8007914:	aa09      	add	r2, sp, #36	; 0x24
 8007916:	4621      	mov	r1, r4
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f9d3 	bl	8007cc4 <_printf_common>
 800791e:	3001      	adds	r0, #1
 8007920:	f040 808a 	bne.w	8007a38 <_printf_float+0x1b0>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	b00b      	add	sp, #44	; 0x2c
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007936:	d709      	bvc.n	800794c <_printf_float+0xc4>
 8007938:	ee10 3a90 	vmov	r3, s1
 800793c:	2b00      	cmp	r3, #0
 800793e:	bfbc      	itt	lt
 8007940:	232d      	movlt	r3, #45	; 0x2d
 8007942:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007946:	487e      	ldr	r0, [pc, #504]	; (8007b40 <_printf_float+0x2b8>)
 8007948:	4b7e      	ldr	r3, [pc, #504]	; (8007b44 <_printf_float+0x2bc>)
 800794a:	e7d5      	b.n	80078f8 <_printf_float+0x70>
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007952:	9104      	str	r1, [sp, #16]
 8007954:	1c59      	adds	r1, r3, #1
 8007956:	d13c      	bne.n	80079d2 <_printf_float+0x14a>
 8007958:	2306      	movs	r3, #6
 800795a:	6063      	str	r3, [r4, #4]
 800795c:	2300      	movs	r3, #0
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	ab08      	add	r3, sp, #32
 8007962:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800796a:	ab07      	add	r3, sp, #28
 800796c:	6861      	ldr	r1, [r4, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	f10d 031b 	add.w	r3, sp, #27
 8007976:	4628      	mov	r0, r5
 8007978:	f7ff fef6 	bl	8007768 <__cvt>
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	9907      	ldr	r1, [sp, #28]
 8007980:	2b47      	cmp	r3, #71	; 0x47
 8007982:	4680      	mov	r8, r0
 8007984:	d108      	bne.n	8007998 <_printf_float+0x110>
 8007986:	1cc8      	adds	r0, r1, #3
 8007988:	db02      	blt.n	8007990 <_printf_float+0x108>
 800798a:	6863      	ldr	r3, [r4, #4]
 800798c:	4299      	cmp	r1, r3
 800798e:	dd41      	ble.n	8007a14 <_printf_float+0x18c>
 8007990:	f1a9 0902 	sub.w	r9, r9, #2
 8007994:	fa5f f989 	uxtb.w	r9, r9
 8007998:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800799c:	d820      	bhi.n	80079e0 <_printf_float+0x158>
 800799e:	3901      	subs	r1, #1
 80079a0:	464a      	mov	r2, r9
 80079a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079a6:	9107      	str	r1, [sp, #28]
 80079a8:	f7ff ff30 	bl	800780c <__exponent>
 80079ac:	9a08      	ldr	r2, [sp, #32]
 80079ae:	9004      	str	r0, [sp, #16]
 80079b0:	1813      	adds	r3, r2, r0
 80079b2:	2a01      	cmp	r2, #1
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	dc02      	bgt.n	80079be <_printf_float+0x136>
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	07d2      	lsls	r2, r2, #31
 80079bc:	d501      	bpl.n	80079c2 <_printf_float+0x13a>
 80079be:	3301      	adds	r3, #1
 80079c0:	6123      	str	r3, [r4, #16]
 80079c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0a2      	beq.n	8007910 <_printf_float+0x88>
 80079ca:	232d      	movs	r3, #45	; 0x2d
 80079cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d0:	e79e      	b.n	8007910 <_printf_float+0x88>
 80079d2:	9904      	ldr	r1, [sp, #16]
 80079d4:	2947      	cmp	r1, #71	; 0x47
 80079d6:	d1c1      	bne.n	800795c <_printf_float+0xd4>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1bf      	bne.n	800795c <_printf_float+0xd4>
 80079dc:	2301      	movs	r3, #1
 80079de:	e7bc      	b.n	800795a <_printf_float+0xd2>
 80079e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80079e4:	d118      	bne.n	8007a18 <_printf_float+0x190>
 80079e6:	2900      	cmp	r1, #0
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	dd0b      	ble.n	8007a04 <_printf_float+0x17c>
 80079ec:	6121      	str	r1, [r4, #16]
 80079ee:	b913      	cbnz	r3, 80079f6 <_printf_float+0x16e>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	07d0      	lsls	r0, r2, #31
 80079f4:	d502      	bpl.n	80079fc <_printf_float+0x174>
 80079f6:	3301      	adds	r3, #1
 80079f8:	440b      	add	r3, r1
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	2300      	movs	r3, #0
 80079fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	e7de      	b.n	80079c2 <_printf_float+0x13a>
 8007a04:	b913      	cbnz	r3, 8007a0c <_printf_float+0x184>
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	07d2      	lsls	r2, r2, #31
 8007a0a:	d501      	bpl.n	8007a10 <_printf_float+0x188>
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	e7f4      	b.n	80079fa <_printf_float+0x172>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e7f2      	b.n	80079fa <_printf_float+0x172>
 8007a14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a18:	9b08      	ldr	r3, [sp, #32]
 8007a1a:	4299      	cmp	r1, r3
 8007a1c:	db05      	blt.n	8007a2a <_printf_float+0x1a2>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	6121      	str	r1, [r4, #16]
 8007a22:	07d8      	lsls	r0, r3, #31
 8007a24:	d5ea      	bpl.n	80079fc <_printf_float+0x174>
 8007a26:	1c4b      	adds	r3, r1, #1
 8007a28:	e7e7      	b.n	80079fa <_printf_float+0x172>
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	bfd4      	ite	le
 8007a2e:	f1c1 0202 	rsble	r2, r1, #2
 8007a32:	2201      	movgt	r2, #1
 8007a34:	4413      	add	r3, r2
 8007a36:	e7e0      	b.n	80079fa <_printf_float+0x172>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	055a      	lsls	r2, r3, #21
 8007a3c:	d407      	bmi.n	8007a4e <_printf_float+0x1c6>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	4642      	mov	r2, r8
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d12a      	bne.n	8007aa2 <_printf_float+0x21a>
 8007a4c:	e76a      	b.n	8007924 <_printf_float+0x9c>
 8007a4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a52:	f240 80e2 	bls.w	8007c1a <_printf_float+0x392>
 8007a56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	d133      	bne.n	8007acc <_printf_float+0x244>
 8007a64:	4a38      	ldr	r2, [pc, #224]	; (8007b48 <_printf_float+0x2c0>)
 8007a66:	2301      	movs	r3, #1
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af58 	beq.w	8007924 <_printf_float+0x9c>
 8007a74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	db02      	blt.n	8007a82 <_printf_float+0x1fa>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07d8      	lsls	r0, r3, #31
 8007a80:	d50f      	bpl.n	8007aa2 <_printf_float+0x21a>
 8007a82:	4653      	mov	r3, sl
 8007a84:	465a      	mov	r2, fp
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	f43f af49 	beq.w	8007924 <_printf_float+0x9c>
 8007a92:	f04f 0800 	mov.w	r8, #0
 8007a96:	f104 091a 	add.w	r9, r4, #26
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	dc09      	bgt.n	8007ab6 <_printf_float+0x22e>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	079b      	lsls	r3, r3, #30
 8007aa6:	f100 8108 	bmi.w	8007cba <_printf_float+0x432>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	bfb8      	it	lt
 8007ab2:	4618      	movlt	r0, r3
 8007ab4:	e738      	b.n	8007928 <_printf_float+0xa0>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	464a      	mov	r2, r9
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f af2f 	beq.w	8007924 <_printf_float+0x9c>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	e7e6      	b.n	8007a9a <_printf_float+0x212>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dc3c      	bgt.n	8007b4c <_printf_float+0x2c4>
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <_printf_float+0x2c0>)
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f af21 	beq.w	8007924 <_printf_float+0x9c>
 8007ae2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	d102      	bne.n	8007af0 <_printf_float+0x268>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	d5d8      	bpl.n	8007aa2 <_printf_float+0x21a>
 8007af0:	4653      	mov	r3, sl
 8007af2:	465a      	mov	r2, fp
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af12 	beq.w	8007924 <_printf_float+0x9c>
 8007b00:	f04f 0900 	mov.w	r9, #0
 8007b04:	f104 0a1a 	add.w	sl, r4, #26
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	425b      	negs	r3, r3
 8007b0c:	454b      	cmp	r3, r9
 8007b0e:	dc01      	bgt.n	8007b14 <_printf_float+0x28c>
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	e795      	b.n	8007a40 <_printf_float+0x1b8>
 8007b14:	2301      	movs	r3, #1
 8007b16:	4652      	mov	r2, sl
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b8      	blx	r7
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f43f af00 	beq.w	8007924 <_printf_float+0x9c>
 8007b24:	f109 0901 	add.w	r9, r9, #1
 8007b28:	e7ee      	b.n	8007b08 <_printf_float+0x280>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	ffffffff 	.word	0xffffffff
 8007b34:	7fefffff 	.word	0x7fefffff
 8007b38:	0800d11c 	.word	0x0800d11c
 8007b3c:	0800d120 	.word	0x0800d120
 8007b40:	0800d128 	.word	0x0800d128
 8007b44:	0800d124 	.word	0x0800d124
 8007b48:	0800d551 	.word	0x0800d551
 8007b4c:	9a08      	ldr	r2, [sp, #32]
 8007b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b50:	429a      	cmp	r2, r3
 8007b52:	bfa8      	it	ge
 8007b54:	461a      	movge	r2, r3
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	4691      	mov	r9, r2
 8007b5a:	dc38      	bgt.n	8007bce <_printf_float+0x346>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b64:	f104 021a 	add.w	r2, r4, #26
 8007b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b6a:	9905      	ldr	r1, [sp, #20]
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	eba3 0309 	sub.w	r3, r3, r9
 8007b72:	428b      	cmp	r3, r1
 8007b74:	dc33      	bgt.n	8007bde <_printf_float+0x356>
 8007b76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	db3c      	blt.n	8007bf8 <_printf_float+0x370>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	07da      	lsls	r2, r3, #31
 8007b82:	d439      	bmi.n	8007bf8 <_printf_float+0x370>
 8007b84:	9a08      	ldr	r2, [sp, #32]
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	9907      	ldr	r1, [sp, #28]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	eba2 0901 	sub.w	r9, r2, r1
 8007b90:	4599      	cmp	r9, r3
 8007b92:	bfa8      	it	ge
 8007b94:	4699      	movge	r9, r3
 8007b96:	f1b9 0f00 	cmp.w	r9, #0
 8007b9a:	dc35      	bgt.n	8007c08 <_printf_float+0x380>
 8007b9c:	f04f 0800 	mov.w	r8, #0
 8007ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ba4:	f104 0a1a 	add.w	sl, r4, #26
 8007ba8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	eba3 0309 	sub.w	r3, r3, r9
 8007bb2:	4543      	cmp	r3, r8
 8007bb4:	f77f af75 	ble.w	8007aa2 <_printf_float+0x21a>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4652      	mov	r2, sl
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	f43f aeae 	beq.w	8007924 <_printf_float+0x9c>
 8007bc8:	f108 0801 	add.w	r8, r8, #1
 8007bcc:	e7ec      	b.n	8007ba8 <_printf_float+0x320>
 8007bce:	4613      	mov	r3, r2
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4642      	mov	r2, r8
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d1bf      	bne.n	8007b5c <_printf_float+0x2d4>
 8007bdc:	e6a2      	b.n	8007924 <_printf_float+0x9c>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	9204      	str	r2, [sp, #16]
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	f43f ae9b 	beq.w	8007924 <_printf_float+0x9c>
 8007bee:	9b05      	ldr	r3, [sp, #20]
 8007bf0:	9a04      	ldr	r2, [sp, #16]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	e7b7      	b.n	8007b68 <_printf_float+0x2e0>
 8007bf8:	4653      	mov	r3, sl
 8007bfa:	465a      	mov	r2, fp
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d1be      	bne.n	8007b84 <_printf_float+0x2fc>
 8007c06:	e68d      	b.n	8007924 <_printf_float+0x9c>
 8007c08:	9a04      	ldr	r2, [sp, #16]
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	4442      	add	r2, r8
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	d1c1      	bne.n	8007b9c <_printf_float+0x314>
 8007c18:	e684      	b.n	8007924 <_printf_float+0x9c>
 8007c1a:	9a08      	ldr	r2, [sp, #32]
 8007c1c:	2a01      	cmp	r2, #1
 8007c1e:	dc01      	bgt.n	8007c24 <_printf_float+0x39c>
 8007c20:	07db      	lsls	r3, r3, #31
 8007c22:	d537      	bpl.n	8007c94 <_printf_float+0x40c>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4642      	mov	r2, r8
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f ae78 	beq.w	8007924 <_printf_float+0x9c>
 8007c34:	4653      	mov	r3, sl
 8007c36:	465a      	mov	r2, fp
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f ae70 	beq.w	8007924 <_printf_float+0x9c>
 8007c44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	d01b      	beq.n	8007c8a <_printf_float+0x402>
 8007c52:	9b08      	ldr	r3, [sp, #32]
 8007c54:	f108 0201 	add.w	r2, r8, #1
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	d10e      	bne.n	8007c82 <_printf_float+0x3fa>
 8007c64:	e65e      	b.n	8007924 <_printf_float+0x9c>
 8007c66:	2301      	movs	r3, #1
 8007c68:	464a      	mov	r2, r9
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	f43f ae57 	beq.w	8007924 <_printf_float+0x9c>
 8007c76:	f108 0801 	add.w	r8, r8, #1
 8007c7a:	9b08      	ldr	r3, [sp, #32]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4543      	cmp	r3, r8
 8007c80:	dcf1      	bgt.n	8007c66 <_printf_float+0x3de>
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c88:	e6db      	b.n	8007a42 <_printf_float+0x1ba>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	f104 091a 	add.w	r9, r4, #26
 8007c92:	e7f2      	b.n	8007c7a <_printf_float+0x3f2>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4642      	mov	r2, r8
 8007c98:	e7df      	b.n	8007c5a <_printf_float+0x3d2>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	464a      	mov	r2, r9
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f43f ae3d 	beq.w	8007924 <_printf_float+0x9c>
 8007caa:	f108 0801 	add.w	r8, r8, #1
 8007cae:	68e3      	ldr	r3, [r4, #12]
 8007cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb2:	1a5b      	subs	r3, r3, r1
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	dcf0      	bgt.n	8007c9a <_printf_float+0x412>
 8007cb8:	e6f7      	b.n	8007aaa <_printf_float+0x222>
 8007cba:	f04f 0800 	mov.w	r8, #0
 8007cbe:	f104 0919 	add.w	r9, r4, #25
 8007cc2:	e7f4      	b.n	8007cae <_printf_float+0x426>

08007cc4 <_printf_common>:
 8007cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	4616      	mov	r6, r2
 8007cca:	4699      	mov	r9, r3
 8007ccc:	688a      	ldr	r2, [r1, #8]
 8007cce:	690b      	ldr	r3, [r1, #16]
 8007cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	bfb8      	it	lt
 8007cd8:	4613      	movlt	r3, r2
 8007cda:	6033      	str	r3, [r6, #0]
 8007cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	b10a      	cbz	r2, 8007cea <_printf_common+0x26>
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	6033      	str	r3, [r6, #0]
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	0699      	lsls	r1, r3, #26
 8007cee:	bf42      	ittt	mi
 8007cf0:	6833      	ldrmi	r3, [r6, #0]
 8007cf2:	3302      	addmi	r3, #2
 8007cf4:	6033      	strmi	r3, [r6, #0]
 8007cf6:	6825      	ldr	r5, [r4, #0]
 8007cf8:	f015 0506 	ands.w	r5, r5, #6
 8007cfc:	d106      	bne.n	8007d0c <_printf_common+0x48>
 8007cfe:	f104 0a19 	add.w	sl, r4, #25
 8007d02:	68e3      	ldr	r3, [r4, #12]
 8007d04:	6832      	ldr	r2, [r6, #0]
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	dc26      	bgt.n	8007d5a <_printf_common+0x96>
 8007d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d10:	1e13      	subs	r3, r2, #0
 8007d12:	6822      	ldr	r2, [r4, #0]
 8007d14:	bf18      	it	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	0692      	lsls	r2, r2, #26
 8007d1a:	d42b      	bmi.n	8007d74 <_printf_common+0xb0>
 8007d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d20:	4649      	mov	r1, r9
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	3001      	adds	r0, #1
 8007d28:	d01e      	beq.n	8007d68 <_printf_common+0xa4>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	68e5      	ldr	r5, [r4, #12]
 8007d2e:	6832      	ldr	r2, [r6, #0]
 8007d30:	f003 0306 	and.w	r3, r3, #6
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	bf08      	it	eq
 8007d38:	1aad      	subeq	r5, r5, r2
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	6922      	ldr	r2, [r4, #16]
 8007d3e:	bf0c      	ite	eq
 8007d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d44:	2500      	movne	r5, #0
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bfc4      	itt	gt
 8007d4a:	1a9b      	subgt	r3, r3, r2
 8007d4c:	18ed      	addgt	r5, r5, r3
 8007d4e:	2600      	movs	r6, #0
 8007d50:	341a      	adds	r4, #26
 8007d52:	42b5      	cmp	r5, r6
 8007d54:	d11a      	bne.n	8007d8c <_printf_common+0xc8>
 8007d56:	2000      	movs	r0, #0
 8007d58:	e008      	b.n	8007d6c <_printf_common+0xa8>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4638      	mov	r0, r7
 8007d62:	47c0      	blx	r8
 8007d64:	3001      	adds	r0, #1
 8007d66:	d103      	bne.n	8007d70 <_printf_common+0xac>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d70:	3501      	adds	r5, #1
 8007d72:	e7c6      	b.n	8007d02 <_printf_common+0x3e>
 8007d74:	18e1      	adds	r1, r4, r3
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	2030      	movs	r0, #48	; 0x30
 8007d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d7e:	4422      	add	r2, r4
 8007d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d88:	3302      	adds	r3, #2
 8007d8a:	e7c7      	b.n	8007d1c <_printf_common+0x58>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4649      	mov	r1, r9
 8007d92:	4638      	mov	r0, r7
 8007d94:	47c0      	blx	r8
 8007d96:	3001      	adds	r0, #1
 8007d98:	d0e6      	beq.n	8007d68 <_printf_common+0xa4>
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7d9      	b.n	8007d52 <_printf_common+0x8e>
	...

08007da0 <_printf_i>:
 8007da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	460c      	mov	r4, r1
 8007da6:	4691      	mov	r9, r2
 8007da8:	7e27      	ldrb	r7, [r4, #24]
 8007daa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dac:	2f78      	cmp	r7, #120	; 0x78
 8007dae:	4680      	mov	r8, r0
 8007db0:	469a      	mov	sl, r3
 8007db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db6:	d807      	bhi.n	8007dc8 <_printf_i+0x28>
 8007db8:	2f62      	cmp	r7, #98	; 0x62
 8007dba:	d80a      	bhi.n	8007dd2 <_printf_i+0x32>
 8007dbc:	2f00      	cmp	r7, #0
 8007dbe:	f000 80d8 	beq.w	8007f72 <_printf_i+0x1d2>
 8007dc2:	2f58      	cmp	r7, #88	; 0x58
 8007dc4:	f000 80a3 	beq.w	8007f0e <_printf_i+0x16e>
 8007dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dd0:	e03a      	b.n	8007e48 <_printf_i+0xa8>
 8007dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dd6:	2b15      	cmp	r3, #21
 8007dd8:	d8f6      	bhi.n	8007dc8 <_printf_i+0x28>
 8007dda:	a001      	add	r0, pc, #4	; (adr r0, 8007de0 <_printf_i+0x40>)
 8007ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007de0:	08007e39 	.word	0x08007e39
 8007de4:	08007e4d 	.word	0x08007e4d
 8007de8:	08007dc9 	.word	0x08007dc9
 8007dec:	08007dc9 	.word	0x08007dc9
 8007df0:	08007dc9 	.word	0x08007dc9
 8007df4:	08007dc9 	.word	0x08007dc9
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007dc9 	.word	0x08007dc9
 8007e00:	08007dc9 	.word	0x08007dc9
 8007e04:	08007dc9 	.word	0x08007dc9
 8007e08:	08007dc9 	.word	0x08007dc9
 8007e0c:	08007f59 	.word	0x08007f59
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08007f3b 	.word	0x08007f3b
 8007e18:	08007dc9 	.word	0x08007dc9
 8007e1c:	08007dc9 	.word	0x08007dc9
 8007e20:	08007f7b 	.word	0x08007f7b
 8007e24:	08007dc9 	.word	0x08007dc9
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007dc9 	.word	0x08007dc9
 8007e30:	08007dc9 	.word	0x08007dc9
 8007e34:	08007f43 	.word	0x08007f43
 8007e38:	680b      	ldr	r3, [r1, #0]
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	600a      	str	r2, [r1, #0]
 8007e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0a3      	b.n	8007f94 <_printf_i+0x1f4>
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	6808      	ldr	r0, [r1, #0]
 8007e50:	062e      	lsls	r6, r5, #24
 8007e52:	f100 0304 	add.w	r3, r0, #4
 8007e56:	d50a      	bpl.n	8007e6e <_printf_i+0xce>
 8007e58:	6805      	ldr	r5, [r0, #0]
 8007e5a:	600b      	str	r3, [r1, #0]
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	da03      	bge.n	8007e68 <_printf_i+0xc8>
 8007e60:	232d      	movs	r3, #45	; 0x2d
 8007e62:	426d      	negs	r5, r5
 8007e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e68:	485e      	ldr	r0, [pc, #376]	; (8007fe4 <_printf_i+0x244>)
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e019      	b.n	8007ea2 <_printf_i+0x102>
 8007e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e72:	6805      	ldr	r5, [r0, #0]
 8007e74:	600b      	str	r3, [r1, #0]
 8007e76:	bf18      	it	ne
 8007e78:	b22d      	sxthne	r5, r5
 8007e7a:	e7ef      	b.n	8007e5c <_printf_i+0xbc>
 8007e7c:	680b      	ldr	r3, [r1, #0]
 8007e7e:	6825      	ldr	r5, [r4, #0]
 8007e80:	1d18      	adds	r0, r3, #4
 8007e82:	6008      	str	r0, [r1, #0]
 8007e84:	0628      	lsls	r0, r5, #24
 8007e86:	d501      	bpl.n	8007e8c <_printf_i+0xec>
 8007e88:	681d      	ldr	r5, [r3, #0]
 8007e8a:	e002      	b.n	8007e92 <_printf_i+0xf2>
 8007e8c:	0669      	lsls	r1, r5, #25
 8007e8e:	d5fb      	bpl.n	8007e88 <_printf_i+0xe8>
 8007e90:	881d      	ldrh	r5, [r3, #0]
 8007e92:	4854      	ldr	r0, [pc, #336]	; (8007fe4 <_printf_i+0x244>)
 8007e94:	2f6f      	cmp	r7, #111	; 0x6f
 8007e96:	bf0c      	ite	eq
 8007e98:	2308      	moveq	r3, #8
 8007e9a:	230a      	movne	r3, #10
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ea2:	6866      	ldr	r6, [r4, #4]
 8007ea4:	60a6      	str	r6, [r4, #8]
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	bfa2      	ittt	ge
 8007eaa:	6821      	ldrge	r1, [r4, #0]
 8007eac:	f021 0104 	bicge.w	r1, r1, #4
 8007eb0:	6021      	strge	r1, [r4, #0]
 8007eb2:	b90d      	cbnz	r5, 8007eb8 <_printf_i+0x118>
 8007eb4:	2e00      	cmp	r6, #0
 8007eb6:	d04d      	beq.n	8007f54 <_printf_i+0x1b4>
 8007eb8:	4616      	mov	r6, r2
 8007eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8007ec2:	5dc7      	ldrb	r7, [r0, r7]
 8007ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ec8:	462f      	mov	r7, r5
 8007eca:	42bb      	cmp	r3, r7
 8007ecc:	460d      	mov	r5, r1
 8007ece:	d9f4      	bls.n	8007eba <_printf_i+0x11a>
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d10b      	bne.n	8007eec <_printf_i+0x14c>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	07df      	lsls	r7, r3, #31
 8007ed8:	d508      	bpl.n	8007eec <_printf_i+0x14c>
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	6861      	ldr	r1, [r4, #4]
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	bfde      	ittt	le
 8007ee2:	2330      	movle	r3, #48	; 0x30
 8007ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eec:	1b92      	subs	r2, r2, r6
 8007eee:	6122      	str	r2, [r4, #16]
 8007ef0:	f8cd a000 	str.w	sl, [sp]
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	aa03      	add	r2, sp, #12
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4640      	mov	r0, r8
 8007efc:	f7ff fee2 	bl	8007cc4 <_printf_common>
 8007f00:	3001      	adds	r0, #1
 8007f02:	d14c      	bne.n	8007f9e <_printf_i+0x1fe>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	b004      	add	sp, #16
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	4835      	ldr	r0, [pc, #212]	; (8007fe4 <_printf_i+0x244>)
 8007f10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	680e      	ldr	r6, [r1, #0]
 8007f18:	061f      	lsls	r7, r3, #24
 8007f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f1e:	600e      	str	r6, [r1, #0]
 8007f20:	d514      	bpl.n	8007f4c <_printf_i+0x1ac>
 8007f22:	07d9      	lsls	r1, r3, #31
 8007f24:	bf44      	itt	mi
 8007f26:	f043 0320 	orrmi.w	r3, r3, #32
 8007f2a:	6023      	strmi	r3, [r4, #0]
 8007f2c:	b91d      	cbnz	r5, 8007f36 <_printf_i+0x196>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	f023 0320 	bic.w	r3, r3, #32
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	2310      	movs	r3, #16
 8007f38:	e7b0      	b.n	8007e9c <_printf_i+0xfc>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f043 0320 	orr.w	r3, r3, #32
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	2378      	movs	r3, #120	; 0x78
 8007f44:	4828      	ldr	r0, [pc, #160]	; (8007fe8 <_printf_i+0x248>)
 8007f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f4a:	e7e3      	b.n	8007f14 <_printf_i+0x174>
 8007f4c:	065e      	lsls	r6, r3, #25
 8007f4e:	bf48      	it	mi
 8007f50:	b2ad      	uxthmi	r5, r5
 8007f52:	e7e6      	b.n	8007f22 <_printf_i+0x182>
 8007f54:	4616      	mov	r6, r2
 8007f56:	e7bb      	b.n	8007ed0 <_printf_i+0x130>
 8007f58:	680b      	ldr	r3, [r1, #0]
 8007f5a:	6826      	ldr	r6, [r4, #0]
 8007f5c:	6960      	ldr	r0, [r4, #20]
 8007f5e:	1d1d      	adds	r5, r3, #4
 8007f60:	600d      	str	r5, [r1, #0]
 8007f62:	0635      	lsls	r5, r6, #24
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	d501      	bpl.n	8007f6c <_printf_i+0x1cc>
 8007f68:	6018      	str	r0, [r3, #0]
 8007f6a:	e002      	b.n	8007f72 <_printf_i+0x1d2>
 8007f6c:	0671      	lsls	r1, r6, #25
 8007f6e:	d5fb      	bpl.n	8007f68 <_printf_i+0x1c8>
 8007f70:	8018      	strh	r0, [r3, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	4616      	mov	r6, r2
 8007f78:	e7ba      	b.n	8007ef0 <_printf_i+0x150>
 8007f7a:	680b      	ldr	r3, [r1, #0]
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	600a      	str	r2, [r1, #0]
 8007f80:	681e      	ldr	r6, [r3, #0]
 8007f82:	6862      	ldr	r2, [r4, #4]
 8007f84:	2100      	movs	r1, #0
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7f8 f972 	bl	8000270 <memchr>
 8007f8c:	b108      	cbz	r0, 8007f92 <_printf_i+0x1f2>
 8007f8e:	1b80      	subs	r0, r0, r6
 8007f90:	6060      	str	r0, [r4, #4]
 8007f92:	6863      	ldr	r3, [r4, #4]
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	2300      	movs	r3, #0
 8007f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f9c:	e7a8      	b.n	8007ef0 <_printf_i+0x150>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	47d0      	blx	sl
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d0ab      	beq.n	8007f04 <_printf_i+0x164>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	079b      	lsls	r3, r3, #30
 8007fb0:	d413      	bmi.n	8007fda <_printf_i+0x23a>
 8007fb2:	68e0      	ldr	r0, [r4, #12]
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	bfb8      	it	lt
 8007fba:	4618      	movlt	r0, r3
 8007fbc:	e7a4      	b.n	8007f08 <_printf_i+0x168>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	47d0      	blx	sl
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d09b      	beq.n	8007f04 <_printf_i+0x164>
 8007fcc:	3501      	adds	r5, #1
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	9903      	ldr	r1, [sp, #12]
 8007fd2:	1a5b      	subs	r3, r3, r1
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dcf2      	bgt.n	8007fbe <_printf_i+0x21e>
 8007fd8:	e7eb      	b.n	8007fb2 <_printf_i+0x212>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	f104 0619 	add.w	r6, r4, #25
 8007fe0:	e7f5      	b.n	8007fce <_printf_i+0x22e>
 8007fe2:	bf00      	nop
 8007fe4:	0800d12c 	.word	0x0800d12c
 8007fe8:	0800d13d 	.word	0x0800d13d

08007fec <_scanf_float>:
 8007fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	b087      	sub	sp, #28
 8007ff2:	4617      	mov	r7, r2
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	688b      	ldr	r3, [r1, #8]
 8007ff8:	1e5a      	subs	r2, r3, #1
 8007ffa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ffe:	bf83      	ittte	hi
 8008000:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008004:	195b      	addhi	r3, r3, r5
 8008006:	9302      	strhi	r3, [sp, #8]
 8008008:	2300      	movls	r3, #0
 800800a:	bf86      	itte	hi
 800800c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008010:	608b      	strhi	r3, [r1, #8]
 8008012:	9302      	strls	r3, [sp, #8]
 8008014:	680b      	ldr	r3, [r1, #0]
 8008016:	468b      	mov	fp, r1
 8008018:	2500      	movs	r5, #0
 800801a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800801e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008022:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008026:	4680      	mov	r8, r0
 8008028:	460c      	mov	r4, r1
 800802a:	465e      	mov	r6, fp
 800802c:	46aa      	mov	sl, r5
 800802e:	46a9      	mov	r9, r5
 8008030:	9501      	str	r5, [sp, #4]
 8008032:	68a2      	ldr	r2, [r4, #8]
 8008034:	b152      	cbz	r2, 800804c <_scanf_float+0x60>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b4e      	cmp	r3, #78	; 0x4e
 800803c:	d864      	bhi.n	8008108 <_scanf_float+0x11c>
 800803e:	2b40      	cmp	r3, #64	; 0x40
 8008040:	d83c      	bhi.n	80080bc <_scanf_float+0xd0>
 8008042:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008046:	b2c8      	uxtb	r0, r1
 8008048:	280e      	cmp	r0, #14
 800804a:	d93a      	bls.n	80080c2 <_scanf_float+0xd6>
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	d003      	beq.n	800805a <_scanf_float+0x6e>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800805e:	f1ba 0f01 	cmp.w	sl, #1
 8008062:	f200 8113 	bhi.w	800828c <_scanf_float+0x2a0>
 8008066:	455e      	cmp	r6, fp
 8008068:	f200 8105 	bhi.w	8008276 <_scanf_float+0x28a>
 800806c:	2501      	movs	r5, #1
 800806e:	4628      	mov	r0, r5
 8008070:	b007      	add	sp, #28
 8008072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008076:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800807a:	2a0d      	cmp	r2, #13
 800807c:	d8e6      	bhi.n	800804c <_scanf_float+0x60>
 800807e:	a101      	add	r1, pc, #4	; (adr r1, 8008084 <_scanf_float+0x98>)
 8008080:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008084:	080081c3 	.word	0x080081c3
 8008088:	0800804d 	.word	0x0800804d
 800808c:	0800804d 	.word	0x0800804d
 8008090:	0800804d 	.word	0x0800804d
 8008094:	08008223 	.word	0x08008223
 8008098:	080081fb 	.word	0x080081fb
 800809c:	0800804d 	.word	0x0800804d
 80080a0:	0800804d 	.word	0x0800804d
 80080a4:	080081d1 	.word	0x080081d1
 80080a8:	0800804d 	.word	0x0800804d
 80080ac:	0800804d 	.word	0x0800804d
 80080b0:	0800804d 	.word	0x0800804d
 80080b4:	0800804d 	.word	0x0800804d
 80080b8:	08008189 	.word	0x08008189
 80080bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80080c0:	e7db      	b.n	800807a <_scanf_float+0x8e>
 80080c2:	290e      	cmp	r1, #14
 80080c4:	d8c2      	bhi.n	800804c <_scanf_float+0x60>
 80080c6:	a001      	add	r0, pc, #4	; (adr r0, 80080cc <_scanf_float+0xe0>)
 80080c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080cc:	0800817b 	.word	0x0800817b
 80080d0:	0800804d 	.word	0x0800804d
 80080d4:	0800817b 	.word	0x0800817b
 80080d8:	0800820f 	.word	0x0800820f
 80080dc:	0800804d 	.word	0x0800804d
 80080e0:	08008129 	.word	0x08008129
 80080e4:	08008165 	.word	0x08008165
 80080e8:	08008165 	.word	0x08008165
 80080ec:	08008165 	.word	0x08008165
 80080f0:	08008165 	.word	0x08008165
 80080f4:	08008165 	.word	0x08008165
 80080f8:	08008165 	.word	0x08008165
 80080fc:	08008165 	.word	0x08008165
 8008100:	08008165 	.word	0x08008165
 8008104:	08008165 	.word	0x08008165
 8008108:	2b6e      	cmp	r3, #110	; 0x6e
 800810a:	d809      	bhi.n	8008120 <_scanf_float+0x134>
 800810c:	2b60      	cmp	r3, #96	; 0x60
 800810e:	d8b2      	bhi.n	8008076 <_scanf_float+0x8a>
 8008110:	2b54      	cmp	r3, #84	; 0x54
 8008112:	d077      	beq.n	8008204 <_scanf_float+0x218>
 8008114:	2b59      	cmp	r3, #89	; 0x59
 8008116:	d199      	bne.n	800804c <_scanf_float+0x60>
 8008118:	2d07      	cmp	r5, #7
 800811a:	d197      	bne.n	800804c <_scanf_float+0x60>
 800811c:	2508      	movs	r5, #8
 800811e:	e029      	b.n	8008174 <_scanf_float+0x188>
 8008120:	2b74      	cmp	r3, #116	; 0x74
 8008122:	d06f      	beq.n	8008204 <_scanf_float+0x218>
 8008124:	2b79      	cmp	r3, #121	; 0x79
 8008126:	e7f6      	b.n	8008116 <_scanf_float+0x12a>
 8008128:	6821      	ldr	r1, [r4, #0]
 800812a:	05c8      	lsls	r0, r1, #23
 800812c:	d51a      	bpl.n	8008164 <_scanf_float+0x178>
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008134:	6021      	str	r1, [r4, #0]
 8008136:	f109 0901 	add.w	r9, r9, #1
 800813a:	b11b      	cbz	r3, 8008144 <_scanf_float+0x158>
 800813c:	3b01      	subs	r3, #1
 800813e:	3201      	adds	r2, #1
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	60a2      	str	r2, [r4, #8]
 8008144:	68a3      	ldr	r3, [r4, #8]
 8008146:	3b01      	subs	r3, #1
 8008148:	60a3      	str	r3, [r4, #8]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	3301      	adds	r3, #1
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3b01      	subs	r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	607b      	str	r3, [r7, #4]
 8008158:	f340 8084 	ble.w	8008264 <_scanf_float+0x278>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	e766      	b.n	8008032 <_scanf_float+0x46>
 8008164:	eb1a 0f05 	cmn.w	sl, r5
 8008168:	f47f af70 	bne.w	800804c <_scanf_float+0x60>
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	f806 3b01 	strb.w	r3, [r6], #1
 8008178:	e7e4      	b.n	8008144 <_scanf_float+0x158>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	0610      	lsls	r0, r2, #24
 800817e:	f57f af65 	bpl.w	800804c <_scanf_float+0x60>
 8008182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008186:	e7f4      	b.n	8008172 <_scanf_float+0x186>
 8008188:	f1ba 0f00 	cmp.w	sl, #0
 800818c:	d10e      	bne.n	80081ac <_scanf_float+0x1c0>
 800818e:	f1b9 0f00 	cmp.w	r9, #0
 8008192:	d10e      	bne.n	80081b2 <_scanf_float+0x1c6>
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800819a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800819e:	d108      	bne.n	80081b2 <_scanf_float+0x1c6>
 80081a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081a4:	6022      	str	r2, [r4, #0]
 80081a6:	f04f 0a01 	mov.w	sl, #1
 80081aa:	e7e3      	b.n	8008174 <_scanf_float+0x188>
 80081ac:	f1ba 0f02 	cmp.w	sl, #2
 80081b0:	d055      	beq.n	800825e <_scanf_float+0x272>
 80081b2:	2d01      	cmp	r5, #1
 80081b4:	d002      	beq.n	80081bc <_scanf_float+0x1d0>
 80081b6:	2d04      	cmp	r5, #4
 80081b8:	f47f af48 	bne.w	800804c <_scanf_float+0x60>
 80081bc:	3501      	adds	r5, #1
 80081be:	b2ed      	uxtb	r5, r5
 80081c0:	e7d8      	b.n	8008174 <_scanf_float+0x188>
 80081c2:	f1ba 0f01 	cmp.w	sl, #1
 80081c6:	f47f af41 	bne.w	800804c <_scanf_float+0x60>
 80081ca:	f04f 0a02 	mov.w	sl, #2
 80081ce:	e7d1      	b.n	8008174 <_scanf_float+0x188>
 80081d0:	b97d      	cbnz	r5, 80081f2 <_scanf_float+0x206>
 80081d2:	f1b9 0f00 	cmp.w	r9, #0
 80081d6:	f47f af3c 	bne.w	8008052 <_scanf_float+0x66>
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081e4:	f47f af39 	bne.w	800805a <_scanf_float+0x6e>
 80081e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	2501      	movs	r5, #1
 80081f0:	e7c0      	b.n	8008174 <_scanf_float+0x188>
 80081f2:	2d03      	cmp	r5, #3
 80081f4:	d0e2      	beq.n	80081bc <_scanf_float+0x1d0>
 80081f6:	2d05      	cmp	r5, #5
 80081f8:	e7de      	b.n	80081b8 <_scanf_float+0x1cc>
 80081fa:	2d02      	cmp	r5, #2
 80081fc:	f47f af26 	bne.w	800804c <_scanf_float+0x60>
 8008200:	2503      	movs	r5, #3
 8008202:	e7b7      	b.n	8008174 <_scanf_float+0x188>
 8008204:	2d06      	cmp	r5, #6
 8008206:	f47f af21 	bne.w	800804c <_scanf_float+0x60>
 800820a:	2507      	movs	r5, #7
 800820c:	e7b2      	b.n	8008174 <_scanf_float+0x188>
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	0591      	lsls	r1, r2, #22
 8008212:	f57f af1b 	bpl.w	800804c <_scanf_float+0x60>
 8008216:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800821a:	6022      	str	r2, [r4, #0]
 800821c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008220:	e7a8      	b.n	8008174 <_scanf_float+0x188>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008228:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800822c:	d006      	beq.n	800823c <_scanf_float+0x250>
 800822e:	0550      	lsls	r0, r2, #21
 8008230:	f57f af0c 	bpl.w	800804c <_scanf_float+0x60>
 8008234:	f1b9 0f00 	cmp.w	r9, #0
 8008238:	f43f af0f 	beq.w	800805a <_scanf_float+0x6e>
 800823c:	0591      	lsls	r1, r2, #22
 800823e:	bf58      	it	pl
 8008240:	9901      	ldrpl	r1, [sp, #4]
 8008242:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008246:	bf58      	it	pl
 8008248:	eba9 0101 	subpl.w	r1, r9, r1
 800824c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008250:	bf58      	it	pl
 8008252:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008256:	6022      	str	r2, [r4, #0]
 8008258:	f04f 0900 	mov.w	r9, #0
 800825c:	e78a      	b.n	8008174 <_scanf_float+0x188>
 800825e:	f04f 0a03 	mov.w	sl, #3
 8008262:	e787      	b.n	8008174 <_scanf_float+0x188>
 8008264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008268:	4639      	mov	r1, r7
 800826a:	4640      	mov	r0, r8
 800826c:	4798      	blx	r3
 800826e:	2800      	cmp	r0, #0
 8008270:	f43f aedf 	beq.w	8008032 <_scanf_float+0x46>
 8008274:	e6ea      	b.n	800804c <_scanf_float+0x60>
 8008276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800827a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800827e:	463a      	mov	r2, r7
 8008280:	4640      	mov	r0, r8
 8008282:	4798      	blx	r3
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	3b01      	subs	r3, #1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	e6ec      	b.n	8008066 <_scanf_float+0x7a>
 800828c:	1e6b      	subs	r3, r5, #1
 800828e:	2b06      	cmp	r3, #6
 8008290:	d825      	bhi.n	80082de <_scanf_float+0x2f2>
 8008292:	2d02      	cmp	r5, #2
 8008294:	d836      	bhi.n	8008304 <_scanf_float+0x318>
 8008296:	455e      	cmp	r6, fp
 8008298:	f67f aee8 	bls.w	800806c <_scanf_float+0x80>
 800829c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082a4:	463a      	mov	r2, r7
 80082a6:	4640      	mov	r0, r8
 80082a8:	4798      	blx	r3
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	e7f1      	b.n	8008296 <_scanf_float+0x2aa>
 80082b2:	9802      	ldr	r0, [sp, #8]
 80082b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	463a      	mov	r2, r7
 80082c0:	4640      	mov	r0, r8
 80082c2:	4798      	blx	r3
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ce:	fa5f fa8a 	uxtb.w	sl, sl
 80082d2:	f1ba 0f02 	cmp.w	sl, #2
 80082d6:	d1ec      	bne.n	80082b2 <_scanf_float+0x2c6>
 80082d8:	3d03      	subs	r5, #3
 80082da:	b2ed      	uxtb	r5, r5
 80082dc:	1b76      	subs	r6, r6, r5
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	05da      	lsls	r2, r3, #23
 80082e2:	d52f      	bpl.n	8008344 <_scanf_float+0x358>
 80082e4:	055b      	lsls	r3, r3, #21
 80082e6:	d510      	bpl.n	800830a <_scanf_float+0x31e>
 80082e8:	455e      	cmp	r6, fp
 80082ea:	f67f aebf 	bls.w	800806c <_scanf_float+0x80>
 80082ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082f6:	463a      	mov	r2, r7
 80082f8:	4640      	mov	r0, r8
 80082fa:	4798      	blx	r3
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	3b01      	subs	r3, #1
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	e7f1      	b.n	80082e8 <_scanf_float+0x2fc>
 8008304:	46aa      	mov	sl, r5
 8008306:	9602      	str	r6, [sp, #8]
 8008308:	e7df      	b.n	80082ca <_scanf_float+0x2de>
 800830a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	2965      	cmp	r1, #101	; 0x65
 8008312:	f103 33ff 	add.w	r3, r3, #4294967295
 8008316:	f106 35ff 	add.w	r5, r6, #4294967295
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	d00c      	beq.n	8008338 <_scanf_float+0x34c>
 800831e:	2945      	cmp	r1, #69	; 0x45
 8008320:	d00a      	beq.n	8008338 <_scanf_float+0x34c>
 8008322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008326:	463a      	mov	r2, r7
 8008328:	4640      	mov	r0, r8
 800832a:	4798      	blx	r3
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008332:	3b01      	subs	r3, #1
 8008334:	1eb5      	subs	r5, r6, #2
 8008336:	6123      	str	r3, [r4, #16]
 8008338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800833c:	463a      	mov	r2, r7
 800833e:	4640      	mov	r0, r8
 8008340:	4798      	blx	r3
 8008342:	462e      	mov	r6, r5
 8008344:	6825      	ldr	r5, [r4, #0]
 8008346:	f015 0510 	ands.w	r5, r5, #16
 800834a:	d14d      	bne.n	80083e8 <_scanf_float+0x3fc>
 800834c:	7035      	strb	r5, [r6, #0]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008358:	d11a      	bne.n	8008390 <_scanf_float+0x3a4>
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	454b      	cmp	r3, r9
 800835e:	eba3 0209 	sub.w	r2, r3, r9
 8008362:	d122      	bne.n	80083aa <_scanf_float+0x3be>
 8008364:	2200      	movs	r2, #0
 8008366:	4659      	mov	r1, fp
 8008368:	4640      	mov	r0, r8
 800836a:	f000 ff07 	bl	800917c <_strtod_r>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	6821      	ldr	r1, [r4, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f011 0f02 	tst.w	r1, #2
 8008378:	f103 0204 	add.w	r2, r3, #4
 800837c:	d020      	beq.n	80083c0 <_scanf_float+0x3d4>
 800837e:	9903      	ldr	r1, [sp, #12]
 8008380:	600a      	str	r2, [r1, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	ed83 0b00 	vstr	d0, [r3]
 8008388:	68e3      	ldr	r3, [r4, #12]
 800838a:	3301      	adds	r3, #1
 800838c:	60e3      	str	r3, [r4, #12]
 800838e:	e66e      	b.n	800806e <_scanf_float+0x82>
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0e6      	beq.n	8008364 <_scanf_float+0x378>
 8008396:	9905      	ldr	r1, [sp, #20]
 8008398:	230a      	movs	r3, #10
 800839a:	462a      	mov	r2, r5
 800839c:	3101      	adds	r1, #1
 800839e:	4640      	mov	r0, r8
 80083a0:	f000 ff76 	bl	8009290 <_strtol_r>
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	9e05      	ldr	r6, [sp, #20]
 80083a8:	1ac2      	subs	r2, r0, r3
 80083aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80083ae:	429e      	cmp	r6, r3
 80083b0:	bf28      	it	cs
 80083b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80083b6:	490d      	ldr	r1, [pc, #52]	; (80083ec <_scanf_float+0x400>)
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 f821 	bl	8008400 <siprintf>
 80083be:	e7d1      	b.n	8008364 <_scanf_float+0x378>
 80083c0:	f011 0f04 	tst.w	r1, #4
 80083c4:	9903      	ldr	r1, [sp, #12]
 80083c6:	600a      	str	r2, [r1, #0]
 80083c8:	d1db      	bne.n	8008382 <_scanf_float+0x396>
 80083ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	681e      	ldr	r6, [r3, #0]
 80083d4:	d705      	bvc.n	80083e2 <_scanf_float+0x3f6>
 80083d6:	4806      	ldr	r0, [pc, #24]	; (80083f0 <_scanf_float+0x404>)
 80083d8:	f000 f80c 	bl	80083f4 <nanf>
 80083dc:	ed86 0a00 	vstr	s0, [r6]
 80083e0:	e7d2      	b.n	8008388 <_scanf_float+0x39c>
 80083e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80083e6:	e7f9      	b.n	80083dc <_scanf_float+0x3f0>
 80083e8:	2500      	movs	r5, #0
 80083ea:	e640      	b.n	800806e <_scanf_float+0x82>
 80083ec:	0800d14e 	.word	0x0800d14e
 80083f0:	0800d5a3 	.word	0x0800d5a3

080083f4 <nanf>:
 80083f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083fc <nanf+0x8>
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	7fc00000 	.word	0x7fc00000

08008400 <siprintf>:
 8008400:	b40e      	push	{r1, r2, r3}
 8008402:	b500      	push	{lr}
 8008404:	b09c      	sub	sp, #112	; 0x70
 8008406:	ab1d      	add	r3, sp, #116	; 0x74
 8008408:	9002      	str	r0, [sp, #8]
 800840a:	9006      	str	r0, [sp, #24]
 800840c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008410:	4809      	ldr	r0, [pc, #36]	; (8008438 <siprintf+0x38>)
 8008412:	9107      	str	r1, [sp, #28]
 8008414:	9104      	str	r1, [sp, #16]
 8008416:	4909      	ldr	r1, [pc, #36]	; (800843c <siprintf+0x3c>)
 8008418:	f853 2b04 	ldr.w	r2, [r3], #4
 800841c:	9105      	str	r1, [sp, #20]
 800841e:	6800      	ldr	r0, [r0, #0]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	a902      	add	r1, sp, #8
 8008424:	f002 ff2a 	bl	800b27c <_svfiprintf_r>
 8008428:	9b02      	ldr	r3, [sp, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	b01c      	add	sp, #112	; 0x70
 8008430:	f85d eb04 	ldr.w	lr, [sp], #4
 8008434:	b003      	add	sp, #12
 8008436:	4770      	bx	lr
 8008438:	20000098 	.word	0x20000098
 800843c:	ffff0208 	.word	0xffff0208

08008440 <siscanf>:
 8008440:	b40e      	push	{r1, r2, r3}
 8008442:	b510      	push	{r4, lr}
 8008444:	b09f      	sub	sp, #124	; 0x7c
 8008446:	ac21      	add	r4, sp, #132	; 0x84
 8008448:	f44f 7101 	mov.w	r1, #516	; 0x204
 800844c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008456:	9004      	str	r0, [sp, #16]
 8008458:	9008      	str	r0, [sp, #32]
 800845a:	f7f7 fefb 	bl	8000254 <strlen>
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <siscanf+0x50>)
 8008460:	9005      	str	r0, [sp, #20]
 8008462:	9009      	str	r0, [sp, #36]	; 0x24
 8008464:	930d      	str	r3, [sp, #52]	; 0x34
 8008466:	480b      	ldr	r0, [pc, #44]	; (8008494 <siscanf+0x54>)
 8008468:	9a01      	ldr	r2, [sp, #4]
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	9403      	str	r4, [sp, #12]
 800846e:	2300      	movs	r3, #0
 8008470:	9311      	str	r3, [sp, #68]	; 0x44
 8008472:	9316      	str	r3, [sp, #88]	; 0x58
 8008474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008478:	f8ad 301e 	strh.w	r3, [sp, #30]
 800847c:	a904      	add	r1, sp, #16
 800847e:	4623      	mov	r3, r4
 8008480:	f003 f856 	bl	800b530 <__ssvfiscanf_r>
 8008484:	b01f      	add	sp, #124	; 0x7c
 8008486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800848a:	b003      	add	sp, #12
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	080084bb 	.word	0x080084bb
 8008494:	20000098 	.word	0x20000098

08008498 <__sread>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	f003 fb0a 	bl	800bab8 <_read_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	bfab      	itete	ge
 80084a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084aa:	89a3      	ldrhlt	r3, [r4, #12]
 80084ac:	181b      	addge	r3, r3, r0
 80084ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084b2:	bfac      	ite	ge
 80084b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084b6:	81a3      	strhlt	r3, [r4, #12]
 80084b8:	bd10      	pop	{r4, pc}

080084ba <__seofread>:
 80084ba:	2000      	movs	r0, #0
 80084bc:	4770      	bx	lr

080084be <__swrite>:
 80084be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	461f      	mov	r7, r3
 80084c4:	898b      	ldrh	r3, [r1, #12]
 80084c6:	05db      	lsls	r3, r3, #23
 80084c8:	4605      	mov	r5, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4616      	mov	r6, r2
 80084ce:	d505      	bpl.n	80084dc <__swrite+0x1e>
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2302      	movs	r3, #2
 80084d6:	2200      	movs	r2, #0
 80084d8:	f002 f8c4 	bl	800a664 <_lseek_r>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	f000 bf11 	b.w	8009318 <_write_r>

080084f6 <__sseek>:
 80084f6:	b510      	push	{r4, lr}
 80084f8:	460c      	mov	r4, r1
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	f002 f8b1 	bl	800a664 <_lseek_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	bf15      	itete	ne
 8008508:	6560      	strne	r0, [r4, #84]	; 0x54
 800850a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800850e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008512:	81a3      	strheq	r3, [r4, #12]
 8008514:	bf18      	it	ne
 8008516:	81a3      	strhne	r3, [r4, #12]
 8008518:	bd10      	pop	{r4, pc}

0800851a <__sclose>:
 800851a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851e:	f000 bf0d 	b.w	800933c <_close_r>

08008522 <strcat>:
 8008522:	b510      	push	{r4, lr}
 8008524:	4602      	mov	r2, r0
 8008526:	7814      	ldrb	r4, [r2, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	3201      	adds	r2, #1
 800852c:	2c00      	cmp	r4, #0
 800852e:	d1fa      	bne.n	8008526 <strcat+0x4>
 8008530:	3b01      	subs	r3, #1
 8008532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853a:	2a00      	cmp	r2, #0
 800853c:	d1f9      	bne.n	8008532 <strcat+0x10>
 800853e:	bd10      	pop	{r4, pc}

08008540 <strcpy>:
 8008540:	4603      	mov	r3, r0
 8008542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008546:	f803 2b01 	strb.w	r2, [r3], #1
 800854a:	2a00      	cmp	r2, #0
 800854c:	d1f9      	bne.n	8008542 <strcpy+0x2>
 800854e:	4770      	bx	lr

08008550 <strncmp>:
 8008550:	b510      	push	{r4, lr}
 8008552:	b16a      	cbz	r2, 8008570 <strncmp+0x20>
 8008554:	3901      	subs	r1, #1
 8008556:	1884      	adds	r4, r0, r2
 8008558:	f810 3b01 	ldrb.w	r3, [r0], #1
 800855c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008560:	4293      	cmp	r3, r2
 8008562:	d103      	bne.n	800856c <strncmp+0x1c>
 8008564:	42a0      	cmp	r0, r4
 8008566:	d001      	beq.n	800856c <strncmp+0x1c>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f5      	bne.n	8008558 <strncmp+0x8>
 800856c:	1a98      	subs	r0, r3, r2
 800856e:	bd10      	pop	{r4, pc}
 8008570:	4610      	mov	r0, r2
 8008572:	e7fc      	b.n	800856e <strncmp+0x1e>

08008574 <strncpy>:
 8008574:	b510      	push	{r4, lr}
 8008576:	3901      	subs	r1, #1
 8008578:	4603      	mov	r3, r0
 800857a:	b132      	cbz	r2, 800858a <strncpy+0x16>
 800857c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008580:	f803 4b01 	strb.w	r4, [r3], #1
 8008584:	3a01      	subs	r2, #1
 8008586:	2c00      	cmp	r4, #0
 8008588:	d1f7      	bne.n	800857a <strncpy+0x6>
 800858a:	441a      	add	r2, r3
 800858c:	2100      	movs	r1, #0
 800858e:	4293      	cmp	r3, r2
 8008590:	d100      	bne.n	8008594 <strncpy+0x20>
 8008592:	bd10      	pop	{r4, pc}
 8008594:	f803 1b01 	strb.w	r1, [r3], #1
 8008598:	e7f9      	b.n	800858e <strncpy+0x1a>

0800859a <sulp>:
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	ec45 4b10 	vmov	d0, r4, r5
 80085a6:	f002 fc03 	bl	800adb0 <__ulp>
 80085aa:	b17e      	cbz	r6, 80085cc <sulp+0x32>
 80085ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <sulp+0x32>
 80085b8:	051b      	lsls	r3, r3, #20
 80085ba:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80085be:	2000      	movs	r0, #0
 80085c0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80085c4:	ec41 0b17 	vmov	d7, r0, r1
 80085c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080085d0 <_strtod_l>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	ed2d 8b0c 	vpush	{d8-d13}
 80085d8:	b09d      	sub	sp, #116	; 0x74
 80085da:	461f      	mov	r7, r3
 80085dc:	2300      	movs	r3, #0
 80085de:	9318      	str	r3, [sp, #96]	; 0x60
 80085e0:	4ba6      	ldr	r3, [pc, #664]	; (800887c <_strtod_l+0x2ac>)
 80085e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	9308      	str	r3, [sp, #32]
 80085e8:	4604      	mov	r4, r0
 80085ea:	4618      	mov	r0, r3
 80085ec:	468a      	mov	sl, r1
 80085ee:	f7f7 fe31 	bl	8000254 <strlen>
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	4605      	mov	r5, r0
 80085f8:	f04f 0900 	mov.w	r9, #0
 80085fc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	2a2b      	cmp	r2, #43	; 0x2b
 8008606:	d04d      	beq.n	80086a4 <_strtod_l+0xd4>
 8008608:	d83a      	bhi.n	8008680 <_strtod_l+0xb0>
 800860a:	2a0d      	cmp	r2, #13
 800860c:	d833      	bhi.n	8008676 <_strtod_l+0xa6>
 800860e:	2a08      	cmp	r2, #8
 8008610:	d833      	bhi.n	800867a <_strtod_l+0xaa>
 8008612:	2a00      	cmp	r2, #0
 8008614:	d03d      	beq.n	8008692 <_strtod_l+0xc2>
 8008616:	2300      	movs	r3, #0
 8008618:	930b      	str	r3, [sp, #44]	; 0x2c
 800861a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800861c:	7833      	ldrb	r3, [r6, #0]
 800861e:	2b30      	cmp	r3, #48	; 0x30
 8008620:	f040 80b6 	bne.w	8008790 <_strtod_l+0x1c0>
 8008624:	7873      	ldrb	r3, [r6, #1]
 8008626:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800862a:	2b58      	cmp	r3, #88	; 0x58
 800862c:	d16d      	bne.n	800870a <_strtod_l+0x13a>
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	ab18      	add	r3, sp, #96	; 0x60
 8008634:	9702      	str	r7, [sp, #8]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4a91      	ldr	r2, [pc, #580]	; (8008880 <_strtod_l+0x2b0>)
 800863a:	ab19      	add	r3, sp, #100	; 0x64
 800863c:	a917      	add	r1, sp, #92	; 0x5c
 800863e:	4620      	mov	r0, r4
 8008640:	f001 fd04 	bl	800a04c <__gethex>
 8008644:	f010 0507 	ands.w	r5, r0, #7
 8008648:	4607      	mov	r7, r0
 800864a:	d005      	beq.n	8008658 <_strtod_l+0x88>
 800864c:	2d06      	cmp	r5, #6
 800864e:	d12b      	bne.n	80086a8 <_strtod_l+0xd8>
 8008650:	3601      	adds	r6, #1
 8008652:	2300      	movs	r3, #0
 8008654:	9617      	str	r6, [sp, #92]	; 0x5c
 8008656:	930b      	str	r3, [sp, #44]	; 0x2c
 8008658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 856e 	bne.w	800913c <_strtod_l+0xb6c>
 8008660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008662:	b1e3      	cbz	r3, 800869e <_strtod_l+0xce>
 8008664:	ec49 8b17 	vmov	d7, r8, r9
 8008668:	eeb1 0b47 	vneg.f64	d0, d7
 800866c:	b01d      	add	sp, #116	; 0x74
 800866e:	ecbd 8b0c 	vpop	{d8-d13}
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	2a20      	cmp	r2, #32
 8008678:	d1cd      	bne.n	8008616 <_strtod_l+0x46>
 800867a:	3301      	adds	r3, #1
 800867c:	9317      	str	r3, [sp, #92]	; 0x5c
 800867e:	e7bf      	b.n	8008600 <_strtod_l+0x30>
 8008680:	2a2d      	cmp	r2, #45	; 0x2d
 8008682:	d1c8      	bne.n	8008616 <_strtod_l+0x46>
 8008684:	2201      	movs	r2, #1
 8008686:	920b      	str	r2, [sp, #44]	; 0x2c
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	9217      	str	r2, [sp, #92]	; 0x5c
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1c3      	bne.n	800861a <_strtod_l+0x4a>
 8008692:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008694:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 854d 	bne.w	8009138 <_strtod_l+0xb68>
 800869e:	ec49 8b10 	vmov	d0, r8, r9
 80086a2:	e7e3      	b.n	800866c <_strtod_l+0x9c>
 80086a4:	2200      	movs	r2, #0
 80086a6:	e7ee      	b.n	8008686 <_strtod_l+0xb6>
 80086a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086aa:	b13a      	cbz	r2, 80086bc <_strtod_l+0xec>
 80086ac:	2135      	movs	r1, #53	; 0x35
 80086ae:	a81a      	add	r0, sp, #104	; 0x68
 80086b0:	f002 fc8a 	bl	800afc8 <__copybits>
 80086b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086b6:	4620      	mov	r0, r4
 80086b8:	f002 f84e 	bl	800a758 <_Bfree>
 80086bc:	3d01      	subs	r5, #1
 80086be:	2d05      	cmp	r5, #5
 80086c0:	d807      	bhi.n	80086d2 <_strtod_l+0x102>
 80086c2:	e8df f005 	tbb	[pc, r5]
 80086c6:	0b0e      	.short	0x0b0e
 80086c8:	030e1d18 	.word	0x030e1d18
 80086cc:	f04f 0900 	mov.w	r9, #0
 80086d0:	46c8      	mov	r8, r9
 80086d2:	073b      	lsls	r3, r7, #28
 80086d4:	d5c0      	bpl.n	8008658 <_strtod_l+0x88>
 80086d6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80086da:	e7bd      	b.n	8008658 <_strtod_l+0x88>
 80086dc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80086e0:	e7f7      	b.n	80086d2 <_strtod_l+0x102>
 80086e2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80086e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80086f4:	e7ed      	b.n	80086d2 <_strtod_l+0x102>
 80086f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008884 <_strtod_l+0x2b4>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	e7e8      	b.n	80086d2 <_strtod_l+0x102>
 8008700:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008704:	f04f 38ff 	mov.w	r8, #4294967295
 8008708:	e7e3      	b.n	80086d2 <_strtod_l+0x102>
 800870a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b30      	cmp	r3, #48	; 0x30
 8008714:	d0f9      	beq.n	800870a <_strtod_l+0x13a>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d09e      	beq.n	8008658 <_strtod_l+0x88>
 800871a:	2301      	movs	r3, #1
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008720:	930c      	str	r3, [sp, #48]	; 0x30
 8008722:	2300      	movs	r3, #0
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	930a      	str	r3, [sp, #40]	; 0x28
 8008728:	461e      	mov	r6, r3
 800872a:	220a      	movs	r2, #10
 800872c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800872e:	f890 b000 	ldrb.w	fp, [r0]
 8008732:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008736:	b2d9      	uxtb	r1, r3
 8008738:	2909      	cmp	r1, #9
 800873a:	d92b      	bls.n	8008794 <_strtod_l+0x1c4>
 800873c:	9908      	ldr	r1, [sp, #32]
 800873e:	462a      	mov	r2, r5
 8008740:	f7ff ff06 	bl	8008550 <strncmp>
 8008744:	2800      	cmp	r0, #0
 8008746:	d035      	beq.n	80087b4 <_strtod_l+0x1e4>
 8008748:	2000      	movs	r0, #0
 800874a:	465a      	mov	r2, fp
 800874c:	4633      	mov	r3, r6
 800874e:	4683      	mov	fp, r0
 8008750:	4601      	mov	r1, r0
 8008752:	2a65      	cmp	r2, #101	; 0x65
 8008754:	d001      	beq.n	800875a <_strtod_l+0x18a>
 8008756:	2a45      	cmp	r2, #69	; 0x45
 8008758:	d118      	bne.n	800878c <_strtod_l+0x1bc>
 800875a:	b91b      	cbnz	r3, 8008764 <_strtod_l+0x194>
 800875c:	9b06      	ldr	r3, [sp, #24]
 800875e:	4303      	orrs	r3, r0
 8008760:	d097      	beq.n	8008692 <_strtod_l+0xc2>
 8008762:	2300      	movs	r3, #0
 8008764:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008768:	f10a 0201 	add.w	r2, sl, #1
 800876c:	9217      	str	r2, [sp, #92]	; 0x5c
 800876e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008772:	2a2b      	cmp	r2, #43	; 0x2b
 8008774:	d077      	beq.n	8008866 <_strtod_l+0x296>
 8008776:	2a2d      	cmp	r2, #45	; 0x2d
 8008778:	d07d      	beq.n	8008876 <_strtod_l+0x2a6>
 800877a:	f04f 0e00 	mov.w	lr, #0
 800877e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008782:	2d09      	cmp	r5, #9
 8008784:	f240 8084 	bls.w	8008890 <_strtod_l+0x2c0>
 8008788:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800878c:	2500      	movs	r5, #0
 800878e:	e09f      	b.n	80088d0 <_strtod_l+0x300>
 8008790:	2300      	movs	r3, #0
 8008792:	e7c3      	b.n	800871c <_strtod_l+0x14c>
 8008794:	2e08      	cmp	r6, #8
 8008796:	bfd5      	itete	le
 8008798:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800879a:	9904      	ldrgt	r1, [sp, #16]
 800879c:	fb02 3301 	mlale	r3, r2, r1, r3
 80087a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80087a4:	f100 0001 	add.w	r0, r0, #1
 80087a8:	bfd4      	ite	le
 80087aa:	930a      	strle	r3, [sp, #40]	; 0x28
 80087ac:	9304      	strgt	r3, [sp, #16]
 80087ae:	3601      	adds	r6, #1
 80087b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80087b2:	e7bb      	b.n	800872c <_strtod_l+0x15c>
 80087b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087b6:	195a      	adds	r2, r3, r5
 80087b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80087ba:	5d5a      	ldrb	r2, [r3, r5]
 80087bc:	b3ae      	cbz	r6, 800882a <_strtod_l+0x25a>
 80087be:	4683      	mov	fp, r0
 80087c0:	4633      	mov	r3, r6
 80087c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087c6:	2909      	cmp	r1, #9
 80087c8:	d912      	bls.n	80087f0 <_strtod_l+0x220>
 80087ca:	2101      	movs	r1, #1
 80087cc:	e7c1      	b.n	8008752 <_strtod_l+0x182>
 80087ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80087d4:	785a      	ldrb	r2, [r3, #1]
 80087d6:	3001      	adds	r0, #1
 80087d8:	2a30      	cmp	r2, #48	; 0x30
 80087da:	d0f8      	beq.n	80087ce <_strtod_l+0x1fe>
 80087dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	f200 84b0 	bhi.w	8009146 <_strtod_l+0xb76>
 80087e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087e8:	930c      	str	r3, [sp, #48]	; 0x30
 80087ea:	4683      	mov	fp, r0
 80087ec:	2000      	movs	r0, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	3a30      	subs	r2, #48	; 0x30
 80087f2:	f100 0101 	add.w	r1, r0, #1
 80087f6:	d012      	beq.n	800881e <_strtod_l+0x24e>
 80087f8:	448b      	add	fp, r1
 80087fa:	eb00 0c03 	add.w	ip, r0, r3
 80087fe:	4619      	mov	r1, r3
 8008800:	250a      	movs	r5, #10
 8008802:	4561      	cmp	r1, ip
 8008804:	d113      	bne.n	800882e <_strtod_l+0x25e>
 8008806:	1819      	adds	r1, r3, r0
 8008808:	2908      	cmp	r1, #8
 800880a:	f103 0301 	add.w	r3, r3, #1
 800880e:	4403      	add	r3, r0
 8008810:	dc1d      	bgt.n	800884e <_strtod_l+0x27e>
 8008812:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008814:	210a      	movs	r1, #10
 8008816:	fb01 2200 	mla	r2, r1, r0, r2
 800881a:	920a      	str	r2, [sp, #40]	; 0x28
 800881c:	2100      	movs	r1, #0
 800881e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008820:	1c50      	adds	r0, r2, #1
 8008822:	9017      	str	r0, [sp, #92]	; 0x5c
 8008824:	7852      	ldrb	r2, [r2, #1]
 8008826:	4608      	mov	r0, r1
 8008828:	e7cb      	b.n	80087c2 <_strtod_l+0x1f2>
 800882a:	4630      	mov	r0, r6
 800882c:	e7d4      	b.n	80087d8 <_strtod_l+0x208>
 800882e:	2908      	cmp	r1, #8
 8008830:	dc04      	bgt.n	800883c <_strtod_l+0x26c>
 8008832:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008834:	436f      	muls	r7, r5
 8008836:	970a      	str	r7, [sp, #40]	; 0x28
 8008838:	3101      	adds	r1, #1
 800883a:	e7e2      	b.n	8008802 <_strtod_l+0x232>
 800883c:	f101 0e01 	add.w	lr, r1, #1
 8008840:	f1be 0f10 	cmp.w	lr, #16
 8008844:	bfde      	ittt	le
 8008846:	9f04      	ldrle	r7, [sp, #16]
 8008848:	436f      	mulle	r7, r5
 800884a:	9704      	strle	r7, [sp, #16]
 800884c:	e7f4      	b.n	8008838 <_strtod_l+0x268>
 800884e:	2b10      	cmp	r3, #16
 8008850:	bfdf      	itttt	le
 8008852:	9804      	ldrle	r0, [sp, #16]
 8008854:	210a      	movle	r1, #10
 8008856:	fb01 2200 	mlale	r2, r1, r0, r2
 800885a:	9204      	strle	r2, [sp, #16]
 800885c:	e7de      	b.n	800881c <_strtod_l+0x24c>
 800885e:	f04f 0b00 	mov.w	fp, #0
 8008862:	2101      	movs	r1, #1
 8008864:	e77a      	b.n	800875c <_strtod_l+0x18c>
 8008866:	f04f 0e00 	mov.w	lr, #0
 800886a:	f10a 0202 	add.w	r2, sl, #2
 800886e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008870:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008874:	e783      	b.n	800877e <_strtod_l+0x1ae>
 8008876:	f04f 0e01 	mov.w	lr, #1
 800887a:	e7f6      	b.n	800886a <_strtod_l+0x29a>
 800887c:	0800d3cc 	.word	0x0800d3cc
 8008880:	0800d154 	.word	0x0800d154
 8008884:	7ff00000 	.word	0x7ff00000
 8008888:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800888a:	1c55      	adds	r5, r2, #1
 800888c:	9517      	str	r5, [sp, #92]	; 0x5c
 800888e:	7852      	ldrb	r2, [r2, #1]
 8008890:	2a30      	cmp	r2, #48	; 0x30
 8008892:	d0f9      	beq.n	8008888 <_strtod_l+0x2b8>
 8008894:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008898:	2d08      	cmp	r5, #8
 800889a:	f63f af77 	bhi.w	800878c <_strtod_l+0x1bc>
 800889e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80088a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088a4:	9208      	str	r2, [sp, #32]
 80088a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088a8:	1c55      	adds	r5, r2, #1
 80088aa:	9517      	str	r5, [sp, #92]	; 0x5c
 80088ac:	7852      	ldrb	r2, [r2, #1]
 80088ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80088b2:	2f09      	cmp	r7, #9
 80088b4:	d937      	bls.n	8008926 <_strtod_l+0x356>
 80088b6:	9f08      	ldr	r7, [sp, #32]
 80088b8:	1bed      	subs	r5, r5, r7
 80088ba:	2d08      	cmp	r5, #8
 80088bc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80088c0:	dc02      	bgt.n	80088c8 <_strtod_l+0x2f8>
 80088c2:	4565      	cmp	r5, ip
 80088c4:	bfa8      	it	ge
 80088c6:	4665      	movge	r5, ip
 80088c8:	f1be 0f00 	cmp.w	lr, #0
 80088cc:	d000      	beq.n	80088d0 <_strtod_l+0x300>
 80088ce:	426d      	negs	r5, r5
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d14f      	bne.n	8008974 <_strtod_l+0x3a4>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	4303      	orrs	r3, r0
 80088d8:	f47f aebe 	bne.w	8008658 <_strtod_l+0x88>
 80088dc:	2900      	cmp	r1, #0
 80088de:	f47f aed8 	bne.w	8008692 <_strtod_l+0xc2>
 80088e2:	2a69      	cmp	r2, #105	; 0x69
 80088e4:	d027      	beq.n	8008936 <_strtod_l+0x366>
 80088e6:	dc24      	bgt.n	8008932 <_strtod_l+0x362>
 80088e8:	2a49      	cmp	r2, #73	; 0x49
 80088ea:	d024      	beq.n	8008936 <_strtod_l+0x366>
 80088ec:	2a4e      	cmp	r2, #78	; 0x4e
 80088ee:	f47f aed0 	bne.w	8008692 <_strtod_l+0xc2>
 80088f2:	499b      	ldr	r1, [pc, #620]	; (8008b60 <_strtod_l+0x590>)
 80088f4:	a817      	add	r0, sp, #92	; 0x5c
 80088f6:	f001 fe01 	bl	800a4fc <__match>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f aec9 	beq.w	8008692 <_strtod_l+0xc2>
 8008900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b28      	cmp	r3, #40	; 0x28
 8008906:	d12d      	bne.n	8008964 <_strtod_l+0x394>
 8008908:	4996      	ldr	r1, [pc, #600]	; (8008b64 <_strtod_l+0x594>)
 800890a:	aa1a      	add	r2, sp, #104	; 0x68
 800890c:	a817      	add	r0, sp, #92	; 0x5c
 800890e:	f001 fe09 	bl	800a524 <__hexnan>
 8008912:	2805      	cmp	r0, #5
 8008914:	d126      	bne.n	8008964 <_strtod_l+0x394>
 8008916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008918:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800891c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008920:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008924:	e698      	b.n	8008658 <_strtod_l+0x88>
 8008926:	250a      	movs	r5, #10
 8008928:	fb05 250c 	mla	r5, r5, ip, r2
 800892c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008930:	e7b9      	b.n	80088a6 <_strtod_l+0x2d6>
 8008932:	2a6e      	cmp	r2, #110	; 0x6e
 8008934:	e7db      	b.n	80088ee <_strtod_l+0x31e>
 8008936:	498c      	ldr	r1, [pc, #560]	; (8008b68 <_strtod_l+0x598>)
 8008938:	a817      	add	r0, sp, #92	; 0x5c
 800893a:	f001 fddf 	bl	800a4fc <__match>
 800893e:	2800      	cmp	r0, #0
 8008940:	f43f aea7 	beq.w	8008692 <_strtod_l+0xc2>
 8008944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008946:	4989      	ldr	r1, [pc, #548]	; (8008b6c <_strtod_l+0x59c>)
 8008948:	3b01      	subs	r3, #1
 800894a:	a817      	add	r0, sp, #92	; 0x5c
 800894c:	9317      	str	r3, [sp, #92]	; 0x5c
 800894e:	f001 fdd5 	bl	800a4fc <__match>
 8008952:	b910      	cbnz	r0, 800895a <_strtod_l+0x38a>
 8008954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008956:	3301      	adds	r3, #1
 8008958:	9317      	str	r3, [sp, #92]	; 0x5c
 800895a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008b80 <_strtod_l+0x5b0>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	e679      	b.n	8008658 <_strtod_l+0x88>
 8008964:	4882      	ldr	r0, [pc, #520]	; (8008b70 <_strtod_l+0x5a0>)
 8008966:	f003 f8bb 	bl	800bae0 <nan>
 800896a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800896e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008972:	e671      	b.n	8008658 <_strtod_l+0x88>
 8008974:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008978:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800897c:	eba5 020b 	sub.w	r2, r5, fp
 8008980:	2e00      	cmp	r6, #0
 8008982:	bf08      	it	eq
 8008984:	461e      	moveq	r6, r3
 8008986:	2b10      	cmp	r3, #16
 8008988:	ed8d 7b08 	vstr	d7, [sp, #32]
 800898c:	9206      	str	r2, [sp, #24]
 800898e:	461a      	mov	r2, r3
 8008990:	bfa8      	it	ge
 8008992:	2210      	movge	r2, #16
 8008994:	2b09      	cmp	r3, #9
 8008996:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800899a:	dd0e      	ble.n	80089ba <_strtod_l+0x3ea>
 800899c:	4975      	ldr	r1, [pc, #468]	; (8008b74 <_strtod_l+0x5a4>)
 800899e:	eddd 7a04 	vldr	s15, [sp, #16]
 80089a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089a6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80089aa:	ed9d 5b08 	vldr	d5, [sp, #32]
 80089ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80089b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089b6:	ec59 8b17 	vmov	r8, r9, d7
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	dc37      	bgt.n	8008a2e <_strtod_l+0x45e>
 80089be:	9906      	ldr	r1, [sp, #24]
 80089c0:	2900      	cmp	r1, #0
 80089c2:	f43f ae49 	beq.w	8008658 <_strtod_l+0x88>
 80089c6:	dd23      	ble.n	8008a10 <_strtod_l+0x440>
 80089c8:	2916      	cmp	r1, #22
 80089ca:	dc0b      	bgt.n	80089e4 <_strtod_l+0x414>
 80089cc:	4b69      	ldr	r3, [pc, #420]	; (8008b74 <_strtod_l+0x5a4>)
 80089ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089d2:	ed93 7b00 	vldr	d7, [r3]
 80089d6:	ec49 8b16 	vmov	d6, r8, r9
 80089da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089de:	ec59 8b17 	vmov	r8, r9, d7
 80089e2:	e639      	b.n	8008658 <_strtod_l+0x88>
 80089e4:	9806      	ldr	r0, [sp, #24]
 80089e6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80089ea:	4281      	cmp	r1, r0
 80089ec:	db1f      	blt.n	8008a2e <_strtod_l+0x45e>
 80089ee:	4a61      	ldr	r2, [pc, #388]	; (8008b74 <_strtod_l+0x5a4>)
 80089f0:	f1c3 030f 	rsb	r3, r3, #15
 80089f4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80089f8:	ed91 7b00 	vldr	d7, [r1]
 80089fc:	ec49 8b16 	vmov	d6, r8, r9
 8008a00:	1ac3      	subs	r3, r0, r3
 8008a02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a0a:	ed92 6b00 	vldr	d6, [r2]
 8008a0e:	e7e4      	b.n	80089da <_strtod_l+0x40a>
 8008a10:	9906      	ldr	r1, [sp, #24]
 8008a12:	3116      	adds	r1, #22
 8008a14:	db0b      	blt.n	8008a2e <_strtod_l+0x45e>
 8008a16:	4b57      	ldr	r3, [pc, #348]	; (8008b74 <_strtod_l+0x5a4>)
 8008a18:	ebab 0505 	sub.w	r5, fp, r5
 8008a1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a20:	ed95 7b00 	vldr	d7, [r5]
 8008a24:	ec49 8b16 	vmov	d6, r8, r9
 8008a28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a2c:	e7d7      	b.n	80089de <_strtod_l+0x40e>
 8008a2e:	9906      	ldr	r1, [sp, #24]
 8008a30:	1a9a      	subs	r2, r3, r2
 8008a32:	440a      	add	r2, r1
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	dd74      	ble.n	8008b22 <_strtod_l+0x552>
 8008a38:	f012 000f 	ands.w	r0, r2, #15
 8008a3c:	d00a      	beq.n	8008a54 <_strtod_l+0x484>
 8008a3e:	494d      	ldr	r1, [pc, #308]	; (8008b74 <_strtod_l+0x5a4>)
 8008a40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008a44:	ed91 7b00 	vldr	d7, [r1]
 8008a48:	ec49 8b16 	vmov	d6, r8, r9
 8008a4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a50:	ec59 8b17 	vmov	r8, r9, d7
 8008a54:	f032 020f 	bics.w	r2, r2, #15
 8008a58:	d04f      	beq.n	8008afa <_strtod_l+0x52a>
 8008a5a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008a5e:	dd22      	ble.n	8008aa6 <_strtod_l+0x4d6>
 8008a60:	2500      	movs	r5, #0
 8008a62:	462e      	mov	r6, r5
 8008a64:	950a      	str	r5, [sp, #40]	; 0x28
 8008a66:	462f      	mov	r7, r5
 8008a68:	2322      	movs	r3, #34	; 0x22
 8008a6a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008b80 <_strtod_l+0x5b0>
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	f04f 0800 	mov.w	r8, #0
 8008a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f43f adee 	beq.w	8008658 <_strtod_l+0x88>
 8008a7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f001 fe6a 	bl	800a758 <_Bfree>
 8008a84:	4639      	mov	r1, r7
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fe66 	bl	800a758 <_Bfree>
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f001 fe62 	bl	800a758 <_Bfree>
 8008a94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a96:	4620      	mov	r0, r4
 8008a98:	f001 fe5e 	bl	800a758 <_Bfree>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 fe5a 	bl	800a758 <_Bfree>
 8008aa4:	e5d8      	b.n	8008658 <_strtod_l+0x88>
 8008aa6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008aaa:	2000      	movs	r0, #0
 8008aac:	4f32      	ldr	r7, [pc, #200]	; (8008b78 <_strtod_l+0x5a8>)
 8008aae:	1112      	asrs	r2, r2, #4
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	2a01      	cmp	r2, #1
 8008ab4:	dc24      	bgt.n	8008b00 <_strtod_l+0x530>
 8008ab6:	b108      	cbz	r0, 8008abc <_strtod_l+0x4ec>
 8008ab8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008abc:	4a2e      	ldr	r2, [pc, #184]	; (8008b78 <_strtod_l+0x5a8>)
 8008abe:	482f      	ldr	r0, [pc, #188]	; (8008b7c <_strtod_l+0x5ac>)
 8008ac0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008ac4:	ed91 7b00 	vldr	d7, [r1]
 8008ac8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008acc:	ec49 8b16 	vmov	d6, r8, r9
 8008ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ad4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ad8:	9905      	ldr	r1, [sp, #20]
 8008ada:	4a29      	ldr	r2, [pc, #164]	; (8008b80 <_strtod_l+0x5b0>)
 8008adc:	400a      	ands	r2, r1
 8008ade:	4282      	cmp	r2, r0
 8008ae0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ae4:	d8bc      	bhi.n	8008a60 <_strtod_l+0x490>
 8008ae6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008aea:	4282      	cmp	r2, r0
 8008aec:	bf86      	itte	hi
 8008aee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008b84 <_strtod_l+0x5b4>
 8008af2:	f04f 38ff 	movhi.w	r8, #4294967295
 8008af6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008afa:	2200      	movs	r2, #0
 8008afc:	9204      	str	r2, [sp, #16]
 8008afe:	e07f      	b.n	8008c00 <_strtod_l+0x630>
 8008b00:	f012 0f01 	tst.w	r2, #1
 8008b04:	d00a      	beq.n	8008b1c <_strtod_l+0x54c>
 8008b06:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8008b0a:	ed90 7b00 	vldr	d7, [r0]
 8008b0e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8008b12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	1052      	asrs	r2, r2, #1
 8008b20:	e7c7      	b.n	8008ab2 <_strtod_l+0x4e2>
 8008b22:	d0ea      	beq.n	8008afa <_strtod_l+0x52a>
 8008b24:	4252      	negs	r2, r2
 8008b26:	f012 000f 	ands.w	r0, r2, #15
 8008b2a:	d00a      	beq.n	8008b42 <_strtod_l+0x572>
 8008b2c:	4911      	ldr	r1, [pc, #68]	; (8008b74 <_strtod_l+0x5a4>)
 8008b2e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b32:	ed91 7b00 	vldr	d7, [r1]
 8008b36:	ec49 8b16 	vmov	d6, r8, r9
 8008b3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b3e:	ec59 8b17 	vmov	r8, r9, d7
 8008b42:	1112      	asrs	r2, r2, #4
 8008b44:	d0d9      	beq.n	8008afa <_strtod_l+0x52a>
 8008b46:	2a1f      	cmp	r2, #31
 8008b48:	dd1e      	ble.n	8008b88 <_strtod_l+0x5b8>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	462e      	mov	r6, r5
 8008b4e:	950a      	str	r5, [sp, #40]	; 0x28
 8008b50:	462f      	mov	r7, r5
 8008b52:	2322      	movs	r3, #34	; 0x22
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	f04f 0900 	mov.w	r9, #0
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	e789      	b.n	8008a74 <_strtod_l+0x4a4>
 8008b60:	0800d129 	.word	0x0800d129
 8008b64:	0800d168 	.word	0x0800d168
 8008b68:	0800d121 	.word	0x0800d121
 8008b6c:	0800d2d1 	.word	0x0800d2d1
 8008b70:	0800d5a3 	.word	0x0800d5a3
 8008b74:	0800d468 	.word	0x0800d468
 8008b78:	0800d440 	.word	0x0800d440
 8008b7c:	7ca00000 	.word	0x7ca00000
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	f012 0110 	ands.w	r1, r2, #16
 8008b8c:	bf18      	it	ne
 8008b8e:	216a      	movne	r1, #106	; 0x6a
 8008b90:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008b94:	9104      	str	r1, [sp, #16]
 8008b96:	49c0      	ldr	r1, [pc, #768]	; (8008e98 <_strtod_l+0x8c8>)
 8008b98:	2000      	movs	r0, #0
 8008b9a:	07d7      	lsls	r7, r2, #31
 8008b9c:	d508      	bpl.n	8008bb0 <_strtod_l+0x5e0>
 8008b9e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8008ba2:	ed91 7b00 	vldr	d7, [r1]
 8008ba6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008baa:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	1052      	asrs	r2, r2, #1
 8008bb2:	f101 0108 	add.w	r1, r1, #8
 8008bb6:	d1f0      	bne.n	8008b9a <_strtod_l+0x5ca>
 8008bb8:	b108      	cbz	r0, 8008bbe <_strtod_l+0x5ee>
 8008bba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008bbe:	9a04      	ldr	r2, [sp, #16]
 8008bc0:	b1ba      	cbz	r2, 8008bf2 <_strtod_l+0x622>
 8008bc2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008bc6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	4649      	mov	r1, r9
 8008bce:	dd10      	ble.n	8008bf2 <_strtod_l+0x622>
 8008bd0:	2a1f      	cmp	r2, #31
 8008bd2:	f340 8132 	ble.w	8008e3a <_strtod_l+0x86a>
 8008bd6:	2a34      	cmp	r2, #52	; 0x34
 8008bd8:	bfde      	ittt	le
 8008bda:	3a20      	suble	r2, #32
 8008bdc:	f04f 30ff 	movle.w	r0, #4294967295
 8008be0:	fa00 f202 	lslle.w	r2, r0, r2
 8008be4:	f04f 0800 	mov.w	r8, #0
 8008be8:	bfcc      	ite	gt
 8008bea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008bee:	ea02 0901 	andle.w	r9, r2, r1
 8008bf2:	ec49 8b17 	vmov	d7, r8, r9
 8008bf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfe:	d0a4      	beq.n	8008b4a <_strtod_l+0x57a>
 8008c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c02:	9200      	str	r2, [sp, #0]
 8008c04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c06:	4632      	mov	r2, r6
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f001 fe11 	bl	800a830 <__s2b>
 8008c0e:	900a      	str	r0, [sp, #40]	; 0x28
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f43f af25 	beq.w	8008a60 <_strtod_l+0x490>
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	ebab 0505 	sub.w	r5, fp, r5
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfb4      	ite	lt
 8008c20:	462b      	movlt	r3, r5
 8008c22:	2300      	movge	r3, #0
 8008c24:	930c      	str	r3, [sp, #48]	; 0x30
 8008c26:	9b06      	ldr	r3, [sp, #24]
 8008c28:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008e80 <_strtod_l+0x8b0>
 8008c2c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008e88 <_strtod_l+0x8b8>
 8008c30:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008e90 <_strtod_l+0x8c0>
 8008c34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c38:	2500      	movs	r5, #0
 8008c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c3c:	462e      	mov	r6, r5
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	4620      	mov	r0, r4
 8008c42:	6859      	ldr	r1, [r3, #4]
 8008c44:	f001 fd48 	bl	800a6d8 <_Balloc>
 8008c48:	4607      	mov	r7, r0
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f43f af0c 	beq.w	8008a68 <_strtod_l+0x498>
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	3202      	adds	r2, #2
 8008c56:	f103 010c 	add.w	r1, r3, #12
 8008c5a:	0092      	lsls	r2, r2, #2
 8008c5c:	300c      	adds	r0, #12
 8008c5e:	f001 fd2d 	bl	800a6bc <memcpy>
 8008c62:	ec49 8b10 	vmov	d0, r8, r9
 8008c66:	aa1a      	add	r2, sp, #104	; 0x68
 8008c68:	a919      	add	r1, sp, #100	; 0x64
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008c70:	f002 f91a 	bl	800aea8 <__d2b>
 8008c74:	9018      	str	r0, [sp, #96]	; 0x60
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f aef6 	beq.w	8008a68 <_strtod_l+0x498>
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 fe70 	bl	800a964 <__i2b>
 8008c84:	4606      	mov	r6, r0
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f aeee 	beq.w	8008a68 <_strtod_l+0x498>
 8008c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfab      	itete	ge
 8008c94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008c96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008c98:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8008c9c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008ca0:	bfac      	ite	ge
 8008ca2:	eb03 0b02 	addge.w	fp, r3, r2
 8008ca6:	eba2 0a03 	sublt.w	sl, r2, r3
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	440b      	add	r3, r1
 8008cb0:	4a7a      	ldr	r2, [pc, #488]	; (8008e9c <_strtod_l+0x8cc>)
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008cba:	f280 80d1 	bge.w	8008e60 <_strtod_l+0x890>
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	2a1f      	cmp	r2, #31
 8008cc2:	eba1 0102 	sub.w	r1, r1, r2
 8008cc6:	f04f 0001 	mov.w	r0, #1
 8008cca:	f300 80bd 	bgt.w	8008e48 <_strtod_l+0x878>
 8008cce:	fa00 f302 	lsl.w	r3, r0, r2
 8008cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cd8:	eb0b 0301 	add.w	r3, fp, r1
 8008cdc:	9a04      	ldr	r2, [sp, #16]
 8008cde:	459b      	cmp	fp, r3
 8008ce0:	448a      	add	sl, r1
 8008ce2:	4492      	add	sl, r2
 8008ce4:	465a      	mov	r2, fp
 8008ce6:	bfa8      	it	ge
 8008ce8:	461a      	movge	r2, r3
 8008cea:	4552      	cmp	r2, sl
 8008cec:	bfa8      	it	ge
 8008cee:	4652      	movge	r2, sl
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	bfc2      	ittt	gt
 8008cf4:	1a9b      	subgt	r3, r3, r2
 8008cf6:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008cfa:	ebab 0b02 	subgt.w	fp, fp, r2
 8008cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	dd18      	ble.n	8008d36 <_strtod_l+0x766>
 8008d04:	4631      	mov	r1, r6
 8008d06:	4620      	mov	r0, r4
 8008d08:	9315      	str	r3, [sp, #84]	; 0x54
 8008d0a:	f001 fee7 	bl	800aadc <__pow5mult>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	2800      	cmp	r0, #0
 8008d12:	f43f aea9 	beq.w	8008a68 <_strtod_l+0x498>
 8008d16:	4601      	mov	r1, r0
 8008d18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f001 fe38 	bl	800a990 <__multiply>
 8008d20:	9014      	str	r0, [sp, #80]	; 0x50
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f43f aea0 	beq.w	8008a68 <_strtod_l+0x498>
 8008d28:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f001 fd14 	bl	800a758 <_Bfree>
 8008d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d34:	9218      	str	r2, [sp, #96]	; 0x60
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f300 8097 	bgt.w	8008e6a <_strtod_l+0x89a>
 8008d3c:	9b06      	ldr	r3, [sp, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd08      	ble.n	8008d54 <_strtod_l+0x784>
 8008d42:	4639      	mov	r1, r7
 8008d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d46:	4620      	mov	r0, r4
 8008d48:	f001 fec8 	bl	800aadc <__pow5mult>
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f ae8a 	beq.w	8008a68 <_strtod_l+0x498>
 8008d54:	f1ba 0f00 	cmp.w	sl, #0
 8008d58:	dd08      	ble.n	8008d6c <_strtod_l+0x79c>
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f001 ff16 	bl	800ab90 <__lshift>
 8008d64:	4607      	mov	r7, r0
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f ae7e 	beq.w	8008a68 <_strtod_l+0x498>
 8008d6c:	f1bb 0f00 	cmp.w	fp, #0
 8008d70:	dd08      	ble.n	8008d84 <_strtod_l+0x7b4>
 8008d72:	4631      	mov	r1, r6
 8008d74:	465a      	mov	r2, fp
 8008d76:	4620      	mov	r0, r4
 8008d78:	f001 ff0a 	bl	800ab90 <__lshift>
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f ae72 	beq.w	8008a68 <_strtod_l+0x498>
 8008d84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d86:	463a      	mov	r2, r7
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f001 ff89 	bl	800aca0 <__mdiff>
 8008d8e:	4605      	mov	r5, r0
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f43f ae69 	beq.w	8008a68 <_strtod_l+0x498>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008d9c:	60c3      	str	r3, [r0, #12]
 8008d9e:	4631      	mov	r1, r6
 8008da0:	f001 ff62 	bl	800ac68 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	da7f      	bge.n	8008ea8 <_strtod_l+0x8d8>
 8008da8:	ea5a 0308 	orrs.w	r3, sl, r8
 8008dac:	f040 80a5 	bne.w	8008efa <_strtod_l+0x92a>
 8008db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 80a0 	bne.w	8008efa <_strtod_l+0x92a>
 8008dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dbe:	0d1b      	lsrs	r3, r3, #20
 8008dc0:	051b      	lsls	r3, r3, #20
 8008dc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dc6:	f240 8098 	bls.w	8008efa <_strtod_l+0x92a>
 8008dca:	696b      	ldr	r3, [r5, #20]
 8008dcc:	b91b      	cbnz	r3, 8008dd6 <_strtod_l+0x806>
 8008dce:	692b      	ldr	r3, [r5, #16]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	f340 8092 	ble.w	8008efa <_strtod_l+0x92a>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f001 fed8 	bl	800ab90 <__lshift>
 8008de0:	4631      	mov	r1, r6
 8008de2:	4605      	mov	r5, r0
 8008de4:	f001 ff40 	bl	800ac68 <__mcmp>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f340 8086 	ble.w	8008efa <_strtod_l+0x92a>
 8008dee:	9904      	ldr	r1, [sp, #16]
 8008df0:	4a2b      	ldr	r2, [pc, #172]	; (8008ea0 <_strtod_l+0x8d0>)
 8008df2:	464b      	mov	r3, r9
 8008df4:	2900      	cmp	r1, #0
 8008df6:	f000 80a1 	beq.w	8008f3c <_strtod_l+0x96c>
 8008dfa:	ea02 0109 	and.w	r1, r2, r9
 8008dfe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e02:	f300 809b 	bgt.w	8008f3c <_strtod_l+0x96c>
 8008e06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e0a:	f77f aea2 	ble.w	8008b52 <_strtod_l+0x582>
 8008e0e:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <_strtod_l+0x8d4>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008e16:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8008e1a:	ec49 8b17 	vmov	d7, r8, r9
 8008e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e26:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	bf08      	it	eq
 8008e2e:	2322      	moveq	r3, #34	; 0x22
 8008e30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e34:	bf08      	it	eq
 8008e36:	6023      	streq	r3, [r4, #0]
 8008e38:	e620      	b.n	8008a7c <_strtod_l+0x4ac>
 8008e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e42:	ea02 0808 	and.w	r8, r2, r8
 8008e46:	e6d4      	b.n	8008bf2 <_strtod_l+0x622>
 8008e48:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008e4c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008e50:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008e54:	33e2      	adds	r3, #226	; 0xe2
 8008e56:	fa00 f303 	lsl.w	r3, r0, r3
 8008e5a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8008e5e:	e73b      	b.n	8008cd8 <_strtod_l+0x708>
 8008e60:	2000      	movs	r0, #0
 8008e62:	2301      	movs	r3, #1
 8008e64:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008e68:	e736      	b.n	8008cd8 <_strtod_l+0x708>
 8008e6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 fe8e 	bl	800ab90 <__lshift>
 8008e74:	9018      	str	r0, [sp, #96]	; 0x60
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f47f af60 	bne.w	8008d3c <_strtod_l+0x76c>
 8008e7c:	e5f4      	b.n	8008a68 <_strtod_l+0x498>
 8008e7e:	bf00      	nop
 8008e80:	94a03595 	.word	0x94a03595
 8008e84:	3fcfffff 	.word	0x3fcfffff
 8008e88:	94a03595 	.word	0x94a03595
 8008e8c:	3fdfffff 	.word	0x3fdfffff
 8008e90:	35afe535 	.word	0x35afe535
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	0800d180 	.word	0x0800d180
 8008e9c:	fffffc02 	.word	0xfffffc02
 8008ea0:	7ff00000 	.word	0x7ff00000
 8008ea4:	39500000 	.word	0x39500000
 8008ea8:	46cb      	mov	fp, r9
 8008eaa:	d165      	bne.n	8008f78 <_strtod_l+0x9a8>
 8008eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008eb0:	f1ba 0f00 	cmp.w	sl, #0
 8008eb4:	d02a      	beq.n	8008f0c <_strtod_l+0x93c>
 8008eb6:	4aaa      	ldr	r2, [pc, #680]	; (8009160 <_strtod_l+0xb90>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d12b      	bne.n	8008f14 <_strtod_l+0x944>
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	b1fb      	cbz	r3, 8008f02 <_strtod_l+0x932>
 8008ec2:	4aa8      	ldr	r2, [pc, #672]	; (8009164 <_strtod_l+0xb94>)
 8008ec4:	ea09 0202 	and.w	r2, r9, r2
 8008ec8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	d81a      	bhi.n	8008f08 <_strtod_l+0x938>
 8008ed2:	0d12      	lsrs	r2, r2, #20
 8008ed4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ed8:	fa00 f303 	lsl.w	r3, r0, r3
 8008edc:	4299      	cmp	r1, r3
 8008ede:	d119      	bne.n	8008f14 <_strtod_l+0x944>
 8008ee0:	4ba1      	ldr	r3, [pc, #644]	; (8009168 <_strtod_l+0xb98>)
 8008ee2:	459b      	cmp	fp, r3
 8008ee4:	d102      	bne.n	8008eec <_strtod_l+0x91c>
 8008ee6:	3101      	adds	r1, #1
 8008ee8:	f43f adbe 	beq.w	8008a68 <_strtod_l+0x498>
 8008eec:	4b9d      	ldr	r3, [pc, #628]	; (8009164 <_strtod_l+0xb94>)
 8008eee:	ea0b 0303 	and.w	r3, fp, r3
 8008ef2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	9b04      	ldr	r3, [sp, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d186      	bne.n	8008e0e <_strtod_l+0x83e>
 8008f00:	e5bc      	b.n	8008a7c <_strtod_l+0x4ac>
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	e7e9      	b.n	8008edc <_strtod_l+0x90c>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	e7e7      	b.n	8008edc <_strtod_l+0x90c>
 8008f0c:	ea53 0308 	orrs.w	r3, r3, r8
 8008f10:	f43f af6d 	beq.w	8008dee <_strtod_l+0x81e>
 8008f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f16:	b1db      	cbz	r3, 8008f50 <_strtod_l+0x980>
 8008f18:	ea13 0f0b 	tst.w	r3, fp
 8008f1c:	d0ed      	beq.n	8008efa <_strtod_l+0x92a>
 8008f1e:	9a04      	ldr	r2, [sp, #16]
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f1ba 0f00 	cmp.w	sl, #0
 8008f28:	d016      	beq.n	8008f58 <_strtod_l+0x988>
 8008f2a:	f7ff fb36 	bl	800859a <sulp>
 8008f2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008f32:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008f36:	ec59 8b17 	vmov	r8, r9, d7
 8008f3a:	e7de      	b.n	8008efa <_strtod_l+0x92a>
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f42:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008f46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008f4a:	f04f 38ff 	mov.w	r8, #4294967295
 8008f4e:	e7d4      	b.n	8008efa <_strtod_l+0x92a>
 8008f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f52:	ea13 0f08 	tst.w	r3, r8
 8008f56:	e7e1      	b.n	8008f1c <_strtod_l+0x94c>
 8008f58:	f7ff fb1f 	bl	800859a <sulp>
 8008f5c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008f60:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008f64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008f74:	d1c1      	bne.n	8008efa <_strtod_l+0x92a>
 8008f76:	e5ec      	b.n	8008b52 <_strtod_l+0x582>
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f001 fff0 	bl	800af60 <__ratio>
 8008f80:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008f84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8c:	d867      	bhi.n	800905e <_strtod_l+0xa8e>
 8008f8e:	f1ba 0f00 	cmp.w	sl, #0
 8008f92:	d044      	beq.n	800901e <_strtod_l+0xa4e>
 8008f94:	4b75      	ldr	r3, [pc, #468]	; (800916c <_strtod_l+0xb9c>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008f9c:	4971      	ldr	r1, [pc, #452]	; (8009164 <_strtod_l+0xb94>)
 8008f9e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009178 <_strtod_l+0xba8>
 8008fa2:	ea0b 0001 	and.w	r0, fp, r1
 8008fa6:	4560      	cmp	r0, ip
 8008fa8:	900d      	str	r0, [sp, #52]	; 0x34
 8008faa:	f040 808b 	bne.w	80090c4 <_strtod_l+0xaf4>
 8008fae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fb2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008fb6:	ec49 8b10 	vmov	d0, r8, r9
 8008fba:	ec43 2b1c 	vmov	d12, r2, r3
 8008fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fc2:	f001 fef5 	bl	800adb0 <__ulp>
 8008fc6:	ec49 8b1d 	vmov	d13, r8, r9
 8008fca:	eeac db00 	vfma.f64	d13, d12, d0
 8008fce:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8008fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fd4:	4963      	ldr	r1, [pc, #396]	; (8009164 <_strtod_l+0xb94>)
 8008fd6:	4a66      	ldr	r2, [pc, #408]	; (8009170 <_strtod_l+0xba0>)
 8008fd8:	4019      	ands	r1, r3
 8008fda:	4291      	cmp	r1, r2
 8008fdc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008fe0:	d947      	bls.n	8009072 <_strtod_l+0xaa2>
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d103      	bne.n	8008ff4 <_strtod_l+0xa24>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	f43f ad3a 	beq.w	8008a68 <_strtod_l+0x498>
 8008ff4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009168 <_strtod_l+0xb98>
 8008ff8:	f04f 38ff 	mov.w	r8, #4294967295
 8008ffc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ffe:	4620      	mov	r0, r4
 8009000:	f001 fbaa 	bl	800a758 <_Bfree>
 8009004:	4639      	mov	r1, r7
 8009006:	4620      	mov	r0, r4
 8009008:	f001 fba6 	bl	800a758 <_Bfree>
 800900c:	4631      	mov	r1, r6
 800900e:	4620      	mov	r0, r4
 8009010:	f001 fba2 	bl	800a758 <_Bfree>
 8009014:	4629      	mov	r1, r5
 8009016:	4620      	mov	r0, r4
 8009018:	f001 fb9e 	bl	800a758 <_Bfree>
 800901c:	e60f      	b.n	8008c3e <_strtod_l+0x66e>
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	d112      	bne.n	800904a <_strtod_l+0xa7a>
 8009024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009028:	b9b3      	cbnz	r3, 8009058 <_strtod_l+0xa88>
 800902a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800902e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009036:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800903a:	d401      	bmi.n	8009040 <_strtod_l+0xa70>
 800903c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009040:	eeb1 7b48 	vneg.f64	d7, d8
 8009044:	ec53 2b17 	vmov	r2, r3, d7
 8009048:	e7a8      	b.n	8008f9c <_strtod_l+0x9cc>
 800904a:	f1b8 0f01 	cmp.w	r8, #1
 800904e:	d103      	bne.n	8009058 <_strtod_l+0xa88>
 8009050:	f1b9 0f00 	cmp.w	r9, #0
 8009054:	f43f ad7d 	beq.w	8008b52 <_strtod_l+0x582>
 8009058:	4b46      	ldr	r3, [pc, #280]	; (8009174 <_strtod_l+0xba4>)
 800905a:	2200      	movs	r2, #0
 800905c:	e79c      	b.n	8008f98 <_strtod_l+0x9c8>
 800905e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009062:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	d0e9      	beq.n	8009040 <_strtod_l+0xa70>
 800906c:	ec53 2b18 	vmov	r2, r3, d8
 8009070:	e794      	b.n	8008f9c <_strtod_l+0x9cc>
 8009072:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1bf      	bne.n	8008ffc <_strtod_l+0xa2c>
 800907c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009082:	0d1b      	lsrs	r3, r3, #20
 8009084:	051b      	lsls	r3, r3, #20
 8009086:	429a      	cmp	r2, r3
 8009088:	d1b8      	bne.n	8008ffc <_strtod_l+0xa2c>
 800908a:	ec51 0b18 	vmov	r0, r1, d8
 800908e:	f7f7 fb13 	bl	80006b8 <__aeabi_d2lz>
 8009092:	f7f7 facb 	bl	800062c <__aeabi_l2d>
 8009096:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800909a:	ec41 0b17 	vmov	d7, r0, r1
 800909e:	ea43 0308 	orr.w	r3, r3, r8
 80090a2:	ea53 030a 	orrs.w	r3, r3, sl
 80090a6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80090aa:	d03e      	beq.n	800912a <_strtod_l+0xb5a>
 80090ac:	eeb4 8bca 	vcmpe.f64	d8, d10
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	f53f ace2 	bmi.w	8008a7c <_strtod_l+0x4ac>
 80090b8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	dd9c      	ble.n	8008ffc <_strtod_l+0xa2c>
 80090c2:	e4db      	b.n	8008a7c <_strtod_l+0x4ac>
 80090c4:	9904      	ldr	r1, [sp, #16]
 80090c6:	b301      	cbz	r1, 800910a <_strtod_l+0xb3a>
 80090c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090ca:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80090ce:	d81c      	bhi.n	800910a <_strtod_l+0xb3a>
 80090d0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009158 <_strtod_l+0xb88>
 80090d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80090d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090dc:	d811      	bhi.n	8009102 <_strtod_l+0xb32>
 80090de:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80090e2:	ee18 3a10 	vmov	r3, s16
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	bf38      	it	cc
 80090ea:	2301      	movcc	r3, #1
 80090ec:	ee08 3a10 	vmov	s16, r3
 80090f0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80090f4:	f1ba 0f00 	cmp.w	sl, #0
 80090f8:	d114      	bne.n	8009124 <_strtod_l+0xb54>
 80090fa:	eeb1 7b48 	vneg.f64	d7, d8
 80090fe:	ec53 2b17 	vmov	r2, r3, d7
 8009102:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009104:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009108:	1a0b      	subs	r3, r1, r0
 800910a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800910e:	ec43 2b1c 	vmov	d12, r2, r3
 8009112:	f001 fe4d 	bl	800adb0 <__ulp>
 8009116:	ed9d 7b08 	vldr	d7, [sp, #32]
 800911a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800911e:	ec59 8b17 	vmov	r8, r9, d7
 8009122:	e7a8      	b.n	8009076 <_strtod_l+0xaa6>
 8009124:	ec53 2b18 	vmov	r2, r3, d8
 8009128:	e7eb      	b.n	8009102 <_strtod_l+0xb32>
 800912a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009132:	f57f af63 	bpl.w	8008ffc <_strtod_l+0xa2c>
 8009136:	e4a1      	b.n	8008a7c <_strtod_l+0x4ac>
 8009138:	2300      	movs	r3, #0
 800913a:	930b      	str	r3, [sp, #44]	; 0x2c
 800913c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800913e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	f7ff ba8d 	b.w	8008660 <_strtod_l+0x90>
 8009146:	2a65      	cmp	r2, #101	; 0x65
 8009148:	f43f ab89 	beq.w	800885e <_strtod_l+0x28e>
 800914c:	2a45      	cmp	r2, #69	; 0x45
 800914e:	f43f ab86 	beq.w	800885e <_strtod_l+0x28e>
 8009152:	2101      	movs	r1, #1
 8009154:	f7ff bbbe 	b.w	80088d4 <_strtod_l+0x304>
 8009158:	ffc00000 	.word	0xffc00000
 800915c:	41dfffff 	.word	0x41dfffff
 8009160:	000fffff 	.word	0x000fffff
 8009164:	7ff00000 	.word	0x7ff00000
 8009168:	7fefffff 	.word	0x7fefffff
 800916c:	3ff00000 	.word	0x3ff00000
 8009170:	7c9fffff 	.word	0x7c9fffff
 8009174:	bff00000 	.word	0xbff00000
 8009178:	7fe00000 	.word	0x7fe00000

0800917c <_strtod_r>:
 800917c:	4b01      	ldr	r3, [pc, #4]	; (8009184 <_strtod_r+0x8>)
 800917e:	f7ff ba27 	b.w	80085d0 <_strtod_l>
 8009182:	bf00      	nop
 8009184:	20000100 	.word	0x20000100

08009188 <_strtol_l.isra.0>:
 8009188:	2b01      	cmp	r3, #1
 800918a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918e:	d001      	beq.n	8009194 <_strtol_l.isra.0+0xc>
 8009190:	2b24      	cmp	r3, #36	; 0x24
 8009192:	d906      	bls.n	80091a2 <_strtol_l.isra.0+0x1a>
 8009194:	f7fe fa9c 	bl	80076d0 <__errno>
 8009198:	2316      	movs	r3, #22
 800919a:	6003      	str	r3, [r0, #0]
 800919c:	2000      	movs	r0, #0
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	4f3a      	ldr	r7, [pc, #232]	; (800928c <_strtol_l.isra.0+0x104>)
 80091a4:	468e      	mov	lr, r1
 80091a6:	4676      	mov	r6, lr
 80091a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80091ac:	5de5      	ldrb	r5, [r4, r7]
 80091ae:	f015 0508 	ands.w	r5, r5, #8
 80091b2:	d1f8      	bne.n	80091a6 <_strtol_l.isra.0+0x1e>
 80091b4:	2c2d      	cmp	r4, #45	; 0x2d
 80091b6:	d134      	bne.n	8009222 <_strtol_l.isra.0+0x9a>
 80091b8:	f89e 4000 	ldrb.w	r4, [lr]
 80091bc:	f04f 0801 	mov.w	r8, #1
 80091c0:	f106 0e02 	add.w	lr, r6, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d05c      	beq.n	8009282 <_strtol_l.isra.0+0xfa>
 80091c8:	2b10      	cmp	r3, #16
 80091ca:	d10c      	bne.n	80091e6 <_strtol_l.isra.0+0x5e>
 80091cc:	2c30      	cmp	r4, #48	; 0x30
 80091ce:	d10a      	bne.n	80091e6 <_strtol_l.isra.0+0x5e>
 80091d0:	f89e 4000 	ldrb.w	r4, [lr]
 80091d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80091d8:	2c58      	cmp	r4, #88	; 0x58
 80091da:	d14d      	bne.n	8009278 <_strtol_l.isra.0+0xf0>
 80091dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80091e0:	2310      	movs	r3, #16
 80091e2:	f10e 0e02 	add.w	lr, lr, #2
 80091e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80091ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091ee:	2600      	movs	r6, #0
 80091f0:	fbbc f9f3 	udiv	r9, ip, r3
 80091f4:	4635      	mov	r5, r6
 80091f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80091fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091fe:	2f09      	cmp	r7, #9
 8009200:	d818      	bhi.n	8009234 <_strtol_l.isra.0+0xac>
 8009202:	463c      	mov	r4, r7
 8009204:	42a3      	cmp	r3, r4
 8009206:	dd24      	ble.n	8009252 <_strtol_l.isra.0+0xca>
 8009208:	2e00      	cmp	r6, #0
 800920a:	db1f      	blt.n	800924c <_strtol_l.isra.0+0xc4>
 800920c:	45a9      	cmp	r9, r5
 800920e:	d31d      	bcc.n	800924c <_strtol_l.isra.0+0xc4>
 8009210:	d101      	bne.n	8009216 <_strtol_l.isra.0+0x8e>
 8009212:	45a2      	cmp	sl, r4
 8009214:	db1a      	blt.n	800924c <_strtol_l.isra.0+0xc4>
 8009216:	fb05 4503 	mla	r5, r5, r3, r4
 800921a:	2601      	movs	r6, #1
 800921c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009220:	e7eb      	b.n	80091fa <_strtol_l.isra.0+0x72>
 8009222:	2c2b      	cmp	r4, #43	; 0x2b
 8009224:	bf08      	it	eq
 8009226:	f89e 4000 	ldrbeq.w	r4, [lr]
 800922a:	46a8      	mov	r8, r5
 800922c:	bf08      	it	eq
 800922e:	f106 0e02 	addeq.w	lr, r6, #2
 8009232:	e7c7      	b.n	80091c4 <_strtol_l.isra.0+0x3c>
 8009234:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009238:	2f19      	cmp	r7, #25
 800923a:	d801      	bhi.n	8009240 <_strtol_l.isra.0+0xb8>
 800923c:	3c37      	subs	r4, #55	; 0x37
 800923e:	e7e1      	b.n	8009204 <_strtol_l.isra.0+0x7c>
 8009240:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009244:	2f19      	cmp	r7, #25
 8009246:	d804      	bhi.n	8009252 <_strtol_l.isra.0+0xca>
 8009248:	3c57      	subs	r4, #87	; 0x57
 800924a:	e7db      	b.n	8009204 <_strtol_l.isra.0+0x7c>
 800924c:	f04f 36ff 	mov.w	r6, #4294967295
 8009250:	e7e4      	b.n	800921c <_strtol_l.isra.0+0x94>
 8009252:	2e00      	cmp	r6, #0
 8009254:	da05      	bge.n	8009262 <_strtol_l.isra.0+0xda>
 8009256:	2322      	movs	r3, #34	; 0x22
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	4665      	mov	r5, ip
 800925c:	b942      	cbnz	r2, 8009270 <_strtol_l.isra.0+0xe8>
 800925e:	4628      	mov	r0, r5
 8009260:	e79d      	b.n	800919e <_strtol_l.isra.0+0x16>
 8009262:	f1b8 0f00 	cmp.w	r8, #0
 8009266:	d000      	beq.n	800926a <_strtol_l.isra.0+0xe2>
 8009268:	426d      	negs	r5, r5
 800926a:	2a00      	cmp	r2, #0
 800926c:	d0f7      	beq.n	800925e <_strtol_l.isra.0+0xd6>
 800926e:	b10e      	cbz	r6, 8009274 <_strtol_l.isra.0+0xec>
 8009270:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	e7f2      	b.n	800925e <_strtol_l.isra.0+0xd6>
 8009278:	2430      	movs	r4, #48	; 0x30
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1b3      	bne.n	80091e6 <_strtol_l.isra.0+0x5e>
 800927e:	2308      	movs	r3, #8
 8009280:	e7b1      	b.n	80091e6 <_strtol_l.isra.0+0x5e>
 8009282:	2c30      	cmp	r4, #48	; 0x30
 8009284:	d0a4      	beq.n	80091d0 <_strtol_l.isra.0+0x48>
 8009286:	230a      	movs	r3, #10
 8009288:	e7ad      	b.n	80091e6 <_strtol_l.isra.0+0x5e>
 800928a:	bf00      	nop
 800928c:	0800d1ce 	.word	0x0800d1ce

08009290 <_strtol_r>:
 8009290:	f7ff bf7a 	b.w	8009188 <_strtol_l.isra.0>

08009294 <__utoa>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	4c1f      	ldr	r4, [pc, #124]	; (8009314 <__utoa+0x80>)
 8009298:	b08b      	sub	sp, #44	; 0x2c
 800929a:	4605      	mov	r5, r0
 800929c:	460b      	mov	r3, r1
 800929e:	466e      	mov	r6, sp
 80092a0:	f104 0c20 	add.w	ip, r4, #32
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	6861      	ldr	r1, [r4, #4]
 80092a8:	4637      	mov	r7, r6
 80092aa:	c703      	stmia	r7!, {r0, r1}
 80092ac:	3408      	adds	r4, #8
 80092ae:	4564      	cmp	r4, ip
 80092b0:	463e      	mov	r6, r7
 80092b2:	d1f7      	bne.n	80092a4 <__utoa+0x10>
 80092b4:	7921      	ldrb	r1, [r4, #4]
 80092b6:	7139      	strb	r1, [r7, #4]
 80092b8:	1e91      	subs	r1, r2, #2
 80092ba:	6820      	ldr	r0, [r4, #0]
 80092bc:	6038      	str	r0, [r7, #0]
 80092be:	2922      	cmp	r1, #34	; 0x22
 80092c0:	f04f 0100 	mov.w	r1, #0
 80092c4:	d904      	bls.n	80092d0 <__utoa+0x3c>
 80092c6:	7019      	strb	r1, [r3, #0]
 80092c8:	460b      	mov	r3, r1
 80092ca:	4618      	mov	r0, r3
 80092cc:	b00b      	add	sp, #44	; 0x2c
 80092ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d0:	1e58      	subs	r0, r3, #1
 80092d2:	4684      	mov	ip, r0
 80092d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80092d8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80092dc:	fb02 5617 	mls	r6, r2, r7, r5
 80092e0:	4476      	add	r6, lr
 80092e2:	460c      	mov	r4, r1
 80092e4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80092e8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80092ec:	462e      	mov	r6, r5
 80092ee:	42b2      	cmp	r2, r6
 80092f0:	f101 0101 	add.w	r1, r1, #1
 80092f4:	463d      	mov	r5, r7
 80092f6:	d9ed      	bls.n	80092d4 <__utoa+0x40>
 80092f8:	2200      	movs	r2, #0
 80092fa:	545a      	strb	r2, [r3, r1]
 80092fc:	1919      	adds	r1, r3, r4
 80092fe:	1aa5      	subs	r5, r4, r2
 8009300:	42aa      	cmp	r2, r5
 8009302:	dae2      	bge.n	80092ca <__utoa+0x36>
 8009304:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009308:	780e      	ldrb	r6, [r1, #0]
 800930a:	7006      	strb	r6, [r0, #0]
 800930c:	3201      	adds	r2, #1
 800930e:	f801 5901 	strb.w	r5, [r1], #-1
 8009312:	e7f4      	b.n	80092fe <__utoa+0x6a>
 8009314:	0800d1a8 	.word	0x0800d1a8

08009318 <_write_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	; (8009338 <_write_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7f9 f99f 	bl	800266a <_write>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_write_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_write_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	200186e0 	.word	0x200186e0

0800933c <_close_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d06      	ldr	r5, [pc, #24]	; (8009358 <_close_r+0x1c>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	f7f9 f9ab 	bl	80026a2 <_close>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_close_r+0x1a>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_close_r+0x1a>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	200186e0 	.word	0x200186e0

0800935c <quorem>:
 800935c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	6903      	ldr	r3, [r0, #16]
 8009362:	690c      	ldr	r4, [r1, #16]
 8009364:	42a3      	cmp	r3, r4
 8009366:	4607      	mov	r7, r0
 8009368:	f2c0 8081 	blt.w	800946e <quorem+0x112>
 800936c:	3c01      	subs	r4, #1
 800936e:	f101 0814 	add.w	r8, r1, #20
 8009372:	f100 0514 	add.w	r5, r0, #20
 8009376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009384:	3301      	adds	r3, #1
 8009386:	429a      	cmp	r2, r3
 8009388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800938c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009390:	fbb2 f6f3 	udiv	r6, r2, r3
 8009394:	d331      	bcc.n	80093fa <quorem+0x9e>
 8009396:	f04f 0e00 	mov.w	lr, #0
 800939a:	4640      	mov	r0, r8
 800939c:	46ac      	mov	ip, r5
 800939e:	46f2      	mov	sl, lr
 80093a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80093a4:	b293      	uxth	r3, r2
 80093a6:	fb06 e303 	mla	r3, r6, r3, lr
 80093aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ebaa 0303 	sub.w	r3, sl, r3
 80093b4:	0c12      	lsrs	r2, r2, #16
 80093b6:	f8dc a000 	ldr.w	sl, [ip]
 80093ba:	fb06 e202 	mla	r2, r6, r2, lr
 80093be:	fa13 f38a 	uxtah	r3, r3, sl
 80093c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093c6:	fa1f fa82 	uxth.w	sl, r2
 80093ca:	f8dc 2000 	ldr.w	r2, [ip]
 80093ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80093d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093dc:	4581      	cmp	r9, r0
 80093de:	f84c 3b04 	str.w	r3, [ip], #4
 80093e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093e6:	d2db      	bcs.n	80093a0 <quorem+0x44>
 80093e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80093ec:	b92b      	cbnz	r3, 80093fa <quorem+0x9e>
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	429d      	cmp	r5, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	d32e      	bcc.n	8009456 <quorem+0xfa>
 80093f8:	613c      	str	r4, [r7, #16]
 80093fa:	4638      	mov	r0, r7
 80093fc:	f001 fc34 	bl	800ac68 <__mcmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	db24      	blt.n	800944e <quorem+0xf2>
 8009404:	3601      	adds	r6, #1
 8009406:	4628      	mov	r0, r5
 8009408:	f04f 0c00 	mov.w	ip, #0
 800940c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009410:	f8d0 e000 	ldr.w	lr, [r0]
 8009414:	b293      	uxth	r3, r2
 8009416:	ebac 0303 	sub.w	r3, ip, r3
 800941a:	0c12      	lsrs	r2, r2, #16
 800941c:	fa13 f38e 	uxtah	r3, r3, lr
 8009420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800942e:	45c1      	cmp	r9, r8
 8009430:	f840 3b04 	str.w	r3, [r0], #4
 8009434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009438:	d2e8      	bcs.n	800940c <quorem+0xb0>
 800943a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800943e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009442:	b922      	cbnz	r2, 800944e <quorem+0xf2>
 8009444:	3b04      	subs	r3, #4
 8009446:	429d      	cmp	r5, r3
 8009448:	461a      	mov	r2, r3
 800944a:	d30a      	bcc.n	8009462 <quorem+0x106>
 800944c:	613c      	str	r4, [r7, #16]
 800944e:	4630      	mov	r0, r6
 8009450:	b003      	add	sp, #12
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	3b04      	subs	r3, #4
 800945a:	2a00      	cmp	r2, #0
 800945c:	d1cc      	bne.n	80093f8 <quorem+0x9c>
 800945e:	3c01      	subs	r4, #1
 8009460:	e7c7      	b.n	80093f2 <quorem+0x96>
 8009462:	6812      	ldr	r2, [r2, #0]
 8009464:	3b04      	subs	r3, #4
 8009466:	2a00      	cmp	r2, #0
 8009468:	d1f0      	bne.n	800944c <quorem+0xf0>
 800946a:	3c01      	subs	r4, #1
 800946c:	e7eb      	b.n	8009446 <quorem+0xea>
 800946e:	2000      	movs	r0, #0
 8009470:	e7ee      	b.n	8009450 <quorem+0xf4>
 8009472:	0000      	movs	r0, r0
 8009474:	0000      	movs	r0, r0
	...

08009478 <_dtoa_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ec59 8b10 	vmov	r8, r9, d0
 8009480:	b095      	sub	sp, #84	; 0x54
 8009482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009484:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009486:	9107      	str	r1, [sp, #28]
 8009488:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800948c:	4606      	mov	r6, r0
 800948e:	9209      	str	r2, [sp, #36]	; 0x24
 8009490:	9310      	str	r3, [sp, #64]	; 0x40
 8009492:	b975      	cbnz	r5, 80094b2 <_dtoa_r+0x3a>
 8009494:	2010      	movs	r0, #16
 8009496:	f001 f8f7 	bl	800a688 <malloc>
 800949a:	4602      	mov	r2, r0
 800949c:	6270      	str	r0, [r6, #36]	; 0x24
 800949e:	b920      	cbnz	r0, 80094aa <_dtoa_r+0x32>
 80094a0:	4bab      	ldr	r3, [pc, #684]	; (8009750 <_dtoa_r+0x2d8>)
 80094a2:	21ea      	movs	r1, #234	; 0xea
 80094a4:	48ab      	ldr	r0, [pc, #684]	; (8009754 <_dtoa_r+0x2dc>)
 80094a6:	f002 fc33 	bl	800bd10 <__assert_func>
 80094aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094ae:	6005      	str	r5, [r0, #0]
 80094b0:	60c5      	str	r5, [r0, #12]
 80094b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094b4:	6819      	ldr	r1, [r3, #0]
 80094b6:	b151      	cbz	r1, 80094ce <_dtoa_r+0x56>
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	604a      	str	r2, [r1, #4]
 80094bc:	2301      	movs	r3, #1
 80094be:	4093      	lsls	r3, r2
 80094c0:	608b      	str	r3, [r1, #8]
 80094c2:	4630      	mov	r0, r6
 80094c4:	f001 f948 	bl	800a758 <_Bfree>
 80094c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f1b9 0300 	subs.w	r3, r9, #0
 80094d2:	bfbb      	ittet	lt
 80094d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	9303      	strlt	r3, [sp, #12]
 80094da:	2300      	movge	r3, #0
 80094dc:	2201      	movlt	r2, #1
 80094de:	bfac      	ite	ge
 80094e0:	6023      	strge	r3, [r4, #0]
 80094e2:	6022      	strlt	r2, [r4, #0]
 80094e4:	4b9c      	ldr	r3, [pc, #624]	; (8009758 <_dtoa_r+0x2e0>)
 80094e6:	9c03      	ldr	r4, [sp, #12]
 80094e8:	43a3      	bics	r3, r4
 80094ea:	d11a      	bne.n	8009522 <_dtoa_r+0xaa>
 80094ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80094f8:	ea53 0308 	orrs.w	r3, r3, r8
 80094fc:	f000 8512 	beq.w	8009f24 <_dtoa_r+0xaac>
 8009500:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009502:	b953      	cbnz	r3, 800951a <_dtoa_r+0xa2>
 8009504:	4b95      	ldr	r3, [pc, #596]	; (800975c <_dtoa_r+0x2e4>)
 8009506:	e01f      	b.n	8009548 <_dtoa_r+0xd0>
 8009508:	4b95      	ldr	r3, [pc, #596]	; (8009760 <_dtoa_r+0x2e8>)
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	9800      	ldr	r0, [sp, #0]
 8009514:	b015      	add	sp, #84	; 0x54
 8009516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951a:	4b90      	ldr	r3, [pc, #576]	; (800975c <_dtoa_r+0x2e4>)
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	3303      	adds	r3, #3
 8009520:	e7f5      	b.n	800950e <_dtoa_r+0x96>
 8009522:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009526:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009532:	d10b      	bne.n	800954c <_dtoa_r+0xd4>
 8009534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009536:	2301      	movs	r3, #1
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 84ee 	beq.w	8009f1e <_dtoa_r+0xaa6>
 8009542:	4888      	ldr	r0, [pc, #544]	; (8009764 <_dtoa_r+0x2ec>)
 8009544:	6018      	str	r0, [r3, #0]
 8009546:	1e43      	subs	r3, r0, #1
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	e7e2      	b.n	8009512 <_dtoa_r+0x9a>
 800954c:	a913      	add	r1, sp, #76	; 0x4c
 800954e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009552:	aa12      	add	r2, sp, #72	; 0x48
 8009554:	4630      	mov	r0, r6
 8009556:	f001 fca7 	bl	800aea8 <__d2b>
 800955a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800955e:	4605      	mov	r5, r0
 8009560:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009562:	2900      	cmp	r1, #0
 8009564:	d047      	beq.n	80095f6 <_dtoa_r+0x17e>
 8009566:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800956c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009570:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009574:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009578:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800957c:	2400      	movs	r4, #0
 800957e:	ec43 2b16 	vmov	d6, r2, r3
 8009582:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009586:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009738 <_dtoa_r+0x2c0>
 800958a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800958e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009740 <_dtoa_r+0x2c8>
 8009592:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009596:	eeb0 7b46 	vmov.f64	d7, d6
 800959a:	ee06 1a90 	vmov	s13, r1
 800959e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80095a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009748 <_dtoa_r+0x2d0>
 80095a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80095aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80095ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80095b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b6:	ee16 ba90 	vmov	fp, s13
 80095ba:	9411      	str	r4, [sp, #68]	; 0x44
 80095bc:	d508      	bpl.n	80095d0 <_dtoa_r+0x158>
 80095be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80095c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80095c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ca:	bf18      	it	ne
 80095cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80095d0:	f1bb 0f16 	cmp.w	fp, #22
 80095d4:	d832      	bhi.n	800963c <_dtoa_r+0x1c4>
 80095d6:	4b64      	ldr	r3, [pc, #400]	; (8009768 <_dtoa_r+0x2f0>)
 80095d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095dc:	ed93 7b00 	vldr	d7, [r3]
 80095e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80095e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	d501      	bpl.n	80095f2 <_dtoa_r+0x17a>
 80095ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095f2:	2300      	movs	r3, #0
 80095f4:	e023      	b.n	800963e <_dtoa_r+0x1c6>
 80095f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80095f8:	4401      	add	r1, r0
 80095fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80095fe:	2b20      	cmp	r3, #32
 8009600:	bfc3      	ittte	gt
 8009602:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009606:	fa04 f303 	lslgt.w	r3, r4, r3
 800960a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800960e:	f1c3 0320 	rsble	r3, r3, #32
 8009612:	bfc6      	itte	gt
 8009614:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009618:	ea43 0308 	orrgt.w	r3, r3, r8
 800961c:	fa08 f303 	lslle.w	r3, r8, r3
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009628:	3901      	subs	r1, #1
 800962a:	ed8d 7b00 	vstr	d7, [sp]
 800962e:	9c01      	ldr	r4, [sp, #4]
 8009630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009634:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009638:	2401      	movs	r4, #1
 800963a:	e7a0      	b.n	800957e <_dtoa_r+0x106>
 800963c:	2301      	movs	r3, #1
 800963e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009640:	1a43      	subs	r3, r0, r1
 8009642:	1e5a      	subs	r2, r3, #1
 8009644:	bf45      	ittet	mi
 8009646:	f1c3 0301 	rsbmi	r3, r3, #1
 800964a:	9305      	strmi	r3, [sp, #20]
 800964c:	2300      	movpl	r3, #0
 800964e:	2300      	movmi	r3, #0
 8009650:	9206      	str	r2, [sp, #24]
 8009652:	bf54      	ite	pl
 8009654:	9305      	strpl	r3, [sp, #20]
 8009656:	9306      	strmi	r3, [sp, #24]
 8009658:	f1bb 0f00 	cmp.w	fp, #0
 800965c:	db18      	blt.n	8009690 <_dtoa_r+0x218>
 800965e:	9b06      	ldr	r3, [sp, #24]
 8009660:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009664:	445b      	add	r3, fp
 8009666:	9306      	str	r3, [sp, #24]
 8009668:	2300      	movs	r3, #0
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	2a09      	cmp	r2, #9
 800966e:	d849      	bhi.n	8009704 <_dtoa_r+0x28c>
 8009670:	2a05      	cmp	r2, #5
 8009672:	bfc4      	itt	gt
 8009674:	3a04      	subgt	r2, #4
 8009676:	9207      	strgt	r2, [sp, #28]
 8009678:	9a07      	ldr	r2, [sp, #28]
 800967a:	f1a2 0202 	sub.w	r2, r2, #2
 800967e:	bfcc      	ite	gt
 8009680:	2400      	movgt	r4, #0
 8009682:	2401      	movle	r4, #1
 8009684:	2a03      	cmp	r2, #3
 8009686:	d848      	bhi.n	800971a <_dtoa_r+0x2a2>
 8009688:	e8df f002 	tbb	[pc, r2]
 800968c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	2200      	movs	r2, #0
 8009694:	eba3 030b 	sub.w	r3, r3, fp
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	920e      	str	r2, [sp, #56]	; 0x38
 800969c:	f1cb 0300 	rsb	r3, fp, #0
 80096a0:	e7e3      	b.n	800966a <_dtoa_r+0x1f2>
 80096a2:	2200      	movs	r2, #0
 80096a4:	9208      	str	r2, [sp, #32]
 80096a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	dc39      	bgt.n	8009720 <_dtoa_r+0x2a8>
 80096ac:	f04f 0a01 	mov.w	sl, #1
 80096b0:	46d1      	mov	r9, sl
 80096b2:	4652      	mov	r2, sl
 80096b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80096b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80096ba:	2100      	movs	r1, #0
 80096bc:	6079      	str	r1, [r7, #4]
 80096be:	2004      	movs	r0, #4
 80096c0:	f100 0c14 	add.w	ip, r0, #20
 80096c4:	4594      	cmp	ip, r2
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	d92f      	bls.n	800972a <_dtoa_r+0x2b2>
 80096ca:	4630      	mov	r0, r6
 80096cc:	930c      	str	r3, [sp, #48]	; 0x30
 80096ce:	f001 f803 	bl	800a6d8 <_Balloc>
 80096d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d4:	9000      	str	r0, [sp, #0]
 80096d6:	4602      	mov	r2, r0
 80096d8:	2800      	cmp	r0, #0
 80096da:	d149      	bne.n	8009770 <_dtoa_r+0x2f8>
 80096dc:	4b23      	ldr	r3, [pc, #140]	; (800976c <_dtoa_r+0x2f4>)
 80096de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096e2:	e6df      	b.n	80094a4 <_dtoa_r+0x2c>
 80096e4:	2201      	movs	r2, #1
 80096e6:	e7dd      	b.n	80096a4 <_dtoa_r+0x22c>
 80096e8:	2200      	movs	r2, #0
 80096ea:	9208      	str	r2, [sp, #32]
 80096ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ee:	eb0b 0a02 	add.w	sl, fp, r2
 80096f2:	f10a 0901 	add.w	r9, sl, #1
 80096f6:	464a      	mov	r2, r9
 80096f8:	2a01      	cmp	r2, #1
 80096fa:	bfb8      	it	lt
 80096fc:	2201      	movlt	r2, #1
 80096fe:	e7db      	b.n	80096b8 <_dtoa_r+0x240>
 8009700:	2201      	movs	r2, #1
 8009702:	e7f2      	b.n	80096ea <_dtoa_r+0x272>
 8009704:	2401      	movs	r4, #1
 8009706:	2200      	movs	r2, #0
 8009708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800970c:	f04f 3aff 	mov.w	sl, #4294967295
 8009710:	2100      	movs	r1, #0
 8009712:	46d1      	mov	r9, sl
 8009714:	2212      	movs	r2, #18
 8009716:	9109      	str	r1, [sp, #36]	; 0x24
 8009718:	e7ce      	b.n	80096b8 <_dtoa_r+0x240>
 800971a:	2201      	movs	r2, #1
 800971c:	9208      	str	r2, [sp, #32]
 800971e:	e7f5      	b.n	800970c <_dtoa_r+0x294>
 8009720:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009724:	46d1      	mov	r9, sl
 8009726:	4652      	mov	r2, sl
 8009728:	e7c6      	b.n	80096b8 <_dtoa_r+0x240>
 800972a:	3101      	adds	r1, #1
 800972c:	6079      	str	r1, [r7, #4]
 800972e:	0040      	lsls	r0, r0, #1
 8009730:	e7c6      	b.n	80096c0 <_dtoa_r+0x248>
 8009732:	bf00      	nop
 8009734:	f3af 8000 	nop.w
 8009738:	636f4361 	.word	0x636f4361
 800973c:	3fd287a7 	.word	0x3fd287a7
 8009740:	8b60c8b3 	.word	0x8b60c8b3
 8009744:	3fc68a28 	.word	0x3fc68a28
 8009748:	509f79fb 	.word	0x509f79fb
 800974c:	3fd34413 	.word	0x3fd34413
 8009750:	0800d2db 	.word	0x0800d2db
 8009754:	0800d2f2 	.word	0x0800d2f2
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	0800d2d7 	.word	0x0800d2d7
 8009760:	0800d2ce 	.word	0x0800d2ce
 8009764:	0800d552 	.word	0x0800d552
 8009768:	0800d468 	.word	0x0800d468
 800976c:	0800d351 	.word	0x0800d351
 8009770:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009772:	9900      	ldr	r1, [sp, #0]
 8009774:	6011      	str	r1, [r2, #0]
 8009776:	f1b9 0f0e 	cmp.w	r9, #14
 800977a:	d872      	bhi.n	8009862 <_dtoa_r+0x3ea>
 800977c:	2c00      	cmp	r4, #0
 800977e:	d070      	beq.n	8009862 <_dtoa_r+0x3ea>
 8009780:	f1bb 0f00 	cmp.w	fp, #0
 8009784:	f340 80a6 	ble.w	80098d4 <_dtoa_r+0x45c>
 8009788:	49ca      	ldr	r1, [pc, #808]	; (8009ab4 <_dtoa_r+0x63c>)
 800978a:	f00b 020f 	and.w	r2, fp, #15
 800978e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009792:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009796:	ed92 7b00 	vldr	d7, [r2]
 800979a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800979e:	f000 808d 	beq.w	80098bc <_dtoa_r+0x444>
 80097a2:	4ac5      	ldr	r2, [pc, #788]	; (8009ab8 <_dtoa_r+0x640>)
 80097a4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80097a8:	ed92 6b08 	vldr	d6, [r2, #32]
 80097ac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80097b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80097b4:	f001 010f 	and.w	r1, r1, #15
 80097b8:	2203      	movs	r2, #3
 80097ba:	48bf      	ldr	r0, [pc, #764]	; (8009ab8 <_dtoa_r+0x640>)
 80097bc:	2900      	cmp	r1, #0
 80097be:	d17f      	bne.n	80098c0 <_dtoa_r+0x448>
 80097c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80097c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80097c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097ce:	2900      	cmp	r1, #0
 80097d0:	f000 80b2 	beq.w	8009938 <_dtoa_r+0x4c0>
 80097d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80097d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80097e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e4:	f140 80a8 	bpl.w	8009938 <_dtoa_r+0x4c0>
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	f000 80a4 	beq.w	8009938 <_dtoa_r+0x4c0>
 80097f0:	f1ba 0f00 	cmp.w	sl, #0
 80097f4:	dd31      	ble.n	800985a <_dtoa_r+0x3e2>
 80097f6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80097fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009802:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009806:	3201      	adds	r2, #1
 8009808:	4650      	mov	r0, sl
 800980a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800980e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009812:	ee07 2a90 	vmov	s15, r2
 8009816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800981a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800981e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009822:	9c03      	ldr	r4, [sp, #12]
 8009824:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009828:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 8086 	bne.w	800993e <_dtoa_r+0x4c6>
 8009832:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009836:	ee36 6b47 	vsub.f64	d6, d6, d7
 800983a:	ec42 1b17 	vmov	d7, r1, r2
 800983e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	f300 8272 	bgt.w	8009d2e <_dtoa_r+0x8b6>
 800984a:	eeb1 7b47 	vneg.f64	d7, d7
 800984e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009856:	f100 8267 	bmi.w	8009d28 <_dtoa_r+0x8b0>
 800985a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800985e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009862:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009864:	2a00      	cmp	r2, #0
 8009866:	f2c0 8129 	blt.w	8009abc <_dtoa_r+0x644>
 800986a:	f1bb 0f0e 	cmp.w	fp, #14
 800986e:	f300 8125 	bgt.w	8009abc <_dtoa_r+0x644>
 8009872:	4b90      	ldr	r3, [pc, #576]	; (8009ab4 <_dtoa_r+0x63c>)
 8009874:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009878:	ed93 6b00 	vldr	d6, [r3]
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	f280 80c3 	bge.w	8009a0a <_dtoa_r+0x592>
 8009884:	f1b9 0f00 	cmp.w	r9, #0
 8009888:	f300 80bf 	bgt.w	8009a0a <_dtoa_r+0x592>
 800988c:	f040 824c 	bne.w	8009d28 <_dtoa_r+0x8b0>
 8009890:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009894:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800989c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a4:	464c      	mov	r4, r9
 80098a6:	464f      	mov	r7, r9
 80098a8:	f280 8222 	bge.w	8009cf0 <_dtoa_r+0x878>
 80098ac:	f8dd 8000 	ldr.w	r8, [sp]
 80098b0:	2331      	movs	r3, #49	; 0x31
 80098b2:	f808 3b01 	strb.w	r3, [r8], #1
 80098b6:	f10b 0b01 	add.w	fp, fp, #1
 80098ba:	e21e      	b.n	8009cfa <_dtoa_r+0x882>
 80098bc:	2202      	movs	r2, #2
 80098be:	e77c      	b.n	80097ba <_dtoa_r+0x342>
 80098c0:	07cc      	lsls	r4, r1, #31
 80098c2:	d504      	bpl.n	80098ce <_dtoa_r+0x456>
 80098c4:	ed90 6b00 	vldr	d6, [r0]
 80098c8:	3201      	adds	r2, #1
 80098ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098ce:	1049      	asrs	r1, r1, #1
 80098d0:	3008      	adds	r0, #8
 80098d2:	e773      	b.n	80097bc <_dtoa_r+0x344>
 80098d4:	d02e      	beq.n	8009934 <_dtoa_r+0x4bc>
 80098d6:	f1cb 0100 	rsb	r1, fp, #0
 80098da:	4a76      	ldr	r2, [pc, #472]	; (8009ab4 <_dtoa_r+0x63c>)
 80098dc:	f001 000f 	and.w	r0, r1, #15
 80098e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80098e4:	ed92 7b00 	vldr	d7, [r2]
 80098e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80098ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80098f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80098f4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80098f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80098fc:	486e      	ldr	r0, [pc, #440]	; (8009ab8 <_dtoa_r+0x640>)
 80098fe:	1109      	asrs	r1, r1, #4
 8009900:	2400      	movs	r4, #0
 8009902:	2202      	movs	r2, #2
 8009904:	b939      	cbnz	r1, 8009916 <_dtoa_r+0x49e>
 8009906:	2c00      	cmp	r4, #0
 8009908:	f43f af60 	beq.w	80097cc <_dtoa_r+0x354>
 800990c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009914:	e75a      	b.n	80097cc <_dtoa_r+0x354>
 8009916:	07cf      	lsls	r7, r1, #31
 8009918:	d509      	bpl.n	800992e <_dtoa_r+0x4b6>
 800991a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800991e:	ed90 7b00 	vldr	d7, [r0]
 8009922:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009926:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800992a:	3201      	adds	r2, #1
 800992c:	2401      	movs	r4, #1
 800992e:	1049      	asrs	r1, r1, #1
 8009930:	3008      	adds	r0, #8
 8009932:	e7e7      	b.n	8009904 <_dtoa_r+0x48c>
 8009934:	2202      	movs	r2, #2
 8009936:	e749      	b.n	80097cc <_dtoa_r+0x354>
 8009938:	465f      	mov	r7, fp
 800993a:	4648      	mov	r0, r9
 800993c:	e765      	b.n	800980a <_dtoa_r+0x392>
 800993e:	ec42 1b17 	vmov	d7, r1, r2
 8009942:	4a5c      	ldr	r2, [pc, #368]	; (8009ab4 <_dtoa_r+0x63c>)
 8009944:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009948:	ed12 4b02 	vldr	d4, [r2, #-8]
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	1814      	adds	r4, r2, r0
 8009950:	9a08      	ldr	r2, [sp, #32]
 8009952:	b352      	cbz	r2, 80099aa <_dtoa_r+0x532>
 8009954:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009958:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800995c:	f8dd 8000 	ldr.w	r8, [sp]
 8009960:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009964:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009968:	ee35 7b47 	vsub.f64	d7, d5, d7
 800996c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009970:	ee14 2a90 	vmov	r2, s9
 8009974:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009978:	3230      	adds	r2, #48	; 0x30
 800997a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800997e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009986:	f808 2b01 	strb.w	r2, [r8], #1
 800998a:	d439      	bmi.n	8009a00 <_dtoa_r+0x588>
 800998c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009990:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009998:	d472      	bmi.n	8009a80 <_dtoa_r+0x608>
 800999a:	45a0      	cmp	r8, r4
 800999c:	f43f af5d 	beq.w	800985a <_dtoa_r+0x3e2>
 80099a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80099a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80099a8:	e7e0      	b.n	800996c <_dtoa_r+0x4f4>
 80099aa:	f8dd 8000 	ldr.w	r8, [sp]
 80099ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099b2:	4621      	mov	r1, r4
 80099b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80099b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80099bc:	ee14 2a90 	vmov	r2, s9
 80099c0:	3230      	adds	r2, #48	; 0x30
 80099c2:	f808 2b01 	strb.w	r2, [r8], #1
 80099c6:	45a0      	cmp	r8, r4
 80099c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80099cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80099d0:	d118      	bne.n	8009a04 <_dtoa_r+0x58c>
 80099d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80099d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80099da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80099de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e2:	dc4d      	bgt.n	8009a80 <_dtoa_r+0x608>
 80099e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f0:	f57f af33 	bpl.w	800985a <_dtoa_r+0x3e2>
 80099f4:	4688      	mov	r8, r1
 80099f6:	3901      	subs	r1, #1
 80099f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d0f9      	beq.n	80099f4 <_dtoa_r+0x57c>
 8009a00:	46bb      	mov	fp, r7
 8009a02:	e02a      	b.n	8009a5a <_dtoa_r+0x5e2>
 8009a04:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a08:	e7d6      	b.n	80099b8 <_dtoa_r+0x540>
 8009a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009a12:	f8dd 8000 	ldr.w	r8, [sp]
 8009a16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009a1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009a1e:	ee15 3a10 	vmov	r3, s10
 8009a22:	3330      	adds	r3, #48	; 0x30
 8009a24:	f808 3b01 	strb.w	r3, [r8], #1
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	eba8 0303 	sub.w	r3, r8, r3
 8009a2e:	4599      	cmp	r9, r3
 8009a30:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009a34:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009a38:	d133      	bne.n	8009aa2 <_dtoa_r+0x62a>
 8009a3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a46:	dc1a      	bgt.n	8009a7e <_dtoa_r+0x606>
 8009a48:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a50:	d103      	bne.n	8009a5a <_dtoa_r+0x5e2>
 8009a52:	ee15 3a10 	vmov	r3, s10
 8009a56:	07d9      	lsls	r1, r3, #31
 8009a58:	d411      	bmi.n	8009a7e <_dtoa_r+0x606>
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 fe7b 	bl	800a758 <_Bfree>
 8009a62:	2300      	movs	r3, #0
 8009a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a66:	f888 3000 	strb.w	r3, [r8]
 8009a6a:	f10b 0301 	add.w	r3, fp, #1
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f43f ad4d 	beq.w	8009512 <_dtoa_r+0x9a>
 8009a78:	f8c3 8000 	str.w	r8, [r3]
 8009a7c:	e549      	b.n	8009512 <_dtoa_r+0x9a>
 8009a7e:	465f      	mov	r7, fp
 8009a80:	4643      	mov	r3, r8
 8009a82:	4698      	mov	r8, r3
 8009a84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a88:	2a39      	cmp	r2, #57	; 0x39
 8009a8a:	d106      	bne.n	8009a9a <_dtoa_r+0x622>
 8009a8c:	9a00      	ldr	r2, [sp, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d1f7      	bne.n	8009a82 <_dtoa_r+0x60a>
 8009a92:	9900      	ldr	r1, [sp, #0]
 8009a94:	2230      	movs	r2, #48	; 0x30
 8009a96:	3701      	adds	r7, #1
 8009a98:	700a      	strb	r2, [r1, #0]
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	3201      	adds	r2, #1
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e7ae      	b.n	8009a00 <_dtoa_r+0x588>
 8009aa2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aae:	d1b2      	bne.n	8009a16 <_dtoa_r+0x59e>
 8009ab0:	e7d3      	b.n	8009a5a <_dtoa_r+0x5e2>
 8009ab2:	bf00      	nop
 8009ab4:	0800d468 	.word	0x0800d468
 8009ab8:	0800d440 	.word	0x0800d440
 8009abc:	9908      	ldr	r1, [sp, #32]
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	f000 80d1 	beq.w	8009c66 <_dtoa_r+0x7ee>
 8009ac4:	9907      	ldr	r1, [sp, #28]
 8009ac6:	2901      	cmp	r1, #1
 8009ac8:	f300 80b4 	bgt.w	8009c34 <_dtoa_r+0x7bc>
 8009acc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	f000 80ac 	beq.w	8009c2c <_dtoa_r+0x7b4>
 8009ad4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ad8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009adc:	461c      	mov	r4, r3
 8009ade:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	9305      	str	r3, [sp, #20]
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4413      	add	r3, r2
 8009aec:	4630      	mov	r0, r6
 8009aee:	9306      	str	r3, [sp, #24]
 8009af0:	f000 ff38 	bl	800a964 <__i2b>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	4607      	mov	r7, r0
 8009af8:	f1b8 0f00 	cmp.w	r8, #0
 8009afc:	dd0d      	ble.n	8009b1a <_dtoa_r+0x6a2>
 8009afe:	9a06      	ldr	r2, [sp, #24]
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	dd0a      	ble.n	8009b1a <_dtoa_r+0x6a2>
 8009b04:	4542      	cmp	r2, r8
 8009b06:	9905      	ldr	r1, [sp, #20]
 8009b08:	bfa8      	it	ge
 8009b0a:	4642      	movge	r2, r8
 8009b0c:	1a89      	subs	r1, r1, r2
 8009b0e:	9105      	str	r1, [sp, #20]
 8009b10:	9906      	ldr	r1, [sp, #24]
 8009b12:	eba8 0802 	sub.w	r8, r8, r2
 8009b16:	1a8a      	subs	r2, r1, r2
 8009b18:	9206      	str	r2, [sp, #24]
 8009b1a:	b303      	cbz	r3, 8009b5e <_dtoa_r+0x6e6>
 8009b1c:	9a08      	ldr	r2, [sp, #32]
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	f000 80a6 	beq.w	8009c70 <_dtoa_r+0x7f8>
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	dd13      	ble.n	8009b50 <_dtoa_r+0x6d8>
 8009b28:	4639      	mov	r1, r7
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b30:	f000 ffd4 	bl	800aadc <__pow5mult>
 8009b34:	462a      	mov	r2, r5
 8009b36:	4601      	mov	r1, r0
 8009b38:	4607      	mov	r7, r0
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f000 ff28 	bl	800a990 <__multiply>
 8009b40:	4629      	mov	r1, r5
 8009b42:	900a      	str	r0, [sp, #40]	; 0x28
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fe07 	bl	800a758 <_Bfree>
 8009b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b4e:	4615      	mov	r5, r2
 8009b50:	1b1a      	subs	r2, r3, r4
 8009b52:	d004      	beq.n	8009b5e <_dtoa_r+0x6e6>
 8009b54:	4629      	mov	r1, r5
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 ffc0 	bl	800aadc <__pow5mult>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4630      	mov	r0, r6
 8009b62:	f000 feff 	bl	800a964 <__i2b>
 8009b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f340 8082 	ble.w	8009c74 <_dtoa_r+0x7fc>
 8009b70:	461a      	mov	r2, r3
 8009b72:	4601      	mov	r1, r0
 8009b74:	4630      	mov	r0, r6
 8009b76:	f000 ffb1 	bl	800aadc <__pow5mult>
 8009b7a:	9b07      	ldr	r3, [sp, #28]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	4604      	mov	r4, r0
 8009b80:	dd7b      	ble.n	8009c7a <_dtoa_r+0x802>
 8009b82:	2300      	movs	r3, #0
 8009b84:	930a      	str	r3, [sp, #40]	; 0x28
 8009b86:	6922      	ldr	r2, [r4, #16]
 8009b88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b8c:	6910      	ldr	r0, [r2, #16]
 8009b8e:	f000 fe99 	bl	800a8c4 <__hi0bits>
 8009b92:	f1c0 0020 	rsb	r0, r0, #32
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	4418      	add	r0, r3
 8009b9a:	f010 001f 	ands.w	r0, r0, #31
 8009b9e:	f000 808d 	beq.w	8009cbc <_dtoa_r+0x844>
 8009ba2:	f1c0 0220 	rsb	r2, r0, #32
 8009ba6:	2a04      	cmp	r2, #4
 8009ba8:	f340 8086 	ble.w	8009cb8 <_dtoa_r+0x840>
 8009bac:	f1c0 001c 	rsb	r0, r0, #28
 8009bb0:	9b05      	ldr	r3, [sp, #20]
 8009bb2:	4403      	add	r3, r0
 8009bb4:	9305      	str	r3, [sp, #20]
 8009bb6:	9b06      	ldr	r3, [sp, #24]
 8009bb8:	4403      	add	r3, r0
 8009bba:	4480      	add	r8, r0
 8009bbc:	9306      	str	r3, [sp, #24]
 8009bbe:	9b05      	ldr	r3, [sp, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dd05      	ble.n	8009bd0 <_dtoa_r+0x758>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f000 ffe1 	bl	800ab90 <__lshift>
 8009bce:	4605      	mov	r5, r0
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd05      	ble.n	8009be2 <_dtoa_r+0x76a>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	461a      	mov	r2, r3
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f000 ffd8 	bl	800ab90 <__lshift>
 8009be0:	4604      	mov	r4, r0
 8009be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d06b      	beq.n	8009cc0 <_dtoa_r+0x848>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f001 f83c 	bl	800ac68 <__mcmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	da65      	bge.n	8009cc0 <_dtoa_r+0x848>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f000 fdce 	bl	800a79c <__multadd>
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c06:	4605      	mov	r5, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 8192 	beq.w	8009f32 <_dtoa_r+0xaba>
 8009c0e:	4639      	mov	r1, r7
 8009c10:	2300      	movs	r3, #0
 8009c12:	220a      	movs	r2, #10
 8009c14:	4630      	mov	r0, r6
 8009c16:	f000 fdc1 	bl	800a79c <__multadd>
 8009c1a:	f1ba 0f00 	cmp.w	sl, #0
 8009c1e:	4607      	mov	r7, r0
 8009c20:	f300 808e 	bgt.w	8009d40 <_dtoa_r+0x8c8>
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dc51      	bgt.n	8009cce <_dtoa_r+0x856>
 8009c2a:	e089      	b.n	8009d40 <_dtoa_r+0x8c8>
 8009c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c32:	e751      	b.n	8009ad8 <_dtoa_r+0x660>
 8009c34:	f109 34ff 	add.w	r4, r9, #4294967295
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	bfbf      	itttt	lt
 8009c3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009c3e:	1ae3      	sublt	r3, r4, r3
 8009c40:	18d2      	addlt	r2, r2, r3
 8009c42:	4613      	movlt	r3, r2
 8009c44:	bfb7      	itett	lt
 8009c46:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c48:	1b1c      	subge	r4, r3, r4
 8009c4a:	4623      	movlt	r3, r4
 8009c4c:	2400      	movlt	r4, #0
 8009c4e:	f1b9 0f00 	cmp.w	r9, #0
 8009c52:	bfb5      	itete	lt
 8009c54:	9a05      	ldrlt	r2, [sp, #20]
 8009c56:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009c5a:	eba2 0809 	sublt.w	r8, r2, r9
 8009c5e:	464a      	movge	r2, r9
 8009c60:	bfb8      	it	lt
 8009c62:	2200      	movlt	r2, #0
 8009c64:	e73b      	b.n	8009ade <_dtoa_r+0x666>
 8009c66:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009c6a:	9f08      	ldr	r7, [sp, #32]
 8009c6c:	461c      	mov	r4, r3
 8009c6e:	e743      	b.n	8009af8 <_dtoa_r+0x680>
 8009c70:	461a      	mov	r2, r3
 8009c72:	e76f      	b.n	8009b54 <_dtoa_r+0x6dc>
 8009c74:	9b07      	ldr	r3, [sp, #28]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	dc18      	bgt.n	8009cac <_dtoa_r+0x834>
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	b9b3      	cbnz	r3, 8009cac <_dtoa_r+0x834>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009c84:	b9a2      	cbnz	r2, 8009cb0 <_dtoa_r+0x838>
 8009c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c8a:	0d12      	lsrs	r2, r2, #20
 8009c8c:	0512      	lsls	r2, r2, #20
 8009c8e:	b18a      	cbz	r2, 8009cb4 <_dtoa_r+0x83c>
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	3301      	adds	r3, #1
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f47f af6f 	bne.w	8009b86 <_dtoa_r+0x70e>
 8009ca8:	2001      	movs	r0, #1
 8009caa:	e774      	b.n	8009b96 <_dtoa_r+0x71e>
 8009cac:	2300      	movs	r3, #0
 8009cae:	e7f6      	b.n	8009c9e <_dtoa_r+0x826>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	e7f4      	b.n	8009c9e <_dtoa_r+0x826>
 8009cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8009cb6:	e7f3      	b.n	8009ca0 <_dtoa_r+0x828>
 8009cb8:	d081      	beq.n	8009bbe <_dtoa_r+0x746>
 8009cba:	4610      	mov	r0, r2
 8009cbc:	301c      	adds	r0, #28
 8009cbe:	e777      	b.n	8009bb0 <_dtoa_r+0x738>
 8009cc0:	f1b9 0f00 	cmp.w	r9, #0
 8009cc4:	dc37      	bgt.n	8009d36 <_dtoa_r+0x8be>
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	dd34      	ble.n	8009d36 <_dtoa_r+0x8be>
 8009ccc:	46ca      	mov	sl, r9
 8009cce:	f1ba 0f00 	cmp.w	sl, #0
 8009cd2:	d10d      	bne.n	8009cf0 <_dtoa_r+0x878>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4653      	mov	r3, sl
 8009cd8:	2205      	movs	r2, #5
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f000 fd5e 	bl	800a79c <__multadd>
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f000 ffbf 	bl	800ac68 <__mcmp>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f73f adde 	bgt.w	80098ac <_dtoa_r+0x434>
 8009cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf2:	f8dd 8000 	ldr.w	r8, [sp]
 8009cf6:	ea6f 0b03 	mvn.w	fp, r3
 8009cfa:	f04f 0900 	mov.w	r9, #0
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 fd29 	bl	800a758 <_Bfree>
 8009d06:	2f00      	cmp	r7, #0
 8009d08:	f43f aea7 	beq.w	8009a5a <_dtoa_r+0x5e2>
 8009d0c:	f1b9 0f00 	cmp.w	r9, #0
 8009d10:	d005      	beq.n	8009d1e <_dtoa_r+0x8a6>
 8009d12:	45b9      	cmp	r9, r7
 8009d14:	d003      	beq.n	8009d1e <_dtoa_r+0x8a6>
 8009d16:	4649      	mov	r1, r9
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 fd1d 	bl	800a758 <_Bfree>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 fd19 	bl	800a758 <_Bfree>
 8009d26:	e698      	b.n	8009a5a <_dtoa_r+0x5e2>
 8009d28:	2400      	movs	r4, #0
 8009d2a:	4627      	mov	r7, r4
 8009d2c:	e7e0      	b.n	8009cf0 <_dtoa_r+0x878>
 8009d2e:	46bb      	mov	fp, r7
 8009d30:	4604      	mov	r4, r0
 8009d32:	4607      	mov	r7, r0
 8009d34:	e5ba      	b.n	80098ac <_dtoa_r+0x434>
 8009d36:	9b08      	ldr	r3, [sp, #32]
 8009d38:	46ca      	mov	sl, r9
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8100 	beq.w	8009f40 <_dtoa_r+0xac8>
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	dd05      	ble.n	8009d52 <_dtoa_r+0x8da>
 8009d46:	4639      	mov	r1, r7
 8009d48:	4642      	mov	r2, r8
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 ff20 	bl	800ab90 <__lshift>
 8009d50:	4607      	mov	r7, r0
 8009d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d05d      	beq.n	8009e14 <_dtoa_r+0x99c>
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f000 fcbc 	bl	800a6d8 <_Balloc>
 8009d60:	4680      	mov	r8, r0
 8009d62:	b928      	cbnz	r0, 8009d70 <_dtoa_r+0x8f8>
 8009d64:	4b82      	ldr	r3, [pc, #520]	; (8009f70 <_dtoa_r+0xaf8>)
 8009d66:	4602      	mov	r2, r0
 8009d68:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d6c:	f7ff bb9a 	b.w	80094a4 <_dtoa_r+0x2c>
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	3202      	adds	r2, #2
 8009d74:	0092      	lsls	r2, r2, #2
 8009d76:	f107 010c 	add.w	r1, r7, #12
 8009d7a:	300c      	adds	r0, #12
 8009d7c:	f000 fc9e 	bl	800a6bc <memcpy>
 8009d80:	2201      	movs	r2, #1
 8009d82:	4641      	mov	r1, r8
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 ff03 	bl	800ab90 <__lshift>
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	9b00      	ldr	r3, [sp, #0]
 8009d92:	4453      	add	r3, sl
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	46b9      	mov	r9, r7
 8009d9e:	9308      	str	r3, [sp, #32]
 8009da0:	4607      	mov	r7, r0
 8009da2:	9b05      	ldr	r3, [sp, #20]
 8009da4:	4621      	mov	r1, r4
 8009da6:	3b01      	subs	r3, #1
 8009da8:	4628      	mov	r0, r5
 8009daa:	9302      	str	r3, [sp, #8]
 8009dac:	f7ff fad6 	bl	800935c <quorem>
 8009db0:	4603      	mov	r3, r0
 8009db2:	3330      	adds	r3, #48	; 0x30
 8009db4:	9006      	str	r0, [sp, #24]
 8009db6:	4649      	mov	r1, r9
 8009db8:	4628      	mov	r0, r5
 8009dba:	930a      	str	r3, [sp, #40]	; 0x28
 8009dbc:	f000 ff54 	bl	800ac68 <__mcmp>
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4682      	mov	sl, r0
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f000 ff6a 	bl	800aca0 <__mdiff>
 8009dcc:	68c2      	ldr	r2, [r0, #12]
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	bb0a      	cbnz	r2, 8009e18 <_dtoa_r+0x9a0>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 ff46 	bl	800ac68 <__mcmp>
 8009ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dde:	4602      	mov	r2, r0
 8009de0:	4641      	mov	r1, r8
 8009de2:	4630      	mov	r0, r6
 8009de4:	920e      	str	r2, [sp, #56]	; 0x38
 8009de6:	930a      	str	r3, [sp, #40]	; 0x28
 8009de8:	f000 fcb6 	bl	800a758 <_Bfree>
 8009dec:	9b07      	ldr	r3, [sp, #28]
 8009dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009df0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009df4:	ea43 0102 	orr.w	r1, r3, r2
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dfe:	d10d      	bne.n	8009e1c <_dtoa_r+0x9a4>
 8009e00:	2b39      	cmp	r3, #57	; 0x39
 8009e02:	d029      	beq.n	8009e58 <_dtoa_r+0x9e0>
 8009e04:	f1ba 0f00 	cmp.w	sl, #0
 8009e08:	dd01      	ble.n	8009e0e <_dtoa_r+0x996>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	3331      	adds	r3, #49	; 0x31
 8009e0e:	9a02      	ldr	r2, [sp, #8]
 8009e10:	7013      	strb	r3, [r2, #0]
 8009e12:	e774      	b.n	8009cfe <_dtoa_r+0x886>
 8009e14:	4638      	mov	r0, r7
 8009e16:	e7b8      	b.n	8009d8a <_dtoa_r+0x912>
 8009e18:	2201      	movs	r2, #1
 8009e1a:	e7e1      	b.n	8009de0 <_dtoa_r+0x968>
 8009e1c:	f1ba 0f00 	cmp.w	sl, #0
 8009e20:	db06      	blt.n	8009e30 <_dtoa_r+0x9b8>
 8009e22:	9907      	ldr	r1, [sp, #28]
 8009e24:	ea41 0a0a 	orr.w	sl, r1, sl
 8009e28:	9908      	ldr	r1, [sp, #32]
 8009e2a:	ea5a 0101 	orrs.w	r1, sl, r1
 8009e2e:	d120      	bne.n	8009e72 <_dtoa_r+0x9fa>
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	ddec      	ble.n	8009e0e <_dtoa_r+0x996>
 8009e34:	4629      	mov	r1, r5
 8009e36:	2201      	movs	r2, #1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	9305      	str	r3, [sp, #20]
 8009e3c:	f000 fea8 	bl	800ab90 <__lshift>
 8009e40:	4621      	mov	r1, r4
 8009e42:	4605      	mov	r5, r0
 8009e44:	f000 ff10 	bl	800ac68 <__mcmp>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	9b05      	ldr	r3, [sp, #20]
 8009e4c:	dc02      	bgt.n	8009e54 <_dtoa_r+0x9dc>
 8009e4e:	d1de      	bne.n	8009e0e <_dtoa_r+0x996>
 8009e50:	07da      	lsls	r2, r3, #31
 8009e52:	d5dc      	bpl.n	8009e0e <_dtoa_r+0x996>
 8009e54:	2b39      	cmp	r3, #57	; 0x39
 8009e56:	d1d8      	bne.n	8009e0a <_dtoa_r+0x992>
 8009e58:	9a02      	ldr	r2, [sp, #8]
 8009e5a:	2339      	movs	r3, #57	; 0x39
 8009e5c:	7013      	strb	r3, [r2, #0]
 8009e5e:	4643      	mov	r3, r8
 8009e60:	4698      	mov	r8, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009e68:	2a39      	cmp	r2, #57	; 0x39
 8009e6a:	d051      	beq.n	8009f10 <_dtoa_r+0xa98>
 8009e6c:	3201      	adds	r2, #1
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	e745      	b.n	8009cfe <_dtoa_r+0x886>
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	dd03      	ble.n	8009e7e <_dtoa_r+0xa06>
 8009e76:	2b39      	cmp	r3, #57	; 0x39
 8009e78:	d0ee      	beq.n	8009e58 <_dtoa_r+0x9e0>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	e7c7      	b.n	8009e0e <_dtoa_r+0x996>
 8009e7e:	9a05      	ldr	r2, [sp, #20]
 8009e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e82:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e86:	428a      	cmp	r2, r1
 8009e88:	d02b      	beq.n	8009ee2 <_dtoa_r+0xa6a>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	220a      	movs	r2, #10
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fc83 	bl	800a79c <__multadd>
 8009e96:	45b9      	cmp	r9, r7
 8009e98:	4605      	mov	r5, r0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	f04f 020a 	mov.w	r2, #10
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	d107      	bne.n	8009eb8 <_dtoa_r+0xa40>
 8009ea8:	f000 fc78 	bl	800a79c <__multadd>
 8009eac:	4681      	mov	r9, r0
 8009eae:	4607      	mov	r7, r0
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	e774      	b.n	8009da2 <_dtoa_r+0x92a>
 8009eb8:	f000 fc70 	bl	800a79c <__multadd>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4681      	mov	r9, r0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 fc69 	bl	800a79c <__multadd>
 8009eca:	4607      	mov	r7, r0
 8009ecc:	e7f0      	b.n	8009eb0 <_dtoa_r+0xa38>
 8009ece:	f1ba 0f00 	cmp.w	sl, #0
 8009ed2:	9a00      	ldr	r2, [sp, #0]
 8009ed4:	bfcc      	ite	gt
 8009ed6:	46d0      	movgt	r8, sl
 8009ed8:	f04f 0801 	movle.w	r8, #1
 8009edc:	4490      	add	r8, r2
 8009ede:	f04f 0900 	mov.w	r9, #0
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	f000 fe51 	bl	800ab90 <__lshift>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	f000 feb9 	bl	800ac68 <__mcmp>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	dcb1      	bgt.n	8009e5e <_dtoa_r+0x9e6>
 8009efa:	d102      	bne.n	8009f02 <_dtoa_r+0xa8a>
 8009efc:	9b02      	ldr	r3, [sp, #8]
 8009efe:	07db      	lsls	r3, r3, #31
 8009f00:	d4ad      	bmi.n	8009e5e <_dtoa_r+0x9e6>
 8009f02:	4643      	mov	r3, r8
 8009f04:	4698      	mov	r8, r3
 8009f06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f0a:	2a30      	cmp	r2, #48	; 0x30
 8009f0c:	d0fa      	beq.n	8009f04 <_dtoa_r+0xa8c>
 8009f0e:	e6f6      	b.n	8009cfe <_dtoa_r+0x886>
 8009f10:	9a00      	ldr	r2, [sp, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d1a4      	bne.n	8009e60 <_dtoa_r+0x9e8>
 8009f16:	f10b 0b01 	add.w	fp, fp, #1
 8009f1a:	2331      	movs	r3, #49	; 0x31
 8009f1c:	e778      	b.n	8009e10 <_dtoa_r+0x998>
 8009f1e:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <_dtoa_r+0xafc>)
 8009f20:	f7ff bb12 	b.w	8009548 <_dtoa_r+0xd0>
 8009f24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f47f aaee 	bne.w	8009508 <_dtoa_r+0x90>
 8009f2c:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <_dtoa_r+0xb00>)
 8009f2e:	f7ff bb0b 	b.w	8009548 <_dtoa_r+0xd0>
 8009f32:	f1ba 0f00 	cmp.w	sl, #0
 8009f36:	dc03      	bgt.n	8009f40 <_dtoa_r+0xac8>
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	f73f aec7 	bgt.w	8009cce <_dtoa_r+0x856>
 8009f40:	f8dd 8000 	ldr.w	r8, [sp]
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7ff fa08 	bl	800935c <quorem>
 8009f4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f50:	f808 3b01 	strb.w	r3, [r8], #1
 8009f54:	9a00      	ldr	r2, [sp, #0]
 8009f56:	eba8 0202 	sub.w	r2, r8, r2
 8009f5a:	4592      	cmp	sl, r2
 8009f5c:	ddb7      	ble.n	8009ece <_dtoa_r+0xa56>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	2300      	movs	r3, #0
 8009f62:	220a      	movs	r2, #10
 8009f64:	4630      	mov	r0, r6
 8009f66:	f000 fc19 	bl	800a79c <__multadd>
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	e7ea      	b.n	8009f44 <_dtoa_r+0xacc>
 8009f6e:	bf00      	nop
 8009f70:	0800d351 	.word	0x0800d351
 8009f74:	0800d551 	.word	0x0800d551
 8009f78:	0800d2ce 	.word	0x0800d2ce

08009f7c <rshift>:
 8009f7c:	6903      	ldr	r3, [r0, #16]
 8009f7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f8a:	f100 0414 	add.w	r4, r0, #20
 8009f8e:	dd45      	ble.n	800a01c <rshift+0xa0>
 8009f90:	f011 011f 	ands.w	r1, r1, #31
 8009f94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f9c:	d10c      	bne.n	8009fb8 <rshift+0x3c>
 8009f9e:	f100 0710 	add.w	r7, r0, #16
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	42b1      	cmp	r1, r6
 8009fa6:	d334      	bcc.n	800a012 <rshift+0x96>
 8009fa8:	1a9b      	subs	r3, r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	1eea      	subs	r2, r5, #3
 8009fae:	4296      	cmp	r6, r2
 8009fb0:	bf38      	it	cc
 8009fb2:	2300      	movcc	r3, #0
 8009fb4:	4423      	add	r3, r4
 8009fb6:	e015      	b.n	8009fe4 <rshift+0x68>
 8009fb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fbc:	f1c1 0820 	rsb	r8, r1, #32
 8009fc0:	40cf      	lsrs	r7, r1
 8009fc2:	f105 0e04 	add.w	lr, r5, #4
 8009fc6:	46a1      	mov	r9, r4
 8009fc8:	4576      	cmp	r6, lr
 8009fca:	46f4      	mov	ip, lr
 8009fcc:	d815      	bhi.n	8009ffa <rshift+0x7e>
 8009fce:	1a9b      	subs	r3, r3, r2
 8009fd0:	009a      	lsls	r2, r3, #2
 8009fd2:	3a04      	subs	r2, #4
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	42ae      	cmp	r6, r5
 8009fd8:	bf38      	it	cc
 8009fda:	2200      	movcc	r2, #0
 8009fdc:	18a3      	adds	r3, r4, r2
 8009fde:	50a7      	str	r7, [r4, r2]
 8009fe0:	b107      	cbz	r7, 8009fe4 <rshift+0x68>
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	1b1a      	subs	r2, r3, r4
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fec:	bf08      	it	eq
 8009fee:	2300      	moveq	r3, #0
 8009ff0:	6102      	str	r2, [r0, #16]
 8009ff2:	bf08      	it	eq
 8009ff4:	6143      	streq	r3, [r0, #20]
 8009ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	f8dc c000 	ldr.w	ip, [ip]
 8009ffe:	fa0c fc08 	lsl.w	ip, ip, r8
 800a002:	ea4c 0707 	orr.w	r7, ip, r7
 800a006:	f849 7b04 	str.w	r7, [r9], #4
 800a00a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a00e:	40cf      	lsrs	r7, r1
 800a010:	e7da      	b.n	8009fc8 <rshift+0x4c>
 800a012:	f851 cb04 	ldr.w	ip, [r1], #4
 800a016:	f847 cf04 	str.w	ip, [r7, #4]!
 800a01a:	e7c3      	b.n	8009fa4 <rshift+0x28>
 800a01c:	4623      	mov	r3, r4
 800a01e:	e7e1      	b.n	8009fe4 <rshift+0x68>

0800a020 <__hexdig_fun>:
 800a020:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a024:	2b09      	cmp	r3, #9
 800a026:	d802      	bhi.n	800a02e <__hexdig_fun+0xe>
 800a028:	3820      	subs	r0, #32
 800a02a:	b2c0      	uxtb	r0, r0
 800a02c:	4770      	bx	lr
 800a02e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a032:	2b05      	cmp	r3, #5
 800a034:	d801      	bhi.n	800a03a <__hexdig_fun+0x1a>
 800a036:	3847      	subs	r0, #71	; 0x47
 800a038:	e7f7      	b.n	800a02a <__hexdig_fun+0xa>
 800a03a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d801      	bhi.n	800a046 <__hexdig_fun+0x26>
 800a042:	3827      	subs	r0, #39	; 0x27
 800a044:	e7f1      	b.n	800a02a <__hexdig_fun+0xa>
 800a046:	2000      	movs	r0, #0
 800a048:	4770      	bx	lr
	...

0800a04c <__gethex>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	ed2d 8b02 	vpush	{d8}
 800a054:	b089      	sub	sp, #36	; 0x24
 800a056:	ee08 0a10 	vmov	s16, r0
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	4bbc      	ldr	r3, [pc, #752]	; (800a350 <__gethex+0x304>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	4618      	mov	r0, r3
 800a064:	468b      	mov	fp, r1
 800a066:	4690      	mov	r8, r2
 800a068:	f7f6 f8f4 	bl	8000254 <strlen>
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	f8db 2000 	ldr.w	r2, [fp]
 800a072:	4403      	add	r3, r0
 800a074:	4682      	mov	sl, r0
 800a076:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	1c93      	adds	r3, r2, #2
 800a07e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a082:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a086:	32fe      	adds	r2, #254	; 0xfe
 800a088:	18d1      	adds	r1, r2, r3
 800a08a:	461f      	mov	r7, r3
 800a08c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a090:	9100      	str	r1, [sp, #0]
 800a092:	2830      	cmp	r0, #48	; 0x30
 800a094:	d0f8      	beq.n	800a088 <__gethex+0x3c>
 800a096:	f7ff ffc3 	bl	800a020 <__hexdig_fun>
 800a09a:	4604      	mov	r4, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d13a      	bne.n	800a116 <__gethex+0xca>
 800a0a0:	9901      	ldr	r1, [sp, #4]
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7fe fa53 	bl	8008550 <strncmp>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d168      	bne.n	800a182 <__gethex+0x136>
 800a0b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a0b4:	eb07 060a 	add.w	r6, r7, sl
 800a0b8:	f7ff ffb2 	bl	800a020 <__hexdig_fun>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d062      	beq.n	800a186 <__gethex+0x13a>
 800a0c0:	4633      	mov	r3, r6
 800a0c2:	7818      	ldrb	r0, [r3, #0]
 800a0c4:	2830      	cmp	r0, #48	; 0x30
 800a0c6:	461f      	mov	r7, r3
 800a0c8:	f103 0301 	add.w	r3, r3, #1
 800a0cc:	d0f9      	beq.n	800a0c2 <__gethex+0x76>
 800a0ce:	f7ff ffa7 	bl	800a020 <__hexdig_fun>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	fab0 f480 	clz	r4, r0
 800a0d8:	0964      	lsrs	r4, r4, #5
 800a0da:	4635      	mov	r5, r6
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	463a      	mov	r2, r7
 800a0e0:	4616      	mov	r6, r2
 800a0e2:	3201      	adds	r2, #1
 800a0e4:	7830      	ldrb	r0, [r6, #0]
 800a0e6:	f7ff ff9b 	bl	800a020 <__hexdig_fun>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d1f8      	bne.n	800a0e0 <__gethex+0x94>
 800a0ee:	9901      	ldr	r1, [sp, #4]
 800a0f0:	4652      	mov	r2, sl
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7fe fa2c 	bl	8008550 <strncmp>
 800a0f8:	b980      	cbnz	r0, 800a11c <__gethex+0xd0>
 800a0fa:	b94d      	cbnz	r5, 800a110 <__gethex+0xc4>
 800a0fc:	eb06 050a 	add.w	r5, r6, sl
 800a100:	462a      	mov	r2, r5
 800a102:	4616      	mov	r6, r2
 800a104:	3201      	adds	r2, #1
 800a106:	7830      	ldrb	r0, [r6, #0]
 800a108:	f7ff ff8a 	bl	800a020 <__hexdig_fun>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1f8      	bne.n	800a102 <__gethex+0xb6>
 800a110:	1bad      	subs	r5, r5, r6
 800a112:	00ad      	lsls	r5, r5, #2
 800a114:	e004      	b.n	800a120 <__gethex+0xd4>
 800a116:	2400      	movs	r4, #0
 800a118:	4625      	mov	r5, r4
 800a11a:	e7e0      	b.n	800a0de <__gethex+0x92>
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	d1f7      	bne.n	800a110 <__gethex+0xc4>
 800a120:	7833      	ldrb	r3, [r6, #0]
 800a122:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a126:	2b50      	cmp	r3, #80	; 0x50
 800a128:	d13b      	bne.n	800a1a2 <__gethex+0x156>
 800a12a:	7873      	ldrb	r3, [r6, #1]
 800a12c:	2b2b      	cmp	r3, #43	; 0x2b
 800a12e:	d02c      	beq.n	800a18a <__gethex+0x13e>
 800a130:	2b2d      	cmp	r3, #45	; 0x2d
 800a132:	d02e      	beq.n	800a192 <__gethex+0x146>
 800a134:	1c71      	adds	r1, r6, #1
 800a136:	f04f 0900 	mov.w	r9, #0
 800a13a:	7808      	ldrb	r0, [r1, #0]
 800a13c:	f7ff ff70 	bl	800a020 <__hexdig_fun>
 800a140:	1e43      	subs	r3, r0, #1
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b18      	cmp	r3, #24
 800a146:	d82c      	bhi.n	800a1a2 <__gethex+0x156>
 800a148:	f1a0 0210 	sub.w	r2, r0, #16
 800a14c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a150:	f7ff ff66 	bl	800a020 <__hexdig_fun>
 800a154:	1e43      	subs	r3, r0, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b18      	cmp	r3, #24
 800a15a:	d91d      	bls.n	800a198 <__gethex+0x14c>
 800a15c:	f1b9 0f00 	cmp.w	r9, #0
 800a160:	d000      	beq.n	800a164 <__gethex+0x118>
 800a162:	4252      	negs	r2, r2
 800a164:	4415      	add	r5, r2
 800a166:	f8cb 1000 	str.w	r1, [fp]
 800a16a:	b1e4      	cbz	r4, 800a1a6 <__gethex+0x15a>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bf14      	ite	ne
 800a172:	2700      	movne	r7, #0
 800a174:	2706      	moveq	r7, #6
 800a176:	4638      	mov	r0, r7
 800a178:	b009      	add	sp, #36	; 0x24
 800a17a:	ecbd 8b02 	vpop	{d8}
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	463e      	mov	r6, r7
 800a184:	4625      	mov	r5, r4
 800a186:	2401      	movs	r4, #1
 800a188:	e7ca      	b.n	800a120 <__gethex+0xd4>
 800a18a:	f04f 0900 	mov.w	r9, #0
 800a18e:	1cb1      	adds	r1, r6, #2
 800a190:	e7d3      	b.n	800a13a <__gethex+0xee>
 800a192:	f04f 0901 	mov.w	r9, #1
 800a196:	e7fa      	b.n	800a18e <__gethex+0x142>
 800a198:	230a      	movs	r3, #10
 800a19a:	fb03 0202 	mla	r2, r3, r2, r0
 800a19e:	3a10      	subs	r2, #16
 800a1a0:	e7d4      	b.n	800a14c <__gethex+0x100>
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	e7df      	b.n	800a166 <__gethex+0x11a>
 800a1a6:	1bf3      	subs	r3, r6, r7
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	2b07      	cmp	r3, #7
 800a1ae:	dc0b      	bgt.n	800a1c8 <__gethex+0x17c>
 800a1b0:	ee18 0a10 	vmov	r0, s16
 800a1b4:	f000 fa90 	bl	800a6d8 <_Balloc>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	b940      	cbnz	r0, 800a1ce <__gethex+0x182>
 800a1bc:	4b65      	ldr	r3, [pc, #404]	; (800a354 <__gethex+0x308>)
 800a1be:	4602      	mov	r2, r0
 800a1c0:	21de      	movs	r1, #222	; 0xde
 800a1c2:	4865      	ldr	r0, [pc, #404]	; (800a358 <__gethex+0x30c>)
 800a1c4:	f001 fda4 	bl	800bd10 <__assert_func>
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	105b      	asrs	r3, r3, #1
 800a1cc:	e7ee      	b.n	800a1ac <__gethex+0x160>
 800a1ce:	f100 0914 	add.w	r9, r0, #20
 800a1d2:	f04f 0b00 	mov.w	fp, #0
 800a1d6:	f1ca 0301 	rsb	r3, sl, #1
 800a1da:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1de:	f8cd b000 	str.w	fp, [sp]
 800a1e2:	9306      	str	r3, [sp, #24]
 800a1e4:	42b7      	cmp	r7, r6
 800a1e6:	d340      	bcc.n	800a26a <__gethex+0x21e>
 800a1e8:	9802      	ldr	r0, [sp, #8]
 800a1ea:	9b00      	ldr	r3, [sp, #0]
 800a1ec:	f840 3b04 	str.w	r3, [r0], #4
 800a1f0:	eba0 0009 	sub.w	r0, r0, r9
 800a1f4:	1080      	asrs	r0, r0, #2
 800a1f6:	0146      	lsls	r6, r0, #5
 800a1f8:	6120      	str	r0, [r4, #16]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fb62 	bl	800a8c4 <__hi0bits>
 800a200:	1a30      	subs	r0, r6, r0
 800a202:	f8d8 6000 	ldr.w	r6, [r8]
 800a206:	42b0      	cmp	r0, r6
 800a208:	dd63      	ble.n	800a2d2 <__gethex+0x286>
 800a20a:	1b87      	subs	r7, r0, r6
 800a20c:	4639      	mov	r1, r7
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fefd 	bl	800b00e <__any_on>
 800a214:	4682      	mov	sl, r0
 800a216:	b1a8      	cbz	r0, 800a244 <__gethex+0x1f8>
 800a218:	1e7b      	subs	r3, r7, #1
 800a21a:	1159      	asrs	r1, r3, #5
 800a21c:	f003 021f 	and.w	r2, r3, #31
 800a220:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a224:	f04f 0a01 	mov.w	sl, #1
 800a228:	fa0a f202 	lsl.w	r2, sl, r2
 800a22c:	420a      	tst	r2, r1
 800a22e:	d009      	beq.n	800a244 <__gethex+0x1f8>
 800a230:	4553      	cmp	r3, sl
 800a232:	dd05      	ble.n	800a240 <__gethex+0x1f4>
 800a234:	1eb9      	subs	r1, r7, #2
 800a236:	4620      	mov	r0, r4
 800a238:	f000 fee9 	bl	800b00e <__any_on>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d145      	bne.n	800a2cc <__gethex+0x280>
 800a240:	f04f 0a02 	mov.w	sl, #2
 800a244:	4639      	mov	r1, r7
 800a246:	4620      	mov	r0, r4
 800a248:	f7ff fe98 	bl	8009f7c <rshift>
 800a24c:	443d      	add	r5, r7
 800a24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a252:	42ab      	cmp	r3, r5
 800a254:	da4c      	bge.n	800a2f0 <__gethex+0x2a4>
 800a256:	ee18 0a10 	vmov	r0, s16
 800a25a:	4621      	mov	r1, r4
 800a25c:	f000 fa7c 	bl	800a758 <_Bfree>
 800a260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a262:	2300      	movs	r3, #0
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	27a3      	movs	r7, #163	; 0xa3
 800a268:	e785      	b.n	800a176 <__gethex+0x12a>
 800a26a:	1e73      	subs	r3, r6, #1
 800a26c:	9a05      	ldr	r2, [sp, #20]
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a274:	4293      	cmp	r3, r2
 800a276:	d019      	beq.n	800a2ac <__gethex+0x260>
 800a278:	f1bb 0f20 	cmp.w	fp, #32
 800a27c:	d107      	bne.n	800a28e <__gethex+0x242>
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	9a00      	ldr	r2, [sp, #0]
 800a282:	f843 2b04 	str.w	r2, [r3], #4
 800a286:	9302      	str	r3, [sp, #8]
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	469b      	mov	fp, r3
 800a28e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a292:	f7ff fec5 	bl	800a020 <__hexdig_fun>
 800a296:	9b00      	ldr	r3, [sp, #0]
 800a298:	f000 000f 	and.w	r0, r0, #15
 800a29c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a2a0:	4303      	orrs	r3, r0
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	f10b 0b04 	add.w	fp, fp, #4
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	e00d      	b.n	800a2c8 <__gethex+0x27c>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	9a06      	ldr	r2, [sp, #24]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	42bb      	cmp	r3, r7
 800a2b4:	d3e0      	bcc.n	800a278 <__gethex+0x22c>
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	9901      	ldr	r1, [sp, #4]
 800a2ba:	9307      	str	r3, [sp, #28]
 800a2bc:	4652      	mov	r2, sl
 800a2be:	f7fe f947 	bl	8008550 <strncmp>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d1d7      	bne.n	800a278 <__gethex+0x22c>
 800a2c8:	461e      	mov	r6, r3
 800a2ca:	e78b      	b.n	800a1e4 <__gethex+0x198>
 800a2cc:	f04f 0a03 	mov.w	sl, #3
 800a2d0:	e7b8      	b.n	800a244 <__gethex+0x1f8>
 800a2d2:	da0a      	bge.n	800a2ea <__gethex+0x29e>
 800a2d4:	1a37      	subs	r7, r6, r0
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	ee18 0a10 	vmov	r0, s16
 800a2dc:	463a      	mov	r2, r7
 800a2de:	f000 fc57 	bl	800ab90 <__lshift>
 800a2e2:	1bed      	subs	r5, r5, r7
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	f100 0914 	add.w	r9, r0, #20
 800a2ea:	f04f 0a00 	mov.w	sl, #0
 800a2ee:	e7ae      	b.n	800a24e <__gethex+0x202>
 800a2f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2f4:	42a8      	cmp	r0, r5
 800a2f6:	dd72      	ble.n	800a3de <__gethex+0x392>
 800a2f8:	1b45      	subs	r5, r0, r5
 800a2fa:	42ae      	cmp	r6, r5
 800a2fc:	dc36      	bgt.n	800a36c <__gethex+0x320>
 800a2fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d02a      	beq.n	800a35c <__gethex+0x310>
 800a306:	2b03      	cmp	r3, #3
 800a308:	d02c      	beq.n	800a364 <__gethex+0x318>
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d115      	bne.n	800a33a <__gethex+0x2ee>
 800a30e:	42ae      	cmp	r6, r5
 800a310:	d113      	bne.n	800a33a <__gethex+0x2ee>
 800a312:	2e01      	cmp	r6, #1
 800a314:	d10b      	bne.n	800a32e <__gethex+0x2e2>
 800a316:	9a04      	ldr	r2, [sp, #16]
 800a318:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	2301      	movs	r3, #1
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	f8c9 3000 	str.w	r3, [r9]
 800a326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a328:	2762      	movs	r7, #98	; 0x62
 800a32a:	601c      	str	r4, [r3, #0]
 800a32c:	e723      	b.n	800a176 <__gethex+0x12a>
 800a32e:	1e71      	subs	r1, r6, #1
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fe6c 	bl	800b00e <__any_on>
 800a336:	2800      	cmp	r0, #0
 800a338:	d1ed      	bne.n	800a316 <__gethex+0x2ca>
 800a33a:	ee18 0a10 	vmov	r0, s16
 800a33e:	4621      	mov	r1, r4
 800a340:	f000 fa0a 	bl	800a758 <_Bfree>
 800a344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a346:	2300      	movs	r3, #0
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	2750      	movs	r7, #80	; 0x50
 800a34c:	e713      	b.n	800a176 <__gethex+0x12a>
 800a34e:	bf00      	nop
 800a350:	0800d3cc 	.word	0x0800d3cc
 800a354:	0800d351 	.word	0x0800d351
 800a358:	0800d362 	.word	0x0800d362
 800a35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1eb      	bne.n	800a33a <__gethex+0x2ee>
 800a362:	e7d8      	b.n	800a316 <__gethex+0x2ca>
 800a364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1d5      	bne.n	800a316 <__gethex+0x2ca>
 800a36a:	e7e6      	b.n	800a33a <__gethex+0x2ee>
 800a36c:	1e6f      	subs	r7, r5, #1
 800a36e:	f1ba 0f00 	cmp.w	sl, #0
 800a372:	d131      	bne.n	800a3d8 <__gethex+0x38c>
 800a374:	b127      	cbz	r7, 800a380 <__gethex+0x334>
 800a376:	4639      	mov	r1, r7
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fe48 	bl	800b00e <__any_on>
 800a37e:	4682      	mov	sl, r0
 800a380:	117b      	asrs	r3, r7, #5
 800a382:	2101      	movs	r1, #1
 800a384:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a388:	f007 071f 	and.w	r7, r7, #31
 800a38c:	fa01 f707 	lsl.w	r7, r1, r7
 800a390:	421f      	tst	r7, r3
 800a392:	4629      	mov	r1, r5
 800a394:	4620      	mov	r0, r4
 800a396:	bf18      	it	ne
 800a398:	f04a 0a02 	orrne.w	sl, sl, #2
 800a39c:	1b76      	subs	r6, r6, r5
 800a39e:	f7ff fded 	bl	8009f7c <rshift>
 800a3a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3a6:	2702      	movs	r7, #2
 800a3a8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ac:	d048      	beq.n	800a440 <__gethex+0x3f4>
 800a3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d015      	beq.n	800a3e2 <__gethex+0x396>
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d017      	beq.n	800a3ea <__gethex+0x39e>
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d109      	bne.n	800a3d2 <__gethex+0x386>
 800a3be:	f01a 0f02 	tst.w	sl, #2
 800a3c2:	d006      	beq.n	800a3d2 <__gethex+0x386>
 800a3c4:	f8d9 0000 	ldr.w	r0, [r9]
 800a3c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3cc:	f01a 0f01 	tst.w	sl, #1
 800a3d0:	d10e      	bne.n	800a3f0 <__gethex+0x3a4>
 800a3d2:	f047 0710 	orr.w	r7, r7, #16
 800a3d6:	e033      	b.n	800a440 <__gethex+0x3f4>
 800a3d8:	f04f 0a01 	mov.w	sl, #1
 800a3dc:	e7d0      	b.n	800a380 <__gethex+0x334>
 800a3de:	2701      	movs	r7, #1
 800a3e0:	e7e2      	b.n	800a3a8 <__gethex+0x35c>
 800a3e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3e4:	f1c3 0301 	rsb	r3, r3, #1
 800a3e8:	9315      	str	r3, [sp, #84]	; 0x54
 800a3ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0f0      	beq.n	800a3d2 <__gethex+0x386>
 800a3f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3f4:	f104 0314 	add.w	r3, r4, #20
 800a3f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a400:	f04f 0c00 	mov.w	ip, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a40e:	d01c      	beq.n	800a44a <__gethex+0x3fe>
 800a410:	3201      	adds	r2, #1
 800a412:	6002      	str	r2, [r0, #0]
 800a414:	2f02      	cmp	r7, #2
 800a416:	f104 0314 	add.w	r3, r4, #20
 800a41a:	d13f      	bne.n	800a49c <__gethex+0x450>
 800a41c:	f8d8 2000 	ldr.w	r2, [r8]
 800a420:	3a01      	subs	r2, #1
 800a422:	42b2      	cmp	r2, r6
 800a424:	d10a      	bne.n	800a43c <__gethex+0x3f0>
 800a426:	1171      	asrs	r1, r6, #5
 800a428:	2201      	movs	r2, #1
 800a42a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a42e:	f006 061f 	and.w	r6, r6, #31
 800a432:	fa02 f606 	lsl.w	r6, r2, r6
 800a436:	421e      	tst	r6, r3
 800a438:	bf18      	it	ne
 800a43a:	4617      	movne	r7, r2
 800a43c:	f047 0720 	orr.w	r7, r7, #32
 800a440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a442:	601c      	str	r4, [r3, #0]
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	601d      	str	r5, [r3, #0]
 800a448:	e695      	b.n	800a176 <__gethex+0x12a>
 800a44a:	4299      	cmp	r1, r3
 800a44c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a450:	d8d8      	bhi.n	800a404 <__gethex+0x3b8>
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	459b      	cmp	fp, r3
 800a456:	db19      	blt.n	800a48c <__gethex+0x440>
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	ee18 0a10 	vmov	r0, s16
 800a45e:	3101      	adds	r1, #1
 800a460:	f000 f93a 	bl	800a6d8 <_Balloc>
 800a464:	4681      	mov	r9, r0
 800a466:	b918      	cbnz	r0, 800a470 <__gethex+0x424>
 800a468:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <__gethex+0x488>)
 800a46a:	4602      	mov	r2, r0
 800a46c:	2184      	movs	r1, #132	; 0x84
 800a46e:	e6a8      	b.n	800a1c2 <__gethex+0x176>
 800a470:	6922      	ldr	r2, [r4, #16]
 800a472:	3202      	adds	r2, #2
 800a474:	f104 010c 	add.w	r1, r4, #12
 800a478:	0092      	lsls	r2, r2, #2
 800a47a:	300c      	adds	r0, #12
 800a47c:	f000 f91e 	bl	800a6bc <memcpy>
 800a480:	4621      	mov	r1, r4
 800a482:	ee18 0a10 	vmov	r0, s16
 800a486:	f000 f967 	bl	800a758 <_Bfree>
 800a48a:	464c      	mov	r4, r9
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a494:	6122      	str	r2, [r4, #16]
 800a496:	2201      	movs	r2, #1
 800a498:	615a      	str	r2, [r3, #20]
 800a49a:	e7bb      	b.n	800a414 <__gethex+0x3c8>
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	455a      	cmp	r2, fp
 800a4a0:	dd0b      	ble.n	800a4ba <__gethex+0x46e>
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f7ff fd69 	bl	8009f7c <rshift>
 800a4aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4ae:	3501      	adds	r5, #1
 800a4b0:	42ab      	cmp	r3, r5
 800a4b2:	f6ff aed0 	blt.w	800a256 <__gethex+0x20a>
 800a4b6:	2701      	movs	r7, #1
 800a4b8:	e7c0      	b.n	800a43c <__gethex+0x3f0>
 800a4ba:	f016 061f 	ands.w	r6, r6, #31
 800a4be:	d0fa      	beq.n	800a4b6 <__gethex+0x46a>
 800a4c0:	449a      	add	sl, r3
 800a4c2:	f1c6 0620 	rsb	r6, r6, #32
 800a4c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a4ca:	f000 f9fb 	bl	800a8c4 <__hi0bits>
 800a4ce:	42b0      	cmp	r0, r6
 800a4d0:	dbe7      	blt.n	800a4a2 <__gethex+0x456>
 800a4d2:	e7f0      	b.n	800a4b6 <__gethex+0x46a>
 800a4d4:	0800d351 	.word	0x0800d351

0800a4d8 <L_shift>:
 800a4d8:	f1c2 0208 	rsb	r2, r2, #8
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	f1c2 0620 	rsb	r6, r2, #32
 800a4e4:	6843      	ldr	r3, [r0, #4]
 800a4e6:	6804      	ldr	r4, [r0, #0]
 800a4e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a4ec:	432c      	orrs	r4, r5
 800a4ee:	40d3      	lsrs	r3, r2
 800a4f0:	6004      	str	r4, [r0, #0]
 800a4f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4f6:	4288      	cmp	r0, r1
 800a4f8:	d3f4      	bcc.n	800a4e4 <L_shift+0xc>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}

0800a4fc <__match>:
 800a4fc:	b530      	push	{r4, r5, lr}
 800a4fe:	6803      	ldr	r3, [r0, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	b914      	cbnz	r4, 800a50e <__match+0x12>
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	2001      	movs	r0, #1
 800a50c:	bd30      	pop	{r4, r5, pc}
 800a50e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a512:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a516:	2d19      	cmp	r5, #25
 800a518:	bf98      	it	ls
 800a51a:	3220      	addls	r2, #32
 800a51c:	42a2      	cmp	r2, r4
 800a51e:	d0f0      	beq.n	800a502 <__match+0x6>
 800a520:	2000      	movs	r0, #0
 800a522:	e7f3      	b.n	800a50c <__match+0x10>

0800a524 <__hexnan>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	680b      	ldr	r3, [r1, #0]
 800a52a:	6801      	ldr	r1, [r0, #0]
 800a52c:	115e      	asrs	r6, r3, #5
 800a52e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a532:	f013 031f 	ands.w	r3, r3, #31
 800a536:	b087      	sub	sp, #28
 800a538:	bf18      	it	ne
 800a53a:	3604      	addne	r6, #4
 800a53c:	2500      	movs	r5, #0
 800a53e:	1f37      	subs	r7, r6, #4
 800a540:	4682      	mov	sl, r0
 800a542:	4690      	mov	r8, r2
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	f846 5c04 	str.w	r5, [r6, #-4]
 800a54a:	46b9      	mov	r9, r7
 800a54c:	463c      	mov	r4, r7
 800a54e:	9502      	str	r5, [sp, #8]
 800a550:	46ab      	mov	fp, r5
 800a552:	784a      	ldrb	r2, [r1, #1]
 800a554:	1c4b      	adds	r3, r1, #1
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	b342      	cbz	r2, 800a5ac <__hexnan+0x88>
 800a55a:	4610      	mov	r0, r2
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	9204      	str	r2, [sp, #16]
 800a560:	f7ff fd5e 	bl	800a020 <__hexdig_fun>
 800a564:	2800      	cmp	r0, #0
 800a566:	d14f      	bne.n	800a608 <__hexnan+0xe4>
 800a568:	9a04      	ldr	r2, [sp, #16]
 800a56a:	9905      	ldr	r1, [sp, #20]
 800a56c:	2a20      	cmp	r2, #32
 800a56e:	d818      	bhi.n	800a5a2 <__hexnan+0x7e>
 800a570:	9b02      	ldr	r3, [sp, #8]
 800a572:	459b      	cmp	fp, r3
 800a574:	dd13      	ble.n	800a59e <__hexnan+0x7a>
 800a576:	454c      	cmp	r4, r9
 800a578:	d206      	bcs.n	800a588 <__hexnan+0x64>
 800a57a:	2d07      	cmp	r5, #7
 800a57c:	dc04      	bgt.n	800a588 <__hexnan+0x64>
 800a57e:	462a      	mov	r2, r5
 800a580:	4649      	mov	r1, r9
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff ffa8 	bl	800a4d8 <L_shift>
 800a588:	4544      	cmp	r4, r8
 800a58a:	d950      	bls.n	800a62e <__hexnan+0x10a>
 800a58c:	2300      	movs	r3, #0
 800a58e:	f1a4 0904 	sub.w	r9, r4, #4
 800a592:	f844 3c04 	str.w	r3, [r4, #-4]
 800a596:	f8cd b008 	str.w	fp, [sp, #8]
 800a59a:	464c      	mov	r4, r9
 800a59c:	461d      	mov	r5, r3
 800a59e:	9903      	ldr	r1, [sp, #12]
 800a5a0:	e7d7      	b.n	800a552 <__hexnan+0x2e>
 800a5a2:	2a29      	cmp	r2, #41	; 0x29
 800a5a4:	d156      	bne.n	800a654 <__hexnan+0x130>
 800a5a6:	3102      	adds	r1, #2
 800a5a8:	f8ca 1000 	str.w	r1, [sl]
 800a5ac:	f1bb 0f00 	cmp.w	fp, #0
 800a5b0:	d050      	beq.n	800a654 <__hexnan+0x130>
 800a5b2:	454c      	cmp	r4, r9
 800a5b4:	d206      	bcs.n	800a5c4 <__hexnan+0xa0>
 800a5b6:	2d07      	cmp	r5, #7
 800a5b8:	dc04      	bgt.n	800a5c4 <__hexnan+0xa0>
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4649      	mov	r1, r9
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7ff ff8a 	bl	800a4d8 <L_shift>
 800a5c4:	4544      	cmp	r4, r8
 800a5c6:	d934      	bls.n	800a632 <__hexnan+0x10e>
 800a5c8:	f1a8 0204 	sub.w	r2, r8, #4
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5d6:	429f      	cmp	r7, r3
 800a5d8:	d2f9      	bcs.n	800a5ce <__hexnan+0xaa>
 800a5da:	1b3b      	subs	r3, r7, r4
 800a5dc:	f023 0303 	bic.w	r3, r3, #3
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	3e03      	subs	r6, #3
 800a5e6:	42b4      	cmp	r4, r6
 800a5e8:	bf88      	it	hi
 800a5ea:	2304      	movhi	r3, #4
 800a5ec:	4443      	add	r3, r8
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f843 2b04 	str.w	r2, [r3], #4
 800a5f4:	429f      	cmp	r7, r3
 800a5f6:	d2fb      	bcs.n	800a5f0 <__hexnan+0xcc>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	b91b      	cbnz	r3, 800a604 <__hexnan+0xe0>
 800a5fc:	4547      	cmp	r7, r8
 800a5fe:	d127      	bne.n	800a650 <__hexnan+0x12c>
 800a600:	2301      	movs	r3, #1
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	2005      	movs	r0, #5
 800a606:	e026      	b.n	800a656 <__hexnan+0x132>
 800a608:	3501      	adds	r5, #1
 800a60a:	2d08      	cmp	r5, #8
 800a60c:	f10b 0b01 	add.w	fp, fp, #1
 800a610:	dd06      	ble.n	800a620 <__hexnan+0xfc>
 800a612:	4544      	cmp	r4, r8
 800a614:	d9c3      	bls.n	800a59e <__hexnan+0x7a>
 800a616:	2300      	movs	r3, #0
 800a618:	f844 3c04 	str.w	r3, [r4, #-4]
 800a61c:	2501      	movs	r5, #1
 800a61e:	3c04      	subs	r4, #4
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	f000 000f 	and.w	r0, r0, #15
 800a626:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a62a:	6022      	str	r2, [r4, #0]
 800a62c:	e7b7      	b.n	800a59e <__hexnan+0x7a>
 800a62e:	2508      	movs	r5, #8
 800a630:	e7b5      	b.n	800a59e <__hexnan+0x7a>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d0df      	beq.n	800a5f8 <__hexnan+0xd4>
 800a638:	f04f 32ff 	mov.w	r2, #4294967295
 800a63c:	f1c3 0320 	rsb	r3, r3, #32
 800a640:	fa22 f303 	lsr.w	r3, r2, r3
 800a644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a648:	401a      	ands	r2, r3
 800a64a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a64e:	e7d3      	b.n	800a5f8 <__hexnan+0xd4>
 800a650:	3f04      	subs	r7, #4
 800a652:	e7d1      	b.n	800a5f8 <__hexnan+0xd4>
 800a654:	2004      	movs	r0, #4
 800a656:	b007      	add	sp, #28
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a65c <_localeconv_r>:
 800a65c:	4800      	ldr	r0, [pc, #0]	; (800a660 <_localeconv_r+0x4>)
 800a65e:	4770      	bx	lr
 800a660:	200001f0 	.word	0x200001f0

0800a664 <_lseek_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d07      	ldr	r5, [pc, #28]	; (800a684 <_lseek_r+0x20>)
 800a668:	4604      	mov	r4, r0
 800a66a:	4608      	mov	r0, r1
 800a66c:	4611      	mov	r1, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	f7f8 f83c 	bl	80026f0 <_lseek>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_lseek_r+0x1e>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_lseek_r+0x1e>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	200186e0 	.word	0x200186e0

0800a688 <malloc>:
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <malloc+0xc>)
 800a68a:	4601      	mov	r1, r0
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	f000 bd3f 	b.w	800b110 <_malloc_r>
 800a692:	bf00      	nop
 800a694:	20000098 	.word	0x20000098

0800a698 <__ascii_mbtowc>:
 800a698:	b082      	sub	sp, #8
 800a69a:	b901      	cbnz	r1, 800a69e <__ascii_mbtowc+0x6>
 800a69c:	a901      	add	r1, sp, #4
 800a69e:	b142      	cbz	r2, 800a6b2 <__ascii_mbtowc+0x1a>
 800a6a0:	b14b      	cbz	r3, 800a6b6 <__ascii_mbtowc+0x1e>
 800a6a2:	7813      	ldrb	r3, [r2, #0]
 800a6a4:	600b      	str	r3, [r1, #0]
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	1e10      	subs	r0, r2, #0
 800a6aa:	bf18      	it	ne
 800a6ac:	2001      	movne	r0, #1
 800a6ae:	b002      	add	sp, #8
 800a6b0:	4770      	bx	lr
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	e7fb      	b.n	800a6ae <__ascii_mbtowc+0x16>
 800a6b6:	f06f 0001 	mvn.w	r0, #1
 800a6ba:	e7f8      	b.n	800a6ae <__ascii_mbtowc+0x16>

0800a6bc <memcpy>:
 800a6bc:	440a      	add	r2, r1
 800a6be:	4291      	cmp	r1, r2
 800a6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c4:	d100      	bne.n	800a6c8 <memcpy+0xc>
 800a6c6:	4770      	bx	lr
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d2:	4291      	cmp	r1, r2
 800a6d4:	d1f9      	bne.n	800a6ca <memcpy+0xe>
 800a6d6:	bd10      	pop	{r4, pc}

0800a6d8 <_Balloc>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6dc:	4604      	mov	r4, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	b976      	cbnz	r6, 800a700 <_Balloc+0x28>
 800a6e2:	2010      	movs	r0, #16
 800a6e4:	f7ff ffd0 	bl	800a688 <malloc>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a6ec:	b920      	cbnz	r0, 800a6f8 <_Balloc+0x20>
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <_Balloc+0x78>)
 800a6f0:	4818      	ldr	r0, [pc, #96]	; (800a754 <_Balloc+0x7c>)
 800a6f2:	2166      	movs	r1, #102	; 0x66
 800a6f4:	f001 fb0c 	bl	800bd10 <__assert_func>
 800a6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6fc:	6006      	str	r6, [r0, #0]
 800a6fe:	60c6      	str	r6, [r0, #12]
 800a700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a702:	68f3      	ldr	r3, [r6, #12]
 800a704:	b183      	cbz	r3, 800a728 <_Balloc+0x50>
 800a706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a70e:	b9b8      	cbnz	r0, 800a740 <_Balloc+0x68>
 800a710:	2101      	movs	r1, #1
 800a712:	fa01 f605 	lsl.w	r6, r1, r5
 800a716:	1d72      	adds	r2, r6, #5
 800a718:	0092      	lsls	r2, r2, #2
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fc98 	bl	800b050 <_calloc_r>
 800a720:	b160      	cbz	r0, 800a73c <_Balloc+0x64>
 800a722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a726:	e00e      	b.n	800a746 <_Balloc+0x6e>
 800a728:	2221      	movs	r2, #33	; 0x21
 800a72a:	2104      	movs	r1, #4
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 fc8f 	bl	800b050 <_calloc_r>
 800a732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a734:	60f0      	str	r0, [r6, #12]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e4      	bne.n	800a706 <_Balloc+0x2e>
 800a73c:	2000      	movs	r0, #0
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	6802      	ldr	r2, [r0, #0]
 800a742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a746:	2300      	movs	r3, #0
 800a748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a74c:	e7f7      	b.n	800a73e <_Balloc+0x66>
 800a74e:	bf00      	nop
 800a750:	0800d2db 	.word	0x0800d2db
 800a754:	0800d3e0 	.word	0x0800d3e0

0800a758 <_Bfree>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a75c:	4605      	mov	r5, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	b976      	cbnz	r6, 800a780 <_Bfree+0x28>
 800a762:	2010      	movs	r0, #16
 800a764:	f7ff ff90 	bl	800a688 <malloc>
 800a768:	4602      	mov	r2, r0
 800a76a:	6268      	str	r0, [r5, #36]	; 0x24
 800a76c:	b920      	cbnz	r0, 800a778 <_Bfree+0x20>
 800a76e:	4b09      	ldr	r3, [pc, #36]	; (800a794 <_Bfree+0x3c>)
 800a770:	4809      	ldr	r0, [pc, #36]	; (800a798 <_Bfree+0x40>)
 800a772:	218a      	movs	r1, #138	; 0x8a
 800a774:	f001 facc 	bl	800bd10 <__assert_func>
 800a778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a77c:	6006      	str	r6, [r0, #0]
 800a77e:	60c6      	str	r6, [r0, #12]
 800a780:	b13c      	cbz	r4, 800a792 <_Bfree+0x3a>
 800a782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a784:	6862      	ldr	r2, [r4, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a78c:	6021      	str	r1, [r4, #0]
 800a78e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	0800d2db 	.word	0x0800d2db
 800a798:	0800d3e0 	.word	0x0800d3e0

0800a79c <__multadd>:
 800a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a0:	690e      	ldr	r6, [r1, #16]
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	4698      	mov	r8, r3
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	f101 0014 	add.w	r0, r1, #20
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	6805      	ldr	r5, [r0, #0]
 800a7b0:	b2a9      	uxth	r1, r5
 800a7b2:	fb02 8101 	mla	r1, r2, r1, r8
 800a7b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7ba:	0c2d      	lsrs	r5, r5, #16
 800a7bc:	fb02 c505 	mla	r5, r2, r5, ip
 800a7c0:	b289      	uxth	r1, r1
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a7c8:	429e      	cmp	r6, r3
 800a7ca:	f840 1b04 	str.w	r1, [r0], #4
 800a7ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a7d2:	dcec      	bgt.n	800a7ae <__multadd+0x12>
 800a7d4:	f1b8 0f00 	cmp.w	r8, #0
 800a7d8:	d022      	beq.n	800a820 <__multadd+0x84>
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	42b3      	cmp	r3, r6
 800a7de:	dc19      	bgt.n	800a814 <__multadd+0x78>
 800a7e0:	6861      	ldr	r1, [r4, #4]
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f7ff ff77 	bl	800a6d8 <_Balloc>
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <__multadd+0x5e>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b0d      	ldr	r3, [pc, #52]	; (800a828 <__multadd+0x8c>)
 800a7f2:	480e      	ldr	r0, [pc, #56]	; (800a82c <__multadd+0x90>)
 800a7f4:	21b5      	movs	r1, #181	; 0xb5
 800a7f6:	f001 fa8b 	bl	800bd10 <__assert_func>
 800a7fa:	6922      	ldr	r2, [r4, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	f104 010c 	add.w	r1, r4, #12
 800a802:	0092      	lsls	r2, r2, #2
 800a804:	300c      	adds	r0, #12
 800a806:	f7ff ff59 	bl	800a6bc <memcpy>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff ffa3 	bl	800a758 <_Bfree>
 800a812:	462c      	mov	r4, r5
 800a814:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a818:	3601      	adds	r6, #1
 800a81a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a81e:	6126      	str	r6, [r4, #16]
 800a820:	4620      	mov	r0, r4
 800a822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a826:	bf00      	nop
 800a828:	0800d351 	.word	0x0800d351
 800a82c:	0800d3e0 	.word	0x0800d3e0

0800a830 <__s2b>:
 800a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	4615      	mov	r5, r2
 800a838:	461f      	mov	r7, r3
 800a83a:	2209      	movs	r2, #9
 800a83c:	3308      	adds	r3, #8
 800a83e:	4606      	mov	r6, r0
 800a840:	fb93 f3f2 	sdiv	r3, r3, r2
 800a844:	2100      	movs	r1, #0
 800a846:	2201      	movs	r2, #1
 800a848:	429a      	cmp	r2, r3
 800a84a:	db09      	blt.n	800a860 <__s2b+0x30>
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff ff43 	bl	800a6d8 <_Balloc>
 800a852:	b940      	cbnz	r0, 800a866 <__s2b+0x36>
 800a854:	4602      	mov	r2, r0
 800a856:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <__s2b+0x8c>)
 800a858:	4819      	ldr	r0, [pc, #100]	; (800a8c0 <__s2b+0x90>)
 800a85a:	21ce      	movs	r1, #206	; 0xce
 800a85c:	f001 fa58 	bl	800bd10 <__assert_func>
 800a860:	0052      	lsls	r2, r2, #1
 800a862:	3101      	adds	r1, #1
 800a864:	e7f0      	b.n	800a848 <__s2b+0x18>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	6143      	str	r3, [r0, #20]
 800a86a:	2d09      	cmp	r5, #9
 800a86c:	f04f 0301 	mov.w	r3, #1
 800a870:	6103      	str	r3, [r0, #16]
 800a872:	dd16      	ble.n	800a8a2 <__s2b+0x72>
 800a874:	f104 0909 	add.w	r9, r4, #9
 800a878:	46c8      	mov	r8, r9
 800a87a:	442c      	add	r4, r5
 800a87c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a880:	4601      	mov	r1, r0
 800a882:	3b30      	subs	r3, #48	; 0x30
 800a884:	220a      	movs	r2, #10
 800a886:	4630      	mov	r0, r6
 800a888:	f7ff ff88 	bl	800a79c <__multadd>
 800a88c:	45a0      	cmp	r8, r4
 800a88e:	d1f5      	bne.n	800a87c <__s2b+0x4c>
 800a890:	f1a5 0408 	sub.w	r4, r5, #8
 800a894:	444c      	add	r4, r9
 800a896:	1b2d      	subs	r5, r5, r4
 800a898:	1963      	adds	r3, r4, r5
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	db04      	blt.n	800a8a8 <__s2b+0x78>
 800a89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	340a      	adds	r4, #10
 800a8a4:	2509      	movs	r5, #9
 800a8a6:	e7f6      	b.n	800a896 <__s2b+0x66>
 800a8a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8ac:	4601      	mov	r1, r0
 800a8ae:	3b30      	subs	r3, #48	; 0x30
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7ff ff72 	bl	800a79c <__multadd>
 800a8b8:	e7ee      	b.n	800a898 <__s2b+0x68>
 800a8ba:	bf00      	nop
 800a8bc:	0800d351 	.word	0x0800d351
 800a8c0:	0800d3e0 	.word	0x0800d3e0

0800a8c4 <__hi0bits>:
 800a8c4:	0c03      	lsrs	r3, r0, #16
 800a8c6:	041b      	lsls	r3, r3, #16
 800a8c8:	b9d3      	cbnz	r3, 800a900 <__hi0bits+0x3c>
 800a8ca:	0400      	lsls	r0, r0, #16
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8d2:	bf04      	itt	eq
 800a8d4:	0200      	lsleq	r0, r0, #8
 800a8d6:	3308      	addeq	r3, #8
 800a8d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8dc:	bf04      	itt	eq
 800a8de:	0100      	lsleq	r0, r0, #4
 800a8e0:	3304      	addeq	r3, #4
 800a8e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8e6:	bf04      	itt	eq
 800a8e8:	0080      	lsleq	r0, r0, #2
 800a8ea:	3302      	addeq	r3, #2
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	db05      	blt.n	800a8fc <__hi0bits+0x38>
 800a8f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8f4:	f103 0301 	add.w	r3, r3, #1
 800a8f8:	bf08      	it	eq
 800a8fa:	2320      	moveq	r3, #32
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	4770      	bx	lr
 800a900:	2300      	movs	r3, #0
 800a902:	e7e4      	b.n	800a8ce <__hi0bits+0xa>

0800a904 <__lo0bits>:
 800a904:	6803      	ldr	r3, [r0, #0]
 800a906:	f013 0207 	ands.w	r2, r3, #7
 800a90a:	4601      	mov	r1, r0
 800a90c:	d00b      	beq.n	800a926 <__lo0bits+0x22>
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d424      	bmi.n	800a95c <__lo0bits+0x58>
 800a912:	0798      	lsls	r0, r3, #30
 800a914:	bf49      	itett	mi
 800a916:	085b      	lsrmi	r3, r3, #1
 800a918:	089b      	lsrpl	r3, r3, #2
 800a91a:	2001      	movmi	r0, #1
 800a91c:	600b      	strmi	r3, [r1, #0]
 800a91e:	bf5c      	itt	pl
 800a920:	600b      	strpl	r3, [r1, #0]
 800a922:	2002      	movpl	r0, #2
 800a924:	4770      	bx	lr
 800a926:	b298      	uxth	r0, r3
 800a928:	b9b0      	cbnz	r0, 800a958 <__lo0bits+0x54>
 800a92a:	0c1b      	lsrs	r3, r3, #16
 800a92c:	2010      	movs	r0, #16
 800a92e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a932:	bf04      	itt	eq
 800a934:	0a1b      	lsreq	r3, r3, #8
 800a936:	3008      	addeq	r0, #8
 800a938:	071a      	lsls	r2, r3, #28
 800a93a:	bf04      	itt	eq
 800a93c:	091b      	lsreq	r3, r3, #4
 800a93e:	3004      	addeq	r0, #4
 800a940:	079a      	lsls	r2, r3, #30
 800a942:	bf04      	itt	eq
 800a944:	089b      	lsreq	r3, r3, #2
 800a946:	3002      	addeq	r0, #2
 800a948:	07da      	lsls	r2, r3, #31
 800a94a:	d403      	bmi.n	800a954 <__lo0bits+0x50>
 800a94c:	085b      	lsrs	r3, r3, #1
 800a94e:	f100 0001 	add.w	r0, r0, #1
 800a952:	d005      	beq.n	800a960 <__lo0bits+0x5c>
 800a954:	600b      	str	r3, [r1, #0]
 800a956:	4770      	bx	lr
 800a958:	4610      	mov	r0, r2
 800a95a:	e7e8      	b.n	800a92e <__lo0bits+0x2a>
 800a95c:	2000      	movs	r0, #0
 800a95e:	4770      	bx	lr
 800a960:	2020      	movs	r0, #32
 800a962:	4770      	bx	lr

0800a964 <__i2b>:
 800a964:	b510      	push	{r4, lr}
 800a966:	460c      	mov	r4, r1
 800a968:	2101      	movs	r1, #1
 800a96a:	f7ff feb5 	bl	800a6d8 <_Balloc>
 800a96e:	4602      	mov	r2, r0
 800a970:	b928      	cbnz	r0, 800a97e <__i2b+0x1a>
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <__i2b+0x24>)
 800a974:	4805      	ldr	r0, [pc, #20]	; (800a98c <__i2b+0x28>)
 800a976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a97a:	f001 f9c9 	bl	800bd10 <__assert_func>
 800a97e:	2301      	movs	r3, #1
 800a980:	6144      	str	r4, [r0, #20]
 800a982:	6103      	str	r3, [r0, #16]
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	0800d351 	.word	0x0800d351
 800a98c:	0800d3e0 	.word	0x0800d3e0

0800a990 <__multiply>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	4614      	mov	r4, r2
 800a996:	690a      	ldr	r2, [r1, #16]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	bfb8      	it	lt
 800a99e:	460b      	movlt	r3, r1
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	bfbc      	itt	lt
 800a9a4:	4625      	movlt	r5, r4
 800a9a6:	461c      	movlt	r4, r3
 800a9a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9b0:	68ab      	ldr	r3, [r5, #8]
 800a9b2:	6869      	ldr	r1, [r5, #4]
 800a9b4:	eb0a 0709 	add.w	r7, sl, r9
 800a9b8:	42bb      	cmp	r3, r7
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	bfb8      	it	lt
 800a9be:	3101      	addlt	r1, #1
 800a9c0:	f7ff fe8a 	bl	800a6d8 <_Balloc>
 800a9c4:	b930      	cbnz	r0, 800a9d4 <__multiply+0x44>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	4b42      	ldr	r3, [pc, #264]	; (800aad4 <__multiply+0x144>)
 800a9ca:	4843      	ldr	r0, [pc, #268]	; (800aad8 <__multiply+0x148>)
 800a9cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a9d0:	f001 f99e 	bl	800bd10 <__assert_func>
 800a9d4:	f100 0614 	add.w	r6, r0, #20
 800a9d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9dc:	4633      	mov	r3, r6
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4543      	cmp	r3, r8
 800a9e2:	d31e      	bcc.n	800aa22 <__multiply+0x92>
 800a9e4:	f105 0c14 	add.w	ip, r5, #20
 800a9e8:	f104 0314 	add.w	r3, r4, #20
 800a9ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9f4:	9202      	str	r2, [sp, #8]
 800a9f6:	ebac 0205 	sub.w	r2, ip, r5
 800a9fa:	3a15      	subs	r2, #21
 800a9fc:	f022 0203 	bic.w	r2, r2, #3
 800aa00:	3204      	adds	r2, #4
 800aa02:	f105 0115 	add.w	r1, r5, #21
 800aa06:	458c      	cmp	ip, r1
 800aa08:	bf38      	it	cc
 800aa0a:	2204      	movcc	r2, #4
 800aa0c:	9201      	str	r2, [sp, #4]
 800aa0e:	9a02      	ldr	r2, [sp, #8]
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d808      	bhi.n	800aa28 <__multiply+0x98>
 800aa16:	2f00      	cmp	r7, #0
 800aa18:	dc55      	bgt.n	800aac6 <__multiply+0x136>
 800aa1a:	6107      	str	r7, [r0, #16]
 800aa1c:	b005      	add	sp, #20
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	f843 2b04 	str.w	r2, [r3], #4
 800aa26:	e7db      	b.n	800a9e0 <__multiply+0x50>
 800aa28:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa2c:	f1ba 0f00 	cmp.w	sl, #0
 800aa30:	d020      	beq.n	800aa74 <__multiply+0xe4>
 800aa32:	f105 0e14 	add.w	lr, r5, #20
 800aa36:	46b1      	mov	r9, r6
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa3e:	f8d9 b000 	ldr.w	fp, [r9]
 800aa42:	b2a1      	uxth	r1, r4
 800aa44:	fa1f fb8b 	uxth.w	fp, fp
 800aa48:	fb0a b101 	mla	r1, sl, r1, fp
 800aa4c:	4411      	add	r1, r2
 800aa4e:	f8d9 2000 	ldr.w	r2, [r9]
 800aa52:	0c24      	lsrs	r4, r4, #16
 800aa54:	0c12      	lsrs	r2, r2, #16
 800aa56:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa5e:	b289      	uxth	r1, r1
 800aa60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa64:	45f4      	cmp	ip, lr
 800aa66:	f849 1b04 	str.w	r1, [r9], #4
 800aa6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa6e:	d8e4      	bhi.n	800aa3a <__multiply+0xaa>
 800aa70:	9901      	ldr	r1, [sp, #4]
 800aa72:	5072      	str	r2, [r6, r1]
 800aa74:	9a03      	ldr	r2, [sp, #12]
 800aa76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	d01f      	beq.n	800aac2 <__multiply+0x132>
 800aa82:	6834      	ldr	r4, [r6, #0]
 800aa84:	f105 0114 	add.w	r1, r5, #20
 800aa88:	46b6      	mov	lr, r6
 800aa8a:	f04f 0a00 	mov.w	sl, #0
 800aa8e:	880a      	ldrh	r2, [r1, #0]
 800aa90:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa94:	fb09 b202 	mla	r2, r9, r2, fp
 800aa98:	4492      	add	sl, r2
 800aa9a:	b2a4      	uxth	r4, r4
 800aa9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aaa0:	f84e 4b04 	str.w	r4, [lr], #4
 800aaa4:	f851 4b04 	ldr.w	r4, [r1], #4
 800aaa8:	f8be 2000 	ldrh.w	r2, [lr]
 800aaac:	0c24      	lsrs	r4, r4, #16
 800aaae:	fb09 2404 	mla	r4, r9, r4, r2
 800aab2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aab6:	458c      	cmp	ip, r1
 800aab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aabc:	d8e7      	bhi.n	800aa8e <__multiply+0xfe>
 800aabe:	9a01      	ldr	r2, [sp, #4]
 800aac0:	50b4      	str	r4, [r6, r2]
 800aac2:	3604      	adds	r6, #4
 800aac4:	e7a3      	b.n	800aa0e <__multiply+0x7e>
 800aac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1a5      	bne.n	800aa1a <__multiply+0x8a>
 800aace:	3f01      	subs	r7, #1
 800aad0:	e7a1      	b.n	800aa16 <__multiply+0x86>
 800aad2:	bf00      	nop
 800aad4:	0800d351 	.word	0x0800d351
 800aad8:	0800d3e0 	.word	0x0800d3e0

0800aadc <__pow5mult>:
 800aadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae0:	4615      	mov	r5, r2
 800aae2:	f012 0203 	ands.w	r2, r2, #3
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	d007      	beq.n	800aafc <__pow5mult+0x20>
 800aaec:	4c25      	ldr	r4, [pc, #148]	; (800ab84 <__pow5mult+0xa8>)
 800aaee:	3a01      	subs	r2, #1
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaf6:	f7ff fe51 	bl	800a79c <__multadd>
 800aafa:	4607      	mov	r7, r0
 800aafc:	10ad      	asrs	r5, r5, #2
 800aafe:	d03d      	beq.n	800ab7c <__pow5mult+0xa0>
 800ab00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab02:	b97c      	cbnz	r4, 800ab24 <__pow5mult+0x48>
 800ab04:	2010      	movs	r0, #16
 800ab06:	f7ff fdbf 	bl	800a688 <malloc>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ab0e:	b928      	cbnz	r0, 800ab1c <__pow5mult+0x40>
 800ab10:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <__pow5mult+0xac>)
 800ab12:	481e      	ldr	r0, [pc, #120]	; (800ab8c <__pow5mult+0xb0>)
 800ab14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab18:	f001 f8fa 	bl	800bd10 <__assert_func>
 800ab1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab20:	6004      	str	r4, [r0, #0]
 800ab22:	60c4      	str	r4, [r0, #12]
 800ab24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab2c:	b94c      	cbnz	r4, 800ab42 <__pow5mult+0x66>
 800ab2e:	f240 2171 	movw	r1, #625	; 0x271
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ff16 	bl	800a964 <__i2b>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab3e:	4604      	mov	r4, r0
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	f04f 0900 	mov.w	r9, #0
 800ab46:	07eb      	lsls	r3, r5, #31
 800ab48:	d50a      	bpl.n	800ab60 <__pow5mult+0x84>
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ff1e 	bl	800a990 <__multiply>
 800ab54:	4639      	mov	r1, r7
 800ab56:	4680      	mov	r8, r0
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fdfd 	bl	800a758 <_Bfree>
 800ab5e:	4647      	mov	r7, r8
 800ab60:	106d      	asrs	r5, r5, #1
 800ab62:	d00b      	beq.n	800ab7c <__pow5mult+0xa0>
 800ab64:	6820      	ldr	r0, [r4, #0]
 800ab66:	b938      	cbnz	r0, 800ab78 <__pow5mult+0x9c>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff ff0f 	bl	800a990 <__multiply>
 800ab72:	6020      	str	r0, [r4, #0]
 800ab74:	f8c0 9000 	str.w	r9, [r0]
 800ab78:	4604      	mov	r4, r0
 800ab7a:	e7e4      	b.n	800ab46 <__pow5mult+0x6a>
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab82:	bf00      	nop
 800ab84:	0800d530 	.word	0x0800d530
 800ab88:	0800d2db 	.word	0x0800d2db
 800ab8c:	0800d3e0 	.word	0x0800d3e0

0800ab90 <__lshift>:
 800ab90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	6849      	ldr	r1, [r1, #4]
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	4607      	mov	r7, r0
 800aba2:	4691      	mov	r9, r2
 800aba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba8:	f108 0601 	add.w	r6, r8, #1
 800abac:	42b3      	cmp	r3, r6
 800abae:	db0b      	blt.n	800abc8 <__lshift+0x38>
 800abb0:	4638      	mov	r0, r7
 800abb2:	f7ff fd91 	bl	800a6d8 <_Balloc>
 800abb6:	4605      	mov	r5, r0
 800abb8:	b948      	cbnz	r0, 800abce <__lshift+0x3e>
 800abba:	4602      	mov	r2, r0
 800abbc:	4b28      	ldr	r3, [pc, #160]	; (800ac60 <__lshift+0xd0>)
 800abbe:	4829      	ldr	r0, [pc, #164]	; (800ac64 <__lshift+0xd4>)
 800abc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abc4:	f001 f8a4 	bl	800bd10 <__assert_func>
 800abc8:	3101      	adds	r1, #1
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	e7ee      	b.n	800abac <__lshift+0x1c>
 800abce:	2300      	movs	r3, #0
 800abd0:	f100 0114 	add.w	r1, r0, #20
 800abd4:	f100 0210 	add.w	r2, r0, #16
 800abd8:	4618      	mov	r0, r3
 800abda:	4553      	cmp	r3, sl
 800abdc:	db33      	blt.n	800ac46 <__lshift+0xb6>
 800abde:	6920      	ldr	r0, [r4, #16]
 800abe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abe4:	f104 0314 	add.w	r3, r4, #20
 800abe8:	f019 091f 	ands.w	r9, r9, #31
 800abec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abf4:	d02b      	beq.n	800ac4e <__lshift+0xbe>
 800abf6:	f1c9 0e20 	rsb	lr, r9, #32
 800abfa:	468a      	mov	sl, r1
 800abfc:	2200      	movs	r2, #0
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	fa00 f009 	lsl.w	r0, r0, r9
 800ac04:	4302      	orrs	r2, r0
 800ac06:	f84a 2b04 	str.w	r2, [sl], #4
 800ac0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0e:	459c      	cmp	ip, r3
 800ac10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac14:	d8f3      	bhi.n	800abfe <__lshift+0x6e>
 800ac16:	ebac 0304 	sub.w	r3, ip, r4
 800ac1a:	3b15      	subs	r3, #21
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	3304      	adds	r3, #4
 800ac22:	f104 0015 	add.w	r0, r4, #21
 800ac26:	4584      	cmp	ip, r0
 800ac28:	bf38      	it	cc
 800ac2a:	2304      	movcc	r3, #4
 800ac2c:	50ca      	str	r2, [r1, r3]
 800ac2e:	b10a      	cbz	r2, 800ac34 <__lshift+0xa4>
 800ac30:	f108 0602 	add.w	r6, r8, #2
 800ac34:	3e01      	subs	r6, #1
 800ac36:	4638      	mov	r0, r7
 800ac38:	612e      	str	r6, [r5, #16]
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	f7ff fd8c 	bl	800a758 <_Bfree>
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	e7c5      	b.n	800abda <__lshift+0x4a>
 800ac4e:	3904      	subs	r1, #4
 800ac50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac58:	459c      	cmp	ip, r3
 800ac5a:	d8f9      	bhi.n	800ac50 <__lshift+0xc0>
 800ac5c:	e7ea      	b.n	800ac34 <__lshift+0xa4>
 800ac5e:	bf00      	nop
 800ac60:	0800d351 	.word	0x0800d351
 800ac64:	0800d3e0 	.word	0x0800d3e0

0800ac68 <__mcmp>:
 800ac68:	b530      	push	{r4, r5, lr}
 800ac6a:	6902      	ldr	r2, [r0, #16]
 800ac6c:	690c      	ldr	r4, [r1, #16]
 800ac6e:	1b12      	subs	r2, r2, r4
 800ac70:	d10e      	bne.n	800ac90 <__mcmp+0x28>
 800ac72:	f100 0314 	add.w	r3, r0, #20
 800ac76:	3114      	adds	r1, #20
 800ac78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac88:	42a5      	cmp	r5, r4
 800ac8a:	d003      	beq.n	800ac94 <__mcmp+0x2c>
 800ac8c:	d305      	bcc.n	800ac9a <__mcmp+0x32>
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4610      	mov	r0, r2
 800ac92:	bd30      	pop	{r4, r5, pc}
 800ac94:	4283      	cmp	r3, r0
 800ac96:	d3f3      	bcc.n	800ac80 <__mcmp+0x18>
 800ac98:	e7fa      	b.n	800ac90 <__mcmp+0x28>
 800ac9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9e:	e7f7      	b.n	800ac90 <__mcmp+0x28>

0800aca0 <__mdiff>:
 800aca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	460c      	mov	r4, r1
 800aca6:	4606      	mov	r6, r0
 800aca8:	4611      	mov	r1, r2
 800acaa:	4620      	mov	r0, r4
 800acac:	4617      	mov	r7, r2
 800acae:	f7ff ffdb 	bl	800ac68 <__mcmp>
 800acb2:	1e05      	subs	r5, r0, #0
 800acb4:	d110      	bne.n	800acd8 <__mdiff+0x38>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff fd0d 	bl	800a6d8 <_Balloc>
 800acbe:	b930      	cbnz	r0, 800acce <__mdiff+0x2e>
 800acc0:	4b39      	ldr	r3, [pc, #228]	; (800ada8 <__mdiff+0x108>)
 800acc2:	4602      	mov	r2, r0
 800acc4:	f240 2132 	movw	r1, #562	; 0x232
 800acc8:	4838      	ldr	r0, [pc, #224]	; (800adac <__mdiff+0x10c>)
 800acca:	f001 f821 	bl	800bd10 <__assert_func>
 800acce:	2301      	movs	r3, #1
 800acd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	bfa4      	itt	ge
 800acda:	463b      	movge	r3, r7
 800acdc:	4627      	movge	r7, r4
 800acde:	4630      	mov	r0, r6
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	bfa6      	itte	ge
 800ace4:	461c      	movge	r4, r3
 800ace6:	2500      	movge	r5, #0
 800ace8:	2501      	movlt	r5, #1
 800acea:	f7ff fcf5 	bl	800a6d8 <_Balloc>
 800acee:	b920      	cbnz	r0, 800acfa <__mdiff+0x5a>
 800acf0:	4b2d      	ldr	r3, [pc, #180]	; (800ada8 <__mdiff+0x108>)
 800acf2:	4602      	mov	r2, r0
 800acf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800acf8:	e7e6      	b.n	800acc8 <__mdiff+0x28>
 800acfa:	693e      	ldr	r6, [r7, #16]
 800acfc:	60c5      	str	r5, [r0, #12]
 800acfe:	6925      	ldr	r5, [r4, #16]
 800ad00:	f107 0114 	add.w	r1, r7, #20
 800ad04:	f104 0914 	add.w	r9, r4, #20
 800ad08:	f100 0e14 	add.w	lr, r0, #20
 800ad0c:	f107 0210 	add.w	r2, r7, #16
 800ad10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad18:	46f2      	mov	sl, lr
 800ad1a:	2700      	movs	r7, #0
 800ad1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad24:	fa1f f883 	uxth.w	r8, r3
 800ad28:	fa17 f78b 	uxtah	r7, r7, fp
 800ad2c:	0c1b      	lsrs	r3, r3, #16
 800ad2e:	eba7 0808 	sub.w	r8, r7, r8
 800ad32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad3a:	fa1f f888 	uxth.w	r8, r8
 800ad3e:	141f      	asrs	r7, r3, #16
 800ad40:	454d      	cmp	r5, r9
 800ad42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad46:	f84a 3b04 	str.w	r3, [sl], #4
 800ad4a:	d8e7      	bhi.n	800ad1c <__mdiff+0x7c>
 800ad4c:	1b2b      	subs	r3, r5, r4
 800ad4e:	3b15      	subs	r3, #21
 800ad50:	f023 0303 	bic.w	r3, r3, #3
 800ad54:	3304      	adds	r3, #4
 800ad56:	3415      	adds	r4, #21
 800ad58:	42a5      	cmp	r5, r4
 800ad5a:	bf38      	it	cc
 800ad5c:	2304      	movcc	r3, #4
 800ad5e:	4419      	add	r1, r3
 800ad60:	4473      	add	r3, lr
 800ad62:	469e      	mov	lr, r3
 800ad64:	460d      	mov	r5, r1
 800ad66:	4565      	cmp	r5, ip
 800ad68:	d30e      	bcc.n	800ad88 <__mdiff+0xe8>
 800ad6a:	f10c 0203 	add.w	r2, ip, #3
 800ad6e:	1a52      	subs	r2, r2, r1
 800ad70:	f022 0203 	bic.w	r2, r2, #3
 800ad74:	3903      	subs	r1, #3
 800ad76:	458c      	cmp	ip, r1
 800ad78:	bf38      	it	cc
 800ad7a:	2200      	movcc	r2, #0
 800ad7c:	441a      	add	r2, r3
 800ad7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad82:	b17b      	cbz	r3, 800ada4 <__mdiff+0x104>
 800ad84:	6106      	str	r6, [r0, #16]
 800ad86:	e7a5      	b.n	800acd4 <__mdiff+0x34>
 800ad88:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad8c:	fa17 f488 	uxtah	r4, r7, r8
 800ad90:	1422      	asrs	r2, r4, #16
 800ad92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad96:	b2a4      	uxth	r4, r4
 800ad98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad9c:	f84e 4b04 	str.w	r4, [lr], #4
 800ada0:	1417      	asrs	r7, r2, #16
 800ada2:	e7e0      	b.n	800ad66 <__mdiff+0xc6>
 800ada4:	3e01      	subs	r6, #1
 800ada6:	e7ea      	b.n	800ad7e <__mdiff+0xde>
 800ada8:	0800d351 	.word	0x0800d351
 800adac:	0800d3e0 	.word	0x0800d3e0

0800adb0 <__ulp>:
 800adb0:	b082      	sub	sp, #8
 800adb2:	ed8d 0b00 	vstr	d0, [sp]
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	4912      	ldr	r1, [pc, #72]	; (800ae04 <__ulp+0x54>)
 800adba:	4019      	ands	r1, r3
 800adbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800adc0:	2900      	cmp	r1, #0
 800adc2:	dd05      	ble.n	800add0 <__ulp+0x20>
 800adc4:	2200      	movs	r2, #0
 800adc6:	460b      	mov	r3, r1
 800adc8:	ec43 2b10 	vmov	d0, r2, r3
 800adcc:	b002      	add	sp, #8
 800adce:	4770      	bx	lr
 800add0:	4249      	negs	r1, r1
 800add2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800add6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800adda:	f04f 0200 	mov.w	r2, #0
 800adde:	f04f 0300 	mov.w	r3, #0
 800ade2:	da04      	bge.n	800adee <__ulp+0x3e>
 800ade4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ade8:	fa41 f300 	asr.w	r3, r1, r0
 800adec:	e7ec      	b.n	800adc8 <__ulp+0x18>
 800adee:	f1a0 0114 	sub.w	r1, r0, #20
 800adf2:	291e      	cmp	r1, #30
 800adf4:	bfda      	itte	le
 800adf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800adfa:	fa20 f101 	lsrle.w	r1, r0, r1
 800adfe:	2101      	movgt	r1, #1
 800ae00:	460a      	mov	r2, r1
 800ae02:	e7e1      	b.n	800adc8 <__ulp+0x18>
 800ae04:	7ff00000 	.word	0x7ff00000

0800ae08 <__b2d>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	6905      	ldr	r5, [r0, #16]
 800ae0c:	f100 0714 	add.w	r7, r0, #20
 800ae10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae14:	1f2e      	subs	r6, r5, #4
 800ae16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f7ff fd52 	bl	800a8c4 <__hi0bits>
 800ae20:	f1c0 0320 	rsb	r3, r0, #32
 800ae24:	280a      	cmp	r0, #10
 800ae26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aea4 <__b2d+0x9c>
 800ae2a:	600b      	str	r3, [r1, #0]
 800ae2c:	dc14      	bgt.n	800ae58 <__b2d+0x50>
 800ae2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae32:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae36:	42b7      	cmp	r7, r6
 800ae38:	ea41 030c 	orr.w	r3, r1, ip
 800ae3c:	bf34      	ite	cc
 800ae3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae42:	2100      	movcs	r1, #0
 800ae44:	3015      	adds	r0, #21
 800ae46:	fa04 f000 	lsl.w	r0, r4, r0
 800ae4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae4e:	ea40 0201 	orr.w	r2, r0, r1
 800ae52:	ec43 2b10 	vmov	d0, r2, r3
 800ae56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae58:	42b7      	cmp	r7, r6
 800ae5a:	bf3a      	itte	cc
 800ae5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae60:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae64:	2100      	movcs	r1, #0
 800ae66:	380b      	subs	r0, #11
 800ae68:	d017      	beq.n	800ae9a <__b2d+0x92>
 800ae6a:	f1c0 0c20 	rsb	ip, r0, #32
 800ae6e:	fa04 f500 	lsl.w	r5, r4, r0
 800ae72:	42be      	cmp	r6, r7
 800ae74:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae78:	ea45 0504 	orr.w	r5, r5, r4
 800ae7c:	bf8c      	ite	hi
 800ae7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae82:	2400      	movls	r4, #0
 800ae84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae88:	fa01 f000 	lsl.w	r0, r1, r0
 800ae8c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ae90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae94:	ea40 0204 	orr.w	r2, r0, r4
 800ae98:	e7db      	b.n	800ae52 <__b2d+0x4a>
 800ae9a:	ea44 030c 	orr.w	r3, r4, ip
 800ae9e:	460a      	mov	r2, r1
 800aea0:	e7d7      	b.n	800ae52 <__b2d+0x4a>
 800aea2:	bf00      	nop
 800aea4:	3ff00000 	.word	0x3ff00000

0800aea8 <__d2b>:
 800aea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4689      	mov	r9, r1
 800aeae:	2101      	movs	r1, #1
 800aeb0:	ec57 6b10 	vmov	r6, r7, d0
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	f7ff fc0f 	bl	800a6d8 <_Balloc>
 800aeba:	4604      	mov	r4, r0
 800aebc:	b930      	cbnz	r0, 800aecc <__d2b+0x24>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <__d2b+0xb0>)
 800aec2:	4826      	ldr	r0, [pc, #152]	; (800af5c <__d2b+0xb4>)
 800aec4:	f240 310a 	movw	r1, #778	; 0x30a
 800aec8:	f000 ff22 	bl	800bd10 <__assert_func>
 800aecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aed4:	bb35      	cbnz	r5, 800af24 <__d2b+0x7c>
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	d028      	beq.n	800af2e <__d2b+0x86>
 800aedc:	4668      	mov	r0, sp
 800aede:	9600      	str	r6, [sp, #0]
 800aee0:	f7ff fd10 	bl	800a904 <__lo0bits>
 800aee4:	9900      	ldr	r1, [sp, #0]
 800aee6:	b300      	cbz	r0, 800af2a <__d2b+0x82>
 800aee8:	9a01      	ldr	r2, [sp, #4]
 800aeea:	f1c0 0320 	rsb	r3, r0, #32
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	430b      	orrs	r3, r1
 800aef4:	40c2      	lsrs	r2, r0
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	61a3      	str	r3, [r4, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bf14      	ite	ne
 800af02:	2202      	movne	r2, #2
 800af04:	2201      	moveq	r2, #1
 800af06:	6122      	str	r2, [r4, #16]
 800af08:	b1d5      	cbz	r5, 800af40 <__d2b+0x98>
 800af0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af0e:	4405      	add	r5, r0
 800af10:	f8c9 5000 	str.w	r5, [r9]
 800af14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af18:	f8c8 0000 	str.w	r0, [r8]
 800af1c:	4620      	mov	r0, r4
 800af1e:	b003      	add	sp, #12
 800af20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af28:	e7d5      	b.n	800aed6 <__d2b+0x2e>
 800af2a:	6161      	str	r1, [r4, #20]
 800af2c:	e7e5      	b.n	800aefa <__d2b+0x52>
 800af2e:	a801      	add	r0, sp, #4
 800af30:	f7ff fce8 	bl	800a904 <__lo0bits>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	6163      	str	r3, [r4, #20]
 800af38:	2201      	movs	r2, #1
 800af3a:	6122      	str	r2, [r4, #16]
 800af3c:	3020      	adds	r0, #32
 800af3e:	e7e3      	b.n	800af08 <__d2b+0x60>
 800af40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af48:	f8c9 0000 	str.w	r0, [r9]
 800af4c:	6918      	ldr	r0, [r3, #16]
 800af4e:	f7ff fcb9 	bl	800a8c4 <__hi0bits>
 800af52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af56:	e7df      	b.n	800af18 <__d2b+0x70>
 800af58:	0800d351 	.word	0x0800d351
 800af5c:	0800d3e0 	.word	0x0800d3e0

0800af60 <__ratio>:
 800af60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	468a      	mov	sl, r1
 800af66:	4669      	mov	r1, sp
 800af68:	4683      	mov	fp, r0
 800af6a:	f7ff ff4d 	bl	800ae08 <__b2d>
 800af6e:	a901      	add	r1, sp, #4
 800af70:	4650      	mov	r0, sl
 800af72:	ec59 8b10 	vmov	r8, r9, d0
 800af76:	ee10 6a10 	vmov	r6, s0
 800af7a:	f7ff ff45 	bl	800ae08 <__b2d>
 800af7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800af82:	f8da 2010 	ldr.w	r2, [sl, #16]
 800af86:	eba3 0c02 	sub.w	ip, r3, r2
 800af8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af94:	ec55 4b10 	vmov	r4, r5, d0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	ee10 0a10 	vmov	r0, s0
 800af9e:	bfce      	itee	gt
 800afa0:	464a      	movgt	r2, r9
 800afa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afa6:	462a      	movle	r2, r5
 800afa8:	464f      	mov	r7, r9
 800afaa:	4629      	mov	r1, r5
 800afac:	bfcc      	ite	gt
 800afae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afb2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800afb6:	ec47 6b17 	vmov	d7, r6, r7
 800afba:	ec41 0b16 	vmov	d6, r0, r1
 800afbe:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800afc2:	b003      	add	sp, #12
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afc8 <__copybits>:
 800afc8:	3901      	subs	r1, #1
 800afca:	b570      	push	{r4, r5, r6, lr}
 800afcc:	1149      	asrs	r1, r1, #5
 800afce:	6914      	ldr	r4, [r2, #16]
 800afd0:	3101      	adds	r1, #1
 800afd2:	f102 0314 	add.w	r3, r2, #20
 800afd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800afda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800afde:	1f05      	subs	r5, r0, #4
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d30c      	bcc.n	800affe <__copybits+0x36>
 800afe4:	1aa3      	subs	r3, r4, r2
 800afe6:	3b11      	subs	r3, #17
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	3211      	adds	r2, #17
 800afee:	42a2      	cmp	r2, r4
 800aff0:	bf88      	it	hi
 800aff2:	2300      	movhi	r3, #0
 800aff4:	4418      	add	r0, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	4288      	cmp	r0, r1
 800affa:	d305      	bcc.n	800b008 <__copybits+0x40>
 800affc:	bd70      	pop	{r4, r5, r6, pc}
 800affe:	f853 6b04 	ldr.w	r6, [r3], #4
 800b002:	f845 6f04 	str.w	r6, [r5, #4]!
 800b006:	e7eb      	b.n	800afe0 <__copybits+0x18>
 800b008:	f840 3b04 	str.w	r3, [r0], #4
 800b00c:	e7f4      	b.n	800aff8 <__copybits+0x30>

0800b00e <__any_on>:
 800b00e:	f100 0214 	add.w	r2, r0, #20
 800b012:	6900      	ldr	r0, [r0, #16]
 800b014:	114b      	asrs	r3, r1, #5
 800b016:	4298      	cmp	r0, r3
 800b018:	b510      	push	{r4, lr}
 800b01a:	db11      	blt.n	800b040 <__any_on+0x32>
 800b01c:	dd0a      	ble.n	800b034 <__any_on+0x26>
 800b01e:	f011 011f 	ands.w	r1, r1, #31
 800b022:	d007      	beq.n	800b034 <__any_on+0x26>
 800b024:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b028:	fa24 f001 	lsr.w	r0, r4, r1
 800b02c:	fa00 f101 	lsl.w	r1, r0, r1
 800b030:	428c      	cmp	r4, r1
 800b032:	d10b      	bne.n	800b04c <__any_on+0x3e>
 800b034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b038:	4293      	cmp	r3, r2
 800b03a:	d803      	bhi.n	800b044 <__any_on+0x36>
 800b03c:	2000      	movs	r0, #0
 800b03e:	bd10      	pop	{r4, pc}
 800b040:	4603      	mov	r3, r0
 800b042:	e7f7      	b.n	800b034 <__any_on+0x26>
 800b044:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b048:	2900      	cmp	r1, #0
 800b04a:	d0f5      	beq.n	800b038 <__any_on+0x2a>
 800b04c:	2001      	movs	r0, #1
 800b04e:	e7f6      	b.n	800b03e <__any_on+0x30>

0800b050 <_calloc_r>:
 800b050:	b513      	push	{r0, r1, r4, lr}
 800b052:	434a      	muls	r2, r1
 800b054:	4611      	mov	r1, r2
 800b056:	9201      	str	r2, [sp, #4]
 800b058:	f000 f85a 	bl	800b110 <_malloc_r>
 800b05c:	4604      	mov	r4, r0
 800b05e:	b118      	cbz	r0, 800b068 <_calloc_r+0x18>
 800b060:	9a01      	ldr	r2, [sp, #4]
 800b062:	2100      	movs	r1, #0
 800b064:	f7fc fb78 	bl	8007758 <memset>
 800b068:	4620      	mov	r0, r4
 800b06a:	b002      	add	sp, #8
 800b06c:	bd10      	pop	{r4, pc}
	...

0800b070 <_free_r>:
 800b070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b072:	2900      	cmp	r1, #0
 800b074:	d048      	beq.n	800b108 <_free_r+0x98>
 800b076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07a:	9001      	str	r0, [sp, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f1a1 0404 	sub.w	r4, r1, #4
 800b082:	bfb8      	it	lt
 800b084:	18e4      	addlt	r4, r4, r3
 800b086:	f001 f847 	bl	800c118 <__malloc_lock>
 800b08a:	4a20      	ldr	r2, [pc, #128]	; (800b10c <_free_r+0x9c>)
 800b08c:	9801      	ldr	r0, [sp, #4]
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	4615      	mov	r5, r2
 800b092:	b933      	cbnz	r3, 800b0a2 <_free_r+0x32>
 800b094:	6063      	str	r3, [r4, #4]
 800b096:	6014      	str	r4, [r2, #0]
 800b098:	b003      	add	sp, #12
 800b09a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b09e:	f001 b841 	b.w	800c124 <__malloc_unlock>
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	d90b      	bls.n	800b0be <_free_r+0x4e>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	1862      	adds	r2, r4, r1
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bf04      	itt	eq
 800b0ae:	681a      	ldreq	r2, [r3, #0]
 800b0b0:	685b      	ldreq	r3, [r3, #4]
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	bf04      	itt	eq
 800b0b6:	1852      	addeq	r2, r2, r1
 800b0b8:	6022      	streq	r2, [r4, #0]
 800b0ba:	602c      	str	r4, [r5, #0]
 800b0bc:	e7ec      	b.n	800b098 <_free_r+0x28>
 800b0be:	461a      	mov	r2, r3
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	b10b      	cbz	r3, 800b0c8 <_free_r+0x58>
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d9fa      	bls.n	800b0be <_free_r+0x4e>
 800b0c8:	6811      	ldr	r1, [r2, #0]
 800b0ca:	1855      	adds	r5, r2, r1
 800b0cc:	42a5      	cmp	r5, r4
 800b0ce:	d10b      	bne.n	800b0e8 <_free_r+0x78>
 800b0d0:	6824      	ldr	r4, [r4, #0]
 800b0d2:	4421      	add	r1, r4
 800b0d4:	1854      	adds	r4, r2, r1
 800b0d6:	42a3      	cmp	r3, r4
 800b0d8:	6011      	str	r1, [r2, #0]
 800b0da:	d1dd      	bne.n	800b098 <_free_r+0x28>
 800b0dc:	681c      	ldr	r4, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	6053      	str	r3, [r2, #4]
 800b0e2:	4421      	add	r1, r4
 800b0e4:	6011      	str	r1, [r2, #0]
 800b0e6:	e7d7      	b.n	800b098 <_free_r+0x28>
 800b0e8:	d902      	bls.n	800b0f0 <_free_r+0x80>
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	e7d3      	b.n	800b098 <_free_r+0x28>
 800b0f0:	6825      	ldr	r5, [r4, #0]
 800b0f2:	1961      	adds	r1, r4, r5
 800b0f4:	428b      	cmp	r3, r1
 800b0f6:	bf04      	itt	eq
 800b0f8:	6819      	ldreq	r1, [r3, #0]
 800b0fa:	685b      	ldreq	r3, [r3, #4]
 800b0fc:	6063      	str	r3, [r4, #4]
 800b0fe:	bf04      	itt	eq
 800b100:	1949      	addeq	r1, r1, r5
 800b102:	6021      	streq	r1, [r4, #0]
 800b104:	6054      	str	r4, [r2, #4]
 800b106:	e7c7      	b.n	800b098 <_free_r+0x28>
 800b108:	b003      	add	sp, #12
 800b10a:	bd30      	pop	{r4, r5, pc}
 800b10c:	20000298 	.word	0x20000298

0800b110 <_malloc_r>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	1ccd      	adds	r5, r1, #3
 800b114:	f025 0503 	bic.w	r5, r5, #3
 800b118:	3508      	adds	r5, #8
 800b11a:	2d0c      	cmp	r5, #12
 800b11c:	bf38      	it	cc
 800b11e:	250c      	movcc	r5, #12
 800b120:	2d00      	cmp	r5, #0
 800b122:	4606      	mov	r6, r0
 800b124:	db01      	blt.n	800b12a <_malloc_r+0x1a>
 800b126:	42a9      	cmp	r1, r5
 800b128:	d903      	bls.n	800b132 <_malloc_r+0x22>
 800b12a:	230c      	movs	r3, #12
 800b12c:	6033      	str	r3, [r6, #0]
 800b12e:	2000      	movs	r0, #0
 800b130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b132:	f000 fff1 	bl	800c118 <__malloc_lock>
 800b136:	4921      	ldr	r1, [pc, #132]	; (800b1bc <_malloc_r+0xac>)
 800b138:	680a      	ldr	r2, [r1, #0]
 800b13a:	4614      	mov	r4, r2
 800b13c:	b99c      	cbnz	r4, 800b166 <_malloc_r+0x56>
 800b13e:	4f20      	ldr	r7, [pc, #128]	; (800b1c0 <_malloc_r+0xb0>)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	b923      	cbnz	r3, 800b14e <_malloc_r+0x3e>
 800b144:	4621      	mov	r1, r4
 800b146:	4630      	mov	r0, r6
 800b148:	f000 fcd2 	bl	800baf0 <_sbrk_r>
 800b14c:	6038      	str	r0, [r7, #0]
 800b14e:	4629      	mov	r1, r5
 800b150:	4630      	mov	r0, r6
 800b152:	f000 fccd 	bl	800baf0 <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d123      	bne.n	800b1a2 <_malloc_r+0x92>
 800b15a:	230c      	movs	r3, #12
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 ffe0 	bl	800c124 <__malloc_unlock>
 800b164:	e7e3      	b.n	800b12e <_malloc_r+0x1e>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	1b5b      	subs	r3, r3, r5
 800b16a:	d417      	bmi.n	800b19c <_malloc_r+0x8c>
 800b16c:	2b0b      	cmp	r3, #11
 800b16e:	d903      	bls.n	800b178 <_malloc_r+0x68>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	441c      	add	r4, r3
 800b174:	6025      	str	r5, [r4, #0]
 800b176:	e004      	b.n	800b182 <_malloc_r+0x72>
 800b178:	6863      	ldr	r3, [r4, #4]
 800b17a:	42a2      	cmp	r2, r4
 800b17c:	bf0c      	ite	eq
 800b17e:	600b      	streq	r3, [r1, #0]
 800b180:	6053      	strne	r3, [r2, #4]
 800b182:	4630      	mov	r0, r6
 800b184:	f000 ffce 	bl	800c124 <__malloc_unlock>
 800b188:	f104 000b 	add.w	r0, r4, #11
 800b18c:	1d23      	adds	r3, r4, #4
 800b18e:	f020 0007 	bic.w	r0, r0, #7
 800b192:	1ac2      	subs	r2, r0, r3
 800b194:	d0cc      	beq.n	800b130 <_malloc_r+0x20>
 800b196:	1a1b      	subs	r3, r3, r0
 800b198:	50a3      	str	r3, [r4, r2]
 800b19a:	e7c9      	b.n	800b130 <_malloc_r+0x20>
 800b19c:	4622      	mov	r2, r4
 800b19e:	6864      	ldr	r4, [r4, #4]
 800b1a0:	e7cc      	b.n	800b13c <_malloc_r+0x2c>
 800b1a2:	1cc4      	adds	r4, r0, #3
 800b1a4:	f024 0403 	bic.w	r4, r4, #3
 800b1a8:	42a0      	cmp	r0, r4
 800b1aa:	d0e3      	beq.n	800b174 <_malloc_r+0x64>
 800b1ac:	1a21      	subs	r1, r4, r0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f000 fc9e 	bl	800baf0 <_sbrk_r>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d1dd      	bne.n	800b174 <_malloc_r+0x64>
 800b1b8:	e7cf      	b.n	800b15a <_malloc_r+0x4a>
 800b1ba:	bf00      	nop
 800b1bc:	20000298 	.word	0x20000298
 800b1c0:	2000029c 	.word	0x2000029c

0800b1c4 <__ssputs_r>:
 800b1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	688e      	ldr	r6, [r1, #8]
 800b1ca:	429e      	cmp	r6, r3
 800b1cc:	4682      	mov	sl, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	4690      	mov	r8, r2
 800b1d2:	461f      	mov	r7, r3
 800b1d4:	d838      	bhi.n	800b248 <__ssputs_r+0x84>
 800b1d6:	898a      	ldrh	r2, [r1, #12]
 800b1d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1dc:	d032      	beq.n	800b244 <__ssputs_r+0x80>
 800b1de:	6825      	ldr	r5, [r4, #0]
 800b1e0:	6909      	ldr	r1, [r1, #16]
 800b1e2:	eba5 0901 	sub.w	r9, r5, r1
 800b1e6:	6965      	ldr	r5, [r4, #20]
 800b1e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	444b      	add	r3, r9
 800b1f4:	106d      	asrs	r5, r5, #1
 800b1f6:	429d      	cmp	r5, r3
 800b1f8:	bf38      	it	cc
 800b1fa:	461d      	movcc	r5, r3
 800b1fc:	0553      	lsls	r3, r2, #21
 800b1fe:	d531      	bpl.n	800b264 <__ssputs_r+0xa0>
 800b200:	4629      	mov	r1, r5
 800b202:	f7ff ff85 	bl	800b110 <_malloc_r>
 800b206:	4606      	mov	r6, r0
 800b208:	b950      	cbnz	r0, 800b220 <__ssputs_r+0x5c>
 800b20a:	230c      	movs	r3, #12
 800b20c:	f8ca 3000 	str.w	r3, [sl]
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b220:	6921      	ldr	r1, [r4, #16]
 800b222:	464a      	mov	r2, r9
 800b224:	f7ff fa4a 	bl	800a6bc <memcpy>
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	6126      	str	r6, [r4, #16]
 800b236:	6165      	str	r5, [r4, #20]
 800b238:	444e      	add	r6, r9
 800b23a:	eba5 0509 	sub.w	r5, r5, r9
 800b23e:	6026      	str	r6, [r4, #0]
 800b240:	60a5      	str	r5, [r4, #8]
 800b242:	463e      	mov	r6, r7
 800b244:	42be      	cmp	r6, r7
 800b246:	d900      	bls.n	800b24a <__ssputs_r+0x86>
 800b248:	463e      	mov	r6, r7
 800b24a:	4632      	mov	r2, r6
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	4641      	mov	r1, r8
 800b250:	f000 ff48 	bl	800c0e4 <memmove>
 800b254:	68a3      	ldr	r3, [r4, #8]
 800b256:	6822      	ldr	r2, [r4, #0]
 800b258:	1b9b      	subs	r3, r3, r6
 800b25a:	4432      	add	r2, r6
 800b25c:	60a3      	str	r3, [r4, #8]
 800b25e:	6022      	str	r2, [r4, #0]
 800b260:	2000      	movs	r0, #0
 800b262:	e7db      	b.n	800b21c <__ssputs_r+0x58>
 800b264:	462a      	mov	r2, r5
 800b266:	f000 ff63 	bl	800c130 <_realloc_r>
 800b26a:	4606      	mov	r6, r0
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d1e1      	bne.n	800b234 <__ssputs_r+0x70>
 800b270:	6921      	ldr	r1, [r4, #16]
 800b272:	4650      	mov	r0, sl
 800b274:	f7ff fefc 	bl	800b070 <_free_r>
 800b278:	e7c7      	b.n	800b20a <__ssputs_r+0x46>
	...

0800b27c <_svfiprintf_r>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	4698      	mov	r8, r3
 800b282:	898b      	ldrh	r3, [r1, #12]
 800b284:	061b      	lsls	r3, r3, #24
 800b286:	b09d      	sub	sp, #116	; 0x74
 800b288:	4607      	mov	r7, r0
 800b28a:	460d      	mov	r5, r1
 800b28c:	4614      	mov	r4, r2
 800b28e:	d50e      	bpl.n	800b2ae <_svfiprintf_r+0x32>
 800b290:	690b      	ldr	r3, [r1, #16]
 800b292:	b963      	cbnz	r3, 800b2ae <_svfiprintf_r+0x32>
 800b294:	2140      	movs	r1, #64	; 0x40
 800b296:	f7ff ff3b 	bl	800b110 <_malloc_r>
 800b29a:	6028      	str	r0, [r5, #0]
 800b29c:	6128      	str	r0, [r5, #16]
 800b29e:	b920      	cbnz	r0, 800b2aa <_svfiprintf_r+0x2e>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	e0d1      	b.n	800b44e <_svfiprintf_r+0x1d2>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	616b      	str	r3, [r5, #20]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b2:	2320      	movs	r3, #32
 800b2b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2bc:	2330      	movs	r3, #48	; 0x30
 800b2be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b468 <_svfiprintf_r+0x1ec>
 800b2c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c6:	f04f 0901 	mov.w	r9, #1
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	469a      	mov	sl, r3
 800b2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d2:	b10a      	cbz	r2, 800b2d8 <_svfiprintf_r+0x5c>
 800b2d4:	2a25      	cmp	r2, #37	; 0x25
 800b2d6:	d1f9      	bne.n	800b2cc <_svfiprintf_r+0x50>
 800b2d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2dc:	d00b      	beq.n	800b2f6 <_svfiprintf_r+0x7a>
 800b2de:	465b      	mov	r3, fp
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff ff6d 	bl	800b1c4 <__ssputs_r>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f000 80aa 	beq.w	800b444 <_svfiprintf_r+0x1c8>
 800b2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f2:	445a      	add	r2, fp
 800b2f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 80a2 	beq.w	800b444 <_svfiprintf_r+0x1c8>
 800b300:	2300      	movs	r3, #0
 800b302:	f04f 32ff 	mov.w	r2, #4294967295
 800b306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30a:	f10a 0a01 	add.w	sl, sl, #1
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b316:	931a      	str	r3, [sp, #104]	; 0x68
 800b318:	4654      	mov	r4, sl
 800b31a:	2205      	movs	r2, #5
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	4851      	ldr	r0, [pc, #324]	; (800b468 <_svfiprintf_r+0x1ec>)
 800b322:	f7f4 ffa5 	bl	8000270 <memchr>
 800b326:	9a04      	ldr	r2, [sp, #16]
 800b328:	b9d8      	cbnz	r0, 800b362 <_svfiprintf_r+0xe6>
 800b32a:	06d0      	lsls	r0, r2, #27
 800b32c:	bf44      	itt	mi
 800b32e:	2320      	movmi	r3, #32
 800b330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b334:	0711      	lsls	r1, r2, #28
 800b336:	bf44      	itt	mi
 800b338:	232b      	movmi	r3, #43	; 0x2b
 800b33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b33e:	f89a 3000 	ldrb.w	r3, [sl]
 800b342:	2b2a      	cmp	r3, #42	; 0x2a
 800b344:	d015      	beq.n	800b372 <_svfiprintf_r+0xf6>
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	4654      	mov	r4, sl
 800b34a:	2000      	movs	r0, #0
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	4621      	mov	r1, r4
 800b352:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b356:	3b30      	subs	r3, #48	; 0x30
 800b358:	2b09      	cmp	r3, #9
 800b35a:	d94e      	bls.n	800b3fa <_svfiprintf_r+0x17e>
 800b35c:	b1b0      	cbz	r0, 800b38c <_svfiprintf_r+0x110>
 800b35e:	9207      	str	r2, [sp, #28]
 800b360:	e014      	b.n	800b38c <_svfiprintf_r+0x110>
 800b362:	eba0 0308 	sub.w	r3, r0, r8
 800b366:	fa09 f303 	lsl.w	r3, r9, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	46a2      	mov	sl, r4
 800b370:	e7d2      	b.n	800b318 <_svfiprintf_r+0x9c>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	1d19      	adds	r1, r3, #4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	9103      	str	r1, [sp, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfbb      	ittet	lt
 800b37e:	425b      	neglt	r3, r3
 800b380:	f042 0202 	orrlt.w	r2, r2, #2
 800b384:	9307      	strge	r3, [sp, #28]
 800b386:	9307      	strlt	r3, [sp, #28]
 800b388:	bfb8      	it	lt
 800b38a:	9204      	strlt	r2, [sp, #16]
 800b38c:	7823      	ldrb	r3, [r4, #0]
 800b38e:	2b2e      	cmp	r3, #46	; 0x2e
 800b390:	d10c      	bne.n	800b3ac <_svfiprintf_r+0x130>
 800b392:	7863      	ldrb	r3, [r4, #1]
 800b394:	2b2a      	cmp	r3, #42	; 0x2a
 800b396:	d135      	bne.n	800b404 <_svfiprintf_r+0x188>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	9203      	str	r2, [sp, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bfb8      	it	lt
 800b3a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a8:	3402      	adds	r4, #2
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b478 <_svfiprintf_r+0x1fc>
 800b3b0:	7821      	ldrb	r1, [r4, #0]
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	f7f4 ff5b 	bl	8000270 <memchr>
 800b3ba:	b140      	cbz	r0, 800b3ce <_svfiprintf_r+0x152>
 800b3bc:	2340      	movs	r3, #64	; 0x40
 800b3be:	eba0 000a 	sub.w	r0, r0, sl
 800b3c2:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	4303      	orrs	r3, r0
 800b3ca:	3401      	adds	r4, #1
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d2:	4826      	ldr	r0, [pc, #152]	; (800b46c <_svfiprintf_r+0x1f0>)
 800b3d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d8:	2206      	movs	r2, #6
 800b3da:	f7f4 ff49 	bl	8000270 <memchr>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d038      	beq.n	800b454 <_svfiprintf_r+0x1d8>
 800b3e2:	4b23      	ldr	r3, [pc, #140]	; (800b470 <_svfiprintf_r+0x1f4>)
 800b3e4:	bb1b      	cbnz	r3, 800b42e <_svfiprintf_r+0x1b2>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	3307      	adds	r3, #7
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f4:	4433      	add	r3, r6
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	e767      	b.n	800b2ca <_svfiprintf_r+0x4e>
 800b3fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fe:	460c      	mov	r4, r1
 800b400:	2001      	movs	r0, #1
 800b402:	e7a5      	b.n	800b350 <_svfiprintf_r+0xd4>
 800b404:	2300      	movs	r3, #0
 800b406:	3401      	adds	r4, #1
 800b408:	9305      	str	r3, [sp, #20]
 800b40a:	4619      	mov	r1, r3
 800b40c:	f04f 0c0a 	mov.w	ip, #10
 800b410:	4620      	mov	r0, r4
 800b412:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b416:	3a30      	subs	r2, #48	; 0x30
 800b418:	2a09      	cmp	r2, #9
 800b41a:	d903      	bls.n	800b424 <_svfiprintf_r+0x1a8>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0c5      	beq.n	800b3ac <_svfiprintf_r+0x130>
 800b420:	9105      	str	r1, [sp, #20]
 800b422:	e7c3      	b.n	800b3ac <_svfiprintf_r+0x130>
 800b424:	fb0c 2101 	mla	r1, ip, r1, r2
 800b428:	4604      	mov	r4, r0
 800b42a:	2301      	movs	r3, #1
 800b42c:	e7f0      	b.n	800b410 <_svfiprintf_r+0x194>
 800b42e:	ab03      	add	r3, sp, #12
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	462a      	mov	r2, r5
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <_svfiprintf_r+0x1f8>)
 800b436:	a904      	add	r1, sp, #16
 800b438:	4638      	mov	r0, r7
 800b43a:	f7fc fa25 	bl	8007888 <_printf_float>
 800b43e:	1c42      	adds	r2, r0, #1
 800b440:	4606      	mov	r6, r0
 800b442:	d1d6      	bne.n	800b3f2 <_svfiprintf_r+0x176>
 800b444:	89ab      	ldrh	r3, [r5, #12]
 800b446:	065b      	lsls	r3, r3, #25
 800b448:	f53f af2c 	bmi.w	800b2a4 <_svfiprintf_r+0x28>
 800b44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b44e:	b01d      	add	sp, #116	; 0x74
 800b450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b454:	ab03      	add	r3, sp, #12
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	462a      	mov	r2, r5
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <_svfiprintf_r+0x1f8>)
 800b45c:	a904      	add	r1, sp, #16
 800b45e:	4638      	mov	r0, r7
 800b460:	f7fc fc9e 	bl	8007da0 <_printf_i>
 800b464:	e7eb      	b.n	800b43e <_svfiprintf_r+0x1c2>
 800b466:	bf00      	nop
 800b468:	0800d53c 	.word	0x0800d53c
 800b46c:	0800d546 	.word	0x0800d546
 800b470:	08007889 	.word	0x08007889
 800b474:	0800b1c5 	.word	0x0800b1c5
 800b478:	0800d542 	.word	0x0800d542

0800b47c <_sungetc_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	1c4b      	adds	r3, r1, #1
 800b480:	4614      	mov	r4, r2
 800b482:	d103      	bne.n	800b48c <_sungetc_r+0x10>
 800b484:	f04f 35ff 	mov.w	r5, #4294967295
 800b488:	4628      	mov	r0, r5
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	8993      	ldrh	r3, [r2, #12]
 800b48e:	f023 0320 	bic.w	r3, r3, #32
 800b492:	8193      	strh	r3, [r2, #12]
 800b494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	b2cd      	uxtb	r5, r1
 800b49a:	b18b      	cbz	r3, 800b4c0 <_sungetc_r+0x44>
 800b49c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	dd08      	ble.n	800b4b4 <_sungetc_r+0x38>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	1e5a      	subs	r2, r3, #1
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b4ac:	6863      	ldr	r3, [r4, #4]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	e7e9      	b.n	800b488 <_sungetc_r+0xc>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f000 fbe3 	bl	800bc80 <__submore>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0f1      	beq.n	800b4a2 <_sungetc_r+0x26>
 800b4be:	e7e1      	b.n	800b484 <_sungetc_r+0x8>
 800b4c0:	6921      	ldr	r1, [r4, #16]
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	b151      	cbz	r1, 800b4dc <_sungetc_r+0x60>
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d208      	bcs.n	800b4dc <_sungetc_r+0x60>
 800b4ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b4ce:	42a9      	cmp	r1, r5
 800b4d0:	d104      	bne.n	800b4dc <_sungetc_r+0x60>
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	6062      	str	r2, [r4, #4]
 800b4da:	e7d5      	b.n	800b488 <_sungetc_r+0xc>
 800b4dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b4e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e7dc      	b.n	800b4b0 <_sungetc_r+0x34>

0800b4f6 <__ssrefill_r>:
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b4fc:	b169      	cbz	r1, 800b51a <__ssrefill_r+0x24>
 800b4fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b502:	4299      	cmp	r1, r3
 800b504:	d001      	beq.n	800b50a <__ssrefill_r+0x14>
 800b506:	f7ff fdb3 	bl	800b070 <_free_r>
 800b50a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	2000      	movs	r0, #0
 800b510:	6360      	str	r0, [r4, #52]	; 0x34
 800b512:	b113      	cbz	r3, 800b51a <__ssrefill_r+0x24>
 800b514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	2300      	movs	r3, #0
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f043 0320 	orr.w	r3, r3, #32
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	e7f3      	b.n	800b518 <__ssrefill_r+0x22>

0800b530 <__ssvfiscanf_r>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	460c      	mov	r4, r1
 800b536:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b53a:	2100      	movs	r1, #0
 800b53c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b540:	49b2      	ldr	r1, [pc, #712]	; (800b80c <__ssvfiscanf_r+0x2dc>)
 800b542:	91a0      	str	r1, [sp, #640]	; 0x280
 800b544:	f10d 0804 	add.w	r8, sp, #4
 800b548:	49b1      	ldr	r1, [pc, #708]	; (800b810 <__ssvfiscanf_r+0x2e0>)
 800b54a:	4fb2      	ldr	r7, [pc, #712]	; (800b814 <__ssvfiscanf_r+0x2e4>)
 800b54c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b818 <__ssvfiscanf_r+0x2e8>
 800b550:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b554:	4606      	mov	r6, r0
 800b556:	91a1      	str	r1, [sp, #644]	; 0x284
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	f892 a000 	ldrb.w	sl, [r2]
 800b55e:	f1ba 0f00 	cmp.w	sl, #0
 800b562:	f000 8151 	beq.w	800b808 <__ssvfiscanf_r+0x2d8>
 800b566:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b56a:	f013 0308 	ands.w	r3, r3, #8
 800b56e:	f102 0501 	add.w	r5, r2, #1
 800b572:	d019      	beq.n	800b5a8 <__ssvfiscanf_r+0x78>
 800b574:	6863      	ldr	r3, [r4, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	dd0f      	ble.n	800b59a <__ssvfiscanf_r+0x6a>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	781a      	ldrb	r2, [r3, #0]
 800b57e:	5cba      	ldrb	r2, [r7, r2]
 800b580:	0712      	lsls	r2, r2, #28
 800b582:	d401      	bmi.n	800b588 <__ssvfiscanf_r+0x58>
 800b584:	462a      	mov	r2, r5
 800b586:	e7e8      	b.n	800b55a <__ssvfiscanf_r+0x2a>
 800b588:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b58a:	3201      	adds	r2, #1
 800b58c:	9245      	str	r2, [sp, #276]	; 0x114
 800b58e:	6862      	ldr	r2, [r4, #4]
 800b590:	3301      	adds	r3, #1
 800b592:	3a01      	subs	r2, #1
 800b594:	6062      	str	r2, [r4, #4]
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	e7ec      	b.n	800b574 <__ssvfiscanf_r+0x44>
 800b59a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b59c:	4621      	mov	r1, r4
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4798      	blx	r3
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0e9      	beq.n	800b57a <__ssvfiscanf_r+0x4a>
 800b5a6:	e7ed      	b.n	800b584 <__ssvfiscanf_r+0x54>
 800b5a8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b5ac:	f040 8083 	bne.w	800b6b6 <__ssvfiscanf_r+0x186>
 800b5b0:	9341      	str	r3, [sp, #260]	; 0x104
 800b5b2:	9343      	str	r3, [sp, #268]	; 0x10c
 800b5b4:	7853      	ldrb	r3, [r2, #1]
 800b5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b8:	bf02      	ittt	eq
 800b5ba:	2310      	moveq	r3, #16
 800b5bc:	1c95      	addeq	r5, r2, #2
 800b5be:	9341      	streq	r3, [sp, #260]	; 0x104
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	46ab      	mov	fp, r5
 800b5c4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b5c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	d91d      	bls.n	800b60c <__ssvfiscanf_r+0xdc>
 800b5d0:	4891      	ldr	r0, [pc, #580]	; (800b818 <__ssvfiscanf_r+0x2e8>)
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	f7f4 fe4c 	bl	8000270 <memchr>
 800b5d8:	b140      	cbz	r0, 800b5ec <__ssvfiscanf_r+0xbc>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	eba0 0009 	sub.w	r0, r0, r9
 800b5e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b5e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5e6:	4318      	orrs	r0, r3
 800b5e8:	9041      	str	r0, [sp, #260]	; 0x104
 800b5ea:	465d      	mov	r5, fp
 800b5ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5f0:	2b78      	cmp	r3, #120	; 0x78
 800b5f2:	d806      	bhi.n	800b602 <__ssvfiscanf_r+0xd2>
 800b5f4:	2b57      	cmp	r3, #87	; 0x57
 800b5f6:	d810      	bhi.n	800b61a <__ssvfiscanf_r+0xea>
 800b5f8:	2b25      	cmp	r3, #37	; 0x25
 800b5fa:	d05c      	beq.n	800b6b6 <__ssvfiscanf_r+0x186>
 800b5fc:	d856      	bhi.n	800b6ac <__ssvfiscanf_r+0x17c>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d074      	beq.n	800b6ec <__ssvfiscanf_r+0x1bc>
 800b602:	2303      	movs	r3, #3
 800b604:	9347      	str	r3, [sp, #284]	; 0x11c
 800b606:	230a      	movs	r3, #10
 800b608:	9342      	str	r3, [sp, #264]	; 0x108
 800b60a:	e081      	b.n	800b710 <__ssvfiscanf_r+0x1e0>
 800b60c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b60e:	fb02 1303 	mla	r3, r2, r3, r1
 800b612:	3b30      	subs	r3, #48	; 0x30
 800b614:	9343      	str	r3, [sp, #268]	; 0x10c
 800b616:	465d      	mov	r5, fp
 800b618:	e7d3      	b.n	800b5c2 <__ssvfiscanf_r+0x92>
 800b61a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b61e:	2a20      	cmp	r2, #32
 800b620:	d8ef      	bhi.n	800b602 <__ssvfiscanf_r+0xd2>
 800b622:	a101      	add	r1, pc, #4	; (adr r1, 800b628 <__ssvfiscanf_r+0xf8>)
 800b624:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b628:	0800b6fb 	.word	0x0800b6fb
 800b62c:	0800b603 	.word	0x0800b603
 800b630:	0800b603 	.word	0x0800b603
 800b634:	0800b759 	.word	0x0800b759
 800b638:	0800b603 	.word	0x0800b603
 800b63c:	0800b603 	.word	0x0800b603
 800b640:	0800b603 	.word	0x0800b603
 800b644:	0800b603 	.word	0x0800b603
 800b648:	0800b603 	.word	0x0800b603
 800b64c:	0800b603 	.word	0x0800b603
 800b650:	0800b603 	.word	0x0800b603
 800b654:	0800b76f 	.word	0x0800b76f
 800b658:	0800b745 	.word	0x0800b745
 800b65c:	0800b6b3 	.word	0x0800b6b3
 800b660:	0800b6b3 	.word	0x0800b6b3
 800b664:	0800b6b3 	.word	0x0800b6b3
 800b668:	0800b603 	.word	0x0800b603
 800b66c:	0800b749 	.word	0x0800b749
 800b670:	0800b603 	.word	0x0800b603
 800b674:	0800b603 	.word	0x0800b603
 800b678:	0800b603 	.word	0x0800b603
 800b67c:	0800b603 	.word	0x0800b603
 800b680:	0800b77f 	.word	0x0800b77f
 800b684:	0800b751 	.word	0x0800b751
 800b688:	0800b6f3 	.word	0x0800b6f3
 800b68c:	0800b603 	.word	0x0800b603
 800b690:	0800b603 	.word	0x0800b603
 800b694:	0800b77b 	.word	0x0800b77b
 800b698:	0800b603 	.word	0x0800b603
 800b69c:	0800b745 	.word	0x0800b745
 800b6a0:	0800b603 	.word	0x0800b603
 800b6a4:	0800b603 	.word	0x0800b603
 800b6a8:	0800b6fb 	.word	0x0800b6fb
 800b6ac:	3b45      	subs	r3, #69	; 0x45
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d8a7      	bhi.n	800b602 <__ssvfiscanf_r+0xd2>
 800b6b2:	2305      	movs	r3, #5
 800b6b4:	e02b      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dd0d      	ble.n	800b6d8 <__ssvfiscanf_r+0x1a8>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	4552      	cmp	r2, sl
 800b6c2:	f040 80a1 	bne.w	800b808 <__ssvfiscanf_r+0x2d8>
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	6862      	ldr	r2, [r4, #4]
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b6ce:	3a01      	subs	r2, #1
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	6062      	str	r2, [r4, #4]
 800b6d4:	9345      	str	r3, [sp, #276]	; 0x114
 800b6d6:	e755      	b.n	800b584 <__ssvfiscanf_r+0x54>
 800b6d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4630      	mov	r0, r6
 800b6de:	4798      	blx	r3
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0eb      	beq.n	800b6bc <__ssvfiscanf_r+0x18c>
 800b6e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f040 8084 	bne.w	800b7f4 <__ssvfiscanf_r+0x2c4>
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e086      	b.n	800b800 <__ssvfiscanf_r+0x2d0>
 800b6f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6f4:	f042 0220 	orr.w	r2, r2, #32
 800b6f8:	9241      	str	r2, [sp, #260]	; 0x104
 800b6fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b700:	9241      	str	r2, [sp, #260]	; 0x104
 800b702:	2210      	movs	r2, #16
 800b704:	2b6f      	cmp	r3, #111	; 0x6f
 800b706:	9242      	str	r2, [sp, #264]	; 0x108
 800b708:	bf34      	ite	cc
 800b70a:	2303      	movcc	r3, #3
 800b70c:	2304      	movcs	r3, #4
 800b70e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b710:	6863      	ldr	r3, [r4, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	dd41      	ble.n	800b79a <__ssvfiscanf_r+0x26a>
 800b716:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b718:	0659      	lsls	r1, r3, #25
 800b71a:	d404      	bmi.n	800b726 <__ssvfiscanf_r+0x1f6>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	5cba      	ldrb	r2, [r7, r2]
 800b722:	0712      	lsls	r2, r2, #28
 800b724:	d440      	bmi.n	800b7a8 <__ssvfiscanf_r+0x278>
 800b726:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b728:	2b02      	cmp	r3, #2
 800b72a:	dc4f      	bgt.n	800b7cc <__ssvfiscanf_r+0x29c>
 800b72c:	466b      	mov	r3, sp
 800b72e:	4622      	mov	r2, r4
 800b730:	a941      	add	r1, sp, #260	; 0x104
 800b732:	4630      	mov	r0, r6
 800b734:	f000 f874 	bl	800b820 <_scanf_chars>
 800b738:	2801      	cmp	r0, #1
 800b73a:	d065      	beq.n	800b808 <__ssvfiscanf_r+0x2d8>
 800b73c:	2802      	cmp	r0, #2
 800b73e:	f47f af21 	bne.w	800b584 <__ssvfiscanf_r+0x54>
 800b742:	e7cf      	b.n	800b6e4 <__ssvfiscanf_r+0x1b4>
 800b744:	220a      	movs	r2, #10
 800b746:	e7dd      	b.n	800b704 <__ssvfiscanf_r+0x1d4>
 800b748:	2300      	movs	r3, #0
 800b74a:	9342      	str	r3, [sp, #264]	; 0x108
 800b74c:	2303      	movs	r3, #3
 800b74e:	e7de      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b750:	2308      	movs	r3, #8
 800b752:	9342      	str	r3, [sp, #264]	; 0x108
 800b754:	2304      	movs	r3, #4
 800b756:	e7da      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b758:	4629      	mov	r1, r5
 800b75a:	4640      	mov	r0, r8
 800b75c:	f000 f9d8 	bl	800bb10 <__sccl>
 800b760:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	9341      	str	r3, [sp, #260]	; 0x104
 800b768:	4605      	mov	r5, r0
 800b76a:	2301      	movs	r3, #1
 800b76c:	e7cf      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b76e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b774:	9341      	str	r3, [sp, #260]	; 0x104
 800b776:	2300      	movs	r3, #0
 800b778:	e7c9      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b77a:	2302      	movs	r3, #2
 800b77c:	e7c7      	b.n	800b70e <__ssvfiscanf_r+0x1de>
 800b77e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b780:	06c3      	lsls	r3, r0, #27
 800b782:	f53f aeff 	bmi.w	800b584 <__ssvfiscanf_r+0x54>
 800b786:	9b00      	ldr	r3, [sp, #0]
 800b788:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b78a:	1d19      	adds	r1, r3, #4
 800b78c:	9100      	str	r1, [sp, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	07c0      	lsls	r0, r0, #31
 800b792:	bf4c      	ite	mi
 800b794:	801a      	strhmi	r2, [r3, #0]
 800b796:	601a      	strpl	r2, [r3, #0]
 800b798:	e6f4      	b.n	800b584 <__ssvfiscanf_r+0x54>
 800b79a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b79c:	4621      	mov	r1, r4
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4798      	blx	r3
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0b7      	beq.n	800b716 <__ssvfiscanf_r+0x1e6>
 800b7a6:	e79d      	b.n	800b6e4 <__ssvfiscanf_r+0x1b4>
 800b7a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b7aa:	3201      	adds	r2, #1
 800b7ac:	9245      	str	r2, [sp, #276]	; 0x114
 800b7ae:	6862      	ldr	r2, [r4, #4]
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	6062      	str	r2, [r4, #4]
 800b7b6:	dd02      	ble.n	800b7be <__ssvfiscanf_r+0x28e>
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	e7ae      	b.n	800b71c <__ssvfiscanf_r+0x1ec>
 800b7be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	4798      	blx	r3
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0a8      	beq.n	800b71c <__ssvfiscanf_r+0x1ec>
 800b7ca:	e78b      	b.n	800b6e4 <__ssvfiscanf_r+0x1b4>
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	dc06      	bgt.n	800b7de <__ssvfiscanf_r+0x2ae>
 800b7d0:	466b      	mov	r3, sp
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	a941      	add	r1, sp, #260	; 0x104
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 f87a 	bl	800b8d0 <_scanf_i>
 800b7dc:	e7ac      	b.n	800b738 <__ssvfiscanf_r+0x208>
 800b7de:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <__ssvfiscanf_r+0x2ec>)
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f aecf 	beq.w	800b584 <__ssvfiscanf_r+0x54>
 800b7e6:	466b      	mov	r3, sp
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	a941      	add	r1, sp, #260	; 0x104
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7fc fbfd 	bl	8007fec <_scanf_float>
 800b7f2:	e7a1      	b.n	800b738 <__ssvfiscanf_r+0x208>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b7fa:	bf18      	it	ne
 800b7fc:	f04f 30ff 	movne.w	r0, #4294967295
 800b800:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b80a:	e7f9      	b.n	800b800 <__ssvfiscanf_r+0x2d0>
 800b80c:	0800b47d 	.word	0x0800b47d
 800b810:	0800b4f7 	.word	0x0800b4f7
 800b814:	0800d1ce 	.word	0x0800d1ce
 800b818:	0800d542 	.word	0x0800d542
 800b81c:	08007fed 	.word	0x08007fed

0800b820 <_scanf_chars>:
 800b820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b824:	4615      	mov	r5, r2
 800b826:	688a      	ldr	r2, [r1, #8]
 800b828:	4680      	mov	r8, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	b932      	cbnz	r2, 800b83c <_scanf_chars+0x1c>
 800b82e:	698a      	ldr	r2, [r1, #24]
 800b830:	2a00      	cmp	r2, #0
 800b832:	bf0c      	ite	eq
 800b834:	2201      	moveq	r2, #1
 800b836:	f04f 32ff 	movne.w	r2, #4294967295
 800b83a:	608a      	str	r2, [r1, #8]
 800b83c:	6822      	ldr	r2, [r4, #0]
 800b83e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b8cc <_scanf_chars+0xac>
 800b842:	06d1      	lsls	r1, r2, #27
 800b844:	bf5f      	itttt	pl
 800b846:	681a      	ldrpl	r2, [r3, #0]
 800b848:	1d11      	addpl	r1, r2, #4
 800b84a:	6019      	strpl	r1, [r3, #0]
 800b84c:	6816      	ldrpl	r6, [r2, #0]
 800b84e:	2700      	movs	r7, #0
 800b850:	69a0      	ldr	r0, [r4, #24]
 800b852:	b188      	cbz	r0, 800b878 <_scanf_chars+0x58>
 800b854:	2801      	cmp	r0, #1
 800b856:	d107      	bne.n	800b868 <_scanf_chars+0x48>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	6963      	ldr	r3, [r4, #20]
 800b85e:	5c9b      	ldrb	r3, [r3, r2]
 800b860:	b953      	cbnz	r3, 800b878 <_scanf_chars+0x58>
 800b862:	bb27      	cbnz	r7, 800b8ae <_scanf_chars+0x8e>
 800b864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b868:	2802      	cmp	r0, #2
 800b86a:	d120      	bne.n	800b8ae <_scanf_chars+0x8e>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d41a      	bmi.n	800b8ae <_scanf_chars+0x8e>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	06da      	lsls	r2, r3, #27
 800b87c:	bf5e      	ittt	pl
 800b87e:	682b      	ldrpl	r3, [r5, #0]
 800b880:	781b      	ldrbpl	r3, [r3, #0]
 800b882:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b886:	682a      	ldr	r2, [r5, #0]
 800b888:	686b      	ldr	r3, [r5, #4]
 800b88a:	3201      	adds	r2, #1
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	68a2      	ldr	r2, [r4, #8]
 800b890:	3b01      	subs	r3, #1
 800b892:	3a01      	subs	r2, #1
 800b894:	606b      	str	r3, [r5, #4]
 800b896:	3701      	adds	r7, #1
 800b898:	60a2      	str	r2, [r4, #8]
 800b89a:	b142      	cbz	r2, 800b8ae <_scanf_chars+0x8e>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dcd7      	bgt.n	800b850 <_scanf_chars+0x30>
 800b8a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4798      	blx	r3
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d0d0      	beq.n	800b850 <_scanf_chars+0x30>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	f013 0310 	ands.w	r3, r3, #16
 800b8b4:	d105      	bne.n	800b8c2 <_scanf_chars+0xa2>
 800b8b6:	68e2      	ldr	r2, [r4, #12]
 800b8b8:	3201      	adds	r2, #1
 800b8ba:	60e2      	str	r2, [r4, #12]
 800b8bc:	69a2      	ldr	r2, [r4, #24]
 800b8be:	b102      	cbz	r2, 800b8c2 <_scanf_chars+0xa2>
 800b8c0:	7033      	strb	r3, [r6, #0]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	441f      	add	r7, r3
 800b8c6:	6127      	str	r7, [r4, #16]
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	e7cb      	b.n	800b864 <_scanf_chars+0x44>
 800b8cc:	0800d1ce 	.word	0x0800d1ce

0800b8d0 <_scanf_i>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	4698      	mov	r8, r3
 800b8d6:	4b74      	ldr	r3, [pc, #464]	; (800baa8 <_scanf_i+0x1d8>)
 800b8d8:	460c      	mov	r4, r1
 800b8da:	4682      	mov	sl, r0
 800b8dc:	4616      	mov	r6, r2
 800b8de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	ab03      	add	r3, sp, #12
 800b8e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8ea:	4b70      	ldr	r3, [pc, #448]	; (800baac <_scanf_i+0x1dc>)
 800b8ec:	69a1      	ldr	r1, [r4, #24]
 800b8ee:	4a70      	ldr	r2, [pc, #448]	; (800bab0 <_scanf_i+0x1e0>)
 800b8f0:	2903      	cmp	r1, #3
 800b8f2:	bf18      	it	ne
 800b8f4:	461a      	movne	r2, r3
 800b8f6:	68a3      	ldr	r3, [r4, #8]
 800b8f8:	9201      	str	r2, [sp, #4]
 800b8fa:	1e5a      	subs	r2, r3, #1
 800b8fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b900:	bf88      	it	hi
 800b902:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b906:	4627      	mov	r7, r4
 800b908:	bf82      	ittt	hi
 800b90a:	eb03 0905 	addhi.w	r9, r3, r5
 800b90e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b912:	60a3      	strhi	r3, [r4, #8]
 800b914:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b918:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b91c:	bf98      	it	ls
 800b91e:	f04f 0900 	movls.w	r9, #0
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	463d      	mov	r5, r7
 800b926:	f04f 0b00 	mov.w	fp, #0
 800b92a:	6831      	ldr	r1, [r6, #0]
 800b92c:	ab03      	add	r3, sp, #12
 800b92e:	7809      	ldrb	r1, [r1, #0]
 800b930:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b934:	2202      	movs	r2, #2
 800b936:	f7f4 fc9b 	bl	8000270 <memchr>
 800b93a:	b328      	cbz	r0, 800b988 <_scanf_i+0xb8>
 800b93c:	f1bb 0f01 	cmp.w	fp, #1
 800b940:	d159      	bne.n	800b9f6 <_scanf_i+0x126>
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	b92a      	cbnz	r2, 800b952 <_scanf_i+0x82>
 800b946:	6822      	ldr	r2, [r4, #0]
 800b948:	2308      	movs	r3, #8
 800b94a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	6022      	str	r2, [r4, #0]
 800b952:	6822      	ldr	r2, [r4, #0]
 800b954:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b958:	6022      	str	r2, [r4, #0]
 800b95a:	68a2      	ldr	r2, [r4, #8]
 800b95c:	1e51      	subs	r1, r2, #1
 800b95e:	60a1      	str	r1, [r4, #8]
 800b960:	b192      	cbz	r2, 800b988 <_scanf_i+0xb8>
 800b962:	6832      	ldr	r2, [r6, #0]
 800b964:	1c51      	adds	r1, r2, #1
 800b966:	6031      	str	r1, [r6, #0]
 800b968:	7812      	ldrb	r2, [r2, #0]
 800b96a:	f805 2b01 	strb.w	r2, [r5], #1
 800b96e:	6872      	ldr	r2, [r6, #4]
 800b970:	3a01      	subs	r2, #1
 800b972:	2a00      	cmp	r2, #0
 800b974:	6072      	str	r2, [r6, #4]
 800b976:	dc07      	bgt.n	800b988 <_scanf_i+0xb8>
 800b978:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b97c:	4631      	mov	r1, r6
 800b97e:	4650      	mov	r0, sl
 800b980:	4790      	blx	r2
 800b982:	2800      	cmp	r0, #0
 800b984:	f040 8085 	bne.w	800ba92 <_scanf_i+0x1c2>
 800b988:	f10b 0b01 	add.w	fp, fp, #1
 800b98c:	f1bb 0f03 	cmp.w	fp, #3
 800b990:	d1cb      	bne.n	800b92a <_scanf_i+0x5a>
 800b992:	6863      	ldr	r3, [r4, #4]
 800b994:	b90b      	cbnz	r3, 800b99a <_scanf_i+0xca>
 800b996:	230a      	movs	r3, #10
 800b998:	6063      	str	r3, [r4, #4]
 800b99a:	6863      	ldr	r3, [r4, #4]
 800b99c:	4945      	ldr	r1, [pc, #276]	; (800bab4 <_scanf_i+0x1e4>)
 800b99e:	6960      	ldr	r0, [r4, #20]
 800b9a0:	1ac9      	subs	r1, r1, r3
 800b9a2:	f000 f8b5 	bl	800bb10 <__sccl>
 800b9a6:	f04f 0b00 	mov.w	fp, #0
 800b9aa:	68a3      	ldr	r3, [r4, #8]
 800b9ac:	6822      	ldr	r2, [r4, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d03d      	beq.n	800ba2e <_scanf_i+0x15e>
 800b9b2:	6831      	ldr	r1, [r6, #0]
 800b9b4:	6960      	ldr	r0, [r4, #20]
 800b9b6:	f891 c000 	ldrb.w	ip, [r1]
 800b9ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d035      	beq.n	800ba2e <_scanf_i+0x15e>
 800b9c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b9c6:	d124      	bne.n	800ba12 <_scanf_i+0x142>
 800b9c8:	0510      	lsls	r0, r2, #20
 800b9ca:	d522      	bpl.n	800ba12 <_scanf_i+0x142>
 800b9cc:	f10b 0b01 	add.w	fp, fp, #1
 800b9d0:	f1b9 0f00 	cmp.w	r9, #0
 800b9d4:	d003      	beq.n	800b9de <_scanf_i+0x10e>
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9dc:	60a3      	str	r3, [r4, #8]
 800b9de:	6873      	ldr	r3, [r6, #4]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	6073      	str	r3, [r6, #4]
 800b9e6:	dd1b      	ble.n	800ba20 <_scanf_i+0x150>
 800b9e8:	6833      	ldr	r3, [r6, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	68a3      	ldr	r3, [r4, #8]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	60a3      	str	r3, [r4, #8]
 800b9f4:	e7d9      	b.n	800b9aa <_scanf_i+0xda>
 800b9f6:	f1bb 0f02 	cmp.w	fp, #2
 800b9fa:	d1ae      	bne.n	800b95a <_scanf_i+0x8a>
 800b9fc:	6822      	ldr	r2, [r4, #0]
 800b9fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba06:	d1bf      	bne.n	800b988 <_scanf_i+0xb8>
 800ba08:	2310      	movs	r3, #16
 800ba0a:	6063      	str	r3, [r4, #4]
 800ba0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba10:	e7a2      	b.n	800b958 <_scanf_i+0x88>
 800ba12:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	780b      	ldrb	r3, [r1, #0]
 800ba1a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba1e:	e7de      	b.n	800b9de <_scanf_i+0x10e>
 800ba20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba24:	4631      	mov	r1, r6
 800ba26:	4650      	mov	r0, sl
 800ba28:	4798      	blx	r3
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d0df      	beq.n	800b9ee <_scanf_i+0x11e>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	05d9      	lsls	r1, r3, #23
 800ba32:	d50d      	bpl.n	800ba50 <_scanf_i+0x180>
 800ba34:	42bd      	cmp	r5, r7
 800ba36:	d909      	bls.n	800ba4c <_scanf_i+0x17c>
 800ba38:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba40:	4632      	mov	r2, r6
 800ba42:	4650      	mov	r0, sl
 800ba44:	4798      	blx	r3
 800ba46:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba4a:	464d      	mov	r5, r9
 800ba4c:	42bd      	cmp	r5, r7
 800ba4e:	d028      	beq.n	800baa2 <_scanf_i+0x1d2>
 800ba50:	6822      	ldr	r2, [r4, #0]
 800ba52:	f012 0210 	ands.w	r2, r2, #16
 800ba56:	d113      	bne.n	800ba80 <_scanf_i+0x1b0>
 800ba58:	702a      	strb	r2, [r5, #0]
 800ba5a:	6863      	ldr	r3, [r4, #4]
 800ba5c:	9e01      	ldr	r6, [sp, #4]
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4650      	mov	r0, sl
 800ba62:	47b0      	blx	r6
 800ba64:	f8d8 3000 	ldr.w	r3, [r8]
 800ba68:	6821      	ldr	r1, [r4, #0]
 800ba6a:	1d1a      	adds	r2, r3, #4
 800ba6c:	f8c8 2000 	str.w	r2, [r8]
 800ba70:	f011 0f20 	tst.w	r1, #32
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	d00f      	beq.n	800ba98 <_scanf_i+0x1c8>
 800ba78:	6018      	str	r0, [r3, #0]
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	60e3      	str	r3, [r4, #12]
 800ba80:	1bed      	subs	r5, r5, r7
 800ba82:	44ab      	add	fp, r5
 800ba84:	6925      	ldr	r5, [r4, #16]
 800ba86:	445d      	add	r5, fp
 800ba88:	6125      	str	r5, [r4, #16]
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	b007      	add	sp, #28
 800ba8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba92:	f04f 0b00 	mov.w	fp, #0
 800ba96:	e7ca      	b.n	800ba2e <_scanf_i+0x15e>
 800ba98:	07ca      	lsls	r2, r1, #31
 800ba9a:	bf4c      	ite	mi
 800ba9c:	8018      	strhmi	r0, [r3, #0]
 800ba9e:	6018      	strpl	r0, [r3, #0]
 800baa0:	e7eb      	b.n	800ba7a <_scanf_i+0x1aa>
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7f2      	b.n	800ba8c <_scanf_i+0x1bc>
 800baa6:	bf00      	nop
 800baa8:	0800d0f4 	.word	0x0800d0f4
 800baac:	0800bc7d 	.word	0x0800bc7d
 800bab0:	08009291 	.word	0x08009291
 800bab4:	0800d566 	.word	0x0800d566

0800bab8 <_read_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4d07      	ldr	r5, [pc, #28]	; (800bad8 <_read_r+0x20>)
 800babc:	4604      	mov	r4, r0
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	2200      	movs	r2, #0
 800bac4:	602a      	str	r2, [r5, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	f7f6 fdb2 	bl	8002630 <_read>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_read_r+0x1e>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_read_r+0x1e>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	200186e0 	.word	0x200186e0
 800badc:	00000000 	.word	0x00000000

0800bae0 <nan>:
 800bae0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bae8 <nan+0x8>
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	00000000 	.word	0x00000000
 800baec:	7ff80000 	.word	0x7ff80000

0800baf0 <_sbrk_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	; (800bb0c <_sbrk_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f6 fe06 	bl	800270c <_sbrk>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_sbrk_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_sbrk_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	200186e0 	.word	0x200186e0

0800bb10 <__sccl>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	780b      	ldrb	r3, [r1, #0]
 800bb14:	4604      	mov	r4, r0
 800bb16:	2b5e      	cmp	r3, #94	; 0x5e
 800bb18:	bf0b      	itete	eq
 800bb1a:	784b      	ldrbeq	r3, [r1, #1]
 800bb1c:	1c48      	addne	r0, r1, #1
 800bb1e:	1c88      	addeq	r0, r1, #2
 800bb20:	2200      	movne	r2, #0
 800bb22:	bf08      	it	eq
 800bb24:	2201      	moveq	r2, #1
 800bb26:	1e61      	subs	r1, r4, #1
 800bb28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bb2c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bb30:	42a9      	cmp	r1, r5
 800bb32:	d1fb      	bne.n	800bb2c <__sccl+0x1c>
 800bb34:	b90b      	cbnz	r3, 800bb3a <__sccl+0x2a>
 800bb36:	3801      	subs	r0, #1
 800bb38:	bd70      	pop	{r4, r5, r6, pc}
 800bb3a:	f082 0101 	eor.w	r1, r2, #1
 800bb3e:	54e1      	strb	r1, [r4, r3]
 800bb40:	1c42      	adds	r2, r0, #1
 800bb42:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bb46:	2d2d      	cmp	r5, #45	; 0x2d
 800bb48:	f102 36ff 	add.w	r6, r2, #4294967295
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	d006      	beq.n	800bb5e <__sccl+0x4e>
 800bb50:	2d5d      	cmp	r5, #93	; 0x5d
 800bb52:	d0f1      	beq.n	800bb38 <__sccl+0x28>
 800bb54:	b90d      	cbnz	r5, 800bb5a <__sccl+0x4a>
 800bb56:	4630      	mov	r0, r6
 800bb58:	e7ee      	b.n	800bb38 <__sccl+0x28>
 800bb5a:	462b      	mov	r3, r5
 800bb5c:	e7ef      	b.n	800bb3e <__sccl+0x2e>
 800bb5e:	7816      	ldrb	r6, [r2, #0]
 800bb60:	2e5d      	cmp	r6, #93	; 0x5d
 800bb62:	d0fa      	beq.n	800bb5a <__sccl+0x4a>
 800bb64:	42b3      	cmp	r3, r6
 800bb66:	dcf8      	bgt.n	800bb5a <__sccl+0x4a>
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	4286      	cmp	r6, r0
 800bb6e:	5421      	strb	r1, [r4, r0]
 800bb70:	dcfb      	bgt.n	800bb6a <__sccl+0x5a>
 800bb72:	43d8      	mvns	r0, r3
 800bb74:	4430      	add	r0, r6
 800bb76:	1c5d      	adds	r5, r3, #1
 800bb78:	42b3      	cmp	r3, r6
 800bb7a:	bfa8      	it	ge
 800bb7c:	2000      	movge	r0, #0
 800bb7e:	182b      	adds	r3, r5, r0
 800bb80:	3202      	adds	r2, #2
 800bb82:	e7de      	b.n	800bb42 <__sccl+0x32>

0800bb84 <_strtoul_l.isra.0>:
 800bb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb88:	4e3b      	ldr	r6, [pc, #236]	; (800bc78 <_strtoul_l.isra.0+0xf4>)
 800bb8a:	4686      	mov	lr, r0
 800bb8c:	468c      	mov	ip, r1
 800bb8e:	4660      	mov	r0, ip
 800bb90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bb94:	5da5      	ldrb	r5, [r4, r6]
 800bb96:	f015 0508 	ands.w	r5, r5, #8
 800bb9a:	d1f8      	bne.n	800bb8e <_strtoul_l.isra.0+0xa>
 800bb9c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb9e:	d134      	bne.n	800bc0a <_strtoul_l.isra.0+0x86>
 800bba0:	f89c 4000 	ldrb.w	r4, [ip]
 800bba4:	f04f 0801 	mov.w	r8, #1
 800bba8:	f100 0c02 	add.w	ip, r0, #2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d05e      	beq.n	800bc6e <_strtoul_l.isra.0+0xea>
 800bbb0:	2b10      	cmp	r3, #16
 800bbb2:	d10c      	bne.n	800bbce <_strtoul_l.isra.0+0x4a>
 800bbb4:	2c30      	cmp	r4, #48	; 0x30
 800bbb6:	d10a      	bne.n	800bbce <_strtoul_l.isra.0+0x4a>
 800bbb8:	f89c 0000 	ldrb.w	r0, [ip]
 800bbbc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bbc0:	2858      	cmp	r0, #88	; 0x58
 800bbc2:	d14f      	bne.n	800bc64 <_strtoul_l.isra.0+0xe0>
 800bbc4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f10c 0c02 	add.w	ip, ip, #2
 800bbce:	f04f 37ff 	mov.w	r7, #4294967295
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	fbb7 f7f3 	udiv	r7, r7, r3
 800bbd8:	fb03 f907 	mul.w	r9, r3, r7
 800bbdc:	ea6f 0909 	mvn.w	r9, r9
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800bbe6:	2e09      	cmp	r6, #9
 800bbe8:	d818      	bhi.n	800bc1c <_strtoul_l.isra.0+0x98>
 800bbea:	4634      	mov	r4, r6
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	dd24      	ble.n	800bc3a <_strtoul_l.isra.0+0xb6>
 800bbf0:	2d00      	cmp	r5, #0
 800bbf2:	db1f      	blt.n	800bc34 <_strtoul_l.isra.0+0xb0>
 800bbf4:	4287      	cmp	r7, r0
 800bbf6:	d31d      	bcc.n	800bc34 <_strtoul_l.isra.0+0xb0>
 800bbf8:	d101      	bne.n	800bbfe <_strtoul_l.isra.0+0x7a>
 800bbfa:	45a1      	cmp	r9, r4
 800bbfc:	db1a      	blt.n	800bc34 <_strtoul_l.isra.0+0xb0>
 800bbfe:	fb00 4003 	mla	r0, r0, r3, r4
 800bc02:	2501      	movs	r5, #1
 800bc04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bc08:	e7eb      	b.n	800bbe2 <_strtoul_l.isra.0+0x5e>
 800bc0a:	2c2b      	cmp	r4, #43	; 0x2b
 800bc0c:	bf08      	it	eq
 800bc0e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800bc12:	46a8      	mov	r8, r5
 800bc14:	bf08      	it	eq
 800bc16:	f100 0c02 	addeq.w	ip, r0, #2
 800bc1a:	e7c7      	b.n	800bbac <_strtoul_l.isra.0+0x28>
 800bc1c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800bc20:	2e19      	cmp	r6, #25
 800bc22:	d801      	bhi.n	800bc28 <_strtoul_l.isra.0+0xa4>
 800bc24:	3c37      	subs	r4, #55	; 0x37
 800bc26:	e7e1      	b.n	800bbec <_strtoul_l.isra.0+0x68>
 800bc28:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800bc2c:	2e19      	cmp	r6, #25
 800bc2e:	d804      	bhi.n	800bc3a <_strtoul_l.isra.0+0xb6>
 800bc30:	3c57      	subs	r4, #87	; 0x57
 800bc32:	e7db      	b.n	800bbec <_strtoul_l.isra.0+0x68>
 800bc34:	f04f 35ff 	mov.w	r5, #4294967295
 800bc38:	e7e4      	b.n	800bc04 <_strtoul_l.isra.0+0x80>
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	da07      	bge.n	800bc4e <_strtoul_l.isra.0+0xca>
 800bc3e:	2322      	movs	r3, #34	; 0x22
 800bc40:	f8ce 3000 	str.w	r3, [lr]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	b942      	cbnz	r2, 800bc5c <_strtoul_l.isra.0+0xd8>
 800bc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	f1b8 0f00 	cmp.w	r8, #0
 800bc52:	d000      	beq.n	800bc56 <_strtoul_l.isra.0+0xd2>
 800bc54:	4240      	negs	r0, r0
 800bc56:	2a00      	cmp	r2, #0
 800bc58:	d0f7      	beq.n	800bc4a <_strtoul_l.isra.0+0xc6>
 800bc5a:	b10d      	cbz	r5, 800bc60 <_strtoul_l.isra.0+0xdc>
 800bc5c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bc60:	6011      	str	r1, [r2, #0]
 800bc62:	e7f2      	b.n	800bc4a <_strtoul_l.isra.0+0xc6>
 800bc64:	2430      	movs	r4, #48	; 0x30
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1b1      	bne.n	800bbce <_strtoul_l.isra.0+0x4a>
 800bc6a:	2308      	movs	r3, #8
 800bc6c:	e7af      	b.n	800bbce <_strtoul_l.isra.0+0x4a>
 800bc6e:	2c30      	cmp	r4, #48	; 0x30
 800bc70:	d0a2      	beq.n	800bbb8 <_strtoul_l.isra.0+0x34>
 800bc72:	230a      	movs	r3, #10
 800bc74:	e7ab      	b.n	800bbce <_strtoul_l.isra.0+0x4a>
 800bc76:	bf00      	nop
 800bc78:	0800d1ce 	.word	0x0800d1ce

0800bc7c <_strtoul_r>:
 800bc7c:	f7ff bf82 	b.w	800bb84 <_strtoul_l.isra.0>

0800bc80 <__submore>:
 800bc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc84:	460c      	mov	r4, r1
 800bc86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d11d      	bne.n	800bccc <__submore+0x4c>
 800bc90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc94:	f7ff fa3c 	bl	800b110 <_malloc_r>
 800bc98:	b918      	cbnz	r0, 800bca2 <__submore+0x22>
 800bc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca6:	63a3      	str	r3, [r4, #56]	; 0x38
 800bca8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bcac:	6360      	str	r0, [r4, #52]	; 0x34
 800bcae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bcb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bcb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bcba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bcbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bcc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bcc6:	6020      	str	r0, [r4, #0]
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e7e8      	b.n	800bc9e <__submore+0x1e>
 800bccc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bcce:	0077      	lsls	r7, r6, #1
 800bcd0:	463a      	mov	r2, r7
 800bcd2:	f000 fa2d 	bl	800c130 <_realloc_r>
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d0de      	beq.n	800bc9a <__submore+0x1a>
 800bcdc:	eb00 0806 	add.w	r8, r0, r6
 800bce0:	4601      	mov	r1, r0
 800bce2:	4632      	mov	r2, r6
 800bce4:	4640      	mov	r0, r8
 800bce6:	f7fe fce9 	bl	800a6bc <memcpy>
 800bcea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bcee:	f8c4 8000 	str.w	r8, [r4]
 800bcf2:	e7e9      	b.n	800bcc8 <__submore+0x48>

0800bcf4 <__ascii_wctomb>:
 800bcf4:	b149      	cbz	r1, 800bd0a <__ascii_wctomb+0x16>
 800bcf6:	2aff      	cmp	r2, #255	; 0xff
 800bcf8:	bf85      	ittet	hi
 800bcfa:	238a      	movhi	r3, #138	; 0x8a
 800bcfc:	6003      	strhi	r3, [r0, #0]
 800bcfe:	700a      	strbls	r2, [r1, #0]
 800bd00:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd04:	bf98      	it	ls
 800bd06:	2001      	movls	r0, #1
 800bd08:	4770      	bx	lr
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4770      	bx	lr
	...

0800bd10 <__assert_func>:
 800bd10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd12:	4614      	mov	r4, r2
 800bd14:	461a      	mov	r2, r3
 800bd16:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <__assert_func+0x2c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	68d8      	ldr	r0, [r3, #12]
 800bd1e:	b14c      	cbz	r4, 800bd34 <__assert_func+0x24>
 800bd20:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <__assert_func+0x30>)
 800bd22:	9100      	str	r1, [sp, #0]
 800bd24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd28:	4906      	ldr	r1, [pc, #24]	; (800bd44 <__assert_func+0x34>)
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	f000 f9a6 	bl	800c07c <fiprintf>
 800bd30:	f000 fc3e 	bl	800c5b0 <abort>
 800bd34:	4b04      	ldr	r3, [pc, #16]	; (800bd48 <__assert_func+0x38>)
 800bd36:	461c      	mov	r4, r3
 800bd38:	e7f3      	b.n	800bd22 <__assert_func+0x12>
 800bd3a:	bf00      	nop
 800bd3c:	20000098 	.word	0x20000098
 800bd40:	0800d568 	.word	0x0800d568
 800bd44:	0800d575 	.word	0x0800d575
 800bd48:	0800d5a3 	.word	0x0800d5a3

0800bd4c <__sflush_r>:
 800bd4c:	898a      	ldrh	r2, [r1, #12]
 800bd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd52:	4605      	mov	r5, r0
 800bd54:	0710      	lsls	r0, r2, #28
 800bd56:	460c      	mov	r4, r1
 800bd58:	d458      	bmi.n	800be0c <__sflush_r+0xc0>
 800bd5a:	684b      	ldr	r3, [r1, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dc05      	bgt.n	800bd6c <__sflush_r+0x20>
 800bd60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	dc02      	bgt.n	800bd6c <__sflush_r+0x20>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6e:	2e00      	cmp	r6, #0
 800bd70:	d0f9      	beq.n	800bd66 <__sflush_r+0x1a>
 800bd72:	2300      	movs	r3, #0
 800bd74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd78:	682f      	ldr	r7, [r5, #0]
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	d032      	beq.n	800bde4 <__sflush_r+0x98>
 800bd7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	075a      	lsls	r2, r3, #29
 800bd84:	d505      	bpl.n	800bd92 <__sflush_r+0x46>
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	1ac0      	subs	r0, r0, r3
 800bd8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd8c:	b10b      	cbz	r3, 800bd92 <__sflush_r+0x46>
 800bd8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd90:	1ac0      	subs	r0, r0, r3
 800bd92:	2300      	movs	r3, #0
 800bd94:	4602      	mov	r2, r0
 800bd96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd98:	6a21      	ldr	r1, [r4, #32]
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	47b0      	blx	r6
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	d106      	bne.n	800bdb2 <__sflush_r+0x66>
 800bda4:	6829      	ldr	r1, [r5, #0]
 800bda6:	291d      	cmp	r1, #29
 800bda8:	d82c      	bhi.n	800be04 <__sflush_r+0xb8>
 800bdaa:	4a2a      	ldr	r2, [pc, #168]	; (800be54 <__sflush_r+0x108>)
 800bdac:	40ca      	lsrs	r2, r1
 800bdae:	07d6      	lsls	r6, r2, #31
 800bdb0:	d528      	bpl.n	800be04 <__sflush_r+0xb8>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	6062      	str	r2, [r4, #4]
 800bdb6:	04d9      	lsls	r1, r3, #19
 800bdb8:	6922      	ldr	r2, [r4, #16]
 800bdba:	6022      	str	r2, [r4, #0]
 800bdbc:	d504      	bpl.n	800bdc8 <__sflush_r+0x7c>
 800bdbe:	1c42      	adds	r2, r0, #1
 800bdc0:	d101      	bne.n	800bdc6 <__sflush_r+0x7a>
 800bdc2:	682b      	ldr	r3, [r5, #0]
 800bdc4:	b903      	cbnz	r3, 800bdc8 <__sflush_r+0x7c>
 800bdc6:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdca:	602f      	str	r7, [r5, #0]
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d0ca      	beq.n	800bd66 <__sflush_r+0x1a>
 800bdd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d002      	beq.n	800bdde <__sflush_r+0x92>
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7ff f949 	bl	800b070 <_free_r>
 800bdde:	2000      	movs	r0, #0
 800bde0:	6360      	str	r0, [r4, #52]	; 0x34
 800bde2:	e7c1      	b.n	800bd68 <__sflush_r+0x1c>
 800bde4:	6a21      	ldr	r1, [r4, #32]
 800bde6:	2301      	movs	r3, #1
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b0      	blx	r6
 800bdec:	1c41      	adds	r1, r0, #1
 800bdee:	d1c7      	bne.n	800bd80 <__sflush_r+0x34>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0c4      	beq.n	800bd80 <__sflush_r+0x34>
 800bdf6:	2b1d      	cmp	r3, #29
 800bdf8:	d001      	beq.n	800bdfe <__sflush_r+0xb2>
 800bdfa:	2b16      	cmp	r3, #22
 800bdfc:	d101      	bne.n	800be02 <__sflush_r+0xb6>
 800bdfe:	602f      	str	r7, [r5, #0]
 800be00:	e7b1      	b.n	800bd66 <__sflush_r+0x1a>
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	e7ad      	b.n	800bd68 <__sflush_r+0x1c>
 800be0c:	690f      	ldr	r7, [r1, #16]
 800be0e:	2f00      	cmp	r7, #0
 800be10:	d0a9      	beq.n	800bd66 <__sflush_r+0x1a>
 800be12:	0793      	lsls	r3, r2, #30
 800be14:	680e      	ldr	r6, [r1, #0]
 800be16:	bf08      	it	eq
 800be18:	694b      	ldreq	r3, [r1, #20]
 800be1a:	600f      	str	r7, [r1, #0]
 800be1c:	bf18      	it	ne
 800be1e:	2300      	movne	r3, #0
 800be20:	eba6 0807 	sub.w	r8, r6, r7
 800be24:	608b      	str	r3, [r1, #8]
 800be26:	f1b8 0f00 	cmp.w	r8, #0
 800be2a:	dd9c      	ble.n	800bd66 <__sflush_r+0x1a>
 800be2c:	6a21      	ldr	r1, [r4, #32]
 800be2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be30:	4643      	mov	r3, r8
 800be32:	463a      	mov	r2, r7
 800be34:	4628      	mov	r0, r5
 800be36:	47b0      	blx	r6
 800be38:	2800      	cmp	r0, #0
 800be3a:	dc06      	bgt.n	800be4a <__sflush_r+0xfe>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	e78e      	b.n	800bd68 <__sflush_r+0x1c>
 800be4a:	4407      	add	r7, r0
 800be4c:	eba8 0800 	sub.w	r8, r8, r0
 800be50:	e7e9      	b.n	800be26 <__sflush_r+0xda>
 800be52:	bf00      	nop
 800be54:	20400001 	.word	0x20400001

0800be58 <_fflush_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	690b      	ldr	r3, [r1, #16]
 800be5c:	4605      	mov	r5, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	b913      	cbnz	r3, 800be68 <_fflush_r+0x10>
 800be62:	2500      	movs	r5, #0
 800be64:	4628      	mov	r0, r5
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	b118      	cbz	r0, 800be72 <_fflush_r+0x1a>
 800be6a:	6983      	ldr	r3, [r0, #24]
 800be6c:	b90b      	cbnz	r3, 800be72 <_fflush_r+0x1a>
 800be6e:	f000 f887 	bl	800bf80 <__sinit>
 800be72:	4b14      	ldr	r3, [pc, #80]	; (800bec4 <_fflush_r+0x6c>)
 800be74:	429c      	cmp	r4, r3
 800be76:	d11b      	bne.n	800beb0 <_fflush_r+0x58>
 800be78:	686c      	ldr	r4, [r5, #4]
 800be7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0ef      	beq.n	800be62 <_fflush_r+0xa>
 800be82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be84:	07d0      	lsls	r0, r2, #31
 800be86:	d404      	bmi.n	800be92 <_fflush_r+0x3a>
 800be88:	0599      	lsls	r1, r3, #22
 800be8a:	d402      	bmi.n	800be92 <_fflush_r+0x3a>
 800be8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8e:	f000 f927 	bl	800c0e0 <__retarget_lock_acquire_recursive>
 800be92:	4628      	mov	r0, r5
 800be94:	4621      	mov	r1, r4
 800be96:	f7ff ff59 	bl	800bd4c <__sflush_r>
 800be9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be9c:	07da      	lsls	r2, r3, #31
 800be9e:	4605      	mov	r5, r0
 800bea0:	d4e0      	bmi.n	800be64 <_fflush_r+0xc>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	059b      	lsls	r3, r3, #22
 800bea6:	d4dd      	bmi.n	800be64 <_fflush_r+0xc>
 800bea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beaa:	f000 f91a 	bl	800c0e2 <__retarget_lock_release_recursive>
 800beae:	e7d9      	b.n	800be64 <_fflush_r+0xc>
 800beb0:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <_fflush_r+0x70>)
 800beb2:	429c      	cmp	r4, r3
 800beb4:	d101      	bne.n	800beba <_fflush_r+0x62>
 800beb6:	68ac      	ldr	r4, [r5, #8]
 800beb8:	e7df      	b.n	800be7a <_fflush_r+0x22>
 800beba:	4b04      	ldr	r3, [pc, #16]	; (800becc <_fflush_r+0x74>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	bf08      	it	eq
 800bec0:	68ec      	ldreq	r4, [r5, #12]
 800bec2:	e7da      	b.n	800be7a <_fflush_r+0x22>
 800bec4:	0800d5c4 	.word	0x0800d5c4
 800bec8:	0800d5e4 	.word	0x0800d5e4
 800becc:	0800d5a4 	.word	0x0800d5a4

0800bed0 <std>:
 800bed0:	2300      	movs	r3, #0
 800bed2:	b510      	push	{r4, lr}
 800bed4:	4604      	mov	r4, r0
 800bed6:	e9c0 3300 	strd	r3, r3, [r0]
 800beda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bede:	6083      	str	r3, [r0, #8]
 800bee0:	8181      	strh	r1, [r0, #12]
 800bee2:	6643      	str	r3, [r0, #100]	; 0x64
 800bee4:	81c2      	strh	r2, [r0, #14]
 800bee6:	6183      	str	r3, [r0, #24]
 800bee8:	4619      	mov	r1, r3
 800beea:	2208      	movs	r2, #8
 800beec:	305c      	adds	r0, #92	; 0x5c
 800beee:	f7fb fc33 	bl	8007758 <memset>
 800bef2:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <std+0x38>)
 800bef4:	6263      	str	r3, [r4, #36]	; 0x24
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <std+0x3c>)
 800bef8:	62a3      	str	r3, [r4, #40]	; 0x28
 800befa:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <std+0x40>)
 800befc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800befe:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <std+0x44>)
 800bf00:	6224      	str	r4, [r4, #32]
 800bf02:	6323      	str	r3, [r4, #48]	; 0x30
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	bf00      	nop
 800bf08:	08008499 	.word	0x08008499
 800bf0c:	080084bf 	.word	0x080084bf
 800bf10:	080084f7 	.word	0x080084f7
 800bf14:	0800851b 	.word	0x0800851b

0800bf18 <_cleanup_r>:
 800bf18:	4901      	ldr	r1, [pc, #4]	; (800bf20 <_cleanup_r+0x8>)
 800bf1a:	f000 b8c1 	b.w	800c0a0 <_fwalk_reent>
 800bf1e:	bf00      	nop
 800bf20:	0800be59 	.word	0x0800be59

0800bf24 <__sfmoreglue>:
 800bf24:	b570      	push	{r4, r5, r6, lr}
 800bf26:	1e4a      	subs	r2, r1, #1
 800bf28:	2568      	movs	r5, #104	; 0x68
 800bf2a:	4355      	muls	r5, r2
 800bf2c:	460e      	mov	r6, r1
 800bf2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf32:	f7ff f8ed 	bl	800b110 <_malloc_r>
 800bf36:	4604      	mov	r4, r0
 800bf38:	b140      	cbz	r0, 800bf4c <__sfmoreglue+0x28>
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	e9c0 1600 	strd	r1, r6, [r0]
 800bf40:	300c      	adds	r0, #12
 800bf42:	60a0      	str	r0, [r4, #8]
 800bf44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf48:	f7fb fc06 	bl	8007758 <memset>
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}

0800bf50 <__sfp_lock_acquire>:
 800bf50:	4801      	ldr	r0, [pc, #4]	; (800bf58 <__sfp_lock_acquire+0x8>)
 800bf52:	f000 b8c5 	b.w	800c0e0 <__retarget_lock_acquire_recursive>
 800bf56:	bf00      	nop
 800bf58:	200186ec 	.word	0x200186ec

0800bf5c <__sfp_lock_release>:
 800bf5c:	4801      	ldr	r0, [pc, #4]	; (800bf64 <__sfp_lock_release+0x8>)
 800bf5e:	f000 b8c0 	b.w	800c0e2 <__retarget_lock_release_recursive>
 800bf62:	bf00      	nop
 800bf64:	200186ec 	.word	0x200186ec

0800bf68 <__sinit_lock_acquire>:
 800bf68:	4801      	ldr	r0, [pc, #4]	; (800bf70 <__sinit_lock_acquire+0x8>)
 800bf6a:	f000 b8b9 	b.w	800c0e0 <__retarget_lock_acquire_recursive>
 800bf6e:	bf00      	nop
 800bf70:	200186e7 	.word	0x200186e7

0800bf74 <__sinit_lock_release>:
 800bf74:	4801      	ldr	r0, [pc, #4]	; (800bf7c <__sinit_lock_release+0x8>)
 800bf76:	f000 b8b4 	b.w	800c0e2 <__retarget_lock_release_recursive>
 800bf7a:	bf00      	nop
 800bf7c:	200186e7 	.word	0x200186e7

0800bf80 <__sinit>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	f7ff fff0 	bl	800bf68 <__sinit_lock_acquire>
 800bf88:	69a3      	ldr	r3, [r4, #24]
 800bf8a:	b11b      	cbz	r3, 800bf94 <__sinit+0x14>
 800bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf90:	f7ff bff0 	b.w	800bf74 <__sinit_lock_release>
 800bf94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf98:	6523      	str	r3, [r4, #80]	; 0x50
 800bf9a:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <__sinit+0x68>)
 800bf9c:	4a13      	ldr	r2, [pc, #76]	; (800bfec <__sinit+0x6c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfa2:	42a3      	cmp	r3, r4
 800bfa4:	bf04      	itt	eq
 800bfa6:	2301      	moveq	r3, #1
 800bfa8:	61a3      	streq	r3, [r4, #24]
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 f820 	bl	800bff0 <__sfp>
 800bfb0:	6060      	str	r0, [r4, #4]
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 f81c 	bl	800bff0 <__sfp>
 800bfb8:	60a0      	str	r0, [r4, #8]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 f818 	bl	800bff0 <__sfp>
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	60e0      	str	r0, [r4, #12]
 800bfc4:	2104      	movs	r1, #4
 800bfc6:	6860      	ldr	r0, [r4, #4]
 800bfc8:	f7ff ff82 	bl	800bed0 <std>
 800bfcc:	68a0      	ldr	r0, [r4, #8]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	2109      	movs	r1, #9
 800bfd2:	f7ff ff7d 	bl	800bed0 <std>
 800bfd6:	68e0      	ldr	r0, [r4, #12]
 800bfd8:	2202      	movs	r2, #2
 800bfda:	2112      	movs	r1, #18
 800bfdc:	f7ff ff78 	bl	800bed0 <std>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	61a3      	str	r3, [r4, #24]
 800bfe4:	e7d2      	b.n	800bf8c <__sinit+0xc>
 800bfe6:	bf00      	nop
 800bfe8:	0800d118 	.word	0x0800d118
 800bfec:	0800bf19 	.word	0x0800bf19

0800bff0 <__sfp>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	4607      	mov	r7, r0
 800bff4:	f7ff ffac 	bl	800bf50 <__sfp_lock_acquire>
 800bff8:	4b1e      	ldr	r3, [pc, #120]	; (800c074 <__sfp+0x84>)
 800bffa:	681e      	ldr	r6, [r3, #0]
 800bffc:	69b3      	ldr	r3, [r6, #24]
 800bffe:	b913      	cbnz	r3, 800c006 <__sfp+0x16>
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff ffbd 	bl	800bf80 <__sinit>
 800c006:	3648      	adds	r6, #72	; 0x48
 800c008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	d503      	bpl.n	800c018 <__sfp+0x28>
 800c010:	6833      	ldr	r3, [r6, #0]
 800c012:	b30b      	cbz	r3, 800c058 <__sfp+0x68>
 800c014:	6836      	ldr	r6, [r6, #0]
 800c016:	e7f7      	b.n	800c008 <__sfp+0x18>
 800c018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c01c:	b9d5      	cbnz	r5, 800c054 <__sfp+0x64>
 800c01e:	4b16      	ldr	r3, [pc, #88]	; (800c078 <__sfp+0x88>)
 800c020:	60e3      	str	r3, [r4, #12]
 800c022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c026:	6665      	str	r5, [r4, #100]	; 0x64
 800c028:	f000 f859 	bl	800c0de <__retarget_lock_init_recursive>
 800c02c:	f7ff ff96 	bl	800bf5c <__sfp_lock_release>
 800c030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c038:	6025      	str	r5, [r4, #0]
 800c03a:	61a5      	str	r5, [r4, #24]
 800c03c:	2208      	movs	r2, #8
 800c03e:	4629      	mov	r1, r5
 800c040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c044:	f7fb fb88 	bl	8007758 <memset>
 800c048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c04c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c050:	4620      	mov	r0, r4
 800c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c054:	3468      	adds	r4, #104	; 0x68
 800c056:	e7d9      	b.n	800c00c <__sfp+0x1c>
 800c058:	2104      	movs	r1, #4
 800c05a:	4638      	mov	r0, r7
 800c05c:	f7ff ff62 	bl	800bf24 <__sfmoreglue>
 800c060:	4604      	mov	r4, r0
 800c062:	6030      	str	r0, [r6, #0]
 800c064:	2800      	cmp	r0, #0
 800c066:	d1d5      	bne.n	800c014 <__sfp+0x24>
 800c068:	f7ff ff78 	bl	800bf5c <__sfp_lock_release>
 800c06c:	230c      	movs	r3, #12
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	e7ee      	b.n	800c050 <__sfp+0x60>
 800c072:	bf00      	nop
 800c074:	0800d118 	.word	0x0800d118
 800c078:	ffff0001 	.word	0xffff0001

0800c07c <fiprintf>:
 800c07c:	b40e      	push	{r1, r2, r3}
 800c07e:	b503      	push	{r0, r1, lr}
 800c080:	4601      	mov	r1, r0
 800c082:	ab03      	add	r3, sp, #12
 800c084:	4805      	ldr	r0, [pc, #20]	; (800c09c <fiprintf+0x20>)
 800c086:	f853 2b04 	ldr.w	r2, [r3], #4
 800c08a:	6800      	ldr	r0, [r0, #0]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	f000 f89f 	bl	800c1d0 <_vfiprintf_r>
 800c092:	b002      	add	sp, #8
 800c094:	f85d eb04 	ldr.w	lr, [sp], #4
 800c098:	b003      	add	sp, #12
 800c09a:	4770      	bx	lr
 800c09c:	20000098 	.word	0x20000098

0800c0a0 <_fwalk_reent>:
 800c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	4688      	mov	r8, r1
 800c0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0ac:	2700      	movs	r7, #0
 800c0ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b6:	d505      	bpl.n	800c0c4 <_fwalk_reent+0x24>
 800c0b8:	6824      	ldr	r4, [r4, #0]
 800c0ba:	2c00      	cmp	r4, #0
 800c0bc:	d1f7      	bne.n	800c0ae <_fwalk_reent+0xe>
 800c0be:	4638      	mov	r0, r7
 800c0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c4:	89ab      	ldrh	r3, [r5, #12]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d907      	bls.n	800c0da <_fwalk_reent+0x3a>
 800c0ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	d003      	beq.n	800c0da <_fwalk_reent+0x3a>
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	47c0      	blx	r8
 800c0d8:	4307      	orrs	r7, r0
 800c0da:	3568      	adds	r5, #104	; 0x68
 800c0dc:	e7e9      	b.n	800c0b2 <_fwalk_reent+0x12>

0800c0de <__retarget_lock_init_recursive>:
 800c0de:	4770      	bx	lr

0800c0e0 <__retarget_lock_acquire_recursive>:
 800c0e0:	4770      	bx	lr

0800c0e2 <__retarget_lock_release_recursive>:
 800c0e2:	4770      	bx	lr

0800c0e4 <memmove>:
 800c0e4:	4288      	cmp	r0, r1
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	eb01 0402 	add.w	r4, r1, r2
 800c0ec:	d902      	bls.n	800c0f4 <memmove+0x10>
 800c0ee:	4284      	cmp	r4, r0
 800c0f0:	4623      	mov	r3, r4
 800c0f2:	d807      	bhi.n	800c104 <memmove+0x20>
 800c0f4:	1e43      	subs	r3, r0, #1
 800c0f6:	42a1      	cmp	r1, r4
 800c0f8:	d008      	beq.n	800c10c <memmove+0x28>
 800c0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c102:	e7f8      	b.n	800c0f6 <memmove+0x12>
 800c104:	4402      	add	r2, r0
 800c106:	4601      	mov	r1, r0
 800c108:	428a      	cmp	r2, r1
 800c10a:	d100      	bne.n	800c10e <memmove+0x2a>
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c116:	e7f7      	b.n	800c108 <memmove+0x24>

0800c118 <__malloc_lock>:
 800c118:	4801      	ldr	r0, [pc, #4]	; (800c120 <__malloc_lock+0x8>)
 800c11a:	f7ff bfe1 	b.w	800c0e0 <__retarget_lock_acquire_recursive>
 800c11e:	bf00      	nop
 800c120:	200186e8 	.word	0x200186e8

0800c124 <__malloc_unlock>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__malloc_unlock+0x8>)
 800c126:	f7ff bfdc 	b.w	800c0e2 <__retarget_lock_release_recursive>
 800c12a:	bf00      	nop
 800c12c:	200186e8 	.word	0x200186e8

0800c130 <_realloc_r>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	4607      	mov	r7, r0
 800c134:	4614      	mov	r4, r2
 800c136:	460e      	mov	r6, r1
 800c138:	b921      	cbnz	r1, 800c144 <_realloc_r+0x14>
 800c13a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c13e:	4611      	mov	r1, r2
 800c140:	f7fe bfe6 	b.w	800b110 <_malloc_r>
 800c144:	b922      	cbnz	r2, 800c150 <_realloc_r+0x20>
 800c146:	f7fe ff93 	bl	800b070 <_free_r>
 800c14a:	4625      	mov	r5, r4
 800c14c:	4628      	mov	r0, r5
 800c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c150:	f000 fa9a 	bl	800c688 <_malloc_usable_size_r>
 800c154:	42a0      	cmp	r0, r4
 800c156:	d20f      	bcs.n	800c178 <_realloc_r+0x48>
 800c158:	4621      	mov	r1, r4
 800c15a:	4638      	mov	r0, r7
 800c15c:	f7fe ffd8 	bl	800b110 <_malloc_r>
 800c160:	4605      	mov	r5, r0
 800c162:	2800      	cmp	r0, #0
 800c164:	d0f2      	beq.n	800c14c <_realloc_r+0x1c>
 800c166:	4631      	mov	r1, r6
 800c168:	4622      	mov	r2, r4
 800c16a:	f7fe faa7 	bl	800a6bc <memcpy>
 800c16e:	4631      	mov	r1, r6
 800c170:	4638      	mov	r0, r7
 800c172:	f7fe ff7d 	bl	800b070 <_free_r>
 800c176:	e7e9      	b.n	800c14c <_realloc_r+0x1c>
 800c178:	4635      	mov	r5, r6
 800c17a:	e7e7      	b.n	800c14c <_realloc_r+0x1c>

0800c17c <__sfputc_r>:
 800c17c:	6893      	ldr	r3, [r2, #8]
 800c17e:	3b01      	subs	r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	b410      	push	{r4}
 800c184:	6093      	str	r3, [r2, #8]
 800c186:	da08      	bge.n	800c19a <__sfputc_r+0x1e>
 800c188:	6994      	ldr	r4, [r2, #24]
 800c18a:	42a3      	cmp	r3, r4
 800c18c:	db01      	blt.n	800c192 <__sfputc_r+0x16>
 800c18e:	290a      	cmp	r1, #10
 800c190:	d103      	bne.n	800c19a <__sfputc_r+0x1e>
 800c192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c196:	f000 b94b 	b.w	800c430 <__swbuf_r>
 800c19a:	6813      	ldr	r3, [r2, #0]
 800c19c:	1c58      	adds	r0, r3, #1
 800c19e:	6010      	str	r0, [r2, #0]
 800c1a0:	7019      	strb	r1, [r3, #0]
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <__sfputs_r>:
 800c1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	18d5      	adds	r5, r2, r3
 800c1b4:	42ac      	cmp	r4, r5
 800c1b6:	d101      	bne.n	800c1bc <__sfputs_r+0x12>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e007      	b.n	800c1cc <__sfputs_r+0x22>
 800c1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c0:	463a      	mov	r2, r7
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff ffda 	bl	800c17c <__sfputc_r>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d1f3      	bne.n	800c1b4 <__sfputs_r+0xa>
 800c1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1d0 <_vfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	b09d      	sub	sp, #116	; 0x74
 800c1d8:	4614      	mov	r4, r2
 800c1da:	4698      	mov	r8, r3
 800c1dc:	4606      	mov	r6, r0
 800c1de:	b118      	cbz	r0, 800c1e8 <_vfiprintf_r+0x18>
 800c1e0:	6983      	ldr	r3, [r0, #24]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <_vfiprintf_r+0x18>
 800c1e4:	f7ff fecc 	bl	800bf80 <__sinit>
 800c1e8:	4b89      	ldr	r3, [pc, #548]	; (800c410 <_vfiprintf_r+0x240>)
 800c1ea:	429d      	cmp	r5, r3
 800c1ec:	d11b      	bne.n	800c226 <_vfiprintf_r+0x56>
 800c1ee:	6875      	ldr	r5, [r6, #4]
 800c1f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f2:	07d9      	lsls	r1, r3, #31
 800c1f4:	d405      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d402      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1fe:	f7ff ff6f 	bl	800c0e0 <__retarget_lock_acquire_recursive>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	071b      	lsls	r3, r3, #28
 800c206:	d501      	bpl.n	800c20c <_vfiprintf_r+0x3c>
 800c208:	692b      	ldr	r3, [r5, #16]
 800c20a:	b9eb      	cbnz	r3, 800c248 <_vfiprintf_r+0x78>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4630      	mov	r0, r6
 800c210:	f000 f960 	bl	800c4d4 <__swsetup_r>
 800c214:	b1c0      	cbz	r0, 800c248 <_vfiprintf_r+0x78>
 800c216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c218:	07dc      	lsls	r4, r3, #31
 800c21a:	d50e      	bpl.n	800c23a <_vfiprintf_r+0x6a>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	b01d      	add	sp, #116	; 0x74
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	4b7b      	ldr	r3, [pc, #492]	; (800c414 <_vfiprintf_r+0x244>)
 800c228:	429d      	cmp	r5, r3
 800c22a:	d101      	bne.n	800c230 <_vfiprintf_r+0x60>
 800c22c:	68b5      	ldr	r5, [r6, #8]
 800c22e:	e7df      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c230:	4b79      	ldr	r3, [pc, #484]	; (800c418 <_vfiprintf_r+0x248>)
 800c232:	429d      	cmp	r5, r3
 800c234:	bf08      	it	eq
 800c236:	68f5      	ldreq	r5, [r6, #12]
 800c238:	e7da      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	0598      	lsls	r0, r3, #22
 800c23e:	d4ed      	bmi.n	800c21c <_vfiprintf_r+0x4c>
 800c240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c242:	f7ff ff4e 	bl	800c0e2 <__retarget_lock_release_recursive>
 800c246:	e7e9      	b.n	800c21c <_vfiprintf_r+0x4c>
 800c248:	2300      	movs	r3, #0
 800c24a:	9309      	str	r3, [sp, #36]	; 0x24
 800c24c:	2320      	movs	r3, #32
 800c24e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c252:	f8cd 800c 	str.w	r8, [sp, #12]
 800c256:	2330      	movs	r3, #48	; 0x30
 800c258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c41c <_vfiprintf_r+0x24c>
 800c25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c260:	f04f 0901 	mov.w	r9, #1
 800c264:	4623      	mov	r3, r4
 800c266:	469a      	mov	sl, r3
 800c268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c26c:	b10a      	cbz	r2, 800c272 <_vfiprintf_r+0xa2>
 800c26e:	2a25      	cmp	r2, #37	; 0x25
 800c270:	d1f9      	bne.n	800c266 <_vfiprintf_r+0x96>
 800c272:	ebba 0b04 	subs.w	fp, sl, r4
 800c276:	d00b      	beq.n	800c290 <_vfiprintf_r+0xc0>
 800c278:	465b      	mov	r3, fp
 800c27a:	4622      	mov	r2, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ff93 	bl	800c1aa <__sfputs_r>
 800c284:	3001      	adds	r0, #1
 800c286:	f000 80aa 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c28c:	445a      	add	r2, fp
 800c28e:	9209      	str	r2, [sp, #36]	; 0x24
 800c290:	f89a 3000 	ldrb.w	r3, [sl]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80a2 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c29a:	2300      	movs	r3, #0
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a4:	f10a 0a01 	add.w	sl, sl, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2b2:	4654      	mov	r4, sl
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ba:	4858      	ldr	r0, [pc, #352]	; (800c41c <_vfiprintf_r+0x24c>)
 800c2bc:	f7f3 ffd8 	bl	8000270 <memchr>
 800c2c0:	9a04      	ldr	r2, [sp, #16]
 800c2c2:	b9d8      	cbnz	r0, 800c2fc <_vfiprintf_r+0x12c>
 800c2c4:	06d1      	lsls	r1, r2, #27
 800c2c6:	bf44      	itt	mi
 800c2c8:	2320      	movmi	r3, #32
 800c2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ce:	0713      	lsls	r3, r2, #28
 800c2d0:	bf44      	itt	mi
 800c2d2:	232b      	movmi	r3, #43	; 0x2b
 800c2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2de:	d015      	beq.n	800c30c <_vfiprintf_r+0x13c>
 800c2e0:	9a07      	ldr	r2, [sp, #28]
 800c2e2:	4654      	mov	r4, sl
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	f04f 0c0a 	mov.w	ip, #10
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f0:	3b30      	subs	r3, #48	; 0x30
 800c2f2:	2b09      	cmp	r3, #9
 800c2f4:	d94e      	bls.n	800c394 <_vfiprintf_r+0x1c4>
 800c2f6:	b1b0      	cbz	r0, 800c326 <_vfiprintf_r+0x156>
 800c2f8:	9207      	str	r2, [sp, #28]
 800c2fa:	e014      	b.n	800c326 <_vfiprintf_r+0x156>
 800c2fc:	eba0 0308 	sub.w	r3, r0, r8
 800c300:	fa09 f303 	lsl.w	r3, r9, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	9304      	str	r3, [sp, #16]
 800c308:	46a2      	mov	sl, r4
 800c30a:	e7d2      	b.n	800c2b2 <_vfiprintf_r+0xe2>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d19      	adds	r1, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9103      	str	r1, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfbb      	ittet	lt
 800c318:	425b      	neglt	r3, r3
 800c31a:	f042 0202 	orrlt.w	r2, r2, #2
 800c31e:	9307      	strge	r3, [sp, #28]
 800c320:	9307      	strlt	r3, [sp, #28]
 800c322:	bfb8      	it	lt
 800c324:	9204      	strlt	r2, [sp, #16]
 800c326:	7823      	ldrb	r3, [r4, #0]
 800c328:	2b2e      	cmp	r3, #46	; 0x2e
 800c32a:	d10c      	bne.n	800c346 <_vfiprintf_r+0x176>
 800c32c:	7863      	ldrb	r3, [r4, #1]
 800c32e:	2b2a      	cmp	r3, #42	; 0x2a
 800c330:	d135      	bne.n	800c39e <_vfiprintf_r+0x1ce>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	1d1a      	adds	r2, r3, #4
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	9203      	str	r2, [sp, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfb8      	it	lt
 800c33e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c342:	3402      	adds	r4, #2
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c42c <_vfiprintf_r+0x25c>
 800c34a:	7821      	ldrb	r1, [r4, #0]
 800c34c:	2203      	movs	r2, #3
 800c34e:	4650      	mov	r0, sl
 800c350:	f7f3 ff8e 	bl	8000270 <memchr>
 800c354:	b140      	cbz	r0, 800c368 <_vfiprintf_r+0x198>
 800c356:	2340      	movs	r3, #64	; 0x40
 800c358:	eba0 000a 	sub.w	r0, r0, sl
 800c35c:	fa03 f000 	lsl.w	r0, r3, r0
 800c360:	9b04      	ldr	r3, [sp, #16]
 800c362:	4303      	orrs	r3, r0
 800c364:	3401      	adds	r4, #1
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36c:	482c      	ldr	r0, [pc, #176]	; (800c420 <_vfiprintf_r+0x250>)
 800c36e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c372:	2206      	movs	r2, #6
 800c374:	f7f3 ff7c 	bl	8000270 <memchr>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d03f      	beq.n	800c3fc <_vfiprintf_r+0x22c>
 800c37c:	4b29      	ldr	r3, [pc, #164]	; (800c424 <_vfiprintf_r+0x254>)
 800c37e:	bb1b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x1f8>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	3307      	adds	r3, #7
 800c384:	f023 0307 	bic.w	r3, r3, #7
 800c388:	3308      	adds	r3, #8
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	443b      	add	r3, r7
 800c390:	9309      	str	r3, [sp, #36]	; 0x24
 800c392:	e767      	b.n	800c264 <_vfiprintf_r+0x94>
 800c394:	fb0c 3202 	mla	r2, ip, r2, r3
 800c398:	460c      	mov	r4, r1
 800c39a:	2001      	movs	r0, #1
 800c39c:	e7a5      	b.n	800c2ea <_vfiprintf_r+0x11a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9305      	str	r3, [sp, #20]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	f04f 0c0a 	mov.w	ip, #10
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b0:	3a30      	subs	r2, #48	; 0x30
 800c3b2:	2a09      	cmp	r2, #9
 800c3b4:	d903      	bls.n	800c3be <_vfiprintf_r+0x1ee>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c5      	beq.n	800c346 <_vfiprintf_r+0x176>
 800c3ba:	9105      	str	r1, [sp, #20]
 800c3bc:	e7c3      	b.n	800c346 <_vfiprintf_r+0x176>
 800c3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e7f0      	b.n	800c3aa <_vfiprintf_r+0x1da>
 800c3c8:	ab03      	add	r3, sp, #12
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4b16      	ldr	r3, [pc, #88]	; (800c428 <_vfiprintf_r+0x258>)
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7fb fa58 	bl	8007888 <_printf_float>
 800c3d8:	4607      	mov	r7, r0
 800c3da:	1c78      	adds	r0, r7, #1
 800c3dc:	d1d6      	bne.n	800c38c <_vfiprintf_r+0x1bc>
 800c3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3e0:	07d9      	lsls	r1, r3, #31
 800c3e2:	d405      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3e4:	89ab      	ldrh	r3, [r5, #12]
 800c3e6:	059a      	lsls	r2, r3, #22
 800c3e8:	d402      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ec:	f7ff fe79 	bl	800c0e2 <__retarget_lock_release_recursive>
 800c3f0:	89ab      	ldrh	r3, [r5, #12]
 800c3f2:	065b      	lsls	r3, r3, #25
 800c3f4:	f53f af12 	bmi.w	800c21c <_vfiprintf_r+0x4c>
 800c3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3fa:	e711      	b.n	800c220 <_vfiprintf_r+0x50>
 800c3fc:	ab03      	add	r3, sp, #12
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	462a      	mov	r2, r5
 800c402:	4b09      	ldr	r3, [pc, #36]	; (800c428 <_vfiprintf_r+0x258>)
 800c404:	a904      	add	r1, sp, #16
 800c406:	4630      	mov	r0, r6
 800c408:	f7fb fcca 	bl	8007da0 <_printf_i>
 800c40c:	e7e4      	b.n	800c3d8 <_vfiprintf_r+0x208>
 800c40e:	bf00      	nop
 800c410:	0800d5c4 	.word	0x0800d5c4
 800c414:	0800d5e4 	.word	0x0800d5e4
 800c418:	0800d5a4 	.word	0x0800d5a4
 800c41c:	0800d53c 	.word	0x0800d53c
 800c420:	0800d546 	.word	0x0800d546
 800c424:	08007889 	.word	0x08007889
 800c428:	0800c1ab 	.word	0x0800c1ab
 800c42c:	0800d542 	.word	0x0800d542

0800c430 <__swbuf_r>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	460e      	mov	r6, r1
 800c434:	4614      	mov	r4, r2
 800c436:	4605      	mov	r5, r0
 800c438:	b118      	cbz	r0, 800c442 <__swbuf_r+0x12>
 800c43a:	6983      	ldr	r3, [r0, #24]
 800c43c:	b90b      	cbnz	r3, 800c442 <__swbuf_r+0x12>
 800c43e:	f7ff fd9f 	bl	800bf80 <__sinit>
 800c442:	4b21      	ldr	r3, [pc, #132]	; (800c4c8 <__swbuf_r+0x98>)
 800c444:	429c      	cmp	r4, r3
 800c446:	d12b      	bne.n	800c4a0 <__swbuf_r+0x70>
 800c448:	686c      	ldr	r4, [r5, #4]
 800c44a:	69a3      	ldr	r3, [r4, #24]
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	071a      	lsls	r2, r3, #28
 800c452:	d52f      	bpl.n	800c4b4 <__swbuf_r+0x84>
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	b36b      	cbz	r3, 800c4b4 <__swbuf_r+0x84>
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	1ac0      	subs	r0, r0, r3
 800c45e:	6963      	ldr	r3, [r4, #20]
 800c460:	b2f6      	uxtb	r6, r6
 800c462:	4283      	cmp	r3, r0
 800c464:	4637      	mov	r7, r6
 800c466:	dc04      	bgt.n	800c472 <__swbuf_r+0x42>
 800c468:	4621      	mov	r1, r4
 800c46a:	4628      	mov	r0, r5
 800c46c:	f7ff fcf4 	bl	800be58 <_fflush_r>
 800c470:	bb30      	cbnz	r0, 800c4c0 <__swbuf_r+0x90>
 800c472:	68a3      	ldr	r3, [r4, #8]
 800c474:	3b01      	subs	r3, #1
 800c476:	60a3      	str	r3, [r4, #8]
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	701e      	strb	r6, [r3, #0]
 800c480:	6963      	ldr	r3, [r4, #20]
 800c482:	3001      	adds	r0, #1
 800c484:	4283      	cmp	r3, r0
 800c486:	d004      	beq.n	800c492 <__swbuf_r+0x62>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	07db      	lsls	r3, r3, #31
 800c48c:	d506      	bpl.n	800c49c <__swbuf_r+0x6c>
 800c48e:	2e0a      	cmp	r6, #10
 800c490:	d104      	bne.n	800c49c <__swbuf_r+0x6c>
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	f7ff fcdf 	bl	800be58 <_fflush_r>
 800c49a:	b988      	cbnz	r0, 800c4c0 <__swbuf_r+0x90>
 800c49c:	4638      	mov	r0, r7
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <__swbuf_r+0x9c>)
 800c4a2:	429c      	cmp	r4, r3
 800c4a4:	d101      	bne.n	800c4aa <__swbuf_r+0x7a>
 800c4a6:	68ac      	ldr	r4, [r5, #8]
 800c4a8:	e7cf      	b.n	800c44a <__swbuf_r+0x1a>
 800c4aa:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <__swbuf_r+0xa0>)
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	bf08      	it	eq
 800c4b0:	68ec      	ldreq	r4, [r5, #12]
 800c4b2:	e7ca      	b.n	800c44a <__swbuf_r+0x1a>
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f80c 	bl	800c4d4 <__swsetup_r>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d0cb      	beq.n	800c458 <__swbuf_r+0x28>
 800c4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c4c4:	e7ea      	b.n	800c49c <__swbuf_r+0x6c>
 800c4c6:	bf00      	nop
 800c4c8:	0800d5c4 	.word	0x0800d5c4
 800c4cc:	0800d5e4 	.word	0x0800d5e4
 800c4d0:	0800d5a4 	.word	0x0800d5a4

0800c4d4 <__swsetup_r>:
 800c4d4:	4b32      	ldr	r3, [pc, #200]	; (800c5a0 <__swsetup_r+0xcc>)
 800c4d6:	b570      	push	{r4, r5, r6, lr}
 800c4d8:	681d      	ldr	r5, [r3, #0]
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	b125      	cbz	r5, 800c4ea <__swsetup_r+0x16>
 800c4e0:	69ab      	ldr	r3, [r5, #24]
 800c4e2:	b913      	cbnz	r3, 800c4ea <__swsetup_r+0x16>
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f7ff fd4b 	bl	800bf80 <__sinit>
 800c4ea:	4b2e      	ldr	r3, [pc, #184]	; (800c5a4 <__swsetup_r+0xd0>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	d10f      	bne.n	800c510 <__swsetup_r+0x3c>
 800c4f0:	686c      	ldr	r4, [r5, #4]
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4f8:	0719      	lsls	r1, r3, #28
 800c4fa:	d42c      	bmi.n	800c556 <__swsetup_r+0x82>
 800c4fc:	06dd      	lsls	r5, r3, #27
 800c4fe:	d411      	bmi.n	800c524 <__swsetup_r+0x50>
 800c500:	2309      	movs	r3, #9
 800c502:	6033      	str	r3, [r6, #0]
 800c504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295
 800c50e:	e03e      	b.n	800c58e <__swsetup_r+0xba>
 800c510:	4b25      	ldr	r3, [pc, #148]	; (800c5a8 <__swsetup_r+0xd4>)
 800c512:	429c      	cmp	r4, r3
 800c514:	d101      	bne.n	800c51a <__swsetup_r+0x46>
 800c516:	68ac      	ldr	r4, [r5, #8]
 800c518:	e7eb      	b.n	800c4f2 <__swsetup_r+0x1e>
 800c51a:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <__swsetup_r+0xd8>)
 800c51c:	429c      	cmp	r4, r3
 800c51e:	bf08      	it	eq
 800c520:	68ec      	ldreq	r4, [r5, #12]
 800c522:	e7e6      	b.n	800c4f2 <__swsetup_r+0x1e>
 800c524:	0758      	lsls	r0, r3, #29
 800c526:	d512      	bpl.n	800c54e <__swsetup_r+0x7a>
 800c528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c52a:	b141      	cbz	r1, 800c53e <__swsetup_r+0x6a>
 800c52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c530:	4299      	cmp	r1, r3
 800c532:	d002      	beq.n	800c53a <__swsetup_r+0x66>
 800c534:	4630      	mov	r0, r6
 800c536:	f7fe fd9b 	bl	800b070 <_free_r>
 800c53a:	2300      	movs	r3, #0
 800c53c:	6363      	str	r3, [r4, #52]	; 0x34
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	2300      	movs	r3, #0
 800c548:	6063      	str	r3, [r4, #4]
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f043 0308 	orr.w	r3, r3, #8
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	b94b      	cbnz	r3, 800c56e <__swsetup_r+0x9a>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c564:	d003      	beq.n	800c56e <__swsetup_r+0x9a>
 800c566:	4621      	mov	r1, r4
 800c568:	4630      	mov	r0, r6
 800c56a:	f000 f84d 	bl	800c608 <__smakebuf_r>
 800c56e:	89a0      	ldrh	r0, [r4, #12]
 800c570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c574:	f010 0301 	ands.w	r3, r0, #1
 800c578:	d00a      	beq.n	800c590 <__swsetup_r+0xbc>
 800c57a:	2300      	movs	r3, #0
 800c57c:	60a3      	str	r3, [r4, #8]
 800c57e:	6963      	ldr	r3, [r4, #20]
 800c580:	425b      	negs	r3, r3
 800c582:	61a3      	str	r3, [r4, #24]
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	b943      	cbnz	r3, 800c59a <__swsetup_r+0xc6>
 800c588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c58c:	d1ba      	bne.n	800c504 <__swsetup_r+0x30>
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	0781      	lsls	r1, r0, #30
 800c592:	bf58      	it	pl
 800c594:	6963      	ldrpl	r3, [r4, #20]
 800c596:	60a3      	str	r3, [r4, #8]
 800c598:	e7f4      	b.n	800c584 <__swsetup_r+0xb0>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e7f7      	b.n	800c58e <__swsetup_r+0xba>
 800c59e:	bf00      	nop
 800c5a0:	20000098 	.word	0x20000098
 800c5a4:	0800d5c4 	.word	0x0800d5c4
 800c5a8:	0800d5e4 	.word	0x0800d5e4
 800c5ac:	0800d5a4 	.word	0x0800d5a4

0800c5b0 <abort>:
 800c5b0:	b508      	push	{r3, lr}
 800c5b2:	2006      	movs	r0, #6
 800c5b4:	f000 f898 	bl	800c6e8 <raise>
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7f6 f82f 	bl	800261c <_exit>

0800c5be <__swhatbuf_r>:
 800c5be:	b570      	push	{r4, r5, r6, lr}
 800c5c0:	460e      	mov	r6, r1
 800c5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c6:	2900      	cmp	r1, #0
 800c5c8:	b096      	sub	sp, #88	; 0x58
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	461d      	mov	r5, r3
 800c5ce:	da07      	bge.n	800c5e0 <__swhatbuf_r+0x22>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	89b3      	ldrh	r3, [r6, #12]
 800c5d6:	061a      	lsls	r2, r3, #24
 800c5d8:	d410      	bmi.n	800c5fc <__swhatbuf_r+0x3e>
 800c5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5de:	e00e      	b.n	800c5fe <__swhatbuf_r+0x40>
 800c5e0:	466a      	mov	r2, sp
 800c5e2:	f000 f89d 	bl	800c720 <_fstat_r>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	dbf2      	blt.n	800c5d0 <__swhatbuf_r+0x12>
 800c5ea:	9a01      	ldr	r2, [sp, #4]
 800c5ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5f4:	425a      	negs	r2, r3
 800c5f6:	415a      	adcs	r2, r3
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	e7ee      	b.n	800c5da <__swhatbuf_r+0x1c>
 800c5fc:	2340      	movs	r3, #64	; 0x40
 800c5fe:	2000      	movs	r0, #0
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	b016      	add	sp, #88	; 0x58
 800c604:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c608 <__smakebuf_r>:
 800c608:	898b      	ldrh	r3, [r1, #12]
 800c60a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c60c:	079d      	lsls	r5, r3, #30
 800c60e:	4606      	mov	r6, r0
 800c610:	460c      	mov	r4, r1
 800c612:	d507      	bpl.n	800c624 <__smakebuf_r+0x1c>
 800c614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	6123      	str	r3, [r4, #16]
 800c61c:	2301      	movs	r3, #1
 800c61e:	6163      	str	r3, [r4, #20]
 800c620:	b002      	add	sp, #8
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	ab01      	add	r3, sp, #4
 800c626:	466a      	mov	r2, sp
 800c628:	f7ff ffc9 	bl	800c5be <__swhatbuf_r>
 800c62c:	9900      	ldr	r1, [sp, #0]
 800c62e:	4605      	mov	r5, r0
 800c630:	4630      	mov	r0, r6
 800c632:	f7fe fd6d 	bl	800b110 <_malloc_r>
 800c636:	b948      	cbnz	r0, 800c64c <__smakebuf_r+0x44>
 800c638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63c:	059a      	lsls	r2, r3, #22
 800c63e:	d4ef      	bmi.n	800c620 <__smakebuf_r+0x18>
 800c640:	f023 0303 	bic.w	r3, r3, #3
 800c644:	f043 0302 	orr.w	r3, r3, #2
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	e7e3      	b.n	800c614 <__smakebuf_r+0xc>
 800c64c:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <__smakebuf_r+0x7c>)
 800c64e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	6020      	str	r0, [r4, #0]
 800c654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	9b00      	ldr	r3, [sp, #0]
 800c65c:	6163      	str	r3, [r4, #20]
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	6120      	str	r0, [r4, #16]
 800c662:	b15b      	cbz	r3, 800c67c <__smakebuf_r+0x74>
 800c664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c668:	4630      	mov	r0, r6
 800c66a:	f000 f86b 	bl	800c744 <_isatty_r>
 800c66e:	b128      	cbz	r0, 800c67c <__smakebuf_r+0x74>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	f023 0303 	bic.w	r3, r3, #3
 800c676:	f043 0301 	orr.w	r3, r3, #1
 800c67a:	81a3      	strh	r3, [r4, #12]
 800c67c:	89a0      	ldrh	r0, [r4, #12]
 800c67e:	4305      	orrs	r5, r0
 800c680:	81a5      	strh	r5, [r4, #12]
 800c682:	e7cd      	b.n	800c620 <__smakebuf_r+0x18>
 800c684:	0800bf19 	.word	0x0800bf19

0800c688 <_malloc_usable_size_r>:
 800c688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c68c:	1f18      	subs	r0, r3, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bfbc      	itt	lt
 800c692:	580b      	ldrlt	r3, [r1, r0]
 800c694:	18c0      	addlt	r0, r0, r3
 800c696:	4770      	bx	lr

0800c698 <_raise_r>:
 800c698:	291f      	cmp	r1, #31
 800c69a:	b538      	push	{r3, r4, r5, lr}
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	d904      	bls.n	800c6ac <_raise_r+0x14>
 800c6a2:	2316      	movs	r3, #22
 800c6a4:	6003      	str	r3, [r0, #0]
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6ae:	b112      	cbz	r2, 800c6b6 <_raise_r+0x1e>
 800c6b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6b4:	b94b      	cbnz	r3, 800c6ca <_raise_r+0x32>
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 f830 	bl	800c71c <_getpid_r>
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4601      	mov	r1, r0
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c6:	f000 b817 	b.w	800c6f8 <_kill_r>
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d00a      	beq.n	800c6e4 <_raise_r+0x4c>
 800c6ce:	1c59      	adds	r1, r3, #1
 800c6d0:	d103      	bne.n	800c6da <_raise_r+0x42>
 800c6d2:	2316      	movs	r3, #22
 800c6d4:	6003      	str	r3, [r0, #0]
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	e7e7      	b.n	800c6aa <_raise_r+0x12>
 800c6da:	2400      	movs	r4, #0
 800c6dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	4798      	blx	r3
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e7e0      	b.n	800c6aa <_raise_r+0x12>

0800c6e8 <raise>:
 800c6e8:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <raise+0xc>)
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f7ff bfd3 	b.w	800c698 <_raise_r>
 800c6f2:	bf00      	nop
 800c6f4:	20000098 	.word	0x20000098

0800c6f8 <_kill_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4d07      	ldr	r5, [pc, #28]	; (800c718 <_kill_r+0x20>)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4604      	mov	r4, r0
 800c700:	4608      	mov	r0, r1
 800c702:	4611      	mov	r1, r2
 800c704:	602b      	str	r3, [r5, #0]
 800c706:	f7f5 ff79 	bl	80025fc <_kill>
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	d102      	bne.n	800c714 <_kill_r+0x1c>
 800c70e:	682b      	ldr	r3, [r5, #0]
 800c710:	b103      	cbz	r3, 800c714 <_kill_r+0x1c>
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	bd38      	pop	{r3, r4, r5, pc}
 800c716:	bf00      	nop
 800c718:	200186e0 	.word	0x200186e0

0800c71c <_getpid_r>:
 800c71c:	f7f5 bf66 	b.w	80025ec <_getpid>

0800c720 <_fstat_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d07      	ldr	r5, [pc, #28]	; (800c740 <_fstat_r+0x20>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f5 ffc4 	bl	80026ba <_fstat>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d102      	bne.n	800c73c <_fstat_r+0x1c>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b103      	cbz	r3, 800c73c <_fstat_r+0x1c>
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	200186e0 	.word	0x200186e0

0800c744 <_isatty_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d06      	ldr	r5, [pc, #24]	; (800c760 <_isatty_r+0x1c>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f5 ffc3 	bl	80026da <_isatty>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_isatty_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_isatty_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	200186e0 	.word	0x200186e0

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
