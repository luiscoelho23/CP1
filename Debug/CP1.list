
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e774  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  0800e978  0800e978  0001e978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbbc  0800fbbc  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbbc  0800fbbc  0001fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbc4  0800fbc4  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800fbcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000185bc  200002fc  0800fec8  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200188b8  0800fec8  000288b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002037c  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000406a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00043fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00045380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7b1  00000000  00000000  000465e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019581  00000000  00000000  00071d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001043ec  00000000  00000000  0008b31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006798  00000000  00000000  0018f75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002fc 	.word	0x200002fc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e95c 	.word	0x0800e95c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000300 	.word	0x20000300
 800023c:	0800e95c 	.word	0x0800e95c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC3_Init1>:
bool Read;
uint32_t adc_value;
bool run = 0;

void MX_ADC3_Init1(bool software1)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  software = software1;
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_ADC3_Init1+0xc0>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a40:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]

  if(software)
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ADC3_Init1+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <MX_ADC3_Init1+0x7e>
	  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_ADC3_Init1+0xc4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28


  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a70:	f003 fdda 	bl	8004628 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC3_Init1+0x8e>
  {
    Error_Handler();
 8000a7a:	f002 fb25 	bl	80030c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC3_Init1+0xbc>)
 8000a92:	f004 f855 	bl	8004b40 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC3_Init1+0xb0>
  {
    Error_Handler();
 8000a9c:	f002 fb14 	bl	80030c8 <Error_Handler>
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000451 	.word	0x20000451
 8000aac:	20010458 	.word	0x20010458
 8000ab0:	40012200 	.word	0x40012200
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_ADC3_Init+0xa0>)
 8000ace:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000afa:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b1c:	f003 fd84 	bl	8004628 <HAL_ADC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000b26:	f002 facf 	bl	80030c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC3_Init+0x9c>)
 8000b3c:	f004 f800 	bl	8004b40 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000b46:	f002 fabf 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20010458 	.word	0x20010458
 8000b58:	40012200 	.word	0x40012200

08000b5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d15c      	bne.n	8000c38 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000bde:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000be2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0xec>)
 8000bf4:	f004 fcbc 	bl	8005570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_ADC_MspInit+0xf0>)
 8000c0c:	f004 fcb0 	bl	8005570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c10:	230f      	movs	r3, #15
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xf4>)
 8000c24:	f004 fca4 	bl	8005570 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f004 fae0 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c32:	2012      	movs	r0, #18
 8000c34:	f004 faf9 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40012200 	.word	0x40012200
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <config_ADC+0x38>)
 8000c7e:	f003 ff5f 	bl	8004b40 <HAL_ADC_ConfigChannel>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20010458 	.word	0x20010458

08000c90 <read_ADC>:

uint32_t read_ADC(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	Read = false;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <read_ADC+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_IT(&hadc3) == HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <read_ADC+0x38>)
 8000c9c:	f003 fd08 	bl	80046b0 <HAL_ADC_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <read_ADC+0x2c>
	{
	  while(!Read);
 8000ca6:	bf00      	nop
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <read_ADC+0x34>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f8      	bne.n	8000ca8 <read_ADC+0x18>
	  HAL_ADC_Stop_IT(&hadc3);
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <read_ADC+0x38>)
 8000cb8:	f003 fdd2 	bl	8004860 <HAL_ADC_Stop_IT>
	}
	return adc_value;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <read_ADC+0x3c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000450 	.word	0x20000450
 8000cc8:	20010458 	.word	0x20010458
 8000ccc:	20010454 	.word	0x20010454

08000cd0 <reset_adc_buf>:

void reset_adc_buf(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < ADC_BUF_SIZE - 1 ; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e007      	b.n	8000cec <reset_adc_buf+0x1c>
		adc_buf[i] = 0;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <reset_adc_buf+0x38>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < ADC_BUF_SIZE - 1 ; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	ddf2      	ble.n	8000cdc <reset_adc_buf+0xc>

	adc_buf_index = 0;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <reset_adc_buf+0x3c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200105a8 	.word	0x200105a8
 8000d0c:	20000318 	.word	0x20000318

08000d10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	adc_it[software]();
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_ADC_ConvCpltCallback+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_ADC_ConvCpltCallback+0x24>)
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	4798      	blx	r3
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000451 	.word	0x20000451
 8000d34:	20000000 	.word	0x20000000

08000d38 <software_adc_it>:
void (*adc_it[])() = {
	timer_adc_it,
	software_adc_it
};

void software_adc_it(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

	adc_value = HAL_ADC_GetValue(&hadc3);
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <software_adc_it+0x1c>)
 8000d3e:	f003 fedd 	bl	8004afc <HAL_ADC_GetValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <software_adc_it+0x20>)
 8000d46:	6013      	str	r3, [r2, #0]
	Read = true;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <software_adc_it+0x24>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20010458 	.word	0x20010458
 8000d58:	20010454 	.word	0x20010454
 8000d5c:	20000450 	.word	0x20000450

08000d60 <timer_adc_it>:

void timer_adc_it(){
 8000d60:	b598      	push	{r3, r4, r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	adc_buf[adc_buf_index] = HAL_ADC_GetValue(&hadc3);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <timer_adc_it+0x3c>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <timer_adc_it+0x40>)
 8000d6a:	f003 fec7 	bl	8004afc <HAL_ADC_GetValue>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <timer_adc_it+0x44>)
 8000d72:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	process_buf(adc_buf, adc_buf_index);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <timer_adc_it+0x3c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <timer_adc_it+0x44>)
 8000d7e:	f001 fe8b 	bl	8002a98 <process_buf>
	adc_buf_index++;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <timer_adc_it+0x3c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <timer_adc_it+0x3c>)
 8000d8a:	6013      	str	r3, [r2, #0]
	adc_buf_index &= ADC_BUF_SIZE - 1;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <timer_adc_it+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	4a01      	ldr	r2, [pc, #4]	; (8000d9c <timer_adc_it+0x3c>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	bd98      	pop	{r3, r4, r7, pc}
 8000d9c:	20000318 	.word	0x20000318
 8000da0:	20010458 	.word	0x20010458
 8000da4:	200105a8 	.word	0x200105a8

08000da8 <check_command>:

#define RECOVERY_TIME_MS 10


unsigned char check_command(char* message)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "VER", 3)))
 8000db4:	2203      	movs	r2, #3
 8000db6:	49a0      	ldr	r1, [pc, #640]	; (8001038 <check_command+0x290>)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f009 fd0a 	bl	800a7d2 <strncmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <check_command+0x22>
        cmd = VER;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e130      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "FNF", 3)))
 8000dca:	2203      	movs	r2, #3
 8000dcc:	499b      	ldr	r1, [pc, #620]	; (800103c <check_command+0x294>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f009 fcff 	bl	800a7d2 <strncmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <check_command+0x38>
        cmd = FNF;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e125      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "FFF", 3)))
 8000de0:	2203      	movs	r2, #3
 8000de2:	4997      	ldr	r1, [pc, #604]	; (8001040 <check_command+0x298>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f009 fcf4 	bl	800a7d2 <strncmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <check_command+0x4e>
        cmd = FFF;
 8000df0:	2311      	movs	r3, #17
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e11a      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "FNI", 3)))
 8000df6:	2203      	movs	r2, #3
 8000df8:	4992      	ldr	r1, [pc, #584]	; (8001044 <check_command+0x29c>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f009 fce9 	bl	800a7d2 <strncmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <check_command+0x64>
        cmd = FNI;
 8000e06:	230e      	movs	r3, #14
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e10f      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "FFI", 3)))
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	498e      	ldr	r1, [pc, #568]	; (8001048 <check_command+0x2a0>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f009 fcde 	bl	800a7d2 <strncmp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <check_command+0x7a>
        cmd = FFI;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e104      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "STW", 3)))
 8000e22:	2203      	movs	r2, #3
 8000e24:	4989      	ldr	r1, [pc, #548]	; (800104c <check_command+0x2a4>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f009 fcd3 	bl	800a7d2 <strncmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <check_command+0x90>
		cmd = STW;
 8000e32:	231d      	movs	r3, #29
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e0f9      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "FSW", 3)))
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4985      	ldr	r1, [pc, #532]	; (8001050 <check_command+0x2a8>)
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f009 fcc8 	bl	800a7d2 <strncmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <check_command+0xa6>
		cmd = FSW;
 8000e48:	231b      	movs	r3, #27
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e0ee      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "ST", 2)))
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4980      	ldr	r1, [pc, #512]	; (8001054 <check_command+0x2ac>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f009 fcbd 	bl	800a7d2 <strncmp>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <check_command+0xbc>
        cmd = ST;
 8000e5e:	2313      	movs	r3, #19
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e0e3      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "MR", 2)))
 8000e64:	2202      	movs	r2, #2
 8000e66:	497c      	ldr	r1, [pc, #496]	; (8001058 <check_command+0x2b0>)
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f009 fcb2 	bl	800a7d2 <strncmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <check_command+0xd2>
        cmd = FFI;
 8000e74:	230f      	movs	r3, #15
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e0d8      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "MW", 2)))
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4977      	ldr	r1, [pc, #476]	; (800105c <check_command+0x2b4>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f009 fca7 	bl	800a7d2 <strncmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <check_command+0xe8>
        cmd = MW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e0cd      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "MI", 2)))
 8000e90:	2202      	movs	r2, #2
 8000e92:	4973      	ldr	r1, [pc, #460]	; (8001060 <check_command+0x2b8>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f009 fc9c 	bl	800a7d2 <strncmp>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <check_command+0xfe>
        cmd = MI;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e0c2      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "MO", 2)))
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	496e      	ldr	r1, [pc, #440]	; (8001064 <check_command+0x2bc>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f009 fc91 	bl	800a7d2 <strncmp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <check_command+0x114>
        cmd = MO;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e0b7      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "RD", 2)))
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	496a      	ldr	r1, [pc, #424]	; (8001068 <check_command+0x2c0>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f009 fc86 	bl	800a7d2 <strncmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <check_command+0x12a>
        cmd = RD;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e0ac      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "WD", 2)))
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4965      	ldr	r1, [pc, #404]	; (800106c <check_command+0x2c4>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f009 fc7b 	bl	800a7d2 <strncmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <check_command+0x140>
        cmd = WD;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e0a1      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "RA", 2)))
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4961      	ldr	r1, [pc, #388]	; (8001070 <check_command+0x2c8>)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f009 fc70 	bl	800a7d2 <strncmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <check_command+0x156>
        cmd = RA;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e096      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "WA", 2)))
 8000efe:	2202      	movs	r2, #2
 8000f00:	495c      	ldr	r1, [pc, #368]	; (8001074 <check_command+0x2cc>)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f009 fc65 	bl	800a7d2 <strncmp>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <check_command+0x16c>
        cmd = WA;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e08b      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "SP", 2)))
 8000f14:	2202      	movs	r2, #2
 8000f16:	4958      	ldr	r1, [pc, #352]	; (8001078 <check_command+0x2d0>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f009 fc5a 	bl	800a7d2 <strncmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <check_command+0x182>
        cmd = SP;
 8000f24:	230c      	movs	r3, #12
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e080      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "AC", 2)))
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4953      	ldr	r1, [pc, #332]	; (800107c <check_command+0x2d4>)
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f009 fc4f 	bl	800a7d2 <strncmp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <check_command+0x198>
        cmd = AC;
 8000f3a:	230d      	movs	r3, #13
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e075      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "UN", 2)))
 8000f40:	2202      	movs	r2, #2
 8000f42:	494f      	ldr	r1, [pc, #316]	; (8001080 <check_command+0x2d8>)
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f009 fc44 	bl	800a7d2 <strncmp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <check_command+0x1ae>
        cmd = UN;
 8000f50:	2316      	movs	r3, #22
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e06a      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "EN", 2)))
 8000f56:	2202      	movs	r2, #2
 8000f58:	494a      	ldr	r1, [pc, #296]	; (8001084 <check_command+0x2dc>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f009 fc39 	bl	800a7d2 <strncmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <check_command+0x1c4>
        cmd = EN;
 8000f66:	2315      	movs	r3, #21
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e05f      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "CS", 2)))
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4946      	ldr	r1, [pc, #280]	; (8001088 <check_command+0x2e0>)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f009 fc2e 	bl	800a7d2 <strncmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <check_command+0x1da>
        cmd = CS;
 8000f7c:	2314      	movs	r3, #20
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e054      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "VR", 2)))
 8000f82:	2202      	movs	r2, #2
 8000f84:	4941      	ldr	r1, [pc, #260]	; (800108c <check_command+0x2e4>)
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f009 fc23 	bl	800a7d2 <strncmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <check_command+0x1f0>
        cmd = VR;
 8000f92:	2317      	movs	r3, #23
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e049      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "HW", 2)))
 8000f98:	2202      	movs	r2, #2
 8000f9a:	493d      	ldr	r1, [pc, #244]	; (8001090 <check_command+0x2e8>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f009 fc18 	bl	800a7d2 <strncmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <check_command+0x206>
		cmd = HW;
 8000fa8:	231a      	movs	r3, #26
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e03e      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "SW", 2)))
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4938      	ldr	r1, [pc, #224]	; (8001094 <check_command+0x2ec>)
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f009 fc0d 	bl	800a7d2 <strncmp>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <check_command+0x21c>
		cmd = SW;
 8000fbe:	231c      	movs	r3, #28
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e033      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "$", 1)))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <check_command+0x2f0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <check_command+0x230>
        cmd = LAST;
 8000fd2:	2309      	movs	r3, #9
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e029      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "?", 1)))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <check_command+0x2f4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <check_command+0x244>
        cmd = HELP;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e01f      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "S", 1)))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <check_command+0x2f8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <check_command+0x258>
        cmd = S;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e015      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "/", 1)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <check_command+0x2fc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <check_command+0x26c>
		cmd = INC;
 800100e:	2318      	movs	r3, #24
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00b      	b.n	800102c <check_command+0x284>
    else if((!strncmp((char*) message, "\\", 1)))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <check_command+0x300>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <check_command+0x280>
		cmd = DEC;
 8001022:	2319      	movs	r3, #25
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e001      	b.n	800102c <check_command+0x284>
    else
    	cmd = INV;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

    return cmd;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	0800e978 	.word	0x0800e978
 800103c:	0800e97c 	.word	0x0800e97c
 8001040:	0800e980 	.word	0x0800e980
 8001044:	0800e984 	.word	0x0800e984
 8001048:	0800e988 	.word	0x0800e988
 800104c:	0800e98c 	.word	0x0800e98c
 8001050:	0800e990 	.word	0x0800e990
 8001054:	0800e994 	.word	0x0800e994
 8001058:	0800e998 	.word	0x0800e998
 800105c:	0800e99c 	.word	0x0800e99c
 8001060:	0800e9a0 	.word	0x0800e9a0
 8001064:	0800e9a4 	.word	0x0800e9a4
 8001068:	0800e9a8 	.word	0x0800e9a8
 800106c:	0800e9ac 	.word	0x0800e9ac
 8001070:	0800e9b0 	.word	0x0800e9b0
 8001074:	0800e9b4 	.word	0x0800e9b4
 8001078:	0800e9b8 	.word	0x0800e9b8
 800107c:	0800e9bc 	.word	0x0800e9bc
 8001080:	0800e9c0 	.word	0x0800e9c0
 8001084:	0800e9c4 	.word	0x0800e9c4
 8001088:	0800e9c8 	.word	0x0800e9c8
 800108c:	0800e9cc 	.word	0x0800e9cc
 8001090:	0800e9d0 	.word	0x0800e9d0
 8001094:	0800e9d4 	.word	0x0800e9d4
 8001098:	0800e9d8 	.word	0x0800e9d8
 800109c:	0800e9dc 	.word	0x0800e9dc
 80010a0:	0800e9e0 	.word	0x0800e9e0
 80010a4:	0800e9e4 	.word	0x0800e9e4
 80010a8:	0800e9e8 	.word	0x0800e9e8

080010ac <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <proc_inv_cmd+0x18>)
 80010b6:	f003 f92f 	bl	8004318 <send_UART>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800e9ec 	.word	0x0800e9ec

080010c8 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	f107 0210 	add.w	r2, r7, #16
 80010d8:	4932      	ldr	r1, [pc, #200]	; (80011a4 <proc_mr_cmd+0xdc>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f009 fb00 	bl	800a6e0 <siscanf>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d157      	bne.n	8001196 <proc_mr_cmd+0xce>
	{
 80010e6:	466b      	mov	r3, sp
 80010e8:	461d      	mov	r5, r3
		char data[length];
 80010ea:	68fc      	ldr	r4, [r7, #12]
 80010ec:	4623      	mov	r3, r4
 80010ee:	3b01      	subs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	4620      	mov	r0, r4
 80010f4:	f04f 0100 	mov.w	r1, #0
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	00cb      	lsls	r3, r1, #3
 8001102:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001106:	00c2      	lsls	r2, r0, #3
 8001108:	4620      	mov	r0, r4
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	00cb      	lsls	r3, r1, #3
 8001118:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800111c:	00c2      	lsls	r2, r0, #3
 800111e:	1de3      	adds	r3, r4, #7
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	ebad 0d03 	sub.w	sp, sp, r3
 8001128:	466b      	mov	r3, sp
 800112a:	3300      	adds	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	68f9      	ldr	r1, [r7, #12]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f989 	bl	800244c <memory_read>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d025      	beq.n	800118c <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4818      	ldr	r0, [pc, #96]	; (80011a8 <proc_mr_cmd+0xe0>)
 8001148:	f009 fb55 	bl	800a7f6 <strncpy>

			sprintf((char*) message, "Memory read: ");
 800114c:	4917      	ldr	r1, [pc, #92]	; (80011ac <proc_mr_cmd+0xe4>)
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f009 faa6 	bl	800a6a0 <siprintf>

			for(int i = 0; i < length; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e010      	b.n	800117c <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f87a 	bl	8000254 <strlen>
 8001160:	4602      	mov	r2, r0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1898      	adds	r0, r3, r2
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	490f      	ldr	r1, [pc, #60]	; (80011b0 <proc_mr_cmd+0xe8>)
 8001172:	f009 fa95 	bl	800a6a0 <siprintf>
			for(int i = 0; i < length; i++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3ea      	bcc.n	800115a <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f003 f8c7 	bl	8004318 <send_UART>
 800118a:	e002      	b.n	8001192 <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <proc_mr_cmd+0xec>)
 800118e:	f003 f8c3 	bl	8004318 <send_UART>
 8001192:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 8001194:	e002      	b.n	800119c <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <proc_mr_cmd+0xf0>)
 8001198:	f003 f8be 	bl	8004318 <send_UART>
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	0800ea14 	.word	0x0800ea14
 80011a8:	200145a8 	.word	0x200145a8
 80011ac:	0800ea20 	.word	0x0800ea20
 80011b0:	0800ea30 	.word	0x0800ea30
 80011b4:	0800ea38 	.word	0x0800ea38
 80011b8:	0800ea6c 	.word	0x0800ea6c

080011bc <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 80011c4:	f107 0110 	add.w	r1, r7, #16
 80011c8:	f107 0214 	add.w	r2, r7, #20
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	460b      	mov	r3, r1
 80011d4:	4912      	ldr	r1, [pc, #72]	; (8001220 <proc_mw_cmd+0x64>)
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f009 fa82 	bl	800a6e0 <siscanf>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d116      	bne.n	8001210 <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f963 	bl	80024b4 <memory_write>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80011f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <proc_mw_cmd+0x68>)
 80011fc:	f009 fafb 	bl	800a7f6 <strncpy>
			send_UART("Memory written with success.");
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <proc_mw_cmd+0x6c>)
 8001202:	f003 f889 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8001206:	e006      	b.n	8001216 <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <proc_mw_cmd+0x70>)
 800120a:	f003 f885 	bl	8004318 <send_UART>
}
 800120e:	e002      	b.n	8001216 <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <proc_mw_cmd+0x74>)
 8001212:	f003 f881 	bl	8004318 <send_UART>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800ea94 	.word	0x0800ea94
 8001224:	200145a8 	.word	0x200145a8
 8001228:	0800eaa0 	.word	0x0800eaa0
 800122c:	0800eac0 	.word	0x0800eac0
 8001230:	0800eaf4 	.word	0x0800eaf4

08001234 <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	4918      	ldr	r1, [pc, #96]	; (80012a8 <proc_mi_cmd+0x74>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f009 fa4a 	bl	800a6e0 <siscanf>
 800124c:	4603      	mov	r3, r0
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fdaf 	bl	8002dbc <is_GPIO_pin_free>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d016      	beq.n	8001292 <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f95a 	bl	8002524 <make_pin_input>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <proc_mi_cmd+0x78>)
 800127e:	f009 faba 	bl	800a7f6 <strncpy>
				send_UART("Pin(s) set as input with success.");
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <proc_mi_cmd+0x7c>)
 8001284:	f003 f848 	bl	8004318 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 8001288:	e00a      	b.n	80012a0 <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <proc_mi_cmd+0x80>)
 800128c:	f003 f844 	bl	8004318 <send_UART>
}
 8001290:	e006      	b.n	80012a0 <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <proc_mi_cmd+0x84>)
 8001294:	f003 f840 	bl	8004318 <send_UART>
}
 8001298:	e002      	b.n	80012a0 <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <proc_mi_cmd+0x88>)
 800129c:	f003 f83c 	bl	8004318 <send_UART>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800eb20 	.word	0x0800eb20
 80012ac:	200145a8 	.word	0x200145a8
 80012b0:	0800eb2c 	.word	0x0800eb2c
 80012b4:	0800eb50 	.word	0x0800eb50
 80012b8:	0800eb84 	.word	0x0800eb84
 80012bc:	0800ebbc 	.word	0x0800ebbc

080012c0 <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	f107 020c 	add.w	r2, r7, #12
 80012d0:	4918      	ldr	r1, [pc, #96]	; (8001334 <proc_mo_cmd+0x74>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f009 fa04 	bl	800a6e0 <siscanf>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d123      	bne.n	8001326 <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fd69 	bl	8002dbc <is_GPIO_pin_free>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d016      	beq.n	800131e <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f9b0 	bl	800265c <make_pin_output>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <proc_mo_cmd+0x78>)
 800130a:	f009 fa74 	bl	800a7f6 <strncpy>
				send_UART("Pin(s) set as output with success.");
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <proc_mo_cmd+0x7c>)
 8001310:	f003 f802 	bl	8004318 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8001314:	e00a      	b.n	800132c <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8001316:	480a      	ldr	r0, [pc, #40]	; (8001340 <proc_mo_cmd+0x80>)
 8001318:	f002 fffe 	bl	8004318 <send_UART>
}
 800131c:	e006      	b.n	800132c <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <proc_mo_cmd+0x84>)
 8001320:	f002 fffa 	bl	8004318 <send_UART>
}
 8001324:	e002      	b.n	800132c <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <proc_mo_cmd+0x88>)
 8001328:	f002 fff6 	bl	8004318 <send_UART>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0800ebe8 	.word	0x0800ebe8
 8001338:	200145a8 	.word	0x200145a8
 800133c:	0800ebf4 	.word	0x0800ebf4
 8001340:	0800ec18 	.word	0x0800ec18
 8001344:	0800eb84 	.word	0x0800eb84
 8001348:	0800ec50 	.word	0x0800ec50

0800134c <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	f107 0220 	add.w	r2, r7, #32
 800135c:	492a      	ldr	r1, [pc, #168]	; (8001408 <proc_rd_cmd+0xbc>)
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f009 f9be 	bl	800a6e0 <siscanf>
 8001364:	4603      	mov	r3, r0
 8001366:	2b02      	cmp	r3, #2
 8001368:	d147      	bne.n	80013fa <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	69f9      	ldr	r1, [r7, #28]
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fa10 	bl	8002798 <read_dig_input>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d039      	beq.n	80013f2 <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800137e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <proc_rd_cmd+0xc0>)
 8001386:	f009 fa36 	bl	800a7f6 <strncpy>

			sprintf((char*) message, "Digital input read: ");
 800138a:	4921      	ldr	r1, [pc, #132]	; (8001410 <proc_rd_cmd+0xc4>)
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f009 f987 	bl	800a6a0 <siprintf>

			for(int i = 15; i >= 0; i--)
 8001392:	230f      	movs	r3, #15
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	e025      	b.n	80013e4 <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7fe ff5b 	bl	8000254 <strlen>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1898      	adds	r0, r3, r2
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4918      	ldr	r1, [pc, #96]	; (8001414 <proc_rd_cmd+0xc8>)
 80013b2:	f009 f975 	bl	800a6a0 <siprintf>

				if(!(i % 4) && i)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10e      	bne.n	80013de <proc_rd_cmd+0x92>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7fe ff44 	bl	8000254 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	4910      	ldr	r1, [pc, #64]	; (8001418 <proc_rd_cmd+0xcc>)
 80013d6:	461a      	mov	r2, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3b01      	subs	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	dad6      	bge.n	8001398 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f002 ff94 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 80013f0:	e006      	b.n	8001400 <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <proc_rd_cmd+0xd0>)
 80013f4:	f002 ff90 	bl	8004318 <send_UART>
}
 80013f8:	e002      	b.n	8001400 <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <proc_rd_cmd+0xd4>)
 80013fc:	f002 ff8c 	bl	8004318 <send_UART>
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800ec7c 	.word	0x0800ec7c
 800140c:	200145a8 	.word	0x200145a8
 8001410:	0800ec88 	.word	0x0800ec88
 8001414:	0800eca0 	.word	0x0800eca0
 8001418:	0800eca4 	.word	0x0800eca4
 800141c:	0800eca8 	.word	0x0800eca8
 8001420:	0800ece0 	.word	0x0800ece0

08001424 <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 800142c:	f107 0110 	add.w	r1, r7, #16
 8001430:	f107 0214 	add.w	r2, r7, #20
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	460b      	mov	r3, r1
 800143c:	4918      	ldr	r1, [pc, #96]	; (80014a0 <proc_wd_cmd+0x7c>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f009 f94e 	bl	800a6e0 <siscanf>
 8001444:	4603      	mov	r3, r0
 8001446:	2b03      	cmp	r3, #3
 8001448:	d123      	bne.n	8001492 <proc_wd_cmd+0x6e>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fcb3 	bl	8002dbc <is_GPIO_pin_free>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d016      	beq.n	800148a <proc_wd_cmd+0x66>
		{
			if(write_dig_output(port_addr, pin_setting, pin_values))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f001 f9e2 	bl	800282c <write_dig_output>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <proc_wd_cmd+0x5e>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800146e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <proc_wd_cmd+0x80>)
 8001476:	f009 f9be 	bl	800a7f6 <strncpy>
				send_UART("Digital output value wrote with success.");
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <proc_wd_cmd+0x84>)
 800147c:	f002 ff4c 	bl	8004318 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 8001480:	e00a      	b.n	8001498 <proc_wd_cmd+0x74>
				send_UART("Invalid Write Digital Output instruction argument values.");
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <proc_wd_cmd+0x88>)
 8001484:	f002 ff48 	bl	8004318 <send_UART>
}
 8001488:	e006      	b.n	8001498 <proc_wd_cmd+0x74>
			send_UART("At least one inputted pin is reserved to peripherals.");
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <proc_wd_cmd+0x8c>)
 800148c:	f002 ff44 	bl	8004318 <send_UART>
}
 8001490:	e002      	b.n	8001498 <proc_wd_cmd+0x74>
		send_UART("Invalid Write Digital Output instruction syntax.");
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <proc_wd_cmd+0x90>)
 8001494:	f002 ff40 	bl	8004318 <send_UART>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0800ed10 	.word	0x0800ed10
 80014a4:	200145a8 	.word	0x200145a8
 80014a8:	0800ed1c 	.word	0x0800ed1c
 80014ac:	0800ed48 	.word	0x0800ed48
 80014b0:	0800eb84 	.word	0x0800eb84
 80014b4:	0800ed84 	.word	0x0800ed84

080014b8 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	461a      	mov	r2, r3
 80014c6:	492c      	ldr	r1, [pc, #176]	; (8001578 <proc_ra_cmd+0xc0>)
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f009 f909 	bl	800a6e0 <siscanf>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d13f      	bne.n	8001554 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f107 020c 	add.w	r2, r7, #12
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f9ef 	bl	80028c0 <analog_read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d031      	beq.n	800154c <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4823      	ldr	r0, [pc, #140]	; (800157c <proc_ra_cmd+0xc4>)
 80014f0:	f009 f981 	bl	800a7f6 <strncpy>

			float volts = (float) value * 3.3 / 4095;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001502:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001568 <proc_ra_cmd+0xb0>
 8001506:	ee27 6b06 	vmul.f64	d6, d7, d6
 800150a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001570 <proc_ra_cmd+0xb8>
 800150e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001512:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001516:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800151a:	4919      	ldr	r1, [pc, #100]	; (8001580 <proc_ra_cmd+0xc8>)
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f009 f8bf 	bl	800a6a0 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe fe96 	bl	8000254 <strlen>
 8001528:	4602      	mov	r2, r0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	edd7 7a05 	vldr	s15, [r7, #20]
 8001534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001538:	ed8d 7b00 	vstr	d7, [sp]
 800153c:	4911      	ldr	r1, [pc, #68]	; (8001584 <proc_ra_cmd+0xcc>)
 800153e:	4618      	mov	r0, r3
 8001540:	f009 f8ae 	bl	800a6a0 <siprintf>

			send_UART((char*) message);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f002 fee7 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 800154a:	e006      	b.n	800155a <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <proc_ra_cmd+0xd0>)
 800154e:	f002 fee3 	bl	8004318 <send_UART>
}
 8001552:	e002      	b.n	800155a <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <proc_ra_cmd+0xd4>)
 8001556:	f002 fedf 	bl	8004318 <send_UART>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	66666666 	.word	0x66666666
 800156c:	400a6666 	.word	0x400a6666
 8001570:	00000000 	.word	0x00000000
 8001574:	40affe00 	.word	0x40affe00
 8001578:	0800edb8 	.word	0x0800edb8
 800157c:	200145a8 	.word	0x200145a8
 8001580:	0800edc0 	.word	0x0800edc0
 8001584:	0800eddc 	.word	0x0800eddc
 8001588:	0800ede8 	.word	0x0800ede8
 800158c:	0800ee1c 	.word	0x0800ee1c

08001590 <proc_wa_cmd>:

void proc_wa_cmd(char* message)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    unsigned int addr3, volts;

    if(sscanf((char*) message, "WA %x %d", &addr3, &volts) == 2)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	f107 0210 	add.w	r2, r7, #16
 80015a0:	491f      	ldr	r1, [pc, #124]	; (8001620 <proc_wa_cmd+0x90>)
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f009 f89c 	bl	800a6e0 <siscanf>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d12d      	bne.n	800160a <proc_wa_cmd+0x7a>
    {
    	float value = (float) volts * 4095 / 3.3;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001624 <proc_wa_cmd+0x94>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015c4:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001618 <proc_wa_cmd+0x88>
 80015c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015d0:	edc7 7a05 	vstr	s15, [r7, #20]

        if(analog_write(addr3, value))
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015de:	ee17 1a90 	vmov	r1, s15
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f986 	bl	80028f4 <analog_write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <proc_wa_cmd+0x72>
        {
            strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <proc_wa_cmd+0x98>)
 80015f6:	f009 f8fe 	bl	800a7f6 <strncpy>
            send_UART("Analog value wrote with success.");
 80015fa:	480c      	ldr	r0, [pc, #48]	; (800162c <proc_wa_cmd+0x9c>)
 80015fc:	f002 fe8c 	bl	8004318 <send_UART>
        else
            send_UART("Invalid Analog Write instruction argument values.");
    }
    else
        send_UART("Invalid Analog Write instruction syntax.");
}
 8001600:	e006      	b.n	8001610 <proc_wa_cmd+0x80>
            send_UART("Invalid Analog Write instruction argument values.");
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <proc_wa_cmd+0xa0>)
 8001604:	f002 fe88 	bl	8004318 <send_UART>
}
 8001608:	e002      	b.n	8001610 <proc_wa_cmd+0x80>
        send_UART("Invalid Analog Write instruction syntax.");
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <proc_wa_cmd+0xa4>)
 800160c:	f002 fe84 	bl	8004318 <send_UART>
}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	66666666 	.word	0x66666666
 800161c:	400a6666 	.word	0x400a6666
 8001620:	0800ee44 	.word	0x0800ee44
 8001624:	457ff000 	.word	0x457ff000
 8001628:	200145a8 	.word	0x200145a8
 800162c:	0800ee50 	.word	0x0800ee50
 8001630:	0800ee74 	.word	0x0800ee74
 8001634:	0800eea8 	.word	0x0800eea8

08001638 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0c4      	sub	sp, #272	; 0x110
 800163c:	af00      	add	r7, sp, #0
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b0d      	cmp	r3, #13
 800164c:	d12a      	bne.n	80016a4 <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001654:	e010      	b.n	8001678 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <proc_last_cmd+0x7c>)
 8001658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800165c:	4413      	add	r3, r2
 800165e:	7819      	ldrb	r1, [r3, #0]
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 800166e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001672:	3301      	adds	r3, #1
 8001674:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800167c:	2bff      	cmp	r3, #255	; 0xff
 800167e:	ddea      	ble.n	8001656 <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb8f 	bl	8000da8 <check_command>
 800168a:	4603      	mov	r3, r0
 800168c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 8001690:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <proc_last_cmd+0x80>)
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	4610      	mov	r0, r2
 80016a0:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 80016a2:	e002      	b.n	80016aa <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <proc_last_cmd+0x84>)
 80016a6:	f002 fe37 	bl	8004318 <send_UART>
}
 80016aa:	bf00      	nop
 80016ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200145a8 	.word	0x200145a8
 80016b8:	20000008 	.word	0x20000008
 80016bc:	0800eed4 	.word	0x0800eed4

080016c0 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b0d      	cmp	r3, #13
 80016d0:	d109      	bne.n	80016e6 <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80016d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4806      	ldr	r0, [pc, #24]	; (80016f4 <proc_help_cmd+0x34>)
 80016da:	f009 f88c 	bl	800a7f6 <strncpy>

		send_UART("MR <addr> <length>\n\r"
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <proc_help_cmd+0x38>)
 80016e0:	f002 fe1a 	bl	8004318 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 80016e4:	e002      	b.n	80016ec <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <proc_help_cmd+0x3c>)
 80016e8:	f002 fe16 	bl	8004318 <send_UART>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200145a8 	.word	0x200145a8
 80016f8:	0800eef4 	.word	0x0800eef4
 80016fc:	0800efb0 	.word	0x0800efb0

08001700 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3303      	adds	r3, #3
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b0d      	cmp	r3, #13
 8001710:	d113      	bne.n	800173a <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <proc_ver_cmd+0x48>)
 800171a:	f009 f86c 	bl	800a7f6 <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <proc_ver_cmd+0x4c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	4909      	ldr	r1, [pc, #36]	; (800174c <proc_ver_cmd+0x4c>)
 8001726:	600a      	str	r2, [r1, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4909      	ldr	r1, [pc, #36]	; (8001750 <proc_ver_cmd+0x50>)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f008 ffb7 	bl	800a6a0 <siprintf>
		send_UART((char*) message);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f002 fdf0 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001738:	e002      	b.n	8001740 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <proc_ver_cmd+0x54>)
 800173c:	f002 fdec 	bl	8004318 <send_UART>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200145a8 	.word	0x200145a8
 800174c:	2000032c 	.word	0x2000032c
 8001750:	0800efd0 	.word	0x0800efd0
 8001754:	0800f004 	.word	0x0800f004

08001758 <proc_sp_cmd>:

void proc_sp_cmd(char* message)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "SP %s %d", timeunit, &unit) == 2)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	491f      	ldr	r1, [pc, #124]	; (80017e8 <proc_sp_cmd+0x90>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f008 ffb8 	bl	800a6e0 <siscanf>
 8001770:	4603      	mov	r3, r0
 8001772:	2b02      	cmp	r3, #2
 8001774:	d131      	bne.n	80017da <proc_sp_cmd+0x82>
		{
			if(strcmp(timeunit,"ms") == 0 || strcmp(timeunit,"s") == 0 || strcmp(timeunit,"us") == 0)
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	491c      	ldr	r1, [pc, #112]	; (80017ec <proc_sp_cmd+0x94>)
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fd5f 	bl	8000240 <strcmp>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d011      	beq.n	80017ac <proc_sp_cmd+0x54>
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4918      	ldr	r1, [pc, #96]	; (80017f0 <proc_sp_cmd+0x98>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fd56 	bl	8000240 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <proc_sp_cmd+0x54>
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4915      	ldr	r1, [pc, #84]	; (80017f4 <proc_sp_cmd+0x9c>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd4d 	bl	8000240 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d112      	bne.n	80017d2 <proc_sp_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80017ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <proc_sp_cmd+0xa0>)
 80017b4:	f009 f81f 	bl	800a7f6 <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <proc_sp_cmd+0xa4>)
 80017c0:	f008 ffff 	bl	800a7c2 <strcpy>
				sp_config.unit = unit;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <proc_sp_cmd+0xa8>)
 80017c8:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <proc_sp_cmd+0xac>)
 80017cc:	f002 fda4 	bl	8004318 <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 80017d0:	e006      	b.n	80017e0 <proc_sp_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <proc_sp_cmd+0xb0>)
 80017d4:	f002 fda0 	bl	8004318 <send_UART>
}
 80017d8:	e002      	b.n	80017e0 <proc_sp_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <proc_sp_cmd+0xb4>)
 80017dc:	f002 fd9c 	bl	8004318 <send_UART>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0800f024 	.word	0x0800f024
 80017ec:	0800f030 	.word	0x0800f030
 80017f0:	0800f034 	.word	0x0800f034
 80017f4:	0800f038 	.word	0x0800f038
 80017f8:	200145a8 	.word	0x200145a8
 80017fc:	2000009c 	.word	0x2000009c
 8001800:	20000090 	.word	0x20000090
 8001804:	0800f03c 	.word	0x0800f03c
 8001808:	0800f070 	.word	0x0800f070
 800180c:	0800f0a4 	.word	0x0800f0a4

08001810 <proc_ac_cmd>:

void proc_ac_cmd(char* message)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	unsigned int addr3;

	if(sscanf((char*)message, "AC %x", &addr3) == 1)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	461a      	mov	r2, r3
 800181e:	4912      	ldr	r1, [pc, #72]	; (8001868 <proc_ac_cmd+0x58>)
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f008 ff5d 	bl	800a6e0 <siscanf>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d116      	bne.n	800185a <proc_ac_cmd+0x4a>
	{
		if(addr3 > 0 && addr3 <= 0x0F)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <proc_ac_cmd+0x42>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80c      	bhi.n	8001852 <proc_ac_cmd+0x42>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <proc_ac_cmd+0x5c>)
 8001840:	f008 ffd9 	bl	800a7f6 <strncpy>

			sp_config.addr3 = addr3;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <proc_ac_cmd+0x60>)
 8001848:	6013      	str	r3, [r2, #0]
			send_UART("Analog Channel for Sampling changed with success.");
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <proc_ac_cmd+0x64>)
 800184c:	f002 fd64 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Analog Channel instruction argument values.");
	}
	else
		send_UART("Invalid Analog Channel instruction syntax.");
}
 8001850:	e006      	b.n	8001860 <proc_ac_cmd+0x50>
			send_UART("Invalid Analog Channel instruction argument values.");
 8001852:	4809      	ldr	r0, [pc, #36]	; (8001878 <proc_ac_cmd+0x68>)
 8001854:	f002 fd60 	bl	8004318 <send_UART>
}
 8001858:	e002      	b.n	8001860 <proc_ac_cmd+0x50>
		send_UART("Invalid Analog Channel instruction syntax.");
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <proc_ac_cmd+0x6c>)
 800185c:	f002 fd5c 	bl	8004318 <send_UART>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	0800f0d0 	.word	0x0800f0d0
 800186c:	200145a8 	.word	0x200145a8
 8001870:	20000090 	.word	0x20000090
 8001874:	0800f0d8 	.word	0x0800f0d8
 8001878:	0800f10c 	.word	0x0800f10c
 800187c:	0800f140 	.word	0x0800f140

08001880 <proc_fni_cmd>:

void proc_fni_cmd(char* message)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3303      	adds	r3, #3
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b0d      	cmp	r3, #13
 8001890:	d10c      	bne.n	80018ac <proc_fni_cmd+0x2c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <proc_fni_cmd+0x3c>)
 800189a:	f008 ffac 	bl	800a7f6 <strncpy>
		sp_config.filter_type = Inf;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <proc_fni_cmd+0x40>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <proc_fni_cmd+0x44>)
 80018a6:	f002 fd37 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid IRR Filter On instruction syntax.");
}
 80018aa:	e002      	b.n	80018b2 <proc_fni_cmd+0x32>
		send_UART("Invalid IRR Filter On instruction syntax.");
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <proc_fni_cmd+0x48>)
 80018ae:	f002 fd33 	bl	8004318 <send_UART>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200145a8 	.word	0x200145a8
 80018c0:	20000090 	.word	0x20000090
 80018c4:	0800f16c 	.word	0x0800f16c
 80018c8:	0800f178 	.word	0x0800f178

080018cc <proc_ffi_cmd>:

void proc_ffi_cmd(char* message)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3303      	adds	r3, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b0d      	cmp	r3, #13
 80018dc:	d114      	bne.n	8001908 <proc_ffi_cmd+0x3c>
	{
		if(sp_config.filter_type == Inf)
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <proc_ffi_cmd+0x4c>)
 80018e0:	7b9b      	ldrb	r3, [r3, #14]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10c      	bne.n	8001900 <proc_ffi_cmd+0x34>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <proc_ffi_cmd+0x50>)
 80018ee:	f008 ff82 	bl	800a7f6 <strncpy>
			sp_config.filter_type = Nf;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <proc_ffi_cmd+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <proc_ffi_cmd+0x54>)
 80018fa:	f002 fd0d 	bl	8004318 <send_UART>
		else
			send_UART("IRR Filter is already off.");
	}
	else
		send_UART("Invalid IRR Filter Off instruction syntax.");
}
 80018fe:	e006      	b.n	800190e <proc_ffi_cmd+0x42>
			send_UART("IRR Filter is already off.");
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <proc_ffi_cmd+0x58>)
 8001902:	f002 fd09 	bl	8004318 <send_UART>
}
 8001906:	e002      	b.n	800190e <proc_ffi_cmd+0x42>
		send_UART("Invalid IRR Filter Off instruction syntax.");
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <proc_ffi_cmd+0x5c>)
 800190a:	f002 fd05 	bl	8004318 <send_UART>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000090 	.word	0x20000090
 800191c:	200145a8 	.word	0x200145a8
 8001920:	0800f1a4 	.word	0x0800f1a4
 8001924:	0800f1b0 	.word	0x0800f1b0
 8001928:	0800f1cc 	.word	0x0800f1cc

0800192c <proc_fnf_cmd>:

void proc_fnf_cmd(char* message)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3303      	adds	r3, #3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b0d      	cmp	r3, #13
 800193c:	d10c      	bne.n	8001958 <proc_fnf_cmd+0x2c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <proc_fnf_cmd+0x3c>)
 8001946:	f008 ff56 	bl	800a7f6 <strncpy>
		sp_config.filter_type = Fin;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <proc_fnf_cmd+0x40>)
 800194c:	2202      	movs	r2, #2
 800194e:	739a      	strb	r2, [r3, #14]
		send_UART("Filter ON.");
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <proc_fnf_cmd+0x44>)
 8001952:	f002 fce1 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid FIR Filter On instruction syntax.");
}
 8001956:	e002      	b.n	800195e <proc_fnf_cmd+0x32>
		send_UART("Invalid FIR Filter On instruction syntax.");
 8001958:	4806      	ldr	r0, [pc, #24]	; (8001974 <proc_fnf_cmd+0x48>)
 800195a:	f002 fcdd 	bl	8004318 <send_UART>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200145a8 	.word	0x200145a8
 800196c:	20000090 	.word	0x20000090
 8001970:	0800f16c 	.word	0x0800f16c
 8001974:	0800f1f8 	.word	0x0800f1f8

08001978 <proc_fff_cmd>:

void proc_fff_cmd(char* message)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3303      	adds	r3, #3
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b0d      	cmp	r3, #13
 8001988:	d114      	bne.n	80019b4 <proc_fff_cmd+0x3c>
	{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <proc_fff_cmd+0x4c>)
 8001992:	f008 ff30 	bl	800a7f6 <strncpy>
		if(sp_config.filter_type == Fin){
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <proc_fff_cmd+0x50>)
 8001998:	7b9b      	ldrb	r3, [r3, #14]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d106      	bne.n	80019ac <proc_fff_cmd+0x34>
			sp_config.filter_type = Nf;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <proc_fff_cmd+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	739a      	strb	r2, [r3, #14]
			send_UART("Filter OFF");
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <proc_fff_cmd+0x54>)
 80019a6:	f002 fcb7 	bl	8004318 <send_UART>
		else
			send_UART("FIR Filter is already off.");
	}
	else
		send_UART("Invalid FIR Filter Off instruction syntax.");
}
 80019aa:	e006      	b.n	80019ba <proc_fff_cmd+0x42>
			send_UART("FIR Filter is already off.");
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <proc_fff_cmd+0x58>)
 80019ae:	f002 fcb3 	bl	8004318 <send_UART>
}
 80019b2:	e002      	b.n	80019ba <proc_fff_cmd+0x42>
		send_UART("Invalid FIR Filter Off instruction syntax.");
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <proc_fff_cmd+0x5c>)
 80019b6:	f002 fcaf 	bl	8004318 <send_UART>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200145a8 	.word	0x200145a8
 80019c8:	20000090 	.word	0x20000090
 80019cc:	0800f1a4 	.word	0x0800f1a4
 80019d0:	0800f224 	.word	0x0800f224
 80019d4:	0800f240 	.word	0x0800f240

080019d8 <proc_s_cmd>:

void proc_s_cmd(char* message)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[1] == '\r')
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b0d      	cmp	r3, #13
 80019e8:	d120      	bne.n	8001a2c <proc_s_cmd+0x54>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4827      	ldr	r0, [pc, #156]	; (8001a90 <proc_s_cmd+0xb8>)
 80019f2:	f008 ff00 	bl	800a7f6 <strncpy>

		reset_adc_buf();
 80019f6:	f7ff f96b 	bl	8000cd0 <reset_adc_buf>
		counter = 0;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <proc_s_cmd+0xbc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = 0;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
		MX_ADC3_Init1(false);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7fe fff2 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f91f 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1a:	f001 fcbb 	bl	8003394 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 8001a1e:	481f      	ldr	r0, [pc, #124]	; (8001a9c <proc_s_cmd+0xc4>)
 8001a20:	f002 fe46 	bl	80046b0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001a24:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <proc_s_cmd+0xc8>)
 8001a26:	f005 f933 	bl	8006c90 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
	}
	else
		send_UART("Invalid Sample instruction syntax.");

}
 8001a2a:	e02d      	b.n	8001a88 <proc_s_cmd+0xb0>
	else if(sscanf((char*)message, "S %d", &k_values) == 1)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	461a      	mov	r2, r3
 8001a32:	491c      	ldr	r1, [pc, #112]	; (8001aa4 <proc_s_cmd+0xcc>)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f008 fe53 	bl	800a6e0 <siscanf>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d120      	bne.n	8001a82 <proc_s_cmd+0xaa>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4812      	ldr	r0, [pc, #72]	; (8001a90 <proc_s_cmd+0xb8>)
 8001a48:	f008 fed5 	bl	800a7f6 <strncpy>
		reset_adc_buf();
 8001a4c:	f7ff f940 	bl	8000cd0 <reset_adc_buf>
		counter = 0;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <proc_s_cmd+0xbc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		sp_config.sp_limit = k_values;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a5a:	6093      	str	r3, [r2, #8]
		MX_ADC3_Init1(false);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7fe ffc7 	bl	80009f0 <MX_ADC3_Init1>
		config_ADC(sp_config.addr3);
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8f4 	bl	8000c54 <config_ADC>
		MX_TIM1_Init1(sp_config);
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <proc_s_cmd+0xc0>)
 8001a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a70:	f001 fc90 	bl	8003394 <MX_TIM1_Init1>
		HAL_ADC_Start_IT(&hadc3);
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <proc_s_cmd+0xc4>)
 8001a76:	f002 fe1b 	bl	80046b0 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <proc_s_cmd+0xc8>)
 8001a7c:	f005 f908 	bl	8006c90 <HAL_TIM_Base_Start_IT>
}
 8001a80:	e002      	b.n	8001a88 <proc_s_cmd+0xb0>
		send_UART("Invalid Sample instruction syntax.");
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <proc_s_cmd+0xd0>)
 8001a84:	f002 fc48 	bl	8004318 <send_UART>
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200145a8 	.word	0x200145a8
 8001a94:	2000031c 	.word	0x2000031c
 8001a98:	20000090 	.word	0x20000090
 8001a9c:	20010458 	.word	0x20010458
 8001aa0:	20018768 	.word	0x20018768
 8001aa4:	0800f26c 	.word	0x0800f26c
 8001aa8:	0800f274 	.word	0x0800f274

08001aac <proc_st_cmd>:

void proc_st_cmd(char* message)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if(counter > 0)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <proc_st_cmd+0x60>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01f      	beq.n	8001afc <proc_st_cmd+0x50>
	{
		if(message[2] == '\r')
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b0d      	cmp	r3, #13
 8001ac4:	d116      	bne.n	8001af4 <proc_st_cmd+0x48>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <proc_st_cmd+0x64>)
 8001ace:	f008 fe92 	bl	800a7f6 <strncpy>
			counter = 0;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <proc_st_cmd+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
			analog_write(0,0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 ff0a 	bl	80028f4 <analog_write>
			HAL_ADC_Stop_IT(&hadc3);
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <proc_st_cmd+0x68>)
 8001ae2:	f002 febd 	bl	8004860 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <proc_st_cmd+0x6c>)
 8001ae8:	f005 f94a 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
			send_UART("Sampling Stopped.");
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <proc_st_cmd+0x70>)
 8001aee:	f002 fc13 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Stop Sampling instruction syntax.");
	}
	else
		send_UART("Sampling is not running.");
}
 8001af2:	e006      	b.n	8001b02 <proc_st_cmd+0x56>
			send_UART("Invalid Stop Sampling instruction syntax.");
 8001af4:	480a      	ldr	r0, [pc, #40]	; (8001b20 <proc_st_cmd+0x74>)
 8001af6:	f002 fc0f 	bl	8004318 <send_UART>
}
 8001afa:	e002      	b.n	8001b02 <proc_st_cmd+0x56>
		send_UART("Sampling is not running.");
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <proc_st_cmd+0x78>)
 8001afe:	f002 fc0b 	bl	8004318 <send_UART>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000031c 	.word	0x2000031c
 8001b10:	200145a8 	.word	0x200145a8
 8001b14:	20010458 	.word	0x20010458
 8001b18:	20018768 	.word	0x20018768
 8001b1c:	0800f298 	.word	0x0800f298
 8001b20:	0800f2ac 	.word	0x0800f2ac
 8001b24:	0800f2d8 	.word	0x0800f2d8

08001b28 <proc_cs_cmd>:


void proc_cs_cmd(char* message)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	// DISABLE ALL
	enable = false;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <proc_cs_cmd+0x7c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001b36:	210c      	movs	r1, #12
 8001b38:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <proc_cs_cmd+0x80>)
 8001b3a:	f005 faab 	bl	8007094 <HAL_TIM_PWM_Stop>

	int val;

	if(sscanf((char*) message, "CS %d", &val) == 1)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	461a      	mov	r2, r3
 8001b44:	4919      	ldr	r1, [pc, #100]	; (8001bac <proc_cs_cmd+0x84>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f008 fdca 	bl	800a6e0 <siscanf>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d120      	bne.n	8001b94 <proc_cs_cmd+0x6c>
	{
		if(val == 0 || val == 1)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <proc_cs_cmd+0x36>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d116      	bne.n	8001b8c <proc_cs_cmd+0x64>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <proc_cs_cmd+0x88>)
 8001b66:	f008 fe46 	bl	800a7f6 <strncpy>

			if(val)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <proc_cs_cmd+0x56>
			{
				mode_speed = true;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <proc_cs_cmd+0x8c>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
				send_UART("Speed control mode selected.");
 8001b76:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <proc_cs_cmd+0x90>)
 8001b78:	f002 fbce 	bl	8004318 <send_UART>
			if(val)
 8001b7c:	e00e      	b.n	8001b9c <proc_cs_cmd+0x74>
			}
			else
			{
				mode_speed = false;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <proc_cs_cmd+0x8c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
				send_UART("PWM control mode selected.");
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <proc_cs_cmd+0x94>)
 8001b86:	f002 fbc7 	bl	8004318 <send_UART>
			if(val)
 8001b8a:	e007      	b.n	8001b9c <proc_cs_cmd+0x74>
			}
		}
		else
			send_UART("Invalid Control System instruction argument values.");
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <proc_cs_cmd+0x98>)
 8001b8e:	f002 fbc3 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid Control System instruction syntax.");
}
 8001b92:	e003      	b.n	8001b9c <proc_cs_cmd+0x74>
		send_UART("Invalid Control System instruction syntax.");
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <proc_cs_cmd+0x9c>)
 8001b96:	f002 fbbf 	bl	8004318 <send_UART>
}
 8001b9a:	e7ff      	b.n	8001b9c <proc_cs_cmd+0x74>
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000321 	.word	0x20000321
 8001ba8:	200187b4 	.word	0x200187b4
 8001bac:	0800f2f4 	.word	0x0800f2f4
 8001bb0:	200145a8 	.word	0x200145a8
 8001bb4:	20000320 	.word	0x20000320
 8001bb8:	0800f2fc 	.word	0x0800f2fc
 8001bbc:	0800f31c 	.word	0x0800f31c
 8001bc0:	0800f338 	.word	0x0800f338
 8001bc4:	0800f36c 	.word	0x0800f36c

08001bc8 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <proc_en_cmd+0x88>)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f008 fd81 	bl	800a6e0 <siscanf>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d12c      	bne.n	8001c3e <proc_en_cmd+0x76>
	{
		if(val == 0 || val == 1)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <proc_en_cmd+0x28>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d122      	bne.n	8001c36 <proc_en_cmd+0x6e>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4817      	ldr	r0, [pc, #92]	; (8001c54 <proc_en_cmd+0x8c>)
 8001bf8:	f008 fdfd 	bl	800a7f6 <strncpy>

			if(val)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00e      	beq.n	8001c20 <proc_en_cmd+0x58>
			{
				send_UART("System enabled with success.");
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <proc_en_cmd+0x90>)
 8001c04:	f002 fb88 	bl	8004318 <send_UART>
				enable = true;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <proc_en_cmd+0x94>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]

				if(mode_speed)
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <proc_en_cmd+0x98>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d117      	bne.n	8001c46 <proc_en_cmd+0x7e>
				{
					// start speed mode
				}
				else
				{
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c16:	210c      	movs	r1, #12
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <proc_en_cmd+0x9c>)
 8001c1a:	f005 f941 	bl	8006ea0 <HAL_TIM_PWM_Start>
			if(val)
 8001c1e:	e012      	b.n	8001c46 <proc_en_cmd+0x7e>
				}
			}
			else
			{
				// DISABLE ALL
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001c20:	210c      	movs	r1, #12
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <proc_en_cmd+0x9c>)
 8001c24:	f005 fa36 	bl	8007094 <HAL_TIM_PWM_Stop>
				send_UART("System disabled with success.");
 8001c28:	480f      	ldr	r0, [pc, #60]	; (8001c68 <proc_en_cmd+0xa0>)
 8001c2a:	f002 fb75 	bl	8004318 <send_UART>
				enable = false;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <proc_en_cmd+0x94>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
			if(val)
 8001c34:	e007      	b.n	8001c46 <proc_en_cmd+0x7e>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <proc_en_cmd+0xa4>)
 8001c38:	f002 fb6e 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 8001c3c:	e004      	b.n	8001c48 <proc_en_cmd+0x80>
		send_UART("Invalid Enable instruction syntax.");
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <proc_en_cmd+0xa8>)
 8001c40:	f002 fb6a 	bl	8004318 <send_UART>
}
 8001c44:	e000      	b.n	8001c48 <proc_en_cmd+0x80>
			if(val)
 8001c46:	bf00      	nop
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	0800f398 	.word	0x0800f398
 8001c54:	200145a8 	.word	0x200145a8
 8001c58:	0800f3a0 	.word	0x0800f3a0
 8001c5c:	20000321 	.word	0x20000321
 8001c60:	20000320 	.word	0x20000320
 8001c64:	200187b4 	.word	0x200187b4
 8001c68:	0800f3c0 	.word	0x0800f3c0
 8001c6c:	0800f3e0 	.word	0x0800f3e0
 8001c70:	0800f40c 	.word	0x0800f40c

08001c74 <proc_un_cmd>:


void proc_un_cmd(char* message)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	char sign;
	int val;
	int args_read;

	if((args_read = sscanf((char*) message, "UN %c%d", &sign, &val)) == 2)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	f107 020f 	add.w	r2, r7, #15
 8001c84:	4997      	ldr	r1, [pc, #604]	; (8001ee4 <proc_un_cmd+0x270>)
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f008 fd2a 	bl	800a6e0 <siscanf>
 8001c8c:	6138      	str	r0, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	f040 80ee 	bne.w	8001e72 <proc_un_cmd+0x1fe>
	{
		if(val >= 0 && val <= 100 && (sign == '+' || sign == '-'))
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f2c0 80e6 	blt.w	8001e6a <proc_un_cmd+0x1f6>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	f300 80e2 	bgt.w	8001e6a <proc_un_cmd+0x1f6>
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b2b      	cmp	r3, #43	; 0x2b
 8001caa:	d003      	beq.n	8001cb4 <proc_un_cmd+0x40>
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b2d      	cmp	r3, #45	; 0x2d
 8001cb0:	f040 80db 	bne.w	8001e6a <proc_un_cmd+0x1f6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	488b      	ldr	r0, [pc, #556]	; (8001ee8 <proc_un_cmd+0x274>)
 8001cbc:	f008 fd9b 	bl	800a7f6 <strncpy>

			if(sign == '+')
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b2b      	cmp	r3, #43	; 0x2b
 8001cc4:	d168      	bne.n	8001d98 <proc_un_cmd+0x124>
			{
				if(!direction)
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <proc_un_cmd+0x278>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d022      	beq.n	8001d1a <proc_un_cmd+0xa6>
				{
					for(int i = duty_cycle; i > 0; i--)
 8001cd4:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	e00f      	b.n	8001cfc <proc_un_cmd+0x88>
					{
						TIM2->CCR4 = duty_cycle = i - 1;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cea:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f002 fc75 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i > 0; i--)
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dcec      	bgt.n	8001cdc <proc_un_cmd+0x68>
					}

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d08:	487a      	ldr	r0, [pc, #488]	; (8001ef4 <proc_un_cmd+0x280>)
 8001d0a:	f003 fdf5 	bl	80058f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d14:	4878      	ldr	r0, [pc, #480]	; (8001ef8 <proc_un_cmd+0x284>)
 8001d16:	f003 fdef 	bl	80058f8 <HAL_GPIO_WritePin>
				}

				if(duty_cycle > val)
 8001d1a:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d918      	bls.n	8001d56 <proc_un_cmd+0xe2>
				{
					for(int i = duty_cycle; i > val; i--)
 8001d24:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	e00f      	b.n	8001d4c <proc_un_cmd+0xd8>
					{
						TIM2->CCR4 = duty_cycle = i - 1;
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001d40:	200a      	movs	r0, #10
 8001d42:	f002 fc4d 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i > val; i--)
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dceb      	bgt.n	8001d2c <proc_un_cmd+0xb8>
 8001d54:	e01c      	b.n	8001d90 <proc_un_cmd+0x11c>
					}
				}
				else if(duty_cycle < val)
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d217      	bcs.n	8001d90 <proc_un_cmd+0x11c>
				{
					for(int i = duty_cycle; i < val; i++)
 8001d60:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e00f      	b.n	8001d88 <proc_un_cmd+0x114>
					{
						TIM2->CCR4 = duty_cycle = i + 1;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b60      	ldr	r3, [pc, #384]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001d7c:	200a      	movs	r0, #10
 8001d7e:	f002 fc2f 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i < val; i++)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbeb      	blt.n	8001d68 <proc_un_cmd+0xf4>
					}
				}

				direction = true;
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <proc_un_cmd+0x278>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e064      	b.n	8001e62 <proc_un_cmd+0x1ee>
			}
			else
			{
				if(direction)
 8001d98:	4b54      	ldr	r3, [pc, #336]	; (8001eec <proc_un_cmd+0x278>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <proc_un_cmd+0x172>
				{
					for(int i = duty_cycle; i > 0; i--)
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	e00f      	b.n	8001dc8 <proc_un_cmd+0x154>
					{
						TIM2->CCR4 = duty_cycle = i - 1;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f002 fc0f 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i > 0; i--)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dcec      	bgt.n	8001da8 <proc_un_cmd+0x134>
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd4:	4848      	ldr	r0, [pc, #288]	; (8001ef8 <proc_un_cmd+0x284>)
 8001dd6:	f003 fd8f 	bl	80058f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de0:	4844      	ldr	r0, [pc, #272]	; (8001ef4 <proc_un_cmd+0x280>)
 8001de2:	f003 fd89 	bl	80058f8 <HAL_GPIO_WritePin>
				}

				if(duty_cycle > val)
 8001de6:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d918      	bls.n	8001e22 <proc_un_cmd+0x1ae>
				{
					for(int i = duty_cycle; i > val; i--)
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e00f      	b.n	8001e18 <proc_un_cmd+0x1a4>
					{
						TIM2->CCR4 = duty_cycle = i - 1;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f002 fbe7 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i > val; i--)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dceb      	bgt.n	8001df8 <proc_un_cmd+0x184>
 8001e20:	e01c      	b.n	8001e5c <proc_un_cmd+0x1e8>
					}
				}
				else if(duty_cycle < val)
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d217      	bcs.n	8001e5c <proc_un_cmd+0x1e8>
				{
					for(int i = duty_cycle; i < val; i++)
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e00f      	b.n	8001e54 <proc_un_cmd+0x1e0>
					{
						TIM2->CCR4 = duty_cycle = i + 1;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	3301      	adds	r3, #1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
						HAL_Delay(RECOVERY_TIME_MS);
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f002 fbc9 	bl	80045e0 <HAL_Delay>
					for(int i = duty_cycle; i < val; i++)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbeb      	blt.n	8001e34 <proc_un_cmd+0x1c0>
					}
				}

				direction = false;
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <proc_un_cmd+0x278>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
			}

			send_UART("PWM average voltage changed with success.");
 8001e62:	4826      	ldr	r0, [pc, #152]	; (8001efc <proc_un_cmd+0x288>)
 8001e64:	f002 fa58 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Normalized Voltage instruction argument values.");
	}
	else
		send_UART("Invalid Normalized Voltage instruction syntax.");
}
 8001e68:	e038      	b.n	8001edc <proc_un_cmd+0x268>
			send_UART("Invalid Normalized Voltage instruction argument values.");
 8001e6a:	4825      	ldr	r0, [pc, #148]	; (8001f00 <proc_un_cmd+0x28c>)
 8001e6c:	f002 fa54 	bl	8004318 <send_UART>
}
 8001e70:	e034      	b.n	8001edc <proc_un_cmd+0x268>
	else if(sscanf((char*) message, "UN %d", &val) == 1)
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	461a      	mov	r2, r3
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <proc_un_cmd+0x290>)
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f008 fc30 	bl	800a6e0 <siscanf>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d127      	bne.n	8001ed6 <proc_un_cmd+0x262>
		if(!val)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d120      	bne.n	8001ece <proc_un_cmd+0x25a>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4815      	ldr	r0, [pc, #84]	; (8001ee8 <proc_un_cmd+0x274>)
 8001e94:	f008 fcaf 	bl	800a7f6 <strncpy>
			for(int i = duty_cycle; i > 0; i--)
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e00f      	b.n	8001ec0 <proc_un_cmd+0x24c>
				TIM2->CCR4 = duty_cycle = i - 1;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <proc_un_cmd+0x27c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6413      	str	r3, [r2, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f002 fb93 	bl	80045e0 <HAL_Delay>
			for(int i = duty_cycle; i > 0; i--)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dcec      	bgt.n	8001ea0 <proc_un_cmd+0x22c>
			send_UART("PWM average voltage changed with success.");
 8001ec6:	480d      	ldr	r0, [pc, #52]	; (8001efc <proc_un_cmd+0x288>)
 8001ec8:	f002 fa26 	bl	8004318 <send_UART>
}
 8001ecc:	e006      	b.n	8001edc <proc_un_cmd+0x268>
			send_UART("Invalid Normalized Voltage instruction argument values.");
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <proc_un_cmd+0x28c>)
 8001ed0:	f002 fa22 	bl	8004318 <send_UART>
}
 8001ed4:	e002      	b.n	8001edc <proc_un_cmd+0x268>
		send_UART("Invalid Normalized Voltage instruction syntax.");
 8001ed6:	480c      	ldr	r0, [pc, #48]	; (8001f08 <proc_un_cmd+0x294>)
 8001ed8:	f002 fa1e 	bl	8004318 <send_UART>
}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	; 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	0800f430 	.word	0x0800f430
 8001ee8:	200145a8 	.word	0x200145a8
 8001eec:	20000322 	.word	0x20000322
 8001ef0:	20000324 	.word	0x20000324
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	0800f438 	.word	0x0800f438
 8001f00:	0800f464 	.word	0x0800f464
 8001f04:	0800f49c 	.word	0x0800f49c
 8001f08:	0800f4a4 	.word	0x0800f4a4

08001f0c <proc_vr_cmd>:


void proc_vr_cmd(char* message)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	char sign;
	int val;

	if(sscanf((char*) message, "VR %c%d", &sign, &val) == 2)
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	f107 020f 	add.w	r2, r7, #15
 8001f1c:	491a      	ldr	r1, [pc, #104]	; (8001f88 <proc_vr_cmd+0x7c>)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f008 fbde 	bl	800a6e0 <siscanf>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d127      	bne.n	8001f7a <proc_vr_cmd+0x6e>
	{
		if(val >= 0 && val <= 160)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db20      	blt.n	8001f72 <proc_vr_cmd+0x66>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2ba0      	cmp	r3, #160	; 0xa0
 8001f34:	dc1d      	bgt.n	8001f72 <proc_vr_cmd+0x66>
		{
			if(sign == '+' || sign == '-')
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b2b      	cmp	r3, #43	; 0x2b
 8001f3a:	d002      	beq.n	8001f42 <proc_vr_cmd+0x36>
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b2d      	cmp	r3, #45	; 0x2d
 8001f40:	d105      	bne.n	8001f4e <proc_vr_cmd+0x42>
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <proc_vr_cmd+0x80>)
 8001f4a:	f008 fc54 	bl	800a7f6 <strncpy>

			speed = val;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <proc_vr_cmd+0x84>)
 8001f54:	601a      	str	r2, [r3, #0]

			if(sign == '+')
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b2b      	cmp	r3, #43	; 0x2b
 8001f5a:	d103      	bne.n	8001f64 <proc_vr_cmd+0x58>
				direction = true;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <proc_vr_cmd+0x88>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e002      	b.n	8001f6a <proc_vr_cmd+0x5e>
			else
				direction = false;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <proc_vr_cmd+0x88>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]

			send_UART("Speed changed with success.");
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <proc_vr_cmd+0x8c>)
 8001f6c:	f002 f9d4 	bl	8004318 <send_UART>
		else
			send_UART("Invalid Reference Speed instruction argument values.");
	}
	else
		send_UART("Invalid Reference Speed instruction syntax.");
}
 8001f70:	e006      	b.n	8001f80 <proc_vr_cmd+0x74>
			send_UART("Invalid Reference Speed instruction argument values.");
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <proc_vr_cmd+0x90>)
 8001f74:	f002 f9d0 	bl	8004318 <send_UART>
}
 8001f78:	e002      	b.n	8001f80 <proc_vr_cmd+0x74>
		send_UART("Invalid Reference Speed instruction syntax.");
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <proc_vr_cmd+0x94>)
 8001f7c:	f002 f9cc 	bl	8004318 <send_UART>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	0800f4d4 	.word	0x0800f4d4
 8001f8c:	200145a8 	.word	0x200145a8
 8001f90:	20000328 	.word	0x20000328
 8001f94:	20000322 	.word	0x20000322
 8001f98:	0800f4dc 	.word	0x0800f4dc
 8001f9c:	0800f4f8 	.word	0x0800f4f8
 8001fa0:	0800f530 	.word	0x0800f530

08001fa4 <proc_inc_cmd>:

void proc_inc_cmd(char* message)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	483b      	ldr	r0, [pc, #236]	; (80020a0 <proc_inc_cmd+0xfc>)
 8001fb4:	f008 fc1f 	bl	800a7f6 <strncpy>

	if(mode_speed)
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <proc_inc_cmd+0x100>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d014      	beq.n	8001fea <proc_inc_cmd+0x46>
	{
		if(speed < 156)
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <proc_inc_cmd+0x104>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b9b      	cmp	r3, #155	; 0x9b
 8001fc6:	d805      	bhi.n	8001fd4 <proc_inc_cmd+0x30>
			speed += 5;
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <proc_inc_cmd+0x104>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3305      	adds	r3, #5
 8001fce:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <proc_inc_cmd+0x104>)
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e002      	b.n	8001fda <proc_inc_cmd+0x36>
		else
			speed = 160;
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <proc_inc_cmd+0x104>)
 8001fd6:	22a0      	movs	r2, #160	; 0xa0
 8001fd8:	601a      	str	r2, [r3, #0]

		sprintf(message, "Speed updated to %d rpm.", speed);
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <proc_inc_cmd+0x104>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4932      	ldr	r1, [pc, #200]	; (80020ac <proc_inc_cmd+0x108>)
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f008 fb5c 	bl	800a6a0 <siprintf>
 8001fe8:	e052      	b.n	8002090 <proc_inc_cmd+0xec>
	}
	else
	{
		if(duty_cycle == 0)
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <proc_inc_cmd+0x10c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <proc_inc_cmd+0x6c>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff8:	482e      	ldr	r0, [pc, #184]	; (80020b4 <proc_inc_cmd+0x110>)
 8001ffa:	f003 fc7d 	bl	80058f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002004:	482c      	ldr	r0, [pc, #176]	; (80020b8 <proc_inc_cmd+0x114>)
 8002006:	f003 fc77 	bl	80058f8 <HAL_GPIO_WritePin>
			direction = true;
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <proc_inc_cmd+0x118>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
		}

		if(direction)
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <proc_inc_cmd+0x118>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01a      	beq.n	800204e <proc_inc_cmd+0xaa>
		{
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e00f      	b.n	800203e <proc_inc_cmd+0x9a>
			{
				TIM2->CCR4 = ++duty_cycle;
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <proc_inc_cmd+0x10c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8002032:	200a      	movs	r0, #10
 8002034:	f002 fad4 	bl	80045e0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b04      	cmp	r3, #4
 8002042:	dc1e      	bgt.n	8002082 <proc_inc_cmd+0xde>
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b63      	cmp	r3, #99	; 0x63
 800204a:	d9e8      	bls.n	800201e <proc_inc_cmd+0x7a>
 800204c:	e019      	b.n	8002082 <proc_inc_cmd+0xde>
			}
		}
		else
		{
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	e00f      	b.n	8002074 <proc_inc_cmd+0xd0>
			{
				TIM2->CCR4 = --duty_cycle;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <proc_inc_cmd+0x10c>)
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8002068:	200a      	movs	r0, #10
 800206a:	f002 fab9 	bl	80045e0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3301      	adds	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b04      	cmp	r3, #4
 8002078:	dc03      	bgt.n	8002082 <proc_inc_cmd+0xde>
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <proc_inc_cmd+0x10c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e8      	bne.n	8002054 <proc_inc_cmd+0xb0>
			}
		}

		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <proc_inc_cmd+0x10c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	490d      	ldr	r1, [pc, #52]	; (80020c0 <proc_inc_cmd+0x11c>)
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f008 fb08 	bl	800a6a0 <siprintf>
	}

	send_UART(message);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f002 f941 	bl	8004318 <send_UART>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200145a8 	.word	0x200145a8
 80020a4:	20000320 	.word	0x20000320
 80020a8:	20000328 	.word	0x20000328
 80020ac:	0800f55c 	.word	0x0800f55c
 80020b0:	20000324 	.word	0x20000324
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	20000322 	.word	0x20000322
 80020c0:	0800f578 	.word	0x0800f578

080020c4 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	if(mode_speed)
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <proc_dec_cmd+0xf4>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d014      	beq.n	80020fe <proc_dec_cmd+0x3a>
	{
		if(speed > 4)
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <proc_dec_cmd+0xf8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d905      	bls.n	80020e8 <proc_dec_cmd+0x24>
			speed -= 5;
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <proc_dec_cmd+0xf8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b05      	subs	r3, #5
 80020e2:	4a36      	ldr	r2, [pc, #216]	; (80021bc <proc_dec_cmd+0xf8>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e002      	b.n	80020ee <proc_dec_cmd+0x2a>
		else
			speed = 0;
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <proc_dec_cmd+0xf8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

		sprintf((char*) message, "Speed updated to %d rpm.", speed);
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <proc_dec_cmd+0xf8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4932      	ldr	r1, [pc, #200]	; (80021c0 <proc_dec_cmd+0xfc>)
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f008 fad2 	bl	800a6a0 <siprintf>
 80020fc:	e055      	b.n	80021aa <proc_dec_cmd+0xe6>
	}
	else
	{
		if(duty_cycle == 0)
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <proc_dec_cmd+0x100>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <proc_dec_cmd+0x60>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210c:	482e      	ldr	r0, [pc, #184]	; (80021c8 <proc_dec_cmd+0x104>)
 800210e:	f003 fbf3 	bl	80058f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002118:	482c      	ldr	r0, [pc, #176]	; (80021cc <proc_dec_cmd+0x108>)
 800211a:	f003 fbed 	bl	80058f8 <HAL_GPIO_WritePin>
			direction = false;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <proc_dec_cmd+0x10c>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		}

		if(!direction)
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <proc_dec_cmd+0x10c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f083 0301 	eor.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <proc_dec_cmd+0xa4>
		{
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e00f      	b.n	8002158 <proc_dec_cmd+0x94>
			{
				TIM2->CCR4 = ++duty_cycle;
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <proc_dec_cmd+0x100>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <proc_dec_cmd+0x100>)
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <proc_dec_cmd+0x100>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 800214c:	200a      	movs	r0, #10
 800214e:	f002 fa47 	bl	80045e0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle < 100; ++i)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b04      	cmp	r3, #4
 800215c:	dc1e      	bgt.n	800219c <proc_dec_cmd+0xd8>
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <proc_dec_cmd+0x100>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b63      	cmp	r3, #99	; 0x63
 8002164:	d9e8      	bls.n	8002138 <proc_dec_cmd+0x74>
 8002166:	e019      	b.n	800219c <proc_dec_cmd+0xd8>
			}
		}
		else
		{
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	e00f      	b.n	800218e <proc_dec_cmd+0xca>
			{
				TIM2->CCR4 = --duty_cycle;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <proc_dec_cmd+0x100>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <proc_dec_cmd+0x100>)
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <proc_dec_cmd+0x100>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
				HAL_Delay(RECOVERY_TIME_MS);
 8002182:	200a      	movs	r0, #10
 8002184:	f002 fa2c 	bl	80045e0 <HAL_Delay>
			for(int i = 0; i < 5 && duty_cycle > 0; ++i)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b04      	cmp	r3, #4
 8002192:	dc03      	bgt.n	800219c <proc_dec_cmd+0xd8>
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <proc_dec_cmd+0x100>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e8      	bne.n	800216e <proc_dec_cmd+0xaa>
			}
		}

		sprintf((char*) message, "Duty cycle updated to %d%%.", duty_cycle);
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <proc_dec_cmd+0x100>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	490c      	ldr	r1, [pc, #48]	; (80021d4 <proc_dec_cmd+0x110>)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f008 fa7b 	bl	800a6a0 <siprintf>
	}

	send_UART(message);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 f8b4 	bl	8004318 <send_UART>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000320 	.word	0x20000320
 80021bc:	20000328 	.word	0x20000328
 80021c0:	0800f55c 	.word	0x0800f55c
 80021c4:	20000324 	.word	0x20000324
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40021000 	.word	0x40021000
 80021d0:	20000322 	.word	0x20000322
 80021d4:	0800f578 	.word	0x0800f578

080021d8 <proc_hw_cmd>:

void proc_hw_cmd(char* message)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	unsigned int unit;
	char timeunit[2];

	if(sscanf((char*)message, "HW %s %d", timeunit, &unit) == 2)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	f107 0208 	add.w	r2, r7, #8
 80021e8:	491f      	ldr	r1, [pc, #124]	; (8002268 <proc_hw_cmd+0x90>)
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f008 fa78 	bl	800a6e0 <siscanf>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d131      	bne.n	800225a <proc_hw_cmd+0x82>
		{
			if(strcmp(timeunit,"ms") == 0 || strcmp(timeunit,"s") == 0 || strcmp(timeunit,"us") == 0)
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	491c      	ldr	r1, [pc, #112]	; (800226c <proc_hw_cmd+0x94>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f81f 	bl	8000240 <strcmp>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d011      	beq.n	800222c <proc_hw_cmd+0x54>
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4918      	ldr	r1, [pc, #96]	; (8002270 <proc_hw_cmd+0x98>)
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f816 	bl	8000240 <strcmp>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <proc_hw_cmd+0x54>
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4915      	ldr	r1, [pc, #84]	; (8002274 <proc_hw_cmd+0x9c>)
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f80d 	bl	8000240 <strcmp>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d112      	bne.n	8002252 <proc_hw_cmd+0x7a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800222c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4811      	ldr	r0, [pc, #68]	; (8002278 <proc_hw_cmd+0xa0>)
 8002234:	f008 fadf 	bl	800a7f6 <strncpy>

				strcpy(sp_config.timeunit,timeunit);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4619      	mov	r1, r3
 800223e:	480f      	ldr	r0, [pc, #60]	; (800227c <proc_hw_cmd+0xa4>)
 8002240:	f008 fabf 	bl	800a7c2 <strcpy>
				sp_config.unit = unit;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <proc_hw_cmd+0xa8>)
 8002248:	6053      	str	r3, [r2, #4]
				send_UART("Sampling timeunit and units changed with success.");
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <proc_hw_cmd+0xac>)
 800224c:	f002 f864 	bl	8004318 <send_UART>
			else
				send_UART("Invalid Sample Period instruction argument values.");
		}
		else
			send_UART("Invalid Sample Period instruction syntax.");
}
 8002250:	e006      	b.n	8002260 <proc_hw_cmd+0x88>
				send_UART("Invalid Sample Period instruction argument values.");
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <proc_hw_cmd+0xb0>)
 8002254:	f002 f860 	bl	8004318 <send_UART>
}
 8002258:	e002      	b.n	8002260 <proc_hw_cmd+0x88>
			send_UART("Invalid Sample Period instruction syntax.");
 800225a:	480c      	ldr	r0, [pc, #48]	; (800228c <proc_hw_cmd+0xb4>)
 800225c:	f002 f85c 	bl	8004318 <send_UART>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0800f594 	.word	0x0800f594
 800226c:	0800f030 	.word	0x0800f030
 8002270:	0800f034 	.word	0x0800f034
 8002274:	0800f038 	.word	0x0800f038
 8002278:	200145a8 	.word	0x200145a8
 800227c:	2000009c 	.word	0x2000009c
 8002280:	20000090 	.word	0x20000090
 8002284:	0800f03c 	.word	0x0800f03c
 8002288:	0800f070 	.word	0x0800f070
 800228c:	0800f0a4 	.word	0x0800f0a4

08002290 <proc_fsw_cmd>:

void proc_fsw_cmd(char* message)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	char units[5] = {0};
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	2300      	movs	r3, #0
 800229e:	733b      	strb	r3, [r7, #12]

	if(sscanf((char*)message, "FSW %s", units) == 1)
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	461a      	mov	r2, r3
 80022a6:	4922      	ldr	r1, [pc, #136]	; (8002330 <proc_fsw_cmd+0xa0>)
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f008 fa19 	bl	800a6e0 <siscanf>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d136      	bne.n	8002322 <proc_fsw_cmd+0x92>
		{
			if(strcmp(units,"hz") == 0 || strcmp(units,"rps") == 0 || strcmp(units,"rads") == 0 || strcmp(units,"rpm") == 0)
 80022b4:	f107 0308 	add.w	r3, r7, #8
 80022b8:	491e      	ldr	r1, [pc, #120]	; (8002334 <proc_fsw_cmd+0xa4>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fd ffc0 	bl	8000240 <strcmp>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01a      	beq.n	80022fc <proc_fsw_cmd+0x6c>
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	491b      	ldr	r1, [pc, #108]	; (8002338 <proc_fsw_cmd+0xa8>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ffb7 	bl	8000240 <strcmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d011      	beq.n	80022fc <proc_fsw_cmd+0x6c>
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4917      	ldr	r1, [pc, #92]	; (800233c <proc_fsw_cmd+0xac>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ffae 	bl	8000240 <strcmp>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <proc_fsw_cmd+0x6c>
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4914      	ldr	r1, [pc, #80]	; (8002340 <proc_fsw_cmd+0xb0>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ffa5 	bl	8000240 <strcmp>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10e      	bne.n	800231a <proc_fsw_cmd+0x8a>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80022fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4810      	ldr	r0, [pc, #64]	; (8002344 <proc_fsw_cmd+0xb4>)
 8002304:	f008 fa77 	bl	800a7f6 <strncpy>
				set_units(units);
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fee3 	bl	80040d8 <set_units>
				send_UART("Sampling units changed with success.");
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <proc_fsw_cmd+0xb8>)
 8002314:	f002 f800 	bl	8004318 <send_UART>
			else
				send_UART("Invalid FSW instruction argument values.");
		}
		else
			send_UART("Invalid FSW instruction syntax.");
}
 8002318:	e006      	b.n	8002328 <proc_fsw_cmd+0x98>
				send_UART("Invalid FSW instruction argument values.");
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <proc_fsw_cmd+0xbc>)
 800231c:	f001 fffc 	bl	8004318 <send_UART>
}
 8002320:	e002      	b.n	8002328 <proc_fsw_cmd+0x98>
			send_UART("Invalid FSW instruction syntax.");
 8002322:	480b      	ldr	r0, [pc, #44]	; (8002350 <proc_fsw_cmd+0xc0>)
 8002324:	f001 fff8 	bl	8004318 <send_UART>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0800f5a0 	.word	0x0800f5a0
 8002334:	0800f5a8 	.word	0x0800f5a8
 8002338:	0800f5ac 	.word	0x0800f5ac
 800233c:	0800f5b0 	.word	0x0800f5b0
 8002340:	0800f5b8 	.word	0x0800f5b8
 8002344:	200145a8 	.word	0x200145a8
 8002348:	0800f5bc 	.word	0x0800f5bc
 800234c:	0800f5e4 	.word	0x0800f5e4
 8002350:	0800f610 	.word	0x0800f610

08002354 <proc_sw_cmd>:

void proc_sw_cmd(char* message)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	unsigned int k_values;

	if(message[2] == '\r')
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b0d      	cmp	r3, #13
 8002364:	d113      	bne.n	800238e <proc_sw_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8002366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	481a      	ldr	r0, [pc, #104]	; (80023d8 <proc_sw_cmd+0x84>)
 800236e:	f008 fa42 	bl	800a7f6 <strncpy>
		sp_config.sp_limit = 0;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <proc_sw_cmd+0x88>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
		MX_TIM3_Init1(sp_config);
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <proc_sw_cmd+0x88>)
 800237a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237c:	f001 f8b0 	bl	80034e0 <MX_TIM3_Init1>
		HAL_TIM_Base_Start_IT(&htim3);
 8002380:	4817      	ldr	r0, [pc, #92]	; (80023e0 <proc_sw_cmd+0x8c>)
 8002382:	f004 fc85 	bl	8006c90 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002386:	2028      	movs	r0, #40	; 0x28
 8002388:	f002 ff4f 	bl	800522a <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim3);
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	else
		send_UART("Invalid Sample instruction syntax.");
}
 800238c:	e020      	b.n	80023d0 <proc_sw_cmd+0x7c>
	else if(sscanf((char*)message, "SW %d", &k_values) == 1)
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	461a      	mov	r2, r3
 8002394:	4913      	ldr	r1, [pc, #76]	; (80023e4 <proc_sw_cmd+0x90>)
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f008 f9a2 	bl	800a6e0 <siscanf>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d113      	bne.n	80023ca <proc_sw_cmd+0x76>
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80023a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <proc_sw_cmd+0x84>)
 80023aa:	f008 fa24 	bl	800a7f6 <strncpy>
		sp_config.sp_limit = k_values;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <proc_sw_cmd+0x88>)
 80023b2:	6093      	str	r3, [r2, #8]
		MX_TIM3_Init1(sp_config);
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <proc_sw_cmd+0x88>)
 80023b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b8:	f001 f892 	bl	80034e0 <MX_TIM3_Init1>
		HAL_TIM_Base_Start_IT(&htim3);
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <proc_sw_cmd+0x8c>)
 80023be:	f004 fc67 	bl	8006c90 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023c2:	2028      	movs	r0, #40	; 0x28
 80023c4:	f002 ff31 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80023c8:	e002      	b.n	80023d0 <proc_sw_cmd+0x7c>
		send_UART("Invalid Sample instruction syntax.");
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <proc_sw_cmd+0x94>)
 80023cc:	f001 ffa4 	bl	8004318 <send_UART>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200145a8 	.word	0x200145a8
 80023dc:	20000090 	.word	0x20000090
 80023e0:	20018718 	.word	0x20018718
 80023e4:	0800f630 	.word	0x0800f630
 80023e8:	0800f274 	.word	0x0800f274

080023ec <proc_stw_cmd>:

void proc_stw_cmd(char* message)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	if(message[3] == '\r')
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3303      	adds	r3, #3
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b0d      	cmp	r3, #13
 80023fc:	d114      	bne.n	8002428 <proc_stw_cmd+0x3c>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <proc_stw_cmd+0x4c>)
 8002406:	f008 f9f6 	bl	800a7f6 <strncpy>
		HAL_TIM_Base_Stop_IT(&htim3);
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <proc_stw_cmd+0x50>)
 800240c:	f004 fcb8 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <proc_stw_cmd+0x54>)
 8002412:	f004 fcb5 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002416:	2028      	movs	r0, #40	; 0x28
 8002418:	f002 ff07 	bl	800522a <HAL_NVIC_EnableIRQ>
		reset_pulses();
 800241c:	f000 fd44 	bl	8002ea8 <reset_pulses>
		send_UART("Sampling Stopped.");
 8002420:	4808      	ldr	r0, [pc, #32]	; (8002444 <proc_stw_cmd+0x58>)
 8002422:	f001 ff79 	bl	8004318 <send_UART>
	}
	else
		send_UART("Invalid Stop Sampling instruction syntax.");
}
 8002426:	e002      	b.n	800242e <proc_stw_cmd+0x42>
		send_UART("Invalid Stop Sampling instruction syntax.");
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <proc_stw_cmd+0x5c>)
 800242a:	f001 ff75 	bl	8004318 <send_UART>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200145a8 	.word	0x200145a8
 800243c:	20018718 	.word	0x20018718
 8002440:	200186c8 	.word	0x200186c8
 8002444:	0800f298 	.word	0x0800f298
 8002448:	0800f2ac 	.word	0x0800f2ac

0800244c <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d202      	bcs.n	8002466 <memory_read+0x1a>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d901      	bls.n	800246a <memory_read+0x1e>
		return false;
 8002466:	2300      	movs	r3, #0
 8002468:	e01b      	b.n	80024a2 <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d901      	bls.n	800247a <memory_read+0x2e>
		return false;
 8002476:	2300      	movs	r3, #0
 8002478:	e013      	b.n	80024a2 <memory_read+0x56>

	for(int i = 0; i < length; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00b      	b.n	8002498 <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	60fa      	str	r2, [r7, #12]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	440a      	add	r2, r1
 800248c:	4908      	ldr	r1, [pc, #32]	; (80024b0 <memory_read+0x64>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8ef      	bhi.n	8002480 <memory_read+0x34>
	}

	return true;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000454 	.word	0x20000454

080024b4 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d208      	bcs.n	80024da <memory_write+0x26>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d805      	bhi.n	80024da <memory_write+0x26>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db02      	blt.n	80024da <memory_write+0x26>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	dd01      	ble.n	80024de <memory_write+0x2a>
		return false;
 80024da:	2300      	movs	r3, #0
 80024dc:	e019      	b.n	8002512 <memory_write+0x5e>

	if((0x10000 - addr) < length)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d901      	bls.n	80024ee <memory_write+0x3a>
		return false;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e011      	b.n	8002512 <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e009      	b.n	8002508 <memory_write+0x54>
	{
		memory[addr++] = data;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60fa      	str	r2, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	b2d1      	uxtb	r1, r2
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <memory_write+0x6c>)
 8002500:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8f1      	bhi.n	80024f4 <memory_write+0x40>
	}

	return true;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000454 	.word	0x20000454

08002524 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <make_pin_input+0x24>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b08      	cmp	r3, #8
 8002538:	d806      	bhi.n	8002548 <make_pin_input+0x24>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <make_pin_input+0x24>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d301      	bcc.n	800254c <make_pin_input+0x28>
		return false;
 8002548:	2300      	movs	r3, #0
 800254a:	e07f      	b.n	800264c <make_pin_input+0x128>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b05      	subs	r3, #5
 8002550:	2b06      	cmp	r3, #6
 8002552:	d85f      	bhi.n	8002614 <make_pin_input+0xf0>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <make_pin_input+0x38>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	08002579 	.word	0x08002579
 8002560:	08002615 	.word	0x08002615
 8002564:	08002593 	.word	0x08002593
 8002568:	080025ad 	.word	0x080025ad
 800256c:	080025c7 	.word	0x080025c7
 8002570:	080025e1 	.word	0x080025e1
 8002574:	080025fb 	.word	0x080025fb

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <make_pin_input+0x130>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a35      	ldr	r2, [pc, #212]	; (8002654 <make_pin_input+0x130>)
 800257e:	f043 0310 	orr.w	r3, r3, #16
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <make_pin_input+0x130>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	e040      	b.n	8002614 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <make_pin_input+0x130>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <make_pin_input+0x130>)
 8002598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <make_pin_input+0x130>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	e033      	b.n	8002614 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <make_pin_input+0x130>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <make_pin_input+0x130>)
 80025b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b6:	6313      	str	r3, [r2, #48]	; 0x30
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <make_pin_input+0x130>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	e026      	b.n	8002614 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80025c6:	4b23      	ldr	r3, [pc, #140]	; (8002654 <make_pin_input+0x130>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <make_pin_input+0x130>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <make_pin_input+0x130>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	e019      	b.n	8002614 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <make_pin_input+0x130>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <make_pin_input+0x130>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6313      	str	r3, [r2, #48]	; 0x30
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <make_pin_input+0x130>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	e00c      	b.n	8002614 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <make_pin_input+0x130>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <make_pin_input+0x130>)
 8002600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <make_pin_input+0x130>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262c:	2300      	movs	r3, #0
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <make_pin_input+0x134>)
 8002638:	4413      	add	r3, r2
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	461a      	mov	r2, r3
 800263e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f002 ff93 	bl	8005570 <HAL_GPIO_Init>

	return true;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3738      	adds	r7, #56	; 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	0010007f 	.word	0x0010007f

0800265c <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	; 0x38
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <make_pin_output+0x24>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d806      	bhi.n	8002680 <make_pin_output+0x24>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <make_pin_output+0x24>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d301      	bcc.n	8002684 <make_pin_output+0x28>
		return false;
 8002680:	2300      	movs	r3, #0
 8002682:	e081      	b.n	8002788 <make_pin_output+0x12c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b05      	subs	r3, #5
 8002688:	2b06      	cmp	r3, #6
 800268a:	d85f      	bhi.n	800274c <make_pin_output+0xf0>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <make_pin_output+0x38>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026b1 	.word	0x080026b1
 8002698:	0800274d 	.word	0x0800274d
 800269c:	080026cb 	.word	0x080026cb
 80026a0:	080026e5 	.word	0x080026e5
 80026a4:	080026ff 	.word	0x080026ff
 80026a8:	08002719 	.word	0x08002719
 80026ac:	08002733 	.word	0x08002733

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <make_pin_output+0x134>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a36      	ldr	r2, [pc, #216]	; (8002790 <make_pin_output+0x134>)
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <make_pin_output+0x134>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	e040      	b.n	800274c <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <make_pin_output+0x134>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a30      	ldr	r2, [pc, #192]	; (8002790 <make_pin_output+0x134>)
 80026d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <make_pin_output+0x134>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	e033      	b.n	800274c <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <make_pin_output+0x134>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a29      	ldr	r2, [pc, #164]	; (8002790 <make_pin_output+0x134>)
 80026ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <make_pin_output+0x134>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	e026      	b.n	800274c <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <make_pin_output+0x134>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <make_pin_output+0x134>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <make_pin_output+0x134>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	e019      	b.n	800274c <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <make_pin_output+0x134>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <make_pin_output+0x134>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6313      	str	r3, [r2, #48]	; 0x30
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <make_pin_output+0x134>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	e00c      	b.n	800274c <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <make_pin_output+0x134>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <make_pin_output+0x134>)
 8002738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <make_pin_output+0x134>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	; 0x30

	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <make_pin_output+0x138>)
 8002774:	4413      	add	r3, r2
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	461a      	mov	r2, r3
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f002 fef5 	bl	8005570 <HAL_GPIO_Init>

	return true;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3738      	adds	r7, #56	; 0x38
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	0010007f 	.word	0x0010007f

08002798 <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <read_dig_input+0x26>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d806      	bhi.n	80027be <read_dig_input+0x26>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <read_dig_input+0x26>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d301      	bcc.n	80027c2 <read_dig_input+0x2a>
		return false;
 80027be:	2300      	movs	r3, #0
 80027c0:	e02d      	b.n	800281e <read_dig_input+0x86>

	int mask = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e024      	b.n	8002816 <read_dig_input+0x7e>
	{
		if(pin_setting & mask)
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <read_dig_input+0x68>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <read_dig_input+0x90>)
 80027da:	4413      	add	r3, r2
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 80027e0:	2201      	movs	r2, #1
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	827b      	strh	r3, [r7, #18]

			pin_values[pin] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	18d4      	adds	r4, r2, r3
 80027f0:	8a7b      	ldrh	r3, [r7, #18]
 80027f2:	4619      	mov	r1, r3
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f003 f867 	bl	80058c8 <HAL_GPIO_ReadPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	7023      	strb	r3, [r4, #0]
 80027fe:	e004      	b.n	800280a <read_dig_input+0x72>
		}
		else
			pin_values[pin] = GPIO_PIN_RESET;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3301      	adds	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	ddd7      	ble.n	80027cc <read_dig_input+0x34>
	}

	return true;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	0010007f 	.word	0x0010007f

0800282c <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x08 || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <write_dig_output+0x2e>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d80a      	bhi.n	800285a <write_dig_output+0x2e>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <write_dig_output+0x2e>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d203      	bcs.n	800285a <write_dig_output+0x2e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d301      	bcc.n	800285e <write_dig_output+0x32>
		return false;
 800285a:	2300      	movs	r3, #0
 800285c:	e02a      	b.n	80028b4 <write_dig_output+0x88>

	int mask = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e021      	b.n	80028ac <write_dig_output+0x80>
	{
		if(pin_setting & mask)
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <write_dig_output+0x74>
		{
			GPIO_TypeDef* GPIOx = (GPIO_TypeDef*) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1)));
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <write_dig_output+0x90>)
 8002876:	4413      	add	r3, r2
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	617b      	str	r3, [r7, #20]
			uint16_t GPIO_Pin = (1 << pin);
 800287c:	2201      	movs	r2, #1
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	827b      	strh	r3, [r7, #18]
			GPIO_PinState PinState = (pin_values & mask) >> pin;
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	401a      	ands	r2, r3
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	747b      	strb	r3, [r7, #17]

			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8002894:	7c7a      	ldrb	r2, [r7, #17]
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	4619      	mov	r1, r3
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f003 f82c 	bl	80058f8 <HAL_GPIO_WritePin>
		}
		mask <<= 1;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	ddda      	ble.n	8002868 <write_dig_output+0x3c>
	}

	return true;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	0010007f 	.word	0x0010007f

080028c0 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d901      	bls.n	80028d4 <analog_read+0x14>
		return false;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e00b      	b.n	80028ec <analog_read+0x2c>

	MX_ADC3_Init1(true);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe f88b 	bl	80009f0 <MX_ADC3_Init1>
	config_ADC(addr3);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f9ba 	bl	8000c54 <config_ADC>
	*value = read_ADC();
 80028e0:	f7fe f9d6 	bl	8000c90 <read_ADC>
 80028e4:	4602      	mov	r2, r0
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	601a      	str	r2, [r3, #0]

	return true;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <analog_write>:

bool analog_write(unsigned int addr3, uint32_t value)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x01)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d901      	bls.n	8002908 <analog_write+0x14>
		return false;
 8002904:	2300      	movs	r3, #0
 8002906:	e01a      	b.n	800293e <analog_write+0x4a>

	if(HAL_DAC_Start(&hdac, (addr3 ? DAC_CHANNEL_2 : DAC_CHANNEL_1)) == HAL_OK){
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <analog_write+0x1e>
 800290e:	2310      	movs	r3, #16
 8002910:	e000      	b.n	8002914 <analog_write+0x20>
 8002912:	2300      	movs	r3, #0
 8002914:	4619      	mov	r1, r3
 8002916:	480c      	ldr	r0, [pc, #48]	; (8002948 <analog_write+0x54>)
 8002918:	f002 fcd1 	bl	80052be <HAL_DAC_Start>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <analog_write+0x48>
	    HAL_DAC_SetValue(&hdac, (addr3 ? DAC_CHANNEL_2 : DAC_CHANNEL_1), DAC_ALIGN_12B_R, value);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <analog_write+0x38>
 8002928:	2110      	movs	r1, #16
 800292a:	e000      	b.n	800292e <analog_write+0x3a>
 800292c:	2100      	movs	r1, #0
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <analog_write+0x54>)
 8002934:	f002 fd15 	bl	8005362 <HAL_DAC_SetValue>
	    return true;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <analog_write+0x4a>
	}else
		return false;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200186b0 	.word	0x200186b0

0800294c <process_buf_nf>:
	process_buf_ff

};

void process_buf_nf(uint32_t* x_buf, int n)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	y_buf[n] = x_buf[n];
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <process_buf_nf+0x34>)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	analog_write(0,y_buf[n]);
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <process_buf_nf+0x34>)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	4619      	mov	r1, r3
 8002972:	2000      	movs	r0, #0
 8002974:	f7ff ffbe 	bl	80028f4 <analog_write>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200146b0 	.word	0x200146b0
 8002984:	00000000 	.word	0x00000000

08002988 <process_buf_if>:

void process_buf_if(uint32_t* x_buf, int n)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

	y_buf[n+1] = a * y_buf[n] + (1-a) * x_buf[n];
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <process_buf_if+0x80>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80029a2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80029f8 <process_buf_if+0x70>
 80029a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80029bc:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8002a00 <process_buf_if+0x78>
 80029c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029d0:	ee17 1a90 	vmov	r1, s15
 80029d4:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <process_buf_if+0x80>)
 80029d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		temp += coef_bk[i] * x_buf[(n-i) & (ADC_BUF_SIZE - 1)];
	 }

	y_buf[n] = temp;
	*/
	analog_write(0,y_buf[n]);
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <process_buf_if+0x80>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	4619      	mov	r1, r3
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff ff85 	bl	80028f4 <analog_write>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	9999999a 	.word	0x9999999a
 80029fc:	3fd99999 	.word	0x3fd99999
 8002a00:	33333333 	.word	0x33333333
 8002a04:	3fe33333 	.word	0x3fe33333
 8002a08:	200146b0 	.word	0x200146b0

08002a0c <process_buf_ff>:

void process_buf_ff(uint32_t* x_buf, int n)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	unsigned int temp = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i < M; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	e023      	b.n	8002a68 <process_buf_ff+0x5c>
	{
		temp += coef[i] * x_buf[(n-i) & (ADC_BUF_SIZE - 1)];
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <process_buf_ff+0x84>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	edd3 6a00 	vldr	s13, [r3]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5c:	ee17 3a90 	vmov	r3, s15
 8002a60:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < M; i++)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b19      	cmp	r3, #25
 8002a6c:	ddd8      	ble.n	8002a20 <process_buf_ff+0x14>
	}
	y_buf[n] = temp;
 8002a6e:	4909      	ldr	r1, [pc, #36]	; (8002a94 <process_buf_ff+0x88>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	analog_write(0,y_buf[n]);
 8002a78:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <process_buf_ff+0x88>)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff ff36 	bl	80028f4 <analog_write>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200000a0 	.word	0x200000a0
 8002a94:	200146b0 	.word	0x200146b0

08002a98 <process_buf>:

void process_buf(uint32_t* x_buf, int n)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	process_buf_func[sp_config.filter_type](x_buf,n);
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <process_buf+0xc8>)
 8002aa4:	7b9b      	ldrb	r3, [r3, #14]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <process_buf+0xcc>)
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3

	counter ++;
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <process_buf+0xd0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <process_buf+0xd0>)
 8002abc:	6013      	str	r3, [r2, #0]

	if(sp_config.sp_limit > 0)
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <process_buf+0xc8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d047      	beq.n	8002b56 <process_buf+0xbe>
	{
		char message[22] = {"\0"};
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	821a      	strh	r2, [r3, #16]
		sprintf(message, "%d;%lu;%lu;", counter , x_buf[n], y_buf[n]);
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <process_buf+0xd0>)
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4820      	ldr	r0, [pc, #128]	; (8002b6c <process_buf+0xd4>)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002af0:	f107 0008 	add.w	r0, r7, #8
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	460a      	mov	r2, r1
 8002afa:	491d      	ldr	r1, [pc, #116]	; (8002b70 <process_buf+0xd8>)
 8002afc:	f007 fdd0 	bl	800a6a0 <siprintf>
		send_UART(message);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fc07 	bl	8004318 <send_UART>

		if(counter == sp_config.sp_limit)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <process_buf+0xc8>)
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <process_buf+0xd0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11f      	bne.n	8002b56 <process_buf+0xbe>
		{
			counter = 0;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <process_buf+0xd0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
			analog_write(0,0);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff fee8 	bl	80028f4 <analog_write>
			HAL_ADC_Stop_IT(&hadc3);
 8002b24:	4813      	ldr	r0, [pc, #76]	; (8002b74 <process_buf+0xdc>)
 8002b26:	f001 fe9b 	bl	8004860 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002b2a:	4813      	ldr	r0, [pc, #76]	; (8002b78 <process_buf+0xe0>)
 8002b2c:	f004 f928 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
		    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2102      	movs	r1, #2
 8002b34:	2012      	movs	r0, #18
 8002b36:	f002 fb5c 	bl	80051f2 <HAL_NVIC_SetPriority>
			while(is_transmitting_to_UART());
 8002b3a:	bf00      	nop
 8002b3c:	f001 fbc8 	bl	80042d0 <is_transmitting_to_UART>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1fa      	bne.n	8002b3c <process_buf+0xa4>
			HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2012      	movs	r0, #18
 8002b4c:	f002 fb51 	bl	80051f2 <HAL_NVIC_SetPriority>
			send_UART("Sampling Stopped.\n>");
 8002b50:	480a      	ldr	r0, [pc, #40]	; (8002b7c <process_buf+0xe4>)
 8002b52:	f001 fbe1 	bl	8004318 <send_UART>
		}
	}
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000090 	.word	0x20000090
 8002b64:	20000084 	.word	0x20000084
 8002b68:	2000031c 	.word	0x2000031c
 8002b6c:	200146b0 	.word	0x200146b0
 8002b70:	0800f638 	.word	0x0800f638
 8002b74:	20010458 	.word	0x20010458
 8002b78:	20018768 	.word	0x20018768
 8002b7c:	0800f644 	.word	0x0800f644

08002b80 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002b86:	463b      	mov	r3, r7
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_DAC_Init+0x60>)
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <MX_DAC_Init+0x64>)
 8002b92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002b94:	4812      	ldr	r0, [pc, #72]	; (8002be0 <MX_DAC_Init+0x60>)
 8002b96:	f002 fb70 	bl	800527a <HAL_DAC_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ba0:	f000 fa92 	bl	80030c8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	480b      	ldr	r0, [pc, #44]	; (8002be0 <MX_DAC_Init+0x60>)
 8002bb4:	f002 fbfa 	bl	80053ac <HAL_DAC_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002bbe:	f000 fa83 	bl	80030c8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_DAC_Init+0x60>)
 8002bca:	f002 fbef 	bl	80053ac <HAL_DAC_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002bd4:	f000 fa78 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200186b0 	.word	0x200186b0
 8002be4:	40007400 	.word	0x40007400

08002be8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <HAL_DAC_MspInit+0x74>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d123      	bne.n	8002c52 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_DAC_MspInit+0x78>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c3a:	2330      	movs	r3, #48	; 0x30
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	; (8002c64 <HAL_DAC_MspInit+0x7c>)
 8002c4e:	f002 fc8f 	bl	8005570 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40007400 	.word	0x40007400
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	; 0x30
 8002c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002c84:	f043 0320 	orr.w	r3, r3, #32
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c96:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a45      	ldr	r2, [pc, #276]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a3f      	ldr	r2, [pc, #252]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <MX_GPIO_Init+0x148>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|FW_Pin, GPIO_PIN_RESET);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f240 4101 	movw	r1, #1025	; 0x401
 8002d14:	4827      	ldr	r0, [pc, #156]	; (8002db4 <MX_GPIO_Init+0x14c>)
 8002d16:	f002 fdef 	bl	80058f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RV_GPIO_Port, RV_Pin, GPIO_PIN_RESET);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d20:	4825      	ldr	r0, [pc, #148]	; (8002db8 <MX_GPIO_Init+0x150>)
 8002d22:	f002 fde9 	bl	80058f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|FW_Pin;
 8002d26:	f240 4301 	movw	r3, #1025	; 0x401
 8002d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	481d      	ldr	r0, [pc, #116]	; (8002db4 <MX_GPIO_Init+0x14c>)
 8002d40:	f002 fc16 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d52:	f107 031c 	add.w	r3, r7, #28
 8002d56:	4619      	mov	r1, r3
 8002d58:	4817      	ldr	r0, [pc, #92]	; (8002db8 <MX_GPIO_Init+0x150>)
 8002d5a:	f002 fc09 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	4810      	ldr	r0, [pc, #64]	; (8002db8 <MX_GPIO_Init+0x150>)
 8002d76:	f002 fbfb 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RV_Pin;
 8002d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d80:	2301      	movs	r3, #1
 8002d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RV_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4809      	ldr	r0, [pc, #36]	; (8002db8 <MX_GPIO_Init+0x150>)
 8002d94:	f002 fbec 	bl	8005570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2028      	movs	r0, #40	; 0x28
 8002d9e:	f002 fa28 	bl	80051f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002da2:	2028      	movs	r0, #40	; 0x28
 8002da4:	f002 fa41 	bl	800522a <HAL_NVIC_EnableIRQ>

}
 8002da8:	bf00      	nop
 8002daa:	3730      	adds	r7, #48	; 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40021000 	.word	0x40021000

08002dbc <is_GPIO_pin_free>:
unsigned int pulses = 0;
bool read_dir;
unsigned int pulses_tim = 0;

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	//	ADC3 e DAC

	if(port_addr == 1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x603F)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	f246 033f 	movw	r3, #24639	; 0x603f
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <is_GPIO_pin_free+0x20>
			return false;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e028      	b.n	8002e2e <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d106      	bne.n	8002df0 <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <is_GPIO_pin_free+0x34>
			return false;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e01e      	b.n	8002e2e <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d106      	bne.n	8002e04 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <is_GPIO_pin_free+0x48>
			return false;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e014      	b.n	8002e2e <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d106      	bne.n	8002e18 <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <is_GPIO_pin_free+0x5c>
			return false;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e00a      	b.n	8002e2e <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d106      	bne.n	8002e2c <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <is_GPIO_pin_free+0x70>
			return false;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <is_GPIO_pin_free+0x72>

	return true;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
	read_dir = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8002e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e4a:	4812      	ldr	r0, [pc, #72]	; (8002e94 <HAL_GPIO_EXTI_Callback+0x58>)
 8002e4c:	f002 fd3c 	bl	80058c8 <HAL_GPIO_ReadPin>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002e5e:	701a      	strb	r2, [r3, #0]

	if(get_count_pulses_mode())
 8002e60:	f000 fe94 	bl	8003b8c <get_count_pulses_mode>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_EXTI_Callback+0x3a>
		pulses++;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_GPIO_EXTI_Callback+0x60>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <HAL_GPIO_EXTI_Callback+0x60>)
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_EXTI_Callback+0x48>
	else
	{
		pulses_tim = get_tim4_counter();
 8002e76:	f000 fe7d 	bl	8003b74 <get_tim4_counter>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <HAL_GPIO_EXTI_Callback+0x64>)
 8002e7e:	6013      	str	r3, [r2, #0]
		reset_tim4_counter();
 8002e80:	f000 fe6c 	bl	8003b5c <reset_tim4_counter>
	}


	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002e84:	2101      	movs	r1, #1
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0x68>)
 8002e88:	f002 fd4f 	bl	800592a <HAL_GPIO_TogglePin>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	200186c4 	.word	0x200186c4
 8002e9c:	20000330 	.word	0x20000330
 8002ea0:	20000334 	.word	0x20000334
 8002ea4:	40020400 	.word	0x40020400

08002ea8 <reset_pulses>:

void reset_pulses(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	pulses = 0;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <reset_pulses+0x14>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	20000330 	.word	0x20000330

08002ec0 <get_pulses_tim>:

float get_pulses_tim(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	return pulses_tim  * 0.05;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <get_pulses_tim+0x30>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ed0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8002ee8 <get_pulses_tim+0x28>
 8002ed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ed8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	9999999a 	.word	0x9999999a
 8002eec:	3fa99999 	.word	0x3fa99999
 8002ef0:	20000334 	.word	0x20000334

08002ef4 <get_n_pulses>:

unsigned int get_n_pulses(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	return pulses;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <get_n_pulses+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000330 	.word	0x20000330

08002f0c <blink_LED>:

void blink_LED()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002f10:	2101      	movs	r1, #1
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <blink_LED+0x20>)
 8002f14:	f002 fd09 	bl	800592a <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8002f18:	20c8      	movs	r0, #200	; 0xc8
 8002f1a:	f001 fb61 	bl	80045e0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <blink_LED+0x20>)
 8002f22:	f002 fd02 	bl	800592a <HAL_GPIO_TogglePin>
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40020400 	.word	0x40020400

08002f30 <get_dir>:

bool get_dir(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	return read_dir;
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <get_dir+0x14>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	200186c4 	.word	0x200186c4

08002f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0c2      	sub	sp, #264	; 0x108
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f4e:	f001 faea 	bl	8004526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f52:	f000 f84b 	bl	8002fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f56:	f7ff fe87 	bl	8002c68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002f5a:	f001 f8fb 	bl	8004154 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8002f5e:	f7fd fdab 	bl	8000ab8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002f62:	f000 fb7b 	bl	800365c <MX_TIM1_Init>
  MX_DAC_Init();
 8002f66:	f7ff fe0b 	bl	8002b80 <MX_DAC_Init>
  MX_TIM2_Init();
 8002f6a:	f000 fbcb 	bl	8003704 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f6e:	f000 fc3f 	bl	80037f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f72:	f000 fc8b 	bl	800388c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002f76:	2028      	movs	r0, #40	; 0x28
 8002f78:	f002 f965 	bl	8005246 <HAL_NVIC_DisableIRQ>
  reset_pulses();
 8002f7c:	f7ff ff94 	bl	8002ea8 <reset_pulses>

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002f80:	2201      	movs	r2, #1
 8002f82:	4916      	ldr	r1, [pc, #88]	; (8002fdc <main+0x94>)
 8002f84:	4816      	ldr	r0, [pc, #88]	; (8002fe0 <main+0x98>)
 8002f86:	f005 fa27 	bl	80083d8 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8002f8a:	4816      	ldr	r0, [pc, #88]	; (8002fe4 <main+0x9c>)
 8002f8c:	f001 f9c4 	bl	8004318 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 8002f90:	f001 f992 	bl	80042b8 <has_message_from_UART>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0fa      	beq.n	8002f90 <main+0x48>
	  {
		  blink_LED();
 8002f9a:	f7ff ffb7 	bl	8002f0c <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f9e3 	bl	800436c <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fefd 	bl	8000da8 <check_command>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8002fb4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <main+0xa0>)
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	1d3a      	adds	r2, r7, #4
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8002fc4:	bf00      	nop
 8002fc6:	f001 f983 	bl	80042d0 <is_transmitting_to_UART>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1fa      	bne.n	8002fc6 <main+0x7e>

		  reset_UART();
 8002fd0:	f001 f98a 	bl	80042e8 <reset_UART>
		  send_UART(PROMPT);
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <main+0x9c>)
 8002fd6:	f001 f99f 	bl	8004318 <send_UART>
	  if(has_message_from_UART())
 8002fda:	e7d9      	b.n	8002f90 <main+0x48>
 8002fdc:	20000350 	.word	0x20000350
 8002fe0:	20018820 	.word	0x20018820
 8002fe4:	0800f658 	.word	0x0800f658
 8002fe8:	20000008 	.word	0x20000008

08002fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b094      	sub	sp, #80	; 0x50
 8002ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	2234      	movs	r2, #52	; 0x34
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f006 fcfa 	bl	80099f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <SystemClock_Config+0xd4>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <SystemClock_Config+0xd4>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <SystemClock_Config+0xd4>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <SystemClock_Config+0xd8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <SystemClock_Config+0xd8>)
 800302e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <SystemClock_Config+0xd8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003040:	2302      	movs	r3, #2
 8003042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003044:	2301      	movs	r3, #1
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003048:	2310      	movs	r3, #16
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800304c:	2302      	movs	r3, #2
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003050:	2300      	movs	r3, #0
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003054:	2308      	movs	r3, #8
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800305c:	2302      	movs	r3, #2
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003060:	2304      	movs	r3, #4
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003064:	2302      	movs	r3, #2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fcdf 	bl	8005a30 <HAL_RCC_OscConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003078:	f000 f826 	bl	80030c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800307c:	f002 fc88 	bl	8005990 <HAL_PWREx_EnableOverDrive>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003086:	f000 f81f 	bl	80030c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800308a:	230f      	movs	r3, #15
 800308c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800308e:	2302      	movs	r3, #2
 8003090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800309a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800309c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	2106      	movs	r1, #6
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 ff6f 	bl	8005f8c <HAL_RCC_ClockConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80030b4:	f000 f808 	bl	80030c8 <Error_Handler>
  }
}
 80030b8:	bf00      	nop
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40007000 	.word	0x40007000

080030c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030cc:	b672      	cpsid	i
}
 80030ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <Error_Handler+0x8>
	...

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_MspInit+0x44>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <HAL_MspInit+0x44>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_MspInit+0x44>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_MspInit+0x44>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a08      	ldr	r2, [pc, #32]	; (8003118 <HAL_MspInit+0x44>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_MspInit+0x44>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800310a:	2005      	movs	r0, #5
 800310c:	f002 f866 	bl	80051dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800

0800311c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <NMI_Handler+0x4>

08003122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <HardFault_Handler+0x4>

08003128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <MemManage_Handler+0x4>

0800312e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <UsageFault_Handler+0x4>

0800313a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003168:	f001 fa1a 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <ADC_IRQHandler+0x10>)
 8003176:	f001 fbb1 	bl	80048dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20010458 	.word	0x20010458

08003184 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800318a:	f004 f803 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20018768 	.word	0x20018768

08003198 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM3_IRQHandler+0x10>)
 800319e:	f003 fff9 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20018718 	.word	0x20018718

080031ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <TIM4_IRQHandler+0x10>)
 80031b2:	f003 ffef 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200186c8 	.word	0x200186c8

080031c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <USART3_IRQHandler+0x10>)
 80031c6:	f005 f955 	bl	8008474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20018820 	.word	0x20018820

080031d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80031d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031dc:	f002 fbc0 	bl	8005960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
	return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_kill>:

int _kill(int pid, int sig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031fe:	f006 fbcf 	bl	80099a0 <__errno>
 8003202:	4603      	mov	r3, r0
 8003204:	2216      	movs	r2, #22
 8003206:	601a      	str	r2, [r3, #0]
	return -1;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_exit>:

void _exit (int status)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffe7 	bl	80031f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003226:	e7fe      	b.n	8003226 <_exit+0x12>

08003228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e00a      	b.n	8003250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323a:	f3af 8000 	nop.w
 800323e:	4601      	mov	r1, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	60ba      	str	r2, [r7, #8]
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf0      	blt.n	800323a <_read+0x12>
	}

return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e009      	b.n	8003288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf1      	blt.n	8003274 <_write+0x12>
	}
	return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_close>:

int _close(int file)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
	return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c2:	605a      	str	r2, [r3, #4]
	return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_isatty>:

int _isatty(int file)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
	return 1;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f006 fb34 	bl	80099a0 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20080000 	.word	0x20080000
 8003364:	00000400 	.word	0x00000400
 8003368:	20000338 	.word	0x20000338
 800336c:	200188b8 	.word	0x200188b8

08003370 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <MX_TIM1_Init1>:
unsigned int units = u_rpm;
float sp_period_s;
char* message;

void MX_TIM1_Init1(struct sp_config_t sp_config)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b093      	sub	sp, #76	; 0x4c
 8003398:	af00      	add	r7, sp, #0
 800339a:	463c      	mov	r4, r7
 800339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033be:	f107 0310 	add.w	r3, r7, #16
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
 80033ce:	2301      	movs	r3, #1
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40

	if(!strncmp(sp_config.timeunit,"us",2))
 80033d2:	463b      	mov	r3, r7
 80033d4:	330c      	adds	r3, #12
 80033d6:	2202      	movs	r2, #2
 80033d8:	493c      	ldr	r1, [pc, #240]	; (80034cc <MX_TIM1_Init1+0x138>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f007 f9f9 	bl	800a7d2 <strncmp>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <MX_TIM1_Init1+0x84>
	{
	}
	else if(!strncmp(sp_config.timeunit,"ms",2))
 80033e6:	463b      	mov	r3, r7
 80033e8:	330c      	adds	r3, #12
 80033ea:	2202      	movs	r2, #2
 80033ec:	4938      	ldr	r1, [pc, #224]	; (80034d0 <MX_TIM1_Init1+0x13c>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f007 f9ef 	bl	800a7d2 <strncmp>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <MX_TIM1_Init1+0x6e>
	{
		mul1 = 1000;
 80033fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003400:	e00a      	b.n	8003418 <MX_TIM1_Init1+0x84>
	}
	else if(!strncmp(sp_config.timeunit,"s",1))
 8003402:	7b3a      	ldrb	r2, [r7, #12]
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <MX_TIM1_Init1+0x140>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <MX_TIM1_Init1+0x84>
	{
		mul1 = 20000;
 800340e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
		mul2 = 50;
 8003414:	2332      	movs	r3, #50	; 0x32
 8003416:	643b      	str	r3, [r7, #64]	; 0x40
	}

	htim1.Instance = TIM1;
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <MX_TIM1_Init1+0x144>)
 800341a:	4a30      	ldr	r2, [pc, #192]	; (80034dc <MX_TIM1_Init1+0x148>)
 800341c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = (2 * mul1) - 1;
 800341e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003426:	6053      	str	r3, [r2, #4]
  	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <MX_TIM1_Init1+0x144>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  	htim1.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003432:	fb02 f203 	mul.w	r2, r2, r3
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	3b01      	subs	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003444:	60d3      	str	r3, [r2, #12]
  	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003446:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  	htim1.Init.RepetitionCounter = 0;
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <MX_TIM1_Init1+0x144>)
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003458:	481f      	ldr	r0, [pc, #124]	; (80034d8 <MX_TIM1_Init1+0x144>)
 800345a:	f003 fbc1 	bl	8006be0 <HAL_TIM_Base_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM1_Init1+0xd4>
  	{
  		Error_Handler();
 8003464:	f7ff fe30 	bl	80030c8 <Error_Handler>
  	}
  	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800346e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003472:	4619      	mov	r1, r3
 8003474:	4818      	ldr	r0, [pc, #96]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003476:	f004 f8c1 	bl	80075fc <HAL_TIM_ConfigClockSource>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM1_Init1+0xf0>
  	{
  		Error_Handler();
 8003480:	f7ff fe22 	bl	80030c8 <Error_Handler>
  	}
  	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
  	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8003488:	2310      	movs	r3, #16
 800348a:	623b      	str	r3, [r7, #32]
  	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800348c:	f107 031c 	add.w	r3, r7, #28
 8003490:	4619      	mov	r1, r3
 8003492:	4811      	ldr	r0, [pc, #68]	; (80034d8 <MX_TIM1_Init1+0x144>)
 8003494:	f004 f97c 	bl	8007790 <HAL_TIM_SlaveConfigSynchro>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM1_Init1+0x10e>
  	{
  		Error_Handler();
 800349e:	f7ff fe13 	bl	80030c8 <Error_Handler>
  	}
  	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034a2:	2320      	movs	r3, #32
 80034a4:	613b      	str	r3, [r7, #16]
  	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
  	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034ae:	f107 0310 	add.w	r3, r7, #16
 80034b2:	4619      	mov	r1, r3
 80034b4:	4808      	ldr	r0, [pc, #32]	; (80034d8 <MX_TIM1_Init1+0x144>)
 80034b6:	f004 fe27 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM1_Init1+0x130>
  	{
  		Error_Handler();
 80034c0:	f7ff fe02 	bl	80030c8 <Error_Handler>
  	}
}
 80034c4:	bf00      	nop
 80034c6:	374c      	adds	r7, #76	; 0x4c
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd90      	pop	{r4, r7, pc}
 80034cc:	0800f65c 	.word	0x0800f65c
 80034d0:	0800f660 	.word	0x0800f660
 80034d4:	0800f664 	.word	0x0800f664
 80034d8:	20018768 	.word	0x20018768
 80034dc:	40010000 	.word	0x40010000

080034e0 <MX_TIM3_Init1>:

void MX_TIM3_Init1(struct sp_config_t sp_config)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b08f      	sub	sp, #60	; 0x3c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	463c      	mov	r4, r7
 80034e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	frist_time = 1;
 80034ec:	4b54      	ldr	r3, [pc, #336]	; (8003640 <MX_TIM3_Init1+0x160>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034f2:	f107 0320 	add.w	r3, r7, #32
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 800350c:	2301      	movs	r3, #1
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
 8003510:	2301      	movs	r3, #1
 8003512:	633b      	str	r3, [r7, #48]	; 0x30

	if(!strncmp(sp_config.timeunit,"us",2))
 8003514:	463b      	mov	r3, r7
 8003516:	330c      	adds	r3, #12
 8003518:	2202      	movs	r2, #2
 800351a:	494a      	ldr	r1, [pc, #296]	; (8003644 <MX_TIM3_Init1+0x164>)
 800351c:	4618      	mov	r0, r3
 800351e:	f007 f958 	bl	800a7d2 <strncmp>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10e      	bne.n	8003546 <MX_TIM3_Init1+0x66>
	{
		sp_period_s = 0.000001 * sp_config.unit;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003532:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003630 <MX_TIM3_Init1+0x150>
 8003536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800353a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800353e:	4b42      	ldr	r3, [pc, #264]	; (8003648 <MX_TIM3_Init1+0x168>)
 8003540:	edc3 7a00 	vstr	s15, [r3]
 8003544:	e02e      	b.n	80035a4 <MX_TIM3_Init1+0xc4>
	}
	else if(!strncmp(sp_config.timeunit,"ms",2))
 8003546:	463b      	mov	r3, r7
 8003548:	330c      	adds	r3, #12
 800354a:	2202      	movs	r2, #2
 800354c:	493f      	ldr	r1, [pc, #252]	; (800364c <MX_TIM3_Init1+0x16c>)
 800354e:	4618      	mov	r0, r3
 8003550:	f007 f93f 	bl	800a7d2 <strncmp>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d111      	bne.n	800357e <MX_TIM3_Init1+0x9e>
	{
		sp_period_s = 0.001 * sp_config.unit;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003564:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8003638 <MX_TIM3_Init1+0x158>
 8003568:	ee27 7b06 	vmul.f64	d7, d7, d6
 800356c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <MX_TIM3_Init1+0x168>)
 8003572:	edc3 7a00 	vstr	s15, [r3]
		mul1 = 1000;
 8003576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	e012      	b.n	80035a4 <MX_TIM3_Init1+0xc4>
	}
	else if(!strncmp(sp_config.timeunit,"s",1))
 800357e:	7b3a      	ldrb	r2, [r7, #12]
 8003580:	4b33      	ldr	r3, [pc, #204]	; (8003650 <MX_TIM3_Init1+0x170>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <MX_TIM3_Init1+0xc4>
	{
		sp_period_s = 1 * sp_config.unit;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <MX_TIM3_Init1+0x168>)
 8003596:	edc3 7a00 	vstr	s15, [r3]
		mul1 = 20000;
 800359a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
		mul2 = 50;
 80035a0:	2332      	movs	r3, #50	; 0x32
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
	}

	htim3.Instance = TIM3;
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <MX_TIM3_Init1+0x178>)
 80035a8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4a28      	ldr	r2, [pc, #160]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035b2:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((sp_config.unit * 48 * mul2)-1) & 65535;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035be:	fb02 f203 	mul.w	r2, r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035d0:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035de:	481d      	ldr	r0, [pc, #116]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035e0:	f003 fafe 	bl	8006be0 <HAL_TIM_Base_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM3_Init1+0x10e>
	{
		Error_Handler();
 80035ea:	f7ff fd6d 	bl	80030c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f2:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035f4:	f107 0320 	add.w	r3, r7, #32
 80035f8:	4619      	mov	r1, r3
 80035fa:	4816      	ldr	r0, [pc, #88]	; (8003654 <MX_TIM3_Init1+0x174>)
 80035fc:	f003 fffe 	bl	80075fc <HAL_TIM_ConfigClockSource>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM3_Init1+0x12a>
	{
		Error_Handler();
 8003606:	f7ff fd5f 	bl	80030c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	480e      	ldr	r0, [pc, #56]	; (8003654 <MX_TIM3_Init1+0x174>)
 800361a:	f004 fd75 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM3_Init1+0x148>
	{
		Error_Handler();
 8003624:	f7ff fd50 	bl	80030c8 <Error_Handler>
	}
}
 8003628:	bf00      	nop
 800362a:	373c      	adds	r7, #60	; 0x3c
 800362c:	46bd      	mov	sp, r7
 800362e:	bd90      	pop	{r4, r7, pc}
 8003630:	a0b5ed8d 	.word	0xa0b5ed8d
 8003634:	3eb0c6f7 	.word	0x3eb0c6f7
 8003638:	d2f1a9fc 	.word	0xd2f1a9fc
 800363c:	3f50624d 	.word	0x3f50624d
 8003640:	2000011d 	.word	0x2000011d
 8003644:	0800f65c 	.word	0x0800f65c
 8003648:	20018764 	.word	0x20018764
 800364c:	0800f660 	.word	0x0800f660
 8003650:	0800f664 	.word	0x0800f664
 8003654:	20018718 	.word	0x20018718
 8003658:	40000400 	.word	0x40000400

0800365c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003662:	f107 0310 	add.w	r3, r7, #16
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <MX_TIM1_Init+0xa0>)
 800367c:	4a20      	ldr	r2, [pc, #128]	; (8003700 <MX_TIM1_Init+0xa4>)
 800367e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600;
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <MX_TIM1_Init+0xa0>)
 8003682:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <MX_TIM1_Init+0xa0>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <MX_TIM1_Init+0xa0>)
 8003690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <MX_TIM1_Init+0xa0>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800369c:	4b17      	ldr	r3, [pc, #92]	; (80036fc <MX_TIM1_Init+0xa0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <MX_TIM1_Init+0xa0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <MX_TIM1_Init+0xa0>)
 80036aa:	f003 fa99 	bl	8006be0 <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80036b4:	f7ff fd08 	bl	80030c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	4619      	mov	r1, r3
 80036c4:	480d      	ldr	r0, [pc, #52]	; (80036fc <MX_TIM1_Init+0xa0>)
 80036c6:	f003 ff99 	bl	80075fc <HAL_TIM_ConfigClockSource>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80036d0:	f7ff fcfa 	bl	80030c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036d4:	2320      	movs	r3, #32
 80036d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <MX_TIM1_Init+0xa0>)
 80036e6:	f004 fd0f 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80036f0:	f7ff fcea 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20018768 	.word	0x20018768
 8003700:	40010000 	.word	0x40010000

08003704 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800370a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003724:	463b      	mov	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	615a      	str	r2, [r3, #20]
 8003734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800373c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003740:	225f      	movs	r2, #95	; 0x5f
 8003742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <MX_TIM2_Init+0xe8>)
 800374c:	2263      	movs	r2, #99	; 0x63
 800374e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <MX_TIM2_Init+0xe8>)
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800375c:	4823      	ldr	r0, [pc, #140]	; (80037ec <MX_TIM2_Init+0xe8>)
 800375e:	f003 fa3f 	bl	8006be0 <HAL_TIM_Base_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003768:	f7ff fcae 	bl	80030c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003776:	4619      	mov	r1, r3
 8003778:	481c      	ldr	r0, [pc, #112]	; (80037ec <MX_TIM2_Init+0xe8>)
 800377a:	f003 ff3f 	bl	80075fc <HAL_TIM_ConfigClockSource>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003784:	f7ff fca0 	bl	80030c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003788:	4818      	ldr	r0, [pc, #96]	; (80037ec <MX_TIM2_Init+0xe8>)
 800378a:	f003 fb28 	bl	8006dde <HAL_TIM_PWM_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003794:	f7ff fc98 	bl	80030c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4811      	ldr	r0, [pc, #68]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037a8:	f004 fcae 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80037b2:	f7ff fc89 	bl	80030c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b6:	2360      	movs	r3, #96	; 0x60
 80037b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	220c      	movs	r2, #12
 80037ca:	4619      	mov	r1, r3
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037ce:	f003 fe01 	bl	80073d4 <HAL_TIM_PWM_ConfigChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80037d8:	f7ff fc76 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037dc:	4803      	ldr	r0, [pc, #12]	; (80037ec <MX_TIM2_Init+0xe8>)
 80037de:	f000 f913 	bl	8003a08 <HAL_TIM_MspPostInit>

}
 80037e2:	bf00      	nop
 80037e4:	3738      	adds	r7, #56	; 0x38
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200187b4 	.word	0x200187b4

080037f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <MX_TIM3_Init+0x94>)
 8003810:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <MX_TIM3_Init+0x98>)
 8003812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <MX_TIM3_Init+0x94>)
 8003816:	2260      	movs	r2, #96	; 0x60
 8003818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <MX_TIM3_Init+0x94>)
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1-1;
 8003820:	4b18      	ldr	r3, [pc, #96]	; (8003884 <MX_TIM3_Init+0x94>)
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <MX_TIM3_Init+0x94>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <MX_TIM3_Init+0x94>)
 800382e:	2200      	movs	r2, #0
 8003830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003832:	4814      	ldr	r0, [pc, #80]	; (8003884 <MX_TIM3_Init+0x94>)
 8003834:	f003 f9d4 	bl	8006be0 <HAL_TIM_Base_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800383e:	f7ff fc43 	bl	80030c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	4619      	mov	r1, r3
 800384e:	480d      	ldr	r0, [pc, #52]	; (8003884 <MX_TIM3_Init+0x94>)
 8003850:	f003 fed4 	bl	80075fc <HAL_TIM_ConfigClockSource>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800385a:	f7ff fc35 	bl	80030c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4806      	ldr	r0, [pc, #24]	; (8003884 <MX_TIM3_Init+0x94>)
 800386c:	f004 fc4c 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003876:	f7ff fc27 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20018718 	.word	0x20018718
 8003888:	40000400 	.word	0x40000400

0800388c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <MX_TIM4_Init+0x94>)
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <MX_TIM4_Init+0x98>)
 80038ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <MX_TIM4_Init+0x94>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <MX_TIM4_Init+0x94>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (48 * 50)-1;
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <MX_TIM4_Init+0x94>)
 80038be:	f640 125f 	movw	r2, #2399	; 0x95f
 80038c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <MX_TIM4_Init+0x94>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <MX_TIM4_Init+0x94>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038d0:	4813      	ldr	r0, [pc, #76]	; (8003920 <MX_TIM4_Init+0x94>)
 80038d2:	f003 f985 	bl	8006be0 <HAL_TIM_Base_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80038dc:	f7ff fbf4 	bl	80030c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	4619      	mov	r1, r3
 80038ec:	480c      	ldr	r0, [pc, #48]	; (8003920 <MX_TIM4_Init+0x94>)
 80038ee:	f003 fe85 	bl	80075fc <HAL_TIM_ConfigClockSource>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80038f8:	f7ff fbe6 	bl	80030c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4805      	ldr	r0, [pc, #20]	; (8003920 <MX_TIM4_Init+0x94>)
 800390a:	f004 fbfd 	bl	8008108 <HAL_TIMEx_MasterConfigSynchronization>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003914:	f7ff fbd8 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003918:	bf00      	nop
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200186c8 	.word	0x200186c8
 8003924:	40000800 	.word	0x40000800

08003928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_TIM_Base_MspInit+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d114      	bne.n	8003964 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2101      	movs	r1, #1
 8003956:	2019      	movs	r0, #25
 8003958:	f001 fc4b 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800395c:	2019      	movs	r0, #25
 800395e:	f001 fc64 	bl	800522a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003962:	e044      	b.n	80039ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d10c      	bne.n	8003988 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
}
 8003986:	e032      	b.n	80039ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_TIM_Base_MspInit+0xd8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d114      	bne.n	80039bc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2101      	movs	r1, #1
 80039ae:	201d      	movs	r0, #29
 80039b0:	f001 fc1f 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039b4:	201d      	movs	r0, #29
 80039b6:	f001 fc38 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80039ba:	e018      	b.n	80039ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_TIM_Base_MspInit+0xdc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_TIM_Base_MspInit+0xd4>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2101      	movs	r1, #1
 80039e2:	201e      	movs	r0, #30
 80039e4:	f001 fc05 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039e8:	201e      	movs	r0, #30
 80039ea:	f001 fc1e 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800

08003a08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d11c      	bne.n	8003a64 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_TIM_MspPostInit+0x64>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_TIM_MspPostInit+0x64>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_TIM_MspPostInit+0x64>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8003a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4804      	ldr	r0, [pc, #16]	; (8003a70 <HAL_TIM_MspPostInit+0x68>)
 8003a60:	f001 fd86 	bl	8005570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a64:	bf00      	nop
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020400 	.word	0x40020400

08003a74 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d105      	bne.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		tim4_counter++;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a8c:	6013      	str	r3, [r2, #0]

		process_units[units]();
		frist_time = 0;
		reset_pulses();
	}
}
 8003a8e:	e04f      	b.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0xbc>
	}else if (htim == &htim3)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d14b      	bne.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0xbc>
		if(!count_pulses_mode && ((60 / get_pulses_tim()) > 35) && !frist_time)
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01e      	beq.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x70>
 8003aa6:	f7ff fa0b 	bl	8002ec0 <get_pulses_tim>
 8003aaa:	eeb0 7a40 	vmov.f32	s14, s0
 8003aae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b48 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8003ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003b4c <HAL_TIM_PeriodElapsedCallback+0xd8>
 8003aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	dd0f      	ble.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x70>
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	f083 0301 	eor.w	r3, r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x70>
			count_pulses_mode = 1;
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
			reset_tim4_counter();
 8003ad8:	f000 f840 	bl	8003b5c <reset_tim4_counter>
			HAL_TIM_Base_Stop_IT(&htim4);
 8003adc:	4816      	ldr	r0, [pc, #88]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003ade:	f003 f94f 	bl	8006d80 <HAL_TIM_Base_Stop_IT>
 8003ae2:	e01a      	b.n	8003b1a <HAL_TIM_PeriodElapsedCallback+0xa6>
		}else if(count_pulses_mode && get_n_pulses() < LM_EN && !frist_time)
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d016      	beq.n	8003b1a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8003aec:	f7ff fa02 	bl	8002ef4 <get_n_pulses>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003af6:	d210      	bcs.n	8003b1a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_TIM_PeriodElapsedCallback+0xa6>
			count_pulses_mode = 0;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
			reset_pulses();
 8003b0c:	f7ff f9cc 	bl	8002ea8 <reset_pulses>
			MX_TIM4_Init();
 8003b10:	f7ff febc 	bl	800388c <MX_TIM4_Init>
			HAL_TIM_Base_Start_IT(&htim4);
 8003b14:	4808      	ldr	r0, [pc, #32]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003b16:	f003 f8bb 	bl	8006c90 <HAL_TIM_Base_Start_IT>
		process_units[units]();
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	4798      	blx	r3
		frist_time = 0;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
		reset_pulses();
 8003b2c:	f7ff f9bc 	bl	8002ea8 <reset_pulses>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200186c8 	.word	0x200186c8
 8003b3c:	20000340 	.word	0x20000340
 8003b40:	20018718 	.word	0x20018718
 8003b44:	2000011c 	.word	0x2000011c
 8003b48:	42700000 	.word	0x42700000
 8003b4c:	420c0000 	.word	0x420c0000
 8003b50:	2000011d 	.word	0x2000011d
 8003b54:	20000344 	.word	0x20000344
 8003b58:	2000010c 	.word	0x2000010c

08003b5c <reset_tim4_counter>:

void reset_tim4_counter(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
	tim4_counter = 0;
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <reset_tim4_counter+0x14>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000340 	.word	0x20000340

08003b74 <get_tim4_counter>:

unsigned int get_tim4_counter()
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
	return tim4_counter;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <get_tim4_counter+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000340 	.word	0x20000340

08003b8c <get_count_pulses_mode>:

bool get_count_pulses_mode(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	return count_pulses_mode;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <get_count_pulses_mode+0x14>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000011c 	.word	0x2000011c
 8003ba4:	00000000 	.word	0x00000000

08003ba8 <process_units_rads>:
		process_units_hz,
		process_units_rads
};

void process_units_rads()
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	ed2d 8b02 	vpush	{d8}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af02      	add	r7, sp, #8

	if(count_pulses_mode)
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <process_units_rads+0x140>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <process_units_rads+0x4c>
		speed = (get_n_pulses() * PI * 2.0) / (960.0  * sp_period_s) ;
 8003bba:	f7ff f99b 	bl	8002ef4 <get_n_pulses>
 8003bbe:	ee07 0a90 	vmov	s15, r0
 8003bc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003bc6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8003cd0 <process_units_rads+0x128>
 8003bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bce:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003bd2:	4b46      	ldr	r3, [pc, #280]	; (8003cec <process_units_rads+0x144>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bdc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003cd8 <process_units_rads+0x130>
 8003be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003be4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <process_units_rads+0x148>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]
 8003bf2:	e01b      	b.n	8003c2c <process_units_rads+0x84>
	else
	{
		speed = (2.0 * PI) / (get_pulses_tim());
 8003bf4:	f7ff f964 	bl	8002ec0 <get_pulses_tim>
 8003bf8:	eef0 7a40 	vmov.f32	s15, s0
 8003bfc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c00:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003ce0 <process_units_rads+0x138>
 8003c04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <process_units_rads+0x148>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 8003c12:	f7ff f955 	bl	8002ec0 <get_pulses_tim>
 8003c16:	eef0 7a40 	vmov.f32	s15, s0
 8003c1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d103      	bne.n	8003c2c <process_units_rads+0x84>
			speed = 0;
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <process_units_rads+0x148>)
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <process_units_rads+0x14c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	4930      	ldr	r1, [pc, #192]	; (8003cf4 <process_units_rads+0x14c>)
 8003c34:	600a      	str	r2, [r1, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <process_units_rads+0x148>)
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	492e      	ldr	r1, [pc, #184]	; (8003cf8 <process_units_rads+0x150>)
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	601a      	str	r2, [r3, #0]

	float temp = 0;
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	e018      	b.n	8003c84 <process_units_rads+0xdc>
		{
			temp += 0.125 * speed_buffer[i];
 8003c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <process_units_rads+0x150>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c6a:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8003c6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003c72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c7a:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	dde3      	ble.n	8003c52 <process_units_rads+0xaa>
		}
	speed = temp;
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <process_units_rads+0x148>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rads %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <process_units_rads+0x154>)
 8003c92:	681c      	ldr	r4, [r3, #0]
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <process_units_rads+0x148>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003c9e:	f7ff f947 	bl	8002f30 <get_dir>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <process_units_rads+0x140>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	9200      	str	r2, [sp, #0]
 8003cae:	ec53 2b18 	vmov	r2, r3, d8
 8003cb2:	4913      	ldr	r1, [pc, #76]	; (8003d00 <process_units_rads+0x158>)
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f006 fcf3 	bl	800a6a0 <siprintf>
	send_UART(message);
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <process_units_rads+0x154>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fb2a 	bl	8004318 <send_UART>
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	ecbd 8b02 	vpop	{d8}
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	f01b866e 	.word	0xf01b866e
 8003cd4:	400921f9 	.word	0x400921f9
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	408e0000 	.word	0x408e0000
 8003ce0:	f01b866e 	.word	0xf01b866e
 8003ce4:	401921f9 	.word	0x401921f9
 8003ce8:	2000011c 	.word	0x2000011c
 8003cec:	20018764 	.word	0x20018764
 8003cf0:	20000328 	.word	0x20000328
 8003cf4:	2000033c 	.word	0x2000033c
 8003cf8:	20018800 	.word	0x20018800
 8003cfc:	20018714 	.word	0x20018714
 8003d00:	0800f668 	.word	0x0800f668
 8003d04:	00000000 	.word	0x00000000

08003d08 <process_units_rps>:

void process_units_rps()
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	ed2d 8b02 	vpush	{d8}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 8003d12:	4b45      	ldr	r3, [pc, #276]	; (8003e28 <process_units_rps+0x120>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <process_units_rps+0x40>
		speed = (get_n_pulses()) / (960.0  * sp_period_s);
 8003d1a:	f7ff f8eb 	bl	8002ef4 <get_n_pulses>
 8003d1e:	ee07 0a90 	vmov	s15, r0
 8003d22:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <process_units_rps+0x124>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d30:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8003e20 <process_units_rps+0x118>
 8003d34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003d38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <process_units_rps+0x128>)
 8003d42:	edc3 7a00 	vstr	s15, [r3]
 8003d46:	e017      	b.n	8003d78 <process_units_rps+0x70>
	else
	{
		speed = 1.0 / (get_pulses_tim());
 8003d48:	f7ff f8ba 	bl	8002ec0 <get_pulses_tim>
 8003d4c:	eeb0 7a40 	vmov.f32	s14, s0
 8003d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <process_units_rps+0x128>)
 8003d5a:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 8003d5e:	f7ff f8af 	bl	8002ec0 <get_pulses_tim>
 8003d62:	eef0 7a40 	vmov.f32	s15, s0
 8003d66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d103      	bne.n	8003d78 <process_units_rps+0x70>
			speed = 0;
 8003d70:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <process_units_rps+0x128>)
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <process_units_rps+0x12c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <process_units_rps+0x12c>)
 8003d80:	600a      	str	r2, [r1, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <process_units_rps+0x128>)
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	492b      	ldr	r1, [pc, #172]	; (8003e38 <process_units_rps+0x130>)
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	601a      	str	r2, [r3, #0]

	float temp = 0;
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	e018      	b.n	8003dd0 <process_units_rps+0xc8>
		{
			temp += 0.125 * speed_buffer[i];
 8003d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003da2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003da6:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <process_units_rps+0x130>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db6:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8003dba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003dbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dc6:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b07      	cmp	r3, #7
 8003dd4:	dde3      	ble.n	8003d9e <process_units_rps+0x96>
		}
	speed = temp;
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <process_units_rps+0x128>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rps %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <process_units_rps+0x134>)
 8003dde:	681c      	ldr	r4, [r3, #0]
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <process_units_rps+0x128>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003dea:	f7ff f8a1 	bl	8002f30 <get_dir>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <process_units_rps+0x120>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	9200      	str	r2, [sp, #0]
 8003dfa:	ec53 2b18 	vmov	r2, r3, d8
 8003dfe:	4910      	ldr	r1, [pc, #64]	; (8003e40 <process_units_rps+0x138>)
 8003e00:	4620      	mov	r0, r4
 8003e02:	f006 fc4d 	bl	800a6a0 <siprintf>
	send_UART(message);
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <process_units_rps+0x134>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa84 	bl	8004318 <send_UART>
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	ecbd 8b02 	vpop	{d8}
 8003e1a:	bd90      	pop	{r4, r7, pc}
 8003e1c:	f3af 8000 	nop.w
 8003e20:	00000000 	.word	0x00000000
 8003e24:	408e0000 	.word	0x408e0000
 8003e28:	2000011c 	.word	0x2000011c
 8003e2c:	20018764 	.word	0x20018764
 8003e30:	20000328 	.word	0x20000328
 8003e34:	2000033c 	.word	0x2000033c
 8003e38:	20018800 	.word	0x20018800
 8003e3c:	20018714 	.word	0x20018714
 8003e40:	0800f67c 	.word	0x0800f67c
 8003e44:	00000000 	.word	0x00000000

08003e48 <process_units_hz>:

void process_units_hz()
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	ed2d 8b02 	vpush	{d8}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 8003e52:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <process_units_hz+0x120>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <process_units_hz+0x40>
		speed = (get_n_pulses()) / (960.0  * sp_period_s);
 8003e5a:	f7ff f84b 	bl	8002ef4 <get_n_pulses>
 8003e5e:	ee07 0a90 	vmov	s15, r0
 8003e62:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <process_units_hz+0x124>)
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e70:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8003f60 <process_units_hz+0x118>
 8003e74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <process_units_hz+0x128>)
 8003e82:	edc3 7a00 	vstr	s15, [r3]
 8003e86:	e017      	b.n	8003eb8 <process_units_hz+0x70>
	else
	{
		speed = (1.0) / (get_pulses_tim());
 8003e88:	f7ff f81a 	bl	8002ec0 <get_pulses_tim>
 8003e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8003e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <process_units_hz+0x128>)
 8003e9a:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 8003e9e:	f7ff f80f 	bl	8002ec0 <get_pulses_tim>
 8003ea2:	eef0 7a40 	vmov.f32	s15, s0
 8003ea6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	d103      	bne.n	8003eb8 <process_units_hz+0x70>
			speed = 0;
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <process_units_hz+0x128>)
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
	}
	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <process_units_hz+0x12c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	492d      	ldr	r1, [pc, #180]	; (8003f74 <process_units_hz+0x12c>)
 8003ec0:	600a      	str	r2, [r1, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <process_units_hz+0x128>)
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	492b      	ldr	r1, [pc, #172]	; (8003f78 <process_units_hz+0x130>)
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	601a      	str	r2, [r3, #0]

	float temp = 0;
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	e018      	b.n	8003f10 <process_units_hz+0xc8>
		{
			temp += 0.125 * speed_buffer[i];
 8003ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ee2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ee6:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <process_units_hz+0x130>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ef6:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8003efa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003efe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f06:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b07      	cmp	r3, #7
 8003f14:	dde3      	ble.n	8003ede <process_units_hz+0x96>
		}
	speed = temp;
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <process_units_hz+0x128>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "hz %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <process_units_hz+0x134>)
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <process_units_hz+0x128>)
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003f2a:	f7ff f801 	bl	8002f30 <get_dir>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <process_units_hz+0x120>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	9200      	str	r2, [sp, #0]
 8003f3a:	ec53 2b18 	vmov	r2, r3, d8
 8003f3e:	4910      	ldr	r1, [pc, #64]	; (8003f80 <process_units_hz+0x138>)
 8003f40:	4620      	mov	r0, r4
 8003f42:	f006 fbad 	bl	800a6a0 <siprintf>
	send_UART(message);
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <process_units_hz+0x134>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f9e4 	bl	8004318 <send_UART>
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	ecbd 8b02 	vpop	{d8}
 8003f5a:	bd90      	pop	{r4, r7, pc}
 8003f5c:	f3af 8000 	nop.w
 8003f60:	00000000 	.word	0x00000000
 8003f64:	408e0000 	.word	0x408e0000
 8003f68:	2000011c 	.word	0x2000011c
 8003f6c:	20018764 	.word	0x20018764
 8003f70:	20000328 	.word	0x20000328
 8003f74:	2000033c 	.word	0x2000033c
 8003f78:	20018800 	.word	0x20018800
 8003f7c:	20018714 	.word	0x20018714
 8003f80:	0800f690 	.word	0x0800f690
 8003f84:	00000000 	.word	0x00000000

08003f88 <process_units_rpm>:

void process_units_rpm()
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	ed2d 8b02 	vpush	{d8}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af02      	add	r7, sp, #8
	if(count_pulses_mode)
 8003f92:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <process_units_rpm+0x130>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01a      	beq.n	8003fd0 <process_units_rpm+0x48>
		speed = (get_n_pulses() * 60.0 ) / (960.0 * sp_period_s) ;
 8003f9a:	f7fe ffab 	bl	8002ef4 <get_n_pulses>
 8003f9e:	ee07 0a90 	vmov	s15, r0
 8003fa2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003fa6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80040a8 <process_units_rpm+0x120>
 8003faa:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <process_units_rpm+0x134>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fb8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80040b0 <process_units_rpm+0x128>
 8003fbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003fc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003fc4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <process_units_rpm+0x138>)
 8003fca:	edc3 7a00 	vstr	s15, [r3]
 8003fce:	e017      	b.n	8004000 <process_units_rpm+0x78>
	else
	{
		speed = (60.0) / (get_pulses_tim());
 8003fd0:	f7fe ff76 	bl	8002ec0 <get_pulses_tim>
 8003fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8003fd8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80040c4 <process_units_rpm+0x13c>
 8003fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe0:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <process_units_rpm+0x138>)
 8003fe2:	edc3 7a00 	vstr	s15, [r3]

		if(get_pulses_tim() == 0)
 8003fe6:	f7fe ff6b 	bl	8002ec0 <get_pulses_tim>
 8003fea:	eef0 7a40 	vmov.f32	s15, s0
 8003fee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff6:	d103      	bne.n	8004000 <process_units_rpm+0x78>
			speed = 0;
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <process_units_rpm+0x138>)
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
	}

	speed_buffer[speed_buffer_index++ & (SPEED_BUFF_SIZE - 1)] = speed;
 8004000:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <process_units_rpm+0x140>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	4930      	ldr	r1, [pc, #192]	; (80040c8 <process_units_rpm+0x140>)
 8004008:	600a      	str	r2, [r1, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <process_units_rpm+0x138>)
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	492e      	ldr	r1, [pc, #184]	; (80040cc <process_units_rpm+0x144>)
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	601a      	str	r2, [r3, #0]

	float temp = 0;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	607b      	str	r3, [r7, #4]

	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	e018      	b.n	8004058 <process_units_rpm+0xd0>
		{
			temp += 0.125 * speed_buffer[i];
 8004026:	edd7 7a01 	vldr	s15, [r7, #4]
 800402a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800402e:	4a27      	ldr	r2, [pc, #156]	; (80040cc <process_units_rpm+0x144>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800403e:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8004042:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004046:	ee36 7b07 	vadd.f64	d7, d6, d7
 800404a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800404e:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0 ; i < SPEED_BUFF_SIZE; i++)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b07      	cmp	r3, #7
 800405c:	dde3      	ble.n	8004026 <process_units_rpm+0x9e>
		}
	speed = temp;
 800405e:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <process_units_rpm+0x138>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6013      	str	r3, [r2, #0]

	sprintf((char*) message, "rpm %.2f D%d M%d", speed, get_dir(),count_pulses_mode);
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <process_units_rpm+0x148>)
 8004066:	681c      	ldr	r4, [r3, #0]
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <process_units_rpm+0x138>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004072:	f7fe ff5d 	bl	8002f30 <get_dir>
 8004076:	4603      	mov	r3, r0
 8004078:	461a      	mov	r2, r3
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <process_units_rpm+0x130>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	9200      	str	r2, [sp, #0]
 8004082:	ec53 2b18 	vmov	r2, r3, d8
 8004086:	4913      	ldr	r1, [pc, #76]	; (80040d4 <process_units_rpm+0x14c>)
 8004088:	4620      	mov	r0, r4
 800408a:	f006 fb09 	bl	800a6a0 <siprintf>
	send_UART(message);
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <process_units_rpm+0x148>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f940 	bl	8004318 <send_UART>
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	ecbd 8b02 	vpop	{d8}
 80040a2:	bd90      	pop	{r4, r7, pc}
 80040a4:	f3af 8000 	nop.w
 80040a8:	00000000 	.word	0x00000000
 80040ac:	404e0000 	.word	0x404e0000
 80040b0:	00000000 	.word	0x00000000
 80040b4:	408e0000 	.word	0x408e0000
 80040b8:	2000011c 	.word	0x2000011c
 80040bc:	20018764 	.word	0x20018764
 80040c0:	20000328 	.word	0x20000328
 80040c4:	42700000 	.word	0x42700000
 80040c8:	2000033c 	.word	0x2000033c
 80040cc:	20018800 	.word	0x20018800
 80040d0:	20018714 	.word	0x20018714
 80040d4:	0800f6a0 	.word	0x0800f6a0

080040d8 <set_units>:

void set_units(char s_units[5])
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	if(strcmp(s_units,"hz") == 0)
 80040e0:	4917      	ldr	r1, [pc, #92]	; (8004140 <set_units+0x68>)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc f8ac 	bl	8000240 <strcmp>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <set_units+0x1e>
		units = u_hz;
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <set_units+0x6c>)
 80040f0:	2202      	movs	r2, #2
 80040f2:	601a      	str	r2, [r3, #0]
		units = u_rps;
	else if(strcmp(s_units,"rads") == 0)
		units = u_rads;
	else if(strcmp(s_units,"rpm") == 0)
		units = u_rpm;
}
 80040f4:	e01f      	b.n	8004136 <set_units+0x5e>
	else if(strcmp(s_units,"rps") == 0)
 80040f6:	4914      	ldr	r1, [pc, #80]	; (8004148 <set_units+0x70>)
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fc f8a1 	bl	8000240 <strcmp>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <set_units+0x34>
		units = u_rps;
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <set_units+0x6c>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	e014      	b.n	8004136 <set_units+0x5e>
	else if(strcmp(s_units,"rads") == 0)
 800410c:	490f      	ldr	r1, [pc, #60]	; (800414c <set_units+0x74>)
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc f896 	bl	8000240 <strcmp>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <set_units+0x4a>
		units = u_rads;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <set_units+0x6c>)
 800411c:	2203      	movs	r2, #3
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	e009      	b.n	8004136 <set_units+0x5e>
	else if(strcmp(s_units,"rpm") == 0)
 8004122:	490b      	ldr	r1, [pc, #44]	; (8004150 <set_units+0x78>)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fc f88b 	bl	8000240 <strcmp>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <set_units+0x5e>
		units = u_rpm;
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <set_units+0x6c>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	0800f6b4 	.word	0x0800f6b4
 8004144:	20000344 	.word	0x20000344
 8004148:	0800f6b8 	.word	0x0800f6b8
 800414c:	0800f6bc 	.word	0x0800f6bc
 8004150:	0800f6c4 	.word	0x0800f6c4

08004154 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <MX_USART3_UART_Init+0x74>)
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <MX_USART3_UART_Init+0x78>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <MX_USART3_UART_Init+0x7c>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <MX_USART3_UART_Init+0x80>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <MX_USART3_UART_Init+0x84>)
 8004172:	220d      	movs	r2, #13
 8004174:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <MX_USART3_UART_Init+0x88>)
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <MX_USART3_UART_Init+0x8c>)
 800417a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <MX_USART3_UART_Init+0x88>)
 800417e:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <MX_USART3_UART_Init+0x90>)
 8004180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004182:	4b16      	ldr	r3, [pc, #88]	; (80041dc <MX_USART3_UART_Init+0x88>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <MX_USART3_UART_Init+0x88>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <MX_USART3_UART_Init+0x88>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <MX_USART3_UART_Init+0x88>)
 8004196:	220c      	movs	r2, #12
 8004198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <MX_USART3_UART_Init+0x88>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MX_USART3_UART_Init+0x88>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <MX_USART3_UART_Init+0x88>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <MX_USART3_UART_Init+0x88>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041b2:	480a      	ldr	r0, [pc, #40]	; (80041dc <MX_USART3_UART_Init+0x88>)
 80041b4:	f004 f854 	bl	8008260 <HAL_UART_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 80041be:	f7fe ff83 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	200104a4 	.word	0x200104a4
 80041cc:	200146a8 	.word	0x200146a8
 80041d0:	200104a0 	.word	0x200104a0
 80041d4:	200146ac 	.word	0x200146ac
 80041d8:	200104a8 	.word	0x200104a8
 80041dc:	20018820 	.word	0x20018820
 80041e0:	40004800 	.word	0x40004800
 80041e4:	001ab3f0 	.word	0x001ab3f0

080041e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0ae      	sub	sp, #184	; 0xb8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	2290      	movs	r2, #144	; 0x90
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f005 fbf3 	bl	80099f4 <memset>
  if(uartHandle->Instance==USART3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_UART_MspInit+0xc4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d144      	bne.n	80042a2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800421c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800421e:	2300      	movs	r3, #0
 8004220:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4618      	mov	r0, r3
 8004228:	f002 f8b2 	bl	8006390 <HAL_RCCEx_PeriphCLKConfig>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004232:	f7fe ff49 	bl	80030c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800424e:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 8004254:	f043 0308 	orr.w	r3, r3, #8
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_UART_MspInit+0xc8>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800426a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427a:	2303      	movs	r3, #3
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004280:	2307      	movs	r3, #7
 8004282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004286:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800428a:	4619      	mov	r1, r3
 800428c:	4809      	ldr	r0, [pc, #36]	; (80042b4 <HAL_UART_MspInit+0xcc>)
 800428e:	f001 f96f 	bl	8005570 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2102      	movs	r1, #2
 8004296:	2027      	movs	r0, #39	; 0x27
 8004298:	f000 ffab 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800429c:	2027      	movs	r0, #39	; 0x27
 800429e:	f000 ffc4 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042a2:	bf00      	nop
 80042a4:	37b8      	adds	r7, #184	; 0xb8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40004800 	.word	0x40004800
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40020c00 	.word	0x40020c00

080042b8 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
	return flagCPP;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <has_message_from_UART+0x14>)
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	200104a4 	.word	0x200104a4

080042d0 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
	return flagCPE;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <is_transmitting_to_UART+0x14>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200146a8 	.word	0x200146a8

080042e8 <reset_UART>:

void reset_UART()
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80042ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042f0:	2100      	movs	r1, #0
 80042f2:	4806      	ldr	r0, [pc, #24]	; (800430c <reset_UART+0x24>)
 80042f4:	f005 fb7e 	bl	80099f4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80042f8:	2201      	movs	r2, #1
 80042fa:	4904      	ldr	r1, [pc, #16]	; (800430c <reset_UART+0x24>)
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <reset_UART+0x28>)
 80042fe:	f004 f86b 	bl	80083d8 <HAL_UART_Receive_IT>
	flagCPP = false;
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <reset_UART+0x2c>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000350 	.word	0x20000350
 8004310:	20018820 	.word	0x20018820
 8004314:	200104a4 	.word	0x200104a4

08004318 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8004320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	480d      	ldr	r0, [pc, #52]	; (800435c <send_UART+0x44>)
 8004328:	f006 fa65 	bl	800a7f6 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 800432c:	480b      	ldr	r0, [pc, #44]	; (800435c <send_UART+0x44>)
 800432e:	f7fb ff91 	bl	8000254 <strlen>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <send_UART+0x44>)
 8004338:	4413      	add	r3, r2
 800433a:	4909      	ldr	r1, [pc, #36]	; (8004360 <send_UART+0x48>)
 800433c:	461a      	mov	r2, r3
 800433e:	460b      	mov	r3, r1
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <send_UART+0x4c>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800434a:	2201      	movs	r2, #1
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <send_UART+0x44>)
 800434e:	4806      	ldr	r0, [pc, #24]	; (8004368 <send_UART+0x50>)
 8004350:	f003 ffd4 	bl	80082fc <HAL_UART_Transmit_IT>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200104a8 	.word	0x200104a8
 8004360:	0800f6c8 	.word	0x0800f6c8
 8004364:	200146a8 	.word	0x200146a8
 8004368:	20018820 	.word	0x20018820

0800436c <read_UART>:

void read_UART(char* msg_to_read)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8004374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <read_UART+0x1c>)
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f006 fa3b 	bl	800a7f6 <strncpy>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000350 	.word	0x20000350

0800438c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_UART_RxCpltCallback+0xc4>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d154      	bne.n	8004446 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	2b0d      	cmp	r3, #13
 80043a6:	d00b      	beq.n	80043c0 <HAL_UART_RxCpltCallback+0x34>
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	2b5c      	cmp	r3, #92	; 0x5c
 80043b2:	d005      	beq.n	80043c0 <HAL_UART_RxCpltCallback+0x34>
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	2b2f      	cmp	r3, #47	; 0x2f
 80043be:	d106      	bne.n	80043ce <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_UART_RxCpltCallback+0xc4>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e03c      	b.n	8004448 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 80043d4:	5cd3      	ldrb	r3, [r2, r3]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d10f      	bne.n	80043fa <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e01c      	b.n	8004428 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3b02      	subs	r3, #2
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e016      	b.n	8004428 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	2b1b      	cmp	r3, #27
 8004404:	d104      	bne.n	8004410 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e00b      	b.n	8004428 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	2b24      	cmp	r3, #36	; 0x24
 800441a:	d105      	bne.n	8004428 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 8004424:	2224      	movs	r2, #36	; 0x24
 8004426:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_UART_RxCpltCallback+0xc8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_UART_RxCpltCallback+0xcc>)
 8004438:	4413      	add	r3, r2
 800443a:	2201      	movs	r2, #1
 800443c:	4619      	mov	r1, r3
 800443e:	4807      	ldr	r0, [pc, #28]	; (800445c <HAL_UART_RxCpltCallback+0xd0>)
 8004440:	f003 ffca 	bl	80083d8 <HAL_UART_Receive_IT>
 8004444:	e000      	b.n	8004448 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8004446:	bf00      	nop
	}
}
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200104a4 	.word	0x200104a4
 8004454:	200104a0 	.word	0x200104a0
 8004458:	20000350 	.word	0x20000350
 800445c:	20018820 	.word	0x20018820

08004460 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_UART_TxCpltCallback+0x64>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d122      	bne.n	80044bc <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a14      	ldr	r2, [pc, #80]	; (80044cc <HAL_UART_TxCpltCallback+0x6c>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	2b0d      	cmp	r3, #13
 8004480:	d10d      	bne.n	800449e <HAL_UART_TxCpltCallback+0x3e>
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	4a10      	ldr	r2, [pc, #64]	; (80044cc <HAL_UART_TxCpltCallback+0x6c>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	2b0a      	cmp	r3, #10
 800448e:	d006      	beq.n	800449e <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_UART_TxCpltCallback+0x64>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e00f      	b.n	80044be <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_UART_TxCpltCallback+0x68>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a07      	ldr	r2, [pc, #28]	; (80044cc <HAL_UART_TxCpltCallback+0x6c>)
 80044ae:	4413      	add	r3, r2
 80044b0:	2201      	movs	r2, #1
 80044b2:	4619      	mov	r1, r3
 80044b4:	4806      	ldr	r0, [pc, #24]	; (80044d0 <HAL_UART_TxCpltCallback+0x70>)
 80044b6:	f003 ff21 	bl	80082fc <HAL_UART_Transmit_IT>
 80044ba:	e000      	b.n	80044be <HAL_UART_TxCpltCallback+0x5e>
		return;
 80044bc:	bf00      	nop
}
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200146a8 	.word	0x200146a8
 80044c8:	200146ac 	.word	0x200146ac
 80044cc:	200104a8 	.word	0x200104a8
 80044d0:	20018820 	.word	0x20018820

080044d4 <Reset_Handler>:
 80044d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800450c <LoopFillZerobss+0x12>
 80044d8:	480d      	ldr	r0, [pc, #52]	; (8004510 <LoopFillZerobss+0x16>)
 80044da:	490e      	ldr	r1, [pc, #56]	; (8004514 <LoopFillZerobss+0x1a>)
 80044dc:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <LoopFillZerobss+0x1e>)
 80044de:	2300      	movs	r3, #0
 80044e0:	e002      	b.n	80044e8 <LoopCopyDataInit>

080044e2 <CopyDataInit>:
 80044e2:	58d4      	ldr	r4, [r2, r3]
 80044e4:	50c4      	str	r4, [r0, r3]
 80044e6:	3304      	adds	r3, #4

080044e8 <LoopCopyDataInit>:
 80044e8:	18c4      	adds	r4, r0, r3
 80044ea:	428c      	cmp	r4, r1
 80044ec:	d3f9      	bcc.n	80044e2 <CopyDataInit>
 80044ee:	4a0b      	ldr	r2, [pc, #44]	; (800451c <LoopFillZerobss+0x22>)
 80044f0:	4c0b      	ldr	r4, [pc, #44]	; (8004520 <LoopFillZerobss+0x26>)
 80044f2:	2300      	movs	r3, #0
 80044f4:	e001      	b.n	80044fa <LoopFillZerobss>

080044f6 <FillZerobss>:
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	3204      	adds	r2, #4

080044fa <LoopFillZerobss>:
 80044fa:	42a2      	cmp	r2, r4
 80044fc:	d3fb      	bcc.n	80044f6 <FillZerobss>
 80044fe:	f7fe ff37 	bl	8003370 <SystemInit>
 8004502:	f005 fa53 	bl	80099ac <__libc_init_array>
 8004506:	f7fe fd1f 	bl	8002f48 <main>
 800450a:	4770      	bx	lr
 800450c:	20080000 	.word	0x20080000
 8004510:	20000000 	.word	0x20000000
 8004514:	200002fc 	.word	0x200002fc
 8004518:	0800fbcc 	.word	0x0800fbcc
 800451c:	200002fc 	.word	0x200002fc
 8004520:	200188b8 	.word	0x200188b8

08004524 <CAN1_RX0_IRQHandler>:
 8004524:	e7fe      	b.n	8004524 <CAN1_RX0_IRQHandler>

08004526 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800452a:	2003      	movs	r0, #3
 800452c:	f000 fe56 	bl	80051dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004530:	2000      	movs	r0, #0
 8004532:	f000 f805 	bl	8004540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004536:	f7fe fdcd 	bl	80030d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_InitTick+0x54>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_InitTick+0x58>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fe7f 	bl	8005262 <HAL_SYSTICK_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00e      	b.n	800458c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d80a      	bhi.n	800458a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004574:	2200      	movs	r2, #0
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f000 fe39 	bl	80051f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004580:	4a06      	ldr	r2, [pc, #24]	; (800459c <HAL_InitTick+0x5c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000108 	.word	0x20000108
 8004598:	20000124 	.word	0x20000124
 800459c:	20000120 	.word	0x20000120

080045a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_IncTick+0x20>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_IncTick+0x24>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_IncTick+0x24>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000124 	.word	0x20000124
 80045c4:	200188a4 	.word	0x200188a4

080045c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return uwTick;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_GetTick+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	200188a4 	.word	0x200188a4

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff ffee 	bl	80045c8 <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d005      	beq.n	8004606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_Delay+0x44>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004606:	bf00      	nop
 8004608:	f7ff ffde 	bl	80045c8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8f7      	bhi.n	8004608 <HAL_Delay+0x28>
  {
  }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000124 	.word	0x20000124

08004628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e031      	b.n	80046a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fa88 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_ADC_Init+0x84>)
 800466c:	4013      	ands	r3, r2
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fbb8 	bl	8004dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
 8004692:	e001      	b.n	8004698 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	ffffeefd 	.word	0xffffeefd

080046b0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Start_IT+0x1a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0b5      	b.n	8004836 <HAL_ADC_Start_IT+0x186>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d018      	beq.n	8004712 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80046f0:	4b54      	ldr	r3, [pc, #336]	; (8004844 <HAL_ADC_Start_IT+0x194>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a54      	ldr	r2, [pc, #336]	; (8004848 <HAL_ADC_Start_IT+0x198>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9a      	lsrs	r2, r3, #18
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004704:	e002      	b.n	800470c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d17d      	bne.n	800481c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004724:	4b49      	ldr	r3, [pc, #292]	; (800484c <HAL_ADC_Start_IT+0x19c>)
 8004726:	4013      	ands	r3, r2
 8004728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d106      	bne.n	800476a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f023 0206 	bic.w	r2, r3, #6
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
 8004768:	e002      	b.n	8004770 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004780:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_ADC_Start_IT+0x1a0>)
 800478e:	430b      	orrs	r3, r1
 8004790:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004792:	4b30      	ldr	r3, [pc, #192]	; (8004854 <HAL_ADC_Start_IT+0x1a4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d143      	bne.n	8004834 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	e03a      	b.n	8004834 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a25      	ldr	r2, [pc, #148]	; (8004858 <HAL_ADC_Start_IT+0x1a8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10e      	bne.n	80047e6 <HAL_ADC_Start_IT+0x136>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_ADC_Start_IT+0x1a4>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d120      	bne.n	8004834 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_ADC_Start_IT+0x1ac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d11b      	bne.n	8004834 <HAL_ADC_Start_IT+0x184>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d114      	bne.n	8004834 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	e00b      	b.n	8004834 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f043 0210 	orr.w	r2, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000108 	.word	0x20000108
 8004848:	431bde83 	.word	0x431bde83
 800484c:	fffff8fe 	.word	0xfffff8fe
 8004850:	04000020 	.word	0x04000020
 8004854:	40012300 	.word	0x40012300
 8004858:	40012000 	.word	0x40012000
 800485c:	40012200 	.word	0x40012200

08004860 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADC_Stop_IT+0x16>
 8004872:	2302      	movs	r3, #2
 8004874:	e027      	b.n	80048c6 <HAL_ADC_Stop_IT+0x66>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10f      	bne.n	80048bc <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_ADC_Stop_IT+0x74>)
 80048a8:	400b      	ands	r3, r1
 80048aa:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_ADC_Stop_IT+0x78>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	fbffffdf 	.word	0xfbffffdf
 80048d8:	ffffeefe 	.word	0xffffeefe

080048dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d049      	beq.n	80049a6 <HAL_ADC_IRQHandler+0xca>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d046      	beq.n	80049a6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d12b      	bne.n	8004996 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d127      	bne.n	8004996 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800495e:	2b00      	cmp	r3, #0
 8004960:	d119      	bne.n	8004996 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0220 	bic.w	r2, r2, #32
 8004970:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc f9ba 	bl	8000d10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0212 	mvn.w	r2, #18
 80049a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d057      	beq.n	8004a6c <HAL_ADC_IRQHandler+0x190>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d054      	beq.n	8004a6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d139      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12b      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d124      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11d      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fabf 	bl	8004fe0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 020c 	mvn.w	r2, #12
 8004a6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d017      	beq.n	8004ab2 <HAL_ADC_IRQHandler+0x1d6>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d014      	beq.n	8004ab2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10d      	bne.n	8004ab2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f837 	bl	8004b16 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ac0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x218>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f043 0202 	orr.w	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0220 	mvn.w	r2, #32
 8004ae2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f820 	bl	8004b2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0220 	mvn.w	r2, #32
 8004af2:	601a      	str	r2, [r3, #0]
  }
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1c>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e136      	b.n	8004dca <HAL_ADC_ConfigChannel+0x28a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d93a      	bls.n	8004be2 <HAL_ADC_ConfigChannel+0xa2>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b74:	d035      	beq.n	8004be2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	3b1e      	subs	r3, #30
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	400a      	ands	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a8d      	ldr	r2, [pc, #564]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10a      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	061a      	lsls	r2, r3, #24
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bba:	e035      	b.n	8004c28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68d9      	ldr	r1, [r3, #12]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4403      	add	r3, r0
 8004bd4:	3b1e      	subs	r3, #30
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004be0:	e022      	b.n	8004c28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6919      	ldr	r1, [r3, #16]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	400a      	ands	r2, r1
 8004c04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6919      	ldr	r1, [r3, #16]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	4603      	mov	r3, r0
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4403      	add	r3, r0
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d824      	bhi.n	8004c7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	3b05      	subs	r3, #5
 8004c42:	221f      	movs	r2, #31
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	400a      	ands	r2, r1
 8004c50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4618      	mov	r0, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	3b05      	subs	r3, #5
 8004c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	635a      	str	r2, [r3, #52]	; 0x34
 8004c78:	e04c      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d824      	bhi.n	8004ccc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	3b23      	subs	r3, #35	; 0x23
 8004c94:	221f      	movs	r2, #31
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b23      	subs	r3, #35	; 0x23
 8004cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cca:	e023      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	3b41      	subs	r3, #65	; 0x41
 8004cde:	221f      	movs	r2, #31
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	400a      	ands	r2, r1
 8004cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	3b41      	subs	r3, #65	; 0x41
 8004d08:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10a      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1f4>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d26:	d105      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004d32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10f      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x21e>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d10b      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d50:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d12b      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <HAL_ADC_ConfigChannel+0x23a>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b11      	cmp	r3, #17
 8004d78:	d122      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004d7a:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004d84:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d111      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a11      	ldr	r2, [pc, #68]	; (8004de8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9a      	lsrs	r2, r3, #18
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004db2:	e002      	b.n	8004dba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f9      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	10000012 	.word	0x10000012
 8004ddc:	40012000 	.word	0x40012000
 8004de0:	40012300 	.word	0x40012300
 8004de4:	20000108 	.word	0x20000108
 8004de8:	431bde83 	.word	0x431bde83

08004dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004df4:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <ADC_Init+0x1ec>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <ADC_Init+0x1ec>)
 8004dfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004dfe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004e00:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <ADC_Init+0x1ec>)
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4973      	ldr	r1, [pc, #460]	; (8004fd8 <ADC_Init+0x1ec>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	021a      	lsls	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <ADC_Init+0x1f0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6899      	ldr	r1, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	e00f      	b.n	8004ee6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0202 	bic.w	r2, r2, #2
 8004ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	035a      	lsls	r2, r3, #13
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	e007      	b.n	8004f5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	051a      	lsls	r2, r3, #20
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f9e:	025a      	lsls	r2, r3, #9
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	029a      	lsls	r2, r3, #10
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40012300 	.word	0x40012300
 8004fdc:	0f000001 	.word	0x0f000001

08004fe0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <__NVIC_SetPriorityGrouping+0x40>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005010:	4013      	ands	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <__NVIC_SetPriorityGrouping+0x44>)
 800501e:	4313      	orrs	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005022:	4a04      	ldr	r2, [pc, #16]	; (8005034 <__NVIC_SetPriorityGrouping+0x40>)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	60d3      	str	r3, [r2, #12]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00
 8005038:	05fa0000 	.word	0x05fa0000

0800503c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <__NVIC_GetPriorityGrouping+0x18>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 0307 	and.w	r3, r3, #7
}
 800504a:	4618      	mov	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	e000ed00 	.word	0xe000ed00

08005058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	2b00      	cmp	r3, #0
 8005068:	db0b      	blt.n	8005082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	f003 021f 	and.w	r2, r3, #31
 8005070:	4907      	ldr	r1, [pc, #28]	; (8005090 <__NVIC_EnableIRQ+0x38>)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2001      	movs	r0, #1
 800507a:	fa00 f202 	lsl.w	r2, r0, r2
 800507e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e100 	.word	0xe000e100

08005094 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db12      	blt.n	80050cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	490a      	ldr	r1, [pc, #40]	; (80050d8 <__NVIC_DisableIRQ+0x44>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2001      	movs	r0, #1
 80050b6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ba:	3320      	adds	r3, #32
 80050bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050c0:	f3bf 8f4f 	dsb	sy
}
 80050c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050c6:	f3bf 8f6f 	isb	sy
}
 80050ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100

080050dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db0a      	blt.n	8005106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	490c      	ldr	r1, [pc, #48]	; (8005128 <__NVIC_SetPriority+0x4c>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	0112      	lsls	r2, r2, #4
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	440b      	add	r3, r1
 8005100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005104:	e00a      	b.n	800511c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4908      	ldr	r1, [pc, #32]	; (800512c <__NVIC_SetPriority+0x50>)
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	3b04      	subs	r3, #4
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	440b      	add	r3, r1
 800511a:	761a      	strb	r2, [r3, #24]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000e100 	.word	0xe000e100
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	; 0x24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f1c3 0307 	rsb	r3, r3, #7
 800514a:	2b04      	cmp	r3, #4
 800514c:	bf28      	it	cs
 800514e:	2304      	movcs	r3, #4
 8005150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3304      	adds	r3, #4
 8005156:	2b06      	cmp	r3, #6
 8005158:	d902      	bls.n	8005160 <NVIC_EncodePriority+0x30>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3b03      	subs	r3, #3
 800515e:	e000      	b.n	8005162 <NVIC_EncodePriority+0x32>
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005164:	f04f 32ff 	mov.w	r2, #4294967295
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43da      	mvns	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	401a      	ands	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005178:	f04f 31ff 	mov.w	r1, #4294967295
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	43d9      	mvns	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005188:	4313      	orrs	r3, r2
         );
}
 800518a:	4618      	mov	r0, r3
 800518c:	3724      	adds	r7, #36	; 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a8:	d301      	bcc.n	80051ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00f      	b.n	80051ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <SysTick_Config+0x40>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051b6:	210f      	movs	r1, #15
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	f7ff ff8e 	bl	80050dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <SysTick_Config+0x40>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <SysTick_Config+0x40>)
 80051c8:	2207      	movs	r2, #7
 80051ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000e010 	.word	0xe000e010

080051dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ff05 	bl	8004ff4 <__NVIC_SetPriorityGrouping>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	4603      	mov	r3, r0
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005204:	f7ff ff1a 	bl	800503c <__NVIC_GetPriorityGrouping>
 8005208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff ff8e 	bl	8005130 <NVIC_EncodePriority>
 8005214:	4602      	mov	r2, r0
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff5d 	bl	80050dc <__NVIC_SetPriority>
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff0d 	bl	8005058 <__NVIC_EnableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff1d 	bl	8005094 <__NVIC_DisableIRQ>
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ff94 	bl	8005198 <SysTick_Config>
 8005270:	4603      	mov	r3, r0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e014      	b.n	80052b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fd fca3 	bl	8002be8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	795b      	ldrb	r3, [r3, #5]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_DAC_Start+0x16>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e040      	b.n	8005356 <HAL_DAC_Start+0x98>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005308:	2b3c      	cmp	r3, #60	; 0x3c
 800530a:	d11d      	bne.n	8005348 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	605a      	str	r2, [r3, #4]
 800531c:	e014      	b.n	8005348 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	213c      	movs	r1, #60	; 0x3c
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	429a      	cmp	r2, r3
 8005336:	d107      	bne.n	8005348 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0202 	orr.w	r2, r2, #2
 8005346:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	3308      	adds	r3, #8
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e004      	b.n	8005396 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	3314      	adds	r3, #20
 8005394:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	461a      	mov	r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	795b      	ldrb	r3, [r3, #5]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_DAC_ConfigChannel+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e03c      	b.n	800543e <HAL_DAC_ConfigChannel+0x92>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2202      	movs	r2, #2
 80053ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4013      	ands	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	22c0      	movs	r2, #192	; 0xc0
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	400a      	ands	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7ff f8b6 	bl	80045c8 <HAL_GetTick>
 800545c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d008      	beq.n	800547c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e052      	b.n	8005522 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0216 	bic.w	r2, r2, #22
 800548a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <HAL_DMA_Abort+0x62>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0208 	bic.w	r2, r2, #8
 80054ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054cc:	e013      	b.n	80054f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ce:	f7ff f87b 	bl	80045c8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d90c      	bls.n	80054f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e015      	b.n	8005522 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e4      	bne.n	80054ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005508:	223f      	movs	r2, #63	; 0x3f
 800550a:	409a      	lsls	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d004      	beq.n	8005548 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e00c      	b.n	8005562 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2205      	movs	r2, #5
 800554c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e175      	b.n	800587c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005590:	2201      	movs	r2, #1
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	f040 8164 	bne.w	8005876 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d005      	beq.n	80055c6 <HAL_GPIO_Init+0x56>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d130      	bne.n	8005628 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	2203      	movs	r2, #3
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055fc:	2201      	movs	r2, #1
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4013      	ands	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 0201 	and.w	r2, r3, #1
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b03      	cmp	r3, #3
 8005632:	d017      	beq.n	8005664 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d123      	bne.n	80056b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	08da      	lsrs	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3208      	adds	r2, #8
 8005678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	220f      	movs	r2, #15
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	08da      	lsrs	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3208      	adds	r2, #8
 80056b2:	69b9      	ldr	r1, [r7, #24]
 80056b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0203 	and.w	r2, r3, #3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80be 	beq.w	8005876 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fa:	4b66      	ldr	r3, [pc, #408]	; (8005894 <HAL_GPIO_Init+0x324>)
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	4a65      	ldr	r2, [pc, #404]	; (8005894 <HAL_GPIO_Init+0x324>)
 8005700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005704:	6453      	str	r3, [r2, #68]	; 0x44
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <HAL_GPIO_Init+0x324>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005712:	4a61      	ldr	r2, [pc, #388]	; (8005898 <HAL_GPIO_Init+0x328>)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	089b      	lsrs	r3, r3, #2
 8005718:	3302      	adds	r3, #2
 800571a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	220f      	movs	r2, #15
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a58      	ldr	r2, [pc, #352]	; (800589c <HAL_GPIO_Init+0x32c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d037      	beq.n	80057ae <HAL_GPIO_Init+0x23e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a57      	ldr	r2, [pc, #348]	; (80058a0 <HAL_GPIO_Init+0x330>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d031      	beq.n	80057aa <HAL_GPIO_Init+0x23a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a56      	ldr	r2, [pc, #344]	; (80058a4 <HAL_GPIO_Init+0x334>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <HAL_GPIO_Init+0x236>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a55      	ldr	r2, [pc, #340]	; (80058a8 <HAL_GPIO_Init+0x338>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d025      	beq.n	80057a2 <HAL_GPIO_Init+0x232>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a54      	ldr	r2, [pc, #336]	; (80058ac <HAL_GPIO_Init+0x33c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01f      	beq.n	800579e <HAL_GPIO_Init+0x22e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a53      	ldr	r2, [pc, #332]	; (80058b0 <HAL_GPIO_Init+0x340>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d019      	beq.n	800579a <HAL_GPIO_Init+0x22a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a52      	ldr	r2, [pc, #328]	; (80058b4 <HAL_GPIO_Init+0x344>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_GPIO_Init+0x226>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a51      	ldr	r2, [pc, #324]	; (80058b8 <HAL_GPIO_Init+0x348>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00d      	beq.n	8005792 <HAL_GPIO_Init+0x222>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a50      	ldr	r2, [pc, #320]	; (80058bc <HAL_GPIO_Init+0x34c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <HAL_GPIO_Init+0x21e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a4f      	ldr	r2, [pc, #316]	; (80058c0 <HAL_GPIO_Init+0x350>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <HAL_GPIO_Init+0x21a>
 8005786:	2309      	movs	r3, #9
 8005788:	e012      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 800578a:	230a      	movs	r3, #10
 800578c:	e010      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 800578e:	2308      	movs	r3, #8
 8005790:	e00e      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 8005792:	2307      	movs	r3, #7
 8005794:	e00c      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 8005796:	2306      	movs	r3, #6
 8005798:	e00a      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 800579a:	2305      	movs	r3, #5
 800579c:	e008      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 800579e:	2304      	movs	r3, #4
 80057a0:	e006      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 80057a2:	2303      	movs	r3, #3
 80057a4:	e004      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e002      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_GPIO_Init+0x240>
 80057ae:	2300      	movs	r3, #0
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	f002 0203 	and.w	r2, r2, #3
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	4093      	lsls	r3, r2
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057c0:	4935      	ldr	r1, [pc, #212]	; (8005898 <HAL_GPIO_Init+0x328>)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	3302      	adds	r3, #2
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <HAL_GPIO_Init+0x354>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057f2:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <HAL_GPIO_Init+0x354>)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057f8:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <HAL_GPIO_Init+0x354>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <HAL_GPIO_Init+0x354>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005822:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <HAL_GPIO_Init+0x354>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_GPIO_Init+0x354>)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800584c:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <HAL_GPIO_Init+0x354>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005870:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <HAL_GPIO_Init+0x354>)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	f67f ae86 	bls.w	8005590 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3724      	adds	r7, #36	; 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800
 8005898:	40013800 	.word	0x40013800
 800589c:	40020000 	.word	0x40020000
 80058a0:	40020400 	.word	0x40020400
 80058a4:	40020800 	.word	0x40020800
 80058a8:	40020c00 	.word	0x40020c00
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40021400 	.word	0x40021400
 80058b4:	40021800 	.word	0x40021800
 80058b8:	40021c00 	.word	0x40021c00
 80058bc:	40022000 	.word	0x40022000
 80058c0:	40022400 	.word	0x40022400
 80058c4:	40013c00 	.word	0x40013c00

080058c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e001      	b.n	80058ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
 8005904:	4613      	mov	r3, r2
 8005906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005908:	787b      	ldrb	r3, [r7, #1]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005914:	e003      	b.n	800591e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005916:	887b      	ldrh	r3, [r7, #2]
 8005918:	041a      	lsls	r2, r3, #16
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	619a      	str	r2, [r3, #24]
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800593c:	887a      	ldrh	r2, [r7, #2]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4013      	ands	r3, r2
 8005942:	041a      	lsls	r2, r3, #16
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	43d9      	mvns	r1, r3
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	400b      	ands	r3, r1
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	619a      	str	r2, [r3, #24]
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005976:	4a05      	ldr	r2, [pc, #20]	; (800598c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd fa5c 	bl	8002e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40013c00 	.word	0x40013c00

08005990 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <HAL_PWREx_EnableOverDrive+0x98>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_PWREx_EnableOverDrive+0x98>)
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6413      	str	r3, [r2, #64]	; 0x40
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_PWREx_EnableOverDrive+0x98>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059b2:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059be:	f7fe fe03 	bl	80045c8 <HAL_GetTick>
 80059c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059c4:	e009      	b.n	80059da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059c6:	f7fe fdff 	bl	80045c8 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d4:	d901      	bls.n	80059da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e022      	b.n	8005a20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e6:	d1ee      	bne.n	80059c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0f      	ldr	r2, [pc, #60]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f4:	f7fe fde8 	bl	80045c8 <HAL_GetTick>
 80059f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059fa:	e009      	b.n	8005a10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059fc:	f7fe fde4 	bl	80045c8 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d901      	bls.n	8005a10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e007      	b.n	8005a20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1c:	d1ee      	bne.n	80059fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000

08005a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e29b      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8087 	beq.w	8005b62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a54:	4b96      	ldr	r3, [pc, #600]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d00c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a60:	4b93      	ldr	r3, [pc, #588]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d112      	bne.n	8005a92 <HAL_RCC_OscConfig+0x62>
 8005a6c:	4b90      	ldr	r3, [pc, #576]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a78:	d10b      	bne.n	8005a92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d06c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x130>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d168      	bne.n	8005b60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e275      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_OscConfig+0x7a>
 8005a9c:	4b84      	ldr	r3, [pc, #528]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a83      	ldr	r2, [pc, #524]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e02e      	b.n	8005b08 <HAL_RCC_OscConfig+0xd8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0x9c>
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b7c      	ldr	r3, [pc, #496]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a7b      	ldr	r2, [pc, #492]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e01d      	b.n	8005b08 <HAL_RCC_OscConfig+0xd8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0xc0>
 8005ad6:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a75      	ldr	r2, [pc, #468]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b73      	ldr	r3, [pc, #460]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a72      	ldr	r2, [pc, #456]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e00b      	b.n	8005b08 <HAL_RCC_OscConfig+0xd8>
 8005af0:	4b6f      	ldr	r3, [pc, #444]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6e      	ldr	r2, [pc, #440]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d013      	beq.n	8005b38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b10:	f7fe fd5a 	bl	80045c8 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b18:	f7fe fd56 	bl	80045c8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b64      	cmp	r3, #100	; 0x64
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e229      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2a:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0xe8>
 8005b36:	e014      	b.n	8005b62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fe fd46 	bl	80045c8 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fe fd42 	bl	80045c8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e215      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b52:	4b57      	ldr	r3, [pc, #348]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x110>
 8005b5e:	e000      	b.n	8005b62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d069      	beq.n	8005c42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b6e:	4b50      	ldr	r3, [pc, #320]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7a:	4b4d      	ldr	r3, [pc, #308]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d11c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x190>
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d116      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	4b47      	ldr	r3, [pc, #284]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_RCC_OscConfig+0x17a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e1e9      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005baa:	4b41      	ldr	r3, [pc, #260]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	493d      	ldr	r1, [pc, #244]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	e040      	b.n	8005c42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc8:	4b39      	ldr	r3, [pc, #228]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a38      	ldr	r2, [pc, #224]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fcf8 	bl	80045c8 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bdc:	f7fe fcf4 	bl	80045c8 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e1c7      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4929      	ldr	r1, [pc, #164]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
 8005c0e:	e018      	b.n	8005c42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c10:	4b27      	ldr	r3, [pc, #156]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fe fcd4 	bl	80045c8 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c24:	f7fe fcd0 	bl	80045c8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e1a3      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d038      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c62:	f7fe fcb1 	bl	80045c8 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c6a:	f7fe fcad 	bl	80045c8 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e180      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x23a>
 8005c88:	e01a      	b.n	8005cc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_RCC_OscConfig+0x280>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fe fc97 	bl	80045c8 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c9e:	f7fe fc93 	bl	80045c8 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d903      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e166      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
 8005cb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	4b92      	ldr	r3, [pc, #584]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ee      	bne.n	8005c9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a4 	beq.w	8005e16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cce:	4b8c      	ldr	r3, [pc, #560]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b89      	ldr	r3, [pc, #548]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	4a88      	ldr	r2, [pc, #544]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce6:	4b86      	ldr	r3, [pc, #536]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cf6:	4b83      	ldr	r3, [pc, #524]	; (8005f04 <HAL_RCC_OscConfig+0x4d4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d118      	bne.n	8005d34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d02:	4b80      	ldr	r3, [pc, #512]	; (8005f04 <HAL_RCC_OscConfig+0x4d4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a7f      	ldr	r2, [pc, #508]	; (8005f04 <HAL_RCC_OscConfig+0x4d4>)
 8005d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0e:	f7fe fc5b 	bl	80045c8 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d16:	f7fe fc57 	bl	80045c8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b64      	cmp	r3, #100	; 0x64
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e12a      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d28:	4b76      	ldr	r3, [pc, #472]	; (8005f04 <HAL_RCC_OscConfig+0x4d4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x31a>
 8005d3c:	4b70      	ldr	r3, [pc, #448]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	4a6f      	ldr	r2, [pc, #444]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	6713      	str	r3, [r2, #112]	; 0x70
 8005d48:	e02d      	b.n	8005da6 <HAL_RCC_OscConfig+0x376>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x33c>
 8005d52:	4b6b      	ldr	r3, [pc, #428]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a6a      	ldr	r2, [pc, #424]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5e:	4b68      	ldr	r3, [pc, #416]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	4a67      	ldr	r2, [pc, #412]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d64:	f023 0304 	bic.w	r3, r3, #4
 8005d68:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6a:	e01c      	b.n	8005da6 <HAL_RCC_OscConfig+0x376>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d10c      	bne.n	8005d8e <HAL_RCC_OscConfig+0x35e>
 8005d74:	4b62      	ldr	r3, [pc, #392]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a61      	ldr	r2, [pc, #388]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d7a:	f043 0304 	orr.w	r3, r3, #4
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	4b5f      	ldr	r3, [pc, #380]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a5e      	ldr	r2, [pc, #376]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	e00b      	b.n	8005da6 <HAL_RCC_OscConfig+0x376>
 8005d8e:	4b5c      	ldr	r3, [pc, #368]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	4a5b      	ldr	r2, [pc, #364]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9a:	4b59      	ldr	r3, [pc, #356]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4a58      	ldr	r2, [pc, #352]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005da0:	f023 0304 	bic.w	r3, r3, #4
 8005da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dae:	f7fe fc0b 	bl	80045c8 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db4:	e00a      	b.n	8005dcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f7fe fc07 	bl	80045c8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e0d8      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dcc:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0ee      	beq.n	8005db6 <HAL_RCC_OscConfig+0x386>
 8005dd8:	e014      	b.n	8005e04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dda:	f7fe fbf5 	bl	80045c8 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fe fbf1 	bl	80045c8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e0c2      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df8:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1ee      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	4a3c      	ldr	r2, [pc, #240]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80ae 	beq.w	8005f7c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 030c 	and.w	r3, r3, #12
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d06d      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d14b      	bne.n	8005ecc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e34:	4b32      	ldr	r3, [pc, #200]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a31      	ldr	r2, [pc, #196]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fe fbc2 	bl	80045c8 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fe fbbe 	bl	80045c8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e091      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5a:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69da      	ldr	r2, [r3, #28]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	071b      	lsls	r3, r3, #28
 8005e92:	491b      	ldr	r1, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e98:	4b19      	ldr	r3, [pc, #100]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fe fb90 	bl	80045c8 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fe fb8c 	bl	80045c8 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e05f      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebe:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x47c>
 8005eca:	e057      	b.n	8005f7c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fe fb76 	bl	80045c8 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fe fb72 	bl	80045c8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e045      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef2:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_OscConfig+0x4d0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4b0>
 8005efe:	e03d      	b.n	8005f7c <HAL_RCC_OscConfig+0x54c>
 8005f00:	40023800 	.word	0x40023800
 8005f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f08:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <HAL_RCC_OscConfig+0x558>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d030      	beq.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d129      	bne.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d122      	bne.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d119      	bne.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	3b01      	subs	r3, #1
 8005f52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d10f      	bne.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d107      	bne.n	8005f78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d001      	beq.n	8005f7c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023800 	.word	0x40023800

08005f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0d0      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d910      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b67      	ldr	r3, [pc, #412]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 020f 	bic.w	r2, r3, #15
 8005fba:	4965      	ldr	r1, [pc, #404]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d115      	bne.n	800606e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b41      	ldr	r3, [pc, #260]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e073      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e06b      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4936      	ldr	r1, [pc, #216]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006080:	f7fe faa2 	bl	80045c8 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	e00a      	b.n	800609e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006088:	f7fe fa9e 	bl	80045c8 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e053      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 020c 	and.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1eb      	bne.n	8006088 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d210      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 020f 	bic.w	r2, r3, #15
 80060c6:	4922      	ldr	r1, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x1c4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f821 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_ClockConfig+0x1c8>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490a      	ldr	r1, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x1cc>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1d0>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1d4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f9fe 	bl	8004540 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00
 8006154:	40023800 	.word	0x40023800
 8006158:	0800f6d8 	.word	0x0800f6d8
 800615c:	20000108 	.word	0x20000108
 8006160:	20000120 	.word	0x20000120

08006164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	2300      	movs	r3, #0
 8006176:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800617c:	4b67      	ldr	r3, [pc, #412]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d00d      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006188:	2b08      	cmp	r3, #8
 800618a:	f200 80bd 	bhi.w	8006308 <HAL_RCC_GetSysClockFreq+0x1a4>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x34>
 8006192:	2b04      	cmp	r3, #4
 8006194:	d003      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x3a>
 8006196:	e0b7      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006198:	4b61      	ldr	r3, [pc, #388]	; (8006320 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800619a:	60bb      	str	r3, [r7, #8]
      break;
 800619c:	e0b7      	b.n	800630e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800619e:	4b61      	ldr	r3, [pc, #388]	; (8006324 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80061a0:	60bb      	str	r3, [r7, #8]
      break;
 80061a2:	e0b4      	b.n	800630e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a4:	4b5d      	ldr	r3, [pc, #372]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061ae:	4b5b      	ldr	r3, [pc, #364]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d04d      	beq.n	8006256 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ba:	4b58      	ldr	r3, [pc, #352]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	461a      	mov	r2, r3
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	ea02 0800 	and.w	r8, r2, r0
 80061d2:	ea03 0901 	and.w	r9, r3, r1
 80061d6:	4640      	mov	r0, r8
 80061d8:	4649      	mov	r1, r9
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	014b      	lsls	r3, r1, #5
 80061e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061e8:	0142      	lsls	r2, r0, #5
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	ebb0 0008 	subs.w	r0, r0, r8
 80061f2:	eb61 0109 	sbc.w	r1, r1, r9
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	018b      	lsls	r3, r1, #6
 8006200:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006204:	0182      	lsls	r2, r0, #6
 8006206:	1a12      	subs	r2, r2, r0
 8006208:	eb63 0301 	sbc.w	r3, r3, r1
 800620c:	f04f 0000 	mov.w	r0, #0
 8006210:	f04f 0100 	mov.w	r1, #0
 8006214:	00d9      	lsls	r1, r3, #3
 8006216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800621a:	00d0      	lsls	r0, r2, #3
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	eb12 0208 	adds.w	r2, r2, r8
 8006224:	eb43 0309 	adc.w	r3, r3, r9
 8006228:	f04f 0000 	mov.w	r0, #0
 800622c:	f04f 0100 	mov.w	r1, #0
 8006230:	0259      	lsls	r1, r3, #9
 8006232:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006236:	0250      	lsls	r0, r2, #9
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4610      	mov	r0, r2
 800623e:	4619      	mov	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	461a      	mov	r2, r3
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	f7fa fa1e 	bl	8000688 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4613      	mov	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e04a      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	461a      	mov	r2, r3
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	ea02 0400 	and.w	r4, r2, r0
 800626e:	ea03 0501 	and.w	r5, r3, r1
 8006272:	4620      	mov	r0, r4
 8006274:	4629      	mov	r1, r5
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	014b      	lsls	r3, r1, #5
 8006280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006284:	0142      	lsls	r2, r0, #5
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	1b00      	subs	r0, r0, r4
 800628c:	eb61 0105 	sbc.w	r1, r1, r5
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	018b      	lsls	r3, r1, #6
 800629a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800629e:	0182      	lsls	r2, r0, #6
 80062a0:	1a12      	subs	r2, r2, r0
 80062a2:	eb63 0301 	sbc.w	r3, r3, r1
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	00d9      	lsls	r1, r3, #3
 80062b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062b4:	00d0      	lsls	r0, r2, #3
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	1912      	adds	r2, r2, r4
 80062bc:	eb45 0303 	adc.w	r3, r5, r3
 80062c0:	f04f 0000 	mov.w	r0, #0
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	0299      	lsls	r1, r3, #10
 80062ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062ce:	0290      	lsls	r0, r2, #10
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	461a      	mov	r2, r3
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	f7fa f9d2 	bl	8000688 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4613      	mov	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	3301      	adds	r3, #1
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	60bb      	str	r3, [r7, #8]
      break;
 8006306:	e002      	b.n	800630e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800630a:	60bb      	str	r3, [r7, #8]
      break;
 800630c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800630e:	68bb      	ldr	r3, [r7, #8]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800
 8006320:	00f42400 	.word	0x00f42400
 8006324:	007a1200 	.word	0x007a1200

08006328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <HAL_RCC_GetHCLKFreq+0x14>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000108 	.word	0x20000108

08006340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006344:	f7ff fff0 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0a9b      	lsrs	r3, r3, #10
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	4903      	ldr	r1, [pc, #12]	; (8006364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006356:	5ccb      	ldrb	r3, [r1, r3]
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40023800 	.word	0x40023800
 8006364:	0800f6e8 	.word	0x0800f6e8

08006368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800636c:	f7ff ffdc 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	0b5b      	lsrs	r3, r3, #13
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	4903      	ldr	r1, [pc, #12]	; (800638c <HAL_RCC_GetPCLK2Freq+0x24>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	0800f6e8 	.word	0x0800f6e8

08006390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d012      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063b8:	4b69      	ldr	r3, [pc, #420]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a68      	ldr	r2, [pc, #416]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063c2:	6093      	str	r3, [r2, #8]
 80063c4:	4b66      	ldr	r3, [pc, #408]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	4964      	ldr	r1, [pc, #400]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d017      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ea:	4b5d      	ldr	r3, [pc, #372]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f8:	4959      	ldr	r1, [pc, #356]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006408:	d101      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006426:	4b4e      	ldr	r3, [pc, #312]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800642c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	494a      	ldr	r1, [pc, #296]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006444:	d101      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006462:	2301      	movs	r3, #1
 8006464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 808b 	beq.w	800658a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006474:	4b3a      	ldr	r3, [pc, #232]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	4a39      	ldr	r2, [pc, #228]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647e:	6413      	str	r3, [r2, #64]	; 0x40
 8006480:	4b37      	ldr	r3, [pc, #220]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800648c:	4b35      	ldr	r3, [pc, #212]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a34      	ldr	r2, [pc, #208]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006498:	f7fe f896 	bl	80045c8 <HAL_GetTick>
 800649c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a0:	f7fe f892 	bl	80045c8 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	; 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e38f      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064b2:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064be:	4b28      	ldr	r3, [pc, #160]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d035      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d02e      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064e6:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064f2:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006504:	4b16      	ldr	r3, [pc, #88]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d114      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fe f85a 	bl	80045c8 <HAL_GetTick>
 8006514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006516:	e00a      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006518:	f7fe f856 	bl	80045c8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e351      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ee      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d111      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006554:	4b04      	ldr	r3, [pc, #16]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006556:	400b      	ands	r3, r1
 8006558:	4901      	ldr	r1, [pc, #4]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	e00b      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006560:	40023800 	.word	0x40023800
 8006564:	40007000 	.word	0x40007000
 8006568:	0ffffcff 	.word	0x0ffffcff
 800656c:	4bb3      	ldr	r3, [pc, #716]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4ab2      	ldr	r2, [pc, #712]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006576:	6093      	str	r3, [r2, #8]
 8006578:	4bb0      	ldr	r3, [pc, #704]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800657a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006584:	49ad      	ldr	r1, [pc, #692]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006586:	4313      	orrs	r3, r2
 8006588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006596:	4ba9      	ldr	r3, [pc, #676]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800659c:	4aa7      	ldr	r2, [pc, #668]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800659e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065a6:	4ba5      	ldr	r3, [pc, #660]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	49a2      	ldr	r1, [pc, #648]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065c4:	4b9d      	ldr	r3, [pc, #628]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d2:	499a      	ldr	r1, [pc, #616]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065e6:	4b95      	ldr	r3, [pc, #596]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	4991      	ldr	r1, [pc, #580]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006608:	4b8c      	ldr	r3, [pc, #560]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006616:	4989      	ldr	r1, [pc, #548]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800662a:	4b84      	ldr	r3, [pc, #528]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4980      	ldr	r1, [pc, #512]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800664c:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006652:	f023 0203 	bic.w	r2, r3, #3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	4978      	ldr	r1, [pc, #480]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800666e:	4b73      	ldr	r3, [pc, #460]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006674:	f023 020c 	bic.w	r2, r3, #12
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667c:	496f      	ldr	r1, [pc, #444]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006690:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669e:	4967      	ldr	r1, [pc, #412]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066b2:	4b62      	ldr	r3, [pc, #392]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	495e      	ldr	r1, [pc, #376]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066d4:	4b59      	ldr	r3, [pc, #356]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	4956      	ldr	r1, [pc, #344]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80066f6:	4b51      	ldr	r3, [pc, #324]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006704:	494d      	ldr	r1, [pc, #308]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006718:	4b48      	ldr	r3, [pc, #288]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	4945      	ldr	r1, [pc, #276]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800673a:	4b40      	ldr	r3, [pc, #256]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	493c      	ldr	r1, [pc, #240]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800675c:	4b37      	ldr	r3, [pc, #220]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676a:	4934      	ldr	r1, [pc, #208]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d011      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800677e:	4b2f      	ldr	r3, [pc, #188]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678c:	492b      	ldr	r1, [pc, #172]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800679c:	d101      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800679e:	2301      	movs	r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067be:	4b1f      	ldr	r3, [pc, #124]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067cc:	491b      	ldr	r1, [pc, #108]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f0:	4912      	ldr	r1, [pc, #72]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00f      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800683a:	bf00      	nop
 800683c:	40023800 	.word	0x40023800
 8006840:	4986      	ldr	r1, [pc, #536]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006854:	4b81      	ldr	r3, [pc, #516]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800685a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006864:	497d      	ldr	r1, [pc, #500]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d006      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80d6 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006880:	4b76      	ldr	r3, [pc, #472]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a75      	ldr	r2, [pc, #468]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800688a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fd fe9c 	bl	80045c8 <HAL_GetTick>
 8006890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006894:	f7fd fe98 	bl	80045c8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e195      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068a6:	4b6d      	ldr	r3, [pc, #436]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d021      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11d      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068c6:	4b65      	ldr	r3, [pc, #404]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068d4:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068da:	0e1b      	lsrs	r3, r3, #24
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	019a      	lsls	r2, r3, #6
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	431a      	orrs	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	071b      	lsls	r3, r3, #28
 80068fa:	4958      	ldr	r1, [pc, #352]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006916:	d00a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800692c:	d129      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800692e:	4b4b      	ldr	r3, [pc, #300]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800693c:	4b47      	ldr	r3, [pc, #284]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	019a      	lsls	r2, r3, #6
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	061b      	lsls	r3, r3, #24
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	071b      	lsls	r3, r3, #28
 8006962:	493e      	ldr	r1, [pc, #248]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800696a:	4b3c      	ldr	r3, [pc, #240]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800696c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006970:	f023 021f 	bic.w	r2, r3, #31
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	3b01      	subs	r3, #1
 800697a:	4938      	ldr	r1, [pc, #224]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01d      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800698e:	4b33      	ldr	r3, [pc, #204]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006994:	0e1b      	lsrs	r3, r3, #24
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800699c:	4b2f      	ldr	r3, [pc, #188]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800699e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a2:	0f1b      	lsrs	r3, r3, #28
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	019a      	lsls	r2, r3, #6
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	041b      	lsls	r3, r3, #16
 80069b6:	431a      	orrs	r2, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	061b      	lsls	r3, r3, #24
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	071b      	lsls	r3, r3, #28
 80069c2:	4926      	ldr	r1, [pc, #152]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d011      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	019a      	lsls	r2, r3, #6
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	071b      	lsls	r3, r3, #28
 80069f2:	491a      	ldr	r1, [pc, #104]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069fa:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a06:	f7fd fddf 	bl	80045c8 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a0e:	f7fd fddb 	bl	80045c8 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b64      	cmp	r3, #100	; 0x64
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e0d8      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a20:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	f040 80ce 	bne.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a40:	f7fd fdc2 	bl	80045c8 <HAL_GetTick>
 8006a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a46:	e00b      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a48:	f7fd fdbe 	bl	80045c8 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d904      	bls.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e0bb      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006a5a:	bf00      	nop
 8006a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6c:	d0ec      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02e      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d12a      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a96:	4b51      	ldr	r3, [pc, #324]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006aa4:	4b4d      	ldr	r3, [pc, #308]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	0f1b      	lsrs	r3, r3, #28
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	019a      	lsls	r2, r3, #6
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	071b      	lsls	r3, r3, #28
 8006aca:	4944      	ldr	r1, [pc, #272]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	493d      	ldr	r1, [pc, #244]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d022      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b00:	d11d      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b02:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	0e1b      	lsrs	r3, r3, #24
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b10:	4b32      	ldr	r3, [pc, #200]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	0f1b      	lsrs	r3, r3, #28
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	019a      	lsls	r2, r3, #6
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	061b      	lsls	r3, r3, #24
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	071b      	lsls	r3, r3, #28
 8006b36:	4929      	ldr	r1, [pc, #164]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d028      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b4a:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b58:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	019a      	lsls	r2, r3, #6
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	4917      	ldr	r1, [pc, #92]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4911      	ldr	r1, [pc, #68]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba8:	f7fd fd0e 	bl	80045c8 <HAL_GetTick>
 8006bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bb0:	f7fd fd0a 	bl	80045c8 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	; 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e007      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bce:	d1ef      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40023800 	.word	0x40023800

08006be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e049      	b.n	8006c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fc fe8e 	bl	8003928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fe20 	bl	8007864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d001      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e054      	b.n	8006d52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a26      	ldr	r2, [pc, #152]	; (8006d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d01d      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1e      	ldr	r2, [pc, #120]	; (8006d70 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1b      	ldr	r2, [pc, #108]	; (8006d78 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d115      	bne.n	8006d3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <HAL_TIM_Base_Start_IT+0xec>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b06      	cmp	r3, #6
 8006d20:	d015      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d28:	d011      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	e008      	b.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e000      	b.n	8006d50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40001800 	.word	0x40001800
 8006d7c:	00010007 	.word	0x00010007

08006d80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10f      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	f240 4344 	movw	r3, #1092	; 0x444
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e049      	b.n	8006e84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f841 	bl	8006e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f000 fd21 	bl	8007864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x24>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e03c      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d109      	bne.n	8006ede <HAL_TIM_PWM_Start+0x3e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e02f      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d109      	bne.n	8006ef8 <HAL_TIM_PWM_Start+0x58>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e022      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	d109      	bne.n	8006f12 <HAL_TIM_PWM_Start+0x72>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	e015      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d109      	bne.n	8006f2c <HAL_TIM_PWM_Start+0x8c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e008      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e092      	b.n	800706c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_PWM_Start+0xb6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f54:	e023      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_PWM_Start+0xc6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f64:	e01b      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_PWM_Start+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f74:	e013      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0xe6>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f84:	e00b      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_PWM_Start+0xf6>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f94:	e003      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f888 	bl	80080bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a30      	ldr	r2, [pc, #192]	; (8007074 <HAL_TIM_PWM_Start+0x1d4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_PWM_Start+0x120>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <HAL_TIM_PWM_Start+0x1d8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_PWM_Start+0x124>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x126>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a25      	ldr	r2, [pc, #148]	; (8007074 <HAL_TIM_PWM_Start+0x1d4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d01d      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a22      	ldr	r2, [pc, #136]	; (800707c <HAL_TIM_PWM_Start+0x1dc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a20      	ldr	r2, [pc, #128]	; (8007080 <HAL_TIM_PWM_Start+0x1e0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <HAL_TIM_PWM_Start+0x1e4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <HAL_TIM_PWM_Start+0x1d8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1b      	ldr	r2, [pc, #108]	; (8007088 <HAL_TIM_PWM_Start+0x1e8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIM_PWM_Start+0x18a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <HAL_TIM_PWM_Start+0x1ec>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d115      	bne.n	8007056 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	4b17      	ldr	r3, [pc, #92]	; (8007090 <HAL_TIM_PWM_Start+0x1f0>)
 8007032:	4013      	ands	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b06      	cmp	r3, #6
 800703a:	d015      	beq.n	8007068 <HAL_TIM_PWM_Start+0x1c8>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007042:	d011      	beq.n	8007068 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0201 	orr.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	e008      	b.n	8007068 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e000      	b.n	800706a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40014000 	.word	0x40014000
 800708c:	40001800 	.word	0x40001800
 8007090:	00010007 	.word	0x00010007

08007094 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 f808 	bl	80080bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a36      	ldr	r2, [pc, #216]	; (800718c <HAL_TIM_PWM_Stop+0xf8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIM_PWM_Stop+0x2c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a35      	ldr	r2, [pc, #212]	; (8007190 <HAL_TIM_PWM_Stop+0xfc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d101      	bne.n	80070c4 <HAL_TIM_PWM_Stop+0x30>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e000      	b.n	80070c6 <HAL_TIM_PWM_Stop+0x32>
 80070c4:	2300      	movs	r3, #0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <HAL_TIM_PWM_Stop+0x66>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	f240 4344 	movw	r3, #1092	; 0x444
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <HAL_TIM_PWM_Stop+0x66>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1a      	ldr	r2, [r3, #32]
 8007100:	f241 1311 	movw	r3, #4369	; 0x1111
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <HAL_TIM_PWM_Stop+0x96>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	f240 4344 	movw	r3, #1092	; 0x444
 8007114:	4013      	ands	r3, r2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d107      	bne.n	800712a <HAL_TIM_PWM_Stop+0x96>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <HAL_TIM_PWM_Stop+0xa6>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007138:	e023      	b.n	8007182 <HAL_TIM_PWM_Stop+0xee>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b04      	cmp	r3, #4
 800713e:	d104      	bne.n	800714a <HAL_TIM_PWM_Stop+0xb6>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007148:	e01b      	b.n	8007182 <HAL_TIM_PWM_Stop+0xee>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d104      	bne.n	800715a <HAL_TIM_PWM_Stop+0xc6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	e013      	b.n	8007182 <HAL_TIM_PWM_Stop+0xee>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d104      	bne.n	800716a <HAL_TIM_PWM_Stop+0xd6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007168:	e00b      	b.n	8007182 <HAL_TIM_PWM_Stop+0xee>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b10      	cmp	r3, #16
 800716e:	d104      	bne.n	800717a <HAL_TIM_PWM_Stop+0xe6>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007178:	e003      	b.n	8007182 <HAL_TIM_PWM_Stop+0xee>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400

08007194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d122      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d11b      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0202 	mvn.w	r2, #2
 80071c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fb26 	bl	8007828 <HAL_TIM_IC_CaptureCallback>
 80071dc:	e005      	b.n	80071ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fb18 	bl	8007814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb29 	bl	800783c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d122      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0204 	mvn.w	r2, #4
 8007214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fafc 	bl	8007828 <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 faee 	bl	8007814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 faff 	bl	800783c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fad2 	bl	8007828 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fac4 	bl	8007814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fad5 	bl	800783c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0210 	mvn.w	r2, #16
 80072bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 faa8 	bl	8007828 <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa9a 	bl	8007814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 faab 	bl	800783c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0201 	mvn.w	r2, #1
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fc fbae 	bl	8003a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d10e      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d107      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 ff7a 	bl	8008238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007352:	d10e      	bne.n	8007372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d107      	bne.n	8007372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ff6d 	bl	800824c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d10e      	bne.n	800739e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d107      	bne.n	800739e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa59 	bl	8007850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d10e      	bne.n	80073ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d107      	bne.n	80073ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f06f 0220 	mvn.w	r2, #32
 80073c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 ff2d 	bl	8008224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e0ff      	b.n	80075f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b14      	cmp	r3, #20
 80073fe:	f200 80f0 	bhi.w	80075e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800745d 	.word	0x0800745d
 800740c:	080075e3 	.word	0x080075e3
 8007410:	080075e3 	.word	0x080075e3
 8007414:	080075e3 	.word	0x080075e3
 8007418:	0800749d 	.word	0x0800749d
 800741c:	080075e3 	.word	0x080075e3
 8007420:	080075e3 	.word	0x080075e3
 8007424:	080075e3 	.word	0x080075e3
 8007428:	080074df 	.word	0x080074df
 800742c:	080075e3 	.word	0x080075e3
 8007430:	080075e3 	.word	0x080075e3
 8007434:	080075e3 	.word	0x080075e3
 8007438:	0800751f 	.word	0x0800751f
 800743c:	080075e3 	.word	0x080075e3
 8007440:	080075e3 	.word	0x080075e3
 8007444:	080075e3 	.word	0x080075e3
 8007448:	08007561 	.word	0x08007561
 800744c:	080075e3 	.word	0x080075e3
 8007450:	080075e3 	.word	0x080075e3
 8007454:	080075e3 	.word	0x080075e3
 8007458:	080075a1 	.word	0x080075a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fa9e 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0208 	orr.w	r2, r2, #8
 8007476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0204 	bic.w	r2, r2, #4
 8007486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6999      	ldr	r1, [r3, #24]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	619a      	str	r2, [r3, #24]
      break;
 800749a:	e0a5      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 faf0 	bl	8007a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6999      	ldr	r1, [r3, #24]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	021a      	lsls	r2, r3, #8
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	619a      	str	r2, [r3, #24]
      break;
 80074dc:	e084      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fb47 	bl	8007b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0208 	orr.w	r2, r2, #8
 80074f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0204 	bic.w	r2, r2, #4
 8007508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69d9      	ldr	r1, [r3, #28]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	61da      	str	r2, [r3, #28]
      break;
 800751c:	e064      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fb9d 	bl	8007c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	021a      	lsls	r2, r3, #8
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	61da      	str	r2, [r3, #28]
      break;
 800755e:	e043      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fbd4 	bl	8007d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800759e:	e023      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fc06 	bl	8007db8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075e0:	e002      	b.n	80075e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
      break;
 80075e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop

080075fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_TIM_ConfigClockSource+0x1c>
 8007614:	2302      	movs	r3, #2
 8007616:	e0b4      	b.n	8007782 <HAL_TIM_ConfigClockSource+0x186>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	4b56      	ldr	r3, [pc, #344]	; (800778c <HAL_TIM_ConfigClockSource+0x190>)
 8007634:	4013      	ands	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800763e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007650:	d03e      	beq.n	80076d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007656:	f200 8087 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	f000 8086 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x172>
 8007662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007666:	d87f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b70      	cmp	r3, #112	; 0x70
 800766a:	d01a      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0xa6>
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d87b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b60      	cmp	r3, #96	; 0x60
 8007672:	d050      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x11a>
 8007674:	2b60      	cmp	r3, #96	; 0x60
 8007676:	d877      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b50      	cmp	r3, #80	; 0x50
 800767a:	d03c      	beq.n	80076f6 <HAL_TIM_ConfigClockSource+0xfa>
 800767c:	2b50      	cmp	r3, #80	; 0x50
 800767e:	d873      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d058      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x13a>
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d86f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	d064      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d86b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d060      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15a>
 8007694:	2b20      	cmp	r3, #32
 8007696:	d867      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d05c      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15a>
 800769c:	2b10      	cmp	r3, #16
 800769e:	d05a      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15a>
 80076a0:	e062      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f000 fce3 	bl	800807c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
      break;
 80076ce:	e04f      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6899      	ldr	r1, [r3, #8]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f000 fccc 	bl	800807c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f2:	609a      	str	r2, [r3, #8]
      break;
 80076f4:	e03c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	461a      	mov	r2, r3
 8007704:	f000 fc40 	bl	8007f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2150      	movs	r1, #80	; 0x50
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fc99 	bl	8008046 <TIM_ITRx_SetConfig>
      break;
 8007714:	e02c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	461a      	mov	r2, r3
 8007724:	f000 fc5f 	bl	8007fe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2160      	movs	r1, #96	; 0x60
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fc89 	bl	8008046 <TIM_ITRx_SetConfig>
      break;
 8007734:	e01c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 fc20 	bl	8007f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2140      	movs	r1, #64	; 0x40
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fc79 	bl	8008046 <TIM_ITRx_SetConfig>
      break;
 8007754:	e00c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 fc70 	bl	8008046 <TIM_ITRx_SetConfig>
      break;
 8007766:	e003      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e000      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800776e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	fffeff88 	.word	0xfffeff88

08007790 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e031      	b.n	800780c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fb50 	bl	8007e60 <TIM_SlaveTimer_SetConfig>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e018      	b.n	800780c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a40      	ldr	r2, [pc, #256]	; (8007978 <TIM_Base_SetConfig+0x114>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d013      	beq.n	80078a4 <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007882:	d00f      	beq.n	80078a4 <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3d      	ldr	r2, [pc, #244]	; (800797c <TIM_Base_SetConfig+0x118>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00b      	beq.n	80078a4 <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3c      	ldr	r2, [pc, #240]	; (8007980 <TIM_Base_SetConfig+0x11c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d007      	beq.n	80078a4 <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3b      	ldr	r2, [pc, #236]	; (8007984 <TIM_Base_SetConfig+0x120>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d003      	beq.n	80078a4 <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a3a      	ldr	r2, [pc, #232]	; (8007988 <TIM_Base_SetConfig+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d108      	bne.n	80078b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2f      	ldr	r2, [pc, #188]	; (8007978 <TIM_Base_SetConfig+0x114>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02b      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c4:	d027      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2c      	ldr	r2, [pc, #176]	; (800797c <TIM_Base_SetConfig+0x118>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d023      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2b      	ldr	r2, [pc, #172]	; (8007980 <TIM_Base_SetConfig+0x11c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01f      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <TIM_Base_SetConfig+0x120>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01b      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a29      	ldr	r2, [pc, #164]	; (8007988 <TIM_Base_SetConfig+0x124>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d017      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a28      	ldr	r2, [pc, #160]	; (800798c <TIM_Base_SetConfig+0x128>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a27      	ldr	r2, [pc, #156]	; (8007990 <TIM_Base_SetConfig+0x12c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a26      	ldr	r2, [pc, #152]	; (8007994 <TIM_Base_SetConfig+0x130>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a25      	ldr	r2, [pc, #148]	; (8007998 <TIM_Base_SetConfig+0x134>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a24      	ldr	r2, [pc, #144]	; (800799c <TIM_Base_SetConfig+0x138>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_Base_SetConfig+0xb2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <TIM_Base_SetConfig+0x13c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d108      	bne.n	8007928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <TIM_Base_SetConfig+0x114>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d003      	beq.n	800795c <TIM_Base_SetConfig+0xf8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a0c      	ldr	r2, [pc, #48]	; (8007988 <TIM_Base_SetConfig+0x124>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d103      	bne.n	8007964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	615a      	str	r2, [r3, #20]
}
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800
 8007984:	40000c00 	.word	0x40000c00
 8007988:	40010400 	.word	0x40010400
 800798c:	40014000 	.word	0x40014000
 8007990:	40014400 	.word	0x40014400
 8007994:	40014800 	.word	0x40014800
 8007998:	40001800 	.word	0x40001800
 800799c:	40001c00 	.word	0x40001c00
 80079a0:	40002000 	.word	0x40002000

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4b2b      	ldr	r3, [pc, #172]	; (8007a7c <TIM_OC1_SetConfig+0xd8>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <TIM_OC1_SetConfig+0xdc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC1_SetConfig+0x64>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a20      	ldr	r2, [pc, #128]	; (8007a84 <TIM_OC1_SetConfig+0xe0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d10c      	bne.n	8007a22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0308 	bic.w	r3, r3, #8
 8007a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 0304 	bic.w	r3, r3, #4
 8007a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <TIM_OC1_SetConfig+0xdc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_OC1_SetConfig+0x8e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <TIM_OC1_SetConfig+0xe0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d111      	bne.n	8007a56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	fffeff8f 	.word	0xfffeff8f
 8007a80:	40010000 	.word	0x40010000
 8007a84:	40010400 	.word	0x40010400

08007a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0210 	bic.w	r2, r3, #16
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <TIM_OC2_SetConfig+0xe4>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f023 0320 	bic.w	r3, r3, #32
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a23      	ldr	r2, [pc, #140]	; (8007b70 <TIM_OC2_SetConfig+0xe8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_OC2_SetConfig+0x68>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <TIM_OC2_SetConfig+0xec>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10d      	bne.n	8007b0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <TIM_OC2_SetConfig+0xe8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC2_SetConfig+0x94>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <TIM_OC2_SetConfig+0xec>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d113      	bne.n	8007b44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	feff8fff 	.word	0xfeff8fff
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40010400 	.word	0x40010400

08007b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4b2d      	ldr	r3, [pc, #180]	; (8007c58 <TIM_OC3_SetConfig+0xe0>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <TIM_OC3_SetConfig+0xe4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC3_SetConfig+0x66>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a21      	ldr	r2, [pc, #132]	; (8007c60 <TIM_OC3_SetConfig+0xe8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d10d      	bne.n	8007bfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <TIM_OC3_SetConfig+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC3_SetConfig+0x92>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a16      	ldr	r2, [pc, #88]	; (8007c60 <TIM_OC3_SetConfig+0xe8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d113      	bne.n	8007c32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	621a      	str	r2, [r3, #32]
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	fffeff8f 	.word	0xfffeff8f
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40010400 	.word	0x40010400

08007c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <TIM_OC4_SetConfig+0xa4>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <TIM_OC4_SetConfig+0xa8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC4_SetConfig+0x68>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <TIM_OC4_SetConfig+0xac>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d109      	bne.n	8007ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	019b      	lsls	r3, r3, #6
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	feff8fff 	.word	0xfeff8fff
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40010400 	.word	0x40010400

08007d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4b1b      	ldr	r3, [pc, #108]	; (8007dac <TIM_OC5_SetConfig+0x98>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a12      	ldr	r2, [pc, #72]	; (8007db0 <TIM_OC5_SetConfig+0x9c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d003      	beq.n	8007d72 <TIM_OC5_SetConfig+0x5e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a11      	ldr	r2, [pc, #68]	; (8007db4 <TIM_OC5_SetConfig+0xa0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d109      	bne.n	8007d86 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	621a      	str	r2, [r3, #32]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	fffeff8f 	.word	0xfffeff8f
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40010400 	.word	0x40010400

08007db8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <TIM_OC6_SetConfig+0x9c>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	051b      	lsls	r3, r3, #20
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a13      	ldr	r2, [pc, #76]	; (8007e58 <TIM_OC6_SetConfig+0xa0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC6_SetConfig+0x60>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a12      	ldr	r2, [pc, #72]	; (8007e5c <TIM_OC6_SetConfig+0xa4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d109      	bne.n	8007e2c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	029b      	lsls	r3, r3, #10
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	feff8fff 	.word	0xfeff8fff
 8007e58:	40010000 	.word	0x40010000
 8007e5c:	40010400 	.word	0x40010400

08007e60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4b3e      	ldr	r3, [pc, #248]	; (8007f84 <TIM_SlaveTimer_SetConfig+0x124>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b70      	cmp	r3, #112	; 0x70
 8007ea8:	d01a      	beq.n	8007ee0 <TIM_SlaveTimer_SetConfig+0x80>
 8007eaa:	2b70      	cmp	r3, #112	; 0x70
 8007eac:	d860      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007eae:	2b60      	cmp	r3, #96	; 0x60
 8007eb0:	d054      	beq.n	8007f5c <TIM_SlaveTimer_SetConfig+0xfc>
 8007eb2:	2b60      	cmp	r3, #96	; 0x60
 8007eb4:	d85c      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007eb6:	2b50      	cmp	r3, #80	; 0x50
 8007eb8:	d046      	beq.n	8007f48 <TIM_SlaveTimer_SetConfig+0xe8>
 8007eba:	2b50      	cmp	r3, #80	; 0x50
 8007ebc:	d858      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d019      	beq.n	8007ef6 <TIM_SlaveTimer_SetConfig+0x96>
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d854      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007ec6:	2b30      	cmp	r3, #48	; 0x30
 8007ec8:	d055      	beq.n	8007f76 <TIM_SlaveTimer_SetConfig+0x116>
 8007eca:	2b30      	cmp	r3, #48	; 0x30
 8007ecc:	d850      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d051      	beq.n	8007f76 <TIM_SlaveTimer_SetConfig+0x116>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d84c      	bhi.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d04d      	beq.n	8007f76 <TIM_SlaveTimer_SetConfig+0x116>
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d04b      	beq.n	8007f76 <TIM_SlaveTimer_SetConfig+0x116>
 8007ede:	e047      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68d9      	ldr	r1, [r3, #12]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f000 f8c4 	bl	800807c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007ef4:	e040      	b.n	8007f78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	d101      	bne.n	8007f02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e03b      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6a1a      	ldr	r2, [r3, #32]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0201 	bic.w	r2, r2, #1
 8007f18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	621a      	str	r2, [r3, #32]
      break;
 8007f46:	e017      	b.n	8007f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6899      	ldr	r1, [r3, #8]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	461a      	mov	r2, r3
 8007f56:	f000 f817 	bl	8007f88 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f5a:	e00d      	b.n	8007f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6899      	ldr	r1, [r3, #8]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f000 f83c 	bl	8007fe6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f6e:	e003      	b.n	8007f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	e000      	b.n	8007f78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007f76:	bf00      	nop
  }

  return status;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	fffefff8 	.word	0xfffefff8

08007f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f023 0201 	bic.w	r2, r3, #1
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f023 030a 	bic.w	r3, r3, #10
 8007fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b087      	sub	sp, #28
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f023 0210 	bic.w	r2, r3, #16
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	031b      	lsls	r3, r3, #12
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	f043 0307 	orr.w	r3, r3, #7
 8008068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	609a      	str	r2, [r3, #8]
}
 8008070:	bf00      	nop
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	021a      	lsls	r2, r3, #8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	431a      	orrs	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	609a      	str	r2, [r3, #8]
}
 80080b0:	bf00      	nop
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	2201      	movs	r2, #1
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a1a      	ldr	r2, [r3, #32]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	43db      	mvns	r3, r3
 80080de:	401a      	ands	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 031f 	and.w	r3, r3, #31
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	fa01 f303 	lsl.w	r3, r1, r3
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800811c:	2302      	movs	r3, #2
 800811e:	e06d      	b.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a30      	ldr	r2, [pc, #192]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2f      	ldr	r2, [pc, #188]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d108      	bne.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800815a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a20      	ldr	r2, [pc, #128]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d022      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d01d      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d018      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d013      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00e      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d009      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a15      	ldr	r2, [pc, #84]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10c      	bne.n	80081ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	40010000 	.word	0x40010000
 800820c:	40010400 	.word	0x40010400
 8008210:	40000400 	.word	0x40000400
 8008214:	40000800 	.word	0x40000800
 8008218:	40000c00 	.word	0x40000c00
 800821c:	40014000 	.word	0x40014000
 8008220:	40001800 	.word	0x40001800

08008224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e040      	b.n	80082f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fb ffb0 	bl	80041e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2224      	movs	r2, #36	; 0x24
 800828c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fbe8 	bl	8008a74 <UART_SetConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e022      	b.n	80082f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fe3e 	bl	8008f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fec5 	bl	800907c <UART_CheckIdleState>
 80082f2:	4603      	mov	r3, r0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b08b      	sub	sp, #44	; 0x2c
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800830e:	2b20      	cmp	r3, #32
 8008310:	d156      	bne.n	80083c0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_UART_Transmit_IT+0x22>
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e04f      	b.n	80083c2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_UART_Transmit_IT+0x34>
 800832c:	2302      	movs	r3, #2
 800832e:	e048      	b.n	80083c2 <HAL_UART_Transmit_IT+0xc6>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2221      	movs	r2, #33	; 0x21
 8008360:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d107      	bne.n	800837c <HAL_UART_Transmit_IT+0x80>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <HAL_UART_Transmit_IT+0xd4>)
 8008378:	669a      	str	r2, [r3, #104]	; 0x68
 800837a:	e002      	b.n	8008382 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <HAL_UART_Transmit_IT+0xd8>)
 8008380:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e6      	bne.n	800838a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	e000      	b.n	80083c2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	372c      	adds	r7, #44	; 0x2c
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	080095d5 	.word	0x080095d5
 80083d4:	0800951f 	.word	0x0800951f

080083d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d13d      	bne.n	800846a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_Receive_IT+0x22>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e036      	b.n	800846c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UART_Receive_IT+0x34>
 8008408:	2302      	movs	r3, #2
 800840a:	e02f      	b.n	800846c <HAL_UART_Receive_IT+0x94>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d018      	beq.n	800845a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	613b      	str	r3, [r7, #16]
   return(result);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	623b      	str	r3, [r7, #32]
 8008448:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	69f9      	ldr	r1, [r7, #28]
 800844c:	6a3a      	ldr	r2, [r7, #32]
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	61bb      	str	r3, [r7, #24]
   return(result);
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e6      	bne.n	8008428 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	461a      	mov	r2, r3
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 ff19 	bl	8009298 <UART_Start_Receive_IT>
 8008466:	4603      	mov	r3, r0
 8008468:	e000      	b.n	800846c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800846a:	2302      	movs	r3, #2
  }
}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	; 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b0ba      	sub	sp, #232	; 0xe8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800849a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800849e:	f640 030f 	movw	r3, #2063	; 0x80f
 80084a2:	4013      	ands	r3, r2
 80084a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80084a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d115      	bne.n	80084dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00f      	beq.n	80084dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 82a4 	beq.w	8008a1a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
      }
      return;
 80084da:	e29e      	b.n	8008a1a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8117 	beq.w	8008714 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084f6:	4b85      	ldr	r3, [pc, #532]	; (800870c <HAL_UART_IRQHandler+0x298>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 810a 	beq.w	8008714 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d011      	beq.n	8008530 <HAL_UART_IRQHandler+0xbc>
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2201      	movs	r2, #1
 800851e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008526:	f043 0201 	orr.w	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d011      	beq.n	8008560 <HAL_UART_IRQHandler+0xec>
 800853c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <HAL_UART_IRQHandler+0x11c>
 800856c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2204      	movs	r2, #4
 800857e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008586:	f043 0202 	orr.w	r2, r3, #2
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800859c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2208      	movs	r2, #8
 80085ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c2:	f043 0208 	orr.w	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d012      	beq.n	80085fe <HAL_UART_IRQHandler+0x18a>
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 820a 	beq.w	8008a1e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00d      	beq.n	8008632 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d005      	beq.n	8008656 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800864a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008652:	2b00      	cmp	r3, #0
 8008654:	d04f      	beq.n	80086f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fee8 	bl	800942c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d141      	bne.n	80086ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800869a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1d9      	bne.n	800866a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	4a13      	ldr	r2, [pc, #76]	; (8008710 <HAL_UART_IRQHandler+0x29c>)
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fc ff2d 	bl	800552a <HAL_DMA_Abort_IT>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d017      	beq.n	8008706 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e4:	e00f      	b.n	8008706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9a4 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ec:	e00b      	b.n	8008706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9a0 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f4:	e007      	b.n	8008706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f99c 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008704:	e18b      	b.n	8008a1e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008706:	bf00      	nop
    return;
 8008708:	e189      	b.n	8008a1e <HAL_UART_IRQHandler+0x5aa>
 800870a:	bf00      	nop
 800870c:	04000120 	.word	0x04000120
 8008710:	080094f3 	.word	0x080094f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	2b01      	cmp	r3, #1
 800871a:	f040 8144 	bne.w	80089a6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800871e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 813d 	beq.w	80089a6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8136 	beq.w	80089a6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2210      	movs	r2, #16
 8008740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	f040 80b2 	bne.w	80088b6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800875e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 815d 	beq.w	8008a22 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800876e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008772:	429a      	cmp	r2, r3
 8008774:	f080 8155 	bcs.w	8008a22 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800877e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878c:	f000 8085 	beq.w	800889a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1da      	bne.n	8008790 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e1      	bne.n	80087da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3308      	adds	r3, #8
 800881c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800883a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800883c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e3      	bne.n	8008816 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886a:	f023 0310 	bic.w	r3, r3, #16
 800886e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887c:	65bb      	str	r3, [r7, #88]	; 0x58
 800887e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800888a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e4      	bne.n	800885a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4618      	mov	r0, r3
 8008896:	f7fc fdd8 	bl	800544a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f8ca 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088b4:	e0b5      	b.n	8008a22 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80a7 	beq.w	8008a26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80088d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80a2 	beq.w	8008a26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008904:	647b      	str	r3, [r7, #68]	; 0x44
 8008906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800890a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e4      	bne.n	80088e2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	623b      	str	r3, [r7, #32]
   return(result);
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	f023 0301 	bic.w	r3, r3, #1
 800892e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3308      	adds	r3, #8
 8008938:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800893c:	633a      	str	r2, [r7, #48]	; 0x30
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e3      	bne.n	8008918 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2220      	movs	r2, #32
 8008954:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	69b9      	ldr	r1, [r7, #24]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	617b      	str	r3, [r7, #20]
   return(result);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e4      	bne.n	8008962 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f852 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a4:	e03f      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <HAL_UART_IRQHandler+0x55c>
 80089b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d008      	beq.n	80089d0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f849 	bl	8008a60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ce:	e02d      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01c      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
    }
    return;
 80089f8:	e017      	b.n	8008a2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d012      	beq.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fe3e 	bl	8009694 <UART_EndTransmit_IT>
    return;
 8008a18:	e008      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a1a:	bf00      	nop
 8008a1c:	e006      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8008a2a:	bf00      	nop
  }

}
 8008a2c:	37e8      	adds	r7, #232	; 0xe8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	4ba7      	ldr	r3, [pc, #668]	; (8008d3c <UART_SetConfig+0x2c8>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a95      	ldr	r2, [pc, #596]	; (8008d40 <UART_SetConfig+0x2cc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d120      	bne.n	8008b32 <UART_SetConfig+0xbe>
 8008af0:	4b94      	ldr	r3, [pc, #592]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d816      	bhi.n	8008b2c <UART_SetConfig+0xb8>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x90>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b1b 	.word	0x08008b1b
 8008b10:	08008b27 	.word	0x08008b27
 8008b14:	2301      	movs	r3, #1
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e14f      	b.n	8008dba <UART_SetConfig+0x346>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e14c      	b.n	8008dba <UART_SetConfig+0x346>
 8008b20:	2304      	movs	r3, #4
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e149      	b.n	8008dba <UART_SetConfig+0x346>
 8008b26:	2308      	movs	r3, #8
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e146      	b.n	8008dba <UART_SetConfig+0x346>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e143      	b.n	8008dba <UART_SetConfig+0x346>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a84      	ldr	r2, [pc, #528]	; (8008d48 <UART_SetConfig+0x2d4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d132      	bne.n	8008ba2 <UART_SetConfig+0x12e>
 8008b3c:	4b81      	ldr	r3, [pc, #516]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f003 030c 	and.w	r3, r3, #12
 8008b46:	2b0c      	cmp	r3, #12
 8008b48:	d828      	bhi.n	8008b9c <UART_SetConfig+0x128>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0xdc>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b85 	.word	0x08008b85
 8008b54:	08008b9d 	.word	0x08008b9d
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008b91 	.word	0x08008b91
 8008b64:	08008b9d 	.word	0x08008b9d
 8008b68:	08008b9d 	.word	0x08008b9d
 8008b6c:	08008b9d 	.word	0x08008b9d
 8008b70:	08008b8b 	.word	0x08008b8b
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008b9d 	.word	0x08008b9d
 8008b80:	08008b97 	.word	0x08008b97
 8008b84:	2300      	movs	r3, #0
 8008b86:	77fb      	strb	r3, [r7, #31]
 8008b88:	e117      	b.n	8008dba <UART_SetConfig+0x346>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	77fb      	strb	r3, [r7, #31]
 8008b8e:	e114      	b.n	8008dba <UART_SetConfig+0x346>
 8008b90:	2304      	movs	r3, #4
 8008b92:	77fb      	strb	r3, [r7, #31]
 8008b94:	e111      	b.n	8008dba <UART_SetConfig+0x346>
 8008b96:	2308      	movs	r3, #8
 8008b98:	77fb      	strb	r3, [r7, #31]
 8008b9a:	e10e      	b.n	8008dba <UART_SetConfig+0x346>
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	77fb      	strb	r3, [r7, #31]
 8008ba0:	e10b      	b.n	8008dba <UART_SetConfig+0x346>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a69      	ldr	r2, [pc, #420]	; (8008d4c <UART_SetConfig+0x2d8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d120      	bne.n	8008bee <UART_SetConfig+0x17a>
 8008bac:	4b65      	ldr	r3, [pc, #404]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bb6:	2b30      	cmp	r3, #48	; 0x30
 8008bb8:	d013      	beq.n	8008be2 <UART_SetConfig+0x16e>
 8008bba:	2b30      	cmp	r3, #48	; 0x30
 8008bbc:	d814      	bhi.n	8008be8 <UART_SetConfig+0x174>
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d009      	beq.n	8008bd6 <UART_SetConfig+0x162>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d810      	bhi.n	8008be8 <UART_SetConfig+0x174>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <UART_SetConfig+0x15c>
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d006      	beq.n	8008bdc <UART_SetConfig+0x168>
 8008bce:	e00b      	b.n	8008be8 <UART_SetConfig+0x174>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e0f1      	b.n	8008dba <UART_SetConfig+0x346>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	77fb      	strb	r3, [r7, #31]
 8008bda:	e0ee      	b.n	8008dba <UART_SetConfig+0x346>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	e0eb      	b.n	8008dba <UART_SetConfig+0x346>
 8008be2:	2308      	movs	r3, #8
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e0e8      	b.n	8008dba <UART_SetConfig+0x346>
 8008be8:	2310      	movs	r3, #16
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e0e5      	b.n	8008dba <UART_SetConfig+0x346>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a57      	ldr	r2, [pc, #348]	; (8008d50 <UART_SetConfig+0x2dc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d120      	bne.n	8008c3a <UART_SetConfig+0x1c6>
 8008bf8:	4b52      	ldr	r3, [pc, #328]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c02:	2bc0      	cmp	r3, #192	; 0xc0
 8008c04:	d013      	beq.n	8008c2e <UART_SetConfig+0x1ba>
 8008c06:	2bc0      	cmp	r3, #192	; 0xc0
 8008c08:	d814      	bhi.n	8008c34 <UART_SetConfig+0x1c0>
 8008c0a:	2b80      	cmp	r3, #128	; 0x80
 8008c0c:	d009      	beq.n	8008c22 <UART_SetConfig+0x1ae>
 8008c0e:	2b80      	cmp	r3, #128	; 0x80
 8008c10:	d810      	bhi.n	8008c34 <UART_SetConfig+0x1c0>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <UART_SetConfig+0x1a8>
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d006      	beq.n	8008c28 <UART_SetConfig+0x1b4>
 8008c1a:	e00b      	b.n	8008c34 <UART_SetConfig+0x1c0>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e0cb      	b.n	8008dba <UART_SetConfig+0x346>
 8008c22:	2302      	movs	r3, #2
 8008c24:	77fb      	strb	r3, [r7, #31]
 8008c26:	e0c8      	b.n	8008dba <UART_SetConfig+0x346>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e0c5      	b.n	8008dba <UART_SetConfig+0x346>
 8008c2e:	2308      	movs	r3, #8
 8008c30:	77fb      	strb	r3, [r7, #31]
 8008c32:	e0c2      	b.n	8008dba <UART_SetConfig+0x346>
 8008c34:	2310      	movs	r3, #16
 8008c36:	77fb      	strb	r3, [r7, #31]
 8008c38:	e0bf      	b.n	8008dba <UART_SetConfig+0x346>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a45      	ldr	r2, [pc, #276]	; (8008d54 <UART_SetConfig+0x2e0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d125      	bne.n	8008c90 <UART_SetConfig+0x21c>
 8008c44:	4b3f      	ldr	r3, [pc, #252]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c52:	d017      	beq.n	8008c84 <UART_SetConfig+0x210>
 8008c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c58:	d817      	bhi.n	8008c8a <UART_SetConfig+0x216>
 8008c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5e:	d00b      	beq.n	8008c78 <UART_SetConfig+0x204>
 8008c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c64:	d811      	bhi.n	8008c8a <UART_SetConfig+0x216>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <UART_SetConfig+0x1fe>
 8008c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c6e:	d006      	beq.n	8008c7e <UART_SetConfig+0x20a>
 8008c70:	e00b      	b.n	8008c8a <UART_SetConfig+0x216>
 8008c72:	2300      	movs	r3, #0
 8008c74:	77fb      	strb	r3, [r7, #31]
 8008c76:	e0a0      	b.n	8008dba <UART_SetConfig+0x346>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	77fb      	strb	r3, [r7, #31]
 8008c7c:	e09d      	b.n	8008dba <UART_SetConfig+0x346>
 8008c7e:	2304      	movs	r3, #4
 8008c80:	77fb      	strb	r3, [r7, #31]
 8008c82:	e09a      	b.n	8008dba <UART_SetConfig+0x346>
 8008c84:	2308      	movs	r3, #8
 8008c86:	77fb      	strb	r3, [r7, #31]
 8008c88:	e097      	b.n	8008dba <UART_SetConfig+0x346>
 8008c8a:	2310      	movs	r3, #16
 8008c8c:	77fb      	strb	r3, [r7, #31]
 8008c8e:	e094      	b.n	8008dba <UART_SetConfig+0x346>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a30      	ldr	r2, [pc, #192]	; (8008d58 <UART_SetConfig+0x2e4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d125      	bne.n	8008ce6 <UART_SetConfig+0x272>
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ca8:	d017      	beq.n	8008cda <UART_SetConfig+0x266>
 8008caa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cae:	d817      	bhi.n	8008ce0 <UART_SetConfig+0x26c>
 8008cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cb4:	d00b      	beq.n	8008cce <UART_SetConfig+0x25a>
 8008cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cba:	d811      	bhi.n	8008ce0 <UART_SetConfig+0x26c>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <UART_SetConfig+0x254>
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc4:	d006      	beq.n	8008cd4 <UART_SetConfig+0x260>
 8008cc6:	e00b      	b.n	8008ce0 <UART_SetConfig+0x26c>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e075      	b.n	8008dba <UART_SetConfig+0x346>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e072      	b.n	8008dba <UART_SetConfig+0x346>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	e06f      	b.n	8008dba <UART_SetConfig+0x346>
 8008cda:	2308      	movs	r3, #8
 8008cdc:	77fb      	strb	r3, [r7, #31]
 8008cde:	e06c      	b.n	8008dba <UART_SetConfig+0x346>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e069      	b.n	8008dba <UART_SetConfig+0x346>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <UART_SetConfig+0x2e8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d137      	bne.n	8008d60 <UART_SetConfig+0x2ec>
 8008cf0:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <UART_SetConfig+0x2d0>)
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cfe:	d017      	beq.n	8008d30 <UART_SetConfig+0x2bc>
 8008d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d04:	d817      	bhi.n	8008d36 <UART_SetConfig+0x2c2>
 8008d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0a:	d00b      	beq.n	8008d24 <UART_SetConfig+0x2b0>
 8008d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d10:	d811      	bhi.n	8008d36 <UART_SetConfig+0x2c2>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <UART_SetConfig+0x2aa>
 8008d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1a:	d006      	beq.n	8008d2a <UART_SetConfig+0x2b6>
 8008d1c:	e00b      	b.n	8008d36 <UART_SetConfig+0x2c2>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	77fb      	strb	r3, [r7, #31]
 8008d22:	e04a      	b.n	8008dba <UART_SetConfig+0x346>
 8008d24:	2302      	movs	r3, #2
 8008d26:	77fb      	strb	r3, [r7, #31]
 8008d28:	e047      	b.n	8008dba <UART_SetConfig+0x346>
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e044      	b.n	8008dba <UART_SetConfig+0x346>
 8008d30:	2308      	movs	r3, #8
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e041      	b.n	8008dba <UART_SetConfig+0x346>
 8008d36:	2310      	movs	r3, #16
 8008d38:	77fb      	strb	r3, [r7, #31]
 8008d3a:	e03e      	b.n	8008dba <UART_SetConfig+0x346>
 8008d3c:	efff69f3 	.word	0xefff69f3
 8008d40:	40011000 	.word	0x40011000
 8008d44:	40023800 	.word	0x40023800
 8008d48:	40004400 	.word	0x40004400
 8008d4c:	40004800 	.word	0x40004800
 8008d50:	40004c00 	.word	0x40004c00
 8008d54:	40005000 	.word	0x40005000
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	40007800 	.word	0x40007800
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a71      	ldr	r2, [pc, #452]	; (8008f2c <UART_SetConfig+0x4b8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d125      	bne.n	8008db6 <UART_SetConfig+0x342>
 8008d6a:	4b71      	ldr	r3, [pc, #452]	; (8008f30 <UART_SetConfig+0x4bc>)
 8008d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d78:	d017      	beq.n	8008daa <UART_SetConfig+0x336>
 8008d7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d7e:	d817      	bhi.n	8008db0 <UART_SetConfig+0x33c>
 8008d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d84:	d00b      	beq.n	8008d9e <UART_SetConfig+0x32a>
 8008d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d8a:	d811      	bhi.n	8008db0 <UART_SetConfig+0x33c>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <UART_SetConfig+0x324>
 8008d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d94:	d006      	beq.n	8008da4 <UART_SetConfig+0x330>
 8008d96:	e00b      	b.n	8008db0 <UART_SetConfig+0x33c>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	77fb      	strb	r3, [r7, #31]
 8008d9c:	e00d      	b.n	8008dba <UART_SetConfig+0x346>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	e00a      	b.n	8008dba <UART_SetConfig+0x346>
 8008da4:	2304      	movs	r3, #4
 8008da6:	77fb      	strb	r3, [r7, #31]
 8008da8:	e007      	b.n	8008dba <UART_SetConfig+0x346>
 8008daa:	2308      	movs	r3, #8
 8008dac:	77fb      	strb	r3, [r7, #31]
 8008dae:	e004      	b.n	8008dba <UART_SetConfig+0x346>
 8008db0:	2310      	movs	r3, #16
 8008db2:	77fb      	strb	r3, [r7, #31]
 8008db4:	e001      	b.n	8008dba <UART_SetConfig+0x346>
 8008db6:	2310      	movs	r3, #16
 8008db8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc2:	d15a      	bne.n	8008e7a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008dc4:	7ffb      	ldrb	r3, [r7, #31]
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	d827      	bhi.n	8008e1a <UART_SetConfig+0x3a6>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <UART_SetConfig+0x35c>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008dfd 	.word	0x08008dfd
 8008dd8:	08008e05 	.word	0x08008e05
 8008ddc:	08008e1b 	.word	0x08008e1b
 8008de0:	08008e0b 	.word	0x08008e0b
 8008de4:	08008e1b 	.word	0x08008e1b
 8008de8:	08008e1b 	.word	0x08008e1b
 8008dec:	08008e1b 	.word	0x08008e1b
 8008df0:	08008e13 	.word	0x08008e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008df4:	f7fd faa4 	bl	8006340 <HAL_RCC_GetPCLK1Freq>
 8008df8:	61b8      	str	r0, [r7, #24]
        break;
 8008dfa:	e013      	b.n	8008e24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dfc:	f7fd fab4 	bl	8006368 <HAL_RCC_GetPCLK2Freq>
 8008e00:	61b8      	str	r0, [r7, #24]
        break;
 8008e02:	e00f      	b.n	8008e24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e04:	4b4b      	ldr	r3, [pc, #300]	; (8008f34 <UART_SetConfig+0x4c0>)
 8008e06:	61bb      	str	r3, [r7, #24]
        break;
 8008e08:	e00c      	b.n	8008e24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0a:	f7fd f9ab 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8008e0e:	61b8      	str	r0, [r7, #24]
        break;
 8008e10:	e008      	b.n	8008e24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e16:	61bb      	str	r3, [r7, #24]
        break;
 8008e18:	e004      	b.n	8008e24 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	77bb      	strb	r3, [r7, #30]
        break;
 8008e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d074      	beq.n	8008f14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	005a      	lsls	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	085b      	lsrs	r3, r3, #1
 8008e34:	441a      	add	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b0f      	cmp	r3, #15
 8008e44:	d916      	bls.n	8008e74 <UART_SetConfig+0x400>
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d212      	bcs.n	8008e74 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f023 030f 	bic.w	r3, r3, #15
 8008e56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	89fa      	ldrh	r2, [r7, #14]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e04f      	b.n	8008f14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	77bb      	strb	r3, [r7, #30]
 8008e78:	e04c      	b.n	8008f14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e7a:	7ffb      	ldrb	r3, [r7, #31]
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d828      	bhi.n	8008ed2 <UART_SetConfig+0x45e>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <UART_SetConfig+0x414>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ed3 	.word	0x08008ed3
 8008e98:	08008ec3 	.word	0x08008ec3
 8008e9c:	08008ed3 	.word	0x08008ed3
 8008ea0:	08008ed3 	.word	0x08008ed3
 8008ea4:	08008ed3 	.word	0x08008ed3
 8008ea8:	08008ecb 	.word	0x08008ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eac:	f7fd fa48 	bl	8006340 <HAL_RCC_GetPCLK1Freq>
 8008eb0:	61b8      	str	r0, [r7, #24]
        break;
 8008eb2:	e013      	b.n	8008edc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb4:	f7fd fa58 	bl	8006368 <HAL_RCC_GetPCLK2Freq>
 8008eb8:	61b8      	str	r0, [r7, #24]
        break;
 8008eba:	e00f      	b.n	8008edc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <UART_SetConfig+0x4c0>)
 8008ebe:	61bb      	str	r3, [r7, #24]
        break;
 8008ec0:	e00c      	b.n	8008edc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec2:	f7fd f94f 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8008ec6:	61b8      	str	r0, [r7, #24]
        break;
 8008ec8:	e008      	b.n	8008edc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ece:	61bb      	str	r3, [r7, #24]
        break;
 8008ed0:	e004      	b.n	8008edc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8008eda:	bf00      	nop
    }

    if (pclk != 0U)
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d018      	beq.n	8008f14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	085a      	lsrs	r2, r3, #1
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b0f      	cmp	r3, #15
 8008efa:	d909      	bls.n	8008f10 <UART_SetConfig+0x49c>
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f02:	d205      	bcs.n	8008f10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	e001      	b.n	8008f14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008f20:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	40007c00 	.word	0x40007c00
 8008f30:	40023800 	.word	0x40023800
 8008f34:	00f42400 	.word	0x00f42400

08008f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01a      	beq.n	800904e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009036:	d10a      	bne.n	800904e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	605a      	str	r2, [r3, #4]
  }
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af02      	add	r7, sp, #8
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800908c:	f7fb fa9c 	bl	80045c8 <HAL_GetTick>
 8009090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b08      	cmp	r3, #8
 800909e:	d10e      	bne.n	80090be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f82d 	bl	800910e <UART_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e023      	b.n	8009106 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d10e      	bne.n	80090ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f817 	bl	800910e <UART_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00d      	b.n	8009106 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b09c      	sub	sp, #112	; 0x70
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911e:	e0a5      	b.n	800926c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	f000 80a1 	beq.w	800926c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912a:	f7fb fa4d 	bl	80045c8 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <UART_WaitOnFlagUntilTimeout+0x32>
 800913a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913c:	2b00      	cmp	r3, #0
 800913e:	d13e      	bne.n	80091be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800914e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009154:	667b      	str	r3, [r7, #100]	; 0x64
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009160:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800916c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e6      	bne.n	8009140 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	f023 0301 	bic.w	r3, r3, #1
 8009188:	663b      	str	r3, [r7, #96]	; 0x60
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009192:	64ba      	str	r2, [r7, #72]	; 0x48
 8009194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e5      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e067      	b.n	800928e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d04f      	beq.n	800926c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091da:	d147      	bne.n	800926c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
 8009206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800920a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	613b      	str	r3, [r7, #16]
   return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3308      	adds	r3, #8
 8009236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009238:	623a      	str	r2, [r7, #32]
 800923a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	69f9      	ldr	r1, [r7, #28]
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	61bb      	str	r3, [r7, #24]
   return(result);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e5      	bne.n	8009218 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2220      	movs	r2, #32
 800925c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e010      	b.n	800928e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69da      	ldr	r2, [r3, #28]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4013      	ands	r3, r2
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	429a      	cmp	r2, r3
 800927a:	bf0c      	ite	eq
 800927c:	2301      	moveq	r3, #1
 800927e:	2300      	movne	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	461a      	mov	r2, r3
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	429a      	cmp	r2, r3
 8009288:	f43f af4a 	beq.w	8009120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3770      	adds	r7, #112	; 0x70
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009298:	b480      	push	{r7}
 800929a:	b097      	sub	sp, #92	; 0x5c
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	88fa      	ldrh	r2, [r7, #6]
 80092b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ca:	d10e      	bne.n	80092ea <UART_Start_Receive_IT+0x52>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d105      	bne.n	80092e0 <UART_Start_Receive_IT+0x48>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092de:	e02d      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	22ff      	movs	r2, #255	; 0xff
 80092e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092e8:	e028      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10d      	bne.n	800930e <UART_Start_Receive_IT+0x76>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <UART_Start_Receive_IT+0x6c>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	22ff      	movs	r2, #255	; 0xff
 80092fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009302:	e01b      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	227f      	movs	r2, #127	; 0x7f
 8009308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800930c:	e016      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009316:	d10d      	bne.n	8009334 <UART_Start_Receive_IT+0x9c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <UART_Start_Receive_IT+0x92>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	227f      	movs	r2, #127	; 0x7f
 8009324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009328:	e008      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	223f      	movs	r2, #63	; 0x3f
 800932e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009332:	e003      	b.n	800933c <UART_Start_Receive_IT+0xa4>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2222      	movs	r2, #34	; 0x22
 8009348:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	657b      	str	r3, [r7, #84]	; 0x54
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800936a:	64ba      	str	r2, [r7, #72]	; 0x48
 800936c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	d107      	bne.n	8009398 <UART_Start_Receive_IT+0x100>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a24      	ldr	r2, [pc, #144]	; (8009424 <UART_Start_Receive_IT+0x18c>)
 8009394:	665a      	str	r2, [r3, #100]	; 0x64
 8009396:	e002      	b.n	800939e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a23      	ldr	r2, [pc, #140]	; (8009428 <UART_Start_Receive_IT+0x190>)
 800939c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d019      	beq.n	80093e2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80093c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_Start_Receive_IT+0x116>
 80093e0:	e018      	b.n	8009414 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	613b      	str	r3, [r7, #16]
   return(result);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f043 0320 	orr.w	r3, r3, #32
 80093f6:	653b      	str	r3, [r7, #80]	; 0x50
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009400:	623b      	str	r3, [r7, #32]
 8009402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	69f9      	ldr	r1, [r7, #28]
 8009406:	6a3a      	ldr	r2, [r7, #32]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	61bb      	str	r3, [r7, #24]
   return(result);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e6      	bne.n	80093e2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	375c      	adds	r7, #92	; 0x5c
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	08009845 	.word	0x08009845
 8009428:	080096e9 	.word	0x080096e9

0800942c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b095      	sub	sp, #84	; 0x54
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009452:	643b      	str	r3, [r7, #64]	; 0x40
 8009454:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e6      	bne.n	8009434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	61fb      	str	r3, [r7, #28]
   return(result);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	64bb      	str	r3, [r7, #72]	; 0x48
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e5      	bne.n	8009466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d118      	bne.n	80094d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f023 0310 	bic.w	r3, r3, #16
 80094b6:	647b      	str	r3, [r7, #68]	; 0x44
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6979      	ldr	r1, [r7, #20]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	613b      	str	r3, [r7, #16]
   return(result);
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e6      	bne.n	80094a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80094e6:	bf00      	nop
 80094e8:	3754      	adds	r7, #84	; 0x54
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fa8f 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800951e:	b480      	push	{r7}
 8009520:	b08f      	sub	sp, #60	; 0x3c
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800952a:	2b21      	cmp	r3, #33	; 0x21
 800952c:	d14c      	bne.n	80095c8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d132      	bne.n	80095a0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	61fb      	str	r3, [r7, #28]
   return(result);
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954e:	637b      	str	r3, [r7, #52]	; 0x34
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800955a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	60bb      	str	r3, [r7, #8]
   return(result);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009580:	633b      	str	r3, [r7, #48]	; 0x30
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	613b      	str	r3, [r7, #16]
   return(result);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e6      	bne.n	800956c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800959e:	e013      	b.n	80095c8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80095c8:	bf00      	nop
 80095ca:	373c      	adds	r7, #60	; 0x3c
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b091      	sub	sp, #68	; 0x44
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095e0:	2b21      	cmp	r3, #33	; 0x21
 80095e2:	d151      	bne.n	8009688 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d132      	bne.n	8009656 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009604:	63bb      	str	r3, [r7, #56]	; 0x38
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	633b      	str	r3, [r7, #48]	; 0x30
 8009610:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e6      	bne.n	80095f0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009636:	637b      	str	r3, [r7, #52]	; 0x34
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	69b9      	ldr	r1, [r7, #24]
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	617b      	str	r3, [r7, #20]
   return(result);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009654:	e018      	b.n	8009688 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800965c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800966a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009670:	1c9a      	adds	r2, r3, #2
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009688:	bf00      	nop
 800968a:	3744      	adds	r7, #68	; 0x44
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	61bb      	str	r3, [r7, #24]
 80096bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6979      	ldr	r1, [r7, #20]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	613b      	str	r3, [r7, #16]
   return(result);
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e6      	bne.n	800969c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fa fec0 	bl	8004460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b096      	sub	sp, #88	; 0x58
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	2b22      	cmp	r3, #34	; 0x22
 8009700:	f040 8094 	bne.w	800982c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800970e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009712:	b2d9      	uxtb	r1, r3
 8009714:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009718:	b2da      	uxtb	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	400a      	ands	r2, r1
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d177      	bne.n	800983c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800975a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009760:	653b      	str	r3, [r7, #80]	; 0x50
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800976a:	647b      	str	r3, [r7, #68]	; 0x44
 800976c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e6      	bne.n	800974c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3308      	adds	r3, #8
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	623b      	str	r3, [r7, #32]
   return(result);
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800979e:	633a      	str	r2, [r7, #48]	; 0x30
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e5      	bne.n	800977e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d12e      	bne.n	8009824 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f023 0310 	bic.w	r3, r3, #16
 80097e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	69b9      	ldr	r1, [r7, #24]
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	617b      	str	r3, [r7, #20]
   return(result);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e6      	bne.n	80097cc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b10      	cmp	r3, #16
 800980a:	d103      	bne.n	8009814 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2210      	movs	r2, #16
 8009812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff f913 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009822:	e00b      	b.n	800983c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7fa fdb1 	bl	800438c <HAL_UART_RxCpltCallback>
}
 800982a:	e007      	b.n	800983c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0208 	orr.w	r2, r2, #8
 800983a:	619a      	str	r2, [r3, #24]
}
 800983c:	bf00      	nop
 800983e:	3758      	adds	r7, #88	; 0x58
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b096      	sub	sp, #88	; 0x58
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009852:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800985a:	2b22      	cmp	r3, #34	; 0x22
 800985c:	f040 8094 	bne.w	8009988 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009870:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009878:	4013      	ands	r3, r2
 800987a:	b29a      	uxth	r2, r3
 800987c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009884:	1c9a      	adds	r2, r3, #2
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009890:	b29b      	uxth	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	b29a      	uxth	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d177      	bne.n	8009998 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c6:	643b      	str	r3, [r7, #64]	; 0x40
 80098c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e6      	bne.n	80098a8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e5      	bne.n	80098da <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991e:	2b01      	cmp	r3, #1
 8009920:	d12e      	bne.n	8009980 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	60bb      	str	r3, [r7, #8]
   return(result);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	647b      	str	r3, [r7, #68]	; 0x44
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	6979      	ldr	r1, [r7, #20]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	613b      	str	r3, [r7, #16]
   return(result);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e6      	bne.n	8009928 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b10      	cmp	r3, #16
 8009966:	d103      	bne.n	8009970 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2210      	movs	r2, #16
 800996e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff f865 	bl	8008a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800997e:	e00b      	b.n	8009998 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fa fd03 	bl	800438c <HAL_UART_RxCpltCallback>
}
 8009986:	e007      	b.n	8009998 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0208 	orr.w	r2, r2, #8
 8009996:	619a      	str	r2, [r3, #24]
}
 8009998:	bf00      	nop
 800999a:	3758      	adds	r7, #88	; 0x58
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <__errno>:
 80099a0:	4b01      	ldr	r3, [pc, #4]	; (80099a8 <__errno+0x8>)
 80099a2:	6818      	ldr	r0, [r3, #0]
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20000128 	.word	0x20000128

080099ac <__libc_init_array>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4d0d      	ldr	r5, [pc, #52]	; (80099e4 <__libc_init_array+0x38>)
 80099b0:	4c0d      	ldr	r4, [pc, #52]	; (80099e8 <__libc_init_array+0x3c>)
 80099b2:	1b64      	subs	r4, r4, r5
 80099b4:	10a4      	asrs	r4, r4, #2
 80099b6:	2600      	movs	r6, #0
 80099b8:	42a6      	cmp	r6, r4
 80099ba:	d109      	bne.n	80099d0 <__libc_init_array+0x24>
 80099bc:	4d0b      	ldr	r5, [pc, #44]	; (80099ec <__libc_init_array+0x40>)
 80099be:	4c0c      	ldr	r4, [pc, #48]	; (80099f0 <__libc_init_array+0x44>)
 80099c0:	f004 ffcc 	bl	800e95c <_init>
 80099c4:	1b64      	subs	r4, r4, r5
 80099c6:	10a4      	asrs	r4, r4, #2
 80099c8:	2600      	movs	r6, #0
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	d105      	bne.n	80099da <__libc_init_array+0x2e>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d4:	4798      	blx	r3
 80099d6:	3601      	adds	r6, #1
 80099d8:	e7ee      	b.n	80099b8 <__libc_init_array+0xc>
 80099da:	f855 3b04 	ldr.w	r3, [r5], #4
 80099de:	4798      	blx	r3
 80099e0:	3601      	adds	r6, #1
 80099e2:	e7f2      	b.n	80099ca <__libc_init_array+0x1e>
 80099e4:	0800fbc4 	.word	0x0800fbc4
 80099e8:	0800fbc4 	.word	0x0800fbc4
 80099ec:	0800fbc4 	.word	0x0800fbc4
 80099f0:	0800fbc8 	.word	0x0800fbc8

080099f4 <memset>:
 80099f4:	4402      	add	r2, r0
 80099f6:	4603      	mov	r3, r0
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d100      	bne.n	80099fe <memset+0xa>
 80099fc:	4770      	bx	lr
 80099fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009a02:	e7f9      	b.n	80099f8 <memset+0x4>

08009a04 <__cvt>:
 8009a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a06:	ed2d 8b02 	vpush	{d8}
 8009a0a:	eeb0 8b40 	vmov.f64	d8, d0
 8009a0e:	b085      	sub	sp, #20
 8009a10:	4617      	mov	r7, r2
 8009a12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009a14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a16:	ee18 2a90 	vmov	r2, s17
 8009a1a:	f025 0520 	bic.w	r5, r5, #32
 8009a1e:	2a00      	cmp	r2, #0
 8009a20:	bfb6      	itet	lt
 8009a22:	222d      	movlt	r2, #45	; 0x2d
 8009a24:	2200      	movge	r2, #0
 8009a26:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a2a:	2d46      	cmp	r5, #70	; 0x46
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	d004      	beq.n	8009a3c <__cvt+0x38>
 8009a32:	2d45      	cmp	r5, #69	; 0x45
 8009a34:	d100      	bne.n	8009a38 <__cvt+0x34>
 8009a36:	3401      	adds	r4, #1
 8009a38:	2102      	movs	r1, #2
 8009a3a:	e000      	b.n	8009a3e <__cvt+0x3a>
 8009a3c:	2103      	movs	r1, #3
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	ab02      	add	r3, sp, #8
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	4622      	mov	r2, r4
 8009a48:	4633      	mov	r3, r6
 8009a4a:	eeb0 0b48 	vmov.f64	d0, d8
 8009a4e:	f001 fe0f 	bl	800b670 <_dtoa_r>
 8009a52:	2d47      	cmp	r5, #71	; 0x47
 8009a54:	d109      	bne.n	8009a6a <__cvt+0x66>
 8009a56:	07fb      	lsls	r3, r7, #31
 8009a58:	d407      	bmi.n	8009a6a <__cvt+0x66>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a5e:	1a1b      	subs	r3, r3, r0
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	b005      	add	sp, #20
 8009a64:	ecbd 8b02 	vpop	{d8}
 8009a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6a:	2d46      	cmp	r5, #70	; 0x46
 8009a6c:	eb00 0204 	add.w	r2, r0, r4
 8009a70:	d10c      	bne.n	8009a8c <__cvt+0x88>
 8009a72:	7803      	ldrb	r3, [r0, #0]
 8009a74:	2b30      	cmp	r3, #48	; 0x30
 8009a76:	d107      	bne.n	8009a88 <__cvt+0x84>
 8009a78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a80:	bf1c      	itt	ne
 8009a82:	f1c4 0401 	rsbne	r4, r4, #1
 8009a86:	6034      	strne	r4, [r6, #0]
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a94:	bf08      	it	eq
 8009a96:	9203      	streq	r2, [sp, #12]
 8009a98:	2130      	movs	r1, #48	; 0x30
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d2dc      	bcs.n	8009a5a <__cvt+0x56>
 8009aa0:	1c5c      	adds	r4, r3, #1
 8009aa2:	9403      	str	r4, [sp, #12]
 8009aa4:	7019      	strb	r1, [r3, #0]
 8009aa6:	e7f8      	b.n	8009a9a <__cvt+0x96>

08009aa8 <__exponent>:
 8009aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2900      	cmp	r1, #0
 8009aae:	bfb8      	it	lt
 8009ab0:	4249      	neglt	r1, r1
 8009ab2:	f803 2b02 	strb.w	r2, [r3], #2
 8009ab6:	bfb4      	ite	lt
 8009ab8:	222d      	movlt	r2, #45	; 0x2d
 8009aba:	222b      	movge	r2, #43	; 0x2b
 8009abc:	2909      	cmp	r1, #9
 8009abe:	7042      	strb	r2, [r0, #1]
 8009ac0:	dd2a      	ble.n	8009b18 <__exponent+0x70>
 8009ac2:	f10d 0407 	add.w	r4, sp, #7
 8009ac6:	46a4      	mov	ip, r4
 8009ac8:	270a      	movs	r7, #10
 8009aca:	46a6      	mov	lr, r4
 8009acc:	460a      	mov	r2, r1
 8009ace:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ad2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ad6:	3530      	adds	r5, #48	; 0x30
 8009ad8:	2a63      	cmp	r2, #99	; 0x63
 8009ada:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ade:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	dcf1      	bgt.n	8009aca <__exponent+0x22>
 8009ae6:	3130      	adds	r1, #48	; 0x30
 8009ae8:	f1ae 0502 	sub.w	r5, lr, #2
 8009aec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009af0:	1c44      	adds	r4, r0, #1
 8009af2:	4629      	mov	r1, r5
 8009af4:	4561      	cmp	r1, ip
 8009af6:	d30a      	bcc.n	8009b0e <__exponent+0x66>
 8009af8:	f10d 0209 	add.w	r2, sp, #9
 8009afc:	eba2 020e 	sub.w	r2, r2, lr
 8009b00:	4565      	cmp	r5, ip
 8009b02:	bf88      	it	hi
 8009b04:	2200      	movhi	r2, #0
 8009b06:	4413      	add	r3, r2
 8009b08:	1a18      	subs	r0, r3, r0
 8009b0a:	b003      	add	sp, #12
 8009b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b16:	e7ed      	b.n	8009af4 <__exponent+0x4c>
 8009b18:	2330      	movs	r3, #48	; 0x30
 8009b1a:	3130      	adds	r1, #48	; 0x30
 8009b1c:	7083      	strb	r3, [r0, #2]
 8009b1e:	70c1      	strb	r1, [r0, #3]
 8009b20:	1d03      	adds	r3, r0, #4
 8009b22:	e7f1      	b.n	8009b08 <__exponent+0x60>
 8009b24:	0000      	movs	r0, r0
	...

08009b28 <_printf_float>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b08b      	sub	sp, #44	; 0x2c
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009b34:	4616      	mov	r6, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	4605      	mov	r5, r0
 8009b3a:	f002 fe8b 	bl	800c854 <_localeconv_r>
 8009b3e:	f8d0 b000 	ldr.w	fp, [r0]
 8009b42:	4658      	mov	r0, fp
 8009b44:	f7f6 fb86 	bl	8000254 <strlen>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	3307      	adds	r3, #7
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	f103 0108 	add.w	r1, r3, #8
 8009b60:	f8c8 1000 	str.w	r1, [r8]
 8009b64:	4682      	mov	sl, r0
 8009b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009b6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009dd0 <_printf_float+0x2a8>
 8009b72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009b76:	eeb0 6bc0 	vabs.f64	d6, d0
 8009b7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8009b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b82:	dd24      	ble.n	8009bce <_printf_float+0xa6>
 8009b84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8c:	d502      	bpl.n	8009b94 <_printf_float+0x6c>
 8009b8e:	232d      	movs	r3, #45	; 0x2d
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b94:	4b90      	ldr	r3, [pc, #576]	; (8009dd8 <_printf_float+0x2b0>)
 8009b96:	4891      	ldr	r0, [pc, #580]	; (8009ddc <_printf_float+0x2b4>)
 8009b98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b9c:	bf94      	ite	ls
 8009b9e:	4698      	movls	r8, r3
 8009ba0:	4680      	movhi	r8, r0
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	f022 0204 	bic.w	r2, r2, #4
 8009baa:	2300      	movs	r3, #0
 8009bac:	6022      	str	r2, [r4, #0]
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	9700      	str	r7, [sp, #0]
 8009bb2:	4633      	mov	r3, r6
 8009bb4:	aa09      	add	r2, sp, #36	; 0x24
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f9d3 	bl	8009f64 <_printf_common>
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f040 808a 	bne.w	8009cd8 <_printf_float+0x1b0>
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	b00b      	add	sp, #44	; 0x2c
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	eeb4 0b40 	vcmp.f64	d0, d0
 8009bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd6:	d709      	bvc.n	8009bec <_printf_float+0xc4>
 8009bd8:	ee10 3a90 	vmov	r3, s1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfbc      	itt	lt
 8009be0:	232d      	movlt	r3, #45	; 0x2d
 8009be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009be6:	487e      	ldr	r0, [pc, #504]	; (8009de0 <_printf_float+0x2b8>)
 8009be8:	4b7e      	ldr	r3, [pc, #504]	; (8009de4 <_printf_float+0x2bc>)
 8009bea:	e7d5      	b.n	8009b98 <_printf_float+0x70>
 8009bec:	6863      	ldr	r3, [r4, #4]
 8009bee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bf2:	9104      	str	r1, [sp, #16]
 8009bf4:	1c59      	adds	r1, r3, #1
 8009bf6:	d13c      	bne.n	8009c72 <_printf_float+0x14a>
 8009bf8:	2306      	movs	r3, #6
 8009bfa:	6063      	str	r3, [r4, #4]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	9303      	str	r3, [sp, #12]
 8009c00:	ab08      	add	r3, sp, #32
 8009c02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c0a:	ab07      	add	r3, sp, #28
 8009c0c:	6861      	ldr	r1, [r4, #4]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	f10d 031b 	add.w	r3, sp, #27
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7ff fef4 	bl	8009a04 <__cvt>
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	9907      	ldr	r1, [sp, #28]
 8009c20:	2b47      	cmp	r3, #71	; 0x47
 8009c22:	4680      	mov	r8, r0
 8009c24:	d108      	bne.n	8009c38 <_printf_float+0x110>
 8009c26:	1cc8      	adds	r0, r1, #3
 8009c28:	db02      	blt.n	8009c30 <_printf_float+0x108>
 8009c2a:	6863      	ldr	r3, [r4, #4]
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	dd41      	ble.n	8009cb4 <_printf_float+0x18c>
 8009c30:	f1a9 0902 	sub.w	r9, r9, #2
 8009c34:	fa5f f989 	uxtb.w	r9, r9
 8009c38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c3c:	d820      	bhi.n	8009c80 <_printf_float+0x158>
 8009c3e:	3901      	subs	r1, #1
 8009c40:	464a      	mov	r2, r9
 8009c42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c46:	9107      	str	r1, [sp, #28]
 8009c48:	f7ff ff2e 	bl	8009aa8 <__exponent>
 8009c4c:	9a08      	ldr	r2, [sp, #32]
 8009c4e:	9004      	str	r0, [sp, #16]
 8009c50:	1813      	adds	r3, r2, r0
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	dc02      	bgt.n	8009c5e <_printf_float+0x136>
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	07d2      	lsls	r2, r2, #31
 8009c5c:	d501      	bpl.n	8009c62 <_printf_float+0x13a>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0a2      	beq.n	8009bb0 <_printf_float+0x88>
 8009c6a:	232d      	movs	r3, #45	; 0x2d
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	e79e      	b.n	8009bb0 <_printf_float+0x88>
 8009c72:	9904      	ldr	r1, [sp, #16]
 8009c74:	2947      	cmp	r1, #71	; 0x47
 8009c76:	d1c1      	bne.n	8009bfc <_printf_float+0xd4>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1bf      	bne.n	8009bfc <_printf_float+0xd4>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e7bc      	b.n	8009bfa <_printf_float+0xd2>
 8009c80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c84:	d118      	bne.n	8009cb8 <_printf_float+0x190>
 8009c86:	2900      	cmp	r1, #0
 8009c88:	6863      	ldr	r3, [r4, #4]
 8009c8a:	dd0b      	ble.n	8009ca4 <_printf_float+0x17c>
 8009c8c:	6121      	str	r1, [r4, #16]
 8009c8e:	b913      	cbnz	r3, 8009c96 <_printf_float+0x16e>
 8009c90:	6822      	ldr	r2, [r4, #0]
 8009c92:	07d0      	lsls	r0, r2, #31
 8009c94:	d502      	bpl.n	8009c9c <_printf_float+0x174>
 8009c96:	3301      	adds	r3, #1
 8009c98:	440b      	add	r3, r1
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	e7de      	b.n	8009c62 <_printf_float+0x13a>
 8009ca4:	b913      	cbnz	r3, 8009cac <_printf_float+0x184>
 8009ca6:	6822      	ldr	r2, [r4, #0]
 8009ca8:	07d2      	lsls	r2, r2, #31
 8009caa:	d501      	bpl.n	8009cb0 <_printf_float+0x188>
 8009cac:	3302      	adds	r3, #2
 8009cae:	e7f4      	b.n	8009c9a <_printf_float+0x172>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7f2      	b.n	8009c9a <_printf_float+0x172>
 8009cb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	4299      	cmp	r1, r3
 8009cbc:	db05      	blt.n	8009cca <_printf_float+0x1a2>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	6121      	str	r1, [r4, #16]
 8009cc2:	07d8      	lsls	r0, r3, #31
 8009cc4:	d5ea      	bpl.n	8009c9c <_printf_float+0x174>
 8009cc6:	1c4b      	adds	r3, r1, #1
 8009cc8:	e7e7      	b.n	8009c9a <_printf_float+0x172>
 8009cca:	2900      	cmp	r1, #0
 8009ccc:	bfd4      	ite	le
 8009cce:	f1c1 0202 	rsble	r2, r1, #2
 8009cd2:	2201      	movgt	r2, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	e7e0      	b.n	8009c9a <_printf_float+0x172>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	055a      	lsls	r2, r3, #21
 8009cdc:	d407      	bmi.n	8009cee <_printf_float+0x1c6>
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b8      	blx	r7
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d12a      	bne.n	8009d42 <_printf_float+0x21a>
 8009cec:	e76a      	b.n	8009bc4 <_printf_float+0x9c>
 8009cee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cf2:	f240 80e2 	bls.w	8009eba <_printf_float+0x392>
 8009cf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009cfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d02:	d133      	bne.n	8009d6c <_printf_float+0x244>
 8009d04:	4a38      	ldr	r2, [pc, #224]	; (8009de8 <_printf_float+0x2c0>)
 8009d06:	2301      	movs	r3, #1
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f43f af58 	beq.w	8009bc4 <_printf_float+0x9c>
 8009d14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	db02      	blt.n	8009d22 <_printf_float+0x1fa>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	07d8      	lsls	r0, r3, #31
 8009d20:	d50f      	bpl.n	8009d42 <_printf_float+0x21a>
 8009d22:	4653      	mov	r3, sl
 8009d24:	465a      	mov	r2, fp
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	f43f af49 	beq.w	8009bc4 <_printf_float+0x9c>
 8009d32:	f04f 0800 	mov.w	r8, #0
 8009d36:	f104 091a 	add.w	r9, r4, #26
 8009d3a:	9b08      	ldr	r3, [sp, #32]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	4543      	cmp	r3, r8
 8009d40:	dc09      	bgt.n	8009d56 <_printf_float+0x22e>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	079b      	lsls	r3, r3, #30
 8009d46:	f100 8108 	bmi.w	8009f5a <_printf_float+0x432>
 8009d4a:	68e0      	ldr	r0, [r4, #12]
 8009d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4e:	4298      	cmp	r0, r3
 8009d50:	bfb8      	it	lt
 8009d52:	4618      	movlt	r0, r3
 8009d54:	e738      	b.n	8009bc8 <_printf_float+0xa0>
 8009d56:	2301      	movs	r3, #1
 8009d58:	464a      	mov	r2, r9
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f af2f 	beq.w	8009bc4 <_printf_float+0x9c>
 8009d66:	f108 0801 	add.w	r8, r8, #1
 8009d6a:	e7e6      	b.n	8009d3a <_printf_float+0x212>
 8009d6c:	9b07      	ldr	r3, [sp, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dc3c      	bgt.n	8009dec <_printf_float+0x2c4>
 8009d72:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <_printf_float+0x2c0>)
 8009d74:	2301      	movs	r3, #1
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f af21 	beq.w	8009bc4 <_printf_float+0x9c>
 8009d82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	d102      	bne.n	8009d90 <_printf_float+0x268>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	07d9      	lsls	r1, r3, #31
 8009d8e:	d5d8      	bpl.n	8009d42 <_printf_float+0x21a>
 8009d90:	4653      	mov	r3, sl
 8009d92:	465a      	mov	r2, fp
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af12 	beq.w	8009bc4 <_printf_float+0x9c>
 8009da0:	f04f 0900 	mov.w	r9, #0
 8009da4:	f104 0a1a 	add.w	sl, r4, #26
 8009da8:	9b07      	ldr	r3, [sp, #28]
 8009daa:	425b      	negs	r3, r3
 8009dac:	454b      	cmp	r3, r9
 8009dae:	dc01      	bgt.n	8009db4 <_printf_float+0x28c>
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	e795      	b.n	8009ce0 <_printf_float+0x1b8>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4652      	mov	r2, sl
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af00 	beq.w	8009bc4 <_printf_float+0x9c>
 8009dc4:	f109 0901 	add.w	r9, r9, #1
 8009dc8:	e7ee      	b.n	8009da8 <_printf_float+0x280>
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w
 8009dd0:	ffffffff 	.word	0xffffffff
 8009dd4:	7fefffff 	.word	0x7fefffff
 8009dd8:	0800f6f4 	.word	0x0800f6f4
 8009ddc:	0800f6f8 	.word	0x0800f6f8
 8009de0:	0800f700 	.word	0x0800f700
 8009de4:	0800f6fc 	.word	0x0800f6fc
 8009de8:	0800fb09 	.word	0x0800fb09
 8009dec:	9a08      	ldr	r2, [sp, #32]
 8009dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bfa8      	it	ge
 8009df4:	461a      	movge	r2, r3
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	4691      	mov	r9, r2
 8009dfa:	dc38      	bgt.n	8009e6e <_printf_float+0x346>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e04:	f104 021a 	add.w	r2, r4, #26
 8009e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e0a:	9905      	ldr	r1, [sp, #20]
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	eba3 0309 	sub.w	r3, r3, r9
 8009e12:	428b      	cmp	r3, r1
 8009e14:	dc33      	bgt.n	8009e7e <_printf_float+0x356>
 8009e16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	db3c      	blt.n	8009e98 <_printf_float+0x370>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	07da      	lsls	r2, r3, #31
 8009e22:	d439      	bmi.n	8009e98 <_printf_float+0x370>
 8009e24:	9a08      	ldr	r2, [sp, #32]
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	9907      	ldr	r1, [sp, #28]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	eba2 0901 	sub.w	r9, r2, r1
 8009e30:	4599      	cmp	r9, r3
 8009e32:	bfa8      	it	ge
 8009e34:	4699      	movge	r9, r3
 8009e36:	f1b9 0f00 	cmp.w	r9, #0
 8009e3a:	dc35      	bgt.n	8009ea8 <_printf_float+0x380>
 8009e3c:	f04f 0800 	mov.w	r8, #0
 8009e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e44:	f104 0a1a 	add.w	sl, r4, #26
 8009e48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	eba3 0309 	sub.w	r3, r3, r9
 8009e52:	4543      	cmp	r3, r8
 8009e54:	f77f af75 	ble.w	8009d42 <_printf_float+0x21a>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	47b8      	blx	r7
 8009e62:	3001      	adds	r0, #1
 8009e64:	f43f aeae 	beq.w	8009bc4 <_printf_float+0x9c>
 8009e68:	f108 0801 	add.w	r8, r8, #1
 8009e6c:	e7ec      	b.n	8009e48 <_printf_float+0x320>
 8009e6e:	4613      	mov	r3, r2
 8009e70:	4631      	mov	r1, r6
 8009e72:	4642      	mov	r2, r8
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d1bf      	bne.n	8009dfc <_printf_float+0x2d4>
 8009e7c:	e6a2      	b.n	8009bc4 <_printf_float+0x9c>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	9204      	str	r2, [sp, #16]
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae9b 	beq.w	8009bc4 <_printf_float+0x9c>
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	9a04      	ldr	r2, [sp, #16]
 8009e92:	3301      	adds	r3, #1
 8009e94:	9305      	str	r3, [sp, #20]
 8009e96:	e7b7      	b.n	8009e08 <_printf_float+0x2e0>
 8009e98:	4653      	mov	r3, sl
 8009e9a:	465a      	mov	r2, fp
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d1be      	bne.n	8009e24 <_printf_float+0x2fc>
 8009ea6:	e68d      	b.n	8009bc4 <_printf_float+0x9c>
 8009ea8:	9a04      	ldr	r2, [sp, #16]
 8009eaa:	464b      	mov	r3, r9
 8009eac:	4442      	add	r2, r8
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d1c1      	bne.n	8009e3c <_printf_float+0x314>
 8009eb8:	e684      	b.n	8009bc4 <_printf_float+0x9c>
 8009eba:	9a08      	ldr	r2, [sp, #32]
 8009ebc:	2a01      	cmp	r2, #1
 8009ebe:	dc01      	bgt.n	8009ec4 <_printf_float+0x39c>
 8009ec0:	07db      	lsls	r3, r3, #31
 8009ec2:	d537      	bpl.n	8009f34 <_printf_float+0x40c>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b8      	blx	r7
 8009ece:	3001      	adds	r0, #1
 8009ed0:	f43f ae78 	beq.w	8009bc4 <_printf_float+0x9c>
 8009ed4:	4653      	mov	r3, sl
 8009ed6:	465a      	mov	r2, fp
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f ae70 	beq.w	8009bc4 <_printf_float+0x9c>
 8009ee4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ee8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	d01b      	beq.n	8009f2a <_printf_float+0x402>
 8009ef2:	9b08      	ldr	r3, [sp, #32]
 8009ef4:	f108 0201 	add.w	r2, r8, #1
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	d10e      	bne.n	8009f22 <_printf_float+0x3fa>
 8009f04:	e65e      	b.n	8009bc4 <_printf_float+0x9c>
 8009f06:	2301      	movs	r3, #1
 8009f08:	464a      	mov	r2, r9
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f ae57 	beq.w	8009bc4 <_printf_float+0x9c>
 8009f16:	f108 0801 	add.w	r8, r8, #1
 8009f1a:	9b08      	ldr	r3, [sp, #32]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4543      	cmp	r3, r8
 8009f20:	dcf1      	bgt.n	8009f06 <_printf_float+0x3de>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f28:	e6db      	b.n	8009ce2 <_printf_float+0x1ba>
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	f104 091a 	add.w	r9, r4, #26
 8009f32:	e7f2      	b.n	8009f1a <_printf_float+0x3f2>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4642      	mov	r2, r8
 8009f38:	e7df      	b.n	8009efa <_printf_float+0x3d2>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	464a      	mov	r2, r9
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b8      	blx	r7
 8009f44:	3001      	adds	r0, #1
 8009f46:	f43f ae3d 	beq.w	8009bc4 <_printf_float+0x9c>
 8009f4a:	f108 0801 	add.w	r8, r8, #1
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	4543      	cmp	r3, r8
 8009f56:	dcf0      	bgt.n	8009f3a <_printf_float+0x412>
 8009f58:	e6f7      	b.n	8009d4a <_printf_float+0x222>
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	f104 0919 	add.w	r9, r4, #25
 8009f62:	e7f4      	b.n	8009f4e <_printf_float+0x426>

08009f64 <_printf_common>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	4616      	mov	r6, r2
 8009f6a:	4699      	mov	r9, r3
 8009f6c:	688a      	ldr	r2, [r1, #8]
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfb8      	it	lt
 8009f78:	4613      	movlt	r3, r2
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f80:	4607      	mov	r7, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b10a      	cbz	r2, 8009f8a <_printf_common+0x26>
 8009f86:	3301      	adds	r3, #1
 8009f88:	6033      	str	r3, [r6, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	6833      	ldrmi	r3, [r6, #0]
 8009f92:	3302      	addmi	r3, #2
 8009f94:	6033      	strmi	r3, [r6, #0]
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	f015 0506 	ands.w	r5, r5, #6
 8009f9c:	d106      	bne.n	8009fac <_printf_common+0x48>
 8009f9e:	f104 0a19 	add.w	sl, r4, #25
 8009fa2:	68e3      	ldr	r3, [r4, #12]
 8009fa4:	6832      	ldr	r2, [r6, #0]
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc26      	bgt.n	8009ffa <_printf_common+0x96>
 8009fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb0:	1e13      	subs	r3, r2, #0
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	bf18      	it	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	0692      	lsls	r2, r2, #26
 8009fba:	d42b      	bmi.n	800a014 <_printf_common+0xb0>
 8009fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c0      	blx	r8
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d01e      	beq.n	800a008 <_printf_common+0xa4>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	68e5      	ldr	r5, [r4, #12]
 8009fce:	6832      	ldr	r2, [r6, #0]
 8009fd0:	f003 0306 	and.w	r3, r3, #6
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	bf08      	it	eq
 8009fd8:	1aad      	subeq	r5, r5, r2
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	bf0c      	ite	eq
 8009fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe4:	2500      	movne	r5, #0
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bfc4      	itt	gt
 8009fea:	1a9b      	subgt	r3, r3, r2
 8009fec:	18ed      	addgt	r5, r5, r3
 8009fee:	2600      	movs	r6, #0
 8009ff0:	341a      	adds	r4, #26
 8009ff2:	42b5      	cmp	r5, r6
 8009ff4:	d11a      	bne.n	800a02c <_printf_common+0xc8>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e008      	b.n	800a00c <_printf_common+0xa8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4649      	mov	r1, r9
 800a000:	4638      	mov	r0, r7
 800a002:	47c0      	blx	r8
 800a004:	3001      	adds	r0, #1
 800a006:	d103      	bne.n	800a010 <_printf_common+0xac>
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	3501      	adds	r5, #1
 800a012:	e7c6      	b.n	8009fa2 <_printf_common+0x3e>
 800a014:	18e1      	adds	r1, r4, r3
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	2030      	movs	r0, #48	; 0x30
 800a01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01e:	4422      	add	r2, r4
 800a020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a028:	3302      	adds	r3, #2
 800a02a:	e7c7      	b.n	8009fbc <_printf_common+0x58>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4649      	mov	r1, r9
 800a032:	4638      	mov	r0, r7
 800a034:	47c0      	blx	r8
 800a036:	3001      	adds	r0, #1
 800a038:	d0e6      	beq.n	800a008 <_printf_common+0xa4>
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7d9      	b.n	8009ff2 <_printf_common+0x8e>
	...

0800a040 <_printf_i>:
 800a040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	4691      	mov	r9, r2
 800a048:	7e27      	ldrb	r7, [r4, #24]
 800a04a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a04c:	2f78      	cmp	r7, #120	; 0x78
 800a04e:	4680      	mov	r8, r0
 800a050:	469a      	mov	sl, r3
 800a052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a056:	d807      	bhi.n	800a068 <_printf_i+0x28>
 800a058:	2f62      	cmp	r7, #98	; 0x62
 800a05a:	d80a      	bhi.n	800a072 <_printf_i+0x32>
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	f000 80d8 	beq.w	800a212 <_printf_i+0x1d2>
 800a062:	2f58      	cmp	r7, #88	; 0x58
 800a064:	f000 80a3 	beq.w	800a1ae <_printf_i+0x16e>
 800a068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a070:	e03a      	b.n	800a0e8 <_printf_i+0xa8>
 800a072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a076:	2b15      	cmp	r3, #21
 800a078:	d8f6      	bhi.n	800a068 <_printf_i+0x28>
 800a07a:	a001      	add	r0, pc, #4	; (adr r0, 800a080 <_printf_i+0x40>)
 800a07c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0ed 	.word	0x0800a0ed
 800a088:	0800a069 	.word	0x0800a069
 800a08c:	0800a069 	.word	0x0800a069
 800a090:	0800a069 	.word	0x0800a069
 800a094:	0800a069 	.word	0x0800a069
 800a098:	0800a0ed 	.word	0x0800a0ed
 800a09c:	0800a069 	.word	0x0800a069
 800a0a0:	0800a069 	.word	0x0800a069
 800a0a4:	0800a069 	.word	0x0800a069
 800a0a8:	0800a069 	.word	0x0800a069
 800a0ac:	0800a1f9 	.word	0x0800a1f9
 800a0b0:	0800a11d 	.word	0x0800a11d
 800a0b4:	0800a1db 	.word	0x0800a1db
 800a0b8:	0800a069 	.word	0x0800a069
 800a0bc:	0800a069 	.word	0x0800a069
 800a0c0:	0800a21b 	.word	0x0800a21b
 800a0c4:	0800a069 	.word	0x0800a069
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a069 	.word	0x0800a069
 800a0d0:	0800a069 	.word	0x0800a069
 800a0d4:	0800a1e3 	.word	0x0800a1e3
 800a0d8:	680b      	ldr	r3, [r1, #0]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	600a      	str	r2, [r1, #0]
 800a0e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0a3      	b.n	800a234 <_printf_i+0x1f4>
 800a0ec:	6825      	ldr	r5, [r4, #0]
 800a0ee:	6808      	ldr	r0, [r1, #0]
 800a0f0:	062e      	lsls	r6, r5, #24
 800a0f2:	f100 0304 	add.w	r3, r0, #4
 800a0f6:	d50a      	bpl.n	800a10e <_printf_i+0xce>
 800a0f8:	6805      	ldr	r5, [r0, #0]
 800a0fa:	600b      	str	r3, [r1, #0]
 800a0fc:	2d00      	cmp	r5, #0
 800a0fe:	da03      	bge.n	800a108 <_printf_i+0xc8>
 800a100:	232d      	movs	r3, #45	; 0x2d
 800a102:	426d      	negs	r5, r5
 800a104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a108:	485e      	ldr	r0, [pc, #376]	; (800a284 <_printf_i+0x244>)
 800a10a:	230a      	movs	r3, #10
 800a10c:	e019      	b.n	800a142 <_printf_i+0x102>
 800a10e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a112:	6805      	ldr	r5, [r0, #0]
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	bf18      	it	ne
 800a118:	b22d      	sxthne	r5, r5
 800a11a:	e7ef      	b.n	800a0fc <_printf_i+0xbc>
 800a11c:	680b      	ldr	r3, [r1, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	1d18      	adds	r0, r3, #4
 800a122:	6008      	str	r0, [r1, #0]
 800a124:	0628      	lsls	r0, r5, #24
 800a126:	d501      	bpl.n	800a12c <_printf_i+0xec>
 800a128:	681d      	ldr	r5, [r3, #0]
 800a12a:	e002      	b.n	800a132 <_printf_i+0xf2>
 800a12c:	0669      	lsls	r1, r5, #25
 800a12e:	d5fb      	bpl.n	800a128 <_printf_i+0xe8>
 800a130:	881d      	ldrh	r5, [r3, #0]
 800a132:	4854      	ldr	r0, [pc, #336]	; (800a284 <_printf_i+0x244>)
 800a134:	2f6f      	cmp	r7, #111	; 0x6f
 800a136:	bf0c      	ite	eq
 800a138:	2308      	moveq	r3, #8
 800a13a:	230a      	movne	r3, #10
 800a13c:	2100      	movs	r1, #0
 800a13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a142:	6866      	ldr	r6, [r4, #4]
 800a144:	60a6      	str	r6, [r4, #8]
 800a146:	2e00      	cmp	r6, #0
 800a148:	bfa2      	ittt	ge
 800a14a:	6821      	ldrge	r1, [r4, #0]
 800a14c:	f021 0104 	bicge.w	r1, r1, #4
 800a150:	6021      	strge	r1, [r4, #0]
 800a152:	b90d      	cbnz	r5, 800a158 <_printf_i+0x118>
 800a154:	2e00      	cmp	r6, #0
 800a156:	d04d      	beq.n	800a1f4 <_printf_i+0x1b4>
 800a158:	4616      	mov	r6, r2
 800a15a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a15e:	fb03 5711 	mls	r7, r3, r1, r5
 800a162:	5dc7      	ldrb	r7, [r0, r7]
 800a164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a168:	462f      	mov	r7, r5
 800a16a:	42bb      	cmp	r3, r7
 800a16c:	460d      	mov	r5, r1
 800a16e:	d9f4      	bls.n	800a15a <_printf_i+0x11a>
 800a170:	2b08      	cmp	r3, #8
 800a172:	d10b      	bne.n	800a18c <_printf_i+0x14c>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	07df      	lsls	r7, r3, #31
 800a178:	d508      	bpl.n	800a18c <_printf_i+0x14c>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4299      	cmp	r1, r3
 800a180:	bfde      	ittt	le
 800a182:	2330      	movle	r3, #48	; 0x30
 800a184:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a18c:	1b92      	subs	r2, r2, r6
 800a18e:	6122      	str	r2, [r4, #16]
 800a190:	f8cd a000 	str.w	sl, [sp]
 800a194:	464b      	mov	r3, r9
 800a196:	aa03      	add	r2, sp, #12
 800a198:	4621      	mov	r1, r4
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff fee2 	bl	8009f64 <_printf_common>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d14c      	bne.n	800a23e <_printf_i+0x1fe>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	b004      	add	sp, #16
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	4835      	ldr	r0, [pc, #212]	; (800a284 <_printf_i+0x244>)
 800a1b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	680e      	ldr	r6, [r1, #0]
 800a1b8:	061f      	lsls	r7, r3, #24
 800a1ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1be:	600e      	str	r6, [r1, #0]
 800a1c0:	d514      	bpl.n	800a1ec <_printf_i+0x1ac>
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	bf44      	itt	mi
 800a1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ca:	6023      	strmi	r3, [r4, #0]
 800a1cc:	b91d      	cbnz	r5, 800a1d6 <_printf_i+0x196>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	f023 0320 	bic.w	r3, r3, #32
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	2310      	movs	r3, #16
 800a1d8:	e7b0      	b.n	800a13c <_printf_i+0xfc>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	f043 0320 	orr.w	r3, r3, #32
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	2378      	movs	r3, #120	; 0x78
 800a1e4:	4828      	ldr	r0, [pc, #160]	; (800a288 <_printf_i+0x248>)
 800a1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ea:	e7e3      	b.n	800a1b4 <_printf_i+0x174>
 800a1ec:	065e      	lsls	r6, r3, #25
 800a1ee:	bf48      	it	mi
 800a1f0:	b2ad      	uxthmi	r5, r5
 800a1f2:	e7e6      	b.n	800a1c2 <_printf_i+0x182>
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	e7bb      	b.n	800a170 <_printf_i+0x130>
 800a1f8:	680b      	ldr	r3, [r1, #0]
 800a1fa:	6826      	ldr	r6, [r4, #0]
 800a1fc:	6960      	ldr	r0, [r4, #20]
 800a1fe:	1d1d      	adds	r5, r3, #4
 800a200:	600d      	str	r5, [r1, #0]
 800a202:	0635      	lsls	r5, r6, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1cc>
 800a208:	6018      	str	r0, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1d2>
 800a20c:	0671      	lsls	r1, r6, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1c8>
 800a210:	8018      	strh	r0, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4616      	mov	r6, r2
 800a218:	e7ba      	b.n	800a190 <_printf_i+0x150>
 800a21a:	680b      	ldr	r3, [r1, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	600a      	str	r2, [r1, #0]
 800a220:	681e      	ldr	r6, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4630      	mov	r0, r6
 800a228:	f7f6 f822 	bl	8000270 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1f2>
 800a22e:	1b80      	subs	r0, r0, r6
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	e7a8      	b.n	800a190 <_printf_i+0x150>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	4632      	mov	r2, r6
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ab      	beq.n	800a1a4 <_printf_i+0x164>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x23a>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a4      	b.n	800a1a8 <_printf_i+0x168>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09b      	beq.n	800a1a4 <_printf_i+0x164>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x21e>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x212>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x22e>
 800a282:	bf00      	nop
 800a284:	0800f704 	.word	0x0800f704
 800a288:	0800f715 	.word	0x0800f715

0800a28c <_scanf_float>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	b087      	sub	sp, #28
 800a292:	4617      	mov	r7, r2
 800a294:	9303      	str	r3, [sp, #12]
 800a296:	688b      	ldr	r3, [r1, #8]
 800a298:	1e5a      	subs	r2, r3, #1
 800a29a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a29e:	bf83      	ittte	hi
 800a2a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a2a4:	195b      	addhi	r3, r3, r5
 800a2a6:	9302      	strhi	r3, [sp, #8]
 800a2a8:	2300      	movls	r3, #0
 800a2aa:	bf86      	itte	hi
 800a2ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a2b0:	608b      	strhi	r3, [r1, #8]
 800a2b2:	9302      	strls	r3, [sp, #8]
 800a2b4:	680b      	ldr	r3, [r1, #0]
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	2500      	movs	r5, #0
 800a2ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a2be:	f84b 3b1c 	str.w	r3, [fp], #28
 800a2c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a2c6:	4680      	mov	r8, r0
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	465e      	mov	r6, fp
 800a2cc:	46aa      	mov	sl, r5
 800a2ce:	46a9      	mov	r9, r5
 800a2d0:	9501      	str	r5, [sp, #4]
 800a2d2:	68a2      	ldr	r2, [r4, #8]
 800a2d4:	b152      	cbz	r2, 800a2ec <_scanf_float+0x60>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b4e      	cmp	r3, #78	; 0x4e
 800a2dc:	d864      	bhi.n	800a3a8 <_scanf_float+0x11c>
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d83c      	bhi.n	800a35c <_scanf_float+0xd0>
 800a2e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a2e6:	b2c8      	uxtb	r0, r1
 800a2e8:	280e      	cmp	r0, #14
 800a2ea:	d93a      	bls.n	800a362 <_scanf_float+0xd6>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	d003      	beq.n	800a2fa <_scanf_float+0x6e>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2fe:	f1ba 0f01 	cmp.w	sl, #1
 800a302:	f200 8113 	bhi.w	800a52c <_scanf_float+0x2a0>
 800a306:	455e      	cmp	r6, fp
 800a308:	f200 8105 	bhi.w	800a516 <_scanf_float+0x28a>
 800a30c:	2501      	movs	r5, #1
 800a30e:	4628      	mov	r0, r5
 800a310:	b007      	add	sp, #28
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a31a:	2a0d      	cmp	r2, #13
 800a31c:	d8e6      	bhi.n	800a2ec <_scanf_float+0x60>
 800a31e:	a101      	add	r1, pc, #4	; (adr r1, 800a324 <_scanf_float+0x98>)
 800a320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a324:	0800a463 	.word	0x0800a463
 800a328:	0800a2ed 	.word	0x0800a2ed
 800a32c:	0800a2ed 	.word	0x0800a2ed
 800a330:	0800a2ed 	.word	0x0800a2ed
 800a334:	0800a4c3 	.word	0x0800a4c3
 800a338:	0800a49b 	.word	0x0800a49b
 800a33c:	0800a2ed 	.word	0x0800a2ed
 800a340:	0800a2ed 	.word	0x0800a2ed
 800a344:	0800a471 	.word	0x0800a471
 800a348:	0800a2ed 	.word	0x0800a2ed
 800a34c:	0800a2ed 	.word	0x0800a2ed
 800a350:	0800a2ed 	.word	0x0800a2ed
 800a354:	0800a2ed 	.word	0x0800a2ed
 800a358:	0800a429 	.word	0x0800a429
 800a35c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a360:	e7db      	b.n	800a31a <_scanf_float+0x8e>
 800a362:	290e      	cmp	r1, #14
 800a364:	d8c2      	bhi.n	800a2ec <_scanf_float+0x60>
 800a366:	a001      	add	r0, pc, #4	; (adr r0, 800a36c <_scanf_float+0xe0>)
 800a368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a36c:	0800a41b 	.word	0x0800a41b
 800a370:	0800a2ed 	.word	0x0800a2ed
 800a374:	0800a41b 	.word	0x0800a41b
 800a378:	0800a4af 	.word	0x0800a4af
 800a37c:	0800a2ed 	.word	0x0800a2ed
 800a380:	0800a3c9 	.word	0x0800a3c9
 800a384:	0800a405 	.word	0x0800a405
 800a388:	0800a405 	.word	0x0800a405
 800a38c:	0800a405 	.word	0x0800a405
 800a390:	0800a405 	.word	0x0800a405
 800a394:	0800a405 	.word	0x0800a405
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a405 	.word	0x0800a405
 800a3a8:	2b6e      	cmp	r3, #110	; 0x6e
 800a3aa:	d809      	bhi.n	800a3c0 <_scanf_float+0x134>
 800a3ac:	2b60      	cmp	r3, #96	; 0x60
 800a3ae:	d8b2      	bhi.n	800a316 <_scanf_float+0x8a>
 800a3b0:	2b54      	cmp	r3, #84	; 0x54
 800a3b2:	d077      	beq.n	800a4a4 <_scanf_float+0x218>
 800a3b4:	2b59      	cmp	r3, #89	; 0x59
 800a3b6:	d199      	bne.n	800a2ec <_scanf_float+0x60>
 800a3b8:	2d07      	cmp	r5, #7
 800a3ba:	d197      	bne.n	800a2ec <_scanf_float+0x60>
 800a3bc:	2508      	movs	r5, #8
 800a3be:	e029      	b.n	800a414 <_scanf_float+0x188>
 800a3c0:	2b74      	cmp	r3, #116	; 0x74
 800a3c2:	d06f      	beq.n	800a4a4 <_scanf_float+0x218>
 800a3c4:	2b79      	cmp	r3, #121	; 0x79
 800a3c6:	e7f6      	b.n	800a3b6 <_scanf_float+0x12a>
 800a3c8:	6821      	ldr	r1, [r4, #0]
 800a3ca:	05c8      	lsls	r0, r1, #23
 800a3cc:	d51a      	bpl.n	800a404 <_scanf_float+0x178>
 800a3ce:	9b02      	ldr	r3, [sp, #8]
 800a3d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a3d4:	6021      	str	r1, [r4, #0]
 800a3d6:	f109 0901 	add.w	r9, r9, #1
 800a3da:	b11b      	cbz	r3, 800a3e4 <_scanf_float+0x158>
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	3201      	adds	r2, #1
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	60a2      	str	r2, [r4, #8]
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	607b      	str	r3, [r7, #4]
 800a3f8:	f340 8084 	ble.w	800a504 <_scanf_float+0x278>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	e766      	b.n	800a2d2 <_scanf_float+0x46>
 800a404:	eb1a 0f05 	cmn.w	sl, r5
 800a408:	f47f af70 	bne.w	800a2ec <_scanf_float+0x60>
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	f806 3b01 	strb.w	r3, [r6], #1
 800a418:	e7e4      	b.n	800a3e4 <_scanf_float+0x158>
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	0610      	lsls	r0, r2, #24
 800a41e:	f57f af65 	bpl.w	800a2ec <_scanf_float+0x60>
 800a422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a426:	e7f4      	b.n	800a412 <_scanf_float+0x186>
 800a428:	f1ba 0f00 	cmp.w	sl, #0
 800a42c:	d10e      	bne.n	800a44c <_scanf_float+0x1c0>
 800a42e:	f1b9 0f00 	cmp.w	r9, #0
 800a432:	d10e      	bne.n	800a452 <_scanf_float+0x1c6>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a43a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a43e:	d108      	bne.n	800a452 <_scanf_float+0x1c6>
 800a440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	f04f 0a01 	mov.w	sl, #1
 800a44a:	e7e3      	b.n	800a414 <_scanf_float+0x188>
 800a44c:	f1ba 0f02 	cmp.w	sl, #2
 800a450:	d055      	beq.n	800a4fe <_scanf_float+0x272>
 800a452:	2d01      	cmp	r5, #1
 800a454:	d002      	beq.n	800a45c <_scanf_float+0x1d0>
 800a456:	2d04      	cmp	r5, #4
 800a458:	f47f af48 	bne.w	800a2ec <_scanf_float+0x60>
 800a45c:	3501      	adds	r5, #1
 800a45e:	b2ed      	uxtb	r5, r5
 800a460:	e7d8      	b.n	800a414 <_scanf_float+0x188>
 800a462:	f1ba 0f01 	cmp.w	sl, #1
 800a466:	f47f af41 	bne.w	800a2ec <_scanf_float+0x60>
 800a46a:	f04f 0a02 	mov.w	sl, #2
 800a46e:	e7d1      	b.n	800a414 <_scanf_float+0x188>
 800a470:	b97d      	cbnz	r5, 800a492 <_scanf_float+0x206>
 800a472:	f1b9 0f00 	cmp.w	r9, #0
 800a476:	f47f af3c 	bne.w	800a2f2 <_scanf_float+0x66>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a484:	f47f af39 	bne.w	800a2fa <_scanf_float+0x6e>
 800a488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	2501      	movs	r5, #1
 800a490:	e7c0      	b.n	800a414 <_scanf_float+0x188>
 800a492:	2d03      	cmp	r5, #3
 800a494:	d0e2      	beq.n	800a45c <_scanf_float+0x1d0>
 800a496:	2d05      	cmp	r5, #5
 800a498:	e7de      	b.n	800a458 <_scanf_float+0x1cc>
 800a49a:	2d02      	cmp	r5, #2
 800a49c:	f47f af26 	bne.w	800a2ec <_scanf_float+0x60>
 800a4a0:	2503      	movs	r5, #3
 800a4a2:	e7b7      	b.n	800a414 <_scanf_float+0x188>
 800a4a4:	2d06      	cmp	r5, #6
 800a4a6:	f47f af21 	bne.w	800a2ec <_scanf_float+0x60>
 800a4aa:	2507      	movs	r5, #7
 800a4ac:	e7b2      	b.n	800a414 <_scanf_float+0x188>
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	0591      	lsls	r1, r2, #22
 800a4b2:	f57f af1b 	bpl.w	800a2ec <_scanf_float+0x60>
 800a4b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4c0:	e7a8      	b.n	800a414 <_scanf_float+0x188>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a4c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a4cc:	d006      	beq.n	800a4dc <_scanf_float+0x250>
 800a4ce:	0550      	lsls	r0, r2, #21
 800a4d0:	f57f af0c 	bpl.w	800a2ec <_scanf_float+0x60>
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	f43f af0f 	beq.w	800a2fa <_scanf_float+0x6e>
 800a4dc:	0591      	lsls	r1, r2, #22
 800a4de:	bf58      	it	pl
 800a4e0:	9901      	ldrpl	r1, [sp, #4]
 800a4e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4e6:	bf58      	it	pl
 800a4e8:	eba9 0101 	subpl.w	r1, r9, r1
 800a4ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a4f0:	bf58      	it	pl
 800a4f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	f04f 0900 	mov.w	r9, #0
 800a4fc:	e78a      	b.n	800a414 <_scanf_float+0x188>
 800a4fe:	f04f 0a03 	mov.w	sl, #3
 800a502:	e787      	b.n	800a414 <_scanf_float+0x188>
 800a504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a508:	4639      	mov	r1, r7
 800a50a:	4640      	mov	r0, r8
 800a50c:	4798      	blx	r3
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f aedf 	beq.w	800a2d2 <_scanf_float+0x46>
 800a514:	e6ea      	b.n	800a2ec <_scanf_float+0x60>
 800a516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a51a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a51e:	463a      	mov	r2, r7
 800a520:	4640      	mov	r0, r8
 800a522:	4798      	blx	r3
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	3b01      	subs	r3, #1
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	e6ec      	b.n	800a306 <_scanf_float+0x7a>
 800a52c:	1e6b      	subs	r3, r5, #1
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d825      	bhi.n	800a57e <_scanf_float+0x2f2>
 800a532:	2d02      	cmp	r5, #2
 800a534:	d836      	bhi.n	800a5a4 <_scanf_float+0x318>
 800a536:	455e      	cmp	r6, fp
 800a538:	f67f aee8 	bls.w	800a30c <_scanf_float+0x80>
 800a53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a544:	463a      	mov	r2, r7
 800a546:	4640      	mov	r0, r8
 800a548:	4798      	blx	r3
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	e7f1      	b.n	800a536 <_scanf_float+0x2aa>
 800a552:	9802      	ldr	r0, [sp, #8]
 800a554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a55c:	9002      	str	r0, [sp, #8]
 800a55e:	463a      	mov	r2, r7
 800a560:	4640      	mov	r0, r8
 800a562:	4798      	blx	r3
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	3b01      	subs	r3, #1
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a56e:	fa5f fa8a 	uxtb.w	sl, sl
 800a572:	f1ba 0f02 	cmp.w	sl, #2
 800a576:	d1ec      	bne.n	800a552 <_scanf_float+0x2c6>
 800a578:	3d03      	subs	r5, #3
 800a57a:	b2ed      	uxtb	r5, r5
 800a57c:	1b76      	subs	r6, r6, r5
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	05da      	lsls	r2, r3, #23
 800a582:	d52f      	bpl.n	800a5e4 <_scanf_float+0x358>
 800a584:	055b      	lsls	r3, r3, #21
 800a586:	d510      	bpl.n	800a5aa <_scanf_float+0x31e>
 800a588:	455e      	cmp	r6, fp
 800a58a:	f67f aebf 	bls.w	800a30c <_scanf_float+0x80>
 800a58e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a596:	463a      	mov	r2, r7
 800a598:	4640      	mov	r0, r8
 800a59a:	4798      	blx	r3
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	e7f1      	b.n	800a588 <_scanf_float+0x2fc>
 800a5a4:	46aa      	mov	sl, r5
 800a5a6:	9602      	str	r6, [sp, #8]
 800a5a8:	e7df      	b.n	800a56a <_scanf_float+0x2de>
 800a5aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	2965      	cmp	r1, #101	; 0x65
 800a5b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	d00c      	beq.n	800a5d8 <_scanf_float+0x34c>
 800a5be:	2945      	cmp	r1, #69	; 0x45
 800a5c0:	d00a      	beq.n	800a5d8 <_scanf_float+0x34c>
 800a5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5c6:	463a      	mov	r2, r7
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4798      	blx	r3
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	1eb5      	subs	r5, r6, #2
 800a5d6:	6123      	str	r3, [r4, #16]
 800a5d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5dc:	463a      	mov	r2, r7
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4798      	blx	r3
 800a5e2:	462e      	mov	r6, r5
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	f015 0510 	ands.w	r5, r5, #16
 800a5ea:	d14d      	bne.n	800a688 <_scanf_float+0x3fc>
 800a5ec:	7035      	strb	r5, [r6, #0]
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f8:	d11a      	bne.n	800a630 <_scanf_float+0x3a4>
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	454b      	cmp	r3, r9
 800a5fe:	eba3 0209 	sub.w	r2, r3, r9
 800a602:	d122      	bne.n	800a64a <_scanf_float+0x3be>
 800a604:	2200      	movs	r2, #0
 800a606:	4659      	mov	r1, fp
 800a608:	4640      	mov	r0, r8
 800a60a:	f000 fef7 	bl	800b3fc <_strtod_r>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	6821      	ldr	r1, [r4, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f011 0f02 	tst.w	r1, #2
 800a618:	f103 0204 	add.w	r2, r3, #4
 800a61c:	d020      	beq.n	800a660 <_scanf_float+0x3d4>
 800a61e:	9903      	ldr	r1, [sp, #12]
 800a620:	600a      	str	r2, [r1, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	ed83 0b00 	vstr	d0, [r3]
 800a628:	68e3      	ldr	r3, [r4, #12]
 800a62a:	3301      	adds	r3, #1
 800a62c:	60e3      	str	r3, [r4, #12]
 800a62e:	e66e      	b.n	800a30e <_scanf_float+0x82>
 800a630:	9b04      	ldr	r3, [sp, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0e6      	beq.n	800a604 <_scanf_float+0x378>
 800a636:	9905      	ldr	r1, [sp, #20]
 800a638:	230a      	movs	r3, #10
 800a63a:	462a      	mov	r2, r5
 800a63c:	3101      	adds	r1, #1
 800a63e:	4640      	mov	r0, r8
 800a640:	f000 ff66 	bl	800b510 <_strtol_r>
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	9e05      	ldr	r6, [sp, #20]
 800a648:	1ac2      	subs	r2, r0, r3
 800a64a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a64e:	429e      	cmp	r6, r3
 800a650:	bf28      	it	cs
 800a652:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a656:	490d      	ldr	r1, [pc, #52]	; (800a68c <_scanf_float+0x400>)
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f821 	bl	800a6a0 <siprintf>
 800a65e:	e7d1      	b.n	800a604 <_scanf_float+0x378>
 800a660:	f011 0f04 	tst.w	r1, #4
 800a664:	9903      	ldr	r1, [sp, #12]
 800a666:	600a      	str	r2, [r1, #0]
 800a668:	d1db      	bne.n	800a622 <_scanf_float+0x396>
 800a66a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	681e      	ldr	r6, [r3, #0]
 800a674:	d705      	bvc.n	800a682 <_scanf_float+0x3f6>
 800a676:	4806      	ldr	r0, [pc, #24]	; (800a690 <_scanf_float+0x404>)
 800a678:	f000 f80c 	bl	800a694 <nanf>
 800a67c:	ed86 0a00 	vstr	s0, [r6]
 800a680:	e7d2      	b.n	800a628 <_scanf_float+0x39c>
 800a682:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a686:	e7f9      	b.n	800a67c <_scanf_float+0x3f0>
 800a688:	2500      	movs	r5, #0
 800a68a:	e640      	b.n	800a30e <_scanf_float+0x82>
 800a68c:	0800f726 	.word	0x0800f726
 800a690:	0800fb5b 	.word	0x0800fb5b

0800a694 <nanf>:
 800a694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a69c <nanf+0x8>
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	7fc00000 	.word	0x7fc00000

0800a6a0 <siprintf>:
 800a6a0:	b40e      	push	{r1, r2, r3}
 800a6a2:	b500      	push	{lr}
 800a6a4:	b09c      	sub	sp, #112	; 0x70
 800a6a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a6a8:	9002      	str	r0, [sp, #8]
 800a6aa:	9006      	str	r0, [sp, #24]
 800a6ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6b0:	4809      	ldr	r0, [pc, #36]	; (800a6d8 <siprintf+0x38>)
 800a6b2:	9107      	str	r1, [sp, #28]
 800a6b4:	9104      	str	r1, [sp, #16]
 800a6b6:	4909      	ldr	r1, [pc, #36]	; (800a6dc <siprintf+0x3c>)
 800a6b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6bc:	9105      	str	r1, [sp, #20]
 800a6be:	6800      	ldr	r0, [r0, #0]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	a902      	add	r1, sp, #8
 800a6c4:	f002 fed6 	bl	800d474 <_svfiprintf_r>
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	b01c      	add	sp, #112	; 0x70
 800a6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d4:	b003      	add	sp, #12
 800a6d6:	4770      	bx	lr
 800a6d8:	20000128 	.word	0x20000128
 800a6dc:	ffff0208 	.word	0xffff0208

0800a6e0 <siscanf>:
 800a6e0:	b40e      	push	{r1, r2, r3}
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	b09f      	sub	sp, #124	; 0x7c
 800a6e6:	ac21      	add	r4, sp, #132	; 0x84
 800a6e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a6ec:	f854 2b04 	ldr.w	r2, [r4], #4
 800a6f0:	9201      	str	r2, [sp, #4]
 800a6f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a6f6:	9004      	str	r0, [sp, #16]
 800a6f8:	9008      	str	r0, [sp, #32]
 800a6fa:	f7f5 fdab 	bl	8000254 <strlen>
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <siscanf+0x50>)
 800a700:	9005      	str	r0, [sp, #20]
 800a702:	9009      	str	r0, [sp, #36]	; 0x24
 800a704:	930d      	str	r3, [sp, #52]	; 0x34
 800a706:	480b      	ldr	r0, [pc, #44]	; (800a734 <siscanf+0x54>)
 800a708:	9a01      	ldr	r2, [sp, #4]
 800a70a:	6800      	ldr	r0, [r0, #0]
 800a70c:	9403      	str	r4, [sp, #12]
 800a70e:	2300      	movs	r3, #0
 800a710:	9311      	str	r3, [sp, #68]	; 0x44
 800a712:	9316      	str	r3, [sp, #88]	; 0x58
 800a714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a718:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a71c:	a904      	add	r1, sp, #16
 800a71e:	4623      	mov	r3, r4
 800a720:	f003 f802 	bl	800d728 <__ssvfiscanf_r>
 800a724:	b01f      	add	sp, #124	; 0x7c
 800a726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72a:	b003      	add	sp, #12
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	0800a75b 	.word	0x0800a75b
 800a734:	20000128 	.word	0x20000128

0800a738 <__sread>:
 800a738:	b510      	push	{r4, lr}
 800a73a:	460c      	mov	r4, r1
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	f003 fab6 	bl	800dcb0 <_read_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	bfab      	itete	ge
 800a748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a74a:	89a3      	ldrhlt	r3, [r4, #12]
 800a74c:	181b      	addge	r3, r3, r0
 800a74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a752:	bfac      	ite	ge
 800a754:	6563      	strge	r3, [r4, #84]	; 0x54
 800a756:	81a3      	strhlt	r3, [r4, #12]
 800a758:	bd10      	pop	{r4, pc}

0800a75a <__seofread>:
 800a75a:	2000      	movs	r0, #0
 800a75c:	4770      	bx	lr

0800a75e <__swrite>:
 800a75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a762:	461f      	mov	r7, r3
 800a764:	898b      	ldrh	r3, [r1, #12]
 800a766:	05db      	lsls	r3, r3, #23
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	4616      	mov	r6, r2
 800a76e:	d505      	bpl.n	800a77c <__swrite+0x1e>
 800a770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a774:	2302      	movs	r3, #2
 800a776:	2200      	movs	r2, #0
 800a778:	f002 f870 	bl	800c85c <_lseek_r>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a786:	81a3      	strh	r3, [r4, #12]
 800a788:	4632      	mov	r2, r6
 800a78a:	463b      	mov	r3, r7
 800a78c:	4628      	mov	r0, r5
 800a78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a792:	f000 bebf 	b.w	800b514 <_write_r>

0800a796 <__sseek>:
 800a796:	b510      	push	{r4, lr}
 800a798:	460c      	mov	r4, r1
 800a79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79e:	f002 f85d 	bl	800c85c <_lseek_r>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	bf15      	itete	ne
 800a7a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7b2:	81a3      	strheq	r3, [r4, #12]
 800a7b4:	bf18      	it	ne
 800a7b6:	81a3      	strhne	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__sclose>:
 800a7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7be:	f000 bebb 	b.w	800b538 <_close_r>

0800a7c2 <strcpy>:
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c8:	f803 2b01 	strb.w	r2, [r3], #1
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	d1f9      	bne.n	800a7c4 <strcpy+0x2>
 800a7d0:	4770      	bx	lr

0800a7d2 <strncmp>:
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	b16a      	cbz	r2, 800a7f2 <strncmp+0x20>
 800a7d6:	3901      	subs	r1, #1
 800a7d8:	1884      	adds	r4, r0, r2
 800a7da:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d103      	bne.n	800a7ee <strncmp+0x1c>
 800a7e6:	42a0      	cmp	r0, r4
 800a7e8:	d001      	beq.n	800a7ee <strncmp+0x1c>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1f5      	bne.n	800a7da <strncmp+0x8>
 800a7ee:	1a98      	subs	r0, r3, r2
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	e7fc      	b.n	800a7f0 <strncmp+0x1e>

0800a7f6 <strncpy>:
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	3901      	subs	r1, #1
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	b132      	cbz	r2, 800a80c <strncpy+0x16>
 800a7fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a802:	f803 4b01 	strb.w	r4, [r3], #1
 800a806:	3a01      	subs	r2, #1
 800a808:	2c00      	cmp	r4, #0
 800a80a:	d1f7      	bne.n	800a7fc <strncpy+0x6>
 800a80c:	441a      	add	r2, r3
 800a80e:	2100      	movs	r1, #0
 800a810:	4293      	cmp	r3, r2
 800a812:	d100      	bne.n	800a816 <strncpy+0x20>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	f803 1b01 	strb.w	r1, [r3], #1
 800a81a:	e7f9      	b.n	800a810 <strncpy+0x1a>

0800a81c <sulp>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	4604      	mov	r4, r0
 800a820:	460d      	mov	r5, r1
 800a822:	4616      	mov	r6, r2
 800a824:	ec45 4b10 	vmov	d0, r4, r5
 800a828:	f002 fbbe 	bl	800cfa8 <__ulp>
 800a82c:	b17e      	cbz	r6, 800a84e <sulp+0x32>
 800a82e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a836:	2b00      	cmp	r3, #0
 800a838:	dd09      	ble.n	800a84e <sulp+0x32>
 800a83a:	051b      	lsls	r3, r3, #20
 800a83c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a840:	2000      	movs	r0, #0
 800a842:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a846:	ec41 0b17 	vmov	d7, r0, r1
 800a84a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a84e:	bd70      	pop	{r4, r5, r6, pc}

0800a850 <_strtod_l>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	ed2d 8b0c 	vpush	{d8-d13}
 800a858:	b09d      	sub	sp, #116	; 0x74
 800a85a:	461f      	mov	r7, r3
 800a85c:	2300      	movs	r3, #0
 800a85e:	9318      	str	r3, [sp, #96]	; 0x60
 800a860:	4ba6      	ldr	r3, [pc, #664]	; (800aafc <_strtod_l+0x2ac>)
 800a862:	9213      	str	r2, [sp, #76]	; 0x4c
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	4604      	mov	r4, r0
 800a86a:	4618      	mov	r0, r3
 800a86c:	468a      	mov	sl, r1
 800a86e:	f7f5 fcf1 	bl	8000254 <strlen>
 800a872:	f04f 0800 	mov.w	r8, #0
 800a876:	4605      	mov	r5, r0
 800a878:	f04f 0900 	mov.w	r9, #0
 800a87c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800a880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	2a2b      	cmp	r2, #43	; 0x2b
 800a886:	d04d      	beq.n	800a924 <_strtod_l+0xd4>
 800a888:	d83a      	bhi.n	800a900 <_strtod_l+0xb0>
 800a88a:	2a0d      	cmp	r2, #13
 800a88c:	d833      	bhi.n	800a8f6 <_strtod_l+0xa6>
 800a88e:	2a08      	cmp	r2, #8
 800a890:	d833      	bhi.n	800a8fa <_strtod_l+0xaa>
 800a892:	2a00      	cmp	r2, #0
 800a894:	d03d      	beq.n	800a912 <_strtod_l+0xc2>
 800a896:	2300      	movs	r3, #0
 800a898:	930b      	str	r3, [sp, #44]	; 0x2c
 800a89a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a89c:	7833      	ldrb	r3, [r6, #0]
 800a89e:	2b30      	cmp	r3, #48	; 0x30
 800a8a0:	f040 80b6 	bne.w	800aa10 <_strtod_l+0x1c0>
 800a8a4:	7873      	ldrb	r3, [r6, #1]
 800a8a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8aa:	2b58      	cmp	r3, #88	; 0x58
 800a8ac:	d16d      	bne.n	800a98a <_strtod_l+0x13a>
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	ab18      	add	r3, sp, #96	; 0x60
 800a8b4:	9702      	str	r7, [sp, #8]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	4a91      	ldr	r2, [pc, #580]	; (800ab00 <_strtod_l+0x2b0>)
 800a8ba:	ab19      	add	r3, sp, #100	; 0x64
 800a8bc:	a917      	add	r1, sp, #92	; 0x5c
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f001 fcc0 	bl	800c244 <__gethex>
 800a8c4:	f010 0507 	ands.w	r5, r0, #7
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	d005      	beq.n	800a8d8 <_strtod_l+0x88>
 800a8cc:	2d06      	cmp	r5, #6
 800a8ce:	d12b      	bne.n	800a928 <_strtod_l+0xd8>
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a8d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 856e 	bne.w	800b3bc <_strtod_l+0xb6c>
 800a8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e2:	b1e3      	cbz	r3, 800a91e <_strtod_l+0xce>
 800a8e4:	ec49 8b17 	vmov	d7, r8, r9
 800a8e8:	eeb1 0b47 	vneg.f64	d0, d7
 800a8ec:	b01d      	add	sp, #116	; 0x74
 800a8ee:	ecbd 8b0c 	vpop	{d8-d13}
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	2a20      	cmp	r2, #32
 800a8f8:	d1cd      	bne.n	800a896 <_strtod_l+0x46>
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8fe:	e7bf      	b.n	800a880 <_strtod_l+0x30>
 800a900:	2a2d      	cmp	r2, #45	; 0x2d
 800a902:	d1c8      	bne.n	800a896 <_strtod_l+0x46>
 800a904:	2201      	movs	r2, #1
 800a906:	920b      	str	r2, [sp, #44]	; 0x2c
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	9217      	str	r2, [sp, #92]	; 0x5c
 800a90c:	785b      	ldrb	r3, [r3, #1]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1c3      	bne.n	800a89a <_strtod_l+0x4a>
 800a912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a914:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 854d 	bne.w	800b3b8 <_strtod_l+0xb68>
 800a91e:	ec49 8b10 	vmov	d0, r8, r9
 800a922:	e7e3      	b.n	800a8ec <_strtod_l+0x9c>
 800a924:	2200      	movs	r2, #0
 800a926:	e7ee      	b.n	800a906 <_strtod_l+0xb6>
 800a928:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a92a:	b13a      	cbz	r2, 800a93c <_strtod_l+0xec>
 800a92c:	2135      	movs	r1, #53	; 0x35
 800a92e:	a81a      	add	r0, sp, #104	; 0x68
 800a930:	f002 fc46 	bl	800d1c0 <__copybits>
 800a934:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a936:	4620      	mov	r0, r4
 800a938:	f002 f80a 	bl	800c950 <_Bfree>
 800a93c:	3d01      	subs	r5, #1
 800a93e:	2d05      	cmp	r5, #5
 800a940:	d807      	bhi.n	800a952 <_strtod_l+0x102>
 800a942:	e8df f005 	tbb	[pc, r5]
 800a946:	0b0e      	.short	0x0b0e
 800a948:	030e1d18 	.word	0x030e1d18
 800a94c:	f04f 0900 	mov.w	r9, #0
 800a950:	46c8      	mov	r8, r9
 800a952:	073b      	lsls	r3, r7, #28
 800a954:	d5c0      	bpl.n	800a8d8 <_strtod_l+0x88>
 800a956:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a95a:	e7bd      	b.n	800a8d8 <_strtod_l+0x88>
 800a95c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800a960:	e7f7      	b.n	800a952 <_strtod_l+0x102>
 800a962:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800a966:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a968:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a96c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a970:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a974:	e7ed      	b.n	800a952 <_strtod_l+0x102>
 800a976:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800ab04 <_strtod_l+0x2b4>
 800a97a:	f04f 0800 	mov.w	r8, #0
 800a97e:	e7e8      	b.n	800a952 <_strtod_l+0x102>
 800a980:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a984:	f04f 38ff 	mov.w	r8, #4294967295
 800a988:	e7e3      	b.n	800a952 <_strtod_l+0x102>
 800a98a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b30      	cmp	r3, #48	; 0x30
 800a994:	d0f9      	beq.n	800a98a <_strtod_l+0x13a>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d09e      	beq.n	800a8d8 <_strtod_l+0x88>
 800a99a:	2301      	movs	r3, #1
 800a99c:	9306      	str	r3, [sp, #24]
 800a99e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a8:	461e      	mov	r6, r3
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a9ae:	f890 b000 	ldrb.w	fp, [r0]
 800a9b2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800a9b6:	b2d9      	uxtb	r1, r3
 800a9b8:	2909      	cmp	r1, #9
 800a9ba:	d92b      	bls.n	800aa14 <_strtod_l+0x1c4>
 800a9bc:	9908      	ldr	r1, [sp, #32]
 800a9be:	462a      	mov	r2, r5
 800a9c0:	f7ff ff07 	bl	800a7d2 <strncmp>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d035      	beq.n	800aa34 <_strtod_l+0x1e4>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	465a      	mov	r2, fp
 800a9cc:	4633      	mov	r3, r6
 800a9ce:	4683      	mov	fp, r0
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	2a65      	cmp	r2, #101	; 0x65
 800a9d4:	d001      	beq.n	800a9da <_strtod_l+0x18a>
 800a9d6:	2a45      	cmp	r2, #69	; 0x45
 800a9d8:	d118      	bne.n	800aa0c <_strtod_l+0x1bc>
 800a9da:	b91b      	cbnz	r3, 800a9e4 <_strtod_l+0x194>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	4303      	orrs	r3, r0
 800a9e0:	d097      	beq.n	800a912 <_strtod_l+0xc2>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800a9e8:	f10a 0201 	add.w	r2, sl, #1
 800a9ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9ee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800a9f2:	2a2b      	cmp	r2, #43	; 0x2b
 800a9f4:	d077      	beq.n	800aae6 <_strtod_l+0x296>
 800a9f6:	2a2d      	cmp	r2, #45	; 0x2d
 800a9f8:	d07d      	beq.n	800aaf6 <_strtod_l+0x2a6>
 800a9fa:	f04f 0e00 	mov.w	lr, #0
 800a9fe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800aa02:	2d09      	cmp	r5, #9
 800aa04:	f240 8084 	bls.w	800ab10 <_strtod_l+0x2c0>
 800aa08:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	e09f      	b.n	800ab50 <_strtod_l+0x300>
 800aa10:	2300      	movs	r3, #0
 800aa12:	e7c3      	b.n	800a99c <_strtod_l+0x14c>
 800aa14:	2e08      	cmp	r6, #8
 800aa16:	bfd5      	itete	le
 800aa18:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800aa1a:	9904      	ldrgt	r1, [sp, #16]
 800aa1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa20:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aa24:	f100 0001 	add.w	r0, r0, #1
 800aa28:	bfd4      	ite	le
 800aa2a:	930a      	strle	r3, [sp, #40]	; 0x28
 800aa2c:	9304      	strgt	r3, [sp, #16]
 800aa2e:	3601      	adds	r6, #1
 800aa30:	9017      	str	r0, [sp, #92]	; 0x5c
 800aa32:	e7bb      	b.n	800a9ac <_strtod_l+0x15c>
 800aa34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa36:	195a      	adds	r2, r3, r5
 800aa38:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa3a:	5d5a      	ldrb	r2, [r3, r5]
 800aa3c:	b3ae      	cbz	r6, 800aaaa <_strtod_l+0x25a>
 800aa3e:	4683      	mov	fp, r0
 800aa40:	4633      	mov	r3, r6
 800aa42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa46:	2909      	cmp	r1, #9
 800aa48:	d912      	bls.n	800aa70 <_strtod_l+0x220>
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	e7c1      	b.n	800a9d2 <_strtod_l+0x182>
 800aa4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa54:	785a      	ldrb	r2, [r3, #1]
 800aa56:	3001      	adds	r0, #1
 800aa58:	2a30      	cmp	r2, #48	; 0x30
 800aa5a:	d0f8      	beq.n	800aa4e <_strtod_l+0x1fe>
 800aa5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	f200 84b0 	bhi.w	800b3c6 <_strtod_l+0xb76>
 800aa66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa68:	930c      	str	r3, [sp, #48]	; 0x30
 800aa6a:	4683      	mov	fp, r0
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	3a30      	subs	r2, #48	; 0x30
 800aa72:	f100 0101 	add.w	r1, r0, #1
 800aa76:	d012      	beq.n	800aa9e <_strtod_l+0x24e>
 800aa78:	448b      	add	fp, r1
 800aa7a:	eb00 0c03 	add.w	ip, r0, r3
 800aa7e:	4619      	mov	r1, r3
 800aa80:	250a      	movs	r5, #10
 800aa82:	4561      	cmp	r1, ip
 800aa84:	d113      	bne.n	800aaae <_strtod_l+0x25e>
 800aa86:	1819      	adds	r1, r3, r0
 800aa88:	2908      	cmp	r1, #8
 800aa8a:	f103 0301 	add.w	r3, r3, #1
 800aa8e:	4403      	add	r3, r0
 800aa90:	dc1d      	bgt.n	800aace <_strtod_l+0x27e>
 800aa92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa94:	210a      	movs	r1, #10
 800aa96:	fb01 2200 	mla	r2, r1, r0, r2
 800aa9a:	920a      	str	r2, [sp, #40]	; 0x28
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aaa0:	1c50      	adds	r0, r2, #1
 800aaa2:	9017      	str	r0, [sp, #92]	; 0x5c
 800aaa4:	7852      	ldrb	r2, [r2, #1]
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	e7cb      	b.n	800aa42 <_strtod_l+0x1f2>
 800aaaa:	4630      	mov	r0, r6
 800aaac:	e7d4      	b.n	800aa58 <_strtod_l+0x208>
 800aaae:	2908      	cmp	r1, #8
 800aab0:	dc04      	bgt.n	800aabc <_strtod_l+0x26c>
 800aab2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aab4:	436f      	muls	r7, r5
 800aab6:	970a      	str	r7, [sp, #40]	; 0x28
 800aab8:	3101      	adds	r1, #1
 800aaba:	e7e2      	b.n	800aa82 <_strtod_l+0x232>
 800aabc:	f101 0e01 	add.w	lr, r1, #1
 800aac0:	f1be 0f10 	cmp.w	lr, #16
 800aac4:	bfde      	ittt	le
 800aac6:	9f04      	ldrle	r7, [sp, #16]
 800aac8:	436f      	mulle	r7, r5
 800aaca:	9704      	strle	r7, [sp, #16]
 800aacc:	e7f4      	b.n	800aab8 <_strtod_l+0x268>
 800aace:	2b10      	cmp	r3, #16
 800aad0:	bfdf      	itttt	le
 800aad2:	9804      	ldrle	r0, [sp, #16]
 800aad4:	210a      	movle	r1, #10
 800aad6:	fb01 2200 	mlale	r2, r1, r0, r2
 800aada:	9204      	strle	r2, [sp, #16]
 800aadc:	e7de      	b.n	800aa9c <_strtod_l+0x24c>
 800aade:	f04f 0b00 	mov.w	fp, #0
 800aae2:	2101      	movs	r1, #1
 800aae4:	e77a      	b.n	800a9dc <_strtod_l+0x18c>
 800aae6:	f04f 0e00 	mov.w	lr, #0
 800aaea:	f10a 0202 	add.w	r2, sl, #2
 800aaee:	9217      	str	r2, [sp, #92]	; 0x5c
 800aaf0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800aaf4:	e783      	b.n	800a9fe <_strtod_l+0x1ae>
 800aaf6:	f04f 0e01 	mov.w	lr, #1
 800aafa:	e7f6      	b.n	800aaea <_strtod_l+0x29a>
 800aafc:	0800f980 	.word	0x0800f980
 800ab00:	0800f72c 	.word	0x0800f72c
 800ab04:	7ff00000 	.word	0x7ff00000
 800ab08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab0a:	1c55      	adds	r5, r2, #1
 800ab0c:	9517      	str	r5, [sp, #92]	; 0x5c
 800ab0e:	7852      	ldrb	r2, [r2, #1]
 800ab10:	2a30      	cmp	r2, #48	; 0x30
 800ab12:	d0f9      	beq.n	800ab08 <_strtod_l+0x2b8>
 800ab14:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ab18:	2d08      	cmp	r5, #8
 800ab1a:	f63f af77 	bhi.w	800aa0c <_strtod_l+0x1bc>
 800ab1e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ab22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab24:	9208      	str	r2, [sp, #32]
 800ab26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab28:	1c55      	adds	r5, r2, #1
 800ab2a:	9517      	str	r5, [sp, #92]	; 0x5c
 800ab2c:	7852      	ldrb	r2, [r2, #1]
 800ab2e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800ab32:	2f09      	cmp	r7, #9
 800ab34:	d937      	bls.n	800aba6 <_strtod_l+0x356>
 800ab36:	9f08      	ldr	r7, [sp, #32]
 800ab38:	1bed      	subs	r5, r5, r7
 800ab3a:	2d08      	cmp	r5, #8
 800ab3c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ab40:	dc02      	bgt.n	800ab48 <_strtod_l+0x2f8>
 800ab42:	4565      	cmp	r5, ip
 800ab44:	bfa8      	it	ge
 800ab46:	4665      	movge	r5, ip
 800ab48:	f1be 0f00 	cmp.w	lr, #0
 800ab4c:	d000      	beq.n	800ab50 <_strtod_l+0x300>
 800ab4e:	426d      	negs	r5, r5
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d14f      	bne.n	800abf4 <_strtod_l+0x3a4>
 800ab54:	9b06      	ldr	r3, [sp, #24]
 800ab56:	4303      	orrs	r3, r0
 800ab58:	f47f aebe 	bne.w	800a8d8 <_strtod_l+0x88>
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	f47f aed8 	bne.w	800a912 <_strtod_l+0xc2>
 800ab62:	2a69      	cmp	r2, #105	; 0x69
 800ab64:	d027      	beq.n	800abb6 <_strtod_l+0x366>
 800ab66:	dc24      	bgt.n	800abb2 <_strtod_l+0x362>
 800ab68:	2a49      	cmp	r2, #73	; 0x49
 800ab6a:	d024      	beq.n	800abb6 <_strtod_l+0x366>
 800ab6c:	2a4e      	cmp	r2, #78	; 0x4e
 800ab6e:	f47f aed0 	bne.w	800a912 <_strtod_l+0xc2>
 800ab72:	499b      	ldr	r1, [pc, #620]	; (800ade0 <_strtod_l+0x590>)
 800ab74:	a817      	add	r0, sp, #92	; 0x5c
 800ab76:	f001 fdbd 	bl	800c6f4 <__match>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f43f aec9 	beq.w	800a912 <_strtod_l+0xc2>
 800ab80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b28      	cmp	r3, #40	; 0x28
 800ab86:	d12d      	bne.n	800abe4 <_strtod_l+0x394>
 800ab88:	4996      	ldr	r1, [pc, #600]	; (800ade4 <_strtod_l+0x594>)
 800ab8a:	aa1a      	add	r2, sp, #104	; 0x68
 800ab8c:	a817      	add	r0, sp, #92	; 0x5c
 800ab8e:	f001 fdc5 	bl	800c71c <__hexnan>
 800ab92:	2805      	cmp	r0, #5
 800ab94:	d126      	bne.n	800abe4 <_strtod_l+0x394>
 800ab96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ab9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aba0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aba4:	e698      	b.n	800a8d8 <_strtod_l+0x88>
 800aba6:	250a      	movs	r5, #10
 800aba8:	fb05 250c 	mla	r5, r5, ip, r2
 800abac:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800abb0:	e7b9      	b.n	800ab26 <_strtod_l+0x2d6>
 800abb2:	2a6e      	cmp	r2, #110	; 0x6e
 800abb4:	e7db      	b.n	800ab6e <_strtod_l+0x31e>
 800abb6:	498c      	ldr	r1, [pc, #560]	; (800ade8 <_strtod_l+0x598>)
 800abb8:	a817      	add	r0, sp, #92	; 0x5c
 800abba:	f001 fd9b 	bl	800c6f4 <__match>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f aea7 	beq.w	800a912 <_strtod_l+0xc2>
 800abc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abc6:	4989      	ldr	r1, [pc, #548]	; (800adec <_strtod_l+0x59c>)
 800abc8:	3b01      	subs	r3, #1
 800abca:	a817      	add	r0, sp, #92	; 0x5c
 800abcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800abce:	f001 fd91 	bl	800c6f4 <__match>
 800abd2:	b910      	cbnz	r0, 800abda <_strtod_l+0x38a>
 800abd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd6:	3301      	adds	r3, #1
 800abd8:	9317      	str	r3, [sp, #92]	; 0x5c
 800abda:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800ae00 <_strtod_l+0x5b0>
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	e679      	b.n	800a8d8 <_strtod_l+0x88>
 800abe4:	4882      	ldr	r0, [pc, #520]	; (800adf0 <_strtod_l+0x5a0>)
 800abe6:	f003 f877 	bl	800dcd8 <nan>
 800abea:	ed8d 0b04 	vstr	d0, [sp, #16]
 800abee:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800abf2:	e671      	b.n	800a8d8 <_strtod_l+0x88>
 800abf4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800abf8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800abfc:	eba5 020b 	sub.w	r2, r5, fp
 800ac00:	2e00      	cmp	r6, #0
 800ac02:	bf08      	it	eq
 800ac04:	461e      	moveq	r6, r3
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ac0c:	9206      	str	r2, [sp, #24]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	bfa8      	it	ge
 800ac12:	2210      	movge	r2, #16
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800ac1a:	dd0e      	ble.n	800ac3a <_strtod_l+0x3ea>
 800ac1c:	4975      	ldr	r1, [pc, #468]	; (800adf4 <_strtod_l+0x5a4>)
 800ac1e:	eddd 7a04 	vldr	s15, [sp, #16]
 800ac22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ac26:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800ac2a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800ac2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac32:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac36:	ec59 8b17 	vmov	r8, r9, d7
 800ac3a:	2b0f      	cmp	r3, #15
 800ac3c:	dc37      	bgt.n	800acae <_strtod_l+0x45e>
 800ac3e:	9906      	ldr	r1, [sp, #24]
 800ac40:	2900      	cmp	r1, #0
 800ac42:	f43f ae49 	beq.w	800a8d8 <_strtod_l+0x88>
 800ac46:	dd23      	ble.n	800ac90 <_strtod_l+0x440>
 800ac48:	2916      	cmp	r1, #22
 800ac4a:	dc0b      	bgt.n	800ac64 <_strtod_l+0x414>
 800ac4c:	4b69      	ldr	r3, [pc, #420]	; (800adf4 <_strtod_l+0x5a4>)
 800ac4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ac52:	ed93 7b00 	vldr	d7, [r3]
 800ac56:	ec49 8b16 	vmov	d6, r8, r9
 800ac5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac5e:	ec59 8b17 	vmov	r8, r9, d7
 800ac62:	e639      	b.n	800a8d8 <_strtod_l+0x88>
 800ac64:	9806      	ldr	r0, [sp, #24]
 800ac66:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ac6a:	4281      	cmp	r1, r0
 800ac6c:	db1f      	blt.n	800acae <_strtod_l+0x45e>
 800ac6e:	4a61      	ldr	r2, [pc, #388]	; (800adf4 <_strtod_l+0x5a4>)
 800ac70:	f1c3 030f 	rsb	r3, r3, #15
 800ac74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ac78:	ed91 7b00 	vldr	d7, [r1]
 800ac7c:	ec49 8b16 	vmov	d6, r8, r9
 800ac80:	1ac3      	subs	r3, r0, r3
 800ac82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ac86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac8a:	ed92 6b00 	vldr	d6, [r2]
 800ac8e:	e7e4      	b.n	800ac5a <_strtod_l+0x40a>
 800ac90:	9906      	ldr	r1, [sp, #24]
 800ac92:	3116      	adds	r1, #22
 800ac94:	db0b      	blt.n	800acae <_strtod_l+0x45e>
 800ac96:	4b57      	ldr	r3, [pc, #348]	; (800adf4 <_strtod_l+0x5a4>)
 800ac98:	ebab 0505 	sub.w	r5, fp, r5
 800ac9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aca0:	ed95 7b00 	vldr	d7, [r5]
 800aca4:	ec49 8b16 	vmov	d6, r8, r9
 800aca8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800acac:	e7d7      	b.n	800ac5e <_strtod_l+0x40e>
 800acae:	9906      	ldr	r1, [sp, #24]
 800acb0:	1a9a      	subs	r2, r3, r2
 800acb2:	440a      	add	r2, r1
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	dd74      	ble.n	800ada2 <_strtod_l+0x552>
 800acb8:	f012 000f 	ands.w	r0, r2, #15
 800acbc:	d00a      	beq.n	800acd4 <_strtod_l+0x484>
 800acbe:	494d      	ldr	r1, [pc, #308]	; (800adf4 <_strtod_l+0x5a4>)
 800acc0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800acc4:	ed91 7b00 	vldr	d7, [r1]
 800acc8:	ec49 8b16 	vmov	d6, r8, r9
 800accc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acd0:	ec59 8b17 	vmov	r8, r9, d7
 800acd4:	f032 020f 	bics.w	r2, r2, #15
 800acd8:	d04f      	beq.n	800ad7a <_strtod_l+0x52a>
 800acda:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800acde:	dd22      	ble.n	800ad26 <_strtod_l+0x4d6>
 800ace0:	2500      	movs	r5, #0
 800ace2:	462e      	mov	r6, r5
 800ace4:	950a      	str	r5, [sp, #40]	; 0x28
 800ace6:	462f      	mov	r7, r5
 800ace8:	2322      	movs	r3, #34	; 0x22
 800acea:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800ae00 <_strtod_l+0x5b0>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	f04f 0800 	mov.w	r8, #0
 800acf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f43f adee 	beq.w	800a8d8 <_strtod_l+0x88>
 800acfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acfe:	4620      	mov	r0, r4
 800ad00:	f001 fe26 	bl	800c950 <_Bfree>
 800ad04:	4639      	mov	r1, r7
 800ad06:	4620      	mov	r0, r4
 800ad08:	f001 fe22 	bl	800c950 <_Bfree>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f001 fe1e 	bl	800c950 <_Bfree>
 800ad14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad16:	4620      	mov	r0, r4
 800ad18:	f001 fe1a 	bl	800c950 <_Bfree>
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f001 fe16 	bl	800c950 <_Bfree>
 800ad24:	e5d8      	b.n	800a8d8 <_strtod_l+0x88>
 800ad26:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	4f32      	ldr	r7, [pc, #200]	; (800adf8 <_strtod_l+0x5a8>)
 800ad2e:	1112      	asrs	r2, r2, #4
 800ad30:	4601      	mov	r1, r0
 800ad32:	2a01      	cmp	r2, #1
 800ad34:	dc24      	bgt.n	800ad80 <_strtod_l+0x530>
 800ad36:	b108      	cbz	r0, 800ad3c <_strtod_l+0x4ec>
 800ad38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad3c:	4a2e      	ldr	r2, [pc, #184]	; (800adf8 <_strtod_l+0x5a8>)
 800ad3e:	482f      	ldr	r0, [pc, #188]	; (800adfc <_strtod_l+0x5ac>)
 800ad40:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ad44:	ed91 7b00 	vldr	d7, [r1]
 800ad48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ad4c:	ec49 8b16 	vmov	d6, r8, r9
 800ad50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad58:	9905      	ldr	r1, [sp, #20]
 800ad5a:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <_strtod_l+0x5b0>)
 800ad5c:	400a      	ands	r2, r1
 800ad5e:	4282      	cmp	r2, r0
 800ad60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad64:	d8bc      	bhi.n	800ace0 <_strtod_l+0x490>
 800ad66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ad6a:	4282      	cmp	r2, r0
 800ad6c:	bf86      	itte	hi
 800ad6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ae04 <_strtod_l+0x5b4>
 800ad72:	f04f 38ff 	movhi.w	r8, #4294967295
 800ad76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	9204      	str	r2, [sp, #16]
 800ad7e:	e07f      	b.n	800ae80 <_strtod_l+0x630>
 800ad80:	f012 0f01 	tst.w	r2, #1
 800ad84:	d00a      	beq.n	800ad9c <_strtod_l+0x54c>
 800ad86:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800ad8a:	ed90 7b00 	vldr	d7, [r0]
 800ad8e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800ad92:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad96:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	3101      	adds	r1, #1
 800ad9e:	1052      	asrs	r2, r2, #1
 800ada0:	e7c7      	b.n	800ad32 <_strtod_l+0x4e2>
 800ada2:	d0ea      	beq.n	800ad7a <_strtod_l+0x52a>
 800ada4:	4252      	negs	r2, r2
 800ada6:	f012 000f 	ands.w	r0, r2, #15
 800adaa:	d00a      	beq.n	800adc2 <_strtod_l+0x572>
 800adac:	4911      	ldr	r1, [pc, #68]	; (800adf4 <_strtod_l+0x5a4>)
 800adae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800adb2:	ed91 7b00 	vldr	d7, [r1]
 800adb6:	ec49 8b16 	vmov	d6, r8, r9
 800adba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800adbe:	ec59 8b17 	vmov	r8, r9, d7
 800adc2:	1112      	asrs	r2, r2, #4
 800adc4:	d0d9      	beq.n	800ad7a <_strtod_l+0x52a>
 800adc6:	2a1f      	cmp	r2, #31
 800adc8:	dd1e      	ble.n	800ae08 <_strtod_l+0x5b8>
 800adca:	2500      	movs	r5, #0
 800adcc:	462e      	mov	r6, r5
 800adce:	950a      	str	r5, [sp, #40]	; 0x28
 800add0:	462f      	mov	r7, r5
 800add2:	2322      	movs	r3, #34	; 0x22
 800add4:	f04f 0800 	mov.w	r8, #0
 800add8:	f04f 0900 	mov.w	r9, #0
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	e789      	b.n	800acf4 <_strtod_l+0x4a4>
 800ade0:	0800f701 	.word	0x0800f701
 800ade4:	0800f740 	.word	0x0800f740
 800ade8:	0800f6f9 	.word	0x0800f6f9
 800adec:	0800f884 	.word	0x0800f884
 800adf0:	0800fb5b 	.word	0x0800fb5b
 800adf4:	0800fa20 	.word	0x0800fa20
 800adf8:	0800f9f8 	.word	0x0800f9f8
 800adfc:	7ca00000 	.word	0x7ca00000
 800ae00:	7ff00000 	.word	0x7ff00000
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	f012 0110 	ands.w	r1, r2, #16
 800ae0c:	bf18      	it	ne
 800ae0e:	216a      	movne	r1, #106	; 0x6a
 800ae10:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800ae14:	9104      	str	r1, [sp, #16]
 800ae16:	49c0      	ldr	r1, [pc, #768]	; (800b118 <_strtod_l+0x8c8>)
 800ae18:	2000      	movs	r0, #0
 800ae1a:	07d7      	lsls	r7, r2, #31
 800ae1c:	d508      	bpl.n	800ae30 <_strtod_l+0x5e0>
 800ae1e:	ed9d 6b08 	vldr	d6, [sp, #32]
 800ae22:	ed91 7b00 	vldr	d7, [r1]
 800ae26:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ae2a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	1052      	asrs	r2, r2, #1
 800ae32:	f101 0108 	add.w	r1, r1, #8
 800ae36:	d1f0      	bne.n	800ae1a <_strtod_l+0x5ca>
 800ae38:	b108      	cbz	r0, 800ae3e <_strtod_l+0x5ee>
 800ae3a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800ae3e:	9a04      	ldr	r2, [sp, #16]
 800ae40:	b1ba      	cbz	r2, 800ae72 <_strtod_l+0x622>
 800ae42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ae46:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800ae4a:	2a00      	cmp	r2, #0
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	dd10      	ble.n	800ae72 <_strtod_l+0x622>
 800ae50:	2a1f      	cmp	r2, #31
 800ae52:	f340 8132 	ble.w	800b0ba <_strtod_l+0x86a>
 800ae56:	2a34      	cmp	r2, #52	; 0x34
 800ae58:	bfde      	ittt	le
 800ae5a:	3a20      	suble	r2, #32
 800ae5c:	f04f 30ff 	movle.w	r0, #4294967295
 800ae60:	fa00 f202 	lslle.w	r2, r0, r2
 800ae64:	f04f 0800 	mov.w	r8, #0
 800ae68:	bfcc      	ite	gt
 800ae6a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae6e:	ea02 0901 	andle.w	r9, r2, r1
 800ae72:	ec49 8b17 	vmov	d7, r8, r9
 800ae76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7e:	d0a4      	beq.n	800adca <_strtod_l+0x57a>
 800ae80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae82:	9200      	str	r2, [sp, #0]
 800ae84:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae86:	4632      	mov	r2, r6
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f001 fdcd 	bl	800ca28 <__s2b>
 800ae8e:	900a      	str	r0, [sp, #40]	; 0x28
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f43f af25 	beq.w	800ace0 <_strtod_l+0x490>
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	ebab 0505 	sub.w	r5, fp, r5
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb4      	ite	lt
 800aea0:	462b      	movlt	r3, r5
 800aea2:	2300      	movge	r3, #0
 800aea4:	930c      	str	r3, [sp, #48]	; 0x30
 800aea6:	9b06      	ldr	r3, [sp, #24]
 800aea8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b100 <_strtod_l+0x8b0>
 800aeac:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b108 <_strtod_l+0x8b8>
 800aeb0:	ed9f bb97 	vldr	d11, [pc, #604]	; 800b110 <_strtod_l+0x8c0>
 800aeb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aeb8:	2500      	movs	r5, #0
 800aeba:	9312      	str	r3, [sp, #72]	; 0x48
 800aebc:	462e      	mov	r6, r5
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	4620      	mov	r0, r4
 800aec2:	6859      	ldr	r1, [r3, #4]
 800aec4:	f001 fd04 	bl	800c8d0 <_Balloc>
 800aec8:	4607      	mov	r7, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f43f af0c 	beq.w	800ace8 <_strtod_l+0x498>
 800aed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	3202      	adds	r2, #2
 800aed6:	f103 010c 	add.w	r1, r3, #12
 800aeda:	0092      	lsls	r2, r2, #2
 800aedc:	300c      	adds	r0, #12
 800aede:	f001 fce9 	bl	800c8b4 <memcpy>
 800aee2:	ec49 8b10 	vmov	d0, r8, r9
 800aee6:	aa1a      	add	r2, sp, #104	; 0x68
 800aee8:	a919      	add	r1, sp, #100	; 0x64
 800aeea:	4620      	mov	r0, r4
 800aeec:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800aef0:	f002 f8d6 	bl	800d0a0 <__d2b>
 800aef4:	9018      	str	r0, [sp, #96]	; 0x60
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f43f aef6 	beq.w	800ace8 <_strtod_l+0x498>
 800aefc:	2101      	movs	r1, #1
 800aefe:	4620      	mov	r0, r4
 800af00:	f001 fe2c 	bl	800cb5c <__i2b>
 800af04:	4606      	mov	r6, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f aeee 	beq.w	800ace8 <_strtod_l+0x498>
 800af0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfab      	itete	ge
 800af14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800af16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800af18:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800af1c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800af20:	bfac      	ite	ge
 800af22:	eb03 0b02 	addge.w	fp, r3, r2
 800af26:	eba2 0a03 	sublt.w	sl, r2, r3
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	440b      	add	r3, r1
 800af30:	4a7a      	ldr	r2, [pc, #488]	; (800b11c <_strtod_l+0x8cc>)
 800af32:	3b01      	subs	r3, #1
 800af34:	4293      	cmp	r3, r2
 800af36:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800af3a:	f280 80d1 	bge.w	800b0e0 <_strtod_l+0x890>
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	2a1f      	cmp	r2, #31
 800af42:	eba1 0102 	sub.w	r1, r1, r2
 800af46:	f04f 0001 	mov.w	r0, #1
 800af4a:	f300 80bd 	bgt.w	800b0c8 <_strtod_l+0x878>
 800af4e:	fa00 f302 	lsl.w	r3, r0, r2
 800af52:	930e      	str	r3, [sp, #56]	; 0x38
 800af54:	2300      	movs	r3, #0
 800af56:	930d      	str	r3, [sp, #52]	; 0x34
 800af58:	eb0b 0301 	add.w	r3, fp, r1
 800af5c:	9a04      	ldr	r2, [sp, #16]
 800af5e:	459b      	cmp	fp, r3
 800af60:	448a      	add	sl, r1
 800af62:	4492      	add	sl, r2
 800af64:	465a      	mov	r2, fp
 800af66:	bfa8      	it	ge
 800af68:	461a      	movge	r2, r3
 800af6a:	4552      	cmp	r2, sl
 800af6c:	bfa8      	it	ge
 800af6e:	4652      	movge	r2, sl
 800af70:	2a00      	cmp	r2, #0
 800af72:	bfc2      	ittt	gt
 800af74:	1a9b      	subgt	r3, r3, r2
 800af76:	ebaa 0a02 	subgt.w	sl, sl, r2
 800af7a:	ebab 0b02 	subgt.w	fp, fp, r2
 800af7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af80:	2a00      	cmp	r2, #0
 800af82:	dd18      	ble.n	800afb6 <_strtod_l+0x766>
 800af84:	4631      	mov	r1, r6
 800af86:	4620      	mov	r0, r4
 800af88:	9315      	str	r3, [sp, #84]	; 0x54
 800af8a:	f001 fea3 	bl	800ccd4 <__pow5mult>
 800af8e:	4606      	mov	r6, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	f43f aea9 	beq.w	800ace8 <_strtod_l+0x498>
 800af96:	4601      	mov	r1, r0
 800af98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af9a:	4620      	mov	r0, r4
 800af9c:	f001 fdf4 	bl	800cb88 <__multiply>
 800afa0:	9014      	str	r0, [sp, #80]	; 0x50
 800afa2:	2800      	cmp	r0, #0
 800afa4:	f43f aea0 	beq.w	800ace8 <_strtod_l+0x498>
 800afa8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afaa:	4620      	mov	r0, r4
 800afac:	f001 fcd0 	bl	800c950 <_Bfree>
 800afb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afb4:	9218      	str	r2, [sp, #96]	; 0x60
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f300 8097 	bgt.w	800b0ea <_strtod_l+0x89a>
 800afbc:	9b06      	ldr	r3, [sp, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	dd08      	ble.n	800afd4 <_strtod_l+0x784>
 800afc2:	4639      	mov	r1, r7
 800afc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afc6:	4620      	mov	r0, r4
 800afc8:	f001 fe84 	bl	800ccd4 <__pow5mult>
 800afcc:	4607      	mov	r7, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f ae8a 	beq.w	800ace8 <_strtod_l+0x498>
 800afd4:	f1ba 0f00 	cmp.w	sl, #0
 800afd8:	dd08      	ble.n	800afec <_strtod_l+0x79c>
 800afda:	4639      	mov	r1, r7
 800afdc:	4652      	mov	r2, sl
 800afde:	4620      	mov	r0, r4
 800afe0:	f001 fed2 	bl	800cd88 <__lshift>
 800afe4:	4607      	mov	r7, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f ae7e 	beq.w	800ace8 <_strtod_l+0x498>
 800afec:	f1bb 0f00 	cmp.w	fp, #0
 800aff0:	dd08      	ble.n	800b004 <_strtod_l+0x7b4>
 800aff2:	4631      	mov	r1, r6
 800aff4:	465a      	mov	r2, fp
 800aff6:	4620      	mov	r0, r4
 800aff8:	f001 fec6 	bl	800cd88 <__lshift>
 800affc:	4606      	mov	r6, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	f43f ae72 	beq.w	800ace8 <_strtod_l+0x498>
 800b004:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b006:	463a      	mov	r2, r7
 800b008:	4620      	mov	r0, r4
 800b00a:	f001 ff45 	bl	800ce98 <__mdiff>
 800b00e:	4605      	mov	r5, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	f43f ae69 	beq.w	800ace8 <_strtod_l+0x498>
 800b016:	2300      	movs	r3, #0
 800b018:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b01c:	60c3      	str	r3, [r0, #12]
 800b01e:	4631      	mov	r1, r6
 800b020:	f001 ff1e 	bl	800ce60 <__mcmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	da7f      	bge.n	800b128 <_strtod_l+0x8d8>
 800b028:	ea5a 0308 	orrs.w	r3, sl, r8
 800b02c:	f040 80a5 	bne.w	800b17a <_strtod_l+0x92a>
 800b030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b034:	2b00      	cmp	r3, #0
 800b036:	f040 80a0 	bne.w	800b17a <_strtod_l+0x92a>
 800b03a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b03e:	0d1b      	lsrs	r3, r3, #20
 800b040:	051b      	lsls	r3, r3, #20
 800b042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b046:	f240 8098 	bls.w	800b17a <_strtod_l+0x92a>
 800b04a:	696b      	ldr	r3, [r5, #20]
 800b04c:	b91b      	cbnz	r3, 800b056 <_strtod_l+0x806>
 800b04e:	692b      	ldr	r3, [r5, #16]
 800b050:	2b01      	cmp	r3, #1
 800b052:	f340 8092 	ble.w	800b17a <_strtod_l+0x92a>
 800b056:	4629      	mov	r1, r5
 800b058:	2201      	movs	r2, #1
 800b05a:	4620      	mov	r0, r4
 800b05c:	f001 fe94 	bl	800cd88 <__lshift>
 800b060:	4631      	mov	r1, r6
 800b062:	4605      	mov	r5, r0
 800b064:	f001 fefc 	bl	800ce60 <__mcmp>
 800b068:	2800      	cmp	r0, #0
 800b06a:	f340 8086 	ble.w	800b17a <_strtod_l+0x92a>
 800b06e:	9904      	ldr	r1, [sp, #16]
 800b070:	4a2b      	ldr	r2, [pc, #172]	; (800b120 <_strtod_l+0x8d0>)
 800b072:	464b      	mov	r3, r9
 800b074:	2900      	cmp	r1, #0
 800b076:	f000 80a1 	beq.w	800b1bc <_strtod_l+0x96c>
 800b07a:	ea02 0109 	and.w	r1, r2, r9
 800b07e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b082:	f300 809b 	bgt.w	800b1bc <_strtod_l+0x96c>
 800b086:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b08a:	f77f aea2 	ble.w	800add2 <_strtod_l+0x582>
 800b08e:	4a25      	ldr	r2, [pc, #148]	; (800b124 <_strtod_l+0x8d4>)
 800b090:	2300      	movs	r3, #0
 800b092:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b096:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800b09a:	ec49 8b17 	vmov	d7, r8, r9
 800b09e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	bf08      	it	eq
 800b0ae:	2322      	moveq	r3, #34	; 0x22
 800b0b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0b4:	bf08      	it	eq
 800b0b6:	6023      	streq	r3, [r4, #0]
 800b0b8:	e620      	b.n	800acfc <_strtod_l+0x4ac>
 800b0ba:	f04f 31ff 	mov.w	r1, #4294967295
 800b0be:	fa01 f202 	lsl.w	r2, r1, r2
 800b0c2:	ea02 0808 	and.w	r8, r2, r8
 800b0c6:	e6d4      	b.n	800ae72 <_strtod_l+0x622>
 800b0c8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b0cc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b0d0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b0d4:	33e2      	adds	r3, #226	; 0xe2
 800b0d6:	fa00 f303 	lsl.w	r3, r0, r3
 800b0da:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800b0de:	e73b      	b.n	800af58 <_strtod_l+0x708>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800b0e8:	e736      	b.n	800af58 <_strtod_l+0x708>
 800b0ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f001 fe4a 	bl	800cd88 <__lshift>
 800b0f4:	9018      	str	r0, [sp, #96]	; 0x60
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f47f af60 	bne.w	800afbc <_strtod_l+0x76c>
 800b0fc:	e5f4      	b.n	800ace8 <_strtod_l+0x498>
 800b0fe:	bf00      	nop
 800b100:	94a03595 	.word	0x94a03595
 800b104:	3fcfffff 	.word	0x3fcfffff
 800b108:	94a03595 	.word	0x94a03595
 800b10c:	3fdfffff 	.word	0x3fdfffff
 800b110:	35afe535 	.word	0x35afe535
 800b114:	3fe00000 	.word	0x3fe00000
 800b118:	0800f758 	.word	0x0800f758
 800b11c:	fffffc02 	.word	0xfffffc02
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	39500000 	.word	0x39500000
 800b128:	46cb      	mov	fp, r9
 800b12a:	d165      	bne.n	800b1f8 <_strtod_l+0x9a8>
 800b12c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b130:	f1ba 0f00 	cmp.w	sl, #0
 800b134:	d02a      	beq.n	800b18c <_strtod_l+0x93c>
 800b136:	4aaa      	ldr	r2, [pc, #680]	; (800b3e0 <_strtod_l+0xb90>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d12b      	bne.n	800b194 <_strtod_l+0x944>
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	4641      	mov	r1, r8
 800b140:	b1fb      	cbz	r3, 800b182 <_strtod_l+0x932>
 800b142:	4aa8      	ldr	r2, [pc, #672]	; (800b3e4 <_strtod_l+0xb94>)
 800b144:	ea09 0202 	and.w	r2, r9, r2
 800b148:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	d81a      	bhi.n	800b188 <_strtod_l+0x938>
 800b152:	0d12      	lsrs	r2, r2, #20
 800b154:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b158:	fa00 f303 	lsl.w	r3, r0, r3
 800b15c:	4299      	cmp	r1, r3
 800b15e:	d119      	bne.n	800b194 <_strtod_l+0x944>
 800b160:	4ba1      	ldr	r3, [pc, #644]	; (800b3e8 <_strtod_l+0xb98>)
 800b162:	459b      	cmp	fp, r3
 800b164:	d102      	bne.n	800b16c <_strtod_l+0x91c>
 800b166:	3101      	adds	r1, #1
 800b168:	f43f adbe 	beq.w	800ace8 <_strtod_l+0x498>
 800b16c:	4b9d      	ldr	r3, [pc, #628]	; (800b3e4 <_strtod_l+0xb94>)
 800b16e:	ea0b 0303 	and.w	r3, fp, r3
 800b172:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b176:	f04f 0800 	mov.w	r8, #0
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d186      	bne.n	800b08e <_strtod_l+0x83e>
 800b180:	e5bc      	b.n	800acfc <_strtod_l+0x4ac>
 800b182:	f04f 33ff 	mov.w	r3, #4294967295
 800b186:	e7e9      	b.n	800b15c <_strtod_l+0x90c>
 800b188:	4603      	mov	r3, r0
 800b18a:	e7e7      	b.n	800b15c <_strtod_l+0x90c>
 800b18c:	ea53 0308 	orrs.w	r3, r3, r8
 800b190:	f43f af6d 	beq.w	800b06e <_strtod_l+0x81e>
 800b194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b196:	b1db      	cbz	r3, 800b1d0 <_strtod_l+0x980>
 800b198:	ea13 0f0b 	tst.w	r3, fp
 800b19c:	d0ed      	beq.n	800b17a <_strtod_l+0x92a>
 800b19e:	9a04      	ldr	r2, [sp, #16]
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	f1ba 0f00 	cmp.w	sl, #0
 800b1a8:	d016      	beq.n	800b1d8 <_strtod_l+0x988>
 800b1aa:	f7ff fb37 	bl	800a81c <sulp>
 800b1ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b1b2:	ee37 7b00 	vadd.f64	d7, d7, d0
 800b1b6:	ec59 8b17 	vmov	r8, r9, d7
 800b1ba:	e7de      	b.n	800b17a <_strtod_l+0x92a>
 800b1bc:	4013      	ands	r3, r2
 800b1be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b1c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b1ca:	f04f 38ff 	mov.w	r8, #4294967295
 800b1ce:	e7d4      	b.n	800b17a <_strtod_l+0x92a>
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d2:	ea13 0f08 	tst.w	r3, r8
 800b1d6:	e7e1      	b.n	800b19c <_strtod_l+0x94c>
 800b1d8:	f7ff fb20 	bl	800a81c <sulp>
 800b1dc:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b1e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800b1e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b1f4:	d1c1      	bne.n	800b17a <_strtod_l+0x92a>
 800b1f6:	e5ec      	b.n	800add2 <_strtod_l+0x582>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f001 ffac 	bl	800d158 <__ratio>
 800b200:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b204:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b20c:	d867      	bhi.n	800b2de <_strtod_l+0xa8e>
 800b20e:	f1ba 0f00 	cmp.w	sl, #0
 800b212:	d044      	beq.n	800b29e <_strtod_l+0xa4e>
 800b214:	4b75      	ldr	r3, [pc, #468]	; (800b3ec <_strtod_l+0xb9c>)
 800b216:	2200      	movs	r2, #0
 800b218:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b21c:	4971      	ldr	r1, [pc, #452]	; (800b3e4 <_strtod_l+0xb94>)
 800b21e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b3f8 <_strtod_l+0xba8>
 800b222:	ea0b 0001 	and.w	r0, fp, r1
 800b226:	4560      	cmp	r0, ip
 800b228:	900d      	str	r0, [sp, #52]	; 0x34
 800b22a:	f040 808b 	bne.w	800b344 <_strtod_l+0xaf4>
 800b22e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b232:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b236:	ec49 8b10 	vmov	d0, r8, r9
 800b23a:	ec43 2b1c 	vmov	d12, r2, r3
 800b23e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b242:	f001 feb1 	bl	800cfa8 <__ulp>
 800b246:	ec49 8b1d 	vmov	d13, r8, r9
 800b24a:	eeac db00 	vfma.f64	d13, d12, d0
 800b24e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800b252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b254:	4963      	ldr	r1, [pc, #396]	; (800b3e4 <_strtod_l+0xb94>)
 800b256:	4a66      	ldr	r2, [pc, #408]	; (800b3f0 <_strtod_l+0xba0>)
 800b258:	4019      	ands	r1, r3
 800b25a:	4291      	cmp	r1, r2
 800b25c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800b260:	d947      	bls.n	800b2f2 <_strtod_l+0xaa2>
 800b262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b264:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b268:	4293      	cmp	r3, r2
 800b26a:	d103      	bne.n	800b274 <_strtod_l+0xa24>
 800b26c:	9b08      	ldr	r3, [sp, #32]
 800b26e:	3301      	adds	r3, #1
 800b270:	f43f ad3a 	beq.w	800ace8 <_strtod_l+0x498>
 800b274:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800b3e8 <_strtod_l+0xb98>
 800b278:	f04f 38ff 	mov.w	r8, #4294967295
 800b27c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b27e:	4620      	mov	r0, r4
 800b280:	f001 fb66 	bl	800c950 <_Bfree>
 800b284:	4639      	mov	r1, r7
 800b286:	4620      	mov	r0, r4
 800b288:	f001 fb62 	bl	800c950 <_Bfree>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4620      	mov	r0, r4
 800b290:	f001 fb5e 	bl	800c950 <_Bfree>
 800b294:	4629      	mov	r1, r5
 800b296:	4620      	mov	r0, r4
 800b298:	f001 fb5a 	bl	800c950 <_Bfree>
 800b29c:	e60f      	b.n	800aebe <_strtod_l+0x66e>
 800b29e:	f1b8 0f00 	cmp.w	r8, #0
 800b2a2:	d112      	bne.n	800b2ca <_strtod_l+0xa7a>
 800b2a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2a8:	b9b3      	cbnz	r3, 800b2d8 <_strtod_l+0xa88>
 800b2aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b2ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b2ba:	d401      	bmi.n	800b2c0 <_strtod_l+0xa70>
 800b2bc:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b2c0:	eeb1 7b48 	vneg.f64	d7, d8
 800b2c4:	ec53 2b17 	vmov	r2, r3, d7
 800b2c8:	e7a8      	b.n	800b21c <_strtod_l+0x9cc>
 800b2ca:	f1b8 0f01 	cmp.w	r8, #1
 800b2ce:	d103      	bne.n	800b2d8 <_strtod_l+0xa88>
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	f43f ad7d 	beq.w	800add2 <_strtod_l+0x582>
 800b2d8:	4b46      	ldr	r3, [pc, #280]	; (800b3f4 <_strtod_l+0xba4>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	e79c      	b.n	800b218 <_strtod_l+0x9c8>
 800b2de:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b2e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b2e6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ea:	d0e9      	beq.n	800b2c0 <_strtod_l+0xa70>
 800b2ec:	ec53 2b18 	vmov	r2, r3, d8
 800b2f0:	e794      	b.n	800b21c <_strtod_l+0x9cc>
 800b2f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1bf      	bne.n	800b27c <_strtod_l+0xa2c>
 800b2fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b302:	0d1b      	lsrs	r3, r3, #20
 800b304:	051b      	lsls	r3, r3, #20
 800b306:	429a      	cmp	r2, r3
 800b308:	d1b8      	bne.n	800b27c <_strtod_l+0xa2c>
 800b30a:	ec51 0b18 	vmov	r0, r1, d8
 800b30e:	f7f5 f9d3 	bl	80006b8 <__aeabi_d2lz>
 800b312:	f7f5 f98b 	bl	800062c <__aeabi_l2d>
 800b316:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b31a:	ec41 0b17 	vmov	d7, r0, r1
 800b31e:	ea43 0308 	orr.w	r3, r3, r8
 800b322:	ea53 030a 	orrs.w	r3, r3, sl
 800b326:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b32a:	d03e      	beq.n	800b3aa <_strtod_l+0xb5a>
 800b32c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	f53f ace2 	bmi.w	800acfc <_strtod_l+0x4ac>
 800b338:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	dd9c      	ble.n	800b27c <_strtod_l+0xa2c>
 800b342:	e4db      	b.n	800acfc <_strtod_l+0x4ac>
 800b344:	9904      	ldr	r1, [sp, #16]
 800b346:	b301      	cbz	r1, 800b38a <_strtod_l+0xb3a>
 800b348:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b34a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b34e:	d81c      	bhi.n	800b38a <_strtod_l+0xb3a>
 800b350:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b3d8 <_strtod_l+0xb88>
 800b354:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35c:	d811      	bhi.n	800b382 <_strtod_l+0xb32>
 800b35e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b362:	ee18 3a10 	vmov	r3, s16
 800b366:	2b01      	cmp	r3, #1
 800b368:	bf38      	it	cc
 800b36a:	2301      	movcc	r3, #1
 800b36c:	ee08 3a10 	vmov	s16, r3
 800b370:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b374:	f1ba 0f00 	cmp.w	sl, #0
 800b378:	d114      	bne.n	800b3a4 <_strtod_l+0xb54>
 800b37a:	eeb1 7b48 	vneg.f64	d7, d8
 800b37e:	ec53 2b17 	vmov	r2, r3, d7
 800b382:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b384:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800b388:	1a0b      	subs	r3, r1, r0
 800b38a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b38e:	ec43 2b1c 	vmov	d12, r2, r3
 800b392:	f001 fe09 	bl	800cfa8 <__ulp>
 800b396:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b39a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800b39e:	ec59 8b17 	vmov	r8, r9, d7
 800b3a2:	e7a8      	b.n	800b2f6 <_strtod_l+0xaa6>
 800b3a4:	ec53 2b18 	vmov	r2, r3, d8
 800b3a8:	e7eb      	b.n	800b382 <_strtod_l+0xb32>
 800b3aa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b2:	f57f af63 	bpl.w	800b27c <_strtod_l+0xa2c>
 800b3b6:	e4a1      	b.n	800acfc <_strtod_l+0x4ac>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	f7ff ba8d 	b.w	800a8e0 <_strtod_l+0x90>
 800b3c6:	2a65      	cmp	r2, #101	; 0x65
 800b3c8:	f43f ab89 	beq.w	800aade <_strtod_l+0x28e>
 800b3cc:	2a45      	cmp	r2, #69	; 0x45
 800b3ce:	f43f ab86 	beq.w	800aade <_strtod_l+0x28e>
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	f7ff bbbe 	b.w	800ab54 <_strtod_l+0x304>
 800b3d8:	ffc00000 	.word	0xffc00000
 800b3dc:	41dfffff 	.word	0x41dfffff
 800b3e0:	000fffff 	.word	0x000fffff
 800b3e4:	7ff00000 	.word	0x7ff00000
 800b3e8:	7fefffff 	.word	0x7fefffff
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	7c9fffff 	.word	0x7c9fffff
 800b3f4:	bff00000 	.word	0xbff00000
 800b3f8:	7fe00000 	.word	0x7fe00000

0800b3fc <_strtod_r>:
 800b3fc:	4b01      	ldr	r3, [pc, #4]	; (800b404 <_strtod_r+0x8>)
 800b3fe:	f7ff ba27 	b.w	800a850 <_strtod_l>
 800b402:	bf00      	nop
 800b404:	20000190 	.word	0x20000190

0800b408 <_strtol_l.isra.0>:
 800b408:	2b01      	cmp	r3, #1
 800b40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40e:	d001      	beq.n	800b414 <_strtol_l.isra.0+0xc>
 800b410:	2b24      	cmp	r3, #36	; 0x24
 800b412:	d906      	bls.n	800b422 <_strtol_l.isra.0+0x1a>
 800b414:	f7fe fac4 	bl	80099a0 <__errno>
 800b418:	2316      	movs	r3, #22
 800b41a:	6003      	str	r3, [r0, #0]
 800b41c:	2000      	movs	r0, #0
 800b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b422:	4f3a      	ldr	r7, [pc, #232]	; (800b50c <_strtol_l.isra.0+0x104>)
 800b424:	468e      	mov	lr, r1
 800b426:	4676      	mov	r6, lr
 800b428:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b42c:	5de5      	ldrb	r5, [r4, r7]
 800b42e:	f015 0508 	ands.w	r5, r5, #8
 800b432:	d1f8      	bne.n	800b426 <_strtol_l.isra.0+0x1e>
 800b434:	2c2d      	cmp	r4, #45	; 0x2d
 800b436:	d134      	bne.n	800b4a2 <_strtol_l.isra.0+0x9a>
 800b438:	f89e 4000 	ldrb.w	r4, [lr]
 800b43c:	f04f 0801 	mov.w	r8, #1
 800b440:	f106 0e02 	add.w	lr, r6, #2
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05c      	beq.n	800b502 <_strtol_l.isra.0+0xfa>
 800b448:	2b10      	cmp	r3, #16
 800b44a:	d10c      	bne.n	800b466 <_strtol_l.isra.0+0x5e>
 800b44c:	2c30      	cmp	r4, #48	; 0x30
 800b44e:	d10a      	bne.n	800b466 <_strtol_l.isra.0+0x5e>
 800b450:	f89e 4000 	ldrb.w	r4, [lr]
 800b454:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b458:	2c58      	cmp	r4, #88	; 0x58
 800b45a:	d14d      	bne.n	800b4f8 <_strtol_l.isra.0+0xf0>
 800b45c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b460:	2310      	movs	r3, #16
 800b462:	f10e 0e02 	add.w	lr, lr, #2
 800b466:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b46a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b46e:	2600      	movs	r6, #0
 800b470:	fbbc f9f3 	udiv	r9, ip, r3
 800b474:	4635      	mov	r5, r6
 800b476:	fb03 ca19 	mls	sl, r3, r9, ip
 800b47a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b47e:	2f09      	cmp	r7, #9
 800b480:	d818      	bhi.n	800b4b4 <_strtol_l.isra.0+0xac>
 800b482:	463c      	mov	r4, r7
 800b484:	42a3      	cmp	r3, r4
 800b486:	dd24      	ble.n	800b4d2 <_strtol_l.isra.0+0xca>
 800b488:	2e00      	cmp	r6, #0
 800b48a:	db1f      	blt.n	800b4cc <_strtol_l.isra.0+0xc4>
 800b48c:	45a9      	cmp	r9, r5
 800b48e:	d31d      	bcc.n	800b4cc <_strtol_l.isra.0+0xc4>
 800b490:	d101      	bne.n	800b496 <_strtol_l.isra.0+0x8e>
 800b492:	45a2      	cmp	sl, r4
 800b494:	db1a      	blt.n	800b4cc <_strtol_l.isra.0+0xc4>
 800b496:	fb05 4503 	mla	r5, r5, r3, r4
 800b49a:	2601      	movs	r6, #1
 800b49c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b4a0:	e7eb      	b.n	800b47a <_strtol_l.isra.0+0x72>
 800b4a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4a4:	bf08      	it	eq
 800b4a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b4aa:	46a8      	mov	r8, r5
 800b4ac:	bf08      	it	eq
 800b4ae:	f106 0e02 	addeq.w	lr, r6, #2
 800b4b2:	e7c7      	b.n	800b444 <_strtol_l.isra.0+0x3c>
 800b4b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b4b8:	2f19      	cmp	r7, #25
 800b4ba:	d801      	bhi.n	800b4c0 <_strtol_l.isra.0+0xb8>
 800b4bc:	3c37      	subs	r4, #55	; 0x37
 800b4be:	e7e1      	b.n	800b484 <_strtol_l.isra.0+0x7c>
 800b4c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b4c4:	2f19      	cmp	r7, #25
 800b4c6:	d804      	bhi.n	800b4d2 <_strtol_l.isra.0+0xca>
 800b4c8:	3c57      	subs	r4, #87	; 0x57
 800b4ca:	e7db      	b.n	800b484 <_strtol_l.isra.0+0x7c>
 800b4cc:	f04f 36ff 	mov.w	r6, #4294967295
 800b4d0:	e7e4      	b.n	800b49c <_strtol_l.isra.0+0x94>
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	da05      	bge.n	800b4e2 <_strtol_l.isra.0+0xda>
 800b4d6:	2322      	movs	r3, #34	; 0x22
 800b4d8:	6003      	str	r3, [r0, #0]
 800b4da:	4665      	mov	r5, ip
 800b4dc:	b942      	cbnz	r2, 800b4f0 <_strtol_l.isra.0+0xe8>
 800b4de:	4628      	mov	r0, r5
 800b4e0:	e79d      	b.n	800b41e <_strtol_l.isra.0+0x16>
 800b4e2:	f1b8 0f00 	cmp.w	r8, #0
 800b4e6:	d000      	beq.n	800b4ea <_strtol_l.isra.0+0xe2>
 800b4e8:	426d      	negs	r5, r5
 800b4ea:	2a00      	cmp	r2, #0
 800b4ec:	d0f7      	beq.n	800b4de <_strtol_l.isra.0+0xd6>
 800b4ee:	b10e      	cbz	r6, 800b4f4 <_strtol_l.isra.0+0xec>
 800b4f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b4f4:	6011      	str	r1, [r2, #0]
 800b4f6:	e7f2      	b.n	800b4de <_strtol_l.isra.0+0xd6>
 800b4f8:	2430      	movs	r4, #48	; 0x30
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1b3      	bne.n	800b466 <_strtol_l.isra.0+0x5e>
 800b4fe:	2308      	movs	r3, #8
 800b500:	e7b1      	b.n	800b466 <_strtol_l.isra.0+0x5e>
 800b502:	2c30      	cmp	r4, #48	; 0x30
 800b504:	d0a4      	beq.n	800b450 <_strtol_l.isra.0+0x48>
 800b506:	230a      	movs	r3, #10
 800b508:	e7ad      	b.n	800b466 <_strtol_l.isra.0+0x5e>
 800b50a:	bf00      	nop
 800b50c:	0800f781 	.word	0x0800f781

0800b510 <_strtol_r>:
 800b510:	f7ff bf7a 	b.w	800b408 <_strtol_l.isra.0>

0800b514 <_write_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d07      	ldr	r5, [pc, #28]	; (800b534 <_write_r+0x20>)
 800b518:	4604      	mov	r4, r0
 800b51a:	4608      	mov	r0, r1
 800b51c:	4611      	mov	r1, r2
 800b51e:	2200      	movs	r2, #0
 800b520:	602a      	str	r2, [r5, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	f7f7 fe9d 	bl	8003262 <_write>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_write_r+0x1e>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_write_r+0x1e>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	200188a8 	.word	0x200188a8

0800b538 <_close_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_close_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7f7 fea9 	bl	800329a <_close>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_close_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_close_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	200188a8 	.word	0x200188a8

0800b558 <quorem>:
 800b558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	6903      	ldr	r3, [r0, #16]
 800b55e:	690c      	ldr	r4, [r1, #16]
 800b560:	42a3      	cmp	r3, r4
 800b562:	4607      	mov	r7, r0
 800b564:	f2c0 8081 	blt.w	800b66a <quorem+0x112>
 800b568:	3c01      	subs	r4, #1
 800b56a:	f101 0814 	add.w	r8, r1, #20
 800b56e:	f100 0514 	add.w	r5, r0, #20
 800b572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b57c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b580:	3301      	adds	r3, #1
 800b582:	429a      	cmp	r2, r3
 800b584:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b588:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b58c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b590:	d331      	bcc.n	800b5f6 <quorem+0x9e>
 800b592:	f04f 0e00 	mov.w	lr, #0
 800b596:	4640      	mov	r0, r8
 800b598:	46ac      	mov	ip, r5
 800b59a:	46f2      	mov	sl, lr
 800b59c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5a0:	b293      	uxth	r3, r2
 800b5a2:	fb06 e303 	mla	r3, r6, r3, lr
 800b5a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	ebaa 0303 	sub.w	r3, sl, r3
 800b5b0:	0c12      	lsrs	r2, r2, #16
 800b5b2:	f8dc a000 	ldr.w	sl, [ip]
 800b5b6:	fb06 e202 	mla	r2, r6, r2, lr
 800b5ba:	fa13 f38a 	uxtah	r3, r3, sl
 800b5be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5c2:	fa1f fa82 	uxth.w	sl, r2
 800b5c6:	f8dc 2000 	ldr.w	r2, [ip]
 800b5ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b5ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5d8:	4581      	cmp	r9, r0
 800b5da:	f84c 3b04 	str.w	r3, [ip], #4
 800b5de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5e2:	d2db      	bcs.n	800b59c <quorem+0x44>
 800b5e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5e8:	b92b      	cbnz	r3, 800b5f6 <quorem+0x9e>
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	3b04      	subs	r3, #4
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	d32e      	bcc.n	800b652 <quorem+0xfa>
 800b5f4:	613c      	str	r4, [r7, #16]
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f001 fc32 	bl	800ce60 <__mcmp>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	db24      	blt.n	800b64a <quorem+0xf2>
 800b600:	3601      	adds	r6, #1
 800b602:	4628      	mov	r0, r5
 800b604:	f04f 0c00 	mov.w	ip, #0
 800b608:	f858 2b04 	ldr.w	r2, [r8], #4
 800b60c:	f8d0 e000 	ldr.w	lr, [r0]
 800b610:	b293      	uxth	r3, r2
 800b612:	ebac 0303 	sub.w	r3, ip, r3
 800b616:	0c12      	lsrs	r2, r2, #16
 800b618:	fa13 f38e 	uxtah	r3, r3, lr
 800b61c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b624:	b29b      	uxth	r3, r3
 800b626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b62a:	45c1      	cmp	r9, r8
 800b62c:	f840 3b04 	str.w	r3, [r0], #4
 800b630:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b634:	d2e8      	bcs.n	800b608 <quorem+0xb0>
 800b636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b63a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b63e:	b922      	cbnz	r2, 800b64a <quorem+0xf2>
 800b640:	3b04      	subs	r3, #4
 800b642:	429d      	cmp	r5, r3
 800b644:	461a      	mov	r2, r3
 800b646:	d30a      	bcc.n	800b65e <quorem+0x106>
 800b648:	613c      	str	r4, [r7, #16]
 800b64a:	4630      	mov	r0, r6
 800b64c:	b003      	add	sp, #12
 800b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	3b04      	subs	r3, #4
 800b656:	2a00      	cmp	r2, #0
 800b658:	d1cc      	bne.n	800b5f4 <quorem+0x9c>
 800b65a:	3c01      	subs	r4, #1
 800b65c:	e7c7      	b.n	800b5ee <quorem+0x96>
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	3b04      	subs	r3, #4
 800b662:	2a00      	cmp	r2, #0
 800b664:	d1f0      	bne.n	800b648 <quorem+0xf0>
 800b666:	3c01      	subs	r4, #1
 800b668:	e7eb      	b.n	800b642 <quorem+0xea>
 800b66a:	2000      	movs	r0, #0
 800b66c:	e7ee      	b.n	800b64c <quorem+0xf4>
	...

0800b670 <_dtoa_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	ec59 8b10 	vmov	r8, r9, d0
 800b678:	b095      	sub	sp, #84	; 0x54
 800b67a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b67c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b67e:	9107      	str	r1, [sp, #28]
 800b680:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b684:	4606      	mov	r6, r0
 800b686:	9209      	str	r2, [sp, #36]	; 0x24
 800b688:	9310      	str	r3, [sp, #64]	; 0x40
 800b68a:	b975      	cbnz	r5, 800b6aa <_dtoa_r+0x3a>
 800b68c:	2010      	movs	r0, #16
 800b68e:	f001 f8f7 	bl	800c880 <malloc>
 800b692:	4602      	mov	r2, r0
 800b694:	6270      	str	r0, [r6, #36]	; 0x24
 800b696:	b920      	cbnz	r0, 800b6a2 <_dtoa_r+0x32>
 800b698:	4bab      	ldr	r3, [pc, #684]	; (800b948 <_dtoa_r+0x2d8>)
 800b69a:	21ea      	movs	r1, #234	; 0xea
 800b69c:	48ab      	ldr	r0, [pc, #684]	; (800b94c <_dtoa_r+0x2dc>)
 800b69e:	f002 fc33 	bl	800df08 <__assert_func>
 800b6a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6a6:	6005      	str	r5, [r0, #0]
 800b6a8:	60c5      	str	r5, [r0, #12]
 800b6aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b6ac:	6819      	ldr	r1, [r3, #0]
 800b6ae:	b151      	cbz	r1, 800b6c6 <_dtoa_r+0x56>
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	604a      	str	r2, [r1, #4]
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4093      	lsls	r3, r2
 800b6b8:	608b      	str	r3, [r1, #8]
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f001 f948 	bl	800c950 <_Bfree>
 800b6c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	f1b9 0300 	subs.w	r3, r9, #0
 800b6ca:	bfbb      	ittet	lt
 800b6cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6d0:	9303      	strlt	r3, [sp, #12]
 800b6d2:	2300      	movge	r3, #0
 800b6d4:	2201      	movlt	r2, #1
 800b6d6:	bfac      	ite	ge
 800b6d8:	6023      	strge	r3, [r4, #0]
 800b6da:	6022      	strlt	r2, [r4, #0]
 800b6dc:	4b9c      	ldr	r3, [pc, #624]	; (800b950 <_dtoa_r+0x2e0>)
 800b6de:	9c03      	ldr	r4, [sp, #12]
 800b6e0:	43a3      	bics	r3, r4
 800b6e2:	d11a      	bne.n	800b71a <_dtoa_r+0xaa>
 800b6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b6f0:	ea53 0308 	orrs.w	r3, r3, r8
 800b6f4:	f000 8512 	beq.w	800c11c <_dtoa_r+0xaac>
 800b6f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6fa:	b953      	cbnz	r3, 800b712 <_dtoa_r+0xa2>
 800b6fc:	4b95      	ldr	r3, [pc, #596]	; (800b954 <_dtoa_r+0x2e4>)
 800b6fe:	e01f      	b.n	800b740 <_dtoa_r+0xd0>
 800b700:	4b95      	ldr	r3, [pc, #596]	; (800b958 <_dtoa_r+0x2e8>)
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	3308      	adds	r3, #8
 800b706:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	9800      	ldr	r0, [sp, #0]
 800b70c:	b015      	add	sp, #84	; 0x54
 800b70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b712:	4b90      	ldr	r3, [pc, #576]	; (800b954 <_dtoa_r+0x2e4>)
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	3303      	adds	r3, #3
 800b718:	e7f5      	b.n	800b706 <_dtoa_r+0x96>
 800b71a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b71e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b726:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b72a:	d10b      	bne.n	800b744 <_dtoa_r+0xd4>
 800b72c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b72e:	2301      	movs	r3, #1
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 84ee 	beq.w	800c116 <_dtoa_r+0xaa6>
 800b73a:	4888      	ldr	r0, [pc, #544]	; (800b95c <_dtoa_r+0x2ec>)
 800b73c:	6018      	str	r0, [r3, #0]
 800b73e:	1e43      	subs	r3, r0, #1
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	e7e2      	b.n	800b70a <_dtoa_r+0x9a>
 800b744:	a913      	add	r1, sp, #76	; 0x4c
 800b746:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b74a:	aa12      	add	r2, sp, #72	; 0x48
 800b74c:	4630      	mov	r0, r6
 800b74e:	f001 fca7 	bl	800d0a0 <__d2b>
 800b752:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b756:	4605      	mov	r5, r0
 800b758:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d047      	beq.n	800b7ee <_dtoa_r+0x17e>
 800b75e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b760:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b768:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b76c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b770:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b774:	2400      	movs	r4, #0
 800b776:	ec43 2b16 	vmov	d6, r2, r3
 800b77a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b77e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b930 <_dtoa_r+0x2c0>
 800b782:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b786:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800b938 <_dtoa_r+0x2c8>
 800b78a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b78e:	eeb0 7b46 	vmov.f64	d7, d6
 800b792:	ee06 1a90 	vmov	s13, r1
 800b796:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b79a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b940 <_dtoa_r+0x2d0>
 800b79e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b7a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b7a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	ee16 ba90 	vmov	fp, s13
 800b7b2:	9411      	str	r4, [sp, #68]	; 0x44
 800b7b4:	d508      	bpl.n	800b7c8 <_dtoa_r+0x158>
 800b7b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b7ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	bf18      	it	ne
 800b7c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b7c8:	f1bb 0f16 	cmp.w	fp, #22
 800b7cc:	d832      	bhi.n	800b834 <_dtoa_r+0x1c4>
 800b7ce:	4b64      	ldr	r3, [pc, #400]	; (800b960 <_dtoa_r+0x2f0>)
 800b7d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b7d4:	ed93 7b00 	vldr	d7, [r3]
 800b7d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b7dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e4:	d501      	bpl.n	800b7ea <_dtoa_r+0x17a>
 800b7e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e023      	b.n	800b836 <_dtoa_r+0x1c6>
 800b7ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b7f0:	4401      	add	r1, r0
 800b7f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	bfc3      	ittte	gt
 800b7fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7fe:	fa04 f303 	lslgt.w	r3, r4, r3
 800b802:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b806:	f1c3 0320 	rsble	r3, r3, #32
 800b80a:	bfc6      	itte	gt
 800b80c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b810:	ea43 0308 	orrgt.w	r3, r3, r8
 800b814:	fa08 f303 	lslle.w	r3, r8, r3
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b820:	3901      	subs	r1, #1
 800b822:	ed8d 7b00 	vstr	d7, [sp]
 800b826:	9c01      	ldr	r4, [sp, #4]
 800b828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b82c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b830:	2401      	movs	r4, #1
 800b832:	e7a0      	b.n	800b776 <_dtoa_r+0x106>
 800b834:	2301      	movs	r3, #1
 800b836:	930f      	str	r3, [sp, #60]	; 0x3c
 800b838:	1a43      	subs	r3, r0, r1
 800b83a:	1e5a      	subs	r2, r3, #1
 800b83c:	bf45      	ittet	mi
 800b83e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b842:	9305      	strmi	r3, [sp, #20]
 800b844:	2300      	movpl	r3, #0
 800b846:	2300      	movmi	r3, #0
 800b848:	9206      	str	r2, [sp, #24]
 800b84a:	bf54      	ite	pl
 800b84c:	9305      	strpl	r3, [sp, #20]
 800b84e:	9306      	strmi	r3, [sp, #24]
 800b850:	f1bb 0f00 	cmp.w	fp, #0
 800b854:	db18      	blt.n	800b888 <_dtoa_r+0x218>
 800b856:	9b06      	ldr	r3, [sp, #24]
 800b858:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b85c:	445b      	add	r3, fp
 800b85e:	9306      	str	r3, [sp, #24]
 800b860:	2300      	movs	r3, #0
 800b862:	9a07      	ldr	r2, [sp, #28]
 800b864:	2a09      	cmp	r2, #9
 800b866:	d849      	bhi.n	800b8fc <_dtoa_r+0x28c>
 800b868:	2a05      	cmp	r2, #5
 800b86a:	bfc4      	itt	gt
 800b86c:	3a04      	subgt	r2, #4
 800b86e:	9207      	strgt	r2, [sp, #28]
 800b870:	9a07      	ldr	r2, [sp, #28]
 800b872:	f1a2 0202 	sub.w	r2, r2, #2
 800b876:	bfcc      	ite	gt
 800b878:	2400      	movgt	r4, #0
 800b87a:	2401      	movle	r4, #1
 800b87c:	2a03      	cmp	r2, #3
 800b87e:	d848      	bhi.n	800b912 <_dtoa_r+0x2a2>
 800b880:	e8df f002 	tbb	[pc, r2]
 800b884:	3a2c2e0b 	.word	0x3a2c2e0b
 800b888:	9b05      	ldr	r3, [sp, #20]
 800b88a:	2200      	movs	r2, #0
 800b88c:	eba3 030b 	sub.w	r3, r3, fp
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	920e      	str	r2, [sp, #56]	; 0x38
 800b894:	f1cb 0300 	rsb	r3, fp, #0
 800b898:	e7e3      	b.n	800b862 <_dtoa_r+0x1f2>
 800b89a:	2200      	movs	r2, #0
 800b89c:	9208      	str	r2, [sp, #32]
 800b89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	dc39      	bgt.n	800b918 <_dtoa_r+0x2a8>
 800b8a4:	f04f 0a01 	mov.w	sl, #1
 800b8a8:	46d1      	mov	r9, sl
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	6079      	str	r1, [r7, #4]
 800b8b6:	2004      	movs	r0, #4
 800b8b8:	f100 0c14 	add.w	ip, r0, #20
 800b8bc:	4594      	cmp	ip, r2
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	d92f      	bls.n	800b922 <_dtoa_r+0x2b2>
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b8c6:	f001 f803 	bl	800c8d0 <_Balloc>
 800b8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8cc:	9000      	str	r0, [sp, #0]
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d149      	bne.n	800b968 <_dtoa_r+0x2f8>
 800b8d4:	4b23      	ldr	r3, [pc, #140]	; (800b964 <_dtoa_r+0x2f4>)
 800b8d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8da:	e6df      	b.n	800b69c <_dtoa_r+0x2c>
 800b8dc:	2201      	movs	r2, #1
 800b8de:	e7dd      	b.n	800b89c <_dtoa_r+0x22c>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	9208      	str	r2, [sp, #32]
 800b8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e6:	eb0b 0a02 	add.w	sl, fp, r2
 800b8ea:	f10a 0901 	add.w	r9, sl, #1
 800b8ee:	464a      	mov	r2, r9
 800b8f0:	2a01      	cmp	r2, #1
 800b8f2:	bfb8      	it	lt
 800b8f4:	2201      	movlt	r2, #1
 800b8f6:	e7db      	b.n	800b8b0 <_dtoa_r+0x240>
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	e7f2      	b.n	800b8e2 <_dtoa_r+0x272>
 800b8fc:	2401      	movs	r4, #1
 800b8fe:	2200      	movs	r2, #0
 800b900:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b904:	f04f 3aff 	mov.w	sl, #4294967295
 800b908:	2100      	movs	r1, #0
 800b90a:	46d1      	mov	r9, sl
 800b90c:	2212      	movs	r2, #18
 800b90e:	9109      	str	r1, [sp, #36]	; 0x24
 800b910:	e7ce      	b.n	800b8b0 <_dtoa_r+0x240>
 800b912:	2201      	movs	r2, #1
 800b914:	9208      	str	r2, [sp, #32]
 800b916:	e7f5      	b.n	800b904 <_dtoa_r+0x294>
 800b918:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b91c:	46d1      	mov	r9, sl
 800b91e:	4652      	mov	r2, sl
 800b920:	e7c6      	b.n	800b8b0 <_dtoa_r+0x240>
 800b922:	3101      	adds	r1, #1
 800b924:	6079      	str	r1, [r7, #4]
 800b926:	0040      	lsls	r0, r0, #1
 800b928:	e7c6      	b.n	800b8b8 <_dtoa_r+0x248>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	636f4361 	.word	0x636f4361
 800b934:	3fd287a7 	.word	0x3fd287a7
 800b938:	8b60c8b3 	.word	0x8b60c8b3
 800b93c:	3fc68a28 	.word	0x3fc68a28
 800b940:	509f79fb 	.word	0x509f79fb
 800b944:	3fd34413 	.word	0x3fd34413
 800b948:	0800f88e 	.word	0x0800f88e
 800b94c:	0800f8a5 	.word	0x0800f8a5
 800b950:	7ff00000 	.word	0x7ff00000
 800b954:	0800f88a 	.word	0x0800f88a
 800b958:	0800f881 	.word	0x0800f881
 800b95c:	0800fb0a 	.word	0x0800fb0a
 800b960:	0800fa20 	.word	0x0800fa20
 800b964:	0800f904 	.word	0x0800f904
 800b968:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b96a:	9900      	ldr	r1, [sp, #0]
 800b96c:	6011      	str	r1, [r2, #0]
 800b96e:	f1b9 0f0e 	cmp.w	r9, #14
 800b972:	d872      	bhi.n	800ba5a <_dtoa_r+0x3ea>
 800b974:	2c00      	cmp	r4, #0
 800b976:	d070      	beq.n	800ba5a <_dtoa_r+0x3ea>
 800b978:	f1bb 0f00 	cmp.w	fp, #0
 800b97c:	f340 80a6 	ble.w	800bacc <_dtoa_r+0x45c>
 800b980:	49ca      	ldr	r1, [pc, #808]	; (800bcac <_dtoa_r+0x63c>)
 800b982:	f00b 020f 	and.w	r2, fp, #15
 800b986:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b98a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b98e:	ed92 7b00 	vldr	d7, [r2]
 800b992:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b996:	f000 808d 	beq.w	800bab4 <_dtoa_r+0x444>
 800b99a:	4ac5      	ldr	r2, [pc, #788]	; (800bcb0 <_dtoa_r+0x640>)
 800b99c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800b9a0:	ed92 6b08 	vldr	d6, [r2, #32]
 800b9a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b9a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9ac:	f001 010f 	and.w	r1, r1, #15
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	48bf      	ldr	r0, [pc, #764]	; (800bcb0 <_dtoa_r+0x640>)
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	d17f      	bne.n	800bab8 <_dtoa_r+0x448>
 800b9b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b9bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b9c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9c6:	2900      	cmp	r1, #0
 800b9c8:	f000 80b2 	beq.w	800bb30 <_dtoa_r+0x4c0>
 800b9cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9dc:	f140 80a8 	bpl.w	800bb30 <_dtoa_r+0x4c0>
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	f000 80a4 	beq.w	800bb30 <_dtoa_r+0x4c0>
 800b9e8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ec:	dd31      	ble.n	800ba52 <_dtoa_r+0x3e2>
 800b9ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b9f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b9fe:	3201      	adds	r2, #1
 800ba00:	4650      	mov	r0, sl
 800ba02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba06:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ba0a:	ee07 2a90 	vmov	s15, r2
 800ba0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba16:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ba1a:	9c03      	ldr	r4, [sp, #12]
 800ba1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ba20:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f040 8086 	bne.w	800bb36 <_dtoa_r+0x4c6>
 800ba2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ba32:	ec42 1b17 	vmov	d7, r1, r2
 800ba36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3e:	f300 8272 	bgt.w	800bf26 <_dtoa_r+0x8b6>
 800ba42:	eeb1 7b47 	vneg.f64	d7, d7
 800ba46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	f100 8267 	bmi.w	800bf20 <_dtoa_r+0x8b0>
 800ba52:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ba56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ba5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	f2c0 8129 	blt.w	800bcb4 <_dtoa_r+0x644>
 800ba62:	f1bb 0f0e 	cmp.w	fp, #14
 800ba66:	f300 8125 	bgt.w	800bcb4 <_dtoa_r+0x644>
 800ba6a:	4b90      	ldr	r3, [pc, #576]	; (800bcac <_dtoa_r+0x63c>)
 800ba6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba70:	ed93 6b00 	vldr	d6, [r3]
 800ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f280 80c3 	bge.w	800bc02 <_dtoa_r+0x592>
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	f300 80bf 	bgt.w	800bc02 <_dtoa_r+0x592>
 800ba84:	f040 824c 	bne.w	800bf20 <_dtoa_r+0x8b0>
 800ba88:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ba8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9c:	464c      	mov	r4, r9
 800ba9e:	464f      	mov	r7, r9
 800baa0:	f280 8222 	bge.w	800bee8 <_dtoa_r+0x878>
 800baa4:	f8dd 8000 	ldr.w	r8, [sp]
 800baa8:	2331      	movs	r3, #49	; 0x31
 800baaa:	f808 3b01 	strb.w	r3, [r8], #1
 800baae:	f10b 0b01 	add.w	fp, fp, #1
 800bab2:	e21e      	b.n	800bef2 <_dtoa_r+0x882>
 800bab4:	2202      	movs	r2, #2
 800bab6:	e77c      	b.n	800b9b2 <_dtoa_r+0x342>
 800bab8:	07cc      	lsls	r4, r1, #31
 800baba:	d504      	bpl.n	800bac6 <_dtoa_r+0x456>
 800babc:	ed90 6b00 	vldr	d6, [r0]
 800bac0:	3201      	adds	r2, #1
 800bac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bac6:	1049      	asrs	r1, r1, #1
 800bac8:	3008      	adds	r0, #8
 800baca:	e773      	b.n	800b9b4 <_dtoa_r+0x344>
 800bacc:	d02e      	beq.n	800bb2c <_dtoa_r+0x4bc>
 800bace:	f1cb 0100 	rsb	r1, fp, #0
 800bad2:	4a76      	ldr	r2, [pc, #472]	; (800bcac <_dtoa_r+0x63c>)
 800bad4:	f001 000f 	and.w	r0, r1, #15
 800bad8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800badc:	ed92 7b00 	vldr	d7, [r2]
 800bae0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bae4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bae8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800baec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800baf0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800baf4:	486e      	ldr	r0, [pc, #440]	; (800bcb0 <_dtoa_r+0x640>)
 800baf6:	1109      	asrs	r1, r1, #4
 800baf8:	2400      	movs	r4, #0
 800bafa:	2202      	movs	r2, #2
 800bafc:	b939      	cbnz	r1, 800bb0e <_dtoa_r+0x49e>
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	f43f af60 	beq.w	800b9c4 <_dtoa_r+0x354>
 800bb04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb0c:	e75a      	b.n	800b9c4 <_dtoa_r+0x354>
 800bb0e:	07cf      	lsls	r7, r1, #31
 800bb10:	d509      	bpl.n	800bb26 <_dtoa_r+0x4b6>
 800bb12:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bb16:	ed90 7b00 	vldr	d7, [r0]
 800bb1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bb1e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bb22:	3201      	adds	r2, #1
 800bb24:	2401      	movs	r4, #1
 800bb26:	1049      	asrs	r1, r1, #1
 800bb28:	3008      	adds	r0, #8
 800bb2a:	e7e7      	b.n	800bafc <_dtoa_r+0x48c>
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	e749      	b.n	800b9c4 <_dtoa_r+0x354>
 800bb30:	465f      	mov	r7, fp
 800bb32:	4648      	mov	r0, r9
 800bb34:	e765      	b.n	800ba02 <_dtoa_r+0x392>
 800bb36:	ec42 1b17 	vmov	d7, r1, r2
 800bb3a:	4a5c      	ldr	r2, [pc, #368]	; (800bcac <_dtoa_r+0x63c>)
 800bb3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bb40:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bb44:	9a00      	ldr	r2, [sp, #0]
 800bb46:	1814      	adds	r4, r2, r0
 800bb48:	9a08      	ldr	r2, [sp, #32]
 800bb4a:	b352      	cbz	r2, 800bba2 <_dtoa_r+0x532>
 800bb4c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bb50:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bb54:	f8dd 8000 	ldr.w	r8, [sp]
 800bb58:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bb5c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bb60:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bb68:	ee14 2a90 	vmov	r2, s9
 800bb6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb70:	3230      	adds	r2, #48	; 0x30
 800bb72:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	f808 2b01 	strb.w	r2, [r8], #1
 800bb82:	d439      	bmi.n	800bbf8 <_dtoa_r+0x588>
 800bb84:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bb88:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb90:	d472      	bmi.n	800bc78 <_dtoa_r+0x608>
 800bb92:	45a0      	cmp	r8, r4
 800bb94:	f43f af5d 	beq.w	800ba52 <_dtoa_r+0x3e2>
 800bb98:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bb9c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bba0:	e7e0      	b.n	800bb64 <_dtoa_r+0x4f4>
 800bba2:	f8dd 8000 	ldr.w	r8, [sp]
 800bba6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bbaa:	4621      	mov	r1, r4
 800bbac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bbb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbb4:	ee14 2a90 	vmov	r2, s9
 800bbb8:	3230      	adds	r2, #48	; 0x30
 800bbba:	f808 2b01 	strb.w	r2, [r8], #1
 800bbbe:	45a0      	cmp	r8, r4
 800bbc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbc8:	d118      	bne.n	800bbfc <_dtoa_r+0x58c>
 800bbca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bbce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bbd2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbda:	dc4d      	bgt.n	800bc78 <_dtoa_r+0x608>
 800bbdc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbe0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	f57f af33 	bpl.w	800ba52 <_dtoa_r+0x3e2>
 800bbec:	4688      	mov	r8, r1
 800bbee:	3901      	subs	r1, #1
 800bbf0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bbf4:	2b30      	cmp	r3, #48	; 0x30
 800bbf6:	d0f9      	beq.n	800bbec <_dtoa_r+0x57c>
 800bbf8:	46bb      	mov	fp, r7
 800bbfa:	e02a      	b.n	800bc52 <_dtoa_r+0x5e2>
 800bbfc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc00:	e7d6      	b.n	800bbb0 <_dtoa_r+0x540>
 800bc02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc06:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bc0a:	f8dd 8000 	ldr.w	r8, [sp]
 800bc0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc16:	ee15 3a10 	vmov	r3, s10
 800bc1a:	3330      	adds	r3, #48	; 0x30
 800bc1c:	f808 3b01 	strb.w	r3, [r8], #1
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	eba8 0303 	sub.w	r3, r8, r3
 800bc26:	4599      	cmp	r9, r3
 800bc28:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc2c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc30:	d133      	bne.n	800bc9a <_dtoa_r+0x62a>
 800bc32:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	dc1a      	bgt.n	800bc76 <_dtoa_r+0x606>
 800bc40:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc48:	d103      	bne.n	800bc52 <_dtoa_r+0x5e2>
 800bc4a:	ee15 3a10 	vmov	r3, s10
 800bc4e:	07d9      	lsls	r1, r3, #31
 800bc50:	d411      	bmi.n	800bc76 <_dtoa_r+0x606>
 800bc52:	4629      	mov	r1, r5
 800bc54:	4630      	mov	r0, r6
 800bc56:	f000 fe7b 	bl	800c950 <_Bfree>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc5e:	f888 3000 	strb.w	r3, [r8]
 800bc62:	f10b 0301 	add.w	r3, fp, #1
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f43f ad4d 	beq.w	800b70a <_dtoa_r+0x9a>
 800bc70:	f8c3 8000 	str.w	r8, [r3]
 800bc74:	e549      	b.n	800b70a <_dtoa_r+0x9a>
 800bc76:	465f      	mov	r7, fp
 800bc78:	4643      	mov	r3, r8
 800bc7a:	4698      	mov	r8, r3
 800bc7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc80:	2a39      	cmp	r2, #57	; 0x39
 800bc82:	d106      	bne.n	800bc92 <_dtoa_r+0x622>
 800bc84:	9a00      	ldr	r2, [sp, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d1f7      	bne.n	800bc7a <_dtoa_r+0x60a>
 800bc8a:	9900      	ldr	r1, [sp, #0]
 800bc8c:	2230      	movs	r2, #48	; 0x30
 800bc8e:	3701      	adds	r7, #1
 800bc90:	700a      	strb	r2, [r1, #0]
 800bc92:	781a      	ldrb	r2, [r3, #0]
 800bc94:	3201      	adds	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e7ae      	b.n	800bbf8 <_dtoa_r+0x588>
 800bc9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca6:	d1b2      	bne.n	800bc0e <_dtoa_r+0x59e>
 800bca8:	e7d3      	b.n	800bc52 <_dtoa_r+0x5e2>
 800bcaa:	bf00      	nop
 800bcac:	0800fa20 	.word	0x0800fa20
 800bcb0:	0800f9f8 	.word	0x0800f9f8
 800bcb4:	9908      	ldr	r1, [sp, #32]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	f000 80d1 	beq.w	800be5e <_dtoa_r+0x7ee>
 800bcbc:	9907      	ldr	r1, [sp, #28]
 800bcbe:	2901      	cmp	r1, #1
 800bcc0:	f300 80b4 	bgt.w	800be2c <_dtoa_r+0x7bc>
 800bcc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	f000 80ac 	beq.w	800be24 <_dtoa_r+0x7b4>
 800bccc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bcd0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bcd4:	461c      	mov	r4, r3
 800bcd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd8:	9b05      	ldr	r3, [sp, #20]
 800bcda:	4413      	add	r3, r2
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	9b06      	ldr	r3, [sp, #24]
 800bce0:	2101      	movs	r1, #1
 800bce2:	4413      	add	r3, r2
 800bce4:	4630      	mov	r0, r6
 800bce6:	9306      	str	r3, [sp, #24]
 800bce8:	f000 ff38 	bl	800cb5c <__i2b>
 800bcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcee:	4607      	mov	r7, r0
 800bcf0:	f1b8 0f00 	cmp.w	r8, #0
 800bcf4:	dd0d      	ble.n	800bd12 <_dtoa_r+0x6a2>
 800bcf6:	9a06      	ldr	r2, [sp, #24]
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	dd0a      	ble.n	800bd12 <_dtoa_r+0x6a2>
 800bcfc:	4542      	cmp	r2, r8
 800bcfe:	9905      	ldr	r1, [sp, #20]
 800bd00:	bfa8      	it	ge
 800bd02:	4642      	movge	r2, r8
 800bd04:	1a89      	subs	r1, r1, r2
 800bd06:	9105      	str	r1, [sp, #20]
 800bd08:	9906      	ldr	r1, [sp, #24]
 800bd0a:	eba8 0802 	sub.w	r8, r8, r2
 800bd0e:	1a8a      	subs	r2, r1, r2
 800bd10:	9206      	str	r2, [sp, #24]
 800bd12:	b303      	cbz	r3, 800bd56 <_dtoa_r+0x6e6>
 800bd14:	9a08      	ldr	r2, [sp, #32]
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	f000 80a6 	beq.w	800be68 <_dtoa_r+0x7f8>
 800bd1c:	2c00      	cmp	r4, #0
 800bd1e:	dd13      	ble.n	800bd48 <_dtoa_r+0x6d8>
 800bd20:	4639      	mov	r1, r7
 800bd22:	4622      	mov	r2, r4
 800bd24:	4630      	mov	r0, r6
 800bd26:	930c      	str	r3, [sp, #48]	; 0x30
 800bd28:	f000 ffd4 	bl	800ccd4 <__pow5mult>
 800bd2c:	462a      	mov	r2, r5
 800bd2e:	4601      	mov	r1, r0
 800bd30:	4607      	mov	r7, r0
 800bd32:	4630      	mov	r0, r6
 800bd34:	f000 ff28 	bl	800cb88 <__multiply>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	900a      	str	r0, [sp, #40]	; 0x28
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f000 fe07 	bl	800c950 <_Bfree>
 800bd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd46:	4615      	mov	r5, r2
 800bd48:	1b1a      	subs	r2, r3, r4
 800bd4a:	d004      	beq.n	800bd56 <_dtoa_r+0x6e6>
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 ffc0 	bl	800ccd4 <__pow5mult>
 800bd54:	4605      	mov	r5, r0
 800bd56:	2101      	movs	r1, #1
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 feff 	bl	800cb5c <__i2b>
 800bd5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	4604      	mov	r4, r0
 800bd64:	f340 8082 	ble.w	800be6c <_dtoa_r+0x7fc>
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f000 ffb1 	bl	800ccd4 <__pow5mult>
 800bd72:	9b07      	ldr	r3, [sp, #28]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	4604      	mov	r4, r0
 800bd78:	dd7b      	ble.n	800be72 <_dtoa_r+0x802>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd7e:	6922      	ldr	r2, [r4, #16]
 800bd80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd84:	6910      	ldr	r0, [r2, #16]
 800bd86:	f000 fe99 	bl	800cabc <__hi0bits>
 800bd8a:	f1c0 0020 	rsb	r0, r0, #32
 800bd8e:	9b06      	ldr	r3, [sp, #24]
 800bd90:	4418      	add	r0, r3
 800bd92:	f010 001f 	ands.w	r0, r0, #31
 800bd96:	f000 808d 	beq.w	800beb4 <_dtoa_r+0x844>
 800bd9a:	f1c0 0220 	rsb	r2, r0, #32
 800bd9e:	2a04      	cmp	r2, #4
 800bda0:	f340 8086 	ble.w	800beb0 <_dtoa_r+0x840>
 800bda4:	f1c0 001c 	rsb	r0, r0, #28
 800bda8:	9b05      	ldr	r3, [sp, #20]
 800bdaa:	4403      	add	r3, r0
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	9b06      	ldr	r3, [sp, #24]
 800bdb0:	4403      	add	r3, r0
 800bdb2:	4480      	add	r8, r0
 800bdb4:	9306      	str	r3, [sp, #24]
 800bdb6:	9b05      	ldr	r3, [sp, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd05      	ble.n	800bdc8 <_dtoa_r+0x758>
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 ffe1 	bl	800cd88 <__lshift>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dd05      	ble.n	800bdda <_dtoa_r+0x76a>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f000 ffd8 	bl	800cd88 <__lshift>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d06b      	beq.n	800beb8 <_dtoa_r+0x848>
 800bde0:	4621      	mov	r1, r4
 800bde2:	4628      	mov	r0, r5
 800bde4:	f001 f83c 	bl	800ce60 <__mcmp>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	da65      	bge.n	800beb8 <_dtoa_r+0x848>
 800bdec:	2300      	movs	r3, #0
 800bdee:	4629      	mov	r1, r5
 800bdf0:	220a      	movs	r2, #10
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 fdce 	bl	800c994 <__multadd>
 800bdf8:	9b08      	ldr	r3, [sp, #32]
 800bdfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdfe:	4605      	mov	r5, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8192 	beq.w	800c12a <_dtoa_r+0xaba>
 800be06:	4639      	mov	r1, r7
 800be08:	2300      	movs	r3, #0
 800be0a:	220a      	movs	r2, #10
 800be0c:	4630      	mov	r0, r6
 800be0e:	f000 fdc1 	bl	800c994 <__multadd>
 800be12:	f1ba 0f00 	cmp.w	sl, #0
 800be16:	4607      	mov	r7, r0
 800be18:	f300 808e 	bgt.w	800bf38 <_dtoa_r+0x8c8>
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	dc51      	bgt.n	800bec6 <_dtoa_r+0x856>
 800be22:	e089      	b.n	800bf38 <_dtoa_r+0x8c8>
 800be24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be2a:	e751      	b.n	800bcd0 <_dtoa_r+0x660>
 800be2c:	f109 34ff 	add.w	r4, r9, #4294967295
 800be30:	42a3      	cmp	r3, r4
 800be32:	bfbf      	itttt	lt
 800be34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800be36:	1ae3      	sublt	r3, r4, r3
 800be38:	18d2      	addlt	r2, r2, r3
 800be3a:	4613      	movlt	r3, r2
 800be3c:	bfb7      	itett	lt
 800be3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be40:	1b1c      	subge	r4, r3, r4
 800be42:	4623      	movlt	r3, r4
 800be44:	2400      	movlt	r4, #0
 800be46:	f1b9 0f00 	cmp.w	r9, #0
 800be4a:	bfb5      	itete	lt
 800be4c:	9a05      	ldrlt	r2, [sp, #20]
 800be4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800be52:	eba2 0809 	sublt.w	r8, r2, r9
 800be56:	464a      	movge	r2, r9
 800be58:	bfb8      	it	lt
 800be5a:	2200      	movlt	r2, #0
 800be5c:	e73b      	b.n	800bcd6 <_dtoa_r+0x666>
 800be5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800be62:	9f08      	ldr	r7, [sp, #32]
 800be64:	461c      	mov	r4, r3
 800be66:	e743      	b.n	800bcf0 <_dtoa_r+0x680>
 800be68:	461a      	mov	r2, r3
 800be6a:	e76f      	b.n	800bd4c <_dtoa_r+0x6dc>
 800be6c:	9b07      	ldr	r3, [sp, #28]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	dc18      	bgt.n	800bea4 <_dtoa_r+0x834>
 800be72:	9b02      	ldr	r3, [sp, #8]
 800be74:	b9b3      	cbnz	r3, 800bea4 <_dtoa_r+0x834>
 800be76:	9b03      	ldr	r3, [sp, #12]
 800be78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800be7c:	b9a2      	cbnz	r2, 800bea8 <_dtoa_r+0x838>
 800be7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800be82:	0d12      	lsrs	r2, r2, #20
 800be84:	0512      	lsls	r2, r2, #20
 800be86:	b18a      	cbz	r2, 800beac <_dtoa_r+0x83c>
 800be88:	9b05      	ldr	r3, [sp, #20]
 800be8a:	3301      	adds	r3, #1
 800be8c:	9305      	str	r3, [sp, #20]
 800be8e:	9b06      	ldr	r3, [sp, #24]
 800be90:	3301      	adds	r3, #1
 800be92:	9306      	str	r3, [sp, #24]
 800be94:	2301      	movs	r3, #1
 800be96:	930a      	str	r3, [sp, #40]	; 0x28
 800be98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f47f af6f 	bne.w	800bd7e <_dtoa_r+0x70e>
 800bea0:	2001      	movs	r0, #1
 800bea2:	e774      	b.n	800bd8e <_dtoa_r+0x71e>
 800bea4:	2300      	movs	r3, #0
 800bea6:	e7f6      	b.n	800be96 <_dtoa_r+0x826>
 800bea8:	9b02      	ldr	r3, [sp, #8]
 800beaa:	e7f4      	b.n	800be96 <_dtoa_r+0x826>
 800beac:	920a      	str	r2, [sp, #40]	; 0x28
 800beae:	e7f3      	b.n	800be98 <_dtoa_r+0x828>
 800beb0:	d081      	beq.n	800bdb6 <_dtoa_r+0x746>
 800beb2:	4610      	mov	r0, r2
 800beb4:	301c      	adds	r0, #28
 800beb6:	e777      	b.n	800bda8 <_dtoa_r+0x738>
 800beb8:	f1b9 0f00 	cmp.w	r9, #0
 800bebc:	dc37      	bgt.n	800bf2e <_dtoa_r+0x8be>
 800bebe:	9b07      	ldr	r3, [sp, #28]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	dd34      	ble.n	800bf2e <_dtoa_r+0x8be>
 800bec4:	46ca      	mov	sl, r9
 800bec6:	f1ba 0f00 	cmp.w	sl, #0
 800beca:	d10d      	bne.n	800bee8 <_dtoa_r+0x878>
 800becc:	4621      	mov	r1, r4
 800bece:	4653      	mov	r3, sl
 800bed0:	2205      	movs	r2, #5
 800bed2:	4630      	mov	r0, r6
 800bed4:	f000 fd5e 	bl	800c994 <__multadd>
 800bed8:	4601      	mov	r1, r0
 800beda:	4604      	mov	r4, r0
 800bedc:	4628      	mov	r0, r5
 800bede:	f000 ffbf 	bl	800ce60 <__mcmp>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	f73f adde 	bgt.w	800baa4 <_dtoa_r+0x434>
 800bee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beea:	f8dd 8000 	ldr.w	r8, [sp]
 800beee:	ea6f 0b03 	mvn.w	fp, r3
 800bef2:	f04f 0900 	mov.w	r9, #0
 800bef6:	4621      	mov	r1, r4
 800bef8:	4630      	mov	r0, r6
 800befa:	f000 fd29 	bl	800c950 <_Bfree>
 800befe:	2f00      	cmp	r7, #0
 800bf00:	f43f aea7 	beq.w	800bc52 <_dtoa_r+0x5e2>
 800bf04:	f1b9 0f00 	cmp.w	r9, #0
 800bf08:	d005      	beq.n	800bf16 <_dtoa_r+0x8a6>
 800bf0a:	45b9      	cmp	r9, r7
 800bf0c:	d003      	beq.n	800bf16 <_dtoa_r+0x8a6>
 800bf0e:	4649      	mov	r1, r9
 800bf10:	4630      	mov	r0, r6
 800bf12:	f000 fd1d 	bl	800c950 <_Bfree>
 800bf16:	4639      	mov	r1, r7
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 fd19 	bl	800c950 <_Bfree>
 800bf1e:	e698      	b.n	800bc52 <_dtoa_r+0x5e2>
 800bf20:	2400      	movs	r4, #0
 800bf22:	4627      	mov	r7, r4
 800bf24:	e7e0      	b.n	800bee8 <_dtoa_r+0x878>
 800bf26:	46bb      	mov	fp, r7
 800bf28:	4604      	mov	r4, r0
 800bf2a:	4607      	mov	r7, r0
 800bf2c:	e5ba      	b.n	800baa4 <_dtoa_r+0x434>
 800bf2e:	9b08      	ldr	r3, [sp, #32]
 800bf30:	46ca      	mov	sl, r9
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 8100 	beq.w	800c138 <_dtoa_r+0xac8>
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	dd05      	ble.n	800bf4a <_dtoa_r+0x8da>
 800bf3e:	4639      	mov	r1, r7
 800bf40:	4642      	mov	r2, r8
 800bf42:	4630      	mov	r0, r6
 800bf44:	f000 ff20 	bl	800cd88 <__lshift>
 800bf48:	4607      	mov	r7, r0
 800bf4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d05d      	beq.n	800c00c <_dtoa_r+0x99c>
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4630      	mov	r0, r6
 800bf54:	f000 fcbc 	bl	800c8d0 <_Balloc>
 800bf58:	4680      	mov	r8, r0
 800bf5a:	b928      	cbnz	r0, 800bf68 <_dtoa_r+0x8f8>
 800bf5c:	4b82      	ldr	r3, [pc, #520]	; (800c168 <_dtoa_r+0xaf8>)
 800bf5e:	4602      	mov	r2, r0
 800bf60:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf64:	f7ff bb9a 	b.w	800b69c <_dtoa_r+0x2c>
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	3202      	adds	r2, #2
 800bf6c:	0092      	lsls	r2, r2, #2
 800bf6e:	f107 010c 	add.w	r1, r7, #12
 800bf72:	300c      	adds	r0, #12
 800bf74:	f000 fc9e 	bl	800c8b4 <memcpy>
 800bf78:	2201      	movs	r2, #1
 800bf7a:	4641      	mov	r1, r8
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f000 ff03 	bl	800cd88 <__lshift>
 800bf82:	9b00      	ldr	r3, [sp, #0]
 800bf84:	3301      	adds	r3, #1
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	4453      	add	r3, sl
 800bf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	46b9      	mov	r9, r7
 800bf96:	9308      	str	r3, [sp, #32]
 800bf98:	4607      	mov	r7, r0
 800bf9a:	9b05      	ldr	r3, [sp, #20]
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	9302      	str	r3, [sp, #8]
 800bfa4:	f7ff fad8 	bl	800b558 <quorem>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	3330      	adds	r3, #48	; 0x30
 800bfac:	9006      	str	r0, [sp, #24]
 800bfae:	4649      	mov	r1, r9
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bfb4:	f000 ff54 	bl	800ce60 <__mcmp>
 800bfb8:	463a      	mov	r2, r7
 800bfba:	4682      	mov	sl, r0
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f000 ff6a 	bl	800ce98 <__mdiff>
 800bfc4:	68c2      	ldr	r2, [r0, #12]
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	4680      	mov	r8, r0
 800bfca:	bb0a      	cbnz	r2, 800c010 <_dtoa_r+0x9a0>
 800bfcc:	4601      	mov	r1, r0
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f000 ff46 	bl	800ce60 <__mcmp>
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	4641      	mov	r1, r8
 800bfda:	4630      	mov	r0, r6
 800bfdc:	920e      	str	r2, [sp, #56]	; 0x38
 800bfde:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe0:	f000 fcb6 	bl	800c950 <_Bfree>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfe8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bfec:	ea43 0102 	orr.w	r1, r3, r2
 800bff0:	9b08      	ldr	r3, [sp, #32]
 800bff2:	430b      	orrs	r3, r1
 800bff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff6:	d10d      	bne.n	800c014 <_dtoa_r+0x9a4>
 800bff8:	2b39      	cmp	r3, #57	; 0x39
 800bffa:	d029      	beq.n	800c050 <_dtoa_r+0x9e0>
 800bffc:	f1ba 0f00 	cmp.w	sl, #0
 800c000:	dd01      	ble.n	800c006 <_dtoa_r+0x996>
 800c002:	9b06      	ldr	r3, [sp, #24]
 800c004:	3331      	adds	r3, #49	; 0x31
 800c006:	9a02      	ldr	r2, [sp, #8]
 800c008:	7013      	strb	r3, [r2, #0]
 800c00a:	e774      	b.n	800bef6 <_dtoa_r+0x886>
 800c00c:	4638      	mov	r0, r7
 800c00e:	e7b8      	b.n	800bf82 <_dtoa_r+0x912>
 800c010:	2201      	movs	r2, #1
 800c012:	e7e1      	b.n	800bfd8 <_dtoa_r+0x968>
 800c014:	f1ba 0f00 	cmp.w	sl, #0
 800c018:	db06      	blt.n	800c028 <_dtoa_r+0x9b8>
 800c01a:	9907      	ldr	r1, [sp, #28]
 800c01c:	ea41 0a0a 	orr.w	sl, r1, sl
 800c020:	9908      	ldr	r1, [sp, #32]
 800c022:	ea5a 0101 	orrs.w	r1, sl, r1
 800c026:	d120      	bne.n	800c06a <_dtoa_r+0x9fa>
 800c028:	2a00      	cmp	r2, #0
 800c02a:	ddec      	ble.n	800c006 <_dtoa_r+0x996>
 800c02c:	4629      	mov	r1, r5
 800c02e:	2201      	movs	r2, #1
 800c030:	4630      	mov	r0, r6
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	f000 fea8 	bl	800cd88 <__lshift>
 800c038:	4621      	mov	r1, r4
 800c03a:	4605      	mov	r5, r0
 800c03c:	f000 ff10 	bl	800ce60 <__mcmp>
 800c040:	2800      	cmp	r0, #0
 800c042:	9b05      	ldr	r3, [sp, #20]
 800c044:	dc02      	bgt.n	800c04c <_dtoa_r+0x9dc>
 800c046:	d1de      	bne.n	800c006 <_dtoa_r+0x996>
 800c048:	07da      	lsls	r2, r3, #31
 800c04a:	d5dc      	bpl.n	800c006 <_dtoa_r+0x996>
 800c04c:	2b39      	cmp	r3, #57	; 0x39
 800c04e:	d1d8      	bne.n	800c002 <_dtoa_r+0x992>
 800c050:	9a02      	ldr	r2, [sp, #8]
 800c052:	2339      	movs	r3, #57	; 0x39
 800c054:	7013      	strb	r3, [r2, #0]
 800c056:	4643      	mov	r3, r8
 800c058:	4698      	mov	r8, r3
 800c05a:	3b01      	subs	r3, #1
 800c05c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c060:	2a39      	cmp	r2, #57	; 0x39
 800c062:	d051      	beq.n	800c108 <_dtoa_r+0xa98>
 800c064:	3201      	adds	r2, #1
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	e745      	b.n	800bef6 <_dtoa_r+0x886>
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	dd03      	ble.n	800c076 <_dtoa_r+0xa06>
 800c06e:	2b39      	cmp	r3, #57	; 0x39
 800c070:	d0ee      	beq.n	800c050 <_dtoa_r+0x9e0>
 800c072:	3301      	adds	r3, #1
 800c074:	e7c7      	b.n	800c006 <_dtoa_r+0x996>
 800c076:	9a05      	ldr	r2, [sp, #20]
 800c078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c07a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c07e:	428a      	cmp	r2, r1
 800c080:	d02b      	beq.n	800c0da <_dtoa_r+0xa6a>
 800c082:	4629      	mov	r1, r5
 800c084:	2300      	movs	r3, #0
 800c086:	220a      	movs	r2, #10
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 fc83 	bl	800c994 <__multadd>
 800c08e:	45b9      	cmp	r9, r7
 800c090:	4605      	mov	r5, r0
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	f04f 020a 	mov.w	r2, #10
 800c09a:	4649      	mov	r1, r9
 800c09c:	4630      	mov	r0, r6
 800c09e:	d107      	bne.n	800c0b0 <_dtoa_r+0xa40>
 800c0a0:	f000 fc78 	bl	800c994 <__multadd>
 800c0a4:	4681      	mov	r9, r0
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	9b05      	ldr	r3, [sp, #20]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	e774      	b.n	800bf9a <_dtoa_r+0x92a>
 800c0b0:	f000 fc70 	bl	800c994 <__multadd>
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	4681      	mov	r9, r0
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 fc69 	bl	800c994 <__multadd>
 800c0c2:	4607      	mov	r7, r0
 800c0c4:	e7f0      	b.n	800c0a8 <_dtoa_r+0xa38>
 800c0c6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ca:	9a00      	ldr	r2, [sp, #0]
 800c0cc:	bfcc      	ite	gt
 800c0ce:	46d0      	movgt	r8, sl
 800c0d0:	f04f 0801 	movle.w	r8, #1
 800c0d4:	4490      	add	r8, r2
 800c0d6:	f04f 0900 	mov.w	r9, #0
 800c0da:	4629      	mov	r1, r5
 800c0dc:	2201      	movs	r2, #1
 800c0de:	4630      	mov	r0, r6
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	f000 fe51 	bl	800cd88 <__lshift>
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	f000 feb9 	bl	800ce60 <__mcmp>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	dcb1      	bgt.n	800c056 <_dtoa_r+0x9e6>
 800c0f2:	d102      	bne.n	800c0fa <_dtoa_r+0xa8a>
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	07db      	lsls	r3, r3, #31
 800c0f8:	d4ad      	bmi.n	800c056 <_dtoa_r+0x9e6>
 800c0fa:	4643      	mov	r3, r8
 800c0fc:	4698      	mov	r8, r3
 800c0fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c102:	2a30      	cmp	r2, #48	; 0x30
 800c104:	d0fa      	beq.n	800c0fc <_dtoa_r+0xa8c>
 800c106:	e6f6      	b.n	800bef6 <_dtoa_r+0x886>
 800c108:	9a00      	ldr	r2, [sp, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d1a4      	bne.n	800c058 <_dtoa_r+0x9e8>
 800c10e:	f10b 0b01 	add.w	fp, fp, #1
 800c112:	2331      	movs	r3, #49	; 0x31
 800c114:	e778      	b.n	800c008 <_dtoa_r+0x998>
 800c116:	4b15      	ldr	r3, [pc, #84]	; (800c16c <_dtoa_r+0xafc>)
 800c118:	f7ff bb12 	b.w	800b740 <_dtoa_r+0xd0>
 800c11c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f47f aaee 	bne.w	800b700 <_dtoa_r+0x90>
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <_dtoa_r+0xb00>)
 800c126:	f7ff bb0b 	b.w	800b740 <_dtoa_r+0xd0>
 800c12a:	f1ba 0f00 	cmp.w	sl, #0
 800c12e:	dc03      	bgt.n	800c138 <_dtoa_r+0xac8>
 800c130:	9b07      	ldr	r3, [sp, #28]
 800c132:	2b02      	cmp	r3, #2
 800c134:	f73f aec7 	bgt.w	800bec6 <_dtoa_r+0x856>
 800c138:	f8dd 8000 	ldr.w	r8, [sp]
 800c13c:	4621      	mov	r1, r4
 800c13e:	4628      	mov	r0, r5
 800c140:	f7ff fa0a 	bl	800b558 <quorem>
 800c144:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c148:	f808 3b01 	strb.w	r3, [r8], #1
 800c14c:	9a00      	ldr	r2, [sp, #0]
 800c14e:	eba8 0202 	sub.w	r2, r8, r2
 800c152:	4592      	cmp	sl, r2
 800c154:	ddb7      	ble.n	800c0c6 <_dtoa_r+0xa56>
 800c156:	4629      	mov	r1, r5
 800c158:	2300      	movs	r3, #0
 800c15a:	220a      	movs	r2, #10
 800c15c:	4630      	mov	r0, r6
 800c15e:	f000 fc19 	bl	800c994 <__multadd>
 800c162:	4605      	mov	r5, r0
 800c164:	e7ea      	b.n	800c13c <_dtoa_r+0xacc>
 800c166:	bf00      	nop
 800c168:	0800f904 	.word	0x0800f904
 800c16c:	0800fb09 	.word	0x0800fb09
 800c170:	0800f881 	.word	0x0800f881

0800c174 <rshift>:
 800c174:	6903      	ldr	r3, [r0, #16]
 800c176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c17e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c182:	f100 0414 	add.w	r4, r0, #20
 800c186:	dd45      	ble.n	800c214 <rshift+0xa0>
 800c188:	f011 011f 	ands.w	r1, r1, #31
 800c18c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c194:	d10c      	bne.n	800c1b0 <rshift+0x3c>
 800c196:	f100 0710 	add.w	r7, r0, #16
 800c19a:	4629      	mov	r1, r5
 800c19c:	42b1      	cmp	r1, r6
 800c19e:	d334      	bcc.n	800c20a <rshift+0x96>
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	1eea      	subs	r2, r5, #3
 800c1a6:	4296      	cmp	r6, r2
 800c1a8:	bf38      	it	cc
 800c1aa:	2300      	movcc	r3, #0
 800c1ac:	4423      	add	r3, r4
 800c1ae:	e015      	b.n	800c1dc <rshift+0x68>
 800c1b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1b4:	f1c1 0820 	rsb	r8, r1, #32
 800c1b8:	40cf      	lsrs	r7, r1
 800c1ba:	f105 0e04 	add.w	lr, r5, #4
 800c1be:	46a1      	mov	r9, r4
 800c1c0:	4576      	cmp	r6, lr
 800c1c2:	46f4      	mov	ip, lr
 800c1c4:	d815      	bhi.n	800c1f2 <rshift+0x7e>
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	009a      	lsls	r2, r3, #2
 800c1ca:	3a04      	subs	r2, #4
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	42ae      	cmp	r6, r5
 800c1d0:	bf38      	it	cc
 800c1d2:	2200      	movcc	r2, #0
 800c1d4:	18a3      	adds	r3, r4, r2
 800c1d6:	50a7      	str	r7, [r4, r2]
 800c1d8:	b107      	cbz	r7, 800c1dc <rshift+0x68>
 800c1da:	3304      	adds	r3, #4
 800c1dc:	1b1a      	subs	r2, r3, r4
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c1e4:	bf08      	it	eq
 800c1e6:	2300      	moveq	r3, #0
 800c1e8:	6102      	str	r2, [r0, #16]
 800c1ea:	bf08      	it	eq
 800c1ec:	6143      	streq	r3, [r0, #20]
 800c1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	f8dc c000 	ldr.w	ip, [ip]
 800c1f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1fa:	ea4c 0707 	orr.w	r7, ip, r7
 800c1fe:	f849 7b04 	str.w	r7, [r9], #4
 800c202:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c206:	40cf      	lsrs	r7, r1
 800c208:	e7da      	b.n	800c1c0 <rshift+0x4c>
 800c20a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c20e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c212:	e7c3      	b.n	800c19c <rshift+0x28>
 800c214:	4623      	mov	r3, r4
 800c216:	e7e1      	b.n	800c1dc <rshift+0x68>

0800c218 <__hexdig_fun>:
 800c218:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c21c:	2b09      	cmp	r3, #9
 800c21e:	d802      	bhi.n	800c226 <__hexdig_fun+0xe>
 800c220:	3820      	subs	r0, #32
 800c222:	b2c0      	uxtb	r0, r0
 800c224:	4770      	bx	lr
 800c226:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	d801      	bhi.n	800c232 <__hexdig_fun+0x1a>
 800c22e:	3847      	subs	r0, #71	; 0x47
 800c230:	e7f7      	b.n	800c222 <__hexdig_fun+0xa>
 800c232:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c236:	2b05      	cmp	r3, #5
 800c238:	d801      	bhi.n	800c23e <__hexdig_fun+0x26>
 800c23a:	3827      	subs	r0, #39	; 0x27
 800c23c:	e7f1      	b.n	800c222 <__hexdig_fun+0xa>
 800c23e:	2000      	movs	r0, #0
 800c240:	4770      	bx	lr
	...

0800c244 <__gethex>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	ed2d 8b02 	vpush	{d8}
 800c24c:	b089      	sub	sp, #36	; 0x24
 800c24e:	ee08 0a10 	vmov	s16, r0
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	4bbc      	ldr	r3, [pc, #752]	; (800c548 <__gethex+0x304>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	4618      	mov	r0, r3
 800c25c:	468b      	mov	fp, r1
 800c25e:	4690      	mov	r8, r2
 800c260:	f7f3 fff8 	bl	8000254 <strlen>
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	f8db 2000 	ldr.w	r2, [fp]
 800c26a:	4403      	add	r3, r0
 800c26c:	4682      	mov	sl, r0
 800c26e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	1c93      	adds	r3, r2, #2
 800c276:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c27a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c27e:	32fe      	adds	r2, #254	; 0xfe
 800c280:	18d1      	adds	r1, r2, r3
 800c282:	461f      	mov	r7, r3
 800c284:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c288:	9100      	str	r1, [sp, #0]
 800c28a:	2830      	cmp	r0, #48	; 0x30
 800c28c:	d0f8      	beq.n	800c280 <__gethex+0x3c>
 800c28e:	f7ff ffc3 	bl	800c218 <__hexdig_fun>
 800c292:	4604      	mov	r4, r0
 800c294:	2800      	cmp	r0, #0
 800c296:	d13a      	bne.n	800c30e <__gethex+0xca>
 800c298:	9901      	ldr	r1, [sp, #4]
 800c29a:	4652      	mov	r2, sl
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7fe fa98 	bl	800a7d2 <strncmp>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d168      	bne.n	800c37a <__gethex+0x136>
 800c2a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c2ac:	eb07 060a 	add.w	r6, r7, sl
 800c2b0:	f7ff ffb2 	bl	800c218 <__hexdig_fun>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d062      	beq.n	800c37e <__gethex+0x13a>
 800c2b8:	4633      	mov	r3, r6
 800c2ba:	7818      	ldrb	r0, [r3, #0]
 800c2bc:	2830      	cmp	r0, #48	; 0x30
 800c2be:	461f      	mov	r7, r3
 800c2c0:	f103 0301 	add.w	r3, r3, #1
 800c2c4:	d0f9      	beq.n	800c2ba <__gethex+0x76>
 800c2c6:	f7ff ffa7 	bl	800c218 <__hexdig_fun>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	fab0 f480 	clz	r4, r0
 800c2d0:	0964      	lsrs	r4, r4, #5
 800c2d2:	4635      	mov	r5, r6
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	463a      	mov	r2, r7
 800c2d8:	4616      	mov	r6, r2
 800c2da:	3201      	adds	r2, #1
 800c2dc:	7830      	ldrb	r0, [r6, #0]
 800c2de:	f7ff ff9b 	bl	800c218 <__hexdig_fun>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d1f8      	bne.n	800c2d8 <__gethex+0x94>
 800c2e6:	9901      	ldr	r1, [sp, #4]
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7fe fa71 	bl	800a7d2 <strncmp>
 800c2f0:	b980      	cbnz	r0, 800c314 <__gethex+0xd0>
 800c2f2:	b94d      	cbnz	r5, 800c308 <__gethex+0xc4>
 800c2f4:	eb06 050a 	add.w	r5, r6, sl
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	7830      	ldrb	r0, [r6, #0]
 800c300:	f7ff ff8a 	bl	800c218 <__hexdig_fun>
 800c304:	2800      	cmp	r0, #0
 800c306:	d1f8      	bne.n	800c2fa <__gethex+0xb6>
 800c308:	1bad      	subs	r5, r5, r6
 800c30a:	00ad      	lsls	r5, r5, #2
 800c30c:	e004      	b.n	800c318 <__gethex+0xd4>
 800c30e:	2400      	movs	r4, #0
 800c310:	4625      	mov	r5, r4
 800c312:	e7e0      	b.n	800c2d6 <__gethex+0x92>
 800c314:	2d00      	cmp	r5, #0
 800c316:	d1f7      	bne.n	800c308 <__gethex+0xc4>
 800c318:	7833      	ldrb	r3, [r6, #0]
 800c31a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c31e:	2b50      	cmp	r3, #80	; 0x50
 800c320:	d13b      	bne.n	800c39a <__gethex+0x156>
 800c322:	7873      	ldrb	r3, [r6, #1]
 800c324:	2b2b      	cmp	r3, #43	; 0x2b
 800c326:	d02c      	beq.n	800c382 <__gethex+0x13e>
 800c328:	2b2d      	cmp	r3, #45	; 0x2d
 800c32a:	d02e      	beq.n	800c38a <__gethex+0x146>
 800c32c:	1c71      	adds	r1, r6, #1
 800c32e:	f04f 0900 	mov.w	r9, #0
 800c332:	7808      	ldrb	r0, [r1, #0]
 800c334:	f7ff ff70 	bl	800c218 <__hexdig_fun>
 800c338:	1e43      	subs	r3, r0, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b18      	cmp	r3, #24
 800c33e:	d82c      	bhi.n	800c39a <__gethex+0x156>
 800c340:	f1a0 0210 	sub.w	r2, r0, #16
 800c344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c348:	f7ff ff66 	bl	800c218 <__hexdig_fun>
 800c34c:	1e43      	subs	r3, r0, #1
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b18      	cmp	r3, #24
 800c352:	d91d      	bls.n	800c390 <__gethex+0x14c>
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	d000      	beq.n	800c35c <__gethex+0x118>
 800c35a:	4252      	negs	r2, r2
 800c35c:	4415      	add	r5, r2
 800c35e:	f8cb 1000 	str.w	r1, [fp]
 800c362:	b1e4      	cbz	r4, 800c39e <__gethex+0x15a>
 800c364:	9b00      	ldr	r3, [sp, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bf14      	ite	ne
 800c36a:	2700      	movne	r7, #0
 800c36c:	2706      	moveq	r7, #6
 800c36e:	4638      	mov	r0, r7
 800c370:	b009      	add	sp, #36	; 0x24
 800c372:	ecbd 8b02 	vpop	{d8}
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	463e      	mov	r6, r7
 800c37c:	4625      	mov	r5, r4
 800c37e:	2401      	movs	r4, #1
 800c380:	e7ca      	b.n	800c318 <__gethex+0xd4>
 800c382:	f04f 0900 	mov.w	r9, #0
 800c386:	1cb1      	adds	r1, r6, #2
 800c388:	e7d3      	b.n	800c332 <__gethex+0xee>
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	e7fa      	b.n	800c386 <__gethex+0x142>
 800c390:	230a      	movs	r3, #10
 800c392:	fb03 0202 	mla	r2, r3, r2, r0
 800c396:	3a10      	subs	r2, #16
 800c398:	e7d4      	b.n	800c344 <__gethex+0x100>
 800c39a:	4631      	mov	r1, r6
 800c39c:	e7df      	b.n	800c35e <__gethex+0x11a>
 800c39e:	1bf3      	subs	r3, r6, r7
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	2b07      	cmp	r3, #7
 800c3a6:	dc0b      	bgt.n	800c3c0 <__gethex+0x17c>
 800c3a8:	ee18 0a10 	vmov	r0, s16
 800c3ac:	f000 fa90 	bl	800c8d0 <_Balloc>
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	b940      	cbnz	r0, 800c3c6 <__gethex+0x182>
 800c3b4:	4b65      	ldr	r3, [pc, #404]	; (800c54c <__gethex+0x308>)
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	21de      	movs	r1, #222	; 0xde
 800c3ba:	4865      	ldr	r0, [pc, #404]	; (800c550 <__gethex+0x30c>)
 800c3bc:	f001 fda4 	bl	800df08 <__assert_func>
 800c3c0:	3101      	adds	r1, #1
 800c3c2:	105b      	asrs	r3, r3, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__gethex+0x160>
 800c3c6:	f100 0914 	add.w	r9, r0, #20
 800c3ca:	f04f 0b00 	mov.w	fp, #0
 800c3ce:	f1ca 0301 	rsb	r3, sl, #1
 800c3d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3d6:	f8cd b000 	str.w	fp, [sp]
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	42b7      	cmp	r7, r6
 800c3de:	d340      	bcc.n	800c462 <__gethex+0x21e>
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	f840 3b04 	str.w	r3, [r0], #4
 800c3e8:	eba0 0009 	sub.w	r0, r0, r9
 800c3ec:	1080      	asrs	r0, r0, #2
 800c3ee:	0146      	lsls	r6, r0, #5
 800c3f0:	6120      	str	r0, [r4, #16]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fb62 	bl	800cabc <__hi0bits>
 800c3f8:	1a30      	subs	r0, r6, r0
 800c3fa:	f8d8 6000 	ldr.w	r6, [r8]
 800c3fe:	42b0      	cmp	r0, r6
 800c400:	dd63      	ble.n	800c4ca <__gethex+0x286>
 800c402:	1b87      	subs	r7, r0, r6
 800c404:	4639      	mov	r1, r7
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fefd 	bl	800d206 <__any_on>
 800c40c:	4682      	mov	sl, r0
 800c40e:	b1a8      	cbz	r0, 800c43c <__gethex+0x1f8>
 800c410:	1e7b      	subs	r3, r7, #1
 800c412:	1159      	asrs	r1, r3, #5
 800c414:	f003 021f 	and.w	r2, r3, #31
 800c418:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c41c:	f04f 0a01 	mov.w	sl, #1
 800c420:	fa0a f202 	lsl.w	r2, sl, r2
 800c424:	420a      	tst	r2, r1
 800c426:	d009      	beq.n	800c43c <__gethex+0x1f8>
 800c428:	4553      	cmp	r3, sl
 800c42a:	dd05      	ble.n	800c438 <__gethex+0x1f4>
 800c42c:	1eb9      	subs	r1, r7, #2
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 fee9 	bl	800d206 <__any_on>
 800c434:	2800      	cmp	r0, #0
 800c436:	d145      	bne.n	800c4c4 <__gethex+0x280>
 800c438:	f04f 0a02 	mov.w	sl, #2
 800c43c:	4639      	mov	r1, r7
 800c43e:	4620      	mov	r0, r4
 800c440:	f7ff fe98 	bl	800c174 <rshift>
 800c444:	443d      	add	r5, r7
 800c446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c44a:	42ab      	cmp	r3, r5
 800c44c:	da4c      	bge.n	800c4e8 <__gethex+0x2a4>
 800c44e:	ee18 0a10 	vmov	r0, s16
 800c452:	4621      	mov	r1, r4
 800c454:	f000 fa7c 	bl	800c950 <_Bfree>
 800c458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c45a:	2300      	movs	r3, #0
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	27a3      	movs	r7, #163	; 0xa3
 800c460:	e785      	b.n	800c36e <__gethex+0x12a>
 800c462:	1e73      	subs	r3, r6, #1
 800c464:	9a05      	ldr	r2, [sp, #20]
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d019      	beq.n	800c4a4 <__gethex+0x260>
 800c470:	f1bb 0f20 	cmp.w	fp, #32
 800c474:	d107      	bne.n	800c486 <__gethex+0x242>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	9a00      	ldr	r2, [sp, #0]
 800c47a:	f843 2b04 	str.w	r2, [r3], #4
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	2300      	movs	r3, #0
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	469b      	mov	fp, r3
 800c486:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c48a:	f7ff fec5 	bl	800c218 <__hexdig_fun>
 800c48e:	9b00      	ldr	r3, [sp, #0]
 800c490:	f000 000f 	and.w	r0, r0, #15
 800c494:	fa00 f00b 	lsl.w	r0, r0, fp
 800c498:	4303      	orrs	r3, r0
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	f10b 0b04 	add.w	fp, fp, #4
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	e00d      	b.n	800c4c0 <__gethex+0x27c>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	9a06      	ldr	r2, [sp, #24]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	42bb      	cmp	r3, r7
 800c4ac:	d3e0      	bcc.n	800c470 <__gethex+0x22c>
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	9901      	ldr	r1, [sp, #4]
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	4652      	mov	r2, sl
 800c4b6:	f7fe f98c 	bl	800a7d2 <strncmp>
 800c4ba:	9b07      	ldr	r3, [sp, #28]
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1d7      	bne.n	800c470 <__gethex+0x22c>
 800c4c0:	461e      	mov	r6, r3
 800c4c2:	e78b      	b.n	800c3dc <__gethex+0x198>
 800c4c4:	f04f 0a03 	mov.w	sl, #3
 800c4c8:	e7b8      	b.n	800c43c <__gethex+0x1f8>
 800c4ca:	da0a      	bge.n	800c4e2 <__gethex+0x29e>
 800c4cc:	1a37      	subs	r7, r6, r0
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	ee18 0a10 	vmov	r0, s16
 800c4d4:	463a      	mov	r2, r7
 800c4d6:	f000 fc57 	bl	800cd88 <__lshift>
 800c4da:	1bed      	subs	r5, r5, r7
 800c4dc:	4604      	mov	r4, r0
 800c4de:	f100 0914 	add.w	r9, r0, #20
 800c4e2:	f04f 0a00 	mov.w	sl, #0
 800c4e6:	e7ae      	b.n	800c446 <__gethex+0x202>
 800c4e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4ec:	42a8      	cmp	r0, r5
 800c4ee:	dd72      	ble.n	800c5d6 <__gethex+0x392>
 800c4f0:	1b45      	subs	r5, r0, r5
 800c4f2:	42ae      	cmp	r6, r5
 800c4f4:	dc36      	bgt.n	800c564 <__gethex+0x320>
 800c4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d02a      	beq.n	800c554 <__gethex+0x310>
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d02c      	beq.n	800c55c <__gethex+0x318>
 800c502:	2b01      	cmp	r3, #1
 800c504:	d115      	bne.n	800c532 <__gethex+0x2ee>
 800c506:	42ae      	cmp	r6, r5
 800c508:	d113      	bne.n	800c532 <__gethex+0x2ee>
 800c50a:	2e01      	cmp	r6, #1
 800c50c:	d10b      	bne.n	800c526 <__gethex+0x2e2>
 800c50e:	9a04      	ldr	r2, [sp, #16]
 800c510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	2301      	movs	r3, #1
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	f8c9 3000 	str.w	r3, [r9]
 800c51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c520:	2762      	movs	r7, #98	; 0x62
 800c522:	601c      	str	r4, [r3, #0]
 800c524:	e723      	b.n	800c36e <__gethex+0x12a>
 800c526:	1e71      	subs	r1, r6, #1
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 fe6c 	bl	800d206 <__any_on>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d1ed      	bne.n	800c50e <__gethex+0x2ca>
 800c532:	ee18 0a10 	vmov	r0, s16
 800c536:	4621      	mov	r1, r4
 800c538:	f000 fa0a 	bl	800c950 <_Bfree>
 800c53c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c53e:	2300      	movs	r3, #0
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	2750      	movs	r7, #80	; 0x50
 800c544:	e713      	b.n	800c36e <__gethex+0x12a>
 800c546:	bf00      	nop
 800c548:	0800f980 	.word	0x0800f980
 800c54c:	0800f904 	.word	0x0800f904
 800c550:	0800f915 	.word	0x0800f915
 800c554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1eb      	bne.n	800c532 <__gethex+0x2ee>
 800c55a:	e7d8      	b.n	800c50e <__gethex+0x2ca>
 800c55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1d5      	bne.n	800c50e <__gethex+0x2ca>
 800c562:	e7e6      	b.n	800c532 <__gethex+0x2ee>
 800c564:	1e6f      	subs	r7, r5, #1
 800c566:	f1ba 0f00 	cmp.w	sl, #0
 800c56a:	d131      	bne.n	800c5d0 <__gethex+0x38c>
 800c56c:	b127      	cbz	r7, 800c578 <__gethex+0x334>
 800c56e:	4639      	mov	r1, r7
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fe48 	bl	800d206 <__any_on>
 800c576:	4682      	mov	sl, r0
 800c578:	117b      	asrs	r3, r7, #5
 800c57a:	2101      	movs	r1, #1
 800c57c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c580:	f007 071f 	and.w	r7, r7, #31
 800c584:	fa01 f707 	lsl.w	r7, r1, r7
 800c588:	421f      	tst	r7, r3
 800c58a:	4629      	mov	r1, r5
 800c58c:	4620      	mov	r0, r4
 800c58e:	bf18      	it	ne
 800c590:	f04a 0a02 	orrne.w	sl, sl, #2
 800c594:	1b76      	subs	r6, r6, r5
 800c596:	f7ff fded 	bl	800c174 <rshift>
 800c59a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c59e:	2702      	movs	r7, #2
 800c5a0:	f1ba 0f00 	cmp.w	sl, #0
 800c5a4:	d048      	beq.n	800c638 <__gethex+0x3f4>
 800c5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d015      	beq.n	800c5da <__gethex+0x396>
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d017      	beq.n	800c5e2 <__gethex+0x39e>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d109      	bne.n	800c5ca <__gethex+0x386>
 800c5b6:	f01a 0f02 	tst.w	sl, #2
 800c5ba:	d006      	beq.n	800c5ca <__gethex+0x386>
 800c5bc:	f8d9 0000 	ldr.w	r0, [r9]
 800c5c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c5c4:	f01a 0f01 	tst.w	sl, #1
 800c5c8:	d10e      	bne.n	800c5e8 <__gethex+0x3a4>
 800c5ca:	f047 0710 	orr.w	r7, r7, #16
 800c5ce:	e033      	b.n	800c638 <__gethex+0x3f4>
 800c5d0:	f04f 0a01 	mov.w	sl, #1
 800c5d4:	e7d0      	b.n	800c578 <__gethex+0x334>
 800c5d6:	2701      	movs	r7, #1
 800c5d8:	e7e2      	b.n	800c5a0 <__gethex+0x35c>
 800c5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5dc:	f1c3 0301 	rsb	r3, r3, #1
 800c5e0:	9315      	str	r3, [sp, #84]	; 0x54
 800c5e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0f0      	beq.n	800c5ca <__gethex+0x386>
 800c5e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5ec:	f104 0314 	add.w	r3, r4, #20
 800c5f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5f8:	f04f 0c00 	mov.w	ip, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c602:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c606:	d01c      	beq.n	800c642 <__gethex+0x3fe>
 800c608:	3201      	adds	r2, #1
 800c60a:	6002      	str	r2, [r0, #0]
 800c60c:	2f02      	cmp	r7, #2
 800c60e:	f104 0314 	add.w	r3, r4, #20
 800c612:	d13f      	bne.n	800c694 <__gethex+0x450>
 800c614:	f8d8 2000 	ldr.w	r2, [r8]
 800c618:	3a01      	subs	r2, #1
 800c61a:	42b2      	cmp	r2, r6
 800c61c:	d10a      	bne.n	800c634 <__gethex+0x3f0>
 800c61e:	1171      	asrs	r1, r6, #5
 800c620:	2201      	movs	r2, #1
 800c622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c626:	f006 061f 	and.w	r6, r6, #31
 800c62a:	fa02 f606 	lsl.w	r6, r2, r6
 800c62e:	421e      	tst	r6, r3
 800c630:	bf18      	it	ne
 800c632:	4617      	movne	r7, r2
 800c634:	f047 0720 	orr.w	r7, r7, #32
 800c638:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c63a:	601c      	str	r4, [r3, #0]
 800c63c:	9b04      	ldr	r3, [sp, #16]
 800c63e:	601d      	str	r5, [r3, #0]
 800c640:	e695      	b.n	800c36e <__gethex+0x12a>
 800c642:	4299      	cmp	r1, r3
 800c644:	f843 cc04 	str.w	ip, [r3, #-4]
 800c648:	d8d8      	bhi.n	800c5fc <__gethex+0x3b8>
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	459b      	cmp	fp, r3
 800c64e:	db19      	blt.n	800c684 <__gethex+0x440>
 800c650:	6861      	ldr	r1, [r4, #4]
 800c652:	ee18 0a10 	vmov	r0, s16
 800c656:	3101      	adds	r1, #1
 800c658:	f000 f93a 	bl	800c8d0 <_Balloc>
 800c65c:	4681      	mov	r9, r0
 800c65e:	b918      	cbnz	r0, 800c668 <__gethex+0x424>
 800c660:	4b1a      	ldr	r3, [pc, #104]	; (800c6cc <__gethex+0x488>)
 800c662:	4602      	mov	r2, r0
 800c664:	2184      	movs	r1, #132	; 0x84
 800c666:	e6a8      	b.n	800c3ba <__gethex+0x176>
 800c668:	6922      	ldr	r2, [r4, #16]
 800c66a:	3202      	adds	r2, #2
 800c66c:	f104 010c 	add.w	r1, r4, #12
 800c670:	0092      	lsls	r2, r2, #2
 800c672:	300c      	adds	r0, #12
 800c674:	f000 f91e 	bl	800c8b4 <memcpy>
 800c678:	4621      	mov	r1, r4
 800c67a:	ee18 0a10 	vmov	r0, s16
 800c67e:	f000 f967 	bl	800c950 <_Bfree>
 800c682:	464c      	mov	r4, r9
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c68c:	6122      	str	r2, [r4, #16]
 800c68e:	2201      	movs	r2, #1
 800c690:	615a      	str	r2, [r3, #20]
 800c692:	e7bb      	b.n	800c60c <__gethex+0x3c8>
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	455a      	cmp	r2, fp
 800c698:	dd0b      	ble.n	800c6b2 <__gethex+0x46e>
 800c69a:	2101      	movs	r1, #1
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff fd69 	bl	800c174 <rshift>
 800c6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6a6:	3501      	adds	r5, #1
 800c6a8:	42ab      	cmp	r3, r5
 800c6aa:	f6ff aed0 	blt.w	800c44e <__gethex+0x20a>
 800c6ae:	2701      	movs	r7, #1
 800c6b0:	e7c0      	b.n	800c634 <__gethex+0x3f0>
 800c6b2:	f016 061f 	ands.w	r6, r6, #31
 800c6b6:	d0fa      	beq.n	800c6ae <__gethex+0x46a>
 800c6b8:	449a      	add	sl, r3
 800c6ba:	f1c6 0620 	rsb	r6, r6, #32
 800c6be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c6c2:	f000 f9fb 	bl	800cabc <__hi0bits>
 800c6c6:	42b0      	cmp	r0, r6
 800c6c8:	dbe7      	blt.n	800c69a <__gethex+0x456>
 800c6ca:	e7f0      	b.n	800c6ae <__gethex+0x46a>
 800c6cc:	0800f904 	.word	0x0800f904

0800c6d0 <L_shift>:
 800c6d0:	f1c2 0208 	rsb	r2, r2, #8
 800c6d4:	0092      	lsls	r2, r2, #2
 800c6d6:	b570      	push	{r4, r5, r6, lr}
 800c6d8:	f1c2 0620 	rsb	r6, r2, #32
 800c6dc:	6843      	ldr	r3, [r0, #4]
 800c6de:	6804      	ldr	r4, [r0, #0]
 800c6e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c6e4:	432c      	orrs	r4, r5
 800c6e6:	40d3      	lsrs	r3, r2
 800c6e8:	6004      	str	r4, [r0, #0]
 800c6ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6ee:	4288      	cmp	r0, r1
 800c6f0:	d3f4      	bcc.n	800c6dc <L_shift+0xc>
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}

0800c6f4 <__match>:
 800c6f4:	b530      	push	{r4, r5, lr}
 800c6f6:	6803      	ldr	r3, [r0, #0]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6fe:	b914      	cbnz	r4, 800c706 <__match+0x12>
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	2001      	movs	r0, #1
 800c704:	bd30      	pop	{r4, r5, pc}
 800c706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c70e:	2d19      	cmp	r5, #25
 800c710:	bf98      	it	ls
 800c712:	3220      	addls	r2, #32
 800c714:	42a2      	cmp	r2, r4
 800c716:	d0f0      	beq.n	800c6fa <__match+0x6>
 800c718:	2000      	movs	r0, #0
 800c71a:	e7f3      	b.n	800c704 <__match+0x10>

0800c71c <__hexnan>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	680b      	ldr	r3, [r1, #0]
 800c722:	6801      	ldr	r1, [r0, #0]
 800c724:	115e      	asrs	r6, r3, #5
 800c726:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c72a:	f013 031f 	ands.w	r3, r3, #31
 800c72e:	b087      	sub	sp, #28
 800c730:	bf18      	it	ne
 800c732:	3604      	addne	r6, #4
 800c734:	2500      	movs	r5, #0
 800c736:	1f37      	subs	r7, r6, #4
 800c738:	4682      	mov	sl, r0
 800c73a:	4690      	mov	r8, r2
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c742:	46b9      	mov	r9, r7
 800c744:	463c      	mov	r4, r7
 800c746:	9502      	str	r5, [sp, #8]
 800c748:	46ab      	mov	fp, r5
 800c74a:	784a      	ldrb	r2, [r1, #1]
 800c74c:	1c4b      	adds	r3, r1, #1
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	b342      	cbz	r2, 800c7a4 <__hexnan+0x88>
 800c752:	4610      	mov	r0, r2
 800c754:	9105      	str	r1, [sp, #20]
 800c756:	9204      	str	r2, [sp, #16]
 800c758:	f7ff fd5e 	bl	800c218 <__hexdig_fun>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d14f      	bne.n	800c800 <__hexnan+0xe4>
 800c760:	9a04      	ldr	r2, [sp, #16]
 800c762:	9905      	ldr	r1, [sp, #20]
 800c764:	2a20      	cmp	r2, #32
 800c766:	d818      	bhi.n	800c79a <__hexnan+0x7e>
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	459b      	cmp	fp, r3
 800c76c:	dd13      	ble.n	800c796 <__hexnan+0x7a>
 800c76e:	454c      	cmp	r4, r9
 800c770:	d206      	bcs.n	800c780 <__hexnan+0x64>
 800c772:	2d07      	cmp	r5, #7
 800c774:	dc04      	bgt.n	800c780 <__hexnan+0x64>
 800c776:	462a      	mov	r2, r5
 800c778:	4649      	mov	r1, r9
 800c77a:	4620      	mov	r0, r4
 800c77c:	f7ff ffa8 	bl	800c6d0 <L_shift>
 800c780:	4544      	cmp	r4, r8
 800c782:	d950      	bls.n	800c826 <__hexnan+0x10a>
 800c784:	2300      	movs	r3, #0
 800c786:	f1a4 0904 	sub.w	r9, r4, #4
 800c78a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c78e:	f8cd b008 	str.w	fp, [sp, #8]
 800c792:	464c      	mov	r4, r9
 800c794:	461d      	mov	r5, r3
 800c796:	9903      	ldr	r1, [sp, #12]
 800c798:	e7d7      	b.n	800c74a <__hexnan+0x2e>
 800c79a:	2a29      	cmp	r2, #41	; 0x29
 800c79c:	d156      	bne.n	800c84c <__hexnan+0x130>
 800c79e:	3102      	adds	r1, #2
 800c7a0:	f8ca 1000 	str.w	r1, [sl]
 800c7a4:	f1bb 0f00 	cmp.w	fp, #0
 800c7a8:	d050      	beq.n	800c84c <__hexnan+0x130>
 800c7aa:	454c      	cmp	r4, r9
 800c7ac:	d206      	bcs.n	800c7bc <__hexnan+0xa0>
 800c7ae:	2d07      	cmp	r5, #7
 800c7b0:	dc04      	bgt.n	800c7bc <__hexnan+0xa0>
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f7ff ff8a 	bl	800c6d0 <L_shift>
 800c7bc:	4544      	cmp	r4, r8
 800c7be:	d934      	bls.n	800c82a <__hexnan+0x10e>
 800c7c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7ce:	429f      	cmp	r7, r3
 800c7d0:	d2f9      	bcs.n	800c7c6 <__hexnan+0xaa>
 800c7d2:	1b3b      	subs	r3, r7, r4
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
 800c7d8:	3304      	adds	r3, #4
 800c7da:	3401      	adds	r4, #1
 800c7dc:	3e03      	subs	r6, #3
 800c7de:	42b4      	cmp	r4, r6
 800c7e0:	bf88      	it	hi
 800c7e2:	2304      	movhi	r3, #4
 800c7e4:	4443      	add	r3, r8
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f843 2b04 	str.w	r2, [r3], #4
 800c7ec:	429f      	cmp	r7, r3
 800c7ee:	d2fb      	bcs.n	800c7e8 <__hexnan+0xcc>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	b91b      	cbnz	r3, 800c7fc <__hexnan+0xe0>
 800c7f4:	4547      	cmp	r7, r8
 800c7f6:	d127      	bne.n	800c848 <__hexnan+0x12c>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	603b      	str	r3, [r7, #0]
 800c7fc:	2005      	movs	r0, #5
 800c7fe:	e026      	b.n	800c84e <__hexnan+0x132>
 800c800:	3501      	adds	r5, #1
 800c802:	2d08      	cmp	r5, #8
 800c804:	f10b 0b01 	add.w	fp, fp, #1
 800c808:	dd06      	ble.n	800c818 <__hexnan+0xfc>
 800c80a:	4544      	cmp	r4, r8
 800c80c:	d9c3      	bls.n	800c796 <__hexnan+0x7a>
 800c80e:	2300      	movs	r3, #0
 800c810:	f844 3c04 	str.w	r3, [r4, #-4]
 800c814:	2501      	movs	r5, #1
 800c816:	3c04      	subs	r4, #4
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	f000 000f 	and.w	r0, r0, #15
 800c81e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c822:	6022      	str	r2, [r4, #0]
 800c824:	e7b7      	b.n	800c796 <__hexnan+0x7a>
 800c826:	2508      	movs	r5, #8
 800c828:	e7b5      	b.n	800c796 <__hexnan+0x7a>
 800c82a:	9b01      	ldr	r3, [sp, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0df      	beq.n	800c7f0 <__hexnan+0xd4>
 800c830:	f04f 32ff 	mov.w	r2, #4294967295
 800c834:	f1c3 0320 	rsb	r3, r3, #32
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
 800c83c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c840:	401a      	ands	r2, r3
 800c842:	f846 2c04 	str.w	r2, [r6, #-4]
 800c846:	e7d3      	b.n	800c7f0 <__hexnan+0xd4>
 800c848:	3f04      	subs	r7, #4
 800c84a:	e7d1      	b.n	800c7f0 <__hexnan+0xd4>
 800c84c:	2004      	movs	r0, #4
 800c84e:	b007      	add	sp, #28
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c854 <_localeconv_r>:
 800c854:	4800      	ldr	r0, [pc, #0]	; (800c858 <_localeconv_r+0x4>)
 800c856:	4770      	bx	lr
 800c858:	20000280 	.word	0x20000280

0800c85c <_lseek_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d07      	ldr	r5, [pc, #28]	; (800c87c <_lseek_r+0x20>)
 800c860:	4604      	mov	r4, r0
 800c862:	4608      	mov	r0, r1
 800c864:	4611      	mov	r1, r2
 800c866:	2200      	movs	r2, #0
 800c868:	602a      	str	r2, [r5, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	f7f6 fd3c 	bl	80032e8 <_lseek>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_lseek_r+0x1e>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_lseek_r+0x1e>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	200188a8 	.word	0x200188a8

0800c880 <malloc>:
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <malloc+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f000 bd3f 	b.w	800d308 <_malloc_r>
 800c88a:	bf00      	nop
 800c88c:	20000128 	.word	0x20000128

0800c890 <__ascii_mbtowc>:
 800c890:	b082      	sub	sp, #8
 800c892:	b901      	cbnz	r1, 800c896 <__ascii_mbtowc+0x6>
 800c894:	a901      	add	r1, sp, #4
 800c896:	b142      	cbz	r2, 800c8aa <__ascii_mbtowc+0x1a>
 800c898:	b14b      	cbz	r3, 800c8ae <__ascii_mbtowc+0x1e>
 800c89a:	7813      	ldrb	r3, [r2, #0]
 800c89c:	600b      	str	r3, [r1, #0]
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	1e10      	subs	r0, r2, #0
 800c8a2:	bf18      	it	ne
 800c8a4:	2001      	movne	r0, #1
 800c8a6:	b002      	add	sp, #8
 800c8a8:	4770      	bx	lr
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	e7fb      	b.n	800c8a6 <__ascii_mbtowc+0x16>
 800c8ae:	f06f 0001 	mvn.w	r0, #1
 800c8b2:	e7f8      	b.n	800c8a6 <__ascii_mbtowc+0x16>

0800c8b4 <memcpy>:
 800c8b4:	440a      	add	r2, r1
 800c8b6:	4291      	cmp	r1, r2
 800c8b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8bc:	d100      	bne.n	800c8c0 <memcpy+0xc>
 800c8be:	4770      	bx	lr
 800c8c0:	b510      	push	{r4, lr}
 800c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ca:	4291      	cmp	r1, r2
 800c8cc:	d1f9      	bne.n	800c8c2 <memcpy+0xe>
 800c8ce:	bd10      	pop	{r4, pc}

0800c8d0 <_Balloc>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	b976      	cbnz	r6, 800c8f8 <_Balloc+0x28>
 800c8da:	2010      	movs	r0, #16
 800c8dc:	f7ff ffd0 	bl	800c880 <malloc>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6260      	str	r0, [r4, #36]	; 0x24
 800c8e4:	b920      	cbnz	r0, 800c8f0 <_Balloc+0x20>
 800c8e6:	4b18      	ldr	r3, [pc, #96]	; (800c948 <_Balloc+0x78>)
 800c8e8:	4818      	ldr	r0, [pc, #96]	; (800c94c <_Balloc+0x7c>)
 800c8ea:	2166      	movs	r1, #102	; 0x66
 800c8ec:	f001 fb0c 	bl	800df08 <__assert_func>
 800c8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8f4:	6006      	str	r6, [r0, #0]
 800c8f6:	60c6      	str	r6, [r0, #12]
 800c8f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8fa:	68f3      	ldr	r3, [r6, #12]
 800c8fc:	b183      	cbz	r3, 800c920 <_Balloc+0x50>
 800c8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c906:	b9b8      	cbnz	r0, 800c938 <_Balloc+0x68>
 800c908:	2101      	movs	r1, #1
 800c90a:	fa01 f605 	lsl.w	r6, r1, r5
 800c90e:	1d72      	adds	r2, r6, #5
 800c910:	0092      	lsls	r2, r2, #2
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fc98 	bl	800d248 <_calloc_r>
 800c918:	b160      	cbz	r0, 800c934 <_Balloc+0x64>
 800c91a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c91e:	e00e      	b.n	800c93e <_Balloc+0x6e>
 800c920:	2221      	movs	r2, #33	; 0x21
 800c922:	2104      	movs	r1, #4
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fc8f 	bl	800d248 <_calloc_r>
 800c92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c92c:	60f0      	str	r0, [r6, #12]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e4      	bne.n	800c8fe <_Balloc+0x2e>
 800c934:	2000      	movs	r0, #0
 800c936:	bd70      	pop	{r4, r5, r6, pc}
 800c938:	6802      	ldr	r2, [r0, #0]
 800c93a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c93e:	2300      	movs	r3, #0
 800c940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c944:	e7f7      	b.n	800c936 <_Balloc+0x66>
 800c946:	bf00      	nop
 800c948:	0800f88e 	.word	0x0800f88e
 800c94c:	0800f994 	.word	0x0800f994

0800c950 <_Bfree>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c954:	4605      	mov	r5, r0
 800c956:	460c      	mov	r4, r1
 800c958:	b976      	cbnz	r6, 800c978 <_Bfree+0x28>
 800c95a:	2010      	movs	r0, #16
 800c95c:	f7ff ff90 	bl	800c880 <malloc>
 800c960:	4602      	mov	r2, r0
 800c962:	6268      	str	r0, [r5, #36]	; 0x24
 800c964:	b920      	cbnz	r0, 800c970 <_Bfree+0x20>
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <_Bfree+0x3c>)
 800c968:	4809      	ldr	r0, [pc, #36]	; (800c990 <_Bfree+0x40>)
 800c96a:	218a      	movs	r1, #138	; 0x8a
 800c96c:	f001 facc 	bl	800df08 <__assert_func>
 800c970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c974:	6006      	str	r6, [r0, #0]
 800c976:	60c6      	str	r6, [r0, #12]
 800c978:	b13c      	cbz	r4, 800c98a <_Bfree+0x3a>
 800c97a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c97c:	6862      	ldr	r2, [r4, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c984:	6021      	str	r1, [r4, #0]
 800c986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	0800f88e 	.word	0x0800f88e
 800c990:	0800f994 	.word	0x0800f994

0800c994 <__multadd>:
 800c994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c998:	690e      	ldr	r6, [r1, #16]
 800c99a:	4607      	mov	r7, r0
 800c99c:	4698      	mov	r8, r3
 800c99e:	460c      	mov	r4, r1
 800c9a0:	f101 0014 	add.w	r0, r1, #20
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6805      	ldr	r5, [r0, #0]
 800c9a8:	b2a9      	uxth	r1, r5
 800c9aa:	fb02 8101 	mla	r1, r2, r1, r8
 800c9ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c9b2:	0c2d      	lsrs	r5, r5, #16
 800c9b4:	fb02 c505 	mla	r5, r2, r5, ip
 800c9b8:	b289      	uxth	r1, r1
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	f840 1b04 	str.w	r1, [r0], #4
 800c9c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c9ca:	dcec      	bgt.n	800c9a6 <__multadd+0x12>
 800c9cc:	f1b8 0f00 	cmp.w	r8, #0
 800c9d0:	d022      	beq.n	800ca18 <__multadd+0x84>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	42b3      	cmp	r3, r6
 800c9d6:	dc19      	bgt.n	800ca0c <__multadd+0x78>
 800c9d8:	6861      	ldr	r1, [r4, #4]
 800c9da:	4638      	mov	r0, r7
 800c9dc:	3101      	adds	r1, #1
 800c9de:	f7ff ff77 	bl	800c8d0 <_Balloc>
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	b928      	cbnz	r0, 800c9f2 <__multadd+0x5e>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ca20 <__multadd+0x8c>)
 800c9ea:	480e      	ldr	r0, [pc, #56]	; (800ca24 <__multadd+0x90>)
 800c9ec:	21b5      	movs	r1, #181	; 0xb5
 800c9ee:	f001 fa8b 	bl	800df08 <__assert_func>
 800c9f2:	6922      	ldr	r2, [r4, #16]
 800c9f4:	3202      	adds	r2, #2
 800c9f6:	f104 010c 	add.w	r1, r4, #12
 800c9fa:	0092      	lsls	r2, r2, #2
 800c9fc:	300c      	adds	r0, #12
 800c9fe:	f7ff ff59 	bl	800c8b4 <memcpy>
 800ca02:	4621      	mov	r1, r4
 800ca04:	4638      	mov	r0, r7
 800ca06:	f7ff ffa3 	bl	800c950 <_Bfree>
 800ca0a:	462c      	mov	r4, r5
 800ca0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca10:	3601      	adds	r6, #1
 800ca12:	f8c3 8014 	str.w	r8, [r3, #20]
 800ca16:	6126      	str	r6, [r4, #16]
 800ca18:	4620      	mov	r0, r4
 800ca1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1e:	bf00      	nop
 800ca20:	0800f904 	.word	0x0800f904
 800ca24:	0800f994 	.word	0x0800f994

0800ca28 <__s2b>:
 800ca28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	4615      	mov	r5, r2
 800ca30:	461f      	mov	r7, r3
 800ca32:	2209      	movs	r2, #9
 800ca34:	3308      	adds	r3, #8
 800ca36:	4606      	mov	r6, r0
 800ca38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	2201      	movs	r2, #1
 800ca40:	429a      	cmp	r2, r3
 800ca42:	db09      	blt.n	800ca58 <__s2b+0x30>
 800ca44:	4630      	mov	r0, r6
 800ca46:	f7ff ff43 	bl	800c8d0 <_Balloc>
 800ca4a:	b940      	cbnz	r0, 800ca5e <__s2b+0x36>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4b19      	ldr	r3, [pc, #100]	; (800cab4 <__s2b+0x8c>)
 800ca50:	4819      	ldr	r0, [pc, #100]	; (800cab8 <__s2b+0x90>)
 800ca52:	21ce      	movs	r1, #206	; 0xce
 800ca54:	f001 fa58 	bl	800df08 <__assert_func>
 800ca58:	0052      	lsls	r2, r2, #1
 800ca5a:	3101      	adds	r1, #1
 800ca5c:	e7f0      	b.n	800ca40 <__s2b+0x18>
 800ca5e:	9b08      	ldr	r3, [sp, #32]
 800ca60:	6143      	str	r3, [r0, #20]
 800ca62:	2d09      	cmp	r5, #9
 800ca64:	f04f 0301 	mov.w	r3, #1
 800ca68:	6103      	str	r3, [r0, #16]
 800ca6a:	dd16      	ble.n	800ca9a <__s2b+0x72>
 800ca6c:	f104 0909 	add.w	r9, r4, #9
 800ca70:	46c8      	mov	r8, r9
 800ca72:	442c      	add	r4, r5
 800ca74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca78:	4601      	mov	r1, r0
 800ca7a:	3b30      	subs	r3, #48	; 0x30
 800ca7c:	220a      	movs	r2, #10
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7ff ff88 	bl	800c994 <__multadd>
 800ca84:	45a0      	cmp	r8, r4
 800ca86:	d1f5      	bne.n	800ca74 <__s2b+0x4c>
 800ca88:	f1a5 0408 	sub.w	r4, r5, #8
 800ca8c:	444c      	add	r4, r9
 800ca8e:	1b2d      	subs	r5, r5, r4
 800ca90:	1963      	adds	r3, r4, r5
 800ca92:	42bb      	cmp	r3, r7
 800ca94:	db04      	blt.n	800caa0 <__s2b+0x78>
 800ca96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca9a:	340a      	adds	r4, #10
 800ca9c:	2509      	movs	r5, #9
 800ca9e:	e7f6      	b.n	800ca8e <__s2b+0x66>
 800caa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800caa4:	4601      	mov	r1, r0
 800caa6:	3b30      	subs	r3, #48	; 0x30
 800caa8:	220a      	movs	r2, #10
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ff72 	bl	800c994 <__multadd>
 800cab0:	e7ee      	b.n	800ca90 <__s2b+0x68>
 800cab2:	bf00      	nop
 800cab4:	0800f904 	.word	0x0800f904
 800cab8:	0800f994 	.word	0x0800f994

0800cabc <__hi0bits>:
 800cabc:	0c03      	lsrs	r3, r0, #16
 800cabe:	041b      	lsls	r3, r3, #16
 800cac0:	b9d3      	cbnz	r3, 800caf8 <__hi0bits+0x3c>
 800cac2:	0400      	lsls	r0, r0, #16
 800cac4:	2310      	movs	r3, #16
 800cac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800caca:	bf04      	itt	eq
 800cacc:	0200      	lsleq	r0, r0, #8
 800cace:	3308      	addeq	r3, #8
 800cad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cad4:	bf04      	itt	eq
 800cad6:	0100      	lsleq	r0, r0, #4
 800cad8:	3304      	addeq	r3, #4
 800cada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cade:	bf04      	itt	eq
 800cae0:	0080      	lsleq	r0, r0, #2
 800cae2:	3302      	addeq	r3, #2
 800cae4:	2800      	cmp	r0, #0
 800cae6:	db05      	blt.n	800caf4 <__hi0bits+0x38>
 800cae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800caec:	f103 0301 	add.w	r3, r3, #1
 800caf0:	bf08      	it	eq
 800caf2:	2320      	moveq	r3, #32
 800caf4:	4618      	mov	r0, r3
 800caf6:	4770      	bx	lr
 800caf8:	2300      	movs	r3, #0
 800cafa:	e7e4      	b.n	800cac6 <__hi0bits+0xa>

0800cafc <__lo0bits>:
 800cafc:	6803      	ldr	r3, [r0, #0]
 800cafe:	f013 0207 	ands.w	r2, r3, #7
 800cb02:	4601      	mov	r1, r0
 800cb04:	d00b      	beq.n	800cb1e <__lo0bits+0x22>
 800cb06:	07da      	lsls	r2, r3, #31
 800cb08:	d424      	bmi.n	800cb54 <__lo0bits+0x58>
 800cb0a:	0798      	lsls	r0, r3, #30
 800cb0c:	bf49      	itett	mi
 800cb0e:	085b      	lsrmi	r3, r3, #1
 800cb10:	089b      	lsrpl	r3, r3, #2
 800cb12:	2001      	movmi	r0, #1
 800cb14:	600b      	strmi	r3, [r1, #0]
 800cb16:	bf5c      	itt	pl
 800cb18:	600b      	strpl	r3, [r1, #0]
 800cb1a:	2002      	movpl	r0, #2
 800cb1c:	4770      	bx	lr
 800cb1e:	b298      	uxth	r0, r3
 800cb20:	b9b0      	cbnz	r0, 800cb50 <__lo0bits+0x54>
 800cb22:	0c1b      	lsrs	r3, r3, #16
 800cb24:	2010      	movs	r0, #16
 800cb26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb2a:	bf04      	itt	eq
 800cb2c:	0a1b      	lsreq	r3, r3, #8
 800cb2e:	3008      	addeq	r0, #8
 800cb30:	071a      	lsls	r2, r3, #28
 800cb32:	bf04      	itt	eq
 800cb34:	091b      	lsreq	r3, r3, #4
 800cb36:	3004      	addeq	r0, #4
 800cb38:	079a      	lsls	r2, r3, #30
 800cb3a:	bf04      	itt	eq
 800cb3c:	089b      	lsreq	r3, r3, #2
 800cb3e:	3002      	addeq	r0, #2
 800cb40:	07da      	lsls	r2, r3, #31
 800cb42:	d403      	bmi.n	800cb4c <__lo0bits+0x50>
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	f100 0001 	add.w	r0, r0, #1
 800cb4a:	d005      	beq.n	800cb58 <__lo0bits+0x5c>
 800cb4c:	600b      	str	r3, [r1, #0]
 800cb4e:	4770      	bx	lr
 800cb50:	4610      	mov	r0, r2
 800cb52:	e7e8      	b.n	800cb26 <__lo0bits+0x2a>
 800cb54:	2000      	movs	r0, #0
 800cb56:	4770      	bx	lr
 800cb58:	2020      	movs	r0, #32
 800cb5a:	4770      	bx	lr

0800cb5c <__i2b>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	460c      	mov	r4, r1
 800cb60:	2101      	movs	r1, #1
 800cb62:	f7ff feb5 	bl	800c8d0 <_Balloc>
 800cb66:	4602      	mov	r2, r0
 800cb68:	b928      	cbnz	r0, 800cb76 <__i2b+0x1a>
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <__i2b+0x24>)
 800cb6c:	4805      	ldr	r0, [pc, #20]	; (800cb84 <__i2b+0x28>)
 800cb6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb72:	f001 f9c9 	bl	800df08 <__assert_func>
 800cb76:	2301      	movs	r3, #1
 800cb78:	6144      	str	r4, [r0, #20]
 800cb7a:	6103      	str	r3, [r0, #16]
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	bf00      	nop
 800cb80:	0800f904 	.word	0x0800f904
 800cb84:	0800f994 	.word	0x0800f994

0800cb88 <__multiply>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	4614      	mov	r4, r2
 800cb8e:	690a      	ldr	r2, [r1, #16]
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	bfb8      	it	lt
 800cb96:	460b      	movlt	r3, r1
 800cb98:	460d      	mov	r5, r1
 800cb9a:	bfbc      	itt	lt
 800cb9c:	4625      	movlt	r5, r4
 800cb9e:	461c      	movlt	r4, r3
 800cba0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cba8:	68ab      	ldr	r3, [r5, #8]
 800cbaa:	6869      	ldr	r1, [r5, #4]
 800cbac:	eb0a 0709 	add.w	r7, sl, r9
 800cbb0:	42bb      	cmp	r3, r7
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	bfb8      	it	lt
 800cbb6:	3101      	addlt	r1, #1
 800cbb8:	f7ff fe8a 	bl	800c8d0 <_Balloc>
 800cbbc:	b930      	cbnz	r0, 800cbcc <__multiply+0x44>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	4b42      	ldr	r3, [pc, #264]	; (800cccc <__multiply+0x144>)
 800cbc2:	4843      	ldr	r0, [pc, #268]	; (800ccd0 <__multiply+0x148>)
 800cbc4:	f240 115d 	movw	r1, #349	; 0x15d
 800cbc8:	f001 f99e 	bl	800df08 <__assert_func>
 800cbcc:	f100 0614 	add.w	r6, r0, #20
 800cbd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cbd4:	4633      	mov	r3, r6
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4543      	cmp	r3, r8
 800cbda:	d31e      	bcc.n	800cc1a <__multiply+0x92>
 800cbdc:	f105 0c14 	add.w	ip, r5, #20
 800cbe0:	f104 0314 	add.w	r3, r4, #20
 800cbe4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cbe8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cbec:	9202      	str	r2, [sp, #8]
 800cbee:	ebac 0205 	sub.w	r2, ip, r5
 800cbf2:	3a15      	subs	r2, #21
 800cbf4:	f022 0203 	bic.w	r2, r2, #3
 800cbf8:	3204      	adds	r2, #4
 800cbfa:	f105 0115 	add.w	r1, r5, #21
 800cbfe:	458c      	cmp	ip, r1
 800cc00:	bf38      	it	cc
 800cc02:	2204      	movcc	r2, #4
 800cc04:	9201      	str	r2, [sp, #4]
 800cc06:	9a02      	ldr	r2, [sp, #8]
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d808      	bhi.n	800cc20 <__multiply+0x98>
 800cc0e:	2f00      	cmp	r7, #0
 800cc10:	dc55      	bgt.n	800ccbe <__multiply+0x136>
 800cc12:	6107      	str	r7, [r0, #16]
 800cc14:	b005      	add	sp, #20
 800cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1a:	f843 2b04 	str.w	r2, [r3], #4
 800cc1e:	e7db      	b.n	800cbd8 <__multiply+0x50>
 800cc20:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc24:	f1ba 0f00 	cmp.w	sl, #0
 800cc28:	d020      	beq.n	800cc6c <__multiply+0xe4>
 800cc2a:	f105 0e14 	add.w	lr, r5, #20
 800cc2e:	46b1      	mov	r9, r6
 800cc30:	2200      	movs	r2, #0
 800cc32:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cc36:	f8d9 b000 	ldr.w	fp, [r9]
 800cc3a:	b2a1      	uxth	r1, r4
 800cc3c:	fa1f fb8b 	uxth.w	fp, fp
 800cc40:	fb0a b101 	mla	r1, sl, r1, fp
 800cc44:	4411      	add	r1, r2
 800cc46:	f8d9 2000 	ldr.w	r2, [r9]
 800cc4a:	0c24      	lsrs	r4, r4, #16
 800cc4c:	0c12      	lsrs	r2, r2, #16
 800cc4e:	fb0a 2404 	mla	r4, sl, r4, r2
 800cc52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cc56:	b289      	uxth	r1, r1
 800cc58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc5c:	45f4      	cmp	ip, lr
 800cc5e:	f849 1b04 	str.w	r1, [r9], #4
 800cc62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cc66:	d8e4      	bhi.n	800cc32 <__multiply+0xaa>
 800cc68:	9901      	ldr	r1, [sp, #4]
 800cc6a:	5072      	str	r2, [r6, r1]
 800cc6c:	9a03      	ldr	r2, [sp, #12]
 800cc6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc72:	3304      	adds	r3, #4
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	d01f      	beq.n	800ccba <__multiply+0x132>
 800cc7a:	6834      	ldr	r4, [r6, #0]
 800cc7c:	f105 0114 	add.w	r1, r5, #20
 800cc80:	46b6      	mov	lr, r6
 800cc82:	f04f 0a00 	mov.w	sl, #0
 800cc86:	880a      	ldrh	r2, [r1, #0]
 800cc88:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cc8c:	fb09 b202 	mla	r2, r9, r2, fp
 800cc90:	4492      	add	sl, r2
 800cc92:	b2a4      	uxth	r4, r4
 800cc94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cc98:	f84e 4b04 	str.w	r4, [lr], #4
 800cc9c:	f851 4b04 	ldr.w	r4, [r1], #4
 800cca0:	f8be 2000 	ldrh.w	r2, [lr]
 800cca4:	0c24      	lsrs	r4, r4, #16
 800cca6:	fb09 2404 	mla	r4, r9, r4, r2
 800ccaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ccae:	458c      	cmp	ip, r1
 800ccb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ccb4:	d8e7      	bhi.n	800cc86 <__multiply+0xfe>
 800ccb6:	9a01      	ldr	r2, [sp, #4]
 800ccb8:	50b4      	str	r4, [r6, r2]
 800ccba:	3604      	adds	r6, #4
 800ccbc:	e7a3      	b.n	800cc06 <__multiply+0x7e>
 800ccbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1a5      	bne.n	800cc12 <__multiply+0x8a>
 800ccc6:	3f01      	subs	r7, #1
 800ccc8:	e7a1      	b.n	800cc0e <__multiply+0x86>
 800ccca:	bf00      	nop
 800cccc:	0800f904 	.word	0x0800f904
 800ccd0:	0800f994 	.word	0x0800f994

0800ccd4 <__pow5mult>:
 800ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd8:	4615      	mov	r5, r2
 800ccda:	f012 0203 	ands.w	r2, r2, #3
 800ccde:	4606      	mov	r6, r0
 800cce0:	460f      	mov	r7, r1
 800cce2:	d007      	beq.n	800ccf4 <__pow5mult+0x20>
 800cce4:	4c25      	ldr	r4, [pc, #148]	; (800cd7c <__pow5mult+0xa8>)
 800cce6:	3a01      	subs	r2, #1
 800cce8:	2300      	movs	r3, #0
 800ccea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccee:	f7ff fe51 	bl	800c994 <__multadd>
 800ccf2:	4607      	mov	r7, r0
 800ccf4:	10ad      	asrs	r5, r5, #2
 800ccf6:	d03d      	beq.n	800cd74 <__pow5mult+0xa0>
 800ccf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ccfa:	b97c      	cbnz	r4, 800cd1c <__pow5mult+0x48>
 800ccfc:	2010      	movs	r0, #16
 800ccfe:	f7ff fdbf 	bl	800c880 <malloc>
 800cd02:	4602      	mov	r2, r0
 800cd04:	6270      	str	r0, [r6, #36]	; 0x24
 800cd06:	b928      	cbnz	r0, 800cd14 <__pow5mult+0x40>
 800cd08:	4b1d      	ldr	r3, [pc, #116]	; (800cd80 <__pow5mult+0xac>)
 800cd0a:	481e      	ldr	r0, [pc, #120]	; (800cd84 <__pow5mult+0xb0>)
 800cd0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd10:	f001 f8fa 	bl	800df08 <__assert_func>
 800cd14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd18:	6004      	str	r4, [r0, #0]
 800cd1a:	60c4      	str	r4, [r0, #12]
 800cd1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd24:	b94c      	cbnz	r4, 800cd3a <__pow5mult+0x66>
 800cd26:	f240 2171 	movw	r1, #625	; 0x271
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7ff ff16 	bl	800cb5c <__i2b>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd36:	4604      	mov	r4, r0
 800cd38:	6003      	str	r3, [r0, #0]
 800cd3a:	f04f 0900 	mov.w	r9, #0
 800cd3e:	07eb      	lsls	r3, r5, #31
 800cd40:	d50a      	bpl.n	800cd58 <__pow5mult+0x84>
 800cd42:	4639      	mov	r1, r7
 800cd44:	4622      	mov	r2, r4
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7ff ff1e 	bl	800cb88 <__multiply>
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	4680      	mov	r8, r0
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff fdfd 	bl	800c950 <_Bfree>
 800cd56:	4647      	mov	r7, r8
 800cd58:	106d      	asrs	r5, r5, #1
 800cd5a:	d00b      	beq.n	800cd74 <__pow5mult+0xa0>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	b938      	cbnz	r0, 800cd70 <__pow5mult+0x9c>
 800cd60:	4622      	mov	r2, r4
 800cd62:	4621      	mov	r1, r4
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7ff ff0f 	bl	800cb88 <__multiply>
 800cd6a:	6020      	str	r0, [r4, #0]
 800cd6c:	f8c0 9000 	str.w	r9, [r0]
 800cd70:	4604      	mov	r4, r0
 800cd72:	e7e4      	b.n	800cd3e <__pow5mult+0x6a>
 800cd74:	4638      	mov	r0, r7
 800cd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0800fae8 	.word	0x0800fae8
 800cd80:	0800f88e 	.word	0x0800f88e
 800cd84:	0800f994 	.word	0x0800f994

0800cd88 <__lshift>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	6849      	ldr	r1, [r1, #4]
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd96:	68a3      	ldr	r3, [r4, #8]
 800cd98:	4607      	mov	r7, r0
 800cd9a:	4691      	mov	r9, r2
 800cd9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cda0:	f108 0601 	add.w	r6, r8, #1
 800cda4:	42b3      	cmp	r3, r6
 800cda6:	db0b      	blt.n	800cdc0 <__lshift+0x38>
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f7ff fd91 	bl	800c8d0 <_Balloc>
 800cdae:	4605      	mov	r5, r0
 800cdb0:	b948      	cbnz	r0, 800cdc6 <__lshift+0x3e>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	4b28      	ldr	r3, [pc, #160]	; (800ce58 <__lshift+0xd0>)
 800cdb6:	4829      	ldr	r0, [pc, #164]	; (800ce5c <__lshift+0xd4>)
 800cdb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cdbc:	f001 f8a4 	bl	800df08 <__assert_func>
 800cdc0:	3101      	adds	r1, #1
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	e7ee      	b.n	800cda4 <__lshift+0x1c>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f100 0114 	add.w	r1, r0, #20
 800cdcc:	f100 0210 	add.w	r2, r0, #16
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	4553      	cmp	r3, sl
 800cdd4:	db33      	blt.n	800ce3e <__lshift+0xb6>
 800cdd6:	6920      	ldr	r0, [r4, #16]
 800cdd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cddc:	f104 0314 	add.w	r3, r4, #20
 800cde0:	f019 091f 	ands.w	r9, r9, #31
 800cde4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cde8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdec:	d02b      	beq.n	800ce46 <__lshift+0xbe>
 800cdee:	f1c9 0e20 	rsb	lr, r9, #32
 800cdf2:	468a      	mov	sl, r1
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	6818      	ldr	r0, [r3, #0]
 800cdf8:	fa00 f009 	lsl.w	r0, r0, r9
 800cdfc:	4302      	orrs	r2, r0
 800cdfe:	f84a 2b04 	str.w	r2, [sl], #4
 800ce02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce06:	459c      	cmp	ip, r3
 800ce08:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce0c:	d8f3      	bhi.n	800cdf6 <__lshift+0x6e>
 800ce0e:	ebac 0304 	sub.w	r3, ip, r4
 800ce12:	3b15      	subs	r3, #21
 800ce14:	f023 0303 	bic.w	r3, r3, #3
 800ce18:	3304      	adds	r3, #4
 800ce1a:	f104 0015 	add.w	r0, r4, #21
 800ce1e:	4584      	cmp	ip, r0
 800ce20:	bf38      	it	cc
 800ce22:	2304      	movcc	r3, #4
 800ce24:	50ca      	str	r2, [r1, r3]
 800ce26:	b10a      	cbz	r2, 800ce2c <__lshift+0xa4>
 800ce28:	f108 0602 	add.w	r6, r8, #2
 800ce2c:	3e01      	subs	r6, #1
 800ce2e:	4638      	mov	r0, r7
 800ce30:	612e      	str	r6, [r5, #16]
 800ce32:	4621      	mov	r1, r4
 800ce34:	f7ff fd8c 	bl	800c950 <_Bfree>
 800ce38:	4628      	mov	r0, r5
 800ce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce42:	3301      	adds	r3, #1
 800ce44:	e7c5      	b.n	800cdd2 <__lshift+0x4a>
 800ce46:	3904      	subs	r1, #4
 800ce48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce50:	459c      	cmp	ip, r3
 800ce52:	d8f9      	bhi.n	800ce48 <__lshift+0xc0>
 800ce54:	e7ea      	b.n	800ce2c <__lshift+0xa4>
 800ce56:	bf00      	nop
 800ce58:	0800f904 	.word	0x0800f904
 800ce5c:	0800f994 	.word	0x0800f994

0800ce60 <__mcmp>:
 800ce60:	b530      	push	{r4, r5, lr}
 800ce62:	6902      	ldr	r2, [r0, #16]
 800ce64:	690c      	ldr	r4, [r1, #16]
 800ce66:	1b12      	subs	r2, r2, r4
 800ce68:	d10e      	bne.n	800ce88 <__mcmp+0x28>
 800ce6a:	f100 0314 	add.w	r3, r0, #20
 800ce6e:	3114      	adds	r1, #20
 800ce70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce80:	42a5      	cmp	r5, r4
 800ce82:	d003      	beq.n	800ce8c <__mcmp+0x2c>
 800ce84:	d305      	bcc.n	800ce92 <__mcmp+0x32>
 800ce86:	2201      	movs	r2, #1
 800ce88:	4610      	mov	r0, r2
 800ce8a:	bd30      	pop	{r4, r5, pc}
 800ce8c:	4283      	cmp	r3, r0
 800ce8e:	d3f3      	bcc.n	800ce78 <__mcmp+0x18>
 800ce90:	e7fa      	b.n	800ce88 <__mcmp+0x28>
 800ce92:	f04f 32ff 	mov.w	r2, #4294967295
 800ce96:	e7f7      	b.n	800ce88 <__mcmp+0x28>

0800ce98 <__mdiff>:
 800ce98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4606      	mov	r6, r0
 800cea0:	4611      	mov	r1, r2
 800cea2:	4620      	mov	r0, r4
 800cea4:	4617      	mov	r7, r2
 800cea6:	f7ff ffdb 	bl	800ce60 <__mcmp>
 800ceaa:	1e05      	subs	r5, r0, #0
 800ceac:	d110      	bne.n	800ced0 <__mdiff+0x38>
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7ff fd0d 	bl	800c8d0 <_Balloc>
 800ceb6:	b930      	cbnz	r0, 800cec6 <__mdiff+0x2e>
 800ceb8:	4b39      	ldr	r3, [pc, #228]	; (800cfa0 <__mdiff+0x108>)
 800ceba:	4602      	mov	r2, r0
 800cebc:	f240 2132 	movw	r1, #562	; 0x232
 800cec0:	4838      	ldr	r0, [pc, #224]	; (800cfa4 <__mdiff+0x10c>)
 800cec2:	f001 f821 	bl	800df08 <__assert_func>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced0:	bfa4      	itt	ge
 800ced2:	463b      	movge	r3, r7
 800ced4:	4627      	movge	r7, r4
 800ced6:	4630      	mov	r0, r6
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	bfa6      	itte	ge
 800cedc:	461c      	movge	r4, r3
 800cede:	2500      	movge	r5, #0
 800cee0:	2501      	movlt	r5, #1
 800cee2:	f7ff fcf5 	bl	800c8d0 <_Balloc>
 800cee6:	b920      	cbnz	r0, 800cef2 <__mdiff+0x5a>
 800cee8:	4b2d      	ldr	r3, [pc, #180]	; (800cfa0 <__mdiff+0x108>)
 800ceea:	4602      	mov	r2, r0
 800ceec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cef0:	e7e6      	b.n	800cec0 <__mdiff+0x28>
 800cef2:	693e      	ldr	r6, [r7, #16]
 800cef4:	60c5      	str	r5, [r0, #12]
 800cef6:	6925      	ldr	r5, [r4, #16]
 800cef8:	f107 0114 	add.w	r1, r7, #20
 800cefc:	f104 0914 	add.w	r9, r4, #20
 800cf00:	f100 0e14 	add.w	lr, r0, #20
 800cf04:	f107 0210 	add.w	r2, r7, #16
 800cf08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cf0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cf10:	46f2      	mov	sl, lr
 800cf12:	2700      	movs	r7, #0
 800cf14:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf1c:	fa1f f883 	uxth.w	r8, r3
 800cf20:	fa17 f78b 	uxtah	r7, r7, fp
 800cf24:	0c1b      	lsrs	r3, r3, #16
 800cf26:	eba7 0808 	sub.w	r8, r7, r8
 800cf2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf32:	fa1f f888 	uxth.w	r8, r8
 800cf36:	141f      	asrs	r7, r3, #16
 800cf38:	454d      	cmp	r5, r9
 800cf3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf3e:	f84a 3b04 	str.w	r3, [sl], #4
 800cf42:	d8e7      	bhi.n	800cf14 <__mdiff+0x7c>
 800cf44:	1b2b      	subs	r3, r5, r4
 800cf46:	3b15      	subs	r3, #21
 800cf48:	f023 0303 	bic.w	r3, r3, #3
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	3415      	adds	r4, #21
 800cf50:	42a5      	cmp	r5, r4
 800cf52:	bf38      	it	cc
 800cf54:	2304      	movcc	r3, #4
 800cf56:	4419      	add	r1, r3
 800cf58:	4473      	add	r3, lr
 800cf5a:	469e      	mov	lr, r3
 800cf5c:	460d      	mov	r5, r1
 800cf5e:	4565      	cmp	r5, ip
 800cf60:	d30e      	bcc.n	800cf80 <__mdiff+0xe8>
 800cf62:	f10c 0203 	add.w	r2, ip, #3
 800cf66:	1a52      	subs	r2, r2, r1
 800cf68:	f022 0203 	bic.w	r2, r2, #3
 800cf6c:	3903      	subs	r1, #3
 800cf6e:	458c      	cmp	ip, r1
 800cf70:	bf38      	it	cc
 800cf72:	2200      	movcc	r2, #0
 800cf74:	441a      	add	r2, r3
 800cf76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf7a:	b17b      	cbz	r3, 800cf9c <__mdiff+0x104>
 800cf7c:	6106      	str	r6, [r0, #16]
 800cf7e:	e7a5      	b.n	800cecc <__mdiff+0x34>
 800cf80:	f855 8b04 	ldr.w	r8, [r5], #4
 800cf84:	fa17 f488 	uxtah	r4, r7, r8
 800cf88:	1422      	asrs	r2, r4, #16
 800cf8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cf8e:	b2a4      	uxth	r4, r4
 800cf90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cf94:	f84e 4b04 	str.w	r4, [lr], #4
 800cf98:	1417      	asrs	r7, r2, #16
 800cf9a:	e7e0      	b.n	800cf5e <__mdiff+0xc6>
 800cf9c:	3e01      	subs	r6, #1
 800cf9e:	e7ea      	b.n	800cf76 <__mdiff+0xde>
 800cfa0:	0800f904 	.word	0x0800f904
 800cfa4:	0800f994 	.word	0x0800f994

0800cfa8 <__ulp>:
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	ed8d 0b00 	vstr	d0, [sp]
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	4912      	ldr	r1, [pc, #72]	; (800cffc <__ulp+0x54>)
 800cfb2:	4019      	ands	r1, r3
 800cfb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	dd05      	ble.n	800cfc8 <__ulp+0x20>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	ec43 2b10 	vmov	d0, r2, r3
 800cfc4:	b002      	add	sp, #8
 800cfc6:	4770      	bx	lr
 800cfc8:	4249      	negs	r1, r1
 800cfca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cfce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cfd2:	f04f 0200 	mov.w	r2, #0
 800cfd6:	f04f 0300 	mov.w	r3, #0
 800cfda:	da04      	bge.n	800cfe6 <__ulp+0x3e>
 800cfdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cfe0:	fa41 f300 	asr.w	r3, r1, r0
 800cfe4:	e7ec      	b.n	800cfc0 <__ulp+0x18>
 800cfe6:	f1a0 0114 	sub.w	r1, r0, #20
 800cfea:	291e      	cmp	r1, #30
 800cfec:	bfda      	itte	le
 800cfee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cff2:	fa20 f101 	lsrle.w	r1, r0, r1
 800cff6:	2101      	movgt	r1, #1
 800cff8:	460a      	mov	r2, r1
 800cffa:	e7e1      	b.n	800cfc0 <__ulp+0x18>
 800cffc:	7ff00000 	.word	0x7ff00000

0800d000 <__b2d>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	6905      	ldr	r5, [r0, #16]
 800d004:	f100 0714 	add.w	r7, r0, #20
 800d008:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d00c:	1f2e      	subs	r6, r5, #4
 800d00e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d012:	4620      	mov	r0, r4
 800d014:	f7ff fd52 	bl	800cabc <__hi0bits>
 800d018:	f1c0 0320 	rsb	r3, r0, #32
 800d01c:	280a      	cmp	r0, #10
 800d01e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d09c <__b2d+0x9c>
 800d022:	600b      	str	r3, [r1, #0]
 800d024:	dc14      	bgt.n	800d050 <__b2d+0x50>
 800d026:	f1c0 0e0b 	rsb	lr, r0, #11
 800d02a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d02e:	42b7      	cmp	r7, r6
 800d030:	ea41 030c 	orr.w	r3, r1, ip
 800d034:	bf34      	ite	cc
 800d036:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d03a:	2100      	movcs	r1, #0
 800d03c:	3015      	adds	r0, #21
 800d03e:	fa04 f000 	lsl.w	r0, r4, r0
 800d042:	fa21 f10e 	lsr.w	r1, r1, lr
 800d046:	ea40 0201 	orr.w	r2, r0, r1
 800d04a:	ec43 2b10 	vmov	d0, r2, r3
 800d04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d050:	42b7      	cmp	r7, r6
 800d052:	bf3a      	itte	cc
 800d054:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d058:	f1a5 0608 	subcc.w	r6, r5, #8
 800d05c:	2100      	movcs	r1, #0
 800d05e:	380b      	subs	r0, #11
 800d060:	d017      	beq.n	800d092 <__b2d+0x92>
 800d062:	f1c0 0c20 	rsb	ip, r0, #32
 800d066:	fa04 f500 	lsl.w	r5, r4, r0
 800d06a:	42be      	cmp	r6, r7
 800d06c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d070:	ea45 0504 	orr.w	r5, r5, r4
 800d074:	bf8c      	ite	hi
 800d076:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d07a:	2400      	movls	r4, #0
 800d07c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d080:	fa01 f000 	lsl.w	r0, r1, r0
 800d084:	fa24 f40c 	lsr.w	r4, r4, ip
 800d088:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d08c:	ea40 0204 	orr.w	r2, r0, r4
 800d090:	e7db      	b.n	800d04a <__b2d+0x4a>
 800d092:	ea44 030c 	orr.w	r3, r4, ip
 800d096:	460a      	mov	r2, r1
 800d098:	e7d7      	b.n	800d04a <__b2d+0x4a>
 800d09a:	bf00      	nop
 800d09c:	3ff00000 	.word	0x3ff00000

0800d0a0 <__d2b>:
 800d0a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0a4:	4689      	mov	r9, r1
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	ec57 6b10 	vmov	r6, r7, d0
 800d0ac:	4690      	mov	r8, r2
 800d0ae:	f7ff fc0f 	bl	800c8d0 <_Balloc>
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	b930      	cbnz	r0, 800d0c4 <__d2b+0x24>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	4b25      	ldr	r3, [pc, #148]	; (800d150 <__d2b+0xb0>)
 800d0ba:	4826      	ldr	r0, [pc, #152]	; (800d154 <__d2b+0xb4>)
 800d0bc:	f240 310a 	movw	r1, #778	; 0x30a
 800d0c0:	f000 ff22 	bl	800df08 <__assert_func>
 800d0c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0cc:	bb35      	cbnz	r5, 800d11c <__d2b+0x7c>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	d028      	beq.n	800d126 <__d2b+0x86>
 800d0d4:	4668      	mov	r0, sp
 800d0d6:	9600      	str	r6, [sp, #0]
 800d0d8:	f7ff fd10 	bl	800cafc <__lo0bits>
 800d0dc:	9900      	ldr	r1, [sp, #0]
 800d0de:	b300      	cbz	r0, 800d122 <__d2b+0x82>
 800d0e0:	9a01      	ldr	r2, [sp, #4]
 800d0e2:	f1c0 0320 	rsb	r3, r0, #32
 800d0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ea:	430b      	orrs	r3, r1
 800d0ec:	40c2      	lsrs	r2, r0
 800d0ee:	6163      	str	r3, [r4, #20]
 800d0f0:	9201      	str	r2, [sp, #4]
 800d0f2:	9b01      	ldr	r3, [sp, #4]
 800d0f4:	61a3      	str	r3, [r4, #24]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bf14      	ite	ne
 800d0fa:	2202      	movne	r2, #2
 800d0fc:	2201      	moveq	r2, #1
 800d0fe:	6122      	str	r2, [r4, #16]
 800d100:	b1d5      	cbz	r5, 800d138 <__d2b+0x98>
 800d102:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d106:	4405      	add	r5, r0
 800d108:	f8c9 5000 	str.w	r5, [r9]
 800d10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d110:	f8c8 0000 	str.w	r0, [r8]
 800d114:	4620      	mov	r0, r4
 800d116:	b003      	add	sp, #12
 800d118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d11c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d120:	e7d5      	b.n	800d0ce <__d2b+0x2e>
 800d122:	6161      	str	r1, [r4, #20]
 800d124:	e7e5      	b.n	800d0f2 <__d2b+0x52>
 800d126:	a801      	add	r0, sp, #4
 800d128:	f7ff fce8 	bl	800cafc <__lo0bits>
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	2201      	movs	r2, #1
 800d132:	6122      	str	r2, [r4, #16]
 800d134:	3020      	adds	r0, #32
 800d136:	e7e3      	b.n	800d100 <__d2b+0x60>
 800d138:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d13c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d140:	f8c9 0000 	str.w	r0, [r9]
 800d144:	6918      	ldr	r0, [r3, #16]
 800d146:	f7ff fcb9 	bl	800cabc <__hi0bits>
 800d14a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d14e:	e7df      	b.n	800d110 <__d2b+0x70>
 800d150:	0800f904 	.word	0x0800f904
 800d154:	0800f994 	.word	0x0800f994

0800d158 <__ratio>:
 800d158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	468a      	mov	sl, r1
 800d15e:	4669      	mov	r1, sp
 800d160:	4683      	mov	fp, r0
 800d162:	f7ff ff4d 	bl	800d000 <__b2d>
 800d166:	a901      	add	r1, sp, #4
 800d168:	4650      	mov	r0, sl
 800d16a:	ec59 8b10 	vmov	r8, r9, d0
 800d16e:	ee10 6a10 	vmov	r6, s0
 800d172:	f7ff ff45 	bl	800d000 <__b2d>
 800d176:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d17a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800d17e:	eba3 0c02 	sub.w	ip, r3, r2
 800d182:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d186:	1a9b      	subs	r3, r3, r2
 800d188:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d18c:	ec55 4b10 	vmov	r4, r5, d0
 800d190:	2b00      	cmp	r3, #0
 800d192:	ee10 0a10 	vmov	r0, s0
 800d196:	bfce      	itee	gt
 800d198:	464a      	movgt	r2, r9
 800d19a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d19e:	462a      	movle	r2, r5
 800d1a0:	464f      	mov	r7, r9
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	bfcc      	ite	gt
 800d1a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d1aa:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d1ae:	ec47 6b17 	vmov	d7, r6, r7
 800d1b2:	ec41 0b16 	vmov	d6, r0, r1
 800d1b6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800d1ba:	b003      	add	sp, #12
 800d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1c0 <__copybits>:
 800d1c0:	3901      	subs	r1, #1
 800d1c2:	b570      	push	{r4, r5, r6, lr}
 800d1c4:	1149      	asrs	r1, r1, #5
 800d1c6:	6914      	ldr	r4, [r2, #16]
 800d1c8:	3101      	adds	r1, #1
 800d1ca:	f102 0314 	add.w	r3, r2, #20
 800d1ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1d6:	1f05      	subs	r5, r0, #4
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d30c      	bcc.n	800d1f6 <__copybits+0x36>
 800d1dc:	1aa3      	subs	r3, r4, r2
 800d1de:	3b11      	subs	r3, #17
 800d1e0:	f023 0303 	bic.w	r3, r3, #3
 800d1e4:	3211      	adds	r2, #17
 800d1e6:	42a2      	cmp	r2, r4
 800d1e8:	bf88      	it	hi
 800d1ea:	2300      	movhi	r3, #0
 800d1ec:	4418      	add	r0, r3
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4288      	cmp	r0, r1
 800d1f2:	d305      	bcc.n	800d200 <__copybits+0x40>
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
 800d1f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1fe:	e7eb      	b.n	800d1d8 <__copybits+0x18>
 800d200:	f840 3b04 	str.w	r3, [r0], #4
 800d204:	e7f4      	b.n	800d1f0 <__copybits+0x30>

0800d206 <__any_on>:
 800d206:	f100 0214 	add.w	r2, r0, #20
 800d20a:	6900      	ldr	r0, [r0, #16]
 800d20c:	114b      	asrs	r3, r1, #5
 800d20e:	4298      	cmp	r0, r3
 800d210:	b510      	push	{r4, lr}
 800d212:	db11      	blt.n	800d238 <__any_on+0x32>
 800d214:	dd0a      	ble.n	800d22c <__any_on+0x26>
 800d216:	f011 011f 	ands.w	r1, r1, #31
 800d21a:	d007      	beq.n	800d22c <__any_on+0x26>
 800d21c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d220:	fa24 f001 	lsr.w	r0, r4, r1
 800d224:	fa00 f101 	lsl.w	r1, r0, r1
 800d228:	428c      	cmp	r4, r1
 800d22a:	d10b      	bne.n	800d244 <__any_on+0x3e>
 800d22c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d230:	4293      	cmp	r3, r2
 800d232:	d803      	bhi.n	800d23c <__any_on+0x36>
 800d234:	2000      	movs	r0, #0
 800d236:	bd10      	pop	{r4, pc}
 800d238:	4603      	mov	r3, r0
 800d23a:	e7f7      	b.n	800d22c <__any_on+0x26>
 800d23c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d240:	2900      	cmp	r1, #0
 800d242:	d0f5      	beq.n	800d230 <__any_on+0x2a>
 800d244:	2001      	movs	r0, #1
 800d246:	e7f6      	b.n	800d236 <__any_on+0x30>

0800d248 <_calloc_r>:
 800d248:	b513      	push	{r0, r1, r4, lr}
 800d24a:	434a      	muls	r2, r1
 800d24c:	4611      	mov	r1, r2
 800d24e:	9201      	str	r2, [sp, #4]
 800d250:	f000 f85a 	bl	800d308 <_malloc_r>
 800d254:	4604      	mov	r4, r0
 800d256:	b118      	cbz	r0, 800d260 <_calloc_r+0x18>
 800d258:	9a01      	ldr	r2, [sp, #4]
 800d25a:	2100      	movs	r1, #0
 800d25c:	f7fc fbca 	bl	80099f4 <memset>
 800d260:	4620      	mov	r0, r4
 800d262:	b002      	add	sp, #8
 800d264:	bd10      	pop	{r4, pc}
	...

0800d268 <_free_r>:
 800d268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d26a:	2900      	cmp	r1, #0
 800d26c:	d048      	beq.n	800d300 <_free_r+0x98>
 800d26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d272:	9001      	str	r0, [sp, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	f1a1 0404 	sub.w	r4, r1, #4
 800d27a:	bfb8      	it	lt
 800d27c:	18e4      	addlt	r4, r4, r3
 800d27e:	f001 f847 	bl	800e310 <__malloc_lock>
 800d282:	4a20      	ldr	r2, [pc, #128]	; (800d304 <_free_r+0x9c>)
 800d284:	9801      	ldr	r0, [sp, #4]
 800d286:	6813      	ldr	r3, [r2, #0]
 800d288:	4615      	mov	r5, r2
 800d28a:	b933      	cbnz	r3, 800d29a <_free_r+0x32>
 800d28c:	6063      	str	r3, [r4, #4]
 800d28e:	6014      	str	r4, [r2, #0]
 800d290:	b003      	add	sp, #12
 800d292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d296:	f001 b841 	b.w	800e31c <__malloc_unlock>
 800d29a:	42a3      	cmp	r3, r4
 800d29c:	d90b      	bls.n	800d2b6 <_free_r+0x4e>
 800d29e:	6821      	ldr	r1, [r4, #0]
 800d2a0:	1862      	adds	r2, r4, r1
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	bf04      	itt	eq
 800d2a6:	681a      	ldreq	r2, [r3, #0]
 800d2a8:	685b      	ldreq	r3, [r3, #4]
 800d2aa:	6063      	str	r3, [r4, #4]
 800d2ac:	bf04      	itt	eq
 800d2ae:	1852      	addeq	r2, r2, r1
 800d2b0:	6022      	streq	r2, [r4, #0]
 800d2b2:	602c      	str	r4, [r5, #0]
 800d2b4:	e7ec      	b.n	800d290 <_free_r+0x28>
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	b10b      	cbz	r3, 800d2c0 <_free_r+0x58>
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	d9fa      	bls.n	800d2b6 <_free_r+0x4e>
 800d2c0:	6811      	ldr	r1, [r2, #0]
 800d2c2:	1855      	adds	r5, r2, r1
 800d2c4:	42a5      	cmp	r5, r4
 800d2c6:	d10b      	bne.n	800d2e0 <_free_r+0x78>
 800d2c8:	6824      	ldr	r4, [r4, #0]
 800d2ca:	4421      	add	r1, r4
 800d2cc:	1854      	adds	r4, r2, r1
 800d2ce:	42a3      	cmp	r3, r4
 800d2d0:	6011      	str	r1, [r2, #0]
 800d2d2:	d1dd      	bne.n	800d290 <_free_r+0x28>
 800d2d4:	681c      	ldr	r4, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	6053      	str	r3, [r2, #4]
 800d2da:	4421      	add	r1, r4
 800d2dc:	6011      	str	r1, [r2, #0]
 800d2de:	e7d7      	b.n	800d290 <_free_r+0x28>
 800d2e0:	d902      	bls.n	800d2e8 <_free_r+0x80>
 800d2e2:	230c      	movs	r3, #12
 800d2e4:	6003      	str	r3, [r0, #0]
 800d2e6:	e7d3      	b.n	800d290 <_free_r+0x28>
 800d2e8:	6825      	ldr	r5, [r4, #0]
 800d2ea:	1961      	adds	r1, r4, r5
 800d2ec:	428b      	cmp	r3, r1
 800d2ee:	bf04      	itt	eq
 800d2f0:	6819      	ldreq	r1, [r3, #0]
 800d2f2:	685b      	ldreq	r3, [r3, #4]
 800d2f4:	6063      	str	r3, [r4, #4]
 800d2f6:	bf04      	itt	eq
 800d2f8:	1949      	addeq	r1, r1, r5
 800d2fa:	6021      	streq	r1, [r4, #0]
 800d2fc:	6054      	str	r4, [r2, #4]
 800d2fe:	e7c7      	b.n	800d290 <_free_r+0x28>
 800d300:	b003      	add	sp, #12
 800d302:	bd30      	pop	{r4, r5, pc}
 800d304:	20000348 	.word	0x20000348

0800d308 <_malloc_r>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	1ccd      	adds	r5, r1, #3
 800d30c:	f025 0503 	bic.w	r5, r5, #3
 800d310:	3508      	adds	r5, #8
 800d312:	2d0c      	cmp	r5, #12
 800d314:	bf38      	it	cc
 800d316:	250c      	movcc	r5, #12
 800d318:	2d00      	cmp	r5, #0
 800d31a:	4606      	mov	r6, r0
 800d31c:	db01      	blt.n	800d322 <_malloc_r+0x1a>
 800d31e:	42a9      	cmp	r1, r5
 800d320:	d903      	bls.n	800d32a <_malloc_r+0x22>
 800d322:	230c      	movs	r3, #12
 800d324:	6033      	str	r3, [r6, #0]
 800d326:	2000      	movs	r0, #0
 800d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d32a:	f000 fff1 	bl	800e310 <__malloc_lock>
 800d32e:	4921      	ldr	r1, [pc, #132]	; (800d3b4 <_malloc_r+0xac>)
 800d330:	680a      	ldr	r2, [r1, #0]
 800d332:	4614      	mov	r4, r2
 800d334:	b99c      	cbnz	r4, 800d35e <_malloc_r+0x56>
 800d336:	4f20      	ldr	r7, [pc, #128]	; (800d3b8 <_malloc_r+0xb0>)
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	b923      	cbnz	r3, 800d346 <_malloc_r+0x3e>
 800d33c:	4621      	mov	r1, r4
 800d33e:	4630      	mov	r0, r6
 800d340:	f000 fcd2 	bl	800dce8 <_sbrk_r>
 800d344:	6038      	str	r0, [r7, #0]
 800d346:	4629      	mov	r1, r5
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 fccd 	bl	800dce8 <_sbrk_r>
 800d34e:	1c43      	adds	r3, r0, #1
 800d350:	d123      	bne.n	800d39a <_malloc_r+0x92>
 800d352:	230c      	movs	r3, #12
 800d354:	6033      	str	r3, [r6, #0]
 800d356:	4630      	mov	r0, r6
 800d358:	f000 ffe0 	bl	800e31c <__malloc_unlock>
 800d35c:	e7e3      	b.n	800d326 <_malloc_r+0x1e>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	1b5b      	subs	r3, r3, r5
 800d362:	d417      	bmi.n	800d394 <_malloc_r+0x8c>
 800d364:	2b0b      	cmp	r3, #11
 800d366:	d903      	bls.n	800d370 <_malloc_r+0x68>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	441c      	add	r4, r3
 800d36c:	6025      	str	r5, [r4, #0]
 800d36e:	e004      	b.n	800d37a <_malloc_r+0x72>
 800d370:	6863      	ldr	r3, [r4, #4]
 800d372:	42a2      	cmp	r2, r4
 800d374:	bf0c      	ite	eq
 800d376:	600b      	streq	r3, [r1, #0]
 800d378:	6053      	strne	r3, [r2, #4]
 800d37a:	4630      	mov	r0, r6
 800d37c:	f000 ffce 	bl	800e31c <__malloc_unlock>
 800d380:	f104 000b 	add.w	r0, r4, #11
 800d384:	1d23      	adds	r3, r4, #4
 800d386:	f020 0007 	bic.w	r0, r0, #7
 800d38a:	1ac2      	subs	r2, r0, r3
 800d38c:	d0cc      	beq.n	800d328 <_malloc_r+0x20>
 800d38e:	1a1b      	subs	r3, r3, r0
 800d390:	50a3      	str	r3, [r4, r2]
 800d392:	e7c9      	b.n	800d328 <_malloc_r+0x20>
 800d394:	4622      	mov	r2, r4
 800d396:	6864      	ldr	r4, [r4, #4]
 800d398:	e7cc      	b.n	800d334 <_malloc_r+0x2c>
 800d39a:	1cc4      	adds	r4, r0, #3
 800d39c:	f024 0403 	bic.w	r4, r4, #3
 800d3a0:	42a0      	cmp	r0, r4
 800d3a2:	d0e3      	beq.n	800d36c <_malloc_r+0x64>
 800d3a4:	1a21      	subs	r1, r4, r0
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f000 fc9e 	bl	800dce8 <_sbrk_r>
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d1dd      	bne.n	800d36c <_malloc_r+0x64>
 800d3b0:	e7cf      	b.n	800d352 <_malloc_r+0x4a>
 800d3b2:	bf00      	nop
 800d3b4:	20000348 	.word	0x20000348
 800d3b8:	2000034c 	.word	0x2000034c

0800d3bc <__ssputs_r>:
 800d3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c0:	688e      	ldr	r6, [r1, #8]
 800d3c2:	429e      	cmp	r6, r3
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	4690      	mov	r8, r2
 800d3ca:	461f      	mov	r7, r3
 800d3cc:	d838      	bhi.n	800d440 <__ssputs_r+0x84>
 800d3ce:	898a      	ldrh	r2, [r1, #12]
 800d3d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3d4:	d032      	beq.n	800d43c <__ssputs_r+0x80>
 800d3d6:	6825      	ldr	r5, [r4, #0]
 800d3d8:	6909      	ldr	r1, [r1, #16]
 800d3da:	eba5 0901 	sub.w	r9, r5, r1
 800d3de:	6965      	ldr	r5, [r4, #20]
 800d3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	444b      	add	r3, r9
 800d3ec:	106d      	asrs	r5, r5, #1
 800d3ee:	429d      	cmp	r5, r3
 800d3f0:	bf38      	it	cc
 800d3f2:	461d      	movcc	r5, r3
 800d3f4:	0553      	lsls	r3, r2, #21
 800d3f6:	d531      	bpl.n	800d45c <__ssputs_r+0xa0>
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	f7ff ff85 	bl	800d308 <_malloc_r>
 800d3fe:	4606      	mov	r6, r0
 800d400:	b950      	cbnz	r0, 800d418 <__ssputs_r+0x5c>
 800d402:	230c      	movs	r3, #12
 800d404:	f8ca 3000 	str.w	r3, [sl]
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40e:	81a3      	strh	r3, [r4, #12]
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
 800d414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d418:	6921      	ldr	r1, [r4, #16]
 800d41a:	464a      	mov	r2, r9
 800d41c:	f7ff fa4a 	bl	800c8b4 <memcpy>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	6126      	str	r6, [r4, #16]
 800d42e:	6165      	str	r5, [r4, #20]
 800d430:	444e      	add	r6, r9
 800d432:	eba5 0509 	sub.w	r5, r5, r9
 800d436:	6026      	str	r6, [r4, #0]
 800d438:	60a5      	str	r5, [r4, #8]
 800d43a:	463e      	mov	r6, r7
 800d43c:	42be      	cmp	r6, r7
 800d43e:	d900      	bls.n	800d442 <__ssputs_r+0x86>
 800d440:	463e      	mov	r6, r7
 800d442:	4632      	mov	r2, r6
 800d444:	6820      	ldr	r0, [r4, #0]
 800d446:	4641      	mov	r1, r8
 800d448:	f000 ff48 	bl	800e2dc <memmove>
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	6822      	ldr	r2, [r4, #0]
 800d450:	1b9b      	subs	r3, r3, r6
 800d452:	4432      	add	r2, r6
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	6022      	str	r2, [r4, #0]
 800d458:	2000      	movs	r0, #0
 800d45a:	e7db      	b.n	800d414 <__ssputs_r+0x58>
 800d45c:	462a      	mov	r2, r5
 800d45e:	f000 ff63 	bl	800e328 <_realloc_r>
 800d462:	4606      	mov	r6, r0
 800d464:	2800      	cmp	r0, #0
 800d466:	d1e1      	bne.n	800d42c <__ssputs_r+0x70>
 800d468:	6921      	ldr	r1, [r4, #16]
 800d46a:	4650      	mov	r0, sl
 800d46c:	f7ff fefc 	bl	800d268 <_free_r>
 800d470:	e7c7      	b.n	800d402 <__ssputs_r+0x46>
	...

0800d474 <_svfiprintf_r>:
 800d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d478:	4698      	mov	r8, r3
 800d47a:	898b      	ldrh	r3, [r1, #12]
 800d47c:	061b      	lsls	r3, r3, #24
 800d47e:	b09d      	sub	sp, #116	; 0x74
 800d480:	4607      	mov	r7, r0
 800d482:	460d      	mov	r5, r1
 800d484:	4614      	mov	r4, r2
 800d486:	d50e      	bpl.n	800d4a6 <_svfiprintf_r+0x32>
 800d488:	690b      	ldr	r3, [r1, #16]
 800d48a:	b963      	cbnz	r3, 800d4a6 <_svfiprintf_r+0x32>
 800d48c:	2140      	movs	r1, #64	; 0x40
 800d48e:	f7ff ff3b 	bl	800d308 <_malloc_r>
 800d492:	6028      	str	r0, [r5, #0]
 800d494:	6128      	str	r0, [r5, #16]
 800d496:	b920      	cbnz	r0, 800d4a2 <_svfiprintf_r+0x2e>
 800d498:	230c      	movs	r3, #12
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	e0d1      	b.n	800d646 <_svfiprintf_r+0x1d2>
 800d4a2:	2340      	movs	r3, #64	; 0x40
 800d4a4:	616b      	str	r3, [r5, #20]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4aa:	2320      	movs	r3, #32
 800d4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4b4:	2330      	movs	r3, #48	; 0x30
 800d4b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d660 <_svfiprintf_r+0x1ec>
 800d4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4be:	f04f 0901 	mov.w	r9, #1
 800d4c2:	4623      	mov	r3, r4
 800d4c4:	469a      	mov	sl, r3
 800d4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4ca:	b10a      	cbz	r2, 800d4d0 <_svfiprintf_r+0x5c>
 800d4cc:	2a25      	cmp	r2, #37	; 0x25
 800d4ce:	d1f9      	bne.n	800d4c4 <_svfiprintf_r+0x50>
 800d4d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d4d4:	d00b      	beq.n	800d4ee <_svfiprintf_r+0x7a>
 800d4d6:	465b      	mov	r3, fp
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4629      	mov	r1, r5
 800d4dc:	4638      	mov	r0, r7
 800d4de:	f7ff ff6d 	bl	800d3bc <__ssputs_r>
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	f000 80aa 	beq.w	800d63c <_svfiprintf_r+0x1c8>
 800d4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ea:	445a      	add	r2, fp
 800d4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 80a2 	beq.w	800d63c <_svfiprintf_r+0x1c8>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d502:	f10a 0a01 	add.w	sl, sl, #1
 800d506:	9304      	str	r3, [sp, #16]
 800d508:	9307      	str	r3, [sp, #28]
 800d50a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d50e:	931a      	str	r3, [sp, #104]	; 0x68
 800d510:	4654      	mov	r4, sl
 800d512:	2205      	movs	r2, #5
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4851      	ldr	r0, [pc, #324]	; (800d660 <_svfiprintf_r+0x1ec>)
 800d51a:	f7f2 fea9 	bl	8000270 <memchr>
 800d51e:	9a04      	ldr	r2, [sp, #16]
 800d520:	b9d8      	cbnz	r0, 800d55a <_svfiprintf_r+0xe6>
 800d522:	06d0      	lsls	r0, r2, #27
 800d524:	bf44      	itt	mi
 800d526:	2320      	movmi	r3, #32
 800d528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d52c:	0711      	lsls	r1, r2, #28
 800d52e:	bf44      	itt	mi
 800d530:	232b      	movmi	r3, #43	; 0x2b
 800d532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d536:	f89a 3000 	ldrb.w	r3, [sl]
 800d53a:	2b2a      	cmp	r3, #42	; 0x2a
 800d53c:	d015      	beq.n	800d56a <_svfiprintf_r+0xf6>
 800d53e:	9a07      	ldr	r2, [sp, #28]
 800d540:	4654      	mov	r4, sl
 800d542:	2000      	movs	r0, #0
 800d544:	f04f 0c0a 	mov.w	ip, #10
 800d548:	4621      	mov	r1, r4
 800d54a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d54e:	3b30      	subs	r3, #48	; 0x30
 800d550:	2b09      	cmp	r3, #9
 800d552:	d94e      	bls.n	800d5f2 <_svfiprintf_r+0x17e>
 800d554:	b1b0      	cbz	r0, 800d584 <_svfiprintf_r+0x110>
 800d556:	9207      	str	r2, [sp, #28]
 800d558:	e014      	b.n	800d584 <_svfiprintf_r+0x110>
 800d55a:	eba0 0308 	sub.w	r3, r0, r8
 800d55e:	fa09 f303 	lsl.w	r3, r9, r3
 800d562:	4313      	orrs	r3, r2
 800d564:	9304      	str	r3, [sp, #16]
 800d566:	46a2      	mov	sl, r4
 800d568:	e7d2      	b.n	800d510 <_svfiprintf_r+0x9c>
 800d56a:	9b03      	ldr	r3, [sp, #12]
 800d56c:	1d19      	adds	r1, r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	9103      	str	r1, [sp, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	bfbb      	ittet	lt
 800d576:	425b      	neglt	r3, r3
 800d578:	f042 0202 	orrlt.w	r2, r2, #2
 800d57c:	9307      	strge	r3, [sp, #28]
 800d57e:	9307      	strlt	r3, [sp, #28]
 800d580:	bfb8      	it	lt
 800d582:	9204      	strlt	r2, [sp, #16]
 800d584:	7823      	ldrb	r3, [r4, #0]
 800d586:	2b2e      	cmp	r3, #46	; 0x2e
 800d588:	d10c      	bne.n	800d5a4 <_svfiprintf_r+0x130>
 800d58a:	7863      	ldrb	r3, [r4, #1]
 800d58c:	2b2a      	cmp	r3, #42	; 0x2a
 800d58e:	d135      	bne.n	800d5fc <_svfiprintf_r+0x188>
 800d590:	9b03      	ldr	r3, [sp, #12]
 800d592:	1d1a      	adds	r2, r3, #4
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	9203      	str	r2, [sp, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bfb8      	it	lt
 800d59c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5a0:	3402      	adds	r4, #2
 800d5a2:	9305      	str	r3, [sp, #20]
 800d5a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d670 <_svfiprintf_r+0x1fc>
 800d5a8:	7821      	ldrb	r1, [r4, #0]
 800d5aa:	2203      	movs	r2, #3
 800d5ac:	4650      	mov	r0, sl
 800d5ae:	f7f2 fe5f 	bl	8000270 <memchr>
 800d5b2:	b140      	cbz	r0, 800d5c6 <_svfiprintf_r+0x152>
 800d5b4:	2340      	movs	r3, #64	; 0x40
 800d5b6:	eba0 000a 	sub.w	r0, r0, sl
 800d5ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d5be:	9b04      	ldr	r3, [sp, #16]
 800d5c0:	4303      	orrs	r3, r0
 800d5c2:	3401      	adds	r4, #1
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ca:	4826      	ldr	r0, [pc, #152]	; (800d664 <_svfiprintf_r+0x1f0>)
 800d5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5d0:	2206      	movs	r2, #6
 800d5d2:	f7f2 fe4d 	bl	8000270 <memchr>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d038      	beq.n	800d64c <_svfiprintf_r+0x1d8>
 800d5da:	4b23      	ldr	r3, [pc, #140]	; (800d668 <_svfiprintf_r+0x1f4>)
 800d5dc:	bb1b      	cbnz	r3, 800d626 <_svfiprintf_r+0x1b2>
 800d5de:	9b03      	ldr	r3, [sp, #12]
 800d5e0:	3307      	adds	r3, #7
 800d5e2:	f023 0307 	bic.w	r3, r3, #7
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	9303      	str	r3, [sp, #12]
 800d5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ec:	4433      	add	r3, r6
 800d5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f0:	e767      	b.n	800d4c2 <_svfiprintf_r+0x4e>
 800d5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	2001      	movs	r0, #1
 800d5fa:	e7a5      	b.n	800d548 <_svfiprintf_r+0xd4>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	3401      	adds	r4, #1
 800d600:	9305      	str	r3, [sp, #20]
 800d602:	4619      	mov	r1, r3
 800d604:	f04f 0c0a 	mov.w	ip, #10
 800d608:	4620      	mov	r0, r4
 800d60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d60e:	3a30      	subs	r2, #48	; 0x30
 800d610:	2a09      	cmp	r2, #9
 800d612:	d903      	bls.n	800d61c <_svfiprintf_r+0x1a8>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0c5      	beq.n	800d5a4 <_svfiprintf_r+0x130>
 800d618:	9105      	str	r1, [sp, #20]
 800d61a:	e7c3      	b.n	800d5a4 <_svfiprintf_r+0x130>
 800d61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d620:	4604      	mov	r4, r0
 800d622:	2301      	movs	r3, #1
 800d624:	e7f0      	b.n	800d608 <_svfiprintf_r+0x194>
 800d626:	ab03      	add	r3, sp, #12
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	462a      	mov	r2, r5
 800d62c:	4b0f      	ldr	r3, [pc, #60]	; (800d66c <_svfiprintf_r+0x1f8>)
 800d62e:	a904      	add	r1, sp, #16
 800d630:	4638      	mov	r0, r7
 800d632:	f7fc fa79 	bl	8009b28 <_printf_float>
 800d636:	1c42      	adds	r2, r0, #1
 800d638:	4606      	mov	r6, r0
 800d63a:	d1d6      	bne.n	800d5ea <_svfiprintf_r+0x176>
 800d63c:	89ab      	ldrh	r3, [r5, #12]
 800d63e:	065b      	lsls	r3, r3, #25
 800d640:	f53f af2c 	bmi.w	800d49c <_svfiprintf_r+0x28>
 800d644:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d646:	b01d      	add	sp, #116	; 0x74
 800d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64c:	ab03      	add	r3, sp, #12
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	462a      	mov	r2, r5
 800d652:	4b06      	ldr	r3, [pc, #24]	; (800d66c <_svfiprintf_r+0x1f8>)
 800d654:	a904      	add	r1, sp, #16
 800d656:	4638      	mov	r0, r7
 800d658:	f7fc fcf2 	bl	800a040 <_printf_i>
 800d65c:	e7eb      	b.n	800d636 <_svfiprintf_r+0x1c2>
 800d65e:	bf00      	nop
 800d660:	0800faf4 	.word	0x0800faf4
 800d664:	0800fafe 	.word	0x0800fafe
 800d668:	08009b29 	.word	0x08009b29
 800d66c:	0800d3bd 	.word	0x0800d3bd
 800d670:	0800fafa 	.word	0x0800fafa

0800d674 <_sungetc_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	1c4b      	adds	r3, r1, #1
 800d678:	4614      	mov	r4, r2
 800d67a:	d103      	bne.n	800d684 <_sungetc_r+0x10>
 800d67c:	f04f 35ff 	mov.w	r5, #4294967295
 800d680:	4628      	mov	r0, r5
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	8993      	ldrh	r3, [r2, #12]
 800d686:	f023 0320 	bic.w	r3, r3, #32
 800d68a:	8193      	strh	r3, [r2, #12]
 800d68c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d68e:	6852      	ldr	r2, [r2, #4]
 800d690:	b2cd      	uxtb	r5, r1
 800d692:	b18b      	cbz	r3, 800d6b8 <_sungetc_r+0x44>
 800d694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d696:	4293      	cmp	r3, r2
 800d698:	dd08      	ble.n	800d6ac <_sungetc_r+0x38>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	1e5a      	subs	r2, r3, #1
 800d69e:	6022      	str	r2, [r4, #0]
 800d6a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d6a4:	6863      	ldr	r3, [r4, #4]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	6063      	str	r3, [r4, #4]
 800d6aa:	e7e9      	b.n	800d680 <_sungetc_r+0xc>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f000 fbe3 	bl	800de78 <__submore>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d0f1      	beq.n	800d69a <_sungetc_r+0x26>
 800d6b6:	e7e1      	b.n	800d67c <_sungetc_r+0x8>
 800d6b8:	6921      	ldr	r1, [r4, #16]
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	b151      	cbz	r1, 800d6d4 <_sungetc_r+0x60>
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	d208      	bcs.n	800d6d4 <_sungetc_r+0x60>
 800d6c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d6c6:	42a9      	cmp	r1, r5
 800d6c8:	d104      	bne.n	800d6d4 <_sungetc_r+0x60>
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	3201      	adds	r2, #1
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	6062      	str	r2, [r4, #4]
 800d6d2:	e7d5      	b.n	800d680 <_sungetc_r+0xc>
 800d6d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d6d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d6de:	2303      	movs	r3, #3
 800d6e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6e2:	4623      	mov	r3, r4
 800d6e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e7dc      	b.n	800d6a8 <_sungetc_r+0x34>

0800d6ee <__ssrefill_r>:
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6f4:	b169      	cbz	r1, 800d712 <__ssrefill_r+0x24>
 800d6f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6fa:	4299      	cmp	r1, r3
 800d6fc:	d001      	beq.n	800d702 <__ssrefill_r+0x14>
 800d6fe:	f7ff fdb3 	bl	800d268 <_free_r>
 800d702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d704:	6063      	str	r3, [r4, #4]
 800d706:	2000      	movs	r0, #0
 800d708:	6360      	str	r0, [r4, #52]	; 0x34
 800d70a:	b113      	cbz	r3, 800d712 <__ssrefill_r+0x24>
 800d70c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	bd10      	pop	{r4, pc}
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	2300      	movs	r3, #0
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f043 0320 	orr.w	r3, r3, #32
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	f04f 30ff 	mov.w	r0, #4294967295
 800d726:	e7f3      	b.n	800d710 <__ssrefill_r+0x22>

0800d728 <__ssvfiscanf_r>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	460c      	mov	r4, r1
 800d72e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d732:	2100      	movs	r1, #0
 800d734:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d738:	49b2      	ldr	r1, [pc, #712]	; (800da04 <__ssvfiscanf_r+0x2dc>)
 800d73a:	91a0      	str	r1, [sp, #640]	; 0x280
 800d73c:	f10d 0804 	add.w	r8, sp, #4
 800d740:	49b1      	ldr	r1, [pc, #708]	; (800da08 <__ssvfiscanf_r+0x2e0>)
 800d742:	4fb2      	ldr	r7, [pc, #712]	; (800da0c <__ssvfiscanf_r+0x2e4>)
 800d744:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800da10 <__ssvfiscanf_r+0x2e8>
 800d748:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d74c:	4606      	mov	r6, r0
 800d74e:	91a1      	str	r1, [sp, #644]	; 0x284
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	f892 a000 	ldrb.w	sl, [r2]
 800d756:	f1ba 0f00 	cmp.w	sl, #0
 800d75a:	f000 8151 	beq.w	800da00 <__ssvfiscanf_r+0x2d8>
 800d75e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800d762:	f013 0308 	ands.w	r3, r3, #8
 800d766:	f102 0501 	add.w	r5, r2, #1
 800d76a:	d019      	beq.n	800d7a0 <__ssvfiscanf_r+0x78>
 800d76c:	6863      	ldr	r3, [r4, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dd0f      	ble.n	800d792 <__ssvfiscanf_r+0x6a>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	781a      	ldrb	r2, [r3, #0]
 800d776:	5cba      	ldrb	r2, [r7, r2]
 800d778:	0712      	lsls	r2, r2, #28
 800d77a:	d401      	bmi.n	800d780 <__ssvfiscanf_r+0x58>
 800d77c:	462a      	mov	r2, r5
 800d77e:	e7e8      	b.n	800d752 <__ssvfiscanf_r+0x2a>
 800d780:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d782:	3201      	adds	r2, #1
 800d784:	9245      	str	r2, [sp, #276]	; 0x114
 800d786:	6862      	ldr	r2, [r4, #4]
 800d788:	3301      	adds	r3, #1
 800d78a:	3a01      	subs	r2, #1
 800d78c:	6062      	str	r2, [r4, #4]
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	e7ec      	b.n	800d76c <__ssvfiscanf_r+0x44>
 800d792:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d794:	4621      	mov	r1, r4
 800d796:	4630      	mov	r0, r6
 800d798:	4798      	blx	r3
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d0e9      	beq.n	800d772 <__ssvfiscanf_r+0x4a>
 800d79e:	e7ed      	b.n	800d77c <__ssvfiscanf_r+0x54>
 800d7a0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800d7a4:	f040 8083 	bne.w	800d8ae <__ssvfiscanf_r+0x186>
 800d7a8:	9341      	str	r3, [sp, #260]	; 0x104
 800d7aa:	9343      	str	r3, [sp, #268]	; 0x10c
 800d7ac:	7853      	ldrb	r3, [r2, #1]
 800d7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b0:	bf02      	ittt	eq
 800d7b2:	2310      	moveq	r3, #16
 800d7b4:	1c95      	addeq	r5, r2, #2
 800d7b6:	9341      	streq	r3, [sp, #260]	; 0x104
 800d7b8:	220a      	movs	r2, #10
 800d7ba:	46ab      	mov	fp, r5
 800d7bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800d7c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d7c4:	2b09      	cmp	r3, #9
 800d7c6:	d91d      	bls.n	800d804 <__ssvfiscanf_r+0xdc>
 800d7c8:	4891      	ldr	r0, [pc, #580]	; (800da10 <__ssvfiscanf_r+0x2e8>)
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	f7f2 fd50 	bl	8000270 <memchr>
 800d7d0:	b140      	cbz	r0, 800d7e4 <__ssvfiscanf_r+0xbc>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	eba0 0009 	sub.w	r0, r0, r9
 800d7d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7de:	4318      	orrs	r0, r3
 800d7e0:	9041      	str	r0, [sp, #260]	; 0x104
 800d7e2:	465d      	mov	r5, fp
 800d7e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d7e8:	2b78      	cmp	r3, #120	; 0x78
 800d7ea:	d806      	bhi.n	800d7fa <__ssvfiscanf_r+0xd2>
 800d7ec:	2b57      	cmp	r3, #87	; 0x57
 800d7ee:	d810      	bhi.n	800d812 <__ssvfiscanf_r+0xea>
 800d7f0:	2b25      	cmp	r3, #37	; 0x25
 800d7f2:	d05c      	beq.n	800d8ae <__ssvfiscanf_r+0x186>
 800d7f4:	d856      	bhi.n	800d8a4 <__ssvfiscanf_r+0x17c>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d074      	beq.n	800d8e4 <__ssvfiscanf_r+0x1bc>
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	9347      	str	r3, [sp, #284]	; 0x11c
 800d7fe:	230a      	movs	r3, #10
 800d800:	9342      	str	r3, [sp, #264]	; 0x108
 800d802:	e081      	b.n	800d908 <__ssvfiscanf_r+0x1e0>
 800d804:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d806:	fb02 1303 	mla	r3, r2, r3, r1
 800d80a:	3b30      	subs	r3, #48	; 0x30
 800d80c:	9343      	str	r3, [sp, #268]	; 0x10c
 800d80e:	465d      	mov	r5, fp
 800d810:	e7d3      	b.n	800d7ba <__ssvfiscanf_r+0x92>
 800d812:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d816:	2a20      	cmp	r2, #32
 800d818:	d8ef      	bhi.n	800d7fa <__ssvfiscanf_r+0xd2>
 800d81a:	a101      	add	r1, pc, #4	; (adr r1, 800d820 <__ssvfiscanf_r+0xf8>)
 800d81c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d820:	0800d8f3 	.word	0x0800d8f3
 800d824:	0800d7fb 	.word	0x0800d7fb
 800d828:	0800d7fb 	.word	0x0800d7fb
 800d82c:	0800d951 	.word	0x0800d951
 800d830:	0800d7fb 	.word	0x0800d7fb
 800d834:	0800d7fb 	.word	0x0800d7fb
 800d838:	0800d7fb 	.word	0x0800d7fb
 800d83c:	0800d7fb 	.word	0x0800d7fb
 800d840:	0800d7fb 	.word	0x0800d7fb
 800d844:	0800d7fb 	.word	0x0800d7fb
 800d848:	0800d7fb 	.word	0x0800d7fb
 800d84c:	0800d967 	.word	0x0800d967
 800d850:	0800d93d 	.word	0x0800d93d
 800d854:	0800d8ab 	.word	0x0800d8ab
 800d858:	0800d8ab 	.word	0x0800d8ab
 800d85c:	0800d8ab 	.word	0x0800d8ab
 800d860:	0800d7fb 	.word	0x0800d7fb
 800d864:	0800d941 	.word	0x0800d941
 800d868:	0800d7fb 	.word	0x0800d7fb
 800d86c:	0800d7fb 	.word	0x0800d7fb
 800d870:	0800d7fb 	.word	0x0800d7fb
 800d874:	0800d7fb 	.word	0x0800d7fb
 800d878:	0800d977 	.word	0x0800d977
 800d87c:	0800d949 	.word	0x0800d949
 800d880:	0800d8eb 	.word	0x0800d8eb
 800d884:	0800d7fb 	.word	0x0800d7fb
 800d888:	0800d7fb 	.word	0x0800d7fb
 800d88c:	0800d973 	.word	0x0800d973
 800d890:	0800d7fb 	.word	0x0800d7fb
 800d894:	0800d93d 	.word	0x0800d93d
 800d898:	0800d7fb 	.word	0x0800d7fb
 800d89c:	0800d7fb 	.word	0x0800d7fb
 800d8a0:	0800d8f3 	.word	0x0800d8f3
 800d8a4:	3b45      	subs	r3, #69	; 0x45
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d8a7      	bhi.n	800d7fa <__ssvfiscanf_r+0xd2>
 800d8aa:	2305      	movs	r3, #5
 800d8ac:	e02b      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d8ae:	6863      	ldr	r3, [r4, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dd0d      	ble.n	800d8d0 <__ssvfiscanf_r+0x1a8>
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	781a      	ldrb	r2, [r3, #0]
 800d8b8:	4552      	cmp	r2, sl
 800d8ba:	f040 80a1 	bne.w	800da00 <__ssvfiscanf_r+0x2d8>
 800d8be:	3301      	adds	r3, #1
 800d8c0:	6862      	ldr	r2, [r4, #4]
 800d8c2:	6023      	str	r3, [r4, #0]
 800d8c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d8c6:	3a01      	subs	r2, #1
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	6062      	str	r2, [r4, #4]
 800d8cc:	9345      	str	r3, [sp, #276]	; 0x114
 800d8ce:	e755      	b.n	800d77c <__ssvfiscanf_r+0x54>
 800d8d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	4798      	blx	r3
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d0eb      	beq.n	800d8b4 <__ssvfiscanf_r+0x18c>
 800d8dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	f040 8084 	bne.w	800d9ec <__ssvfiscanf_r+0x2c4>
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	e086      	b.n	800d9f8 <__ssvfiscanf_r+0x2d0>
 800d8ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8ec:	f042 0220 	orr.w	r2, r2, #32
 800d8f0:	9241      	str	r2, [sp, #260]	; 0x104
 800d8f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8f8:	9241      	str	r2, [sp, #260]	; 0x104
 800d8fa:	2210      	movs	r2, #16
 800d8fc:	2b6f      	cmp	r3, #111	; 0x6f
 800d8fe:	9242      	str	r2, [sp, #264]	; 0x108
 800d900:	bf34      	ite	cc
 800d902:	2303      	movcc	r3, #3
 800d904:	2304      	movcs	r3, #4
 800d906:	9347      	str	r3, [sp, #284]	; 0x11c
 800d908:	6863      	ldr	r3, [r4, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dd41      	ble.n	800d992 <__ssvfiscanf_r+0x26a>
 800d90e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d910:	0659      	lsls	r1, r3, #25
 800d912:	d404      	bmi.n	800d91e <__ssvfiscanf_r+0x1f6>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	781a      	ldrb	r2, [r3, #0]
 800d918:	5cba      	ldrb	r2, [r7, r2]
 800d91a:	0712      	lsls	r2, r2, #28
 800d91c:	d440      	bmi.n	800d9a0 <__ssvfiscanf_r+0x278>
 800d91e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d920:	2b02      	cmp	r3, #2
 800d922:	dc4f      	bgt.n	800d9c4 <__ssvfiscanf_r+0x29c>
 800d924:	466b      	mov	r3, sp
 800d926:	4622      	mov	r2, r4
 800d928:	a941      	add	r1, sp, #260	; 0x104
 800d92a:	4630      	mov	r0, r6
 800d92c:	f000 f874 	bl	800da18 <_scanf_chars>
 800d930:	2801      	cmp	r0, #1
 800d932:	d065      	beq.n	800da00 <__ssvfiscanf_r+0x2d8>
 800d934:	2802      	cmp	r0, #2
 800d936:	f47f af21 	bne.w	800d77c <__ssvfiscanf_r+0x54>
 800d93a:	e7cf      	b.n	800d8dc <__ssvfiscanf_r+0x1b4>
 800d93c:	220a      	movs	r2, #10
 800d93e:	e7dd      	b.n	800d8fc <__ssvfiscanf_r+0x1d4>
 800d940:	2300      	movs	r3, #0
 800d942:	9342      	str	r3, [sp, #264]	; 0x108
 800d944:	2303      	movs	r3, #3
 800d946:	e7de      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d948:	2308      	movs	r3, #8
 800d94a:	9342      	str	r3, [sp, #264]	; 0x108
 800d94c:	2304      	movs	r3, #4
 800d94e:	e7da      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d950:	4629      	mov	r1, r5
 800d952:	4640      	mov	r0, r8
 800d954:	f000 f9d8 	bl	800dd08 <__sccl>
 800d958:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95e:	9341      	str	r3, [sp, #260]	; 0x104
 800d960:	4605      	mov	r5, r0
 800d962:	2301      	movs	r3, #1
 800d964:	e7cf      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d966:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d96c:	9341      	str	r3, [sp, #260]	; 0x104
 800d96e:	2300      	movs	r3, #0
 800d970:	e7c9      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d972:	2302      	movs	r3, #2
 800d974:	e7c7      	b.n	800d906 <__ssvfiscanf_r+0x1de>
 800d976:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d978:	06c3      	lsls	r3, r0, #27
 800d97a:	f53f aeff 	bmi.w	800d77c <__ssvfiscanf_r+0x54>
 800d97e:	9b00      	ldr	r3, [sp, #0]
 800d980:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d982:	1d19      	adds	r1, r3, #4
 800d984:	9100      	str	r1, [sp, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	07c0      	lsls	r0, r0, #31
 800d98a:	bf4c      	ite	mi
 800d98c:	801a      	strhmi	r2, [r3, #0]
 800d98e:	601a      	strpl	r2, [r3, #0]
 800d990:	e6f4      	b.n	800d77c <__ssvfiscanf_r+0x54>
 800d992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d994:	4621      	mov	r1, r4
 800d996:	4630      	mov	r0, r6
 800d998:	4798      	blx	r3
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0b7      	beq.n	800d90e <__ssvfiscanf_r+0x1e6>
 800d99e:	e79d      	b.n	800d8dc <__ssvfiscanf_r+0x1b4>
 800d9a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	9245      	str	r2, [sp, #276]	; 0x114
 800d9a6:	6862      	ldr	r2, [r4, #4]
 800d9a8:	3a01      	subs	r2, #1
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	6062      	str	r2, [r4, #4]
 800d9ae:	dd02      	ble.n	800d9b6 <__ssvfiscanf_r+0x28e>
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	e7ae      	b.n	800d914 <__ssvfiscanf_r+0x1ec>
 800d9b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4798      	blx	r3
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d0a8      	beq.n	800d914 <__ssvfiscanf_r+0x1ec>
 800d9c2:	e78b      	b.n	800d8dc <__ssvfiscanf_r+0x1b4>
 800d9c4:	2b04      	cmp	r3, #4
 800d9c6:	dc06      	bgt.n	800d9d6 <__ssvfiscanf_r+0x2ae>
 800d9c8:	466b      	mov	r3, sp
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	a941      	add	r1, sp, #260	; 0x104
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 f87a 	bl	800dac8 <_scanf_i>
 800d9d4:	e7ac      	b.n	800d930 <__ssvfiscanf_r+0x208>
 800d9d6:	4b0f      	ldr	r3, [pc, #60]	; (800da14 <__ssvfiscanf_r+0x2ec>)
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f43f aecf 	beq.w	800d77c <__ssvfiscanf_r+0x54>
 800d9de:	466b      	mov	r3, sp
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	a941      	add	r1, sp, #260	; 0x104
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7fc fc51 	bl	800a28c <_scanf_float>
 800d9ea:	e7a1      	b.n	800d930 <__ssvfiscanf_r+0x208>
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d9f2:	bf18      	it	ne
 800d9f4:	f04f 30ff 	movne.w	r0, #4294967295
 800d9f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da00:	9844      	ldr	r0, [sp, #272]	; 0x110
 800da02:	e7f9      	b.n	800d9f8 <__ssvfiscanf_r+0x2d0>
 800da04:	0800d675 	.word	0x0800d675
 800da08:	0800d6ef 	.word	0x0800d6ef
 800da0c:	0800f781 	.word	0x0800f781
 800da10:	0800fafa 	.word	0x0800fafa
 800da14:	0800a28d 	.word	0x0800a28d

0800da18 <_scanf_chars>:
 800da18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da1c:	4615      	mov	r5, r2
 800da1e:	688a      	ldr	r2, [r1, #8]
 800da20:	4680      	mov	r8, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b932      	cbnz	r2, 800da34 <_scanf_chars+0x1c>
 800da26:	698a      	ldr	r2, [r1, #24]
 800da28:	2a00      	cmp	r2, #0
 800da2a:	bf0c      	ite	eq
 800da2c:	2201      	moveq	r2, #1
 800da2e:	f04f 32ff 	movne.w	r2, #4294967295
 800da32:	608a      	str	r2, [r1, #8]
 800da34:	6822      	ldr	r2, [r4, #0]
 800da36:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800dac4 <_scanf_chars+0xac>
 800da3a:	06d1      	lsls	r1, r2, #27
 800da3c:	bf5f      	itttt	pl
 800da3e:	681a      	ldrpl	r2, [r3, #0]
 800da40:	1d11      	addpl	r1, r2, #4
 800da42:	6019      	strpl	r1, [r3, #0]
 800da44:	6816      	ldrpl	r6, [r2, #0]
 800da46:	2700      	movs	r7, #0
 800da48:	69a0      	ldr	r0, [r4, #24]
 800da4a:	b188      	cbz	r0, 800da70 <_scanf_chars+0x58>
 800da4c:	2801      	cmp	r0, #1
 800da4e:	d107      	bne.n	800da60 <_scanf_chars+0x48>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	781a      	ldrb	r2, [r3, #0]
 800da54:	6963      	ldr	r3, [r4, #20]
 800da56:	5c9b      	ldrb	r3, [r3, r2]
 800da58:	b953      	cbnz	r3, 800da70 <_scanf_chars+0x58>
 800da5a:	bb27      	cbnz	r7, 800daa6 <_scanf_chars+0x8e>
 800da5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da60:	2802      	cmp	r0, #2
 800da62:	d120      	bne.n	800daa6 <_scanf_chars+0x8e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f813 3009 	ldrb.w	r3, [r3, r9]
 800da6c:	071b      	lsls	r3, r3, #28
 800da6e:	d41a      	bmi.n	800daa6 <_scanf_chars+0x8e>
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	06da      	lsls	r2, r3, #27
 800da74:	bf5e      	ittt	pl
 800da76:	682b      	ldrpl	r3, [r5, #0]
 800da78:	781b      	ldrbpl	r3, [r3, #0]
 800da7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800da7e:	682a      	ldr	r2, [r5, #0]
 800da80:	686b      	ldr	r3, [r5, #4]
 800da82:	3201      	adds	r2, #1
 800da84:	602a      	str	r2, [r5, #0]
 800da86:	68a2      	ldr	r2, [r4, #8]
 800da88:	3b01      	subs	r3, #1
 800da8a:	3a01      	subs	r2, #1
 800da8c:	606b      	str	r3, [r5, #4]
 800da8e:	3701      	adds	r7, #1
 800da90:	60a2      	str	r2, [r4, #8]
 800da92:	b142      	cbz	r2, 800daa6 <_scanf_chars+0x8e>
 800da94:	2b00      	cmp	r3, #0
 800da96:	dcd7      	bgt.n	800da48 <_scanf_chars+0x30>
 800da98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da9c:	4629      	mov	r1, r5
 800da9e:	4640      	mov	r0, r8
 800daa0:	4798      	blx	r3
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d0d0      	beq.n	800da48 <_scanf_chars+0x30>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	f013 0310 	ands.w	r3, r3, #16
 800daac:	d105      	bne.n	800daba <_scanf_chars+0xa2>
 800daae:	68e2      	ldr	r2, [r4, #12]
 800dab0:	3201      	adds	r2, #1
 800dab2:	60e2      	str	r2, [r4, #12]
 800dab4:	69a2      	ldr	r2, [r4, #24]
 800dab6:	b102      	cbz	r2, 800daba <_scanf_chars+0xa2>
 800dab8:	7033      	strb	r3, [r6, #0]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	441f      	add	r7, r3
 800dabe:	6127      	str	r7, [r4, #16]
 800dac0:	2000      	movs	r0, #0
 800dac2:	e7cb      	b.n	800da5c <_scanf_chars+0x44>
 800dac4:	0800f781 	.word	0x0800f781

0800dac8 <_scanf_i>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	4698      	mov	r8, r3
 800dace:	4b74      	ldr	r3, [pc, #464]	; (800dca0 <_scanf_i+0x1d8>)
 800dad0:	460c      	mov	r4, r1
 800dad2:	4682      	mov	sl, r0
 800dad4:	4616      	mov	r6, r2
 800dad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dada:	b087      	sub	sp, #28
 800dadc:	ab03      	add	r3, sp, #12
 800dade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dae2:	4b70      	ldr	r3, [pc, #448]	; (800dca4 <_scanf_i+0x1dc>)
 800dae4:	69a1      	ldr	r1, [r4, #24]
 800dae6:	4a70      	ldr	r2, [pc, #448]	; (800dca8 <_scanf_i+0x1e0>)
 800dae8:	2903      	cmp	r1, #3
 800daea:	bf18      	it	ne
 800daec:	461a      	movne	r2, r3
 800daee:	68a3      	ldr	r3, [r4, #8]
 800daf0:	9201      	str	r2, [sp, #4]
 800daf2:	1e5a      	subs	r2, r3, #1
 800daf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800daf8:	bf88      	it	hi
 800dafa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dafe:	4627      	mov	r7, r4
 800db00:	bf82      	ittt	hi
 800db02:	eb03 0905 	addhi.w	r9, r3, r5
 800db06:	f240 135d 	movwhi	r3, #349	; 0x15d
 800db0a:	60a3      	strhi	r3, [r4, #8]
 800db0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800db10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800db14:	bf98      	it	ls
 800db16:	f04f 0900 	movls.w	r9, #0
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	463d      	mov	r5, r7
 800db1e:	f04f 0b00 	mov.w	fp, #0
 800db22:	6831      	ldr	r1, [r6, #0]
 800db24:	ab03      	add	r3, sp, #12
 800db26:	7809      	ldrb	r1, [r1, #0]
 800db28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800db2c:	2202      	movs	r2, #2
 800db2e:	f7f2 fb9f 	bl	8000270 <memchr>
 800db32:	b328      	cbz	r0, 800db80 <_scanf_i+0xb8>
 800db34:	f1bb 0f01 	cmp.w	fp, #1
 800db38:	d159      	bne.n	800dbee <_scanf_i+0x126>
 800db3a:	6862      	ldr	r2, [r4, #4]
 800db3c:	b92a      	cbnz	r2, 800db4a <_scanf_i+0x82>
 800db3e:	6822      	ldr	r2, [r4, #0]
 800db40:	2308      	movs	r3, #8
 800db42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db46:	6063      	str	r3, [r4, #4]
 800db48:	6022      	str	r2, [r4, #0]
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800db50:	6022      	str	r2, [r4, #0]
 800db52:	68a2      	ldr	r2, [r4, #8]
 800db54:	1e51      	subs	r1, r2, #1
 800db56:	60a1      	str	r1, [r4, #8]
 800db58:	b192      	cbz	r2, 800db80 <_scanf_i+0xb8>
 800db5a:	6832      	ldr	r2, [r6, #0]
 800db5c:	1c51      	adds	r1, r2, #1
 800db5e:	6031      	str	r1, [r6, #0]
 800db60:	7812      	ldrb	r2, [r2, #0]
 800db62:	f805 2b01 	strb.w	r2, [r5], #1
 800db66:	6872      	ldr	r2, [r6, #4]
 800db68:	3a01      	subs	r2, #1
 800db6a:	2a00      	cmp	r2, #0
 800db6c:	6072      	str	r2, [r6, #4]
 800db6e:	dc07      	bgt.n	800db80 <_scanf_i+0xb8>
 800db70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800db74:	4631      	mov	r1, r6
 800db76:	4650      	mov	r0, sl
 800db78:	4790      	blx	r2
 800db7a:	2800      	cmp	r0, #0
 800db7c:	f040 8085 	bne.w	800dc8a <_scanf_i+0x1c2>
 800db80:	f10b 0b01 	add.w	fp, fp, #1
 800db84:	f1bb 0f03 	cmp.w	fp, #3
 800db88:	d1cb      	bne.n	800db22 <_scanf_i+0x5a>
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	b90b      	cbnz	r3, 800db92 <_scanf_i+0xca>
 800db8e:	230a      	movs	r3, #10
 800db90:	6063      	str	r3, [r4, #4]
 800db92:	6863      	ldr	r3, [r4, #4]
 800db94:	4945      	ldr	r1, [pc, #276]	; (800dcac <_scanf_i+0x1e4>)
 800db96:	6960      	ldr	r0, [r4, #20]
 800db98:	1ac9      	subs	r1, r1, r3
 800db9a:	f000 f8b5 	bl	800dd08 <__sccl>
 800db9e:	f04f 0b00 	mov.w	fp, #0
 800dba2:	68a3      	ldr	r3, [r4, #8]
 800dba4:	6822      	ldr	r2, [r4, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d03d      	beq.n	800dc26 <_scanf_i+0x15e>
 800dbaa:	6831      	ldr	r1, [r6, #0]
 800dbac:	6960      	ldr	r0, [r4, #20]
 800dbae:	f891 c000 	ldrb.w	ip, [r1]
 800dbb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d035      	beq.n	800dc26 <_scanf_i+0x15e>
 800dbba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dbbe:	d124      	bne.n	800dc0a <_scanf_i+0x142>
 800dbc0:	0510      	lsls	r0, r2, #20
 800dbc2:	d522      	bpl.n	800dc0a <_scanf_i+0x142>
 800dbc4:	f10b 0b01 	add.w	fp, fp, #1
 800dbc8:	f1b9 0f00 	cmp.w	r9, #0
 800dbcc:	d003      	beq.n	800dbd6 <_scanf_i+0x10e>
 800dbce:	3301      	adds	r3, #1
 800dbd0:	f109 39ff 	add.w	r9, r9, #4294967295
 800dbd4:	60a3      	str	r3, [r4, #8]
 800dbd6:	6873      	ldr	r3, [r6, #4]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	6073      	str	r3, [r6, #4]
 800dbde:	dd1b      	ble.n	800dc18 <_scanf_i+0x150>
 800dbe0:	6833      	ldr	r3, [r6, #0]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	6033      	str	r3, [r6, #0]
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	60a3      	str	r3, [r4, #8]
 800dbec:	e7d9      	b.n	800dba2 <_scanf_i+0xda>
 800dbee:	f1bb 0f02 	cmp.w	fp, #2
 800dbf2:	d1ae      	bne.n	800db52 <_scanf_i+0x8a>
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dbfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dbfe:	d1bf      	bne.n	800db80 <_scanf_i+0xb8>
 800dc00:	2310      	movs	r3, #16
 800dc02:	6063      	str	r3, [r4, #4]
 800dc04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc08:	e7a2      	b.n	800db50 <_scanf_i+0x88>
 800dc0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dc0e:	6022      	str	r2, [r4, #0]
 800dc10:	780b      	ldrb	r3, [r1, #0]
 800dc12:	f805 3b01 	strb.w	r3, [r5], #1
 800dc16:	e7de      	b.n	800dbd6 <_scanf_i+0x10e>
 800dc18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4650      	mov	r0, sl
 800dc20:	4798      	blx	r3
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d0df      	beq.n	800dbe6 <_scanf_i+0x11e>
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	05d9      	lsls	r1, r3, #23
 800dc2a:	d50d      	bpl.n	800dc48 <_scanf_i+0x180>
 800dc2c:	42bd      	cmp	r5, r7
 800dc2e:	d909      	bls.n	800dc44 <_scanf_i+0x17c>
 800dc30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dc34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc38:	4632      	mov	r2, r6
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	4798      	blx	r3
 800dc3e:	f105 39ff 	add.w	r9, r5, #4294967295
 800dc42:	464d      	mov	r5, r9
 800dc44:	42bd      	cmp	r5, r7
 800dc46:	d028      	beq.n	800dc9a <_scanf_i+0x1d2>
 800dc48:	6822      	ldr	r2, [r4, #0]
 800dc4a:	f012 0210 	ands.w	r2, r2, #16
 800dc4e:	d113      	bne.n	800dc78 <_scanf_i+0x1b0>
 800dc50:	702a      	strb	r2, [r5, #0]
 800dc52:	6863      	ldr	r3, [r4, #4]
 800dc54:	9e01      	ldr	r6, [sp, #4]
 800dc56:	4639      	mov	r1, r7
 800dc58:	4650      	mov	r0, sl
 800dc5a:	47b0      	blx	r6
 800dc5c:	f8d8 3000 	ldr.w	r3, [r8]
 800dc60:	6821      	ldr	r1, [r4, #0]
 800dc62:	1d1a      	adds	r2, r3, #4
 800dc64:	f8c8 2000 	str.w	r2, [r8]
 800dc68:	f011 0f20 	tst.w	r1, #32
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	d00f      	beq.n	800dc90 <_scanf_i+0x1c8>
 800dc70:	6018      	str	r0, [r3, #0]
 800dc72:	68e3      	ldr	r3, [r4, #12]
 800dc74:	3301      	adds	r3, #1
 800dc76:	60e3      	str	r3, [r4, #12]
 800dc78:	1bed      	subs	r5, r5, r7
 800dc7a:	44ab      	add	fp, r5
 800dc7c:	6925      	ldr	r5, [r4, #16]
 800dc7e:	445d      	add	r5, fp
 800dc80:	6125      	str	r5, [r4, #16]
 800dc82:	2000      	movs	r0, #0
 800dc84:	b007      	add	sp, #28
 800dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8a:	f04f 0b00 	mov.w	fp, #0
 800dc8e:	e7ca      	b.n	800dc26 <_scanf_i+0x15e>
 800dc90:	07ca      	lsls	r2, r1, #31
 800dc92:	bf4c      	ite	mi
 800dc94:	8018      	strhmi	r0, [r3, #0]
 800dc96:	6018      	strpl	r0, [r3, #0]
 800dc98:	e7eb      	b.n	800dc72 <_scanf_i+0x1aa>
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	e7f2      	b.n	800dc84 <_scanf_i+0x1bc>
 800dc9e:	bf00      	nop
 800dca0:	0800f6cc 	.word	0x0800f6cc
 800dca4:	0800de75 	.word	0x0800de75
 800dca8:	0800b511 	.word	0x0800b511
 800dcac:	0800fb1e 	.word	0x0800fb1e

0800dcb0 <_read_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d07      	ldr	r5, [pc, #28]	; (800dcd0 <_read_r+0x20>)
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	2200      	movs	r2, #0
 800dcbc:	602a      	str	r2, [r5, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f7f5 fab2 	bl	8003228 <_read>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_read_r+0x1e>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_read_r+0x1e>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	200188a8 	.word	0x200188a8
 800dcd4:	00000000 	.word	0x00000000

0800dcd8 <nan>:
 800dcd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dce0 <nan+0x8>
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	00000000 	.word	0x00000000
 800dce4:	7ff80000 	.word	0x7ff80000

0800dce8 <_sbrk_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_sbrk_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f5 fb06 	bl	8003304 <_sbrk>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_sbrk_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_sbrk_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	200188a8 	.word	0x200188a8

0800dd08 <__sccl>:
 800dd08:	b570      	push	{r4, r5, r6, lr}
 800dd0a:	780b      	ldrb	r3, [r1, #0]
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	2b5e      	cmp	r3, #94	; 0x5e
 800dd10:	bf0b      	itete	eq
 800dd12:	784b      	ldrbeq	r3, [r1, #1]
 800dd14:	1c48      	addne	r0, r1, #1
 800dd16:	1c88      	addeq	r0, r1, #2
 800dd18:	2200      	movne	r2, #0
 800dd1a:	bf08      	it	eq
 800dd1c:	2201      	moveq	r2, #1
 800dd1e:	1e61      	subs	r1, r4, #1
 800dd20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dd24:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dd28:	42a9      	cmp	r1, r5
 800dd2a:	d1fb      	bne.n	800dd24 <__sccl+0x1c>
 800dd2c:	b90b      	cbnz	r3, 800dd32 <__sccl+0x2a>
 800dd2e:	3801      	subs	r0, #1
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	f082 0101 	eor.w	r1, r2, #1
 800dd36:	54e1      	strb	r1, [r4, r3]
 800dd38:	1c42      	adds	r2, r0, #1
 800dd3a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800dd3e:	2d2d      	cmp	r5, #45	; 0x2d
 800dd40:	f102 36ff 	add.w	r6, r2, #4294967295
 800dd44:	4610      	mov	r0, r2
 800dd46:	d006      	beq.n	800dd56 <__sccl+0x4e>
 800dd48:	2d5d      	cmp	r5, #93	; 0x5d
 800dd4a:	d0f1      	beq.n	800dd30 <__sccl+0x28>
 800dd4c:	b90d      	cbnz	r5, 800dd52 <__sccl+0x4a>
 800dd4e:	4630      	mov	r0, r6
 800dd50:	e7ee      	b.n	800dd30 <__sccl+0x28>
 800dd52:	462b      	mov	r3, r5
 800dd54:	e7ef      	b.n	800dd36 <__sccl+0x2e>
 800dd56:	7816      	ldrb	r6, [r2, #0]
 800dd58:	2e5d      	cmp	r6, #93	; 0x5d
 800dd5a:	d0fa      	beq.n	800dd52 <__sccl+0x4a>
 800dd5c:	42b3      	cmp	r3, r6
 800dd5e:	dcf8      	bgt.n	800dd52 <__sccl+0x4a>
 800dd60:	4618      	mov	r0, r3
 800dd62:	3001      	adds	r0, #1
 800dd64:	4286      	cmp	r6, r0
 800dd66:	5421      	strb	r1, [r4, r0]
 800dd68:	dcfb      	bgt.n	800dd62 <__sccl+0x5a>
 800dd6a:	43d8      	mvns	r0, r3
 800dd6c:	4430      	add	r0, r6
 800dd6e:	1c5d      	adds	r5, r3, #1
 800dd70:	42b3      	cmp	r3, r6
 800dd72:	bfa8      	it	ge
 800dd74:	2000      	movge	r0, #0
 800dd76:	182b      	adds	r3, r5, r0
 800dd78:	3202      	adds	r2, #2
 800dd7a:	e7de      	b.n	800dd3a <__sccl+0x32>

0800dd7c <_strtoul_l.isra.0>:
 800dd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd80:	4e3b      	ldr	r6, [pc, #236]	; (800de70 <_strtoul_l.isra.0+0xf4>)
 800dd82:	4686      	mov	lr, r0
 800dd84:	468c      	mov	ip, r1
 800dd86:	4660      	mov	r0, ip
 800dd88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dd8c:	5da5      	ldrb	r5, [r4, r6]
 800dd8e:	f015 0508 	ands.w	r5, r5, #8
 800dd92:	d1f8      	bne.n	800dd86 <_strtoul_l.isra.0+0xa>
 800dd94:	2c2d      	cmp	r4, #45	; 0x2d
 800dd96:	d134      	bne.n	800de02 <_strtoul_l.isra.0+0x86>
 800dd98:	f89c 4000 	ldrb.w	r4, [ip]
 800dd9c:	f04f 0801 	mov.w	r8, #1
 800dda0:	f100 0c02 	add.w	ip, r0, #2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d05e      	beq.n	800de66 <_strtoul_l.isra.0+0xea>
 800dda8:	2b10      	cmp	r3, #16
 800ddaa:	d10c      	bne.n	800ddc6 <_strtoul_l.isra.0+0x4a>
 800ddac:	2c30      	cmp	r4, #48	; 0x30
 800ddae:	d10a      	bne.n	800ddc6 <_strtoul_l.isra.0+0x4a>
 800ddb0:	f89c 0000 	ldrb.w	r0, [ip]
 800ddb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ddb8:	2858      	cmp	r0, #88	; 0x58
 800ddba:	d14f      	bne.n	800de5c <_strtoul_l.isra.0+0xe0>
 800ddbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	f10c 0c02 	add.w	ip, ip, #2
 800ddc6:	f04f 37ff 	mov.w	r7, #4294967295
 800ddca:	2500      	movs	r5, #0
 800ddcc:	fbb7 f7f3 	udiv	r7, r7, r3
 800ddd0:	fb03 f907 	mul.w	r9, r3, r7
 800ddd4:	ea6f 0909 	mvn.w	r9, r9
 800ddd8:	4628      	mov	r0, r5
 800ddda:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ddde:	2e09      	cmp	r6, #9
 800dde0:	d818      	bhi.n	800de14 <_strtoul_l.isra.0+0x98>
 800dde2:	4634      	mov	r4, r6
 800dde4:	42a3      	cmp	r3, r4
 800dde6:	dd24      	ble.n	800de32 <_strtoul_l.isra.0+0xb6>
 800dde8:	2d00      	cmp	r5, #0
 800ddea:	db1f      	blt.n	800de2c <_strtoul_l.isra.0+0xb0>
 800ddec:	4287      	cmp	r7, r0
 800ddee:	d31d      	bcc.n	800de2c <_strtoul_l.isra.0+0xb0>
 800ddf0:	d101      	bne.n	800ddf6 <_strtoul_l.isra.0+0x7a>
 800ddf2:	45a1      	cmp	r9, r4
 800ddf4:	db1a      	blt.n	800de2c <_strtoul_l.isra.0+0xb0>
 800ddf6:	fb00 4003 	mla	r0, r0, r3, r4
 800ddfa:	2501      	movs	r5, #1
 800ddfc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800de00:	e7eb      	b.n	800ddda <_strtoul_l.isra.0+0x5e>
 800de02:	2c2b      	cmp	r4, #43	; 0x2b
 800de04:	bf08      	it	eq
 800de06:	f89c 4000 	ldrbeq.w	r4, [ip]
 800de0a:	46a8      	mov	r8, r5
 800de0c:	bf08      	it	eq
 800de0e:	f100 0c02 	addeq.w	ip, r0, #2
 800de12:	e7c7      	b.n	800dda4 <_strtoul_l.isra.0+0x28>
 800de14:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800de18:	2e19      	cmp	r6, #25
 800de1a:	d801      	bhi.n	800de20 <_strtoul_l.isra.0+0xa4>
 800de1c:	3c37      	subs	r4, #55	; 0x37
 800de1e:	e7e1      	b.n	800dde4 <_strtoul_l.isra.0+0x68>
 800de20:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800de24:	2e19      	cmp	r6, #25
 800de26:	d804      	bhi.n	800de32 <_strtoul_l.isra.0+0xb6>
 800de28:	3c57      	subs	r4, #87	; 0x57
 800de2a:	e7db      	b.n	800dde4 <_strtoul_l.isra.0+0x68>
 800de2c:	f04f 35ff 	mov.w	r5, #4294967295
 800de30:	e7e4      	b.n	800ddfc <_strtoul_l.isra.0+0x80>
 800de32:	2d00      	cmp	r5, #0
 800de34:	da07      	bge.n	800de46 <_strtoul_l.isra.0+0xca>
 800de36:	2322      	movs	r3, #34	; 0x22
 800de38:	f8ce 3000 	str.w	r3, [lr]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	b942      	cbnz	r2, 800de54 <_strtoul_l.isra.0+0xd8>
 800de42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de46:	f1b8 0f00 	cmp.w	r8, #0
 800de4a:	d000      	beq.n	800de4e <_strtoul_l.isra.0+0xd2>
 800de4c:	4240      	negs	r0, r0
 800de4e:	2a00      	cmp	r2, #0
 800de50:	d0f7      	beq.n	800de42 <_strtoul_l.isra.0+0xc6>
 800de52:	b10d      	cbz	r5, 800de58 <_strtoul_l.isra.0+0xdc>
 800de54:	f10c 31ff 	add.w	r1, ip, #4294967295
 800de58:	6011      	str	r1, [r2, #0]
 800de5a:	e7f2      	b.n	800de42 <_strtoul_l.isra.0+0xc6>
 800de5c:	2430      	movs	r4, #48	; 0x30
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1b1      	bne.n	800ddc6 <_strtoul_l.isra.0+0x4a>
 800de62:	2308      	movs	r3, #8
 800de64:	e7af      	b.n	800ddc6 <_strtoul_l.isra.0+0x4a>
 800de66:	2c30      	cmp	r4, #48	; 0x30
 800de68:	d0a2      	beq.n	800ddb0 <_strtoul_l.isra.0+0x34>
 800de6a:	230a      	movs	r3, #10
 800de6c:	e7ab      	b.n	800ddc6 <_strtoul_l.isra.0+0x4a>
 800de6e:	bf00      	nop
 800de70:	0800f781 	.word	0x0800f781

0800de74 <_strtoul_r>:
 800de74:	f7ff bf82 	b.w	800dd7c <_strtoul_l.isra.0>

0800de78 <__submore>:
 800de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7c:	460c      	mov	r4, r1
 800de7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800de80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de84:	4299      	cmp	r1, r3
 800de86:	d11d      	bne.n	800dec4 <__submore+0x4c>
 800de88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800de8c:	f7ff fa3c 	bl	800d308 <_malloc_r>
 800de90:	b918      	cbnz	r0, 800de9a <__submore+0x22>
 800de92:	f04f 30ff 	mov.w	r0, #4294967295
 800de96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800dea0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dea4:	6360      	str	r0, [r4, #52]	; 0x34
 800dea6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800deaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800deae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800deb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800deb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800deba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800debe:	6020      	str	r0, [r4, #0]
 800dec0:	2000      	movs	r0, #0
 800dec2:	e7e8      	b.n	800de96 <__submore+0x1e>
 800dec4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dec6:	0077      	lsls	r7, r6, #1
 800dec8:	463a      	mov	r2, r7
 800deca:	f000 fa2d 	bl	800e328 <_realloc_r>
 800dece:	4605      	mov	r5, r0
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d0de      	beq.n	800de92 <__submore+0x1a>
 800ded4:	eb00 0806 	add.w	r8, r0, r6
 800ded8:	4601      	mov	r1, r0
 800deda:	4632      	mov	r2, r6
 800dedc:	4640      	mov	r0, r8
 800dede:	f7fe fce9 	bl	800c8b4 <memcpy>
 800dee2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dee6:	f8c4 8000 	str.w	r8, [r4]
 800deea:	e7e9      	b.n	800dec0 <__submore+0x48>

0800deec <__ascii_wctomb>:
 800deec:	b149      	cbz	r1, 800df02 <__ascii_wctomb+0x16>
 800deee:	2aff      	cmp	r2, #255	; 0xff
 800def0:	bf85      	ittet	hi
 800def2:	238a      	movhi	r3, #138	; 0x8a
 800def4:	6003      	strhi	r3, [r0, #0]
 800def6:	700a      	strbls	r2, [r1, #0]
 800def8:	f04f 30ff 	movhi.w	r0, #4294967295
 800defc:	bf98      	it	ls
 800defe:	2001      	movls	r0, #1
 800df00:	4770      	bx	lr
 800df02:	4608      	mov	r0, r1
 800df04:	4770      	bx	lr
	...

0800df08 <__assert_func>:
 800df08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df0a:	4614      	mov	r4, r2
 800df0c:	461a      	mov	r2, r3
 800df0e:	4b09      	ldr	r3, [pc, #36]	; (800df34 <__assert_func+0x2c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4605      	mov	r5, r0
 800df14:	68d8      	ldr	r0, [r3, #12]
 800df16:	b14c      	cbz	r4, 800df2c <__assert_func+0x24>
 800df18:	4b07      	ldr	r3, [pc, #28]	; (800df38 <__assert_func+0x30>)
 800df1a:	9100      	str	r1, [sp, #0]
 800df1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df20:	4906      	ldr	r1, [pc, #24]	; (800df3c <__assert_func+0x34>)
 800df22:	462b      	mov	r3, r5
 800df24:	f000 f9a6 	bl	800e274 <fiprintf>
 800df28:	f000 fc3e 	bl	800e7a8 <abort>
 800df2c:	4b04      	ldr	r3, [pc, #16]	; (800df40 <__assert_func+0x38>)
 800df2e:	461c      	mov	r4, r3
 800df30:	e7f3      	b.n	800df1a <__assert_func+0x12>
 800df32:	bf00      	nop
 800df34:	20000128 	.word	0x20000128
 800df38:	0800fb20 	.word	0x0800fb20
 800df3c:	0800fb2d 	.word	0x0800fb2d
 800df40:	0800fb5b 	.word	0x0800fb5b

0800df44 <__sflush_r>:
 800df44:	898a      	ldrh	r2, [r1, #12]
 800df46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4a:	4605      	mov	r5, r0
 800df4c:	0710      	lsls	r0, r2, #28
 800df4e:	460c      	mov	r4, r1
 800df50:	d458      	bmi.n	800e004 <__sflush_r+0xc0>
 800df52:	684b      	ldr	r3, [r1, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	dc05      	bgt.n	800df64 <__sflush_r+0x20>
 800df58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dc02      	bgt.n	800df64 <__sflush_r+0x20>
 800df5e:	2000      	movs	r0, #0
 800df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df66:	2e00      	cmp	r6, #0
 800df68:	d0f9      	beq.n	800df5e <__sflush_r+0x1a>
 800df6a:	2300      	movs	r3, #0
 800df6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df70:	682f      	ldr	r7, [r5, #0]
 800df72:	602b      	str	r3, [r5, #0]
 800df74:	d032      	beq.n	800dfdc <__sflush_r+0x98>
 800df76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	075a      	lsls	r2, r3, #29
 800df7c:	d505      	bpl.n	800df8a <__sflush_r+0x46>
 800df7e:	6863      	ldr	r3, [r4, #4]
 800df80:	1ac0      	subs	r0, r0, r3
 800df82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df84:	b10b      	cbz	r3, 800df8a <__sflush_r+0x46>
 800df86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df88:	1ac0      	subs	r0, r0, r3
 800df8a:	2300      	movs	r3, #0
 800df8c:	4602      	mov	r2, r0
 800df8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df90:	6a21      	ldr	r1, [r4, #32]
 800df92:	4628      	mov	r0, r5
 800df94:	47b0      	blx	r6
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	d106      	bne.n	800dfaa <__sflush_r+0x66>
 800df9c:	6829      	ldr	r1, [r5, #0]
 800df9e:	291d      	cmp	r1, #29
 800dfa0:	d82c      	bhi.n	800dffc <__sflush_r+0xb8>
 800dfa2:	4a2a      	ldr	r2, [pc, #168]	; (800e04c <__sflush_r+0x108>)
 800dfa4:	40ca      	lsrs	r2, r1
 800dfa6:	07d6      	lsls	r6, r2, #31
 800dfa8:	d528      	bpl.n	800dffc <__sflush_r+0xb8>
 800dfaa:	2200      	movs	r2, #0
 800dfac:	6062      	str	r2, [r4, #4]
 800dfae:	04d9      	lsls	r1, r3, #19
 800dfb0:	6922      	ldr	r2, [r4, #16]
 800dfb2:	6022      	str	r2, [r4, #0]
 800dfb4:	d504      	bpl.n	800dfc0 <__sflush_r+0x7c>
 800dfb6:	1c42      	adds	r2, r0, #1
 800dfb8:	d101      	bne.n	800dfbe <__sflush_r+0x7a>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	b903      	cbnz	r3, 800dfc0 <__sflush_r+0x7c>
 800dfbe:	6560      	str	r0, [r4, #84]	; 0x54
 800dfc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfc2:	602f      	str	r7, [r5, #0]
 800dfc4:	2900      	cmp	r1, #0
 800dfc6:	d0ca      	beq.n	800df5e <__sflush_r+0x1a>
 800dfc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfcc:	4299      	cmp	r1, r3
 800dfce:	d002      	beq.n	800dfd6 <__sflush_r+0x92>
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f7ff f949 	bl	800d268 <_free_r>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	6360      	str	r0, [r4, #52]	; 0x34
 800dfda:	e7c1      	b.n	800df60 <__sflush_r+0x1c>
 800dfdc:	6a21      	ldr	r1, [r4, #32]
 800dfde:	2301      	movs	r3, #1
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	47b0      	blx	r6
 800dfe4:	1c41      	adds	r1, r0, #1
 800dfe6:	d1c7      	bne.n	800df78 <__sflush_r+0x34>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0c4      	beq.n	800df78 <__sflush_r+0x34>
 800dfee:	2b1d      	cmp	r3, #29
 800dff0:	d001      	beq.n	800dff6 <__sflush_r+0xb2>
 800dff2:	2b16      	cmp	r3, #22
 800dff4:	d101      	bne.n	800dffa <__sflush_r+0xb6>
 800dff6:	602f      	str	r7, [r5, #0]
 800dff8:	e7b1      	b.n	800df5e <__sflush_r+0x1a>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	e7ad      	b.n	800df60 <__sflush_r+0x1c>
 800e004:	690f      	ldr	r7, [r1, #16]
 800e006:	2f00      	cmp	r7, #0
 800e008:	d0a9      	beq.n	800df5e <__sflush_r+0x1a>
 800e00a:	0793      	lsls	r3, r2, #30
 800e00c:	680e      	ldr	r6, [r1, #0]
 800e00e:	bf08      	it	eq
 800e010:	694b      	ldreq	r3, [r1, #20]
 800e012:	600f      	str	r7, [r1, #0]
 800e014:	bf18      	it	ne
 800e016:	2300      	movne	r3, #0
 800e018:	eba6 0807 	sub.w	r8, r6, r7
 800e01c:	608b      	str	r3, [r1, #8]
 800e01e:	f1b8 0f00 	cmp.w	r8, #0
 800e022:	dd9c      	ble.n	800df5e <__sflush_r+0x1a>
 800e024:	6a21      	ldr	r1, [r4, #32]
 800e026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e028:	4643      	mov	r3, r8
 800e02a:	463a      	mov	r2, r7
 800e02c:	4628      	mov	r0, r5
 800e02e:	47b0      	blx	r6
 800e030:	2800      	cmp	r0, #0
 800e032:	dc06      	bgt.n	800e042 <__sflush_r+0xfe>
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	e78e      	b.n	800df60 <__sflush_r+0x1c>
 800e042:	4407      	add	r7, r0
 800e044:	eba8 0800 	sub.w	r8, r8, r0
 800e048:	e7e9      	b.n	800e01e <__sflush_r+0xda>
 800e04a:	bf00      	nop
 800e04c:	20400001 	.word	0x20400001

0800e050 <_fflush_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	690b      	ldr	r3, [r1, #16]
 800e054:	4605      	mov	r5, r0
 800e056:	460c      	mov	r4, r1
 800e058:	b913      	cbnz	r3, 800e060 <_fflush_r+0x10>
 800e05a:	2500      	movs	r5, #0
 800e05c:	4628      	mov	r0, r5
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	b118      	cbz	r0, 800e06a <_fflush_r+0x1a>
 800e062:	6983      	ldr	r3, [r0, #24]
 800e064:	b90b      	cbnz	r3, 800e06a <_fflush_r+0x1a>
 800e066:	f000 f887 	bl	800e178 <__sinit>
 800e06a:	4b14      	ldr	r3, [pc, #80]	; (800e0bc <_fflush_r+0x6c>)
 800e06c:	429c      	cmp	r4, r3
 800e06e:	d11b      	bne.n	800e0a8 <_fflush_r+0x58>
 800e070:	686c      	ldr	r4, [r5, #4]
 800e072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d0ef      	beq.n	800e05a <_fflush_r+0xa>
 800e07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e07c:	07d0      	lsls	r0, r2, #31
 800e07e:	d404      	bmi.n	800e08a <_fflush_r+0x3a>
 800e080:	0599      	lsls	r1, r3, #22
 800e082:	d402      	bmi.n	800e08a <_fflush_r+0x3a>
 800e084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e086:	f000 f927 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800e08a:	4628      	mov	r0, r5
 800e08c:	4621      	mov	r1, r4
 800e08e:	f7ff ff59 	bl	800df44 <__sflush_r>
 800e092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e094:	07da      	lsls	r2, r3, #31
 800e096:	4605      	mov	r5, r0
 800e098:	d4e0      	bmi.n	800e05c <_fflush_r+0xc>
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	059b      	lsls	r3, r3, #22
 800e09e:	d4dd      	bmi.n	800e05c <_fflush_r+0xc>
 800e0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0a2:	f000 f91a 	bl	800e2da <__retarget_lock_release_recursive>
 800e0a6:	e7d9      	b.n	800e05c <_fflush_r+0xc>
 800e0a8:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <_fflush_r+0x70>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d101      	bne.n	800e0b2 <_fflush_r+0x62>
 800e0ae:	68ac      	ldr	r4, [r5, #8]
 800e0b0:	e7df      	b.n	800e072 <_fflush_r+0x22>
 800e0b2:	4b04      	ldr	r3, [pc, #16]	; (800e0c4 <_fflush_r+0x74>)
 800e0b4:	429c      	cmp	r4, r3
 800e0b6:	bf08      	it	eq
 800e0b8:	68ec      	ldreq	r4, [r5, #12]
 800e0ba:	e7da      	b.n	800e072 <_fflush_r+0x22>
 800e0bc:	0800fb7c 	.word	0x0800fb7c
 800e0c0:	0800fb9c 	.word	0x0800fb9c
 800e0c4:	0800fb5c 	.word	0x0800fb5c

0800e0c8 <std>:
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	b510      	push	{r4, lr}
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0d6:	6083      	str	r3, [r0, #8]
 800e0d8:	8181      	strh	r1, [r0, #12]
 800e0da:	6643      	str	r3, [r0, #100]	; 0x64
 800e0dc:	81c2      	strh	r2, [r0, #14]
 800e0de:	6183      	str	r3, [r0, #24]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	2208      	movs	r2, #8
 800e0e4:	305c      	adds	r0, #92	; 0x5c
 800e0e6:	f7fb fc85 	bl	80099f4 <memset>
 800e0ea:	4b05      	ldr	r3, [pc, #20]	; (800e100 <std+0x38>)
 800e0ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e0ee:	4b05      	ldr	r3, [pc, #20]	; (800e104 <std+0x3c>)
 800e0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0f2:	4b05      	ldr	r3, [pc, #20]	; (800e108 <std+0x40>)
 800e0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0f6:	4b05      	ldr	r3, [pc, #20]	; (800e10c <std+0x44>)
 800e0f8:	6224      	str	r4, [r4, #32]
 800e0fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e0fc:	bd10      	pop	{r4, pc}
 800e0fe:	bf00      	nop
 800e100:	0800a739 	.word	0x0800a739
 800e104:	0800a75f 	.word	0x0800a75f
 800e108:	0800a797 	.word	0x0800a797
 800e10c:	0800a7bb 	.word	0x0800a7bb

0800e110 <_cleanup_r>:
 800e110:	4901      	ldr	r1, [pc, #4]	; (800e118 <_cleanup_r+0x8>)
 800e112:	f000 b8c1 	b.w	800e298 <_fwalk_reent>
 800e116:	bf00      	nop
 800e118:	0800e051 	.word	0x0800e051

0800e11c <__sfmoreglue>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	1e4a      	subs	r2, r1, #1
 800e120:	2568      	movs	r5, #104	; 0x68
 800e122:	4355      	muls	r5, r2
 800e124:	460e      	mov	r6, r1
 800e126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e12a:	f7ff f8ed 	bl	800d308 <_malloc_r>
 800e12e:	4604      	mov	r4, r0
 800e130:	b140      	cbz	r0, 800e144 <__sfmoreglue+0x28>
 800e132:	2100      	movs	r1, #0
 800e134:	e9c0 1600 	strd	r1, r6, [r0]
 800e138:	300c      	adds	r0, #12
 800e13a:	60a0      	str	r0, [r4, #8]
 800e13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e140:	f7fb fc58 	bl	80099f4 <memset>
 800e144:	4620      	mov	r0, r4
 800e146:	bd70      	pop	{r4, r5, r6, pc}

0800e148 <__sfp_lock_acquire>:
 800e148:	4801      	ldr	r0, [pc, #4]	; (800e150 <__sfp_lock_acquire+0x8>)
 800e14a:	f000 b8c5 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e14e:	bf00      	nop
 800e150:	200188b4 	.word	0x200188b4

0800e154 <__sfp_lock_release>:
 800e154:	4801      	ldr	r0, [pc, #4]	; (800e15c <__sfp_lock_release+0x8>)
 800e156:	f000 b8c0 	b.w	800e2da <__retarget_lock_release_recursive>
 800e15a:	bf00      	nop
 800e15c:	200188b4 	.word	0x200188b4

0800e160 <__sinit_lock_acquire>:
 800e160:	4801      	ldr	r0, [pc, #4]	; (800e168 <__sinit_lock_acquire+0x8>)
 800e162:	f000 b8b9 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e166:	bf00      	nop
 800e168:	200188af 	.word	0x200188af

0800e16c <__sinit_lock_release>:
 800e16c:	4801      	ldr	r0, [pc, #4]	; (800e174 <__sinit_lock_release+0x8>)
 800e16e:	f000 b8b4 	b.w	800e2da <__retarget_lock_release_recursive>
 800e172:	bf00      	nop
 800e174:	200188af 	.word	0x200188af

0800e178 <__sinit>:
 800e178:	b510      	push	{r4, lr}
 800e17a:	4604      	mov	r4, r0
 800e17c:	f7ff fff0 	bl	800e160 <__sinit_lock_acquire>
 800e180:	69a3      	ldr	r3, [r4, #24]
 800e182:	b11b      	cbz	r3, 800e18c <__sinit+0x14>
 800e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e188:	f7ff bff0 	b.w	800e16c <__sinit_lock_release>
 800e18c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e190:	6523      	str	r3, [r4, #80]	; 0x50
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <__sinit+0x68>)
 800e194:	4a13      	ldr	r2, [pc, #76]	; (800e1e4 <__sinit+0x6c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	62a2      	str	r2, [r4, #40]	; 0x28
 800e19a:	42a3      	cmp	r3, r4
 800e19c:	bf04      	itt	eq
 800e19e:	2301      	moveq	r3, #1
 800e1a0:	61a3      	streq	r3, [r4, #24]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f000 f820 	bl	800e1e8 <__sfp>
 800e1a8:	6060      	str	r0, [r4, #4]
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 f81c 	bl	800e1e8 <__sfp>
 800e1b0:	60a0      	str	r0, [r4, #8]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f818 	bl	800e1e8 <__sfp>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	60e0      	str	r0, [r4, #12]
 800e1bc:	2104      	movs	r1, #4
 800e1be:	6860      	ldr	r0, [r4, #4]
 800e1c0:	f7ff ff82 	bl	800e0c8 <std>
 800e1c4:	68a0      	ldr	r0, [r4, #8]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	2109      	movs	r1, #9
 800e1ca:	f7ff ff7d 	bl	800e0c8 <std>
 800e1ce:	68e0      	ldr	r0, [r4, #12]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	2112      	movs	r1, #18
 800e1d4:	f7ff ff78 	bl	800e0c8 <std>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	61a3      	str	r3, [r4, #24]
 800e1dc:	e7d2      	b.n	800e184 <__sinit+0xc>
 800e1de:	bf00      	nop
 800e1e0:	0800f6f0 	.word	0x0800f6f0
 800e1e4:	0800e111 	.word	0x0800e111

0800e1e8 <__sfp>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	4607      	mov	r7, r0
 800e1ec:	f7ff ffac 	bl	800e148 <__sfp_lock_acquire>
 800e1f0:	4b1e      	ldr	r3, [pc, #120]	; (800e26c <__sfp+0x84>)
 800e1f2:	681e      	ldr	r6, [r3, #0]
 800e1f4:	69b3      	ldr	r3, [r6, #24]
 800e1f6:	b913      	cbnz	r3, 800e1fe <__sfp+0x16>
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7ff ffbd 	bl	800e178 <__sinit>
 800e1fe:	3648      	adds	r6, #72	; 0x48
 800e200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e204:	3b01      	subs	r3, #1
 800e206:	d503      	bpl.n	800e210 <__sfp+0x28>
 800e208:	6833      	ldr	r3, [r6, #0]
 800e20a:	b30b      	cbz	r3, 800e250 <__sfp+0x68>
 800e20c:	6836      	ldr	r6, [r6, #0]
 800e20e:	e7f7      	b.n	800e200 <__sfp+0x18>
 800e210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e214:	b9d5      	cbnz	r5, 800e24c <__sfp+0x64>
 800e216:	4b16      	ldr	r3, [pc, #88]	; (800e270 <__sfp+0x88>)
 800e218:	60e3      	str	r3, [r4, #12]
 800e21a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e21e:	6665      	str	r5, [r4, #100]	; 0x64
 800e220:	f000 f859 	bl	800e2d6 <__retarget_lock_init_recursive>
 800e224:	f7ff ff96 	bl	800e154 <__sfp_lock_release>
 800e228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e22c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e230:	6025      	str	r5, [r4, #0]
 800e232:	61a5      	str	r5, [r4, #24]
 800e234:	2208      	movs	r2, #8
 800e236:	4629      	mov	r1, r5
 800e238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e23c:	f7fb fbda 	bl	80099f4 <memset>
 800e240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e248:	4620      	mov	r0, r4
 800e24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e24c:	3468      	adds	r4, #104	; 0x68
 800e24e:	e7d9      	b.n	800e204 <__sfp+0x1c>
 800e250:	2104      	movs	r1, #4
 800e252:	4638      	mov	r0, r7
 800e254:	f7ff ff62 	bl	800e11c <__sfmoreglue>
 800e258:	4604      	mov	r4, r0
 800e25a:	6030      	str	r0, [r6, #0]
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d1d5      	bne.n	800e20c <__sfp+0x24>
 800e260:	f7ff ff78 	bl	800e154 <__sfp_lock_release>
 800e264:	230c      	movs	r3, #12
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	e7ee      	b.n	800e248 <__sfp+0x60>
 800e26a:	bf00      	nop
 800e26c:	0800f6f0 	.word	0x0800f6f0
 800e270:	ffff0001 	.word	0xffff0001

0800e274 <fiprintf>:
 800e274:	b40e      	push	{r1, r2, r3}
 800e276:	b503      	push	{r0, r1, lr}
 800e278:	4601      	mov	r1, r0
 800e27a:	ab03      	add	r3, sp, #12
 800e27c:	4805      	ldr	r0, [pc, #20]	; (800e294 <fiprintf+0x20>)
 800e27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e282:	6800      	ldr	r0, [r0, #0]
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	f000 f89f 	bl	800e3c8 <_vfiprintf_r>
 800e28a:	b002      	add	sp, #8
 800e28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e290:	b003      	add	sp, #12
 800e292:	4770      	bx	lr
 800e294:	20000128 	.word	0x20000128

0800e298 <_fwalk_reent>:
 800e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	4606      	mov	r6, r0
 800e29e:	4688      	mov	r8, r1
 800e2a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2a4:	2700      	movs	r7, #0
 800e2a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2aa:	f1b9 0901 	subs.w	r9, r9, #1
 800e2ae:	d505      	bpl.n	800e2bc <_fwalk_reent+0x24>
 800e2b0:	6824      	ldr	r4, [r4, #0]
 800e2b2:	2c00      	cmp	r4, #0
 800e2b4:	d1f7      	bne.n	800e2a6 <_fwalk_reent+0xe>
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2bc:	89ab      	ldrh	r3, [r5, #12]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d907      	bls.n	800e2d2 <_fwalk_reent+0x3a>
 800e2c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	d003      	beq.n	800e2d2 <_fwalk_reent+0x3a>
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	47c0      	blx	r8
 800e2d0:	4307      	orrs	r7, r0
 800e2d2:	3568      	adds	r5, #104	; 0x68
 800e2d4:	e7e9      	b.n	800e2aa <_fwalk_reent+0x12>

0800e2d6 <__retarget_lock_init_recursive>:
 800e2d6:	4770      	bx	lr

0800e2d8 <__retarget_lock_acquire_recursive>:
 800e2d8:	4770      	bx	lr

0800e2da <__retarget_lock_release_recursive>:
 800e2da:	4770      	bx	lr

0800e2dc <memmove>:
 800e2dc:	4288      	cmp	r0, r1
 800e2de:	b510      	push	{r4, lr}
 800e2e0:	eb01 0402 	add.w	r4, r1, r2
 800e2e4:	d902      	bls.n	800e2ec <memmove+0x10>
 800e2e6:	4284      	cmp	r4, r0
 800e2e8:	4623      	mov	r3, r4
 800e2ea:	d807      	bhi.n	800e2fc <memmove+0x20>
 800e2ec:	1e43      	subs	r3, r0, #1
 800e2ee:	42a1      	cmp	r1, r4
 800e2f0:	d008      	beq.n	800e304 <memmove+0x28>
 800e2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2fa:	e7f8      	b.n	800e2ee <memmove+0x12>
 800e2fc:	4402      	add	r2, r0
 800e2fe:	4601      	mov	r1, r0
 800e300:	428a      	cmp	r2, r1
 800e302:	d100      	bne.n	800e306 <memmove+0x2a>
 800e304:	bd10      	pop	{r4, pc}
 800e306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e30e:	e7f7      	b.n	800e300 <memmove+0x24>

0800e310 <__malloc_lock>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__malloc_lock+0x8>)
 800e312:	f7ff bfe1 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e316:	bf00      	nop
 800e318:	200188b0 	.word	0x200188b0

0800e31c <__malloc_unlock>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__malloc_unlock+0x8>)
 800e31e:	f7ff bfdc 	b.w	800e2da <__retarget_lock_release_recursive>
 800e322:	bf00      	nop
 800e324:	200188b0 	.word	0x200188b0

0800e328 <_realloc_r>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	4607      	mov	r7, r0
 800e32c:	4614      	mov	r4, r2
 800e32e:	460e      	mov	r6, r1
 800e330:	b921      	cbnz	r1, 800e33c <_realloc_r+0x14>
 800e332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e336:	4611      	mov	r1, r2
 800e338:	f7fe bfe6 	b.w	800d308 <_malloc_r>
 800e33c:	b922      	cbnz	r2, 800e348 <_realloc_r+0x20>
 800e33e:	f7fe ff93 	bl	800d268 <_free_r>
 800e342:	4625      	mov	r5, r4
 800e344:	4628      	mov	r0, r5
 800e346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e348:	f000 fa9a 	bl	800e880 <_malloc_usable_size_r>
 800e34c:	42a0      	cmp	r0, r4
 800e34e:	d20f      	bcs.n	800e370 <_realloc_r+0x48>
 800e350:	4621      	mov	r1, r4
 800e352:	4638      	mov	r0, r7
 800e354:	f7fe ffd8 	bl	800d308 <_malloc_r>
 800e358:	4605      	mov	r5, r0
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d0f2      	beq.n	800e344 <_realloc_r+0x1c>
 800e35e:	4631      	mov	r1, r6
 800e360:	4622      	mov	r2, r4
 800e362:	f7fe faa7 	bl	800c8b4 <memcpy>
 800e366:	4631      	mov	r1, r6
 800e368:	4638      	mov	r0, r7
 800e36a:	f7fe ff7d 	bl	800d268 <_free_r>
 800e36e:	e7e9      	b.n	800e344 <_realloc_r+0x1c>
 800e370:	4635      	mov	r5, r6
 800e372:	e7e7      	b.n	800e344 <_realloc_r+0x1c>

0800e374 <__sfputc_r>:
 800e374:	6893      	ldr	r3, [r2, #8]
 800e376:	3b01      	subs	r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	b410      	push	{r4}
 800e37c:	6093      	str	r3, [r2, #8]
 800e37e:	da08      	bge.n	800e392 <__sfputc_r+0x1e>
 800e380:	6994      	ldr	r4, [r2, #24]
 800e382:	42a3      	cmp	r3, r4
 800e384:	db01      	blt.n	800e38a <__sfputc_r+0x16>
 800e386:	290a      	cmp	r1, #10
 800e388:	d103      	bne.n	800e392 <__sfputc_r+0x1e>
 800e38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e38e:	f000 b94b 	b.w	800e628 <__swbuf_r>
 800e392:	6813      	ldr	r3, [r2, #0]
 800e394:	1c58      	adds	r0, r3, #1
 800e396:	6010      	str	r0, [r2, #0]
 800e398:	7019      	strb	r1, [r3, #0]
 800e39a:	4608      	mov	r0, r1
 800e39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <__sfputs_r>:
 800e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	460f      	mov	r7, r1
 800e3a8:	4614      	mov	r4, r2
 800e3aa:	18d5      	adds	r5, r2, r3
 800e3ac:	42ac      	cmp	r4, r5
 800e3ae:	d101      	bne.n	800e3b4 <__sfputs_r+0x12>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e007      	b.n	800e3c4 <__sfputs_r+0x22>
 800e3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b8:	463a      	mov	r2, r7
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7ff ffda 	bl	800e374 <__sfputc_r>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d1f3      	bne.n	800e3ac <__sfputs_r+0xa>
 800e3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3c8 <_vfiprintf_r>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	460d      	mov	r5, r1
 800e3ce:	b09d      	sub	sp, #116	; 0x74
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	4698      	mov	r8, r3
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	b118      	cbz	r0, 800e3e0 <_vfiprintf_r+0x18>
 800e3d8:	6983      	ldr	r3, [r0, #24]
 800e3da:	b90b      	cbnz	r3, 800e3e0 <_vfiprintf_r+0x18>
 800e3dc:	f7ff fecc 	bl	800e178 <__sinit>
 800e3e0:	4b89      	ldr	r3, [pc, #548]	; (800e608 <_vfiprintf_r+0x240>)
 800e3e2:	429d      	cmp	r5, r3
 800e3e4:	d11b      	bne.n	800e41e <_vfiprintf_r+0x56>
 800e3e6:	6875      	ldr	r5, [r6, #4]
 800e3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3ea:	07d9      	lsls	r1, r3, #31
 800e3ec:	d405      	bmi.n	800e3fa <_vfiprintf_r+0x32>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	059a      	lsls	r2, r3, #22
 800e3f2:	d402      	bmi.n	800e3fa <_vfiprintf_r+0x32>
 800e3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3f6:	f7ff ff6f 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800e3fa:	89ab      	ldrh	r3, [r5, #12]
 800e3fc:	071b      	lsls	r3, r3, #28
 800e3fe:	d501      	bpl.n	800e404 <_vfiprintf_r+0x3c>
 800e400:	692b      	ldr	r3, [r5, #16]
 800e402:	b9eb      	cbnz	r3, 800e440 <_vfiprintf_r+0x78>
 800e404:	4629      	mov	r1, r5
 800e406:	4630      	mov	r0, r6
 800e408:	f000 f960 	bl	800e6cc <__swsetup_r>
 800e40c:	b1c0      	cbz	r0, 800e440 <_vfiprintf_r+0x78>
 800e40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e410:	07dc      	lsls	r4, r3, #31
 800e412:	d50e      	bpl.n	800e432 <_vfiprintf_r+0x6a>
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	b01d      	add	sp, #116	; 0x74
 800e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41e:	4b7b      	ldr	r3, [pc, #492]	; (800e60c <_vfiprintf_r+0x244>)
 800e420:	429d      	cmp	r5, r3
 800e422:	d101      	bne.n	800e428 <_vfiprintf_r+0x60>
 800e424:	68b5      	ldr	r5, [r6, #8]
 800e426:	e7df      	b.n	800e3e8 <_vfiprintf_r+0x20>
 800e428:	4b79      	ldr	r3, [pc, #484]	; (800e610 <_vfiprintf_r+0x248>)
 800e42a:	429d      	cmp	r5, r3
 800e42c:	bf08      	it	eq
 800e42e:	68f5      	ldreq	r5, [r6, #12]
 800e430:	e7da      	b.n	800e3e8 <_vfiprintf_r+0x20>
 800e432:	89ab      	ldrh	r3, [r5, #12]
 800e434:	0598      	lsls	r0, r3, #22
 800e436:	d4ed      	bmi.n	800e414 <_vfiprintf_r+0x4c>
 800e438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e43a:	f7ff ff4e 	bl	800e2da <__retarget_lock_release_recursive>
 800e43e:	e7e9      	b.n	800e414 <_vfiprintf_r+0x4c>
 800e440:	2300      	movs	r3, #0
 800e442:	9309      	str	r3, [sp, #36]	; 0x24
 800e444:	2320      	movs	r3, #32
 800e446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e44e:	2330      	movs	r3, #48	; 0x30
 800e450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e614 <_vfiprintf_r+0x24c>
 800e454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e458:	f04f 0901 	mov.w	r9, #1
 800e45c:	4623      	mov	r3, r4
 800e45e:	469a      	mov	sl, r3
 800e460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e464:	b10a      	cbz	r2, 800e46a <_vfiprintf_r+0xa2>
 800e466:	2a25      	cmp	r2, #37	; 0x25
 800e468:	d1f9      	bne.n	800e45e <_vfiprintf_r+0x96>
 800e46a:	ebba 0b04 	subs.w	fp, sl, r4
 800e46e:	d00b      	beq.n	800e488 <_vfiprintf_r+0xc0>
 800e470:	465b      	mov	r3, fp
 800e472:	4622      	mov	r2, r4
 800e474:	4629      	mov	r1, r5
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff93 	bl	800e3a2 <__sfputs_r>
 800e47c:	3001      	adds	r0, #1
 800e47e:	f000 80aa 	beq.w	800e5d6 <_vfiprintf_r+0x20e>
 800e482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e484:	445a      	add	r2, fp
 800e486:	9209      	str	r2, [sp, #36]	; 0x24
 800e488:	f89a 3000 	ldrb.w	r3, [sl]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80a2 	beq.w	800e5d6 <_vfiprintf_r+0x20e>
 800e492:	2300      	movs	r3, #0
 800e494:	f04f 32ff 	mov.w	r2, #4294967295
 800e498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e49c:	f10a 0a01 	add.w	sl, sl, #1
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	9307      	str	r3, [sp, #28]
 800e4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e4aa:	4654      	mov	r4, sl
 800e4ac:	2205      	movs	r2, #5
 800e4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b2:	4858      	ldr	r0, [pc, #352]	; (800e614 <_vfiprintf_r+0x24c>)
 800e4b4:	f7f1 fedc 	bl	8000270 <memchr>
 800e4b8:	9a04      	ldr	r2, [sp, #16]
 800e4ba:	b9d8      	cbnz	r0, 800e4f4 <_vfiprintf_r+0x12c>
 800e4bc:	06d1      	lsls	r1, r2, #27
 800e4be:	bf44      	itt	mi
 800e4c0:	2320      	movmi	r3, #32
 800e4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c6:	0713      	lsls	r3, r2, #28
 800e4c8:	bf44      	itt	mi
 800e4ca:	232b      	movmi	r3, #43	; 0x2b
 800e4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4d6:	d015      	beq.n	800e504 <_vfiprintf_r+0x13c>
 800e4d8:	9a07      	ldr	r2, [sp, #28]
 800e4da:	4654      	mov	r4, sl
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f04f 0c0a 	mov.w	ip, #10
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e8:	3b30      	subs	r3, #48	; 0x30
 800e4ea:	2b09      	cmp	r3, #9
 800e4ec:	d94e      	bls.n	800e58c <_vfiprintf_r+0x1c4>
 800e4ee:	b1b0      	cbz	r0, 800e51e <_vfiprintf_r+0x156>
 800e4f0:	9207      	str	r2, [sp, #28]
 800e4f2:	e014      	b.n	800e51e <_vfiprintf_r+0x156>
 800e4f4:	eba0 0308 	sub.w	r3, r0, r8
 800e4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	9304      	str	r3, [sp, #16]
 800e500:	46a2      	mov	sl, r4
 800e502:	e7d2      	b.n	800e4aa <_vfiprintf_r+0xe2>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	1d19      	adds	r1, r3, #4
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	9103      	str	r1, [sp, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	bfbb      	ittet	lt
 800e510:	425b      	neglt	r3, r3
 800e512:	f042 0202 	orrlt.w	r2, r2, #2
 800e516:	9307      	strge	r3, [sp, #28]
 800e518:	9307      	strlt	r3, [sp, #28]
 800e51a:	bfb8      	it	lt
 800e51c:	9204      	strlt	r2, [sp, #16]
 800e51e:	7823      	ldrb	r3, [r4, #0]
 800e520:	2b2e      	cmp	r3, #46	; 0x2e
 800e522:	d10c      	bne.n	800e53e <_vfiprintf_r+0x176>
 800e524:	7863      	ldrb	r3, [r4, #1]
 800e526:	2b2a      	cmp	r3, #42	; 0x2a
 800e528:	d135      	bne.n	800e596 <_vfiprintf_r+0x1ce>
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	1d1a      	adds	r2, r3, #4
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	9203      	str	r2, [sp, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	bfb8      	it	lt
 800e536:	f04f 33ff 	movlt.w	r3, #4294967295
 800e53a:	3402      	adds	r4, #2
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e624 <_vfiprintf_r+0x25c>
 800e542:	7821      	ldrb	r1, [r4, #0]
 800e544:	2203      	movs	r2, #3
 800e546:	4650      	mov	r0, sl
 800e548:	f7f1 fe92 	bl	8000270 <memchr>
 800e54c:	b140      	cbz	r0, 800e560 <_vfiprintf_r+0x198>
 800e54e:	2340      	movs	r3, #64	; 0x40
 800e550:	eba0 000a 	sub.w	r0, r0, sl
 800e554:	fa03 f000 	lsl.w	r0, r3, r0
 800e558:	9b04      	ldr	r3, [sp, #16]
 800e55a:	4303      	orrs	r3, r0
 800e55c:	3401      	adds	r4, #1
 800e55e:	9304      	str	r3, [sp, #16]
 800e560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e564:	482c      	ldr	r0, [pc, #176]	; (800e618 <_vfiprintf_r+0x250>)
 800e566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e56a:	2206      	movs	r2, #6
 800e56c:	f7f1 fe80 	bl	8000270 <memchr>
 800e570:	2800      	cmp	r0, #0
 800e572:	d03f      	beq.n	800e5f4 <_vfiprintf_r+0x22c>
 800e574:	4b29      	ldr	r3, [pc, #164]	; (800e61c <_vfiprintf_r+0x254>)
 800e576:	bb1b      	cbnz	r3, 800e5c0 <_vfiprintf_r+0x1f8>
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	3307      	adds	r3, #7
 800e57c:	f023 0307 	bic.w	r3, r3, #7
 800e580:	3308      	adds	r3, #8
 800e582:	9303      	str	r3, [sp, #12]
 800e584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e586:	443b      	add	r3, r7
 800e588:	9309      	str	r3, [sp, #36]	; 0x24
 800e58a:	e767      	b.n	800e45c <_vfiprintf_r+0x94>
 800e58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e590:	460c      	mov	r4, r1
 800e592:	2001      	movs	r0, #1
 800e594:	e7a5      	b.n	800e4e2 <_vfiprintf_r+0x11a>
 800e596:	2300      	movs	r3, #0
 800e598:	3401      	adds	r4, #1
 800e59a:	9305      	str	r3, [sp, #20]
 800e59c:	4619      	mov	r1, r3
 800e59e:	f04f 0c0a 	mov.w	ip, #10
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5a8:	3a30      	subs	r2, #48	; 0x30
 800e5aa:	2a09      	cmp	r2, #9
 800e5ac:	d903      	bls.n	800e5b6 <_vfiprintf_r+0x1ee>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d0c5      	beq.n	800e53e <_vfiprintf_r+0x176>
 800e5b2:	9105      	str	r1, [sp, #20]
 800e5b4:	e7c3      	b.n	800e53e <_vfiprintf_r+0x176>
 800e5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e7f0      	b.n	800e5a2 <_vfiprintf_r+0x1da>
 800e5c0:	ab03      	add	r3, sp, #12
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	462a      	mov	r2, r5
 800e5c6:	4b16      	ldr	r3, [pc, #88]	; (800e620 <_vfiprintf_r+0x258>)
 800e5c8:	a904      	add	r1, sp, #16
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f7fb faac 	bl	8009b28 <_printf_float>
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	1c78      	adds	r0, r7, #1
 800e5d4:	d1d6      	bne.n	800e584 <_vfiprintf_r+0x1bc>
 800e5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5d8:	07d9      	lsls	r1, r3, #31
 800e5da:	d405      	bmi.n	800e5e8 <_vfiprintf_r+0x220>
 800e5dc:	89ab      	ldrh	r3, [r5, #12]
 800e5de:	059a      	lsls	r2, r3, #22
 800e5e0:	d402      	bmi.n	800e5e8 <_vfiprintf_r+0x220>
 800e5e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5e4:	f7ff fe79 	bl	800e2da <__retarget_lock_release_recursive>
 800e5e8:	89ab      	ldrh	r3, [r5, #12]
 800e5ea:	065b      	lsls	r3, r3, #25
 800e5ec:	f53f af12 	bmi.w	800e414 <_vfiprintf_r+0x4c>
 800e5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5f2:	e711      	b.n	800e418 <_vfiprintf_r+0x50>
 800e5f4:	ab03      	add	r3, sp, #12
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	462a      	mov	r2, r5
 800e5fa:	4b09      	ldr	r3, [pc, #36]	; (800e620 <_vfiprintf_r+0x258>)
 800e5fc:	a904      	add	r1, sp, #16
 800e5fe:	4630      	mov	r0, r6
 800e600:	f7fb fd1e 	bl	800a040 <_printf_i>
 800e604:	e7e4      	b.n	800e5d0 <_vfiprintf_r+0x208>
 800e606:	bf00      	nop
 800e608:	0800fb7c 	.word	0x0800fb7c
 800e60c:	0800fb9c 	.word	0x0800fb9c
 800e610:	0800fb5c 	.word	0x0800fb5c
 800e614:	0800faf4 	.word	0x0800faf4
 800e618:	0800fafe 	.word	0x0800fafe
 800e61c:	08009b29 	.word	0x08009b29
 800e620:	0800e3a3 	.word	0x0800e3a3
 800e624:	0800fafa 	.word	0x0800fafa

0800e628 <__swbuf_r>:
 800e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62a:	460e      	mov	r6, r1
 800e62c:	4614      	mov	r4, r2
 800e62e:	4605      	mov	r5, r0
 800e630:	b118      	cbz	r0, 800e63a <__swbuf_r+0x12>
 800e632:	6983      	ldr	r3, [r0, #24]
 800e634:	b90b      	cbnz	r3, 800e63a <__swbuf_r+0x12>
 800e636:	f7ff fd9f 	bl	800e178 <__sinit>
 800e63a:	4b21      	ldr	r3, [pc, #132]	; (800e6c0 <__swbuf_r+0x98>)
 800e63c:	429c      	cmp	r4, r3
 800e63e:	d12b      	bne.n	800e698 <__swbuf_r+0x70>
 800e640:	686c      	ldr	r4, [r5, #4]
 800e642:	69a3      	ldr	r3, [r4, #24]
 800e644:	60a3      	str	r3, [r4, #8]
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	071a      	lsls	r2, r3, #28
 800e64a:	d52f      	bpl.n	800e6ac <__swbuf_r+0x84>
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	b36b      	cbz	r3, 800e6ac <__swbuf_r+0x84>
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	6820      	ldr	r0, [r4, #0]
 800e654:	1ac0      	subs	r0, r0, r3
 800e656:	6963      	ldr	r3, [r4, #20]
 800e658:	b2f6      	uxtb	r6, r6
 800e65a:	4283      	cmp	r3, r0
 800e65c:	4637      	mov	r7, r6
 800e65e:	dc04      	bgt.n	800e66a <__swbuf_r+0x42>
 800e660:	4621      	mov	r1, r4
 800e662:	4628      	mov	r0, r5
 800e664:	f7ff fcf4 	bl	800e050 <_fflush_r>
 800e668:	bb30      	cbnz	r0, 800e6b8 <__swbuf_r+0x90>
 800e66a:	68a3      	ldr	r3, [r4, #8]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	60a3      	str	r3, [r4, #8]
 800e670:	6823      	ldr	r3, [r4, #0]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	6022      	str	r2, [r4, #0]
 800e676:	701e      	strb	r6, [r3, #0]
 800e678:	6963      	ldr	r3, [r4, #20]
 800e67a:	3001      	adds	r0, #1
 800e67c:	4283      	cmp	r3, r0
 800e67e:	d004      	beq.n	800e68a <__swbuf_r+0x62>
 800e680:	89a3      	ldrh	r3, [r4, #12]
 800e682:	07db      	lsls	r3, r3, #31
 800e684:	d506      	bpl.n	800e694 <__swbuf_r+0x6c>
 800e686:	2e0a      	cmp	r6, #10
 800e688:	d104      	bne.n	800e694 <__swbuf_r+0x6c>
 800e68a:	4621      	mov	r1, r4
 800e68c:	4628      	mov	r0, r5
 800e68e:	f7ff fcdf 	bl	800e050 <_fflush_r>
 800e692:	b988      	cbnz	r0, 800e6b8 <__swbuf_r+0x90>
 800e694:	4638      	mov	r0, r7
 800e696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e698:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <__swbuf_r+0x9c>)
 800e69a:	429c      	cmp	r4, r3
 800e69c:	d101      	bne.n	800e6a2 <__swbuf_r+0x7a>
 800e69e:	68ac      	ldr	r4, [r5, #8]
 800e6a0:	e7cf      	b.n	800e642 <__swbuf_r+0x1a>
 800e6a2:	4b09      	ldr	r3, [pc, #36]	; (800e6c8 <__swbuf_r+0xa0>)
 800e6a4:	429c      	cmp	r4, r3
 800e6a6:	bf08      	it	eq
 800e6a8:	68ec      	ldreq	r4, [r5, #12]
 800e6aa:	e7ca      	b.n	800e642 <__swbuf_r+0x1a>
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f000 f80c 	bl	800e6cc <__swsetup_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d0cb      	beq.n	800e650 <__swbuf_r+0x28>
 800e6b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e6bc:	e7ea      	b.n	800e694 <__swbuf_r+0x6c>
 800e6be:	bf00      	nop
 800e6c0:	0800fb7c 	.word	0x0800fb7c
 800e6c4:	0800fb9c 	.word	0x0800fb9c
 800e6c8:	0800fb5c 	.word	0x0800fb5c

0800e6cc <__swsetup_r>:
 800e6cc:	4b32      	ldr	r3, [pc, #200]	; (800e798 <__swsetup_r+0xcc>)
 800e6ce:	b570      	push	{r4, r5, r6, lr}
 800e6d0:	681d      	ldr	r5, [r3, #0]
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	b125      	cbz	r5, 800e6e2 <__swsetup_r+0x16>
 800e6d8:	69ab      	ldr	r3, [r5, #24]
 800e6da:	b913      	cbnz	r3, 800e6e2 <__swsetup_r+0x16>
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7ff fd4b 	bl	800e178 <__sinit>
 800e6e2:	4b2e      	ldr	r3, [pc, #184]	; (800e79c <__swsetup_r+0xd0>)
 800e6e4:	429c      	cmp	r4, r3
 800e6e6:	d10f      	bne.n	800e708 <__swsetup_r+0x3c>
 800e6e8:	686c      	ldr	r4, [r5, #4]
 800e6ea:	89a3      	ldrh	r3, [r4, #12]
 800e6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6f0:	0719      	lsls	r1, r3, #28
 800e6f2:	d42c      	bmi.n	800e74e <__swsetup_r+0x82>
 800e6f4:	06dd      	lsls	r5, r3, #27
 800e6f6:	d411      	bmi.n	800e71c <__swsetup_r+0x50>
 800e6f8:	2309      	movs	r3, #9
 800e6fa:	6033      	str	r3, [r6, #0]
 800e6fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	f04f 30ff 	mov.w	r0, #4294967295
 800e706:	e03e      	b.n	800e786 <__swsetup_r+0xba>
 800e708:	4b25      	ldr	r3, [pc, #148]	; (800e7a0 <__swsetup_r+0xd4>)
 800e70a:	429c      	cmp	r4, r3
 800e70c:	d101      	bne.n	800e712 <__swsetup_r+0x46>
 800e70e:	68ac      	ldr	r4, [r5, #8]
 800e710:	e7eb      	b.n	800e6ea <__swsetup_r+0x1e>
 800e712:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <__swsetup_r+0xd8>)
 800e714:	429c      	cmp	r4, r3
 800e716:	bf08      	it	eq
 800e718:	68ec      	ldreq	r4, [r5, #12]
 800e71a:	e7e6      	b.n	800e6ea <__swsetup_r+0x1e>
 800e71c:	0758      	lsls	r0, r3, #29
 800e71e:	d512      	bpl.n	800e746 <__swsetup_r+0x7a>
 800e720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e722:	b141      	cbz	r1, 800e736 <__swsetup_r+0x6a>
 800e724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e728:	4299      	cmp	r1, r3
 800e72a:	d002      	beq.n	800e732 <__swsetup_r+0x66>
 800e72c:	4630      	mov	r0, r6
 800e72e:	f7fe fd9b 	bl	800d268 <_free_r>
 800e732:	2300      	movs	r3, #0
 800e734:	6363      	str	r3, [r4, #52]	; 0x34
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	2300      	movs	r3, #0
 800e740:	6063      	str	r3, [r4, #4]
 800e742:	6923      	ldr	r3, [r4, #16]
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	89a3      	ldrh	r3, [r4, #12]
 800e748:	f043 0308 	orr.w	r3, r3, #8
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	6923      	ldr	r3, [r4, #16]
 800e750:	b94b      	cbnz	r3, 800e766 <__swsetup_r+0x9a>
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e75c:	d003      	beq.n	800e766 <__swsetup_r+0x9a>
 800e75e:	4621      	mov	r1, r4
 800e760:	4630      	mov	r0, r6
 800e762:	f000 f84d 	bl	800e800 <__smakebuf_r>
 800e766:	89a0      	ldrh	r0, [r4, #12]
 800e768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e76c:	f010 0301 	ands.w	r3, r0, #1
 800e770:	d00a      	beq.n	800e788 <__swsetup_r+0xbc>
 800e772:	2300      	movs	r3, #0
 800e774:	60a3      	str	r3, [r4, #8]
 800e776:	6963      	ldr	r3, [r4, #20]
 800e778:	425b      	negs	r3, r3
 800e77a:	61a3      	str	r3, [r4, #24]
 800e77c:	6923      	ldr	r3, [r4, #16]
 800e77e:	b943      	cbnz	r3, 800e792 <__swsetup_r+0xc6>
 800e780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e784:	d1ba      	bne.n	800e6fc <__swsetup_r+0x30>
 800e786:	bd70      	pop	{r4, r5, r6, pc}
 800e788:	0781      	lsls	r1, r0, #30
 800e78a:	bf58      	it	pl
 800e78c:	6963      	ldrpl	r3, [r4, #20]
 800e78e:	60a3      	str	r3, [r4, #8]
 800e790:	e7f4      	b.n	800e77c <__swsetup_r+0xb0>
 800e792:	2000      	movs	r0, #0
 800e794:	e7f7      	b.n	800e786 <__swsetup_r+0xba>
 800e796:	bf00      	nop
 800e798:	20000128 	.word	0x20000128
 800e79c:	0800fb7c 	.word	0x0800fb7c
 800e7a0:	0800fb9c 	.word	0x0800fb9c
 800e7a4:	0800fb5c 	.word	0x0800fb5c

0800e7a8 <abort>:
 800e7a8:	b508      	push	{r3, lr}
 800e7aa:	2006      	movs	r0, #6
 800e7ac:	f000 f898 	bl	800e8e0 <raise>
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	f7f4 fd2f 	bl	8003214 <_exit>

0800e7b6 <__swhatbuf_r>:
 800e7b6:	b570      	push	{r4, r5, r6, lr}
 800e7b8:	460e      	mov	r6, r1
 800e7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7be:	2900      	cmp	r1, #0
 800e7c0:	b096      	sub	sp, #88	; 0x58
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	461d      	mov	r5, r3
 800e7c6:	da07      	bge.n	800e7d8 <__swhatbuf_r+0x22>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	602b      	str	r3, [r5, #0]
 800e7cc:	89b3      	ldrh	r3, [r6, #12]
 800e7ce:	061a      	lsls	r2, r3, #24
 800e7d0:	d410      	bmi.n	800e7f4 <__swhatbuf_r+0x3e>
 800e7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7d6:	e00e      	b.n	800e7f6 <__swhatbuf_r+0x40>
 800e7d8:	466a      	mov	r2, sp
 800e7da:	f000 f89d 	bl	800e918 <_fstat_r>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	dbf2      	blt.n	800e7c8 <__swhatbuf_r+0x12>
 800e7e2:	9a01      	ldr	r2, [sp, #4]
 800e7e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7ec:	425a      	negs	r2, r3
 800e7ee:	415a      	adcs	r2, r3
 800e7f0:	602a      	str	r2, [r5, #0]
 800e7f2:	e7ee      	b.n	800e7d2 <__swhatbuf_r+0x1c>
 800e7f4:	2340      	movs	r3, #64	; 0x40
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	b016      	add	sp, #88	; 0x58
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e800 <__smakebuf_r>:
 800e800:	898b      	ldrh	r3, [r1, #12]
 800e802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e804:	079d      	lsls	r5, r3, #30
 800e806:	4606      	mov	r6, r0
 800e808:	460c      	mov	r4, r1
 800e80a:	d507      	bpl.n	800e81c <__smakebuf_r+0x1c>
 800e80c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	2301      	movs	r3, #1
 800e816:	6163      	str	r3, [r4, #20]
 800e818:	b002      	add	sp, #8
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	ab01      	add	r3, sp, #4
 800e81e:	466a      	mov	r2, sp
 800e820:	f7ff ffc9 	bl	800e7b6 <__swhatbuf_r>
 800e824:	9900      	ldr	r1, [sp, #0]
 800e826:	4605      	mov	r5, r0
 800e828:	4630      	mov	r0, r6
 800e82a:	f7fe fd6d 	bl	800d308 <_malloc_r>
 800e82e:	b948      	cbnz	r0, 800e844 <__smakebuf_r+0x44>
 800e830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e834:	059a      	lsls	r2, r3, #22
 800e836:	d4ef      	bmi.n	800e818 <__smakebuf_r+0x18>
 800e838:	f023 0303 	bic.w	r3, r3, #3
 800e83c:	f043 0302 	orr.w	r3, r3, #2
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	e7e3      	b.n	800e80c <__smakebuf_r+0xc>
 800e844:	4b0d      	ldr	r3, [pc, #52]	; (800e87c <__smakebuf_r+0x7c>)
 800e846:	62b3      	str	r3, [r6, #40]	; 0x28
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	6020      	str	r0, [r4, #0]
 800e84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	9b00      	ldr	r3, [sp, #0]
 800e854:	6163      	str	r3, [r4, #20]
 800e856:	9b01      	ldr	r3, [sp, #4]
 800e858:	6120      	str	r0, [r4, #16]
 800e85a:	b15b      	cbz	r3, 800e874 <__smakebuf_r+0x74>
 800e85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e860:	4630      	mov	r0, r6
 800e862:	f000 f86b 	bl	800e93c <_isatty_r>
 800e866:	b128      	cbz	r0, 800e874 <__smakebuf_r+0x74>
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	f023 0303 	bic.w	r3, r3, #3
 800e86e:	f043 0301 	orr.w	r3, r3, #1
 800e872:	81a3      	strh	r3, [r4, #12]
 800e874:	89a0      	ldrh	r0, [r4, #12]
 800e876:	4305      	orrs	r5, r0
 800e878:	81a5      	strh	r5, [r4, #12]
 800e87a:	e7cd      	b.n	800e818 <__smakebuf_r+0x18>
 800e87c:	0800e111 	.word	0x0800e111

0800e880 <_malloc_usable_size_r>:
 800e880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e884:	1f18      	subs	r0, r3, #4
 800e886:	2b00      	cmp	r3, #0
 800e888:	bfbc      	itt	lt
 800e88a:	580b      	ldrlt	r3, [r1, r0]
 800e88c:	18c0      	addlt	r0, r0, r3
 800e88e:	4770      	bx	lr

0800e890 <_raise_r>:
 800e890:	291f      	cmp	r1, #31
 800e892:	b538      	push	{r3, r4, r5, lr}
 800e894:	4604      	mov	r4, r0
 800e896:	460d      	mov	r5, r1
 800e898:	d904      	bls.n	800e8a4 <_raise_r+0x14>
 800e89a:	2316      	movs	r3, #22
 800e89c:	6003      	str	r3, [r0, #0]
 800e89e:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8a6:	b112      	cbz	r2, 800e8ae <_raise_r+0x1e>
 800e8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8ac:	b94b      	cbnz	r3, 800e8c2 <_raise_r+0x32>
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f000 f830 	bl	800e914 <_getpid_r>
 800e8b4:	462a      	mov	r2, r5
 800e8b6:	4601      	mov	r1, r0
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8be:	f000 b817 	b.w	800e8f0 <_kill_r>
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d00a      	beq.n	800e8dc <_raise_r+0x4c>
 800e8c6:	1c59      	adds	r1, r3, #1
 800e8c8:	d103      	bne.n	800e8d2 <_raise_r+0x42>
 800e8ca:	2316      	movs	r3, #22
 800e8cc:	6003      	str	r3, [r0, #0]
 800e8ce:	2001      	movs	r0, #1
 800e8d0:	e7e7      	b.n	800e8a2 <_raise_r+0x12>
 800e8d2:	2400      	movs	r4, #0
 800e8d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8d8:	4628      	mov	r0, r5
 800e8da:	4798      	blx	r3
 800e8dc:	2000      	movs	r0, #0
 800e8de:	e7e0      	b.n	800e8a2 <_raise_r+0x12>

0800e8e0 <raise>:
 800e8e0:	4b02      	ldr	r3, [pc, #8]	; (800e8ec <raise+0xc>)
 800e8e2:	4601      	mov	r1, r0
 800e8e4:	6818      	ldr	r0, [r3, #0]
 800e8e6:	f7ff bfd3 	b.w	800e890 <_raise_r>
 800e8ea:	bf00      	nop
 800e8ec:	20000128 	.word	0x20000128

0800e8f0 <_kill_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_kill_r+0x20>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	4608      	mov	r0, r1
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f7f4 fc79 	bl	80031f4 <_kill>
 800e902:	1c43      	adds	r3, r0, #1
 800e904:	d102      	bne.n	800e90c <_kill_r+0x1c>
 800e906:	682b      	ldr	r3, [r5, #0]
 800e908:	b103      	cbz	r3, 800e90c <_kill_r+0x1c>
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	bd38      	pop	{r3, r4, r5, pc}
 800e90e:	bf00      	nop
 800e910:	200188a8 	.word	0x200188a8

0800e914 <_getpid_r>:
 800e914:	f7f4 bc66 	b.w	80031e4 <_getpid>

0800e918 <_fstat_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4d07      	ldr	r5, [pc, #28]	; (800e938 <_fstat_r+0x20>)
 800e91c:	2300      	movs	r3, #0
 800e91e:	4604      	mov	r4, r0
 800e920:	4608      	mov	r0, r1
 800e922:	4611      	mov	r1, r2
 800e924:	602b      	str	r3, [r5, #0]
 800e926:	f7f4 fcc4 	bl	80032b2 <_fstat>
 800e92a:	1c43      	adds	r3, r0, #1
 800e92c:	d102      	bne.n	800e934 <_fstat_r+0x1c>
 800e92e:	682b      	ldr	r3, [r5, #0]
 800e930:	b103      	cbz	r3, 800e934 <_fstat_r+0x1c>
 800e932:	6023      	str	r3, [r4, #0]
 800e934:	bd38      	pop	{r3, r4, r5, pc}
 800e936:	bf00      	nop
 800e938:	200188a8 	.word	0x200188a8

0800e93c <_isatty_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4d06      	ldr	r5, [pc, #24]	; (800e958 <_isatty_r+0x1c>)
 800e940:	2300      	movs	r3, #0
 800e942:	4604      	mov	r4, r0
 800e944:	4608      	mov	r0, r1
 800e946:	602b      	str	r3, [r5, #0]
 800e948:	f7f4 fcc3 	bl	80032d2 <_isatty>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_isatty_r+0x1a>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_isatty_r+0x1a>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	200188a8 	.word	0x200188a8

0800e95c <_init>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	bf00      	nop
 800e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e962:	bc08      	pop	{r3}
 800e964:	469e      	mov	lr, r3
 800e966:	4770      	bx	lr

0800e968 <_fini>:
 800e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96a:	bf00      	nop
 800e96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e96e:	bc08      	pop	{r3}
 800e970:	469e      	mov	lr, r3
 800e972:	4770      	bx	lr
