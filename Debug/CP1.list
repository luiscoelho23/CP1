
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a88c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0800aa90  0800aa90  0001aa90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b554  0800b554  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b55c  0800b55c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001041c  2000020c  0800b770  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010628  0800b770  00020628  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001245c  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283d  00000000  00000000  00032696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029173  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f303  00000000  00000000  0005f50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f825e  00000000  00000000  0006e80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  00166ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000020c 	.word	0x2000020c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa74 	.word	0x0800aa74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000210 	.word	0x20000210
 800023c:	0800aa74 	.word	0x0800aa74

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_ADC3_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC3_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_ADC3_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a32:	f001 fbb7 	bl	80021a4 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f001 f822 	bl	8001a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC3_Init+0x98>)
 8000a52:	f001 fd85 	bl	8002560 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f001 f812 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000238 	.word	0x20000238
 8000a6c:	40012200 	.word	0x40012200
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d154      	bne.n	8000b40 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000af6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000afa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <HAL_ADC_MspInit+0xdc>)
 8000b0c:	f002 f91c 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	230f      	movs	r3, #15
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <HAL_ADC_MspInit+0xe0>)
 8000b24:	f002 f910 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <HAL_ADC_MspInit+0xe4>)
 8000b3c:	f002 f904 	bl	8002d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40012200 	.word	0x40012200
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000

08000b5c <config_ADC>:
}

/* USER CODE BEGIN 1 */

void config_ADC(unsigned int channel)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

	sConfig.Channel = (uint32_t) channel;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <config_ADC+0x40>)
 8000b86:	f001 fceb 	bl	8002560 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <config_ADC+0x38>
	{
		Error_Handler();
 8000b90:	f000 ff78 	bl	8001a84 <Error_Handler>
	}
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000238 	.word	0x20000238

08000ba0 <read_ADC>:

uint32_t read_ADC(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	volatile uint32_t adcValue;

	if(HAL_ADC_Start(&hadc3) == HAL_OK)
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <read_ADC+0x3c>)
 8000ba8:	f001 fb40 	bl	800222c <HAL_ADC_Start>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <read_ADC+0x32>
	{
	  if (HAL_ADC_PollForConversion(&hadc3, 1000) == HAL_OK)
 8000bb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <read_ADC+0x3c>)
 8000bb8:	f001 fc3a 	bl	8002430 <HAL_ADC_PollForConversion>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d104      	bne.n	8000bcc <read_ADC+0x2c>
	  {
		  adcValue = HAL_ADC_GetValue(&hadc3);
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <read_ADC+0x3c>)
 8000bc4:	f001 fcbf 	bl	8002546 <HAL_ADC_GetValue>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	607b      	str	r3, [r7, #4]
	  }
	  HAL_ADC_Stop(&hadc3);
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <read_ADC+0x3c>)
 8000bce:	f001 fbfb 	bl	80023c8 <HAL_ADC_Stop>
	}

	return adcValue;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000238 	.word	0x20000238

08000be0 <check_command>:
#include "commands.h"


unsigned char check_command(char* message)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	char cmd = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MR", 2)) * MR;
 8000bec:	2202      	movs	r2, #2
 8000bee:	4947      	ldr	r1, [pc, #284]	; (8000d0c <check_command+0x12c>)
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f005 fe7a 	bl	80068ea <strncmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	4413      	add	r3, r2
 8000c08:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MW", 2)) * MW;
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4940      	ldr	r1, [pc, #256]	; (8000d10 <check_command+0x130>)
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f005 fe6b 	bl	80068ea <strncmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <check_command+0x3e>
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	e000      	b.n	8000c20 <check_command+0x40>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4413      	add	r3, r2
 8000c24:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MI", 2)) * MI;
 8000c26:	2202      	movs	r2, #2
 8000c28:	493a      	ldr	r1, [pc, #232]	; (8000d14 <check_command+0x134>)
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f005 fe5d 	bl	80068ea <strncmp>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <check_command+0x5a>
 8000c36:	2203      	movs	r2, #3
 8000c38:	e000      	b.n	8000c3c <check_command+0x5c>
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4413      	add	r3, r2
 8000c40:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "MO", 2)) * MO;
 8000c42:	2202      	movs	r2, #2
 8000c44:	4934      	ldr	r1, [pc, #208]	; (8000d18 <check_command+0x138>)
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f005 fe4f 	bl	80068ea <strncmp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <check_command+0x76>
 8000c52:	2204      	movs	r2, #4
 8000c54:	e000      	b.n	8000c58 <check_command+0x78>
 8000c56:	2200      	movs	r2, #0
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RD", 2)) * RD;
 8000c5e:	2202      	movs	r2, #2
 8000c60:	492e      	ldr	r1, [pc, #184]	; (8000d1c <check_command+0x13c>)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f005 fe41 	bl	80068ea <strncmp>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <check_command+0x92>
 8000c6e:	2205      	movs	r2, #5
 8000c70:	e000      	b.n	8000c74 <check_command+0x94>
 8000c72:	2200      	movs	r2, #0
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4413      	add	r3, r2
 8000c78:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "WD", 2)) * WD;
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4928      	ldr	r1, [pc, #160]	; (8000d20 <check_command+0x140>)
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f005 fe33 	bl	80068ea <strncmp>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <check_command+0xae>
 8000c8a:	2206      	movs	r2, #6
 8000c8c:	e000      	b.n	8000c90 <check_command+0xb0>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	4413      	add	r3, r2
 8000c94:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "RA", 2)) * RA;
 8000c96:	2202      	movs	r2, #2
 8000c98:	4922      	ldr	r1, [pc, #136]	; (8000d24 <check_command+0x144>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f005 fe25 	bl	80068ea <strncmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <check_command+0xca>
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	e000      	b.n	8000cac <check_command+0xcc>
 8000caa:	2200      	movs	r2, #0
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	4413      	add	r3, r2
 8000cb0:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "$", 1)) * LAST;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <check_command+0x148>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <check_command+0xe4>
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	e000      	b.n	8000cc6 <check_command+0xe6>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	4413      	add	r3, r2
 8000cca:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "?", 1)) * HELP;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <check_command+0x14c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <check_command+0xfe>
 8000cda:	2209      	movs	r2, #9
 8000cdc:	e000      	b.n	8000ce0 <check_command+0x100>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	73fb      	strb	r3, [r7, #15]

	cmd += (!strncmp((char*) message, "VER", 3)) * VER;
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4911      	ldr	r1, [pc, #68]	; (8000d30 <check_command+0x150>)
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f005 fdfd 	bl	80068ea <strncmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <check_command+0x11a>
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	e000      	b.n	8000cfc <check_command+0x11c>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4413      	add	r3, r2
 8000d00:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0800aa90 	.word	0x0800aa90
 8000d10:	0800aa94 	.word	0x0800aa94
 8000d14:	0800aa98 	.word	0x0800aa98
 8000d18:	0800aa9c 	.word	0x0800aa9c
 8000d1c:	0800aaa0 	.word	0x0800aaa0
 8000d20:	0800aaa4 	.word	0x0800aaa4
 8000d24:	0800aaa8 	.word	0x0800aaa8
 8000d28:	0800aaac 	.word	0x0800aaac
 8000d2c:	0800aab0 	.word	0x0800aab0
 8000d30:	0800aab4 	.word	0x0800aab4

08000d34 <proc_inv_cmd>:

//------------------------------------------------------------------------------------------------------------------


void proc_inv_cmd(char* message)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <proc_inv_cmd+0x18>)
 8000d3e:	f001 f8b7 	bl	8001eb0 <send_UART>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800aab8 	.word	0x0800aab8

08000d50 <proc_mr_cmd>:


void proc_mr_cmd(char* message)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	unsigned int addr, length;

	if(sscanf((char*)message, "MR %x %x", &addr, &length) == 2)
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	f107 0210 	add.w	r2, r7, #16
 8000d60:	4932      	ldr	r1, [pc, #200]	; (8000e2c <proc_mr_cmd+0xdc>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f005 fd50 	bl	8006808 <siscanf>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d157      	bne.n	8000e1e <proc_mr_cmd+0xce>
	{
 8000d6e:	466b      	mov	r3, sp
 8000d70:	461d      	mov	r5, r3
		char data[length];
 8000d72:	68fc      	ldr	r4, [r7, #12]
 8000d74:	4623      	mov	r3, r4
 8000d76:	3b01      	subs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f04f 0100 	mov.w	r1, #0
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	00cb      	lsls	r3, r1, #3
 8000d8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d8e:	00c2      	lsls	r2, r0, #3
 8000d90:	4620      	mov	r0, r4
 8000d92:	f04f 0100 	mov.w	r1, #0
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	00cb      	lsls	r3, r1, #3
 8000da0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000da4:	00c2      	lsls	r2, r0, #3
 8000da6:	1de3      	adds	r3, r4, #7
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	ebad 0d03 	sub.w	sp, sp, r3
 8000db0:	466b      	mov	r3, sp
 8000db2:	3300      	adds	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]

		if(memory_read(addr, length, data))
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 faaf 	bl	8001320 <memory_read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d025      	beq.n	8000e14 <proc_mr_cmd+0xc4>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <proc_mr_cmd+0xe0>)
 8000dd0:	f005 fd9d 	bl	800690e <strncpy>

			sprintf((char*) message, "Memory read: ");
 8000dd4:	4917      	ldr	r1, [pc, #92]	; (8000e34 <proc_mr_cmd+0xe4>)
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f005 fcf6 	bl	80067c8 <siprintf>

			for(int i = 0; i < length; i++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	e010      	b.n	8000e04 <proc_mr_cmd+0xb4>
			{
				sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fa2c 	bl	8000240 <strlen>
 8000de8:	4602      	mov	r2, r0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	1898      	adds	r0, r3, r2
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	4413      	add	r3, r2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	490f      	ldr	r1, [pc, #60]	; (8000e38 <proc_mr_cmd+0xe8>)
 8000dfa:	f005 fce5 	bl	80067c8 <siprintf>
			for(int i = 0; i < length; i++)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3ea      	bcc.n	8000de2 <proc_mr_cmd+0x92>
			}
			send_UART((char*) message);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f001 f84f 	bl	8001eb0 <send_UART>
 8000e12:	e002      	b.n	8000e1a <proc_mr_cmd+0xca>
		}
		else
			send_UART("Invalid Memory Read instruction argument values.\r");
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <proc_mr_cmd+0xec>)
 8000e16:	f001 f84b 	bl	8001eb0 <send_UART>
 8000e1a:	46ad      	mov	sp, r5
	}
	else
		send_UART("Invalid Memory Read instruction syntax.");
}
 8000e1c:	e002      	b.n	8000e24 <proc_mr_cmd+0xd4>
		send_UART("Invalid Memory Read instruction syntax.");
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <proc_mr_cmd+0xf0>)
 8000e20:	f001 f846 	bl	8001eb0 <send_UART>
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2c:	0800aae0 	.word	0x0800aae0
 8000e30:	20010488 	.word	0x20010488
 8000e34:	0800aaec 	.word	0x0800aaec
 8000e38:	0800aafc 	.word	0x0800aafc
 8000e3c:	0800ab04 	.word	0x0800ab04
 8000e40:	0800ab38 	.word	0x0800ab38

08000e44 <proc_mw_cmd>:


void proc_mw_cmd(char* message)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
	unsigned int addr, length, data;

	if(sscanf((char*) message, "MW %x %x %x", &addr, &length, &data) == 3)
 8000e4c:	f107 0110 	add.w	r1, r7, #16
 8000e50:	f107 0214 	add.w	r2, r7, #20
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4912      	ldr	r1, [pc, #72]	; (8000ea8 <proc_mw_cmd+0x64>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f005 fcd2 	bl	8006808 <siscanf>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d116      	bne.n	8000e98 <proc_mw_cmd+0x54>
	{
		if(memory_write(addr, length, data))
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	6939      	ldr	r1, [r7, #16]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa89 	bl	8001388 <memory_write>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d009      	beq.n	8000e90 <proc_mw_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	480a      	ldr	r0, [pc, #40]	; (8000eac <proc_mw_cmd+0x68>)
 8000e84:	f005 fd43 	bl	800690e <strncpy>
			send_UART("Memory written with success.");
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <proc_mw_cmd+0x6c>)
 8000e8a:	f001 f811 	bl	8001eb0 <send_UART>
		else
			send_UART("Invalid Memory Write instruction argument values.");
	}
	else
		send_UART("Invalid Memory Write instruction syntax.");
}
 8000e8e:	e006      	b.n	8000e9e <proc_mw_cmd+0x5a>
			send_UART("Invalid Memory Write instruction argument values.");
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <proc_mw_cmd+0x70>)
 8000e92:	f001 f80d 	bl	8001eb0 <send_UART>
}
 8000e96:	e002      	b.n	8000e9e <proc_mw_cmd+0x5a>
		send_UART("Invalid Memory Write instruction syntax.");
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <proc_mw_cmd+0x74>)
 8000e9a:	f001 f809 	bl	8001eb0 <send_UART>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0800ab60 	.word	0x0800ab60
 8000eac:	20010488 	.word	0x20010488
 8000eb0:	0800ab6c 	.word	0x0800ab6c
 8000eb4:	0800ab8c 	.word	0x0800ab8c
 8000eb8:	0800abc0 	.word	0x0800abc0

08000ebc <proc_mi_cmd>:


void proc_mi_cmd(char* message)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MI %x %x", &port_addr, &pin_setting) == 2)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	f107 020c 	add.w	r2, r7, #12
 8000ecc:	4918      	ldr	r1, [pc, #96]	; (8000f30 <proc_mi_cmd+0x74>)
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f005 fc9a 	bl	8006808 <siscanf>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d123      	bne.n	8000f22 <proc_mi_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fcc9 	bl	8001878 <is_GPIO_pin_free>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d016      	beq.n	8000f1a <proc_mi_cmd+0x5e>
		{
			if(make_pin_input(port_addr, pin_setting))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fa80 	bl	80013f8 <make_pin_input>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d009      	beq.n	8000f12 <proc_mi_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <proc_mi_cmd+0x78>)
 8000f06:	f005 fd02 	bl	800690e <strncpy>
				send_UART("Pin(s) set as input with success.");
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <proc_mi_cmd+0x7c>)
 8000f0c:	f000 ffd0 	bl	8001eb0 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
	  send_UART("Invalid Make Pin Input instruction syntax.");
}
 8000f10:	e00a      	b.n	8000f28 <proc_mi_cmd+0x6c>
				send_UART("Invalid Make Pin Input instruction argument values.");
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <proc_mi_cmd+0x80>)
 8000f14:	f000 ffcc 	bl	8001eb0 <send_UART>
}
 8000f18:	e006      	b.n	8000f28 <proc_mi_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <proc_mi_cmd+0x84>)
 8000f1c:	f000 ffc8 	bl	8001eb0 <send_UART>
}
 8000f20:	e002      	b.n	8000f28 <proc_mi_cmd+0x6c>
	  send_UART("Invalid Make Pin Input instruction syntax.");
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <proc_mi_cmd+0x88>)
 8000f24:	f000 ffc4 	bl	8001eb0 <send_UART>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800abec 	.word	0x0800abec
 8000f34:	20010488 	.word	0x20010488
 8000f38:	0800abf8 	.word	0x0800abf8
 8000f3c:	0800ac1c 	.word	0x0800ac1c
 8000f40:	0800ac50 	.word	0x0800ac50
 8000f44:	0800ac88 	.word	0x0800ac88

08000f48 <proc_mo_cmd>:


void proc_mo_cmd(char* message)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "MO %x %x", &port_addr, &pin_setting) == 2)
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	f107 020c 	add.w	r2, r7, #12
 8000f58:	4918      	ldr	r1, [pc, #96]	; (8000fbc <proc_mo_cmd+0x74>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f005 fc54 	bl	8006808 <siscanf>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <proc_mo_cmd+0x66>
	{
		if(is_GPIO_pin_free(port_addr, pin_setting))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fc83 	bl	8001878 <is_GPIO_pin_free>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d016      	beq.n	8000fa6 <proc_mo_cmd+0x5e>
		{
			if(make_pin_output(port_addr, pin_setting))
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fad6 	bl	8001530 <make_pin_output>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <proc_mo_cmd+0x56>
			{
				strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <proc_mo_cmd+0x78>)
 8000f92:	f005 fcbc 	bl	800690e <strncpy>
				send_UART("Pin(s) set as output with success.");
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <proc_mo_cmd+0x7c>)
 8000f98:	f000 ff8a 	bl	8001eb0 <send_UART>
		else
			send_UART("At least one inputted pin is reserved to peripherals.");
	}
	else
		send_UART("Invalid Make Pin Output instruction syntax.");
}
 8000f9c:	e00a      	b.n	8000fb4 <proc_mo_cmd+0x6c>
				send_UART("Invalid Make Pin Output instruction argument values.");
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <proc_mo_cmd+0x80>)
 8000fa0:	f000 ff86 	bl	8001eb0 <send_UART>
}
 8000fa4:	e006      	b.n	8000fb4 <proc_mo_cmd+0x6c>
			send_UART("At least one inputted pin is reserved to peripherals.");
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <proc_mo_cmd+0x84>)
 8000fa8:	f000 ff82 	bl	8001eb0 <send_UART>
}
 8000fac:	e002      	b.n	8000fb4 <proc_mo_cmd+0x6c>
		send_UART("Invalid Make Pin Output instruction syntax.");
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <proc_mo_cmd+0x88>)
 8000fb0:	f000 ff7e 	bl	8001eb0 <send_UART>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800acb4 	.word	0x0800acb4
 8000fc0:	20010488 	.word	0x20010488
 8000fc4:	0800acc0 	.word	0x0800acc0
 8000fc8:	0800ace4 	.word	0x0800ace4
 8000fcc:	0800ac50 	.word	0x0800ac50
 8000fd0:	0800ad1c 	.word	0x0800ad1c

08000fd4 <proc_rd_cmd>:


void proc_rd_cmd(char* message)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting;

	if(sscanf((char*) message, "RD %x %x", &port_addr, &pin_setting) == 2)
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	f107 0220 	add.w	r2, r7, #32
 8000fe4:	492a      	ldr	r1, [pc, #168]	; (8001090 <proc_rd_cmd+0xbc>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f005 fc0e 	bl	8006808 <siscanf>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d147      	bne.n	8001082 <proc_rd_cmd+0xae>
	{
		GPIO_PinState pin_values[16];

		if(read_dig_input(port_addr, pin_setting, pin_values))
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	69f9      	ldr	r1, [r7, #28]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fb36 	bl	800166c <read_dig_input>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d039      	beq.n	800107a <proc_rd_cmd+0xa6>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <proc_rd_cmd+0xc0>)
 800100e:	f005 fc7e 	bl	800690e <strncpy>

			sprintf((char*) message, "Digital input read: ");
 8001012:	4921      	ldr	r1, [pc, #132]	; (8001098 <proc_rd_cmd+0xc4>)
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f005 fbd7 	bl	80067c8 <siprintf>

			for(int i = 15; i >= 0; i--)
 800101a:	230f      	movs	r3, #15
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	e025      	b.n	800106c <proc_rd_cmd+0x98>
			{
				sprintf((char*) message + strlen((char*) message), "%d", pin_values[i]);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f90d 	bl	8000240 <strlen>
 8001026:	4602      	mov	r2, r0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1898      	adds	r0, r3, r2
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4918      	ldr	r1, [pc, #96]	; (800109c <proc_rd_cmd+0xc8>)
 800103a:	f005 fbc5 	bl	80067c8 <siprintf>

				if(!(i % 4) && i)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10e      	bne.n	8001066 <proc_rd_cmd+0x92>
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <proc_rd_cmd+0x92>
					strcat((char*) message, " ");
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f8f6 	bl	8000240 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	4910      	ldr	r1, [pc, #64]	; (80010a0 <proc_rd_cmd+0xcc>)
 800105e:	461a      	mov	r2, r3
 8001060:	460b      	mov	r3, r1
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	8013      	strh	r3, [r2, #0]
			for(int i = 15; i >= 0; i--)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	3b01      	subs	r3, #1
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	2b00      	cmp	r3, #0
 8001070:	dad6      	bge.n	8001020 <proc_rd_cmd+0x4c>
			}
			send_UART((char*) message);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 ff1c 	bl	8001eb0 <send_UART>
		else
			send_UART("Invalid Read Digital Input instruction argument values.");
	}
	else
		send_UART("Invalid Read Digital Input instruction syntax.");
}
 8001078:	e006      	b.n	8001088 <proc_rd_cmd+0xb4>
			send_UART("Invalid Read Digital Input instruction argument values.");
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <proc_rd_cmd+0xd0>)
 800107c:	f000 ff18 	bl	8001eb0 <send_UART>
}
 8001080:	e002      	b.n	8001088 <proc_rd_cmd+0xb4>
		send_UART("Invalid Read Digital Input instruction syntax.");
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <proc_rd_cmd+0xd4>)
 8001084:	f000 ff14 	bl	8001eb0 <send_UART>
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0800ad48 	.word	0x0800ad48
 8001094:	20010488 	.word	0x20010488
 8001098:	0800ad54 	.word	0x0800ad54
 800109c:	0800ad6c 	.word	0x0800ad6c
 80010a0:	0800ad70 	.word	0x0800ad70
 80010a4:	0800ad74 	.word	0x0800ad74
 80010a8:	0800adac 	.word	0x0800adac

080010ac <proc_wd_cmd>:


void proc_wd_cmd(char* message)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
	unsigned int port_addr, pin_setting, pin_values;

	if(sscanf((char*) message, "WD %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 80010b4:	f107 0110 	add.w	r1, r7, #16
 80010b8:	f107 0214 	add.w	r2, r7, #20
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	4912      	ldr	r1, [pc, #72]	; (8001110 <proc_wd_cmd+0x64>)
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f005 fb9e 	bl	8006808 <siscanf>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d116      	bne.n	8001100 <proc_wd_cmd+0x54>
	{
		if(write_dig_output(port_addr, pin_setting, pin_values))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fb0b 	bl	80016f4 <write_dig_output>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d009      	beq.n	80010f8 <proc_wd_cmd+0x4c>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <proc_wd_cmd+0x68>)
 80010ec:	f005 fc0f 	bl	800690e <strncpy>
			send_UART("Digital output value wrote with success.");
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <proc_wd_cmd+0x6c>)
 80010f2:	f000 fedd 	bl	8001eb0 <send_UART>
		else
			send_UART("Invalid Write Digital Output instruction argument values.");
	}
	else
		send_UART("Invalid Write Digital Output instruction syntax.");
}
 80010f6:	e006      	b.n	8001106 <proc_wd_cmd+0x5a>
			send_UART("Invalid Write Digital Output instruction argument values.");
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <proc_wd_cmd+0x70>)
 80010fa:	f000 fed9 	bl	8001eb0 <send_UART>
}
 80010fe:	e002      	b.n	8001106 <proc_wd_cmd+0x5a>
		send_UART("Invalid Write Digital Output instruction syntax.");
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <proc_wd_cmd+0x74>)
 8001102:	f000 fed5 	bl	8001eb0 <send_UART>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	0800addc 	.word	0x0800addc
 8001114:	20010488 	.word	0x20010488
 8001118:	0800ade8 	.word	0x0800ade8
 800111c:	0800ae14 	.word	0x0800ae14
 8001120:	0800ae50 	.word	0x0800ae50
 8001124:	00000000 	.word	0x00000000

08001128 <proc_ra_cmd>:


void proc_ra_cmd(char* message)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
	unsigned int addr3, value;

	if(sscanf((char*) message, "RA %x", &addr3) == 1)
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	461a      	mov	r2, r3
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <proc_ra_cmd+0xc0>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 fb65 	bl	8006808 <siscanf>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d13f      	bne.n	80011c4 <proc_ra_cmd+0x9c>
	{
		if(analog_read(addr3, &value))
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fb19 	bl	8001784 <analog_read>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d031      	beq.n	80011bc <proc_ra_cmd+0x94>
		{
			strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <proc_ra_cmd+0xc4>)
 8001160:	f005 fbd5 	bl	800690e <strncpy>

			float volts = (float) value * 3.3 / 4095;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001172:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80011d8 <proc_ra_cmd+0xb0>
 8001176:	ee27 6b06 	vmul.f64	d6, d7, d6
 800117a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80011e0 <proc_ra_cmd+0xb8>
 800117e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001182:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001186:	edc7 7a05 	vstr	s15, [r7, #20]

			sprintf((char*) message, "Analog read digital value: ");
 800118a:	4919      	ldr	r1, [pc, #100]	; (80011f0 <proc_ra_cmd+0xc8>)
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 fb1b 	bl	80067c8 <siprintf>
			sprintf((char*) message + strlen((char*) message), "%d // %.2fV", value, volts);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff f854 	bl	8000240 <strlen>
 8001198:	4602      	mov	r2, r0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a8:	ed8d 7b00 	vstr	d7, [sp]
 80011ac:	4911      	ldr	r1, [pc, #68]	; (80011f4 <proc_ra_cmd+0xcc>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 fb0a 	bl	80067c8 <siprintf>

			send_UART((char*) message);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fe7b 	bl	8001eb0 <send_UART>
		else
			send_UART("Invalid Analog Read instruction argument values.");
	}
	else
		send_UART("Invalid Analog Read instruction syntax.");
}
 80011ba:	e006      	b.n	80011ca <proc_ra_cmd+0xa2>
			send_UART("Invalid Analog Read instruction argument values.");
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <proc_ra_cmd+0xd0>)
 80011be:	f000 fe77 	bl	8001eb0 <send_UART>
}
 80011c2:	e002      	b.n	80011ca <proc_ra_cmd+0xa2>
		send_UART("Invalid Analog Read instruction syntax.");
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <proc_ra_cmd+0xd4>)
 80011c6:	f000 fe73 	bl	8001eb0 <send_UART>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	66666666 	.word	0x66666666
 80011dc:	400a6666 	.word	0x400a6666
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40affe00 	.word	0x40affe00
 80011e8:	0800ae84 	.word	0x0800ae84
 80011ec:	20010488 	.word	0x20010488
 80011f0:	0800ae8c 	.word	0x0800ae8c
 80011f4:	0800aea8 	.word	0x0800aea8
 80011f8:	0800aeb4 	.word	0x0800aeb4
 80011fc:	0800aee8 	.word	0x0800aee8

08001200 <proc_last_cmd>:


void proc_last_cmd(char* message)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0c4      	sub	sp, #272	; 0x110
 8001204:	af00      	add	r7, sp, #0
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	6018      	str	r0, [r3, #0]
	if(message[1] == '\r')
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d12a      	bne.n	800126c <proc_last_cmd+0x6c>
	{
		char temp[BUFFER_SIZE];

		for(int i = 0; i < BUFFER_SIZE; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800121c:	e010      	b.n	8001240 <proc_last_cmd+0x40>
			temp[i] = last_message[i];
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <proc_last_cmd+0x7c>)
 8001220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < BUFFER_SIZE; i++)
 8001236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001244:	2bff      	cmp	r3, #255	; 0xff
 8001246:	ddea      	ble.n	800121e <proc_last_cmd+0x1e>

		unsigned char cmd = check_command((char*) temp);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fcc7 	bl	8000be0 <check_command>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		exec_command[cmd]((char*) temp);
 8001258:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <proc_last_cmd+0x80>)
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	f107 0208 	add.w	r2, r7, #8
 8001266:	4610      	mov	r0, r2
 8001268:	4798      	blx	r3
	}
	else
		send_UART("Invalid $ instruction syntax.");
}
 800126a:	e002      	b.n	8001272 <proc_last_cmd+0x72>
		send_UART("Invalid $ instruction syntax.");
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <proc_last_cmd+0x84>)
 800126e:	f000 fe1f 	bl	8001eb0 <send_UART>
}
 8001272:	bf00      	nop
 8001274:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20010488 	.word	0x20010488
 8001280:	20000000 	.word	0x20000000
 8001284:	0800af10 	.word	0x0800af10

08001288 <proc_help_cmd>:


void proc_help_cmd(char* message)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if(message[1] == '\r')
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b0d      	cmp	r3, #13
 8001298:	d109      	bne.n	80012ae <proc_help_cmd+0x26>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 800129a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <proc_help_cmd+0x34>)
 80012a2:	f005 fb34 	bl	800690e <strncpy>

		send_UART("MR <addr> <length>\n\r"
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <proc_help_cmd+0x38>)
 80012a8:	f000 fe02 	bl	8001eb0 <send_UART>
					"$\n\r"
					"VER");
	}
	else
		send_UART("Invalid ? instruction syntax.");
}
 80012ac:	e002      	b.n	80012b4 <proc_help_cmd+0x2c>
		send_UART("Invalid ? instruction syntax.");
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <proc_help_cmd+0x3c>)
 80012b0:	f000 fdfe 	bl	8001eb0 <send_UART>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20010488 	.word	0x20010488
 80012c0:	0800af30 	.word	0x0800af30
 80012c4:	0800afec 	.word	0x0800afec

080012c8 <proc_ver_cmd>:


void proc_ver_cmd(char* message)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	static int procs = 0;	// EASTER EGG

	if(message[3] == '\r')
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0d      	cmp	r3, #13
 80012d8:	d113      	bne.n	8001302 <proc_ver_cmd+0x3a>
	{
		strncpy((char*) last_message, (char*) message, BUFFER_SIZE);
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <proc_ver_cmd+0x48>)
 80012e2:	f005 fb14 	bl	800690e <strncpy>
		sprintf((char*) message, "v1.%d - BOCKS & PRIEST - G5 PIEEIC2 EEIC UM - 2022", procs++);
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <proc_ver_cmd+0x4c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <proc_ver_cmd+0x4c>)
 80012ee:	600a      	str	r2, [r1, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4909      	ldr	r1, [pc, #36]	; (8001318 <proc_ver_cmd+0x50>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f005 fa67 	bl	80067c8 <siprintf>
		send_UART((char*) message);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fdd8 	bl	8001eb0 <send_UART>
	}
	else
		send_UART("Invalid VER instruction syntax.");
}
 8001300:	e002      	b.n	8001308 <proc_ver_cmd+0x40>
		send_UART("Invalid VER instruction syntax.");
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <proc_ver_cmd+0x54>)
 8001304:	f000 fdd4 	bl	8001eb0 <send_UART>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20010488 	.word	0x20010488
 8001314:	20000228 	.word	0x20000228
 8001318:	0800b00c 	.word	0x0800b00c
 800131c:	0800b040 	.word	0x0800b040

08001320 <memory_read>:

//------------------------------------------------------------------------------------------------------------------


bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 || addr_r > 0xFFFF || length < 0 || length > 0xFF)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001332:	d202      	bcs.n	800133a <memory_read+0x1a>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2bff      	cmp	r3, #255	; 0xff
 8001338:	d901      	bls.n	800133e <memory_read+0x1e>
		return false;
 800133a:	2300      	movs	r3, #0
 800133c:	e01b      	b.n	8001376 <memory_read+0x56>

	if((0x10000 - addr_r) < length)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d901      	bls.n	800134e <memory_read+0x2e>
		return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e013      	b.n	8001376 <memory_read+0x56>

	for(int i = 0; i < length; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00b      	b.n	800136c <memory_read+0x4c>
	{
		data[i] = memory[addr_r++];
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60fa      	str	r2, [r7, #12]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	440a      	add	r2, r1
 8001360:	4908      	ldr	r1, [pc, #32]	; (8001384 <memory_read+0x64>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8ef      	bhi.n	8001354 <memory_read+0x34>
	}

	return true;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000380 	.word	0x20000380

08001388 <memory_write>:


bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	if(addr < 0 || addr > 0xFFFF || length < 0 || length > 0xFF || data < 0 || data > 0xFF)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d208      	bcs.n	80013ae <memory_write+0x26>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d805      	bhi.n	80013ae <memory_write+0x26>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db02      	blt.n	80013ae <memory_write+0x26>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	dd01      	ble.n	80013b2 <memory_write+0x2a>
		return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e019      	b.n	80013e6 <memory_write+0x5e>

	if((0x10000 - addr) < length)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d901      	bls.n	80013c2 <memory_write+0x3a>
		return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e011      	b.n	80013e6 <memory_write+0x5e>

	for(int i = 0; i < length; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e009      	b.n	80013dc <memory_write+0x54>
	{
		memory[addr++] = data;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60fa      	str	r2, [r7, #12]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	b2d1      	uxtb	r1, r2
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <memory_write+0x6c>)
 80013d4:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f1      	bhi.n	80013c8 <memory_write+0x40>
	}

	return true;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000380 	.word	0x20000380

080013f8 <make_pin_input>:


bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x0B || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <make_pin_input+0x24>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b0b      	cmp	r3, #11
 800140c:	d806      	bhi.n	800141c <make_pin_input+0x24>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <make_pin_input+0x24>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d301      	bcc.n	8001420 <make_pin_input+0x28>
		return false;
 800141c:	2300      	movs	r3, #0
 800141e:	e07f      	b.n	8001520 <make_pin_input+0x128>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b05      	subs	r3, #5
 8001424:	2b06      	cmp	r3, #6
 8001426:	d85f      	bhi.n	80014e8 <make_pin_input+0xf0>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <make_pin_input+0x38>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	0800144d 	.word	0x0800144d
 8001434:	080014e9 	.word	0x080014e9
 8001438:	08001467 	.word	0x08001467
 800143c:	08001481 	.word	0x08001481
 8001440:	0800149b 	.word	0x0800149b
 8001444:	080014b5 	.word	0x080014b5
 8001448:	080014cf 	.word	0x080014cf

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <make_pin_input+0x130>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a35      	ldr	r2, [pc, #212]	; (8001528 <make_pin_input+0x130>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <make_pin_input+0x130>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	e040      	b.n	80014e8 <make_pin_input+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <make_pin_input+0x130>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <make_pin_input+0x130>)
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <make_pin_input+0x130>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	e033      	b.n	80014e8 <make_pin_input+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <make_pin_input+0x130>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <make_pin_input+0x130>)
 8001486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <make_pin_input+0x130>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	e026      	b.n	80014e8 <make_pin_input+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <make_pin_input+0x130>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <make_pin_input+0x130>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <make_pin_input+0x130>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	e019      	b.n	80014e8 <make_pin_input+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <make_pin_input+0x130>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <make_pin_input+0x130>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <make_pin_input+0x130>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	e00c      	b.n	80014e8 <make_pin_input+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <make_pin_input+0x130>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <make_pin_input+0x130>)
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <make_pin_input+0x130>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <make_pin_input+0x134>)
 800150c:	4413      	add	r3, r2
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	461a      	mov	r2, r3
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f001 fc15 	bl	8002d48 <HAL_GPIO_Init>

	return true;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	0010007f 	.word	0x0010007f

08001530 <make_pin_output>:


bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 || port_addr > 0x0B || pin_setting < 0x01 || pin_setting > 0xFFFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <make_pin_output+0x24>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b0b      	cmp	r3, #11
 8001544:	d806      	bhi.n	8001554 <make_pin_output+0x24>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <make_pin_output+0x24>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d301      	bcc.n	8001558 <make_pin_output+0x28>
		return false;
 8001554:	2300      	movs	r3, #0
 8001556:	e081      	b.n	800165c <make_pin_output+0x12c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b05      	subs	r3, #5
 800155c:	2b06      	cmp	r3, #6
 800155e:	d85f      	bhi.n	8001620 <make_pin_output+0xf0>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <make_pin_output+0x38>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001585 	.word	0x08001585
 800156c:	08001621 	.word	0x08001621
 8001570:	0800159f 	.word	0x0800159f
 8001574:	080015b9 	.word	0x080015b9
 8001578:	080015d3 	.word	0x080015d3
 800157c:	080015ed 	.word	0x080015ed
 8001580:	08001607 	.word	0x08001607

	switch(port_addr)
	{
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <make_pin_output+0x134>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a36      	ldr	r2, [pc, #216]	; (8001664 <make_pin_output+0x134>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <make_pin_output+0x134>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	e040      	b.n	8001620 <make_pin_output+0xf0>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <make_pin_output+0x134>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a30      	ldr	r2, [pc, #192]	; (8001664 <make_pin_output+0x134>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <make_pin_output+0x134>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	e033      	b.n	8001620 <make_pin_output+0xf0>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <make_pin_output+0x134>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4a29      	ldr	r2, [pc, #164]	; (8001664 <make_pin_output+0x134>)
 80015be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <make_pin_output+0x134>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	e026      	b.n	8001620 <make_pin_output+0xf0>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <make_pin_output+0x134>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <make_pin_output+0x134>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <make_pin_output+0x134>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	e019      	b.n	8001620 <make_pin_output+0xf0>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <make_pin_output+0x134>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <make_pin_output+0x134>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <make_pin_output+0x134>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	e00c      	b.n	8001620 <make_pin_output+0xf0>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <make_pin_output+0x134>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <make_pin_output+0x134>)
 800160c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <make_pin_output+0x134>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	4313      	orrs	r3, r2
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30


	// HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <make_pin_output+0x138>)
 8001648:	4413      	add	r3, r2
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	461a      	mov	r2, r3
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f001 fb77 	bl	8002d48 <HAL_GPIO_Init>

	return true;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	0010007f 	.word	0x0010007f

0800166c <read_dig_input>:

bool read_dig_input(unsigned int port_addr, unsigned int pin_setting, GPIO_PinState* pin_values)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x0B || pin_setting < 0x01 || pin_setting > 0xFFFF)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <read_dig_input+0x26>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b0b      	cmp	r3, #11
 8001682:	d806      	bhi.n	8001692 <read_dig_input+0x26>
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <read_dig_input+0x26>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d301      	bcc.n	8001696 <read_dig_input+0x2a>
		return false;
 8001692:	2300      	movs	r3, #0
 8001694:	e028      	b.n	80016e8 <read_dig_input+0x7c>

	int mask = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]

	for(int pin = 0; pin < 16; pin++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e01f      	b.n	80016e0 <read_dig_input+0x74>
	{
		if(pin_setting & mask)
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00f      	beq.n	80016ca <read_dig_input+0x5e>
			pin_values[pin] = HAL_GPIO_ReadPin((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), (uint16_t) (0x0001U * (pin + 1)));
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <read_dig_input+0x84>)
 80016ae:	4413      	add	r3, r2
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4618      	mov	r0, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3301      	adds	r3, #1
 80016b8:	b299      	uxth	r1, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	18d4      	adds	r4, r2, r3
 80016c0:	f001 fcee 	bl	80030a0 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	7023      	strb	r3, [r4, #0]
 80016c8:	e004      	b.n	80016d4 <read_dig_input+0x68>
		else
			pin_values[pin] = (GPIO_PinState) 0;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]

		mask <<= 1;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
	for(int pin = 0; pin < 16; pin++)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	dddc      	ble.n	80016a0 <read_dig_input+0x34>
	}

	return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	0010007f 	.word	0x0010007f

080016f4 <write_dig_output>:

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 || port_addr > 0x0B || pin_setting < 0x01 || pin_setting > 0xFFFF || pin_values < 0 || pin_values > 0xFFFF)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <write_dig_output+0x2e>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b0b      	cmp	r3, #11
 800170a:	d80a      	bhi.n	8001722 <write_dig_output+0x2e>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <write_dig_output+0x2e>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d203      	bcs.n	8001722 <write_dig_output+0x2e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d301      	bcc.n	8001726 <write_dig_output+0x32>
		return false;
 8001722:	2300      	movs	r3, #0
 8001724:	e028      	b.n	8001778 <write_dig_output+0x84>

	int mask = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]

	for(int pin = 0; pin < 16; pin++)
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	e01f      	b.n	8001770 <write_dig_output+0x7c>
	{
		if(pin_setting & mask)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d014      	beq.n	8001764 <write_dig_output+0x70>
			HAL_GPIO_WritePin((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), (uint16_t) (1 << pin), (pin_values & mask) ? 1 : 0);
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <write_dig_output+0x8c>)
 800173e:	4413      	add	r3, r2
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4618      	mov	r0, r3
 8001744:	2201      	movs	r2, #1
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	b299      	uxth	r1, r3
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	f001 fcb6 	bl	80030d0 <HAL_GPIO_WritePin>

		mask <<= 1;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	617b      	str	r3, [r7, #20]
	for(int pin = 0; pin < 16; pin++)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3301      	adds	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	dddc      	ble.n	8001730 <write_dig_output+0x3c>
	}

	return true;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0010007f 	.word	0x0010007f

08001784 <analog_read>:

bool analog_read(unsigned int addr3, unsigned int* value)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	if(addr3 < 0 || addr3 > 0x0F)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d901      	bls.n	8001798 <analog_read+0x14>
		return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e008      	b.n	80017aa <analog_read+0x26>

	config_ADC(addr3);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff f9df 	bl	8000b5c <config_ADC>
	*value = read_ADC();
 800179e:	f7ff f9ff 	bl	8000ba0 <read_ADC>
 80017a2:	4602      	mov	r2, r0
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	601a      	str	r2, [r3, #0]

	return true;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a28      	ldr	r2, [pc, #160]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_GPIO_Init+0xbc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_GPIO_Init+0xbc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_GPIO_Init+0xbc>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <MX_GPIO_Init+0xc0>)
 8001848:	f001 fc42 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184c:	2301      	movs	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_GPIO_Init+0xc0>)
 8001864:	f001 fa70 	bl	8002d48 <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020400 	.word	0x40020400

08001878 <is_GPIO_pin_free>:

/* USER CODE BEGIN 2 */

bool is_GPIO_pin_free(unsigned int port_addr, unsigned int pin_setting)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	//	ADC3

	if(port_addr == 1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <is_GPIO_pin_free+0x20>
		if(pin_setting & 0x600F)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	f246 030f 	movw	r3, #24591	; 0x600f
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <is_GPIO_pin_free+0x20>
			return false;
 8001894:	2300      	movs	r3, #0
 8001896:	e028      	b.n	80018ea <is_GPIO_pin_free+0x72>

	if(port_addr == 3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d106      	bne.n	80018ac <is_GPIO_pin_free+0x34>
		if(pin_setting & 0x000F)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <is_GPIO_pin_free+0x34>
			return false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e01e      	b.n	80018ea <is_GPIO_pin_free+0x72>

	if(port_addr == 6)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d106      	bne.n	80018c0 <is_GPIO_pin_free+0x48>
		if(pin_setting & 0x03FC)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <is_GPIO_pin_free+0x48>
			return false;
 80018bc:	2300      	movs	r3, #0
 80018be:	e014      	b.n	80018ea <is_GPIO_pin_free+0x72>

	//	USART3

	if(port_addr == 4)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d106      	bne.n	80018d4 <is_GPIO_pin_free+0x5c>
		if(pin_setting & 0x0180)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <is_GPIO_pin_free+0x5c>
			return false;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e00a      	b.n	80018ea <is_GPIO_pin_free+0x72>

	//	LED1

	if(port_addr == 2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d106      	bne.n	80018e8 <is_GPIO_pin_free+0x70>
		if(pin_setting & 0x0001)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <is_GPIO_pin_free+0x70>
			return false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <is_GPIO_pin_free+0x72>

	return true;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <blink_LED>:

void blink_LED()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80018fc:	2101      	movs	r1, #1
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <blink_LED+0x20>)
 8001900:	f001 fbff 	bl	8003102 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001904:	20c8      	movs	r0, #200	; 0xc8
 8001906:	f000 fc29 	bl	800215c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800190a:	2101      	movs	r1, #1
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <blink_LED+0x20>)
 800190e:	f001 fbf8 	bl	8003102 <HAL_GPIO_TogglePin>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020400 	.word	0x40020400

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0c2      	sub	sp, #264	; 0x108
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001922:	f000 fbbe 	bl	80020a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001926:	f000 f83d 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192a:	f7ff ff43 	bl	80017b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800192e:	f000 f9df 	bl	8001cf0 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001932:	f7ff f84d 	bl	80009d0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <main+0x78>)
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <main+0x7c>)
 800193c:	f002 fde0 	bl	8004500 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001940:	4816      	ldr	r0, [pc, #88]	; (800199c <main+0x80>)
 8001942:	f000 fab5 	bl	8001eb0 <send_UART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 8001946:	f000 fa83 	bl	8001e50 <has_message_from_UART>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0fa      	beq.n	8001946 <main+0x2a>
	  {
		  blink_LED();
 8001950:	f7ff ffd2 	bl	80018f8 <blink_LED>

		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fad4 	bl	8001f04 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f93e 	bl	8000be0 <check_command>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 800196a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <main+0x84>)
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	1d3a      	adds	r2, r7, #4
 8001976:	4610      	mov	r0, r2
 8001978:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 800197a:	bf00      	nop
 800197c:	f000 fa74 	bl	8001e68 <is_transmitting_to_UART>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1fa      	bne.n	800197c <main+0x60>

		  reset_UART();
 8001986:	f000 fa7b 	bl	8001e80 <reset_UART>
		  send_UART(PROMPT);
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <main+0x80>)
 800198c:	f000 fa90 	bl	8001eb0 <send_UART>
	  if(has_message_from_UART())
 8001990:	e7d9      	b.n	8001946 <main+0x2a>
 8001992:	bf00      	nop
 8001994:	20000280 	.word	0x20000280
 8001998:	20010590 	.word	0x20010590
 800199c:	0800b060 	.word	0x0800b060
 80019a0:	20000000 	.word	0x20000000

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b094      	sub	sp, #80	; 0x50
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	2234      	movs	r2, #52	; 0x34
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f8b2 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <SystemClock_Config+0xd8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <SystemClock_Config+0xd8>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <SystemClock_Config+0xd8>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <SystemClock_Config+0xdc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e8:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <SystemClock_Config+0xdc>)
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <SystemClock_Config+0xdc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a10:	2308      	movs	r3, #8
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a14:	2360      	movs	r3, #96	; 0x60
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fbd5 	bl	80031d8 <HAL_RCC_OscConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a34:	f000 f826 	bl	8001a84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a38:	f001 fb7e 	bl	8003138 <HAL_PWREx_EnableOverDrive>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a42:	f000 f81f 	bl	8001a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a46:	230f      	movs	r3, #15
 8001a48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	2103      	movs	r1, #3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fe66 	bl	8003734 <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001a6e:	f000 f809 	bl	8001a84 <Error_Handler>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3750      	adds	r7, #80	; 0x50
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 fafa 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <USART3_IRQHandler+0x10>)
 8001b32:	f002 fd33 	bl	800459c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20010590 	.word	0x20010590

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b5a:	f003 ffb5 	bl	8005ac8 <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
	return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b82:	e7fe      	b.n	8001b82 <_exit+0x12>

08001b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b96:	f3af 8000 	nop.w
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
	}

return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf1      	blt.n	8001bd0 <_write+0x12>
	}
	return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_isatty>:

int _isatty(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	return 1;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f003 ff1a 	bl	8005ac8 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20080000 	.word	0x20080000
 8001cc0:	00000400 	.word	0x00000400
 8001cc4:	2000022c 	.word	0x2000022c
 8001cc8:	20010628 	.word	0x20010628

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <SystemInit+0x20>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <SystemInit+0x20>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_USART3_UART_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <MX_USART3_UART_Init+0x78>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_USART3_UART_Init+0x7c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_USART3_UART_Init+0x80>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_USART3_UART_Init+0x84>)
 8001d0e:	220d      	movs	r2, #13
 8001d10:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <MX_USART3_UART_Init+0x8c>)
 8001d16:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d1a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d34:	220c      	movs	r2, #12
 8001d36:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <MX_USART3_UART_Init+0x88>)
 8001d52:	f002 fb19 	bl	8004388 <HAL_UART_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8001d5c:	f7ff fe92 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20010384 	.word	0x20010384
 8001d68:	20010588 	.word	0x20010588
 8001d6c:	20010380 	.word	0x20010380
 8001d70:	2001058c 	.word	0x2001058c
 8001d74:	20010388 	.word	0x20010388
 8001d78:	20010590 	.word	0x20010590
 8001d7c:	40004800 	.word	0x40004800

08001d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0ae      	sub	sp, #184	; 0xb8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2290      	movs	r2, #144	; 0x90
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 febb 	bl	8005b1c <memset>
  if(uartHandle->Instance==USART3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_UART_MspInit+0xc4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d144      	bne.n	8001e3a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 feba 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dca:	f7ff fe5b 	bl	8001a84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_UART_MspInit+0xc8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4809      	ldr	r0, [pc, #36]	; (8001e4c <HAL_UART_MspInit+0xcc>)
 8001e26:	f000 ff8f 	bl	8002d48 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2027      	movs	r0, #39	; 0x27
 8001e30:	f000 fec1 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e34:	2027      	movs	r0, #39	; 0x27
 8001e36:	f000 feda 	bl	8002bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	37b8      	adds	r7, #184	; 0xb8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40004800 	.word	0x40004800
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	return flagCPP;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <has_message_from_UART+0x14>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20010384 	.word	0x20010384

08001e68 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	return flagCPE;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <is_transmitting_to_UART+0x14>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20010588 	.word	0x20010588

08001e80 <reset_UART>:

void reset_UART()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8001e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <reset_UART+0x24>)
 8001e8c:	f003 fe46 	bl	8005b1c <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001e90:	2201      	movs	r2, #1
 8001e92:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <reset_UART+0x24>)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <reset_UART+0x28>)
 8001e96:	f002 fb33 	bl	8004500 <HAL_UART_Receive_IT>
	flagCPP = false;
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <reset_UART+0x2c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000280 	.word	0x20000280
 8001ea8:	20010590 	.word	0x20010590
 8001eac:	20010384 	.word	0x20010384

08001eb0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8001eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <send_UART+0x44>)
 8001ec0:	f004 fd25 	bl	800690e <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <send_UART+0x44>)
 8001ec6:	f7fe f9bb 	bl	8000240 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <send_UART+0x44>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <send_UART+0x48>)
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <send_UART+0x4c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <send_UART+0x44>)
 8001ee6:	4806      	ldr	r0, [pc, #24]	; (8001f00 <send_UART+0x50>)
 8001ee8:	f002 fa9c 	bl	8004424 <HAL_UART_Transmit_IT>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20010388 	.word	0x20010388
 8001ef8:	0800b064 	.word	0x0800b064
 8001efc:	20010588 	.word	0x20010588
 8001f00:	20010590 	.word	0x20010590

08001f04 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8001f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <read_UART+0x1c>)
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f004 fcfb 	bl	800690e <strncpy>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000280 	.word	0x20000280

08001f24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_UART_RxCpltCallback+0xa8>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d146      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x9e>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r') //		CARRIAGE RETURN
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	2b0d      	cmp	r3, #13
 8001f3e:	d106      	bne.n	8001f4e <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_UART_RxCpltCallback+0xa8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e03a      	b.n	8001fc4 <HAL_UART_RxCpltCallback+0xa0>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d10e      	bne.n	8001f78 <HAL_UART_RxCpltCallback+0x54>
		{
			if(UART_RX_index == 0)
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x4a>
				UART_RX_index--;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e004      	b.n	8001f78 <HAL_UART_RxCpltCallback+0x54>
			else
				UART_RX_index -= 2;
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3b02      	subs	r3, #2
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f76:	6013      	str	r3, [r2, #0]
		}

		if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	2b1b      	cmp	r3, #27
 8001f82:	d103      	bne.n	8001f8c <HAL_UART_RxCpltCallback+0x68>
			UART_RX_index = -1;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f86:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8a:	601a      	str	r2, [r3, #0]

		if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	2b24      	cmp	r3, #36	; 0x24
 8001f96:	d105      	bne.n	8001fa4 <HAL_UART_RxCpltCallback+0x80>
		{
			UART_RX_index = 0;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001fa0:	2224      	movs	r2, #36	; 0x24
 8001fa2:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_UART_RxCpltCallback+0xac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <HAL_UART_RxCpltCallback+0xb4>)
 8001fbc:	f002 faa0 	bl	8004500 <HAL_UART_Receive_IT>
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_RxCpltCallback+0xa0>
		return;
 8001fc2:	bf00      	nop
	}
}
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20010384 	.word	0x20010384
 8001fd0:	20010380 	.word	0x20010380
 8001fd4:	20000280 	.word	0x20000280
 8001fd8:	20010590 	.word	0x20010590

08001fdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_UART_TxCpltCallback+0x64>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d122      	bne.n	8002038 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_UART_TxCpltCallback+0x6c>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	2b0d      	cmp	r3, #13
 8001ffc:	d10d      	bne.n	800201a <HAL_UART_TxCpltCallback+0x3e>
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_UART_TxCpltCallback+0x6c>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	2b0a      	cmp	r3, #10
 800200a:	d006      	beq.n	800201a <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_UART_TxCpltCallback+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e00f      	b.n	800203a <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_UART_TxCpltCallback+0x68>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_UART_TxCpltCallback+0x6c>)
 800202a:	4413      	add	r3, r2
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <HAL_UART_TxCpltCallback+0x70>)
 8002032:	f002 f9f7 	bl	8004424 <HAL_UART_Transmit_IT>
 8002036:	e000      	b.n	800203a <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002038:	bf00      	nop
}
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20010588 	.word	0x20010588
 8002044:	2001058c 	.word	0x2001058c
 8002048:	20010388 	.word	0x20010388
 800204c:	20010590 	.word	0x20010590

08002050 <Reset_Handler>:
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopFillZerobss+0x12>
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopFillZerobss+0x16>)
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopFillZerobss+0x1a>)
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopFillZerobss+0x1e>)
 800205a:	2300      	movs	r3, #0
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:
 800205e:	58d4      	ldr	r4, [r2, r3]
 8002060:	50c4      	str	r4, [r0, r3]
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:
 8002064:	18c4      	adds	r4, r0, r3
 8002066:	428c      	cmp	r4, r1
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopFillZerobss+0x22>)
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopFillZerobss+0x26>)
 800206e:	2300      	movs	r3, #0
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:
 8002076:	42a2      	cmp	r2, r4
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>
 800207a:	f7ff fe27 	bl	8001ccc <SystemInit>
 800207e:	f003 fd29 	bl	8005ad4 <__libc_init_array>
 8002082:	f7ff fc4b 	bl	800191c <main>
 8002086:	4770      	bx	lr
 8002088:	20080000 	.word	0x20080000
 800208c:	20000000 	.word	0x20000000
 8002090:	2000020c 	.word	0x2000020c
 8002094:	0800b564 	.word	0x0800b564
 8002098:	2000020c 	.word	0x2000020c
 800209c:	20010628 	.word	0x20010628

080020a0 <ADC_IRQHandler>:
 80020a0:	e7fe      	b.n	80020a0 <ADC_IRQHandler>

080020a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a6:	2003      	movs	r0, #3
 80020a8:	f000 fd7a 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f805 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b2:	f7ff fced 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x54>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fd95 	bl	8002c0a <HAL_SYSTICK_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00e      	b.n	8002108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d80a      	bhi.n	8002106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 fd5d 	bl	8002bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_InitTick+0x5c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000002c 	.word	0x2000002c
 8002114:	20000034 	.word	0x20000034
 8002118:	20000030 	.word	0x20000030

0800211c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x20>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_IncTick+0x24>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000034 	.word	0x20000034
 8002140:	20010614 	.word	0x20010614

08002144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_GetTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20010614 	.word	0x20010614

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff ffee 	bl	8002144 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffde 	bl	8002144 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000034 	.word	0x20000034

080021a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e031      	b.n	800221e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fc56 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d116      	bne.n	8002210 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_ADC_Init+0x84>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	f043 0202 	orr.w	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fb0a 	bl	800280c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
 800220e:	e001      	b.n	8002214 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	ffffeefd 	.word	0xffffeefd

0800222c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start+0x1a>
 8002242:	2302      	movs	r3, #2
 8002244:	e0ad      	b.n	80023a2 <HAL_ADC_Start+0x176>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d018      	beq.n	800228e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_ADC_Start+0x184>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_ADC_Start+0x188>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0c9a      	lsrs	r2, r3, #18
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002280:	e002      	b.n	8002288 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b01      	subs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d175      	bne.n	8002388 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a0:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_ADC_Start+0x18c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	d106      	bne.n	80022e6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f023 0206 	bic.w	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
 80022e4:	e002      	b.n	80022ec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_ADC_Start+0x190>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d143      	bne.n	80023a0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e03a      	b.n	80023a0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_ADC_Start+0x194>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10e      	bne.n	8002352 <HAL_ADC_Start+0x126>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002350:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_ADC_Start+0x190>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d120      	bne.n	80023a0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_ADC_Start+0x198>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d11b      	bne.n	80023a0 <HAL_ADC_Start+0x174>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d114      	bne.n	80023a0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	2000002c 	.word	0x2000002c
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	fffff8fe 	.word	0xfffff8fe
 80023bc:	40012300 	.word	0x40012300
 80023c0:	40012000 	.word	0x40012000
 80023c4:	40012200 	.word	0x40012200

080023c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Stop+0x16>
 80023da:	2302      	movs	r3, #2
 80023dc:	e01f      	b.n	800241e <HAL_ADC_Stop+0x56>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_ADC_Stop+0x64>)
 800240a:	4013      	ands	r3, r2
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	ffffeefe 	.word	0xffffeefe

08002430 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d113      	bne.n	8002476 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d10b      	bne.n	8002476 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e063      	b.n	800253e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002476:	f7ff fe65 	bl	8002144 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247c:	e021      	b.n	80024c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d01d      	beq.n	80024c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_ADC_PollForConversion+0x6c>
 800248c:	f7ff fe5a 	bl	8002144 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d212      	bcs.n	80024c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d00b      	beq.n	80024c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e03d      	b.n	800253e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d1d6      	bne.n	800247e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0212 	mvn.w	r2, #18
 80024d8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11f      	bne.n	800253c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e136      	b.n	80027ea <HAL_ADC_ConfigChannel+0x28a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d93a      	bls.n	8002602 <HAL_ADC_ConfigChannel+0xa2>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002594:	d035      	beq.n	8002602 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68d9      	ldr	r1, [r3, #12]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	3b1e      	subs	r3, #30
 80025ac:	2207      	movs	r2, #7
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a8d      	ldr	r2, [pc, #564]	; (80027f8 <HAL_ADC_ConfigChannel+0x298>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	061a      	lsls	r2, r3, #24
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025da:	e035      	b.n	8002648 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4403      	add	r3, r0
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	409a      	lsls	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002600:	e022      	b.n	8002648 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6919      	ldr	r1, [r3, #16]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	2207      	movs	r2, #7
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43da      	mvns	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	4603      	mov	r3, r0
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4403      	add	r3, r0
 800263e:	409a      	lsls	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d824      	bhi.n	800269a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b05      	subs	r3, #5
 8002662:	221f      	movs	r2, #31
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b05      	subs	r3, #5
 800268c:	fa00 f203 	lsl.w	r2, r0, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34
 8002698:	e04c      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d824      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b23      	subs	r3, #35	; 0x23
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b23      	subs	r3, #35	; 0x23
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ea:	e023      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b41      	subs	r3, #65	; 0x41
 80026fe:	221f      	movs	r2, #31
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43da      	mvns	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	400a      	ands	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b41      	subs	r3, #65	; 0x41
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a30      	ldr	r2, [pc, #192]	; (80027fc <HAL_ADC_ConfigChannel+0x29c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1f4>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002746:	d105      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 800274e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002752:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a28      	ldr	r2, [pc, #160]	; (80027fc <HAL_ADC_ConfigChannel+0x29c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10f      	bne.n	800277e <HAL_ADC_ConfigChannel+0x21e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b12      	cmp	r3, #18
 8002764:	d10b      	bne.n	800277e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 800276c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002770:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a22      	ldr	r2, [pc, #136]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_ADC_ConfigChannel+0x29c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d12b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x280>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_ADC_ConfigChannel+0x298>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <HAL_ADC_ConfigChannel+0x23a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b11      	cmp	r3, #17
 8002798:	d122      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027a4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_ADC_ConfigChannel+0x298>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_ADC_ConfigChannel+0x2a4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_ConfigChannel+0x2a8>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9a      	lsrs	r2, r3, #18
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027d2:	e002      	b.n	80027da <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	10000012 	.word	0x10000012
 80027fc:	40012000 	.word	0x40012000
 8002800:	40012300 	.word	0x40012300
 8002804:	2000002c 	.word	0x2000002c
 8002808:	431bde83 	.word	0x431bde83

0800280c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002814:	4b78      	ldr	r3, [pc, #480]	; (80029f8 <ADC_Init+0x1ec>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <ADC_Init+0x1ec>)
 800281a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800281e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002820:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <ADC_Init+0x1ec>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4973      	ldr	r1, [pc, #460]	; (80029f8 <ADC_Init+0x1ec>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800283c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	021a      	lsls	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	4a58      	ldr	r2, [pc, #352]	; (80029fc <ADC_Init+0x1f0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e00f      	b.n	8002906 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0202 	bic.w	r2, r2, #2
 8002914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	005a      	lsls	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	035a      	lsls	r2, r3, #13
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e007      	b.n	800297c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	3b01      	subs	r3, #1
 8002998:	051a      	lsls	r2, r3, #20
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029be:	025a      	lsls	r2, r3, #9
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	029a      	lsls	r2, r3, #10
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012300 	.word	0x40012300
 80029fc:	0f000001 	.word	0x0f000001

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	05fa0000 	.word	0x05fa0000

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fa88 	bl	8002144 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d008      	beq.n	8002c54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e052      	b.n	8002cfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0216 	bic.w	r2, r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_DMA_Abort+0x62>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0208 	bic.w	r2, r2, #8
 8002c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e013      	b.n	8002cce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff fa4d 	bl	8002144 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d90c      	bls.n	8002cce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e015      	b.n	8002cfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e4      	bne.n	8002ca6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	223f      	movs	r2, #63	; 0x3f
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e00c      	b.n	8002d3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2205      	movs	r2, #5
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e175      	b.n	8003054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 8164 	bne.w	800304e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d005      	beq.n	8002d9e <HAL_GPIO_Init+0x56>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d130      	bne.n	8002e00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 0201 	and.w	r2, r3, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d017      	beq.n	8002e3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d123      	bne.n	8002e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	69b9      	ldr	r1, [r7, #24]
 8002e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80be 	beq.w	800304e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d037      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a55      	ldr	r2, [pc, #340]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a53      	ldr	r2, [pc, #332]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a51      	ldr	r2, [pc, #324]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x222>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a50      	ldr	r2, [pc, #320]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x21e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x21a>
 8002f5e:	2309      	movs	r3, #9
 8002f60:	e012      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f62:	230a      	movs	r3, #10
 8002f64:	e010      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e00e      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e00c      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00a      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_GPIO_Init+0x354>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_GPIO_Init+0x354>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_GPIO_Init+0x354>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f ae86 	bls.w	8002d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40013800 	.word	0x40013800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020400 	.word	0x40020400
 800307c:	40020800 	.word	0x40020800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	40021000 	.word	0x40021000
 8003088:	40021400 	.word	0x40021400
 800308c:	40021800 	.word	0x40021800
 8003090:	40021c00 	.word	0x40021c00
 8003094:	40022000 	.word	0x40022000
 8003098:	40022400 	.word	0x40022400
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e001      	b.n	80030c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030ec:	e003      	b.n	80030f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003114:	887a      	ldrh	r2, [r7, #2]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4013      	ands	r3, r2
 800311a:	041a      	lsls	r2, r3, #16
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43d9      	mvns	r1, r3
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	400b      	ands	r3, r1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003166:	f7fe ffed 	bl	8002144 <HAL_GetTick>
 800316a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316c:	e009      	b.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800316e:	f7fe ffe9 	bl	8002144 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317c:	d901      	bls.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e022      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d1ee      	bne.n	800316e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7fe ffd2 	bl	8002144 <HAL_GetTick>
 80031a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a2:	e009      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031a4:	f7fe ffce 	bl	8002144 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b2:	d901      	bls.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e007      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c4:	d1ee      	bne.n	80031a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e29b      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
 8003214:	4b90      	ldr	r3, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x130>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e275      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x7a>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x9c>
 800325a:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7e      	ldr	r2, [pc, #504]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xc0>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe ff44 	bl	8002144 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe ff40 	bl	8002144 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e229      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe ff30 	bl	8002144 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe ff2c 	bl	8002144 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e215      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d069      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1e9      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	493d      	ldr	r1, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e040      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fee2 	bl	8002144 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fede 	bl	8002144 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4929      	ldr	r1, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe febe 	bl	8002144 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe feba 	bl	8002144 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1a3      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d038      	beq.n	8003468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fe9b 	bl	8002144 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fe97 	bl	8002144 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e180      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x23a>
 8003430:	e01a      	b.n	8003468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fe81 	bl	8002144 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fe7d 	bl	8002144 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d903      	bls.n	800345c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e166      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
 8003458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a4 	beq.w	80035be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034aa:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fe45 	bl	8002144 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe fe41 	bl	8002144 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e12a      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x31a>
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x33c>
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x35e>
 800351c:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a61      	ldr	r2, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fdf5 	bl	8002144 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fdf1 	bl	8002144 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0d8      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x386>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fddf 	bl	8002144 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fddb 	bl	8002144 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0c2      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80ae 	beq.w	8003724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d06d      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14b      	bne.n	8003674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fdac 	bl	8002144 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fda8 	bl	8002144 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e091      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	491b      	ldr	r1, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fd7a 	bl	8002144 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fd76 	bl	8002144 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e05f      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x47c>
 8003672:	e057      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fd60 	bl	8002144 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fd5c 	bl	8002144 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x558>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d119      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fe fc8c 	bl	8002144 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fc88 	bl	8002144 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d0>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fbe8 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800b074 	.word	0x0800b074
 8003904:	2000002c 	.word	0x2000002c
 8003908:	20000030 	.word	0x20000030

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003924:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d00d      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003930:	2b08      	cmp	r3, #8
 8003932:	f200 80bd 	bhi.w	8003ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x34>
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x3a>
 800393e:	e0b7      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003942:	60bb      	str	r3, [r7, #8]
      break;
 8003944:	e0b7      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003946:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003948:	60bb      	str	r3, [r7, #8]
      break;
 800394a:	e0b4      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394c:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04d      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	ea02 0800 	and.w	r8, r2, r0
 800397a:	ea03 0901 	and.w	r9, r3, r1
 800397e:	4640      	mov	r0, r8
 8003980:	4649      	mov	r1, r9
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	014b      	lsls	r3, r1, #5
 800398c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003990:	0142      	lsls	r2, r0, #5
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	ebb0 0008 	subs.w	r0, r0, r8
 800399a:	eb61 0109 	sbc.w	r1, r1, r9
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039ac:	0182      	lsls	r2, r0, #6
 80039ae:	1a12      	subs	r2, r2, r0
 80039b0:	eb63 0301 	sbc.w	r3, r3, r1
 80039b4:	f04f 0000 	mov.w	r0, #0
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	00d9      	lsls	r1, r3, #3
 80039be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c2:	00d0      	lsls	r0, r2, #3
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	eb12 0208 	adds.w	r2, r2, r8
 80039cc:	eb43 0309 	adc.w	r3, r3, r9
 80039d0:	f04f 0000 	mov.w	r0, #0
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	0259      	lsls	r1, r3, #9
 80039da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039de:	0250      	lsls	r0, r2, #9
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	f7fc fe3a 	bl	8000668 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4613      	mov	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e04a      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	ea02 0400 	and.w	r4, r2, r0
 8003a16:	ea03 0501 	and.w	r5, r3, r1
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	014b      	lsls	r3, r1, #5
 8003a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a2c:	0142      	lsls	r2, r0, #5
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	1b00      	subs	r0, r0, r4
 8003a34:	eb61 0105 	sbc.w	r1, r1, r5
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	018b      	lsls	r3, r1, #6
 8003a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a46:	0182      	lsls	r2, r0, #6
 8003a48:	1a12      	subs	r2, r2, r0
 8003a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	00d9      	lsls	r1, r3, #3
 8003a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a5c:	00d0      	lsls	r0, r2, #3
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	1912      	adds	r2, r2, r4
 8003a64:	eb45 0303 	adc.w	r3, r5, r3
 8003a68:	f04f 0000 	mov.w	r0, #0
 8003a6c:	f04f 0100 	mov.w	r1, #0
 8003a70:	0299      	lsls	r1, r3, #10
 8003a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a76:	0290      	lsls	r0, r2, #10
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	f7fc fdee 	bl	8000668 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	60bb      	str	r3, [r7, #8]
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ab2:	60bb      	str	r3, [r7, #8]
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000002c 	.word	0x2000002c

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	0800b084 	.word	0x0800b084

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b14:	f7ff ffdc 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0b5b      	lsrs	r3, r3, #13
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800b084 	.word	0x0800b084

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b60:	4b69      	ldr	r3, [pc, #420]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a68      	ldr	r2, [pc, #416]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b6a:	6093      	str	r3, [r2, #8]
 8003b6c:	4b66      	ldr	r3, [pc, #408]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	4964      	ldr	r1, [pc, #400]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b92:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	4959      	ldr	r1, [pc, #356]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bce:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	494a      	ldr	r1, [pc, #296]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 808b 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c1c:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	4a39      	ldr	r2, [pc, #228]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	; 0x40
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fe fa80 	bl	8002144 <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fe fa7c 	bl	8002144 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e38f      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5a:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d035      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d02e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d114      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fa44 	bl	8002144 <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fa40 	bl	8002144 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e351      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ee      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cee:	d111      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cfe:	400b      	ands	r3, r1
 8003d00:	4901      	ldr	r1, [pc, #4]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	0ffffcff 	.word	0x0ffffcff
 8003d14:	4bb3      	ldr	r3, [pc, #716]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4ab2      	ldr	r2, [pc, #712]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d1e:	6093      	str	r3, [r2, #8]
 8003d20:	4bb0      	ldr	r3, [pc, #704]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	49ad      	ldr	r1, [pc, #692]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d3e:	4ba9      	ldr	r3, [pc, #676]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	4aa7      	ldr	r2, [pc, #668]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d4e:	4ba5      	ldr	r3, [pc, #660]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	49a2      	ldr	r1, [pc, #648]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d6c:	4b9d      	ldr	r3, [pc, #628]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7a:	499a      	ldr	r1, [pc, #616]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d8e:	4b95      	ldr	r3, [pc, #596]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9c:	4991      	ldr	r1, [pc, #580]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db0:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	4989      	ldr	r1, [pc, #548]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd2:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4980      	ldr	r1, [pc, #512]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df4:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	4978      	ldr	r1, [pc, #480]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e16:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f023 020c 	bic.w	r2, r3, #12
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	496f      	ldr	r1, [pc, #444]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e38:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	4967      	ldr	r1, [pc, #412]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e5a:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	495e      	ldr	r1, [pc, #376]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	4956      	ldr	r1, [pc, #344]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	494d      	ldr	r1, [pc, #308]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ec0:	4b48      	ldr	r3, [pc, #288]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	4945      	ldr	r1, [pc, #276]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	493c      	ldr	r1, [pc, #240]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f04:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f12:	4934      	ldr	r1, [pc, #208]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d011      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f34:	492b      	ldr	r1, [pc, #172]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f88:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f98:	4912      	ldr	r1, [pc, #72]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00f      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	4986      	ldr	r1, [pc, #536]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004002:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400c:	497d      	ldr	r1, [pc, #500]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d006      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80d6 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004028:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a75      	ldr	r2, [pc, #468]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fe f886 	bl	8002144 <HAL_GetTick>
 8004038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800403c:	f7fe f882 	bl	8002144 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e195      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800404e:	4b6d      	ldr	r3, [pc, #436]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d021      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11d      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800407c:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	0e1b      	lsrs	r3, r3, #24
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	4958      	ldr	r1, [pc, #352]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d4:	d129      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040d6:	4b4b      	ldr	r3, [pc, #300]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e4:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	0f1b      	lsrs	r3, r3, #28
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	019a      	lsls	r2, r3, #6
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	493e      	ldr	r1, [pc, #248]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004118:	f023 021f 	bic.w	r2, r3, #31
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	3b01      	subs	r3, #1
 8004122:	4938      	ldr	r1, [pc, #224]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413c:	0e1b      	lsrs	r3, r3, #24
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	0f1b      	lsrs	r3, r3, #28
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	019a      	lsls	r2, r3, #6
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	4926      	ldr	r1, [pc, #152]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d011      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	071b      	lsls	r3, r3, #28
 800419a:	491a      	ldr	r1, [pc, #104]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ae:	f7fd ffc9 	bl	8002144 <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041b6:	f7fd ffc5 	bl	8002144 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0d8      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	f040 80ce 	bne.w	8004378 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e8:	f7fd ffac 	bl	8002144 <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041ee:	e00b      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041f0:	f7fd ffa8 	bl	8002144 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d904      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0bb      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004208:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004214:	d0ec      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004232:	2b00      	cmp	r3, #0
 8004234:	d02e      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d12a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800423e:	4b51      	ldr	r3, [pc, #324]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800424c:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	0f1b      	lsrs	r3, r3, #28
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	4944      	ldr	r1, [pc, #272]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	493d      	ldr	r1, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d022      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a8:	d11d      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042aa:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	0e1b      	lsrs	r3, r3, #24
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042b8:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	0f1b      	lsrs	r3, r3, #28
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	019a      	lsls	r2, r3, #6
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	431a      	orrs	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	4929      	ldr	r1, [pc, #164]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	4917      	ldr	r1, [pc, #92]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	4911      	ldr	r1, [pc, #68]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fd fef8 	bl	8002144 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004358:	f7fd fef4 	bl	8002144 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e007      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004376:	d1ef      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800

08004388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e040      	b.n	800441c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fce8 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fbe8 	bl	8004b9c <UART_SetConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e022      	b.n	800441c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fe3e 	bl	8005060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fec5 	bl	80051a4 <UART_CheckIdleState>
 800441a:	4603      	mov	r3, r0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004424:	b480      	push	{r7}
 8004426:	b08b      	sub	sp, #44	; 0x2c
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	2b20      	cmp	r3, #32
 8004438:	d156      	bne.n	80044e8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_UART_Transmit_IT+0x22>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e04f      	b.n	80044ea <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit_IT+0x34>
 8004454:	2302      	movs	r3, #2
 8004456:	e048      	b.n	80044ea <HAL_UART_Transmit_IT+0xc6>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2221      	movs	r2, #33	; 0x21
 8004488:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d107      	bne.n	80044a4 <HAL_UART_Transmit_IT+0x80>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_UART_Transmit_IT+0xd4>)
 80044a0:	669a      	str	r2, [r3, #104]	; 0x68
 80044a2:	e002      	b.n	80044aa <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_UART_Transmit_IT+0xd8>)
 80044a8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	613b      	str	r3, [r7, #16]
   return(result);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	372c      	adds	r7, #44	; 0x2c
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	080056fd 	.word	0x080056fd
 80044fc:	08005647 	.word	0x08005647

08004500 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004512:	2b20      	cmp	r3, #32
 8004514:	d13d      	bne.n	8004592 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_Receive_IT+0x22>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e036      	b.n	8004594 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UART_Receive_IT+0x34>
 8004530:	2302      	movs	r3, #2
 8004532:	e02f      	b.n	8004594 <HAL_UART_Receive_IT+0x94>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	69f9      	ldr	r1, [r7, #28]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	61bb      	str	r3, [r7, #24]
   return(result);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e6      	bne.n	8004550 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	461a      	mov	r2, r3
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 ff19 	bl	80053c0 <UART_Start_Receive_IT>
 800458e:	4603      	mov	r3, r0
 8004590:	e000      	b.n	8004594 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b0ba      	sub	sp, #232	; 0xe8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80045ca:	4013      	ands	r3, r2
 80045cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d115      	bne.n	8004604 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 82a4 	beq.w	8004b42 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
      }
      return;
 8004602:	e29e      	b.n	8004b42 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8117 	beq.w	800483c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800461a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800461e:	4b85      	ldr	r3, [pc, #532]	; (8004834 <HAL_UART_IRQHandler+0x298>)
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 810a 	beq.w	800483c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d011      	beq.n	8004658 <HAL_UART_IRQHandler+0xbc>
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d011      	beq.n	8004688 <HAL_UART_IRQHandler+0xec>
 8004664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	f043 0204 	orr.w	r2, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_UART_IRQHandler+0x11c>
 8004694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2204      	movs	r2, #4
 80046a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ae:	f043 0202 	orr.w	r2, r3, #2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2208      	movs	r2, #8
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <HAL_UART_IRQHandler+0x18a>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 820a 	beq.w	8004b46 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004760:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004776:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04f      	beq.n	800481e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fee8 	bl	8005554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d141      	bne.n	8004816 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1d9      	bne.n	8004792 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d013      	beq.n	800480e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <HAL_UART_IRQHandler+0x29c>)
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fa85 	bl	8002d02 <HAL_DMA_Abort_IT>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	e00f      	b.n	800482e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f9a4 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e00b      	b.n	800482e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9a0 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e007      	b.n	800482e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f99c 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800482c:	e18b      	b.n	8004b46 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482e:	bf00      	nop
    return;
 8004830:	e189      	b.n	8004b46 <HAL_UART_IRQHandler+0x5aa>
 8004832:	bf00      	nop
 8004834:	04000120 	.word	0x04000120
 8004838:	0800561b 	.word	0x0800561b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004840:	2b01      	cmp	r3, #1
 8004842:	f040 8144 	bne.w	8004ace <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 813d 	beq.w	8004ace <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8136 	beq.w	8004ace <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2210      	movs	r2, #16
 8004868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	f040 80b2 	bne.w	80049de <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004886:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 815d 	beq.w	8004b4a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800489a:	429a      	cmp	r2, r3
 800489c:	f080 8155 	bcs.w	8004b4a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b4:	f000 8085 	beq.w	80049c2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1da      	bne.n	80048b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800492a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800492e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e1      	bne.n	8004902 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e3      	bne.n	800493e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e4      	bne.n	8004982 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe f930 	bl	8002c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8ca 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049dc:	e0b5      	b.n	8004b4a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a7 	beq.w	8004b4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a2 	beq.w	8004b4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e4      	bne.n	8004a0a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3308      	adds	r3, #8
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a64:	633a      	str	r2, [r7, #48]	; 0x30
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0310 	bic.w	r3, r3, #16
 8004a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e4      	bne.n	8004a8a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f852 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004acc:	e03f      	b.n	8004b4e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <HAL_UART_IRQHandler+0x55c>
 8004ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004aee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f849 	bl	8004b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004af6:	e02d      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01c      	beq.n	8004b52 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
    }
    return;
 8004b20:	e017      	b.n	8004b52 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d012      	beq.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fe3e 	bl	80057bc <UART_EndTransmit_IT>
    return;
 8004b40:	e008      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b42:	bf00      	nop
 8004b44:	e006      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b46:	bf00      	nop
 8004b48:	e004      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b52:	bf00      	nop
  }

}
 8004b54:	37e8      	adds	r7, #232	; 0xe8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4ba7      	ldr	r3, [pc, #668]	; (8004e64 <UART_SetConfig+0x2c8>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	6979      	ldr	r1, [r7, #20]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a95      	ldr	r2, [pc, #596]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d120      	bne.n	8004c5a <UART_SetConfig+0xbe>
 8004c18:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d816      	bhi.n	8004c54 <UART_SetConfig+0xb8>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x90>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c49 	.word	0x08004c49
 8004c34:	08004c43 	.word	0x08004c43
 8004c38:	08004c4f 	.word	0x08004c4f
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e14f      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e14c      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e149      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e146      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e143      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a84      	ldr	r2, [pc, #528]	; (8004e70 <UART_SetConfig+0x2d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d132      	bne.n	8004cca <UART_SetConfig+0x12e>
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d828      	bhi.n	8004cc4 <UART_SetConfig+0x128>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0xdc>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cb3 	.word	0x08004cb3
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004cbf 	.word	0x08004cbf
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e117      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e114      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e111      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e10e      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e10b      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <UART_SetConfig+0x2d8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d120      	bne.n	8004d16 <UART_SetConfig+0x17a>
 8004cd4:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cde:	2b30      	cmp	r3, #48	; 0x30
 8004ce0:	d013      	beq.n	8004d0a <UART_SetConfig+0x16e>
 8004ce2:	2b30      	cmp	r3, #48	; 0x30
 8004ce4:	d814      	bhi.n	8004d10 <UART_SetConfig+0x174>
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d009      	beq.n	8004cfe <UART_SetConfig+0x162>
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d810      	bhi.n	8004d10 <UART_SetConfig+0x174>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0x15c>
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d006      	beq.n	8004d04 <UART_SetConfig+0x168>
 8004cf6:	e00b      	b.n	8004d10 <UART_SetConfig+0x174>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0f1      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0ee      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0eb      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0e8      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e0e5      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a57      	ldr	r2, [pc, #348]	; (8004e78 <UART_SetConfig+0x2dc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d120      	bne.n	8004d62 <UART_SetConfig+0x1c6>
 8004d20:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d2c:	d013      	beq.n	8004d56 <UART_SetConfig+0x1ba>
 8004d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d30:	d814      	bhi.n	8004d5c <UART_SetConfig+0x1c0>
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d009      	beq.n	8004d4a <UART_SetConfig+0x1ae>
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d810      	bhi.n	8004d5c <UART_SetConfig+0x1c0>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <UART_SetConfig+0x1a8>
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d006      	beq.n	8004d50 <UART_SetConfig+0x1b4>
 8004d42:	e00b      	b.n	8004d5c <UART_SetConfig+0x1c0>
 8004d44:	2300      	movs	r3, #0
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e0cb      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e0c8      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d50:	2304      	movs	r3, #4
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e0c5      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d56:	2308      	movs	r3, #8
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e0c2      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0bf      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a45      	ldr	r2, [pc, #276]	; (8004e7c <UART_SetConfig+0x2e0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d125      	bne.n	8004db8 <UART_SetConfig+0x21c>
 8004d6c:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7a:	d017      	beq.n	8004dac <UART_SetConfig+0x210>
 8004d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d80:	d817      	bhi.n	8004db2 <UART_SetConfig+0x216>
 8004d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d86:	d00b      	beq.n	8004da0 <UART_SetConfig+0x204>
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d811      	bhi.n	8004db2 <UART_SetConfig+0x216>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <UART_SetConfig+0x1fe>
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d006      	beq.n	8004da6 <UART_SetConfig+0x20a>
 8004d98:	e00b      	b.n	8004db2 <UART_SetConfig+0x216>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e0a0      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004da0:	2302      	movs	r3, #2
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e09d      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004da6:	2304      	movs	r3, #4
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e09a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004dac:	2308      	movs	r3, #8
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e097      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004db2:	2310      	movs	r3, #16
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e094      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <UART_SetConfig+0x2e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d125      	bne.n	8004e0e <UART_SetConfig+0x272>
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd0:	d017      	beq.n	8004e02 <UART_SetConfig+0x266>
 8004dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd6:	d817      	bhi.n	8004e08 <UART_SetConfig+0x26c>
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d00b      	beq.n	8004df6 <UART_SetConfig+0x25a>
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	d811      	bhi.n	8004e08 <UART_SetConfig+0x26c>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x254>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dec:	d006      	beq.n	8004dfc <UART_SetConfig+0x260>
 8004dee:	e00b      	b.n	8004e08 <UART_SetConfig+0x26c>
 8004df0:	2301      	movs	r3, #1
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e075      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004df6:	2302      	movs	r3, #2
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e072      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e06f      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e02:	2308      	movs	r3, #8
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e06c      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e069      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <UART_SetConfig+0x2e8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d137      	bne.n	8004e88 <UART_SetConfig+0x2ec>
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e26:	d017      	beq.n	8004e58 <UART_SetConfig+0x2bc>
 8004e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e2c:	d817      	bhi.n	8004e5e <UART_SetConfig+0x2c2>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d00b      	beq.n	8004e4c <UART_SetConfig+0x2b0>
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d811      	bhi.n	8004e5e <UART_SetConfig+0x2c2>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <UART_SetConfig+0x2aa>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d006      	beq.n	8004e52 <UART_SetConfig+0x2b6>
 8004e44:	e00b      	b.n	8004e5e <UART_SetConfig+0x2c2>
 8004e46:	2300      	movs	r3, #0
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e04a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e047      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e52:	2304      	movs	r3, #4
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e044      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e041      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e03e      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	40011000 	.word	0x40011000
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	40004c00 	.word	0x40004c00
 8004e7c:	40005000 	.word	0x40005000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	40007800 	.word	0x40007800
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a71      	ldr	r2, [pc, #452]	; (8005054 <UART_SetConfig+0x4b8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d125      	bne.n	8004ede <UART_SetConfig+0x342>
 8004e92:	4b71      	ldr	r3, [pc, #452]	; (8005058 <UART_SetConfig+0x4bc>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ea0:	d017      	beq.n	8004ed2 <UART_SetConfig+0x336>
 8004ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ea6:	d817      	bhi.n	8004ed8 <UART_SetConfig+0x33c>
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eac:	d00b      	beq.n	8004ec6 <UART_SetConfig+0x32a>
 8004eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb2:	d811      	bhi.n	8004ed8 <UART_SetConfig+0x33c>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <UART_SetConfig+0x324>
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d006      	beq.n	8004ecc <UART_SetConfig+0x330>
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x33c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e00d      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e00a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e007      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e004      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e001      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ede:	2310      	movs	r3, #16
 8004ee0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d15a      	bne.n	8004fa2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d827      	bhi.n	8004f42 <UART_SetConfig+0x3a6>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <UART_SetConfig+0x35c>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f33 	.word	0x08004f33
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f3b 	.word	0x08004f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe fde4 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004f20:	61b8      	str	r0, [r7, #24]
        break;
 8004f22:	e013      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe fdf4 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8004f28:	61b8      	str	r0, [r7, #24]
        break;
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <UART_SetConfig+0x4c0>)
 8004f2e:	61bb      	str	r3, [r7, #24]
        break;
 8004f30:	e00c      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fe fceb 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8004f36:	61b8      	str	r0, [r7, #24]
        break;
 8004f38:	e008      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3e:	61bb      	str	r3, [r7, #24]
        break;
 8004f40:	e004      	b.n	8004f4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	77bb      	strb	r3, [r7, #30]
        break;
 8004f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d074      	beq.n	800503c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	005a      	lsls	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d916      	bls.n	8004f9c <UART_SetConfig+0x400>
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d212      	bcs.n	8004f9c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f023 030f 	bic.w	r3, r3, #15
 8004f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	89fa      	ldrh	r2, [r7, #14]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	e04f      	b.n	800503c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77bb      	strb	r3, [r7, #30]
 8004fa0:	e04c      	b.n	800503c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d828      	bhi.n	8004ffa <UART_SetConfig+0x45e>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x414>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fd88 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61b8      	str	r0, [r7, #24]
        break;
 8004fda:	e013      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fd98 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61b8      	str	r0, [r7, #24]
        break;
 8004fe2:	e00f      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <UART_SetConfig+0x4c0>)
 8004fe6:	61bb      	str	r3, [r7, #24]
        break;
 8004fe8:	e00c      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe fc8f 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8004fee:	61b8      	str	r0, [r7, #24]
        break;
 8004ff0:	e008      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e004      	b.n	8005004 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77bb      	strb	r3, [r7, #30]
        break;
 8005002:	bf00      	nop
    }

    if (pclk != 0U)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085a      	lsrs	r2, r3, #1
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d909      	bls.n	8005038 <UART_SetConfig+0x49c>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d205      	bcs.n	8005038 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e001      	b.n	800503c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005048:	7fbb      	ldrb	r3, [r7, #30]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40007c00 	.word	0x40007c00
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400

08005060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515e:	d10a      	bne.n	8005176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b4:	f7fc ffc6 	bl	8002144 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10e      	bne.n	80051e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f82d 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e023      	b.n	800522e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d10e      	bne.n	8005212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f817 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00d      	b.n	800522e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b09c      	sub	sp, #112	; 0x70
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	e0a5      	b.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	f000 80a1 	beq.w	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fc ff77 	bl	8002144 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <UART_WaitOnFlagUntilTimeout+0x32>
 8005262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13e      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800527c:	667b      	str	r3, [r7, #100]	; 0x64
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005288:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800528c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	663b      	str	r3, [r7, #96]	; 0x60
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e067      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d04f      	beq.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d147      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005360:	623a      	str	r2, [r7, #32]
 8005362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	69f9      	ldr	r1, [r7, #28]
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	61bb      	str	r3, [r7, #24]
   return(result);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e010      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	f43f af4a 	beq.w	8005248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3770      	adds	r7, #112	; 0x70
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b097      	sub	sp, #92	; 0x5c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d10e      	bne.n	8005412 <UART_Start_Receive_IT+0x52>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <UART_Start_Receive_IT+0x48>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005406:	e02d      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005410:	e028      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <UART_Start_Receive_IT+0x76>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <UART_Start_Receive_IT+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e01b      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	; 0x7f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e016      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d10d      	bne.n	800545c <UART_Start_Receive_IT+0x9c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <UART_Start_Receive_IT+0x92>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	227f      	movs	r2, #127	; 0x7f
 800544c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005450:	e008      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545a:	e003      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2222      	movs	r2, #34	; 0x22
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	657b      	str	r3, [r7, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005492:	64ba      	str	r2, [r7, #72]	; 0x48
 8005494:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d107      	bne.n	80054c0 <UART_Start_Receive_IT+0x100>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <UART_Start_Receive_IT+0x18c>)
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64
 80054be:	e002      	b.n	80054c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a23      	ldr	r2, [pc, #140]	; (8005550 <UART_Start_Receive_IT+0x190>)
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d019      	beq.n	800550a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_Start_Receive_IT+0x116>
 8005508:	e018      	b.n	800553c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	613b      	str	r3, [r7, #16]
   return(result);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	653b      	str	r3, [r7, #80]	; 0x50
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	61bb      	str	r3, [r7, #24]
   return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	375c      	adds	r7, #92	; 0x5c
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	0800596d 	.word	0x0800596d
 8005550:	08005811 	.word	0x08005811

08005554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b095      	sub	sp, #84	; 0x54
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e6      	bne.n	800555c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	61fb      	str	r3, [r7, #28]
   return(result);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d118      	bne.n	80055fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0310 	bic.w	r3, r3, #16
 80055de:	647b      	str	r3, [r7, #68]	; 0x44
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	613b      	str	r3, [r7, #16]
   return(result);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800560e:	bf00      	nop
 8005610:	3754      	adds	r7, #84	; 0x54
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fa8f 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005646:	b480      	push	{r7}
 8005648:	b08f      	sub	sp, #60	; 0x3c
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005652:	2b21      	cmp	r3, #33	; 0x21
 8005654:	d14c      	bne.n	80056f0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d132      	bne.n	80056c8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005682:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e6      	bne.n	8005662 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80056c6:	e013      	b.n	80056f0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80056f0:	bf00      	nop
 80056f2:	373c      	adds	r7, #60	; 0x3c
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b091      	sub	sp, #68	; 0x44
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005708:	2b21      	cmp	r3, #33	; 0x21
 800570a:	d151      	bne.n	80057b0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d132      	bne.n	800577e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	623b      	str	r3, [r7, #32]
   return(result);
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
 8005738:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800573c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e6      	bne.n	8005718 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	60fb      	str	r3, [r7, #12]
   return(result);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	617b      	str	r3, [r7, #20]
   return(result);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800577c:	e018      	b.n	80057b0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057b0:	bf00      	nop
 80057b2:	3744      	adds	r7, #68	; 0x44
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e6      	bne.n	80057c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc fbea 	bl	8001fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b096      	sub	sp, #88	; 0x58
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800581e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005826:	2b22      	cmp	r3, #34	; 0x22
 8005828:	f040 8094 	bne.w	8005954 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005836:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800583a:	b2d9      	uxtb	r1, r3
 800583c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	400a      	ands	r2, r1
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d177      	bne.n	8005964 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3308      	adds	r3, #8
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	623b      	str	r3, [r7, #32]
   return(result);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d12e      	bne.n	800594c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60fb      	str	r3, [r7, #12]
   return(result);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	617b      	str	r3, [r7, #20]
   return(result);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d103      	bne.n	800593c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff f913 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800594a:	e00b      	b.n	8005964 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fc fae9 	bl	8001f24 <HAL_UART_RxCpltCallback>
}
 8005952:	e007      	b.n	8005964 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	619a      	str	r2, [r3, #24]
}
 8005964:	bf00      	nop
 8005966:	3758      	adds	r7, #88	; 0x58
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b096      	sub	sp, #88	; 0x58
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800597a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005982:	2b22      	cmp	r3, #34	; 0x22
 8005984:	f040 8094 	bne.w	8005ab0 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005998:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800599c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059a0:	4013      	ands	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d177      	bne.n	8005ac0 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
 80059f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e6      	bne.n	80059d0 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d12e      	bne.n	8005aa8 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f023 0310 	bic.w	r3, r3, #16
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6979      	ldr	r1, [r7, #20]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e6      	bne.n	8005a50 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d103      	bne.n	8005a98 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2210      	movs	r2, #16
 8005a96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff f865 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005aa6:	e00b      	b.n	8005ac0 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fc fa3b 	bl	8001f24 <HAL_UART_RxCpltCallback>
}
 8005aae:	e007      	b.n	8005ac0 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0208 	orr.w	r2, r2, #8
 8005abe:	619a      	str	r2, [r3, #24]
}
 8005ac0:	bf00      	nop
 8005ac2:	3758      	adds	r7, #88	; 0x58
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	; (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000038 	.word	0x20000038

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f004 ffc4 	bl	800aa74 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	0800b55c 	.word	0x0800b55c
 8005b10:	0800b55c 	.word	0x0800b55c
 8005b14:	0800b55c 	.word	0x0800b55c
 8005b18:	0800b560 	.word	0x0800b560

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <__cvt>:
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	ed2d 8b02 	vpush	{d8}
 8005b32:	eeb0 8b40 	vmov.f64	d8, d0
 8005b36:	b085      	sub	sp, #20
 8005b38:	4617      	mov	r7, r2
 8005b3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005b3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005b3e:	ee18 2a90 	vmov	r2, s17
 8005b42:	f025 0520 	bic.w	r5, r5, #32
 8005b46:	2a00      	cmp	r2, #0
 8005b48:	bfb6      	itet	lt
 8005b4a:	222d      	movlt	r2, #45	; 0x2d
 8005b4c:	2200      	movge	r2, #0
 8005b4e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005b52:	2d46      	cmp	r5, #70	; 0x46
 8005b54:	460c      	mov	r4, r1
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	d004      	beq.n	8005b64 <__cvt+0x38>
 8005b5a:	2d45      	cmp	r5, #69	; 0x45
 8005b5c:	d100      	bne.n	8005b60 <__cvt+0x34>
 8005b5e:	3401      	adds	r4, #1
 8005b60:	2102      	movs	r1, #2
 8005b62:	e000      	b.n	8005b66 <__cvt+0x3a>
 8005b64:	2103      	movs	r1, #3
 8005b66:	ab03      	add	r3, sp, #12
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	ab02      	add	r3, sp, #8
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4622      	mov	r2, r4
 8005b70:	4633      	mov	r3, r6
 8005b72:	eeb0 0b48 	vmov.f64	d0, d8
 8005b76:	f001 fe07 	bl	8007788 <_dtoa_r>
 8005b7a:	2d47      	cmp	r5, #71	; 0x47
 8005b7c:	d109      	bne.n	8005b92 <__cvt+0x66>
 8005b7e:	07fb      	lsls	r3, r7, #31
 8005b80:	d407      	bmi.n	8005b92 <__cvt+0x66>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b86:	1a1b      	subs	r3, r3, r0
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	b005      	add	sp, #20
 8005b8c:	ecbd 8b02 	vpop	{d8}
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b92:	2d46      	cmp	r5, #70	; 0x46
 8005b94:	eb00 0204 	add.w	r2, r0, r4
 8005b98:	d10c      	bne.n	8005bb4 <__cvt+0x88>
 8005b9a:	7803      	ldrb	r3, [r0, #0]
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	d107      	bne.n	8005bb0 <__cvt+0x84>
 8005ba0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	bf1c      	itt	ne
 8005baa:	f1c4 0401 	rsbne	r4, r4, #1
 8005bae:	6034      	strne	r4, [r6, #0]
 8005bb0:	6833      	ldr	r3, [r6, #0]
 8005bb2:	441a      	add	r2, r3
 8005bb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbc:	bf08      	it	eq
 8005bbe:	9203      	streq	r2, [sp, #12]
 8005bc0:	2130      	movs	r1, #48	; 0x30
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d2dc      	bcs.n	8005b82 <__cvt+0x56>
 8005bc8:	1c5c      	adds	r4, r3, #1
 8005bca:	9403      	str	r4, [sp, #12]
 8005bcc:	7019      	strb	r1, [r3, #0]
 8005bce:	e7f8      	b.n	8005bc2 <__cvt+0x96>

08005bd0 <__exponent>:
 8005bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	bfb8      	it	lt
 8005bd8:	4249      	neglt	r1, r1
 8005bda:	f803 2b02 	strb.w	r2, [r3], #2
 8005bde:	bfb4      	ite	lt
 8005be0:	222d      	movlt	r2, #45	; 0x2d
 8005be2:	222b      	movge	r2, #43	; 0x2b
 8005be4:	2909      	cmp	r1, #9
 8005be6:	7042      	strb	r2, [r0, #1]
 8005be8:	dd2a      	ble.n	8005c40 <__exponent+0x70>
 8005bea:	f10d 0407 	add.w	r4, sp, #7
 8005bee:	46a4      	mov	ip, r4
 8005bf0:	270a      	movs	r7, #10
 8005bf2:	46a6      	mov	lr, r4
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bfa:	fb07 1516 	mls	r5, r7, r6, r1
 8005bfe:	3530      	adds	r5, #48	; 0x30
 8005c00:	2a63      	cmp	r2, #99	; 0x63
 8005c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	dcf1      	bgt.n	8005bf2 <__exponent+0x22>
 8005c0e:	3130      	adds	r1, #48	; 0x30
 8005c10:	f1ae 0502 	sub.w	r5, lr, #2
 8005c14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c18:	1c44      	adds	r4, r0, #1
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4561      	cmp	r1, ip
 8005c1e:	d30a      	bcc.n	8005c36 <__exponent+0x66>
 8005c20:	f10d 0209 	add.w	r2, sp, #9
 8005c24:	eba2 020e 	sub.w	r2, r2, lr
 8005c28:	4565      	cmp	r5, ip
 8005c2a:	bf88      	it	hi
 8005c2c:	2200      	movhi	r2, #0
 8005c2e:	4413      	add	r3, r2
 8005c30:	1a18      	subs	r0, r3, r0
 8005c32:	b003      	add	sp, #12
 8005c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c3e:	e7ed      	b.n	8005c1c <__exponent+0x4c>
 8005c40:	2330      	movs	r3, #48	; 0x30
 8005c42:	3130      	adds	r1, #48	; 0x30
 8005c44:	7083      	strb	r3, [r0, #2]
 8005c46:	70c1      	strb	r1, [r0, #3]
 8005c48:	1d03      	adds	r3, r0, #4
 8005c4a:	e7f1      	b.n	8005c30 <__exponent+0x60>
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <_printf_float>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	b08b      	sub	sp, #44	; 0x2c
 8005c56:	460c      	mov	r4, r1
 8005c58:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	4605      	mov	r5, r0
 8005c62:	f002 fe83 	bl	800896c <_localeconv_r>
 8005c66:	f8d0 b000 	ldr.w	fp, [r0]
 8005c6a:	4658      	mov	r0, fp
 8005c6c:	f7fa fae8 	bl	8000240 <strlen>
 8005c70:	2300      	movs	r3, #0
 8005c72:	9308      	str	r3, [sp, #32]
 8005c74:	f8d8 3000 	ldr.w	r3, [r8]
 8005c78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f023 0307 	bic.w	r3, r3, #7
 8005c84:	f103 0108 	add.w	r1, r3, #8
 8005c88:	f8c8 1000 	str.w	r1, [r8]
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c92:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005c96:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005ef8 <_printf_float+0x2a8>
 8005c9a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005c9e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005ca2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005caa:	dd24      	ble.n	8005cf6 <_printf_float+0xa6>
 8005cac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	d502      	bpl.n	8005cbc <_printf_float+0x6c>
 8005cb6:	232d      	movs	r3, #45	; 0x2d
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	4b90      	ldr	r3, [pc, #576]	; (8005f00 <_printf_float+0x2b0>)
 8005cbe:	4891      	ldr	r0, [pc, #580]	; (8005f04 <_printf_float+0x2b4>)
 8005cc0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cc4:	bf94      	ite	ls
 8005cc6:	4698      	movls	r8, r3
 8005cc8:	4680      	movhi	r8, r0
 8005cca:	2303      	movs	r3, #3
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	9700      	str	r7, [sp, #0]
 8005cda:	4633      	mov	r3, r6
 8005cdc:	aa09      	add	r2, sp, #36	; 0x24
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 f9d3 	bl	800608c <_printf_common>
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f040 808a 	bne.w	8005e00 <_printf_float+0x1b0>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	b00b      	add	sp, #44	; 0x2c
 8005cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf6:	eeb4 0b40 	vcmp.f64	d0, d0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	d709      	bvc.n	8005d14 <_printf_float+0xc4>
 8005d00:	ee10 3a90 	vmov	r3, s1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfbc      	itt	lt
 8005d08:	232d      	movlt	r3, #45	; 0x2d
 8005d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d0e:	487e      	ldr	r0, [pc, #504]	; (8005f08 <_printf_float+0x2b8>)
 8005d10:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <_printf_float+0x2bc>)
 8005d12:	e7d5      	b.n	8005cc0 <_printf_float+0x70>
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d1a:	9104      	str	r1, [sp, #16]
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	d13c      	bne.n	8005d9a <_printf_float+0x14a>
 8005d20:	2306      	movs	r3, #6
 8005d22:	6063      	str	r3, [r4, #4]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9303      	str	r3, [sp, #12]
 8005d28:	ab08      	add	r3, sp, #32
 8005d2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d32:	ab07      	add	r3, sp, #28
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	6022      	str	r2, [r4, #0]
 8005d3a:	f10d 031b 	add.w	r3, sp, #27
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7ff fef4 	bl	8005b2c <__cvt>
 8005d44:	9b04      	ldr	r3, [sp, #16]
 8005d46:	9907      	ldr	r1, [sp, #28]
 8005d48:	2b47      	cmp	r3, #71	; 0x47
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	d108      	bne.n	8005d60 <_printf_float+0x110>
 8005d4e:	1cc8      	adds	r0, r1, #3
 8005d50:	db02      	blt.n	8005d58 <_printf_float+0x108>
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	4299      	cmp	r1, r3
 8005d56:	dd41      	ble.n	8005ddc <_printf_float+0x18c>
 8005d58:	f1a9 0902 	sub.w	r9, r9, #2
 8005d5c:	fa5f f989 	uxtb.w	r9, r9
 8005d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d64:	d820      	bhi.n	8005da8 <_printf_float+0x158>
 8005d66:	3901      	subs	r1, #1
 8005d68:	464a      	mov	r2, r9
 8005d6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d6e:	9107      	str	r1, [sp, #28]
 8005d70:	f7ff ff2e 	bl	8005bd0 <__exponent>
 8005d74:	9a08      	ldr	r2, [sp, #32]
 8005d76:	9004      	str	r0, [sp, #16]
 8005d78:	1813      	adds	r3, r2, r0
 8005d7a:	2a01      	cmp	r2, #1
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	dc02      	bgt.n	8005d86 <_printf_float+0x136>
 8005d80:	6822      	ldr	r2, [r4, #0]
 8005d82:	07d2      	lsls	r2, r2, #31
 8005d84:	d501      	bpl.n	8005d8a <_printf_float+0x13a>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0a2      	beq.n	8005cd8 <_printf_float+0x88>
 8005d92:	232d      	movs	r3, #45	; 0x2d
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	e79e      	b.n	8005cd8 <_printf_float+0x88>
 8005d9a:	9904      	ldr	r1, [sp, #16]
 8005d9c:	2947      	cmp	r1, #71	; 0x47
 8005d9e:	d1c1      	bne.n	8005d24 <_printf_float+0xd4>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1bf      	bne.n	8005d24 <_printf_float+0xd4>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7bc      	b.n	8005d22 <_printf_float+0xd2>
 8005da8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dac:	d118      	bne.n	8005de0 <_printf_float+0x190>
 8005dae:	2900      	cmp	r1, #0
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	dd0b      	ble.n	8005dcc <_printf_float+0x17c>
 8005db4:	6121      	str	r1, [r4, #16]
 8005db6:	b913      	cbnz	r3, 8005dbe <_printf_float+0x16e>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	07d0      	lsls	r0, r2, #31
 8005dbc:	d502      	bpl.n	8005dc4 <_printf_float+0x174>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	440b      	add	r3, r1
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	e7de      	b.n	8005d8a <_printf_float+0x13a>
 8005dcc:	b913      	cbnz	r3, 8005dd4 <_printf_float+0x184>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	07d2      	lsls	r2, r2, #31
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_float+0x188>
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x172>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e7f2      	b.n	8005dc2 <_printf_float+0x172>
 8005ddc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005de0:	9b08      	ldr	r3, [sp, #32]
 8005de2:	4299      	cmp	r1, r3
 8005de4:	db05      	blt.n	8005df2 <_printf_float+0x1a2>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	6121      	str	r1, [r4, #16]
 8005dea:	07d8      	lsls	r0, r3, #31
 8005dec:	d5ea      	bpl.n	8005dc4 <_printf_float+0x174>
 8005dee:	1c4b      	adds	r3, r1, #1
 8005df0:	e7e7      	b.n	8005dc2 <_printf_float+0x172>
 8005df2:	2900      	cmp	r1, #0
 8005df4:	bfd4      	ite	le
 8005df6:	f1c1 0202 	rsble	r2, r1, #2
 8005dfa:	2201      	movgt	r2, #1
 8005dfc:	4413      	add	r3, r2
 8005dfe:	e7e0      	b.n	8005dc2 <_printf_float+0x172>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	055a      	lsls	r2, r3, #21
 8005e04:	d407      	bmi.n	8005e16 <_printf_float+0x1c6>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	4642      	mov	r2, r8
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	d12a      	bne.n	8005e6a <_printf_float+0x21a>
 8005e14:	e76a      	b.n	8005cec <_printf_float+0x9c>
 8005e16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e1a:	f240 80e2 	bls.w	8005fe2 <_printf_float+0x392>
 8005e1e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2a:	d133      	bne.n	8005e94 <_printf_float+0x244>
 8005e2c:	4a38      	ldr	r2, [pc, #224]	; (8005f10 <_printf_float+0x2c0>)
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f af58 	beq.w	8005cec <_printf_float+0x9c>
 8005e3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	db02      	blt.n	8005e4a <_printf_float+0x1fa>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07d8      	lsls	r0, r3, #31
 8005e48:	d50f      	bpl.n	8005e6a <_printf_float+0x21a>
 8005e4a:	4653      	mov	r3, sl
 8005e4c:	465a      	mov	r2, fp
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f af49 	beq.w	8005cec <_printf_float+0x9c>
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	f104 091a 	add.w	r9, r4, #26
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4543      	cmp	r3, r8
 8005e68:	dc09      	bgt.n	8005e7e <_printf_float+0x22e>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	f100 8108 	bmi.w	8006082 <_printf_float+0x432>
 8005e72:	68e0      	ldr	r0, [r4, #12]
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	4298      	cmp	r0, r3
 8005e78:	bfb8      	it	lt
 8005e7a:	4618      	movlt	r0, r3
 8005e7c:	e738      	b.n	8005cf0 <_printf_float+0xa0>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	464a      	mov	r2, r9
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f af2f 	beq.w	8005cec <_printf_float+0x9c>
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	e7e6      	b.n	8005e62 <_printf_float+0x212>
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc3c      	bgt.n	8005f14 <_printf_float+0x2c4>
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <_printf_float+0x2c0>)
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f af21 	beq.w	8005cec <_printf_float+0x9c>
 8005eaa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d102      	bne.n	8005eb8 <_printf_float+0x268>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	07d9      	lsls	r1, r3, #31
 8005eb6:	d5d8      	bpl.n	8005e6a <_printf_float+0x21a>
 8005eb8:	4653      	mov	r3, sl
 8005eba:	465a      	mov	r2, fp
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af12 	beq.w	8005cec <_printf_float+0x9c>
 8005ec8:	f04f 0900 	mov.w	r9, #0
 8005ecc:	f104 0a1a 	add.w	sl, r4, #26
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	425b      	negs	r3, r3
 8005ed4:	454b      	cmp	r3, r9
 8005ed6:	dc01      	bgt.n	8005edc <_printf_float+0x28c>
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	e795      	b.n	8005e08 <_printf_float+0x1b8>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4652      	mov	r2, sl
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af00 	beq.w	8005cec <_printf_float+0x9c>
 8005eec:	f109 0901 	add.w	r9, r9, #1
 8005ef0:	e7ee      	b.n	8005ed0 <_printf_float+0x280>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	ffffffff 	.word	0xffffffff
 8005efc:	7fefffff 	.word	0x7fefffff
 8005f00:	0800b090 	.word	0x0800b090
 8005f04:	0800b094 	.word	0x0800b094
 8005f08:	0800b09c 	.word	0x0800b09c
 8005f0c:	0800b098 	.word	0x0800b098
 8005f10:	0800b4a1 	.word	0x0800b4a1
 8005f14:	9a08      	ldr	r2, [sp, #32]
 8005f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	bfa8      	it	ge
 8005f1c:	461a      	movge	r2, r3
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	4691      	mov	r9, r2
 8005f22:	dc38      	bgt.n	8005f96 <_printf_float+0x346>
 8005f24:	2300      	movs	r3, #0
 8005f26:	9305      	str	r3, [sp, #20]
 8005f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f2c:	f104 021a 	add.w	r2, r4, #26
 8005f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f32:	9905      	ldr	r1, [sp, #20]
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	eba3 0309 	sub.w	r3, r3, r9
 8005f3a:	428b      	cmp	r3, r1
 8005f3c:	dc33      	bgt.n	8005fa6 <_printf_float+0x356>
 8005f3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	db3c      	blt.n	8005fc0 <_printf_float+0x370>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07da      	lsls	r2, r3, #31
 8005f4a:	d439      	bmi.n	8005fc0 <_printf_float+0x370>
 8005f4c:	9a08      	ldr	r2, [sp, #32]
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	9907      	ldr	r1, [sp, #28]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	eba2 0901 	sub.w	r9, r2, r1
 8005f58:	4599      	cmp	r9, r3
 8005f5a:	bfa8      	it	ge
 8005f5c:	4699      	movge	r9, r3
 8005f5e:	f1b9 0f00 	cmp.w	r9, #0
 8005f62:	dc35      	bgt.n	8005fd0 <_printf_float+0x380>
 8005f64:	f04f 0800 	mov.w	r8, #0
 8005f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6c:	f104 0a1a 	add.w	sl, r4, #26
 8005f70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	eba3 0309 	sub.w	r3, r3, r9
 8005f7a:	4543      	cmp	r3, r8
 8005f7c:	f77f af75 	ble.w	8005e6a <_printf_float+0x21a>
 8005f80:	2301      	movs	r3, #1
 8005f82:	4652      	mov	r2, sl
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f aeae 	beq.w	8005cec <_printf_float+0x9c>
 8005f90:	f108 0801 	add.w	r8, r8, #1
 8005f94:	e7ec      	b.n	8005f70 <_printf_float+0x320>
 8005f96:	4613      	mov	r3, r2
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b8      	blx	r7
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d1bf      	bne.n	8005f24 <_printf_float+0x2d4>
 8005fa4:	e6a2      	b.n	8005cec <_printf_float+0x9c>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	9204      	str	r2, [sp, #16]
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae9b 	beq.w	8005cec <_printf_float+0x9c>
 8005fb6:	9b05      	ldr	r3, [sp, #20]
 8005fb8:	9a04      	ldr	r2, [sp, #16]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	e7b7      	b.n	8005f30 <_printf_float+0x2e0>
 8005fc0:	4653      	mov	r3, sl
 8005fc2:	465a      	mov	r2, fp
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d1be      	bne.n	8005f4c <_printf_float+0x2fc>
 8005fce:	e68d      	b.n	8005cec <_printf_float+0x9c>
 8005fd0:	9a04      	ldr	r2, [sp, #16]
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4442      	add	r2, r8
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d1c1      	bne.n	8005f64 <_printf_float+0x314>
 8005fe0:	e684      	b.n	8005cec <_printf_float+0x9c>
 8005fe2:	9a08      	ldr	r2, [sp, #32]
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	dc01      	bgt.n	8005fec <_printf_float+0x39c>
 8005fe8:	07db      	lsls	r3, r3, #31
 8005fea:	d537      	bpl.n	800605c <_printf_float+0x40c>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4642      	mov	r2, r8
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f ae78 	beq.w	8005cec <_printf_float+0x9c>
 8005ffc:	4653      	mov	r3, sl
 8005ffe:	465a      	mov	r2, fp
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f ae70 	beq.w	8005cec <_printf_float+0x9c>
 800600c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006018:	d01b      	beq.n	8006052 <_printf_float+0x402>
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	f108 0201 	add.w	r2, r8, #1
 8006020:	3b01      	subs	r3, #1
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d10e      	bne.n	800604a <_printf_float+0x3fa>
 800602c:	e65e      	b.n	8005cec <_printf_float+0x9c>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae57 	beq.w	8005cec <_printf_float+0x9c>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	3b01      	subs	r3, #1
 8006046:	4543      	cmp	r3, r8
 8006048:	dcf1      	bgt.n	800602e <_printf_float+0x3de>
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006050:	e6db      	b.n	8005e0a <_printf_float+0x1ba>
 8006052:	f04f 0800 	mov.w	r8, #0
 8006056:	f104 091a 	add.w	r9, r4, #26
 800605a:	e7f2      	b.n	8006042 <_printf_float+0x3f2>
 800605c:	2301      	movs	r3, #1
 800605e:	4642      	mov	r2, r8
 8006060:	e7df      	b.n	8006022 <_printf_float+0x3d2>
 8006062:	2301      	movs	r3, #1
 8006064:	464a      	mov	r2, r9
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f ae3d 	beq.w	8005cec <_printf_float+0x9c>
 8006072:	f108 0801 	add.w	r8, r8, #1
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	4543      	cmp	r3, r8
 800607e:	dcf0      	bgt.n	8006062 <_printf_float+0x412>
 8006080:	e6f7      	b.n	8005e72 <_printf_float+0x222>
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	f104 0919 	add.w	r9, r4, #25
 800608a:	e7f4      	b.n	8006076 <_printf_float+0x426>

0800608c <_printf_common>:
 800608c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	4616      	mov	r6, r2
 8006092:	4699      	mov	r9, r3
 8006094:	688a      	ldr	r2, [r1, #8]
 8006096:	690b      	ldr	r3, [r1, #16]
 8006098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800609c:	4293      	cmp	r3, r2
 800609e:	bfb8      	it	lt
 80060a0:	4613      	movlt	r3, r2
 80060a2:	6033      	str	r3, [r6, #0]
 80060a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060a8:	4607      	mov	r7, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	b10a      	cbz	r2, 80060b2 <_printf_common+0x26>
 80060ae:	3301      	adds	r3, #1
 80060b0:	6033      	str	r3, [r6, #0]
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	0699      	lsls	r1, r3, #26
 80060b6:	bf42      	ittt	mi
 80060b8:	6833      	ldrmi	r3, [r6, #0]
 80060ba:	3302      	addmi	r3, #2
 80060bc:	6033      	strmi	r3, [r6, #0]
 80060be:	6825      	ldr	r5, [r4, #0]
 80060c0:	f015 0506 	ands.w	r5, r5, #6
 80060c4:	d106      	bne.n	80060d4 <_printf_common+0x48>
 80060c6:	f104 0a19 	add.w	sl, r4, #25
 80060ca:	68e3      	ldr	r3, [r4, #12]
 80060cc:	6832      	ldr	r2, [r6, #0]
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	dc26      	bgt.n	8006122 <_printf_common+0x96>
 80060d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060d8:	1e13      	subs	r3, r2, #0
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	bf18      	it	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	0692      	lsls	r2, r2, #26
 80060e2:	d42b      	bmi.n	800613c <_printf_common+0xb0>
 80060e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e8:	4649      	mov	r1, r9
 80060ea:	4638      	mov	r0, r7
 80060ec:	47c0      	blx	r8
 80060ee:	3001      	adds	r0, #1
 80060f0:	d01e      	beq.n	8006130 <_printf_common+0xa4>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	68e5      	ldr	r5, [r4, #12]
 80060f6:	6832      	ldr	r2, [r6, #0]
 80060f8:	f003 0306 	and.w	r3, r3, #6
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	bf08      	it	eq
 8006100:	1aad      	subeq	r5, r5, r2
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	6922      	ldr	r2, [r4, #16]
 8006106:	bf0c      	ite	eq
 8006108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800610c:	2500      	movne	r5, #0
 800610e:	4293      	cmp	r3, r2
 8006110:	bfc4      	itt	gt
 8006112:	1a9b      	subgt	r3, r3, r2
 8006114:	18ed      	addgt	r5, r5, r3
 8006116:	2600      	movs	r6, #0
 8006118:	341a      	adds	r4, #26
 800611a:	42b5      	cmp	r5, r6
 800611c:	d11a      	bne.n	8006154 <_printf_common+0xc8>
 800611e:	2000      	movs	r0, #0
 8006120:	e008      	b.n	8006134 <_printf_common+0xa8>
 8006122:	2301      	movs	r3, #1
 8006124:	4652      	mov	r2, sl
 8006126:	4649      	mov	r1, r9
 8006128:	4638      	mov	r0, r7
 800612a:	47c0      	blx	r8
 800612c:	3001      	adds	r0, #1
 800612e:	d103      	bne.n	8006138 <_printf_common+0xac>
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006138:	3501      	adds	r5, #1
 800613a:	e7c6      	b.n	80060ca <_printf_common+0x3e>
 800613c:	18e1      	adds	r1, r4, r3
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	2030      	movs	r0, #48	; 0x30
 8006142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006146:	4422      	add	r2, r4
 8006148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800614c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006150:	3302      	adds	r3, #2
 8006152:	e7c7      	b.n	80060e4 <_printf_common+0x58>
 8006154:	2301      	movs	r3, #1
 8006156:	4622      	mov	r2, r4
 8006158:	4649      	mov	r1, r9
 800615a:	4638      	mov	r0, r7
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d0e6      	beq.n	8006130 <_printf_common+0xa4>
 8006162:	3601      	adds	r6, #1
 8006164:	e7d9      	b.n	800611a <_printf_common+0x8e>
	...

08006168 <_printf_i>:
 8006168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	460c      	mov	r4, r1
 800616e:	4691      	mov	r9, r2
 8006170:	7e27      	ldrb	r7, [r4, #24]
 8006172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4680      	mov	r8, r0
 8006178:	469a      	mov	sl, r3
 800617a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800617e:	d807      	bhi.n	8006190 <_printf_i+0x28>
 8006180:	2f62      	cmp	r7, #98	; 0x62
 8006182:	d80a      	bhi.n	800619a <_printf_i+0x32>
 8006184:	2f00      	cmp	r7, #0
 8006186:	f000 80d8 	beq.w	800633a <_printf_i+0x1d2>
 800618a:	2f58      	cmp	r7, #88	; 0x58
 800618c:	f000 80a3 	beq.w	80062d6 <_printf_i+0x16e>
 8006190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006198:	e03a      	b.n	8006210 <_printf_i+0xa8>
 800619a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800619e:	2b15      	cmp	r3, #21
 80061a0:	d8f6      	bhi.n	8006190 <_printf_i+0x28>
 80061a2:	a001      	add	r0, pc, #4	; (adr r0, 80061a8 <_printf_i+0x40>)
 80061a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061a8:	08006201 	.word	0x08006201
 80061ac:	08006215 	.word	0x08006215
 80061b0:	08006191 	.word	0x08006191
 80061b4:	08006191 	.word	0x08006191
 80061b8:	08006191 	.word	0x08006191
 80061bc:	08006191 	.word	0x08006191
 80061c0:	08006215 	.word	0x08006215
 80061c4:	08006191 	.word	0x08006191
 80061c8:	08006191 	.word	0x08006191
 80061cc:	08006191 	.word	0x08006191
 80061d0:	08006191 	.word	0x08006191
 80061d4:	08006321 	.word	0x08006321
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006303 	.word	0x08006303
 80061e0:	08006191 	.word	0x08006191
 80061e4:	08006191 	.word	0x08006191
 80061e8:	08006343 	.word	0x08006343
 80061ec:	08006191 	.word	0x08006191
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006191 	.word	0x08006191
 80061f8:	08006191 	.word	0x08006191
 80061fc:	0800630b 	.word	0x0800630b
 8006200:	680b      	ldr	r3, [r1, #0]
 8006202:	1d1a      	adds	r2, r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	600a      	str	r2, [r1, #0]
 8006208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800620c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006210:	2301      	movs	r3, #1
 8006212:	e0a3      	b.n	800635c <_printf_i+0x1f4>
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	6808      	ldr	r0, [r1, #0]
 8006218:	062e      	lsls	r6, r5, #24
 800621a:	f100 0304 	add.w	r3, r0, #4
 800621e:	d50a      	bpl.n	8006236 <_printf_i+0xce>
 8006220:	6805      	ldr	r5, [r0, #0]
 8006222:	600b      	str	r3, [r1, #0]
 8006224:	2d00      	cmp	r5, #0
 8006226:	da03      	bge.n	8006230 <_printf_i+0xc8>
 8006228:	232d      	movs	r3, #45	; 0x2d
 800622a:	426d      	negs	r5, r5
 800622c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006230:	485e      	ldr	r0, [pc, #376]	; (80063ac <_printf_i+0x244>)
 8006232:	230a      	movs	r3, #10
 8006234:	e019      	b.n	800626a <_printf_i+0x102>
 8006236:	f015 0f40 	tst.w	r5, #64	; 0x40
 800623a:	6805      	ldr	r5, [r0, #0]
 800623c:	600b      	str	r3, [r1, #0]
 800623e:	bf18      	it	ne
 8006240:	b22d      	sxthne	r5, r5
 8006242:	e7ef      	b.n	8006224 <_printf_i+0xbc>
 8006244:	680b      	ldr	r3, [r1, #0]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	1d18      	adds	r0, r3, #4
 800624a:	6008      	str	r0, [r1, #0]
 800624c:	0628      	lsls	r0, r5, #24
 800624e:	d501      	bpl.n	8006254 <_printf_i+0xec>
 8006250:	681d      	ldr	r5, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0xf2>
 8006254:	0669      	lsls	r1, r5, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0xe8>
 8006258:	881d      	ldrh	r5, [r3, #0]
 800625a:	4854      	ldr	r0, [pc, #336]	; (80063ac <_printf_i+0x244>)
 800625c:	2f6f      	cmp	r7, #111	; 0x6f
 800625e:	bf0c      	ite	eq
 8006260:	2308      	moveq	r3, #8
 8006262:	230a      	movne	r3, #10
 8006264:	2100      	movs	r1, #0
 8006266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626a:	6866      	ldr	r6, [r4, #4]
 800626c:	60a6      	str	r6, [r4, #8]
 800626e:	2e00      	cmp	r6, #0
 8006270:	bfa2      	ittt	ge
 8006272:	6821      	ldrge	r1, [r4, #0]
 8006274:	f021 0104 	bicge.w	r1, r1, #4
 8006278:	6021      	strge	r1, [r4, #0]
 800627a:	b90d      	cbnz	r5, 8006280 <_printf_i+0x118>
 800627c:	2e00      	cmp	r6, #0
 800627e:	d04d      	beq.n	800631c <_printf_i+0x1b4>
 8006280:	4616      	mov	r6, r2
 8006282:	fbb5 f1f3 	udiv	r1, r5, r3
 8006286:	fb03 5711 	mls	r7, r3, r1, r5
 800628a:	5dc7      	ldrb	r7, [r0, r7]
 800628c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006290:	462f      	mov	r7, r5
 8006292:	42bb      	cmp	r3, r7
 8006294:	460d      	mov	r5, r1
 8006296:	d9f4      	bls.n	8006282 <_printf_i+0x11a>
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10b      	bne.n	80062b4 <_printf_i+0x14c>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07df      	lsls	r7, r3, #31
 80062a0:	d508      	bpl.n	80062b4 <_printf_i+0x14c>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6861      	ldr	r1, [r4, #4]
 80062a6:	4299      	cmp	r1, r3
 80062a8:	bfde      	ittt	le
 80062aa:	2330      	movle	r3, #48	; 0x30
 80062ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062b4:	1b92      	subs	r2, r2, r6
 80062b6:	6122      	str	r2, [r4, #16]
 80062b8:	f8cd a000 	str.w	sl, [sp]
 80062bc:	464b      	mov	r3, r9
 80062be:	aa03      	add	r2, sp, #12
 80062c0:	4621      	mov	r1, r4
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7ff fee2 	bl	800608c <_printf_common>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d14c      	bne.n	8006366 <_printf_i+0x1fe>
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	b004      	add	sp, #16
 80062d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d6:	4835      	ldr	r0, [pc, #212]	; (80063ac <_printf_i+0x244>)
 80062d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	680e      	ldr	r6, [r1, #0]
 80062e0:	061f      	lsls	r7, r3, #24
 80062e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80062e6:	600e      	str	r6, [r1, #0]
 80062e8:	d514      	bpl.n	8006314 <_printf_i+0x1ac>
 80062ea:	07d9      	lsls	r1, r3, #31
 80062ec:	bf44      	itt	mi
 80062ee:	f043 0320 	orrmi.w	r3, r3, #32
 80062f2:	6023      	strmi	r3, [r4, #0]
 80062f4:	b91d      	cbnz	r5, 80062fe <_printf_i+0x196>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f023 0320 	bic.w	r3, r3, #32
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	2310      	movs	r3, #16
 8006300:	e7b0      	b.n	8006264 <_printf_i+0xfc>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	f043 0320 	orr.w	r3, r3, #32
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	2378      	movs	r3, #120	; 0x78
 800630c:	4828      	ldr	r0, [pc, #160]	; (80063b0 <_printf_i+0x248>)
 800630e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006312:	e7e3      	b.n	80062dc <_printf_i+0x174>
 8006314:	065e      	lsls	r6, r3, #25
 8006316:	bf48      	it	mi
 8006318:	b2ad      	uxthmi	r5, r5
 800631a:	e7e6      	b.n	80062ea <_printf_i+0x182>
 800631c:	4616      	mov	r6, r2
 800631e:	e7bb      	b.n	8006298 <_printf_i+0x130>
 8006320:	680b      	ldr	r3, [r1, #0]
 8006322:	6826      	ldr	r6, [r4, #0]
 8006324:	6960      	ldr	r0, [r4, #20]
 8006326:	1d1d      	adds	r5, r3, #4
 8006328:	600d      	str	r5, [r1, #0]
 800632a:	0635      	lsls	r5, r6, #24
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	d501      	bpl.n	8006334 <_printf_i+0x1cc>
 8006330:	6018      	str	r0, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0x1d2>
 8006334:	0671      	lsls	r1, r6, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0x1c8>
 8006338:	8018      	strh	r0, [r3, #0]
 800633a:	2300      	movs	r3, #0
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	4616      	mov	r6, r2
 8006340:	e7ba      	b.n	80062b8 <_printf_i+0x150>
 8006342:	680b      	ldr	r3, [r1, #0]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	600a      	str	r2, [r1, #0]
 8006348:	681e      	ldr	r6, [r3, #0]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	2100      	movs	r1, #0
 800634e:	4630      	mov	r0, r6
 8006350:	f7f9 ff7e 	bl	8000250 <memchr>
 8006354:	b108      	cbz	r0, 800635a <_printf_i+0x1f2>
 8006356:	1b80      	subs	r0, r0, r6
 8006358:	6060      	str	r0, [r4, #4]
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	2300      	movs	r3, #0
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006364:	e7a8      	b.n	80062b8 <_printf_i+0x150>
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	4632      	mov	r2, r6
 800636a:	4649      	mov	r1, r9
 800636c:	4640      	mov	r0, r8
 800636e:	47d0      	blx	sl
 8006370:	3001      	adds	r0, #1
 8006372:	d0ab      	beq.n	80062cc <_printf_i+0x164>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	d413      	bmi.n	80063a2 <_printf_i+0x23a>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	4298      	cmp	r0, r3
 8006380:	bfb8      	it	lt
 8006382:	4618      	movlt	r0, r3
 8006384:	e7a4      	b.n	80062d0 <_printf_i+0x168>
 8006386:	2301      	movs	r3, #1
 8006388:	4632      	mov	r2, r6
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	47d0      	blx	sl
 8006390:	3001      	adds	r0, #1
 8006392:	d09b      	beq.n	80062cc <_printf_i+0x164>
 8006394:	3501      	adds	r5, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	9903      	ldr	r1, [sp, #12]
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	42ab      	cmp	r3, r5
 800639e:	dcf2      	bgt.n	8006386 <_printf_i+0x21e>
 80063a0:	e7eb      	b.n	800637a <_printf_i+0x212>
 80063a2:	2500      	movs	r5, #0
 80063a4:	f104 0619 	add.w	r6, r4, #25
 80063a8:	e7f5      	b.n	8006396 <_printf_i+0x22e>
 80063aa:	bf00      	nop
 80063ac:	0800b0a0 	.word	0x0800b0a0
 80063b0:	0800b0b1 	.word	0x0800b0b1

080063b4 <_scanf_float>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	b087      	sub	sp, #28
 80063ba:	4617      	mov	r7, r2
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	688b      	ldr	r3, [r1, #8]
 80063c0:	1e5a      	subs	r2, r3, #1
 80063c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063c6:	bf83      	ittte	hi
 80063c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80063cc:	195b      	addhi	r3, r3, r5
 80063ce:	9302      	strhi	r3, [sp, #8]
 80063d0:	2300      	movls	r3, #0
 80063d2:	bf86      	itte	hi
 80063d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063d8:	608b      	strhi	r3, [r1, #8]
 80063da:	9302      	strls	r3, [sp, #8]
 80063dc:	680b      	ldr	r3, [r1, #0]
 80063de:	468b      	mov	fp, r1
 80063e0:	2500      	movs	r5, #0
 80063e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80063ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80063ee:	4680      	mov	r8, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	465e      	mov	r6, fp
 80063f4:	46aa      	mov	sl, r5
 80063f6:	46a9      	mov	r9, r5
 80063f8:	9501      	str	r5, [sp, #4]
 80063fa:	68a2      	ldr	r2, [r4, #8]
 80063fc:	b152      	cbz	r2, 8006414 <_scanf_float+0x60>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b4e      	cmp	r3, #78	; 0x4e
 8006404:	d864      	bhi.n	80064d0 <_scanf_float+0x11c>
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d83c      	bhi.n	8006484 <_scanf_float+0xd0>
 800640a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800640e:	b2c8      	uxtb	r0, r1
 8006410:	280e      	cmp	r0, #14
 8006412:	d93a      	bls.n	800648a <_scanf_float+0xd6>
 8006414:	f1b9 0f00 	cmp.w	r9, #0
 8006418:	d003      	beq.n	8006422 <_scanf_float+0x6e>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006426:	f1ba 0f01 	cmp.w	sl, #1
 800642a:	f200 8113 	bhi.w	8006654 <_scanf_float+0x2a0>
 800642e:	455e      	cmp	r6, fp
 8006430:	f200 8105 	bhi.w	800663e <_scanf_float+0x28a>
 8006434:	2501      	movs	r5, #1
 8006436:	4628      	mov	r0, r5
 8006438:	b007      	add	sp, #28
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006442:	2a0d      	cmp	r2, #13
 8006444:	d8e6      	bhi.n	8006414 <_scanf_float+0x60>
 8006446:	a101      	add	r1, pc, #4	; (adr r1, 800644c <_scanf_float+0x98>)
 8006448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800644c:	0800658b 	.word	0x0800658b
 8006450:	08006415 	.word	0x08006415
 8006454:	08006415 	.word	0x08006415
 8006458:	08006415 	.word	0x08006415
 800645c:	080065eb 	.word	0x080065eb
 8006460:	080065c3 	.word	0x080065c3
 8006464:	08006415 	.word	0x08006415
 8006468:	08006415 	.word	0x08006415
 800646c:	08006599 	.word	0x08006599
 8006470:	08006415 	.word	0x08006415
 8006474:	08006415 	.word	0x08006415
 8006478:	08006415 	.word	0x08006415
 800647c:	08006415 	.word	0x08006415
 8006480:	08006551 	.word	0x08006551
 8006484:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006488:	e7db      	b.n	8006442 <_scanf_float+0x8e>
 800648a:	290e      	cmp	r1, #14
 800648c:	d8c2      	bhi.n	8006414 <_scanf_float+0x60>
 800648e:	a001      	add	r0, pc, #4	; (adr r0, 8006494 <_scanf_float+0xe0>)
 8006490:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006494:	08006543 	.word	0x08006543
 8006498:	08006415 	.word	0x08006415
 800649c:	08006543 	.word	0x08006543
 80064a0:	080065d7 	.word	0x080065d7
 80064a4:	08006415 	.word	0x08006415
 80064a8:	080064f1 	.word	0x080064f1
 80064ac:	0800652d 	.word	0x0800652d
 80064b0:	0800652d 	.word	0x0800652d
 80064b4:	0800652d 	.word	0x0800652d
 80064b8:	0800652d 	.word	0x0800652d
 80064bc:	0800652d 	.word	0x0800652d
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	0800652d 	.word	0x0800652d
 80064c8:	0800652d 	.word	0x0800652d
 80064cc:	0800652d 	.word	0x0800652d
 80064d0:	2b6e      	cmp	r3, #110	; 0x6e
 80064d2:	d809      	bhi.n	80064e8 <_scanf_float+0x134>
 80064d4:	2b60      	cmp	r3, #96	; 0x60
 80064d6:	d8b2      	bhi.n	800643e <_scanf_float+0x8a>
 80064d8:	2b54      	cmp	r3, #84	; 0x54
 80064da:	d077      	beq.n	80065cc <_scanf_float+0x218>
 80064dc:	2b59      	cmp	r3, #89	; 0x59
 80064de:	d199      	bne.n	8006414 <_scanf_float+0x60>
 80064e0:	2d07      	cmp	r5, #7
 80064e2:	d197      	bne.n	8006414 <_scanf_float+0x60>
 80064e4:	2508      	movs	r5, #8
 80064e6:	e029      	b.n	800653c <_scanf_float+0x188>
 80064e8:	2b74      	cmp	r3, #116	; 0x74
 80064ea:	d06f      	beq.n	80065cc <_scanf_float+0x218>
 80064ec:	2b79      	cmp	r3, #121	; 0x79
 80064ee:	e7f6      	b.n	80064de <_scanf_float+0x12a>
 80064f0:	6821      	ldr	r1, [r4, #0]
 80064f2:	05c8      	lsls	r0, r1, #23
 80064f4:	d51a      	bpl.n	800652c <_scanf_float+0x178>
 80064f6:	9b02      	ldr	r3, [sp, #8]
 80064f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064fc:	6021      	str	r1, [r4, #0]
 80064fe:	f109 0901 	add.w	r9, r9, #1
 8006502:	b11b      	cbz	r3, 800650c <_scanf_float+0x158>
 8006504:	3b01      	subs	r3, #1
 8006506:	3201      	adds	r2, #1
 8006508:	9302      	str	r3, [sp, #8]
 800650a:	60a2      	str	r2, [r4, #8]
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	3301      	adds	r3, #1
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3b01      	subs	r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	f340 8084 	ble.w	800662c <_scanf_float+0x278>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	e766      	b.n	80063fa <_scanf_float+0x46>
 800652c:	eb1a 0f05 	cmn.w	sl, r5
 8006530:	f47f af70 	bne.w	8006414 <_scanf_float+0x60>
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800653a:	6022      	str	r2, [r4, #0]
 800653c:	f806 3b01 	strb.w	r3, [r6], #1
 8006540:	e7e4      	b.n	800650c <_scanf_float+0x158>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	0610      	lsls	r0, r2, #24
 8006546:	f57f af65 	bpl.w	8006414 <_scanf_float+0x60>
 800654a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800654e:	e7f4      	b.n	800653a <_scanf_float+0x186>
 8006550:	f1ba 0f00 	cmp.w	sl, #0
 8006554:	d10e      	bne.n	8006574 <_scanf_float+0x1c0>
 8006556:	f1b9 0f00 	cmp.w	r9, #0
 800655a:	d10e      	bne.n	800657a <_scanf_float+0x1c6>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006562:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006566:	d108      	bne.n	800657a <_scanf_float+0x1c6>
 8006568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	f04f 0a01 	mov.w	sl, #1
 8006572:	e7e3      	b.n	800653c <_scanf_float+0x188>
 8006574:	f1ba 0f02 	cmp.w	sl, #2
 8006578:	d055      	beq.n	8006626 <_scanf_float+0x272>
 800657a:	2d01      	cmp	r5, #1
 800657c:	d002      	beq.n	8006584 <_scanf_float+0x1d0>
 800657e:	2d04      	cmp	r5, #4
 8006580:	f47f af48 	bne.w	8006414 <_scanf_float+0x60>
 8006584:	3501      	adds	r5, #1
 8006586:	b2ed      	uxtb	r5, r5
 8006588:	e7d8      	b.n	800653c <_scanf_float+0x188>
 800658a:	f1ba 0f01 	cmp.w	sl, #1
 800658e:	f47f af41 	bne.w	8006414 <_scanf_float+0x60>
 8006592:	f04f 0a02 	mov.w	sl, #2
 8006596:	e7d1      	b.n	800653c <_scanf_float+0x188>
 8006598:	b97d      	cbnz	r5, 80065ba <_scanf_float+0x206>
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	f47f af3c 	bne.w	800641a <_scanf_float+0x66>
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065ac:	f47f af39 	bne.w	8006422 <_scanf_float+0x6e>
 80065b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	2501      	movs	r5, #1
 80065b8:	e7c0      	b.n	800653c <_scanf_float+0x188>
 80065ba:	2d03      	cmp	r5, #3
 80065bc:	d0e2      	beq.n	8006584 <_scanf_float+0x1d0>
 80065be:	2d05      	cmp	r5, #5
 80065c0:	e7de      	b.n	8006580 <_scanf_float+0x1cc>
 80065c2:	2d02      	cmp	r5, #2
 80065c4:	f47f af26 	bne.w	8006414 <_scanf_float+0x60>
 80065c8:	2503      	movs	r5, #3
 80065ca:	e7b7      	b.n	800653c <_scanf_float+0x188>
 80065cc:	2d06      	cmp	r5, #6
 80065ce:	f47f af21 	bne.w	8006414 <_scanf_float+0x60>
 80065d2:	2507      	movs	r5, #7
 80065d4:	e7b2      	b.n	800653c <_scanf_float+0x188>
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	0591      	lsls	r1, r2, #22
 80065da:	f57f af1b 	bpl.w	8006414 <_scanf_float+0x60>
 80065de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80065e8:	e7a8      	b.n	800653c <_scanf_float+0x188>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80065f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80065f4:	d006      	beq.n	8006604 <_scanf_float+0x250>
 80065f6:	0550      	lsls	r0, r2, #21
 80065f8:	f57f af0c 	bpl.w	8006414 <_scanf_float+0x60>
 80065fc:	f1b9 0f00 	cmp.w	r9, #0
 8006600:	f43f af0f 	beq.w	8006422 <_scanf_float+0x6e>
 8006604:	0591      	lsls	r1, r2, #22
 8006606:	bf58      	it	pl
 8006608:	9901      	ldrpl	r1, [sp, #4]
 800660a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800660e:	bf58      	it	pl
 8006610:	eba9 0101 	subpl.w	r1, r9, r1
 8006614:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006618:	bf58      	it	pl
 800661a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800661e:	6022      	str	r2, [r4, #0]
 8006620:	f04f 0900 	mov.w	r9, #0
 8006624:	e78a      	b.n	800653c <_scanf_float+0x188>
 8006626:	f04f 0a03 	mov.w	sl, #3
 800662a:	e787      	b.n	800653c <_scanf_float+0x188>
 800662c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006630:	4639      	mov	r1, r7
 8006632:	4640      	mov	r0, r8
 8006634:	4798      	blx	r3
 8006636:	2800      	cmp	r0, #0
 8006638:	f43f aedf 	beq.w	80063fa <_scanf_float+0x46>
 800663c:	e6ea      	b.n	8006414 <_scanf_float+0x60>
 800663e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006646:	463a      	mov	r2, r7
 8006648:	4640      	mov	r0, r8
 800664a:	4798      	blx	r3
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	3b01      	subs	r3, #1
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	e6ec      	b.n	800642e <_scanf_float+0x7a>
 8006654:	1e6b      	subs	r3, r5, #1
 8006656:	2b06      	cmp	r3, #6
 8006658:	d825      	bhi.n	80066a6 <_scanf_float+0x2f2>
 800665a:	2d02      	cmp	r5, #2
 800665c:	d836      	bhi.n	80066cc <_scanf_float+0x318>
 800665e:	455e      	cmp	r6, fp
 8006660:	f67f aee8 	bls.w	8006434 <_scanf_float+0x80>
 8006664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006668:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800666c:	463a      	mov	r2, r7
 800666e:	4640      	mov	r0, r8
 8006670:	4798      	blx	r3
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	3b01      	subs	r3, #1
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	e7f1      	b.n	800665e <_scanf_float+0x2aa>
 800667a:	9802      	ldr	r0, [sp, #8]
 800667c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006680:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006684:	9002      	str	r0, [sp, #8]
 8006686:	463a      	mov	r2, r7
 8006688:	4640      	mov	r0, r8
 800668a:	4798      	blx	r3
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	3b01      	subs	r3, #1
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006696:	fa5f fa8a 	uxtb.w	sl, sl
 800669a:	f1ba 0f02 	cmp.w	sl, #2
 800669e:	d1ec      	bne.n	800667a <_scanf_float+0x2c6>
 80066a0:	3d03      	subs	r5, #3
 80066a2:	b2ed      	uxtb	r5, r5
 80066a4:	1b76      	subs	r6, r6, r5
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	05da      	lsls	r2, r3, #23
 80066aa:	d52f      	bpl.n	800670c <_scanf_float+0x358>
 80066ac:	055b      	lsls	r3, r3, #21
 80066ae:	d510      	bpl.n	80066d2 <_scanf_float+0x31e>
 80066b0:	455e      	cmp	r6, fp
 80066b2:	f67f aebf 	bls.w	8006434 <_scanf_float+0x80>
 80066b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066be:	463a      	mov	r2, r7
 80066c0:	4640      	mov	r0, r8
 80066c2:	4798      	blx	r3
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	e7f1      	b.n	80066b0 <_scanf_float+0x2fc>
 80066cc:	46aa      	mov	sl, r5
 80066ce:	9602      	str	r6, [sp, #8]
 80066d0:	e7df      	b.n	8006692 <_scanf_float+0x2de>
 80066d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	2965      	cmp	r1, #101	; 0x65
 80066da:	f103 33ff 	add.w	r3, r3, #4294967295
 80066de:	f106 35ff 	add.w	r5, r6, #4294967295
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	d00c      	beq.n	8006700 <_scanf_float+0x34c>
 80066e6:	2945      	cmp	r1, #69	; 0x45
 80066e8:	d00a      	beq.n	8006700 <_scanf_float+0x34c>
 80066ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ee:	463a      	mov	r2, r7
 80066f0:	4640      	mov	r0, r8
 80066f2:	4798      	blx	r3
 80066f4:	6923      	ldr	r3, [r4, #16]
 80066f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	1eb5      	subs	r5, r6, #2
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006704:	463a      	mov	r2, r7
 8006706:	4640      	mov	r0, r8
 8006708:	4798      	blx	r3
 800670a:	462e      	mov	r6, r5
 800670c:	6825      	ldr	r5, [r4, #0]
 800670e:	f015 0510 	ands.w	r5, r5, #16
 8006712:	d14d      	bne.n	80067b0 <_scanf_float+0x3fc>
 8006714:	7035      	strb	r5, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d11a      	bne.n	8006758 <_scanf_float+0x3a4>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	454b      	cmp	r3, r9
 8006726:	eba3 0209 	sub.w	r2, r3, r9
 800672a:	d122      	bne.n	8006772 <_scanf_float+0x3be>
 800672c:	2200      	movs	r2, #0
 800672e:	4659      	mov	r1, fp
 8006730:	4640      	mov	r0, r8
 8006732:	f000 feef 	bl	8007514 <_strtod_r>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f011 0f02 	tst.w	r1, #2
 8006740:	f103 0204 	add.w	r2, r3, #4
 8006744:	d020      	beq.n	8006788 <_scanf_float+0x3d4>
 8006746:	9903      	ldr	r1, [sp, #12]
 8006748:	600a      	str	r2, [r1, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	ed83 0b00 	vstr	d0, [r3]
 8006750:	68e3      	ldr	r3, [r4, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60e3      	str	r3, [r4, #12]
 8006756:	e66e      	b.n	8006436 <_scanf_float+0x82>
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0e6      	beq.n	800672c <_scanf_float+0x378>
 800675e:	9905      	ldr	r1, [sp, #20]
 8006760:	230a      	movs	r3, #10
 8006762:	462a      	mov	r2, r5
 8006764:	3101      	adds	r1, #1
 8006766:	4640      	mov	r0, r8
 8006768:	f000 ff5e 	bl	8007628 <_strtol_r>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	9e05      	ldr	r6, [sp, #20]
 8006770:	1ac2      	subs	r2, r0, r3
 8006772:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006776:	429e      	cmp	r6, r3
 8006778:	bf28      	it	cs
 800677a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800677e:	490d      	ldr	r1, [pc, #52]	; (80067b4 <_scanf_float+0x400>)
 8006780:	4630      	mov	r0, r6
 8006782:	f000 f821 	bl	80067c8 <siprintf>
 8006786:	e7d1      	b.n	800672c <_scanf_float+0x378>
 8006788:	f011 0f04 	tst.w	r1, #4
 800678c:	9903      	ldr	r1, [sp, #12]
 800678e:	600a      	str	r2, [r1, #0]
 8006790:	d1db      	bne.n	800674a <_scanf_float+0x396>
 8006792:	eeb4 0b40 	vcmp.f64	d0, d0
 8006796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679a:	681e      	ldr	r6, [r3, #0]
 800679c:	d705      	bvc.n	80067aa <_scanf_float+0x3f6>
 800679e:	4806      	ldr	r0, [pc, #24]	; (80067b8 <_scanf_float+0x404>)
 80067a0:	f000 f80c 	bl	80067bc <nanf>
 80067a4:	ed86 0a00 	vstr	s0, [r6]
 80067a8:	e7d2      	b.n	8006750 <_scanf_float+0x39c>
 80067aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80067ae:	e7f9      	b.n	80067a4 <_scanf_float+0x3f0>
 80067b0:	2500      	movs	r5, #0
 80067b2:	e640      	b.n	8006436 <_scanf_float+0x82>
 80067b4:	0800b0c2 	.word	0x0800b0c2
 80067b8:	0800b4f3 	.word	0x0800b4f3

080067bc <nanf>:
 80067bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067c4 <nanf+0x8>
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	7fc00000 	.word	0x7fc00000

080067c8 <siprintf>:
 80067c8:	b40e      	push	{r1, r2, r3}
 80067ca:	b500      	push	{lr}
 80067cc:	b09c      	sub	sp, #112	; 0x70
 80067ce:	ab1d      	add	r3, sp, #116	; 0x74
 80067d0:	9002      	str	r0, [sp, #8]
 80067d2:	9006      	str	r0, [sp, #24]
 80067d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d8:	4809      	ldr	r0, [pc, #36]	; (8006800 <siprintf+0x38>)
 80067da:	9107      	str	r1, [sp, #28]
 80067dc:	9104      	str	r1, [sp, #16]
 80067de:	4909      	ldr	r1, [pc, #36]	; (8006804 <siprintf+0x3c>)
 80067e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	a902      	add	r1, sp, #8
 80067ec:	f002 fece 	bl	800958c <_svfiprintf_r>
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	b01c      	add	sp, #112	; 0x70
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b003      	add	sp, #12
 80067fe:	4770      	bx	lr
 8006800:	20000038 	.word	0x20000038
 8006804:	ffff0208 	.word	0xffff0208

08006808 <siscanf>:
 8006808:	b40e      	push	{r1, r2, r3}
 800680a:	b510      	push	{r4, lr}
 800680c:	b09f      	sub	sp, #124	; 0x7c
 800680e:	ac21      	add	r4, sp, #132	; 0x84
 8006810:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006814:	f854 2b04 	ldr.w	r2, [r4], #4
 8006818:	9201      	str	r2, [sp, #4]
 800681a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800681e:	9004      	str	r0, [sp, #16]
 8006820:	9008      	str	r0, [sp, #32]
 8006822:	f7f9 fd0d 	bl	8000240 <strlen>
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <siscanf+0x50>)
 8006828:	9005      	str	r0, [sp, #20]
 800682a:	9009      	str	r0, [sp, #36]	; 0x24
 800682c:	930d      	str	r3, [sp, #52]	; 0x34
 800682e:	480b      	ldr	r0, [pc, #44]	; (800685c <siscanf+0x54>)
 8006830:	9a01      	ldr	r2, [sp, #4]
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	9403      	str	r4, [sp, #12]
 8006836:	2300      	movs	r3, #0
 8006838:	9311      	str	r3, [sp, #68]	; 0x44
 800683a:	9316      	str	r3, [sp, #88]	; 0x58
 800683c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006840:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006844:	a904      	add	r1, sp, #16
 8006846:	4623      	mov	r3, r4
 8006848:	f002 fffa 	bl	8009840 <__ssvfiscanf_r>
 800684c:	b01f      	add	sp, #124	; 0x7c
 800684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006852:	b003      	add	sp, #12
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	08006883 	.word	0x08006883
 800685c:	20000038 	.word	0x20000038

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f003 faae 	bl	8009dc8 <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	; 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__seofread>:
 8006882:	2000      	movs	r0, #0
 8006884:	4770      	bx	lr

08006886 <__swrite>:
 8006886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688a:	461f      	mov	r7, r3
 800688c:	898b      	ldrh	r3, [r1, #12]
 800688e:	05db      	lsls	r3, r3, #23
 8006890:	4605      	mov	r5, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4616      	mov	r6, r2
 8006896:	d505      	bpl.n	80068a4 <__swrite+0x1e>
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	2302      	movs	r3, #2
 800689e:	2200      	movs	r2, #0
 80068a0:	f002 f868 	bl	8008974 <_lseek_r>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	4632      	mov	r2, r6
 80068b2:	463b      	mov	r3, r7
 80068b4:	4628      	mov	r0, r5
 80068b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	f000 beb7 	b.w	800762c <_write_r>

080068be <__sseek>:
 80068be:	b510      	push	{r4, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f002 f855 	bl	8008974 <_lseek_r>
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	bf15      	itete	ne
 80068d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068da:	81a3      	strheq	r3, [r4, #12]
 80068dc:	bf18      	it	ne
 80068de:	81a3      	strhne	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__sclose>:
 80068e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e6:	f000 beb3 	b.w	8007650 <_close_r>

080068ea <strncmp>:
 80068ea:	b510      	push	{r4, lr}
 80068ec:	b16a      	cbz	r2, 800690a <strncmp+0x20>
 80068ee:	3901      	subs	r1, #1
 80068f0:	1884      	adds	r4, r0, r2
 80068f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d103      	bne.n	8006906 <strncmp+0x1c>
 80068fe:	42a0      	cmp	r0, r4
 8006900:	d001      	beq.n	8006906 <strncmp+0x1c>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f5      	bne.n	80068f2 <strncmp+0x8>
 8006906:	1a98      	subs	r0, r3, r2
 8006908:	bd10      	pop	{r4, pc}
 800690a:	4610      	mov	r0, r2
 800690c:	e7fc      	b.n	8006908 <strncmp+0x1e>

0800690e <strncpy>:
 800690e:	b510      	push	{r4, lr}
 8006910:	3901      	subs	r1, #1
 8006912:	4603      	mov	r3, r0
 8006914:	b132      	cbz	r2, 8006924 <strncpy+0x16>
 8006916:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800691a:	f803 4b01 	strb.w	r4, [r3], #1
 800691e:	3a01      	subs	r2, #1
 8006920:	2c00      	cmp	r4, #0
 8006922:	d1f7      	bne.n	8006914 <strncpy+0x6>
 8006924:	441a      	add	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	4293      	cmp	r3, r2
 800692a:	d100      	bne.n	800692e <strncpy+0x20>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	f803 1b01 	strb.w	r1, [r3], #1
 8006932:	e7f9      	b.n	8006928 <strncpy+0x1a>

08006934 <sulp>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4604      	mov	r4, r0
 8006938:	460d      	mov	r5, r1
 800693a:	4616      	mov	r6, r2
 800693c:	ec45 4b10 	vmov	d0, r4, r5
 8006940:	f002 fbbe 	bl	80090c0 <__ulp>
 8006944:	b17e      	cbz	r6, 8006966 <sulp+0x32>
 8006946:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800694a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800694e:	2b00      	cmp	r3, #0
 8006950:	dd09      	ble.n	8006966 <sulp+0x32>
 8006952:	051b      	lsls	r3, r3, #20
 8006954:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006958:	2000      	movs	r0, #0
 800695a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800695e:	ec41 0b17 	vmov	d7, r0, r1
 8006962:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006966:	bd70      	pop	{r4, r5, r6, pc}

08006968 <_strtod_l>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	ed2d 8b0c 	vpush	{d8-d13}
 8006970:	b09d      	sub	sp, #116	; 0x74
 8006972:	461f      	mov	r7, r3
 8006974:	2300      	movs	r3, #0
 8006976:	9318      	str	r3, [sp, #96]	; 0x60
 8006978:	4ba6      	ldr	r3, [pc, #664]	; (8006c14 <_strtod_l+0x2ac>)
 800697a:	9213      	str	r2, [sp, #76]	; 0x4c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	9308      	str	r3, [sp, #32]
 8006980:	4604      	mov	r4, r0
 8006982:	4618      	mov	r0, r3
 8006984:	468a      	mov	sl, r1
 8006986:	f7f9 fc5b 	bl	8000240 <strlen>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	4605      	mov	r5, r0
 8006990:	f04f 0900 	mov.w	r9, #0
 8006994:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	2a2b      	cmp	r2, #43	; 0x2b
 800699e:	d04d      	beq.n	8006a3c <_strtod_l+0xd4>
 80069a0:	d83a      	bhi.n	8006a18 <_strtod_l+0xb0>
 80069a2:	2a0d      	cmp	r2, #13
 80069a4:	d833      	bhi.n	8006a0e <_strtod_l+0xa6>
 80069a6:	2a08      	cmp	r2, #8
 80069a8:	d833      	bhi.n	8006a12 <_strtod_l+0xaa>
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d03d      	beq.n	8006a2a <_strtod_l+0xc2>
 80069ae:	2300      	movs	r3, #0
 80069b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80069b4:	7833      	ldrb	r3, [r6, #0]
 80069b6:	2b30      	cmp	r3, #48	; 0x30
 80069b8:	f040 80b6 	bne.w	8006b28 <_strtod_l+0x1c0>
 80069bc:	7873      	ldrb	r3, [r6, #1]
 80069be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069c2:	2b58      	cmp	r3, #88	; 0x58
 80069c4:	d16d      	bne.n	8006aa2 <_strtod_l+0x13a>
 80069c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	ab18      	add	r3, sp, #96	; 0x60
 80069cc:	9702      	str	r7, [sp, #8]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4a91      	ldr	r2, [pc, #580]	; (8006c18 <_strtod_l+0x2b0>)
 80069d2:	ab19      	add	r3, sp, #100	; 0x64
 80069d4:	a917      	add	r1, sp, #92	; 0x5c
 80069d6:	4620      	mov	r0, r4
 80069d8:	f001 fcc0 	bl	800835c <__gethex>
 80069dc:	f010 0507 	ands.w	r5, r0, #7
 80069e0:	4607      	mov	r7, r0
 80069e2:	d005      	beq.n	80069f0 <_strtod_l+0x88>
 80069e4:	2d06      	cmp	r5, #6
 80069e6:	d12b      	bne.n	8006a40 <_strtod_l+0xd8>
 80069e8:	3601      	adds	r6, #1
 80069ea:	2300      	movs	r3, #0
 80069ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80069ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 856e 	bne.w	80074d4 <_strtod_l+0xb6c>
 80069f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fa:	b1e3      	cbz	r3, 8006a36 <_strtod_l+0xce>
 80069fc:	ec49 8b17 	vmov	d7, r8, r9
 8006a00:	eeb1 0b47 	vneg.f64	d0, d7
 8006a04:	b01d      	add	sp, #116	; 0x74
 8006a06:	ecbd 8b0c 	vpop	{d8-d13}
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	2a20      	cmp	r2, #32
 8006a10:	d1cd      	bne.n	80069ae <_strtod_l+0x46>
 8006a12:	3301      	adds	r3, #1
 8006a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a16:	e7bf      	b.n	8006998 <_strtod_l+0x30>
 8006a18:	2a2d      	cmp	r2, #45	; 0x2d
 8006a1a:	d1c8      	bne.n	80069ae <_strtod_l+0x46>
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1c3      	bne.n	80069b2 <_strtod_l+0x4a>
 8006a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a2c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 854d 	bne.w	80074d0 <_strtod_l+0xb68>
 8006a36:	ec49 8b10 	vmov	d0, r8, r9
 8006a3a:	e7e3      	b.n	8006a04 <_strtod_l+0x9c>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	e7ee      	b.n	8006a1e <_strtod_l+0xb6>
 8006a40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a42:	b13a      	cbz	r2, 8006a54 <_strtod_l+0xec>
 8006a44:	2135      	movs	r1, #53	; 0x35
 8006a46:	a81a      	add	r0, sp, #104	; 0x68
 8006a48:	f002 fc46 	bl	80092d8 <__copybits>
 8006a4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f002 f80a 	bl	8008a68 <_Bfree>
 8006a54:	3d01      	subs	r5, #1
 8006a56:	2d05      	cmp	r5, #5
 8006a58:	d807      	bhi.n	8006a6a <_strtod_l+0x102>
 8006a5a:	e8df f005 	tbb	[pc, r5]
 8006a5e:	0b0e      	.short	0x0b0e
 8006a60:	030e1d18 	.word	0x030e1d18
 8006a64:	f04f 0900 	mov.w	r9, #0
 8006a68:	46c8      	mov	r8, r9
 8006a6a:	073b      	lsls	r3, r7, #28
 8006a6c:	d5c0      	bpl.n	80069f0 <_strtod_l+0x88>
 8006a6e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006a72:	e7bd      	b.n	80069f0 <_strtod_l+0x88>
 8006a74:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006a78:	e7f7      	b.n	8006a6a <_strtod_l+0x102>
 8006a7a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006a7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006a8c:	e7ed      	b.n	8006a6a <_strtod_l+0x102>
 8006a8e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006c1c <_strtod_l+0x2b4>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	e7e8      	b.n	8006a6a <_strtod_l+0x102>
 8006a98:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a9c:	f04f 38ff 	mov.w	r8, #4294967295
 8006aa0:	e7e3      	b.n	8006a6a <_strtod_l+0x102>
 8006aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b30      	cmp	r3, #48	; 0x30
 8006aac:	d0f9      	beq.n	8006aa2 <_strtod_l+0x13a>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d09e      	beq.n	80069f0 <_strtod_l+0x88>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9306      	str	r3, [sp, #24]
 8006ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8006aba:	2300      	movs	r3, #0
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac0:	461e      	mov	r6, r3
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ac6:	f890 b000 	ldrb.w	fp, [r0]
 8006aca:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006ace:	b2d9      	uxtb	r1, r3
 8006ad0:	2909      	cmp	r1, #9
 8006ad2:	d92b      	bls.n	8006b2c <_strtod_l+0x1c4>
 8006ad4:	9908      	ldr	r1, [sp, #32]
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	f7ff ff07 	bl	80068ea <strncmp>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d035      	beq.n	8006b4c <_strtod_l+0x1e4>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	465a      	mov	r2, fp
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	4683      	mov	fp, r0
 8006ae8:	4601      	mov	r1, r0
 8006aea:	2a65      	cmp	r2, #101	; 0x65
 8006aec:	d001      	beq.n	8006af2 <_strtod_l+0x18a>
 8006aee:	2a45      	cmp	r2, #69	; 0x45
 8006af0:	d118      	bne.n	8006b24 <_strtod_l+0x1bc>
 8006af2:	b91b      	cbnz	r3, 8006afc <_strtod_l+0x194>
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	4303      	orrs	r3, r0
 8006af8:	d097      	beq.n	8006a2a <_strtod_l+0xc2>
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006b00:	f10a 0201 	add.w	r2, sl, #1
 8006b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b06:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006b0a:	2a2b      	cmp	r2, #43	; 0x2b
 8006b0c:	d077      	beq.n	8006bfe <_strtod_l+0x296>
 8006b0e:	2a2d      	cmp	r2, #45	; 0x2d
 8006b10:	d07d      	beq.n	8006c0e <_strtod_l+0x2a6>
 8006b12:	f04f 0e00 	mov.w	lr, #0
 8006b16:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b1a:	2d09      	cmp	r5, #9
 8006b1c:	f240 8084 	bls.w	8006c28 <_strtod_l+0x2c0>
 8006b20:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006b24:	2500      	movs	r5, #0
 8006b26:	e09f      	b.n	8006c68 <_strtod_l+0x300>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e7c3      	b.n	8006ab4 <_strtod_l+0x14c>
 8006b2c:	2e08      	cmp	r6, #8
 8006b2e:	bfd5      	itete	le
 8006b30:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006b32:	9904      	ldrgt	r1, [sp, #16]
 8006b34:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b3c:	f100 0001 	add.w	r0, r0, #1
 8006b40:	bfd4      	ite	le
 8006b42:	930a      	strle	r3, [sp, #40]	; 0x28
 8006b44:	9304      	strgt	r3, [sp, #16]
 8006b46:	3601      	adds	r6, #1
 8006b48:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b4a:	e7bb      	b.n	8006ac4 <_strtod_l+0x15c>
 8006b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b4e:	195a      	adds	r2, r3, r5
 8006b50:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b52:	5d5a      	ldrb	r2, [r3, r5]
 8006b54:	b3ae      	cbz	r6, 8006bc2 <_strtod_l+0x25a>
 8006b56:	4683      	mov	fp, r0
 8006b58:	4633      	mov	r3, r6
 8006b5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b5e:	2909      	cmp	r1, #9
 8006b60:	d912      	bls.n	8006b88 <_strtod_l+0x220>
 8006b62:	2101      	movs	r1, #1
 8006b64:	e7c1      	b.n	8006aea <_strtod_l+0x182>
 8006b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b6c:	785a      	ldrb	r2, [r3, #1]
 8006b6e:	3001      	adds	r0, #1
 8006b70:	2a30      	cmp	r2, #48	; 0x30
 8006b72:	d0f8      	beq.n	8006b66 <_strtod_l+0x1fe>
 8006b74:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	f200 84b0 	bhi.w	80074de <_strtod_l+0xb76>
 8006b7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b80:	930c      	str	r3, [sp, #48]	; 0x30
 8006b82:	4683      	mov	fp, r0
 8006b84:	2000      	movs	r0, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	3a30      	subs	r2, #48	; 0x30
 8006b8a:	f100 0101 	add.w	r1, r0, #1
 8006b8e:	d012      	beq.n	8006bb6 <_strtod_l+0x24e>
 8006b90:	448b      	add	fp, r1
 8006b92:	eb00 0c03 	add.w	ip, r0, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	250a      	movs	r5, #10
 8006b9a:	4561      	cmp	r1, ip
 8006b9c:	d113      	bne.n	8006bc6 <_strtod_l+0x25e>
 8006b9e:	1819      	adds	r1, r3, r0
 8006ba0:	2908      	cmp	r1, #8
 8006ba2:	f103 0301 	add.w	r3, r3, #1
 8006ba6:	4403      	add	r3, r0
 8006ba8:	dc1d      	bgt.n	8006be6 <_strtod_l+0x27e>
 8006baa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bac:	210a      	movs	r1, #10
 8006bae:	fb01 2200 	mla	r2, r1, r0, r2
 8006bb2:	920a      	str	r2, [sp, #40]	; 0x28
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bb8:	1c50      	adds	r0, r2, #1
 8006bba:	9017      	str	r0, [sp, #92]	; 0x5c
 8006bbc:	7852      	ldrb	r2, [r2, #1]
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	e7cb      	b.n	8006b5a <_strtod_l+0x1f2>
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	e7d4      	b.n	8006b70 <_strtod_l+0x208>
 8006bc6:	2908      	cmp	r1, #8
 8006bc8:	dc04      	bgt.n	8006bd4 <_strtod_l+0x26c>
 8006bca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006bcc:	436f      	muls	r7, r5
 8006bce:	970a      	str	r7, [sp, #40]	; 0x28
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	e7e2      	b.n	8006b9a <_strtod_l+0x232>
 8006bd4:	f101 0e01 	add.w	lr, r1, #1
 8006bd8:	f1be 0f10 	cmp.w	lr, #16
 8006bdc:	bfde      	ittt	le
 8006bde:	9f04      	ldrle	r7, [sp, #16]
 8006be0:	436f      	mulle	r7, r5
 8006be2:	9704      	strle	r7, [sp, #16]
 8006be4:	e7f4      	b.n	8006bd0 <_strtod_l+0x268>
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	bfdf      	itttt	le
 8006bea:	9804      	ldrle	r0, [sp, #16]
 8006bec:	210a      	movle	r1, #10
 8006bee:	fb01 2200 	mlale	r2, r1, r0, r2
 8006bf2:	9204      	strle	r2, [sp, #16]
 8006bf4:	e7de      	b.n	8006bb4 <_strtod_l+0x24c>
 8006bf6:	f04f 0b00 	mov.w	fp, #0
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	e77a      	b.n	8006af4 <_strtod_l+0x18c>
 8006bfe:	f04f 0e00 	mov.w	lr, #0
 8006c02:	f10a 0202 	add.w	r2, sl, #2
 8006c06:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c08:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006c0c:	e783      	b.n	8006b16 <_strtod_l+0x1ae>
 8006c0e:	f04f 0e01 	mov.w	lr, #1
 8006c12:	e7f6      	b.n	8006c02 <_strtod_l+0x29a>
 8006c14:	0800b318 	.word	0x0800b318
 8006c18:	0800b0c8 	.word	0x0800b0c8
 8006c1c:	7ff00000 	.word	0x7ff00000
 8006c20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c22:	1c55      	adds	r5, r2, #1
 8006c24:	9517      	str	r5, [sp, #92]	; 0x5c
 8006c26:	7852      	ldrb	r2, [r2, #1]
 8006c28:	2a30      	cmp	r2, #48	; 0x30
 8006c2a:	d0f9      	beq.n	8006c20 <_strtod_l+0x2b8>
 8006c2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006c30:	2d08      	cmp	r5, #8
 8006c32:	f63f af77 	bhi.w	8006b24 <_strtod_l+0x1bc>
 8006c36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006c3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c3c:	9208      	str	r2, [sp, #32]
 8006c3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c40:	1c55      	adds	r5, r2, #1
 8006c42:	9517      	str	r5, [sp, #92]	; 0x5c
 8006c44:	7852      	ldrb	r2, [r2, #1]
 8006c46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006c4a:	2f09      	cmp	r7, #9
 8006c4c:	d937      	bls.n	8006cbe <_strtod_l+0x356>
 8006c4e:	9f08      	ldr	r7, [sp, #32]
 8006c50:	1bed      	subs	r5, r5, r7
 8006c52:	2d08      	cmp	r5, #8
 8006c54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006c58:	dc02      	bgt.n	8006c60 <_strtod_l+0x2f8>
 8006c5a:	4565      	cmp	r5, ip
 8006c5c:	bfa8      	it	ge
 8006c5e:	4665      	movge	r5, ip
 8006c60:	f1be 0f00 	cmp.w	lr, #0
 8006c64:	d000      	beq.n	8006c68 <_strtod_l+0x300>
 8006c66:	426d      	negs	r5, r5
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d14f      	bne.n	8006d0c <_strtod_l+0x3a4>
 8006c6c:	9b06      	ldr	r3, [sp, #24]
 8006c6e:	4303      	orrs	r3, r0
 8006c70:	f47f aebe 	bne.w	80069f0 <_strtod_l+0x88>
 8006c74:	2900      	cmp	r1, #0
 8006c76:	f47f aed8 	bne.w	8006a2a <_strtod_l+0xc2>
 8006c7a:	2a69      	cmp	r2, #105	; 0x69
 8006c7c:	d027      	beq.n	8006cce <_strtod_l+0x366>
 8006c7e:	dc24      	bgt.n	8006cca <_strtod_l+0x362>
 8006c80:	2a49      	cmp	r2, #73	; 0x49
 8006c82:	d024      	beq.n	8006cce <_strtod_l+0x366>
 8006c84:	2a4e      	cmp	r2, #78	; 0x4e
 8006c86:	f47f aed0 	bne.w	8006a2a <_strtod_l+0xc2>
 8006c8a:	499b      	ldr	r1, [pc, #620]	; (8006ef8 <_strtod_l+0x590>)
 8006c8c:	a817      	add	r0, sp, #92	; 0x5c
 8006c8e:	f001 fdbd 	bl	800880c <__match>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f43f aec9 	beq.w	8006a2a <_strtod_l+0xc2>
 8006c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b28      	cmp	r3, #40	; 0x28
 8006c9e:	d12d      	bne.n	8006cfc <_strtod_l+0x394>
 8006ca0:	4996      	ldr	r1, [pc, #600]	; (8006efc <_strtod_l+0x594>)
 8006ca2:	aa1a      	add	r2, sp, #104	; 0x68
 8006ca4:	a817      	add	r0, sp, #92	; 0x5c
 8006ca6:	f001 fdc5 	bl	8008834 <__hexnan>
 8006caa:	2805      	cmp	r0, #5
 8006cac:	d126      	bne.n	8006cfc <_strtod_l+0x394>
 8006cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006cb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006cb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006cbc:	e698      	b.n	80069f0 <_strtod_l+0x88>
 8006cbe:	250a      	movs	r5, #10
 8006cc0:	fb05 250c 	mla	r5, r5, ip, r2
 8006cc4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006cc8:	e7b9      	b.n	8006c3e <_strtod_l+0x2d6>
 8006cca:	2a6e      	cmp	r2, #110	; 0x6e
 8006ccc:	e7db      	b.n	8006c86 <_strtod_l+0x31e>
 8006cce:	498c      	ldr	r1, [pc, #560]	; (8006f00 <_strtod_l+0x598>)
 8006cd0:	a817      	add	r0, sp, #92	; 0x5c
 8006cd2:	f001 fd9b 	bl	800880c <__match>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f aea7 	beq.w	8006a2a <_strtod_l+0xc2>
 8006cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cde:	4989      	ldr	r1, [pc, #548]	; (8006f04 <_strtod_l+0x59c>)
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	a817      	add	r0, sp, #92	; 0x5c
 8006ce4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ce6:	f001 fd91 	bl	800880c <__match>
 8006cea:	b910      	cbnz	r0, 8006cf2 <_strtod_l+0x38a>
 8006cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cee:	3301      	adds	r3, #1
 8006cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cf2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8006f18 <_strtod_l+0x5b0>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	e679      	b.n	80069f0 <_strtod_l+0x88>
 8006cfc:	4882      	ldr	r0, [pc, #520]	; (8006f08 <_strtod_l+0x5a0>)
 8006cfe:	f003 f877 	bl	8009df0 <nan>
 8006d02:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006d06:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006d0a:	e671      	b.n	80069f0 <_strtod_l+0x88>
 8006d0c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006d10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d14:	eba5 020b 	sub.w	r2, r5, fp
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	bf08      	it	eq
 8006d1c:	461e      	moveq	r6, r3
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d24:	9206      	str	r2, [sp, #24]
 8006d26:	461a      	mov	r2, r3
 8006d28:	bfa8      	it	ge
 8006d2a:	2210      	movge	r2, #16
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006d32:	dd0e      	ble.n	8006d52 <_strtod_l+0x3ea>
 8006d34:	4975      	ldr	r1, [pc, #468]	; (8006f0c <_strtod_l+0x5a4>)
 8006d36:	eddd 7a04 	vldr	s15, [sp, #16]
 8006d3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006d3e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006d42:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006d46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006d4e:	ec59 8b17 	vmov	r8, r9, d7
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	dc37      	bgt.n	8006dc6 <_strtod_l+0x45e>
 8006d56:	9906      	ldr	r1, [sp, #24]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	f43f ae49 	beq.w	80069f0 <_strtod_l+0x88>
 8006d5e:	dd23      	ble.n	8006da8 <_strtod_l+0x440>
 8006d60:	2916      	cmp	r1, #22
 8006d62:	dc0b      	bgt.n	8006d7c <_strtod_l+0x414>
 8006d64:	4b69      	ldr	r3, [pc, #420]	; (8006f0c <_strtod_l+0x5a4>)
 8006d66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006d6a:	ed93 7b00 	vldr	d7, [r3]
 8006d6e:	ec49 8b16 	vmov	d6, r8, r9
 8006d72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d76:	ec59 8b17 	vmov	r8, r9, d7
 8006d7a:	e639      	b.n	80069f0 <_strtod_l+0x88>
 8006d7c:	9806      	ldr	r0, [sp, #24]
 8006d7e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006d82:	4281      	cmp	r1, r0
 8006d84:	db1f      	blt.n	8006dc6 <_strtod_l+0x45e>
 8006d86:	4a61      	ldr	r2, [pc, #388]	; (8006f0c <_strtod_l+0x5a4>)
 8006d88:	f1c3 030f 	rsb	r3, r3, #15
 8006d8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006d90:	ed91 7b00 	vldr	d7, [r1]
 8006d94:	ec49 8b16 	vmov	d6, r8, r9
 8006d98:	1ac3      	subs	r3, r0, r3
 8006d9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006d9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006da2:	ed92 6b00 	vldr	d6, [r2]
 8006da6:	e7e4      	b.n	8006d72 <_strtod_l+0x40a>
 8006da8:	9906      	ldr	r1, [sp, #24]
 8006daa:	3116      	adds	r1, #22
 8006dac:	db0b      	blt.n	8006dc6 <_strtod_l+0x45e>
 8006dae:	4b57      	ldr	r3, [pc, #348]	; (8006f0c <_strtod_l+0x5a4>)
 8006db0:	ebab 0505 	sub.w	r5, fp, r5
 8006db4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006db8:	ed95 7b00 	vldr	d7, [r5]
 8006dbc:	ec49 8b16 	vmov	d6, r8, r9
 8006dc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006dc4:	e7d7      	b.n	8006d76 <_strtod_l+0x40e>
 8006dc6:	9906      	ldr	r1, [sp, #24]
 8006dc8:	1a9a      	subs	r2, r3, r2
 8006dca:	440a      	add	r2, r1
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	dd74      	ble.n	8006eba <_strtod_l+0x552>
 8006dd0:	f012 000f 	ands.w	r0, r2, #15
 8006dd4:	d00a      	beq.n	8006dec <_strtod_l+0x484>
 8006dd6:	494d      	ldr	r1, [pc, #308]	; (8006f0c <_strtod_l+0x5a4>)
 8006dd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006ddc:	ed91 7b00 	vldr	d7, [r1]
 8006de0:	ec49 8b16 	vmov	d6, r8, r9
 8006de4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006de8:	ec59 8b17 	vmov	r8, r9, d7
 8006dec:	f032 020f 	bics.w	r2, r2, #15
 8006df0:	d04f      	beq.n	8006e92 <_strtod_l+0x52a>
 8006df2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006df6:	dd22      	ble.n	8006e3e <_strtod_l+0x4d6>
 8006df8:	2500      	movs	r5, #0
 8006dfa:	462e      	mov	r6, r5
 8006dfc:	950a      	str	r5, [sp, #40]	; 0x28
 8006dfe:	462f      	mov	r7, r5
 8006e00:	2322      	movs	r3, #34	; 0x22
 8006e02:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006f18 <_strtod_l+0x5b0>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	f04f 0800 	mov.w	r8, #0
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f43f adee 	beq.w	80069f0 <_strtod_l+0x88>
 8006e14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e16:	4620      	mov	r0, r4
 8006e18:	f001 fe26 	bl	8008a68 <_Bfree>
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 fe22 	bl	8008a68 <_Bfree>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4620      	mov	r0, r4
 8006e28:	f001 fe1e 	bl	8008a68 <_Bfree>
 8006e2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 fe1a 	bl	8008a68 <_Bfree>
 8006e34:	4629      	mov	r1, r5
 8006e36:	4620      	mov	r0, r4
 8006e38:	f001 fe16 	bl	8008a68 <_Bfree>
 8006e3c:	e5d8      	b.n	80069f0 <_strtod_l+0x88>
 8006e3e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006e42:	2000      	movs	r0, #0
 8006e44:	4f32      	ldr	r7, [pc, #200]	; (8006f10 <_strtod_l+0x5a8>)
 8006e46:	1112      	asrs	r2, r2, #4
 8006e48:	4601      	mov	r1, r0
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	dc24      	bgt.n	8006e98 <_strtod_l+0x530>
 8006e4e:	b108      	cbz	r0, 8006e54 <_strtod_l+0x4ec>
 8006e50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e54:	4a2e      	ldr	r2, [pc, #184]	; (8006f10 <_strtod_l+0x5a8>)
 8006e56:	482f      	ldr	r0, [pc, #188]	; (8006f14 <_strtod_l+0x5ac>)
 8006e58:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006e5c:	ed91 7b00 	vldr	d7, [r1]
 8006e60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e64:	ec49 8b16 	vmov	d6, r8, r9
 8006e68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e70:	9905      	ldr	r1, [sp, #20]
 8006e72:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <_strtod_l+0x5b0>)
 8006e74:	400a      	ands	r2, r1
 8006e76:	4282      	cmp	r2, r0
 8006e78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e7c:	d8bc      	bhi.n	8006df8 <_strtod_l+0x490>
 8006e7e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006e82:	4282      	cmp	r2, r0
 8006e84:	bf86      	itte	hi
 8006e86:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006f1c <_strtod_l+0x5b4>
 8006e8a:	f04f 38ff 	movhi.w	r8, #4294967295
 8006e8e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006e92:	2200      	movs	r2, #0
 8006e94:	9204      	str	r2, [sp, #16]
 8006e96:	e07f      	b.n	8006f98 <_strtod_l+0x630>
 8006e98:	f012 0f01 	tst.w	r2, #1
 8006e9c:	d00a      	beq.n	8006eb4 <_strtod_l+0x54c>
 8006e9e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8006ea2:	ed90 7b00 	vldr	d7, [r0]
 8006ea6:	ed9d 6b04 	vldr	d6, [sp, #16]
 8006eaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006eae:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	3101      	adds	r1, #1
 8006eb6:	1052      	asrs	r2, r2, #1
 8006eb8:	e7c7      	b.n	8006e4a <_strtod_l+0x4e2>
 8006eba:	d0ea      	beq.n	8006e92 <_strtod_l+0x52a>
 8006ebc:	4252      	negs	r2, r2
 8006ebe:	f012 000f 	ands.w	r0, r2, #15
 8006ec2:	d00a      	beq.n	8006eda <_strtod_l+0x572>
 8006ec4:	4911      	ldr	r1, [pc, #68]	; (8006f0c <_strtod_l+0x5a4>)
 8006ec6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006eca:	ed91 7b00 	vldr	d7, [r1]
 8006ece:	ec49 8b16 	vmov	d6, r8, r9
 8006ed2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ed6:	ec59 8b17 	vmov	r8, r9, d7
 8006eda:	1112      	asrs	r2, r2, #4
 8006edc:	d0d9      	beq.n	8006e92 <_strtod_l+0x52a>
 8006ede:	2a1f      	cmp	r2, #31
 8006ee0:	dd1e      	ble.n	8006f20 <_strtod_l+0x5b8>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	462e      	mov	r6, r5
 8006ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8006ee8:	462f      	mov	r7, r5
 8006eea:	2322      	movs	r3, #34	; 0x22
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	f04f 0900 	mov.w	r9, #0
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	e789      	b.n	8006e0c <_strtod_l+0x4a4>
 8006ef8:	0800b09d 	.word	0x0800b09d
 8006efc:	0800b0dc 	.word	0x0800b0dc
 8006f00:	0800b095 	.word	0x0800b095
 8006f04:	0800b21c 	.word	0x0800b21c
 8006f08:	0800b4f3 	.word	0x0800b4f3
 8006f0c:	0800b3b8 	.word	0x0800b3b8
 8006f10:	0800b390 	.word	0x0800b390
 8006f14:	7ca00000 	.word	0x7ca00000
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	7fefffff 	.word	0x7fefffff
 8006f20:	f012 0110 	ands.w	r1, r2, #16
 8006f24:	bf18      	it	ne
 8006f26:	216a      	movne	r1, #106	; 0x6a
 8006f28:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006f2c:	9104      	str	r1, [sp, #16]
 8006f2e:	49c0      	ldr	r1, [pc, #768]	; (8007230 <_strtod_l+0x8c8>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	07d7      	lsls	r7, r2, #31
 8006f34:	d508      	bpl.n	8006f48 <_strtod_l+0x5e0>
 8006f36:	ed9d 6b08 	vldr	d6, [sp, #32]
 8006f3a:	ed91 7b00 	vldr	d7, [r1]
 8006f3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f42:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f46:	2001      	movs	r0, #1
 8006f48:	1052      	asrs	r2, r2, #1
 8006f4a:	f101 0108 	add.w	r1, r1, #8
 8006f4e:	d1f0      	bne.n	8006f32 <_strtod_l+0x5ca>
 8006f50:	b108      	cbz	r0, 8006f56 <_strtod_l+0x5ee>
 8006f52:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006f56:	9a04      	ldr	r2, [sp, #16]
 8006f58:	b1ba      	cbz	r2, 8006f8a <_strtod_l+0x622>
 8006f5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006f5e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	4649      	mov	r1, r9
 8006f66:	dd10      	ble.n	8006f8a <_strtod_l+0x622>
 8006f68:	2a1f      	cmp	r2, #31
 8006f6a:	f340 8132 	ble.w	80071d2 <_strtod_l+0x86a>
 8006f6e:	2a34      	cmp	r2, #52	; 0x34
 8006f70:	bfde      	ittt	le
 8006f72:	3a20      	suble	r2, #32
 8006f74:	f04f 30ff 	movle.w	r0, #4294967295
 8006f78:	fa00 f202 	lslle.w	r2, r0, r2
 8006f7c:	f04f 0800 	mov.w	r8, #0
 8006f80:	bfcc      	ite	gt
 8006f82:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006f86:	ea02 0901 	andle.w	r9, r2, r1
 8006f8a:	ec49 8b17 	vmov	d7, r8, r9
 8006f8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	d0a4      	beq.n	8006ee2 <_strtod_l+0x57a>
 8006f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9a:	9200      	str	r2, [sp, #0]
 8006f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f001 fdcd 	bl	8008b40 <__s2b>
 8006fa6:	900a      	str	r0, [sp, #40]	; 0x28
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f43f af25 	beq.w	8006df8 <_strtod_l+0x490>
 8006fae:	9b06      	ldr	r3, [sp, #24]
 8006fb0:	ebab 0505 	sub.w	r5, fp, r5
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb4      	ite	lt
 8006fb8:	462b      	movlt	r3, r5
 8006fba:	2300      	movge	r3, #0
 8006fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8006fbe:	9b06      	ldr	r3, [sp, #24]
 8006fc0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007218 <_strtod_l+0x8b0>
 8006fc4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007220 <_strtod_l+0x8b8>
 8006fc8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007228 <_strtod_l+0x8c0>
 8006fcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8006fd4:	462e      	mov	r6, r5
 8006fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd8:	4620      	mov	r0, r4
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	f001 fd04 	bl	80089e8 <_Balloc>
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f43f af0c 	beq.w	8006e00 <_strtod_l+0x498>
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	3202      	adds	r2, #2
 8006fee:	f103 010c 	add.w	r1, r3, #12
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	300c      	adds	r0, #12
 8006ff6:	f001 fce9 	bl	80089cc <memcpy>
 8006ffa:	ec49 8b10 	vmov	d0, r8, r9
 8006ffe:	aa1a      	add	r2, sp, #104	; 0x68
 8007000:	a919      	add	r1, sp, #100	; 0x64
 8007002:	4620      	mov	r0, r4
 8007004:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007008:	f002 f8d6 	bl	80091b8 <__d2b>
 800700c:	9018      	str	r0, [sp, #96]	; 0x60
 800700e:	2800      	cmp	r0, #0
 8007010:	f43f aef6 	beq.w	8006e00 <_strtod_l+0x498>
 8007014:	2101      	movs	r1, #1
 8007016:	4620      	mov	r0, r4
 8007018:	f001 fe2c 	bl	8008c74 <__i2b>
 800701c:	4606      	mov	r6, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	f43f aeee 	beq.w	8006e00 <_strtod_l+0x498>
 8007024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007026:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfab      	itete	ge
 800702c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800702e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007030:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007034:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007038:	bfac      	ite	ge
 800703a:	eb03 0b02 	addge.w	fp, r3, r2
 800703e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007042:	9a04      	ldr	r2, [sp, #16]
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	440b      	add	r3, r1
 8007048:	4a7a      	ldr	r2, [pc, #488]	; (8007234 <_strtod_l+0x8cc>)
 800704a:	3b01      	subs	r3, #1
 800704c:	4293      	cmp	r3, r2
 800704e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007052:	f280 80d1 	bge.w	80071f8 <_strtod_l+0x890>
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	2a1f      	cmp	r2, #31
 800705a:	eba1 0102 	sub.w	r1, r1, r2
 800705e:	f04f 0001 	mov.w	r0, #1
 8007062:	f300 80bd 	bgt.w	80071e0 <_strtod_l+0x878>
 8007066:	fa00 f302 	lsl.w	r3, r0, r2
 800706a:	930e      	str	r3, [sp, #56]	; 0x38
 800706c:	2300      	movs	r3, #0
 800706e:	930d      	str	r3, [sp, #52]	; 0x34
 8007070:	eb0b 0301 	add.w	r3, fp, r1
 8007074:	9a04      	ldr	r2, [sp, #16]
 8007076:	459b      	cmp	fp, r3
 8007078:	448a      	add	sl, r1
 800707a:	4492      	add	sl, r2
 800707c:	465a      	mov	r2, fp
 800707e:	bfa8      	it	ge
 8007080:	461a      	movge	r2, r3
 8007082:	4552      	cmp	r2, sl
 8007084:	bfa8      	it	ge
 8007086:	4652      	movge	r2, sl
 8007088:	2a00      	cmp	r2, #0
 800708a:	bfc2      	ittt	gt
 800708c:	1a9b      	subgt	r3, r3, r2
 800708e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007092:	ebab 0b02 	subgt.w	fp, fp, r2
 8007096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007098:	2a00      	cmp	r2, #0
 800709a:	dd18      	ble.n	80070ce <_strtod_l+0x766>
 800709c:	4631      	mov	r1, r6
 800709e:	4620      	mov	r0, r4
 80070a0:	9315      	str	r3, [sp, #84]	; 0x54
 80070a2:	f001 fea3 	bl	8008dec <__pow5mult>
 80070a6:	4606      	mov	r6, r0
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f43f aea9 	beq.w	8006e00 <_strtod_l+0x498>
 80070ae:	4601      	mov	r1, r0
 80070b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070b2:	4620      	mov	r0, r4
 80070b4:	f001 fdf4 	bl	8008ca0 <__multiply>
 80070b8:	9014      	str	r0, [sp, #80]	; 0x50
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f43f aea0 	beq.w	8006e00 <_strtod_l+0x498>
 80070c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070c2:	4620      	mov	r0, r4
 80070c4:	f001 fcd0 	bl	8008a68 <_Bfree>
 80070c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070cc:	9218      	str	r2, [sp, #96]	; 0x60
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f300 8097 	bgt.w	8007202 <_strtod_l+0x89a>
 80070d4:	9b06      	ldr	r3, [sp, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dd08      	ble.n	80070ec <_strtod_l+0x784>
 80070da:	4639      	mov	r1, r7
 80070dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070de:	4620      	mov	r0, r4
 80070e0:	f001 fe84 	bl	8008dec <__pow5mult>
 80070e4:	4607      	mov	r7, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f43f ae8a 	beq.w	8006e00 <_strtod_l+0x498>
 80070ec:	f1ba 0f00 	cmp.w	sl, #0
 80070f0:	dd08      	ble.n	8007104 <_strtod_l+0x79c>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4652      	mov	r2, sl
 80070f6:	4620      	mov	r0, r4
 80070f8:	f001 fed2 	bl	8008ea0 <__lshift>
 80070fc:	4607      	mov	r7, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f ae7e 	beq.w	8006e00 <_strtod_l+0x498>
 8007104:	f1bb 0f00 	cmp.w	fp, #0
 8007108:	dd08      	ble.n	800711c <_strtod_l+0x7b4>
 800710a:	4631      	mov	r1, r6
 800710c:	465a      	mov	r2, fp
 800710e:	4620      	mov	r0, r4
 8007110:	f001 fec6 	bl	8008ea0 <__lshift>
 8007114:	4606      	mov	r6, r0
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f ae72 	beq.w	8006e00 <_strtod_l+0x498>
 800711c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800711e:	463a      	mov	r2, r7
 8007120:	4620      	mov	r0, r4
 8007122:	f001 ff45 	bl	8008fb0 <__mdiff>
 8007126:	4605      	mov	r5, r0
 8007128:	2800      	cmp	r0, #0
 800712a:	f43f ae69 	beq.w	8006e00 <_strtod_l+0x498>
 800712e:	2300      	movs	r3, #0
 8007130:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007134:	60c3      	str	r3, [r0, #12]
 8007136:	4631      	mov	r1, r6
 8007138:	f001 ff1e 	bl	8008f78 <__mcmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	da7f      	bge.n	8007240 <_strtod_l+0x8d8>
 8007140:	ea5a 0308 	orrs.w	r3, sl, r8
 8007144:	f040 80a5 	bne.w	8007292 <_strtod_l+0x92a>
 8007148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 80a0 	bne.w	8007292 <_strtod_l+0x92a>
 8007152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007156:	0d1b      	lsrs	r3, r3, #20
 8007158:	051b      	lsls	r3, r3, #20
 800715a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800715e:	f240 8098 	bls.w	8007292 <_strtod_l+0x92a>
 8007162:	696b      	ldr	r3, [r5, #20]
 8007164:	b91b      	cbnz	r3, 800716e <_strtod_l+0x806>
 8007166:	692b      	ldr	r3, [r5, #16]
 8007168:	2b01      	cmp	r3, #1
 800716a:	f340 8092 	ble.w	8007292 <_strtod_l+0x92a>
 800716e:	4629      	mov	r1, r5
 8007170:	2201      	movs	r2, #1
 8007172:	4620      	mov	r0, r4
 8007174:	f001 fe94 	bl	8008ea0 <__lshift>
 8007178:	4631      	mov	r1, r6
 800717a:	4605      	mov	r5, r0
 800717c:	f001 fefc 	bl	8008f78 <__mcmp>
 8007180:	2800      	cmp	r0, #0
 8007182:	f340 8086 	ble.w	8007292 <_strtod_l+0x92a>
 8007186:	9904      	ldr	r1, [sp, #16]
 8007188:	4a2b      	ldr	r2, [pc, #172]	; (8007238 <_strtod_l+0x8d0>)
 800718a:	464b      	mov	r3, r9
 800718c:	2900      	cmp	r1, #0
 800718e:	f000 80a1 	beq.w	80072d4 <_strtod_l+0x96c>
 8007192:	ea02 0109 	and.w	r1, r2, r9
 8007196:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800719a:	f300 809b 	bgt.w	80072d4 <_strtod_l+0x96c>
 800719e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071a2:	f77f aea2 	ble.w	8006eea <_strtod_l+0x582>
 80071a6:	4a25      	ldr	r2, [pc, #148]	; (800723c <_strtod_l+0x8d4>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80071ae:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80071b2:	ec49 8b17 	vmov	d7, r8, r9
 80071b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071be:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	bf08      	it	eq
 80071c6:	2322      	moveq	r3, #34	; 0x22
 80071c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071cc:	bf08      	it	eq
 80071ce:	6023      	streq	r3, [r4, #0]
 80071d0:	e620      	b.n	8006e14 <_strtod_l+0x4ac>
 80071d2:	f04f 31ff 	mov.w	r1, #4294967295
 80071d6:	fa01 f202 	lsl.w	r2, r1, r2
 80071da:	ea02 0808 	and.w	r8, r2, r8
 80071de:	e6d4      	b.n	8006f8a <_strtod_l+0x622>
 80071e0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80071e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80071e8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80071ec:	33e2      	adds	r3, #226	; 0xe2
 80071ee:	fa00 f303 	lsl.w	r3, r0, r3
 80071f2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80071f6:	e73b      	b.n	8007070 <_strtod_l+0x708>
 80071f8:	2000      	movs	r0, #0
 80071fa:	2301      	movs	r3, #1
 80071fc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007200:	e736      	b.n	8007070 <_strtod_l+0x708>
 8007202:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007204:	461a      	mov	r2, r3
 8007206:	4620      	mov	r0, r4
 8007208:	f001 fe4a 	bl	8008ea0 <__lshift>
 800720c:	9018      	str	r0, [sp, #96]	; 0x60
 800720e:	2800      	cmp	r0, #0
 8007210:	f47f af60 	bne.w	80070d4 <_strtod_l+0x76c>
 8007214:	e5f4      	b.n	8006e00 <_strtod_l+0x498>
 8007216:	bf00      	nop
 8007218:	94a03595 	.word	0x94a03595
 800721c:	3fcfffff 	.word	0x3fcfffff
 8007220:	94a03595 	.word	0x94a03595
 8007224:	3fdfffff 	.word	0x3fdfffff
 8007228:	35afe535 	.word	0x35afe535
 800722c:	3fe00000 	.word	0x3fe00000
 8007230:	0800b0f0 	.word	0x0800b0f0
 8007234:	fffffc02 	.word	0xfffffc02
 8007238:	7ff00000 	.word	0x7ff00000
 800723c:	39500000 	.word	0x39500000
 8007240:	46cb      	mov	fp, r9
 8007242:	d165      	bne.n	8007310 <_strtod_l+0x9a8>
 8007244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	d02a      	beq.n	80072a4 <_strtod_l+0x93c>
 800724e:	4aaa      	ldr	r2, [pc, #680]	; (80074f8 <_strtod_l+0xb90>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d12b      	bne.n	80072ac <_strtod_l+0x944>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	4641      	mov	r1, r8
 8007258:	b1fb      	cbz	r3, 800729a <_strtod_l+0x932>
 800725a:	4aa8      	ldr	r2, [pc, #672]	; (80074fc <_strtod_l+0xb94>)
 800725c:	ea09 0202 	and.w	r2, r9, r2
 8007260:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	d81a      	bhi.n	80072a0 <_strtod_l+0x938>
 800726a:	0d12      	lsrs	r2, r2, #20
 800726c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007270:	fa00 f303 	lsl.w	r3, r0, r3
 8007274:	4299      	cmp	r1, r3
 8007276:	d119      	bne.n	80072ac <_strtod_l+0x944>
 8007278:	4ba1      	ldr	r3, [pc, #644]	; (8007500 <_strtod_l+0xb98>)
 800727a:	459b      	cmp	fp, r3
 800727c:	d102      	bne.n	8007284 <_strtod_l+0x91c>
 800727e:	3101      	adds	r1, #1
 8007280:	f43f adbe 	beq.w	8006e00 <_strtod_l+0x498>
 8007284:	4b9d      	ldr	r3, [pc, #628]	; (80074fc <_strtod_l+0xb94>)
 8007286:	ea0b 0303 	and.w	r3, fp, r3
 800728a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800728e:	f04f 0800 	mov.w	r8, #0
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d186      	bne.n	80071a6 <_strtod_l+0x83e>
 8007298:	e5bc      	b.n	8006e14 <_strtod_l+0x4ac>
 800729a:	f04f 33ff 	mov.w	r3, #4294967295
 800729e:	e7e9      	b.n	8007274 <_strtod_l+0x90c>
 80072a0:	4603      	mov	r3, r0
 80072a2:	e7e7      	b.n	8007274 <_strtod_l+0x90c>
 80072a4:	ea53 0308 	orrs.w	r3, r3, r8
 80072a8:	f43f af6d 	beq.w	8007186 <_strtod_l+0x81e>
 80072ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ae:	b1db      	cbz	r3, 80072e8 <_strtod_l+0x980>
 80072b0:	ea13 0f0b 	tst.w	r3, fp
 80072b4:	d0ed      	beq.n	8007292 <_strtod_l+0x92a>
 80072b6:	9a04      	ldr	r2, [sp, #16]
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f1ba 0f00 	cmp.w	sl, #0
 80072c0:	d016      	beq.n	80072f0 <_strtod_l+0x988>
 80072c2:	f7ff fb37 	bl	8006934 <sulp>
 80072c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072ca:	ee37 7b00 	vadd.f64	d7, d7, d0
 80072ce:	ec59 8b17 	vmov	r8, r9, d7
 80072d2:	e7de      	b.n	8007292 <_strtod_l+0x92a>
 80072d4:	4013      	ands	r3, r2
 80072d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80072de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80072e2:	f04f 38ff 	mov.w	r8, #4294967295
 80072e6:	e7d4      	b.n	8007292 <_strtod_l+0x92a>
 80072e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ea:	ea13 0f08 	tst.w	r3, r8
 80072ee:	e7e1      	b.n	80072b4 <_strtod_l+0x94c>
 80072f0:	f7ff fb20 	bl	8006934 <sulp>
 80072f4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072f8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80072fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007300:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007308:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800730c:	d1c1      	bne.n	8007292 <_strtod_l+0x92a>
 800730e:	e5ec      	b.n	8006eea <_strtod_l+0x582>
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	f001 ffac 	bl	8009270 <__ratio>
 8007318:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800731c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	d867      	bhi.n	80073f6 <_strtod_l+0xa8e>
 8007326:	f1ba 0f00 	cmp.w	sl, #0
 800732a:	d044      	beq.n	80073b6 <_strtod_l+0xa4e>
 800732c:	4b75      	ldr	r3, [pc, #468]	; (8007504 <_strtod_l+0xb9c>)
 800732e:	2200      	movs	r2, #0
 8007330:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007334:	4971      	ldr	r1, [pc, #452]	; (80074fc <_strtod_l+0xb94>)
 8007336:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007510 <_strtod_l+0xba8>
 800733a:	ea0b 0001 	and.w	r0, fp, r1
 800733e:	4560      	cmp	r0, ip
 8007340:	900d      	str	r0, [sp, #52]	; 0x34
 8007342:	f040 808b 	bne.w	800745c <_strtod_l+0xaf4>
 8007346:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800734a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800734e:	ec49 8b10 	vmov	d0, r8, r9
 8007352:	ec43 2b1c 	vmov	d12, r2, r3
 8007356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800735a:	f001 feb1 	bl	80090c0 <__ulp>
 800735e:	ec49 8b1d 	vmov	d13, r8, r9
 8007362:	eeac db00 	vfma.f64	d13, d12, d0
 8007366:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800736a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800736c:	4963      	ldr	r1, [pc, #396]	; (80074fc <_strtod_l+0xb94>)
 800736e:	4a66      	ldr	r2, [pc, #408]	; (8007508 <_strtod_l+0xba0>)
 8007370:	4019      	ands	r1, r3
 8007372:	4291      	cmp	r1, r2
 8007374:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007378:	d947      	bls.n	800740a <_strtod_l+0xaa2>
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007380:	4293      	cmp	r3, r2
 8007382:	d103      	bne.n	800738c <_strtod_l+0xa24>
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	3301      	adds	r3, #1
 8007388:	f43f ad3a 	beq.w	8006e00 <_strtod_l+0x498>
 800738c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007500 <_strtod_l+0xb98>
 8007390:	f04f 38ff 	mov.w	r8, #4294967295
 8007394:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007396:	4620      	mov	r0, r4
 8007398:	f001 fb66 	bl	8008a68 <_Bfree>
 800739c:	4639      	mov	r1, r7
 800739e:	4620      	mov	r0, r4
 80073a0:	f001 fb62 	bl	8008a68 <_Bfree>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fb5e 	bl	8008a68 <_Bfree>
 80073ac:	4629      	mov	r1, r5
 80073ae:	4620      	mov	r0, r4
 80073b0:	f001 fb5a 	bl	8008a68 <_Bfree>
 80073b4:	e60f      	b.n	8006fd6 <_strtod_l+0x66e>
 80073b6:	f1b8 0f00 	cmp.w	r8, #0
 80073ba:	d112      	bne.n	80073e2 <_strtod_l+0xa7a>
 80073bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073c0:	b9b3      	cbnz	r3, 80073f0 <_strtod_l+0xa88>
 80073c2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80073c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80073ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073d2:	d401      	bmi.n	80073d8 <_strtod_l+0xa70>
 80073d4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073d8:	eeb1 7b48 	vneg.f64	d7, d8
 80073dc:	ec53 2b17 	vmov	r2, r3, d7
 80073e0:	e7a8      	b.n	8007334 <_strtod_l+0x9cc>
 80073e2:	f1b8 0f01 	cmp.w	r8, #1
 80073e6:	d103      	bne.n	80073f0 <_strtod_l+0xa88>
 80073e8:	f1b9 0f00 	cmp.w	r9, #0
 80073ec:	f43f ad7d 	beq.w	8006eea <_strtod_l+0x582>
 80073f0:	4b46      	ldr	r3, [pc, #280]	; (800750c <_strtod_l+0xba4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	e79c      	b.n	8007330 <_strtod_l+0x9c8>
 80073f6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073fe:	f1ba 0f00 	cmp.w	sl, #0
 8007402:	d0e9      	beq.n	80073d8 <_strtod_l+0xa70>
 8007404:	ec53 2b18 	vmov	r2, r3, d8
 8007408:	e794      	b.n	8007334 <_strtod_l+0x9cc>
 800740a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1bf      	bne.n	8007394 <_strtod_l+0xa2c>
 8007414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800741a:	0d1b      	lsrs	r3, r3, #20
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	429a      	cmp	r2, r3
 8007420:	d1b8      	bne.n	8007394 <_strtod_l+0xa2c>
 8007422:	ec51 0b18 	vmov	r0, r1, d8
 8007426:	f7f9 f937 	bl	8000698 <__aeabi_d2lz>
 800742a:	f7f9 f8ef 	bl	800060c <__aeabi_l2d>
 800742e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007432:	ec41 0b17 	vmov	d7, r0, r1
 8007436:	ea43 0308 	orr.w	r3, r3, r8
 800743a:	ea53 030a 	orrs.w	r3, r3, sl
 800743e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007442:	d03e      	beq.n	80074c2 <_strtod_l+0xb5a>
 8007444:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	f53f ace2 	bmi.w	8006e14 <_strtod_l+0x4ac>
 8007450:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007458:	dd9c      	ble.n	8007394 <_strtod_l+0xa2c>
 800745a:	e4db      	b.n	8006e14 <_strtod_l+0x4ac>
 800745c:	9904      	ldr	r1, [sp, #16]
 800745e:	b301      	cbz	r1, 80074a2 <_strtod_l+0xb3a>
 8007460:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007462:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007466:	d81c      	bhi.n	80074a2 <_strtod_l+0xb3a>
 8007468:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80074f0 <_strtod_l+0xb88>
 800746c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	d811      	bhi.n	800749a <_strtod_l+0xb32>
 8007476:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800747a:	ee18 3a10 	vmov	r3, s16
 800747e:	2b01      	cmp	r3, #1
 8007480:	bf38      	it	cc
 8007482:	2301      	movcc	r3, #1
 8007484:	ee08 3a10 	vmov	s16, r3
 8007488:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800748c:	f1ba 0f00 	cmp.w	sl, #0
 8007490:	d114      	bne.n	80074bc <_strtod_l+0xb54>
 8007492:	eeb1 7b48 	vneg.f64	d7, d8
 8007496:	ec53 2b17 	vmov	r2, r3, d7
 800749a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800749c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80074a0:	1a0b      	subs	r3, r1, r0
 80074a2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80074a6:	ec43 2b1c 	vmov	d12, r2, r3
 80074aa:	f001 fe09 	bl	80090c0 <__ulp>
 80074ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80074b2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80074b6:	ec59 8b17 	vmov	r8, r9, d7
 80074ba:	e7a8      	b.n	800740e <_strtod_l+0xaa6>
 80074bc:	ec53 2b18 	vmov	r2, r3, d8
 80074c0:	e7eb      	b.n	800749a <_strtod_l+0xb32>
 80074c2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	f57f af63 	bpl.w	8007394 <_strtod_l+0xa2c>
 80074ce:	e4a1      	b.n	8006e14 <_strtod_l+0x4ac>
 80074d0:	2300      	movs	r3, #0
 80074d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	f7ff ba8d 	b.w	80069f8 <_strtod_l+0x90>
 80074de:	2a65      	cmp	r2, #101	; 0x65
 80074e0:	f43f ab89 	beq.w	8006bf6 <_strtod_l+0x28e>
 80074e4:	2a45      	cmp	r2, #69	; 0x45
 80074e6:	f43f ab86 	beq.w	8006bf6 <_strtod_l+0x28e>
 80074ea:	2101      	movs	r1, #1
 80074ec:	f7ff bbbe 	b.w	8006c6c <_strtod_l+0x304>
 80074f0:	ffc00000 	.word	0xffc00000
 80074f4:	41dfffff 	.word	0x41dfffff
 80074f8:	000fffff 	.word	0x000fffff
 80074fc:	7ff00000 	.word	0x7ff00000
 8007500:	7fefffff 	.word	0x7fefffff
 8007504:	3ff00000 	.word	0x3ff00000
 8007508:	7c9fffff 	.word	0x7c9fffff
 800750c:	bff00000 	.word	0xbff00000
 8007510:	7fe00000 	.word	0x7fe00000

08007514 <_strtod_r>:
 8007514:	4b01      	ldr	r3, [pc, #4]	; (800751c <_strtod_r+0x8>)
 8007516:	f7ff ba27 	b.w	8006968 <_strtod_l>
 800751a:	bf00      	nop
 800751c:	200000a0 	.word	0x200000a0

08007520 <_strtol_l.isra.0>:
 8007520:	2b01      	cmp	r3, #1
 8007522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007526:	d001      	beq.n	800752c <_strtol_l.isra.0+0xc>
 8007528:	2b24      	cmp	r3, #36	; 0x24
 800752a:	d906      	bls.n	800753a <_strtol_l.isra.0+0x1a>
 800752c:	f7fe facc 	bl	8005ac8 <__errno>
 8007530:	2316      	movs	r3, #22
 8007532:	6003      	str	r3, [r0, #0]
 8007534:	2000      	movs	r0, #0
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	4f3a      	ldr	r7, [pc, #232]	; (8007624 <_strtol_l.isra.0+0x104>)
 800753c:	468e      	mov	lr, r1
 800753e:	4676      	mov	r6, lr
 8007540:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007544:	5de5      	ldrb	r5, [r4, r7]
 8007546:	f015 0508 	ands.w	r5, r5, #8
 800754a:	d1f8      	bne.n	800753e <_strtol_l.isra.0+0x1e>
 800754c:	2c2d      	cmp	r4, #45	; 0x2d
 800754e:	d134      	bne.n	80075ba <_strtol_l.isra.0+0x9a>
 8007550:	f89e 4000 	ldrb.w	r4, [lr]
 8007554:	f04f 0801 	mov.w	r8, #1
 8007558:	f106 0e02 	add.w	lr, r6, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d05c      	beq.n	800761a <_strtol_l.isra.0+0xfa>
 8007560:	2b10      	cmp	r3, #16
 8007562:	d10c      	bne.n	800757e <_strtol_l.isra.0+0x5e>
 8007564:	2c30      	cmp	r4, #48	; 0x30
 8007566:	d10a      	bne.n	800757e <_strtol_l.isra.0+0x5e>
 8007568:	f89e 4000 	ldrb.w	r4, [lr]
 800756c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007570:	2c58      	cmp	r4, #88	; 0x58
 8007572:	d14d      	bne.n	8007610 <_strtol_l.isra.0+0xf0>
 8007574:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007578:	2310      	movs	r3, #16
 800757a:	f10e 0e02 	add.w	lr, lr, #2
 800757e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007582:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007586:	2600      	movs	r6, #0
 8007588:	fbbc f9f3 	udiv	r9, ip, r3
 800758c:	4635      	mov	r5, r6
 800758e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007592:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007596:	2f09      	cmp	r7, #9
 8007598:	d818      	bhi.n	80075cc <_strtol_l.isra.0+0xac>
 800759a:	463c      	mov	r4, r7
 800759c:	42a3      	cmp	r3, r4
 800759e:	dd24      	ble.n	80075ea <_strtol_l.isra.0+0xca>
 80075a0:	2e00      	cmp	r6, #0
 80075a2:	db1f      	blt.n	80075e4 <_strtol_l.isra.0+0xc4>
 80075a4:	45a9      	cmp	r9, r5
 80075a6:	d31d      	bcc.n	80075e4 <_strtol_l.isra.0+0xc4>
 80075a8:	d101      	bne.n	80075ae <_strtol_l.isra.0+0x8e>
 80075aa:	45a2      	cmp	sl, r4
 80075ac:	db1a      	blt.n	80075e4 <_strtol_l.isra.0+0xc4>
 80075ae:	fb05 4503 	mla	r5, r5, r3, r4
 80075b2:	2601      	movs	r6, #1
 80075b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80075b8:	e7eb      	b.n	8007592 <_strtol_l.isra.0+0x72>
 80075ba:	2c2b      	cmp	r4, #43	; 0x2b
 80075bc:	bf08      	it	eq
 80075be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80075c2:	46a8      	mov	r8, r5
 80075c4:	bf08      	it	eq
 80075c6:	f106 0e02 	addeq.w	lr, r6, #2
 80075ca:	e7c7      	b.n	800755c <_strtol_l.isra.0+0x3c>
 80075cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80075d0:	2f19      	cmp	r7, #25
 80075d2:	d801      	bhi.n	80075d8 <_strtol_l.isra.0+0xb8>
 80075d4:	3c37      	subs	r4, #55	; 0x37
 80075d6:	e7e1      	b.n	800759c <_strtol_l.isra.0+0x7c>
 80075d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80075dc:	2f19      	cmp	r7, #25
 80075de:	d804      	bhi.n	80075ea <_strtol_l.isra.0+0xca>
 80075e0:	3c57      	subs	r4, #87	; 0x57
 80075e2:	e7db      	b.n	800759c <_strtol_l.isra.0+0x7c>
 80075e4:	f04f 36ff 	mov.w	r6, #4294967295
 80075e8:	e7e4      	b.n	80075b4 <_strtol_l.isra.0+0x94>
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	da05      	bge.n	80075fa <_strtol_l.isra.0+0xda>
 80075ee:	2322      	movs	r3, #34	; 0x22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	4665      	mov	r5, ip
 80075f4:	b942      	cbnz	r2, 8007608 <_strtol_l.isra.0+0xe8>
 80075f6:	4628      	mov	r0, r5
 80075f8:	e79d      	b.n	8007536 <_strtol_l.isra.0+0x16>
 80075fa:	f1b8 0f00 	cmp.w	r8, #0
 80075fe:	d000      	beq.n	8007602 <_strtol_l.isra.0+0xe2>
 8007600:	426d      	negs	r5, r5
 8007602:	2a00      	cmp	r2, #0
 8007604:	d0f7      	beq.n	80075f6 <_strtol_l.isra.0+0xd6>
 8007606:	b10e      	cbz	r6, 800760c <_strtol_l.isra.0+0xec>
 8007608:	f10e 31ff 	add.w	r1, lr, #4294967295
 800760c:	6011      	str	r1, [r2, #0]
 800760e:	e7f2      	b.n	80075f6 <_strtol_l.isra.0+0xd6>
 8007610:	2430      	movs	r4, #48	; 0x30
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1b3      	bne.n	800757e <_strtol_l.isra.0+0x5e>
 8007616:	2308      	movs	r3, #8
 8007618:	e7b1      	b.n	800757e <_strtol_l.isra.0+0x5e>
 800761a:	2c30      	cmp	r4, #48	; 0x30
 800761c:	d0a4      	beq.n	8007568 <_strtol_l.isra.0+0x48>
 800761e:	230a      	movs	r3, #10
 8007620:	e7ad      	b.n	800757e <_strtol_l.isra.0+0x5e>
 8007622:	bf00      	nop
 8007624:	0800b119 	.word	0x0800b119

08007628 <_strtol_r>:
 8007628:	f7ff bf7a 	b.w	8007520 <_strtol_l.isra.0>

0800762c <_write_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_write_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7fa fabf 	bl	8001bbe <_write>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_write_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_write_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20010618 	.word	0x20010618

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_close_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fa facb 	bl	8001bf6 <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20010618 	.word	0x20010618

08007670 <quorem>:
 8007670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	6903      	ldr	r3, [r0, #16]
 8007676:	690c      	ldr	r4, [r1, #16]
 8007678:	42a3      	cmp	r3, r4
 800767a:	4607      	mov	r7, r0
 800767c:	f2c0 8081 	blt.w	8007782 <quorem+0x112>
 8007680:	3c01      	subs	r4, #1
 8007682:	f101 0814 	add.w	r8, r1, #20
 8007686:	f100 0514 	add.w	r5, r0, #20
 800768a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007698:	3301      	adds	r3, #1
 800769a:	429a      	cmp	r2, r3
 800769c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076a8:	d331      	bcc.n	800770e <quorem+0x9e>
 80076aa:	f04f 0e00 	mov.w	lr, #0
 80076ae:	4640      	mov	r0, r8
 80076b0:	46ac      	mov	ip, r5
 80076b2:	46f2      	mov	sl, lr
 80076b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b8:	b293      	uxth	r3, r2
 80076ba:	fb06 e303 	mla	r3, r6, r3, lr
 80076be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ebaa 0303 	sub.w	r3, sl, r3
 80076c8:	0c12      	lsrs	r2, r2, #16
 80076ca:	f8dc a000 	ldr.w	sl, [ip]
 80076ce:	fb06 e202 	mla	r2, r6, r2, lr
 80076d2:	fa13 f38a 	uxtah	r3, r3, sl
 80076d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076da:	fa1f fa82 	uxth.w	sl, r2
 80076de:	f8dc 2000 	ldr.w	r2, [ip]
 80076e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f0:	4581      	cmp	r9, r0
 80076f2:	f84c 3b04 	str.w	r3, [ip], #4
 80076f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076fa:	d2db      	bcs.n	80076b4 <quorem+0x44>
 80076fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007700:	b92b      	cbnz	r3, 800770e <quorem+0x9e>
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	3b04      	subs	r3, #4
 8007706:	429d      	cmp	r5, r3
 8007708:	461a      	mov	r2, r3
 800770a:	d32e      	bcc.n	800776a <quorem+0xfa>
 800770c:	613c      	str	r4, [r7, #16]
 800770e:	4638      	mov	r0, r7
 8007710:	f001 fc32 	bl	8008f78 <__mcmp>
 8007714:	2800      	cmp	r0, #0
 8007716:	db24      	blt.n	8007762 <quorem+0xf2>
 8007718:	3601      	adds	r6, #1
 800771a:	4628      	mov	r0, r5
 800771c:	f04f 0c00 	mov.w	ip, #0
 8007720:	f858 2b04 	ldr.w	r2, [r8], #4
 8007724:	f8d0 e000 	ldr.w	lr, [r0]
 8007728:	b293      	uxth	r3, r2
 800772a:	ebac 0303 	sub.w	r3, ip, r3
 800772e:	0c12      	lsrs	r2, r2, #16
 8007730:	fa13 f38e 	uxtah	r3, r3, lr
 8007734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800773c:	b29b      	uxth	r3, r3
 800773e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007742:	45c1      	cmp	r9, r8
 8007744:	f840 3b04 	str.w	r3, [r0], #4
 8007748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800774c:	d2e8      	bcs.n	8007720 <quorem+0xb0>
 800774e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007756:	b922      	cbnz	r2, 8007762 <quorem+0xf2>
 8007758:	3b04      	subs	r3, #4
 800775a:	429d      	cmp	r5, r3
 800775c:	461a      	mov	r2, r3
 800775e:	d30a      	bcc.n	8007776 <quorem+0x106>
 8007760:	613c      	str	r4, [r7, #16]
 8007762:	4630      	mov	r0, r6
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	3b04      	subs	r3, #4
 800776e:	2a00      	cmp	r2, #0
 8007770:	d1cc      	bne.n	800770c <quorem+0x9c>
 8007772:	3c01      	subs	r4, #1
 8007774:	e7c7      	b.n	8007706 <quorem+0x96>
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	3b04      	subs	r3, #4
 800777a:	2a00      	cmp	r2, #0
 800777c:	d1f0      	bne.n	8007760 <quorem+0xf0>
 800777e:	3c01      	subs	r4, #1
 8007780:	e7eb      	b.n	800775a <quorem+0xea>
 8007782:	2000      	movs	r0, #0
 8007784:	e7ee      	b.n	8007764 <quorem+0xf4>
	...

08007788 <_dtoa_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ec59 8b10 	vmov	r8, r9, d0
 8007790:	b095      	sub	sp, #84	; 0x54
 8007792:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007794:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007796:	9107      	str	r1, [sp, #28]
 8007798:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800779c:	4606      	mov	r6, r0
 800779e:	9209      	str	r2, [sp, #36]	; 0x24
 80077a0:	9310      	str	r3, [sp, #64]	; 0x40
 80077a2:	b975      	cbnz	r5, 80077c2 <_dtoa_r+0x3a>
 80077a4:	2010      	movs	r0, #16
 80077a6:	f001 f8f7 	bl	8008998 <malloc>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6270      	str	r0, [r6, #36]	; 0x24
 80077ae:	b920      	cbnz	r0, 80077ba <_dtoa_r+0x32>
 80077b0:	4bab      	ldr	r3, [pc, #684]	; (8007a60 <_dtoa_r+0x2d8>)
 80077b2:	21ea      	movs	r1, #234	; 0xea
 80077b4:	48ab      	ldr	r0, [pc, #684]	; (8007a64 <_dtoa_r+0x2dc>)
 80077b6:	f002 fc33 	bl	800a020 <__assert_func>
 80077ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077be:	6005      	str	r5, [r0, #0]
 80077c0:	60c5      	str	r5, [r0, #12]
 80077c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077c4:	6819      	ldr	r1, [r3, #0]
 80077c6:	b151      	cbz	r1, 80077de <_dtoa_r+0x56>
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	604a      	str	r2, [r1, #4]
 80077cc:	2301      	movs	r3, #1
 80077ce:	4093      	lsls	r3, r2
 80077d0:	608b      	str	r3, [r1, #8]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f001 f948 	bl	8008a68 <_Bfree>
 80077d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f1b9 0300 	subs.w	r3, r9, #0
 80077e2:	bfbb      	ittet	lt
 80077e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077e8:	9303      	strlt	r3, [sp, #12]
 80077ea:	2300      	movge	r3, #0
 80077ec:	2201      	movlt	r2, #1
 80077ee:	bfac      	ite	ge
 80077f0:	6023      	strge	r3, [r4, #0]
 80077f2:	6022      	strlt	r2, [r4, #0]
 80077f4:	4b9c      	ldr	r3, [pc, #624]	; (8007a68 <_dtoa_r+0x2e0>)
 80077f6:	9c03      	ldr	r4, [sp, #12]
 80077f8:	43a3      	bics	r3, r4
 80077fa:	d11a      	bne.n	8007832 <_dtoa_r+0xaa>
 80077fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007808:	ea53 0308 	orrs.w	r3, r3, r8
 800780c:	f000 8512 	beq.w	8008234 <_dtoa_r+0xaac>
 8007810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007812:	b953      	cbnz	r3, 800782a <_dtoa_r+0xa2>
 8007814:	4b95      	ldr	r3, [pc, #596]	; (8007a6c <_dtoa_r+0x2e4>)
 8007816:	e01f      	b.n	8007858 <_dtoa_r+0xd0>
 8007818:	4b95      	ldr	r3, [pc, #596]	; (8007a70 <_dtoa_r+0x2e8>)
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	9800      	ldr	r0, [sp, #0]
 8007824:	b015      	add	sp, #84	; 0x54
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	4b90      	ldr	r3, [pc, #576]	; (8007a6c <_dtoa_r+0x2e4>)
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	3303      	adds	r3, #3
 8007830:	e7f5      	b.n	800781e <_dtoa_r+0x96>
 8007832:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007836:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007842:	d10b      	bne.n	800785c <_dtoa_r+0xd4>
 8007844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007846:	2301      	movs	r3, #1
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 84ee 	beq.w	800822e <_dtoa_r+0xaa6>
 8007852:	4888      	ldr	r0, [pc, #544]	; (8007a74 <_dtoa_r+0x2ec>)
 8007854:	6018      	str	r0, [r3, #0]
 8007856:	1e43      	subs	r3, r0, #1
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	e7e2      	b.n	8007822 <_dtoa_r+0x9a>
 800785c:	a913      	add	r1, sp, #76	; 0x4c
 800785e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007862:	aa12      	add	r2, sp, #72	; 0x48
 8007864:	4630      	mov	r0, r6
 8007866:	f001 fca7 	bl	80091b8 <__d2b>
 800786a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800786e:	4605      	mov	r5, r0
 8007870:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007872:	2900      	cmp	r1, #0
 8007874:	d047      	beq.n	8007906 <_dtoa_r+0x17e>
 8007876:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007878:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800787c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007880:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007884:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007888:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800788c:	2400      	movs	r4, #0
 800788e:	ec43 2b16 	vmov	d6, r2, r3
 8007892:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007896:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007a48 <_dtoa_r+0x2c0>
 800789a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800789e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007a50 <_dtoa_r+0x2c8>
 80078a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80078a6:	eeb0 7b46 	vmov.f64	d7, d6
 80078aa:	ee06 1a90 	vmov	s13, r1
 80078ae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80078b2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007a58 <_dtoa_r+0x2d0>
 80078b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80078ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80078be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80078c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c6:	ee16 ba90 	vmov	fp, s13
 80078ca:	9411      	str	r4, [sp, #68]	; 0x44
 80078cc:	d508      	bpl.n	80078e0 <_dtoa_r+0x158>
 80078ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80078d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	bf18      	it	ne
 80078dc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80078e0:	f1bb 0f16 	cmp.w	fp, #22
 80078e4:	d832      	bhi.n	800794c <_dtoa_r+0x1c4>
 80078e6:	4b64      	ldr	r3, [pc, #400]	; (8007a78 <_dtoa_r+0x2f0>)
 80078e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078ec:	ed93 7b00 	vldr	d7, [r3]
 80078f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80078f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	d501      	bpl.n	8007902 <_dtoa_r+0x17a>
 80078fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007902:	2300      	movs	r3, #0
 8007904:	e023      	b.n	800794e <_dtoa_r+0x1c6>
 8007906:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007908:	4401      	add	r1, r0
 800790a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800790e:	2b20      	cmp	r3, #32
 8007910:	bfc3      	ittte	gt
 8007912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007916:	fa04 f303 	lslgt.w	r3, r4, r3
 800791a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800791e:	f1c3 0320 	rsble	r3, r3, #32
 8007922:	bfc6      	itte	gt
 8007924:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007928:	ea43 0308 	orrgt.w	r3, r3, r8
 800792c:	fa08 f303 	lslle.w	r3, r8, r3
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007938:	3901      	subs	r1, #1
 800793a:	ed8d 7b00 	vstr	d7, [sp]
 800793e:	9c01      	ldr	r4, [sp, #4]
 8007940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007944:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007948:	2401      	movs	r4, #1
 800794a:	e7a0      	b.n	800788e <_dtoa_r+0x106>
 800794c:	2301      	movs	r3, #1
 800794e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007950:	1a43      	subs	r3, r0, r1
 8007952:	1e5a      	subs	r2, r3, #1
 8007954:	bf45      	ittet	mi
 8007956:	f1c3 0301 	rsbmi	r3, r3, #1
 800795a:	9305      	strmi	r3, [sp, #20]
 800795c:	2300      	movpl	r3, #0
 800795e:	2300      	movmi	r3, #0
 8007960:	9206      	str	r2, [sp, #24]
 8007962:	bf54      	ite	pl
 8007964:	9305      	strpl	r3, [sp, #20]
 8007966:	9306      	strmi	r3, [sp, #24]
 8007968:	f1bb 0f00 	cmp.w	fp, #0
 800796c:	db18      	blt.n	80079a0 <_dtoa_r+0x218>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007974:	445b      	add	r3, fp
 8007976:	9306      	str	r3, [sp, #24]
 8007978:	2300      	movs	r3, #0
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	2a09      	cmp	r2, #9
 800797e:	d849      	bhi.n	8007a14 <_dtoa_r+0x28c>
 8007980:	2a05      	cmp	r2, #5
 8007982:	bfc4      	itt	gt
 8007984:	3a04      	subgt	r2, #4
 8007986:	9207      	strgt	r2, [sp, #28]
 8007988:	9a07      	ldr	r2, [sp, #28]
 800798a:	f1a2 0202 	sub.w	r2, r2, #2
 800798e:	bfcc      	ite	gt
 8007990:	2400      	movgt	r4, #0
 8007992:	2401      	movle	r4, #1
 8007994:	2a03      	cmp	r2, #3
 8007996:	d848      	bhi.n	8007a2a <_dtoa_r+0x2a2>
 8007998:	e8df f002 	tbb	[pc, r2]
 800799c:	3a2c2e0b 	.word	0x3a2c2e0b
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	2200      	movs	r2, #0
 80079a4:	eba3 030b 	sub.w	r3, r3, fp
 80079a8:	9305      	str	r3, [sp, #20]
 80079aa:	920e      	str	r2, [sp, #56]	; 0x38
 80079ac:	f1cb 0300 	rsb	r3, fp, #0
 80079b0:	e7e3      	b.n	800797a <_dtoa_r+0x1f2>
 80079b2:	2200      	movs	r2, #0
 80079b4:	9208      	str	r2, [sp, #32]
 80079b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b8:	2a00      	cmp	r2, #0
 80079ba:	dc39      	bgt.n	8007a30 <_dtoa_r+0x2a8>
 80079bc:	f04f 0a01 	mov.w	sl, #1
 80079c0:	46d1      	mov	r9, sl
 80079c2:	4652      	mov	r2, sl
 80079c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80079c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80079ca:	2100      	movs	r1, #0
 80079cc:	6079      	str	r1, [r7, #4]
 80079ce:	2004      	movs	r0, #4
 80079d0:	f100 0c14 	add.w	ip, r0, #20
 80079d4:	4594      	cmp	ip, r2
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	d92f      	bls.n	8007a3a <_dtoa_r+0x2b2>
 80079da:	4630      	mov	r0, r6
 80079dc:	930c      	str	r3, [sp, #48]	; 0x30
 80079de:	f001 f803 	bl	80089e8 <_Balloc>
 80079e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e4:	9000      	str	r0, [sp, #0]
 80079e6:	4602      	mov	r2, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d149      	bne.n	8007a80 <_dtoa_r+0x2f8>
 80079ec:	4b23      	ldr	r3, [pc, #140]	; (8007a7c <_dtoa_r+0x2f4>)
 80079ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079f2:	e6df      	b.n	80077b4 <_dtoa_r+0x2c>
 80079f4:	2201      	movs	r2, #1
 80079f6:	e7dd      	b.n	80079b4 <_dtoa_r+0x22c>
 80079f8:	2200      	movs	r2, #0
 80079fa:	9208      	str	r2, [sp, #32]
 80079fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fe:	eb0b 0a02 	add.w	sl, fp, r2
 8007a02:	f10a 0901 	add.w	r9, sl, #1
 8007a06:	464a      	mov	r2, r9
 8007a08:	2a01      	cmp	r2, #1
 8007a0a:	bfb8      	it	lt
 8007a0c:	2201      	movlt	r2, #1
 8007a0e:	e7db      	b.n	80079c8 <_dtoa_r+0x240>
 8007a10:	2201      	movs	r2, #1
 8007a12:	e7f2      	b.n	80079fa <_dtoa_r+0x272>
 8007a14:	2401      	movs	r4, #1
 8007a16:	2200      	movs	r2, #0
 8007a18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007a1c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a20:	2100      	movs	r1, #0
 8007a22:	46d1      	mov	r9, sl
 8007a24:	2212      	movs	r2, #18
 8007a26:	9109      	str	r1, [sp, #36]	; 0x24
 8007a28:	e7ce      	b.n	80079c8 <_dtoa_r+0x240>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	9208      	str	r2, [sp, #32]
 8007a2e:	e7f5      	b.n	8007a1c <_dtoa_r+0x294>
 8007a30:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007a34:	46d1      	mov	r9, sl
 8007a36:	4652      	mov	r2, sl
 8007a38:	e7c6      	b.n	80079c8 <_dtoa_r+0x240>
 8007a3a:	3101      	adds	r1, #1
 8007a3c:	6079      	str	r1, [r7, #4]
 8007a3e:	0040      	lsls	r0, r0, #1
 8007a40:	e7c6      	b.n	80079d0 <_dtoa_r+0x248>
 8007a42:	bf00      	nop
 8007a44:	f3af 8000 	nop.w
 8007a48:	636f4361 	.word	0x636f4361
 8007a4c:	3fd287a7 	.word	0x3fd287a7
 8007a50:	8b60c8b3 	.word	0x8b60c8b3
 8007a54:	3fc68a28 	.word	0x3fc68a28
 8007a58:	509f79fb 	.word	0x509f79fb
 8007a5c:	3fd34413 	.word	0x3fd34413
 8007a60:	0800b226 	.word	0x0800b226
 8007a64:	0800b23d 	.word	0x0800b23d
 8007a68:	7ff00000 	.word	0x7ff00000
 8007a6c:	0800b222 	.word	0x0800b222
 8007a70:	0800b219 	.word	0x0800b219
 8007a74:	0800b4a2 	.word	0x0800b4a2
 8007a78:	0800b3b8 	.word	0x0800b3b8
 8007a7c:	0800b29c 	.word	0x0800b29c
 8007a80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007a82:	9900      	ldr	r1, [sp, #0]
 8007a84:	6011      	str	r1, [r2, #0]
 8007a86:	f1b9 0f0e 	cmp.w	r9, #14
 8007a8a:	d872      	bhi.n	8007b72 <_dtoa_r+0x3ea>
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d070      	beq.n	8007b72 <_dtoa_r+0x3ea>
 8007a90:	f1bb 0f00 	cmp.w	fp, #0
 8007a94:	f340 80a6 	ble.w	8007be4 <_dtoa_r+0x45c>
 8007a98:	49ca      	ldr	r1, [pc, #808]	; (8007dc4 <_dtoa_r+0x63c>)
 8007a9a:	f00b 020f 	and.w	r2, fp, #15
 8007a9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007aa2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007aa6:	ed92 7b00 	vldr	d7, [r2]
 8007aaa:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007aae:	f000 808d 	beq.w	8007bcc <_dtoa_r+0x444>
 8007ab2:	4ac5      	ldr	r2, [pc, #788]	; (8007dc8 <_dtoa_r+0x640>)
 8007ab4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007ab8:	ed92 6b08 	vldr	d6, [r2, #32]
 8007abc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007ac0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007ac4:	f001 010f 	and.w	r1, r1, #15
 8007ac8:	2203      	movs	r2, #3
 8007aca:	48bf      	ldr	r0, [pc, #764]	; (8007dc8 <_dtoa_r+0x640>)
 8007acc:	2900      	cmp	r1, #0
 8007ace:	d17f      	bne.n	8007bd0 <_dtoa_r+0x448>
 8007ad0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ad4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007adc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	f000 80b2 	beq.w	8007c48 <_dtoa_r+0x4c0>
 8007ae4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007ae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af4:	f140 80a8 	bpl.w	8007c48 <_dtoa_r+0x4c0>
 8007af8:	f1b9 0f00 	cmp.w	r9, #0
 8007afc:	f000 80a4 	beq.w	8007c48 <_dtoa_r+0x4c0>
 8007b00:	f1ba 0f00 	cmp.w	sl, #0
 8007b04:	dd31      	ble.n	8007b6a <_dtoa_r+0x3e2>
 8007b06:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007b0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b12:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b16:	3201      	adds	r2, #1
 8007b18:	4650      	mov	r0, sl
 8007b1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b1e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007b22:	ee07 2a90 	vmov	s15, r2
 8007b26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007b2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007b2e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007b32:	9c03      	ldr	r4, [sp, #12]
 8007b34:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007b38:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 8086 	bne.w	8007c4e <_dtoa_r+0x4c6>
 8007b42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007b46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007b4a:	ec42 1b17 	vmov	d7, r1, r2
 8007b4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b56:	f300 8272 	bgt.w	800803e <_dtoa_r+0x8b6>
 8007b5a:	eeb1 7b47 	vneg.f64	d7, d7
 8007b5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	f100 8267 	bmi.w	8008038 <_dtoa_r+0x8b0>
 8007b6a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007b6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007b72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	f2c0 8129 	blt.w	8007dcc <_dtoa_r+0x644>
 8007b7a:	f1bb 0f0e 	cmp.w	fp, #14
 8007b7e:	f300 8125 	bgt.w	8007dcc <_dtoa_r+0x644>
 8007b82:	4b90      	ldr	r3, [pc, #576]	; (8007dc4 <_dtoa_r+0x63c>)
 8007b84:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b88:	ed93 6b00 	vldr	d6, [r3]
 8007b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f280 80c3 	bge.w	8007d1a <_dtoa_r+0x592>
 8007b94:	f1b9 0f00 	cmp.w	r9, #0
 8007b98:	f300 80bf 	bgt.w	8007d1a <_dtoa_r+0x592>
 8007b9c:	f040 824c 	bne.w	8008038 <_dtoa_r+0x8b0>
 8007ba0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007ba4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb4:	464c      	mov	r4, r9
 8007bb6:	464f      	mov	r7, r9
 8007bb8:	f280 8222 	bge.w	8008000 <_dtoa_r+0x878>
 8007bbc:	f8dd 8000 	ldr.w	r8, [sp]
 8007bc0:	2331      	movs	r3, #49	; 0x31
 8007bc2:	f808 3b01 	strb.w	r3, [r8], #1
 8007bc6:	f10b 0b01 	add.w	fp, fp, #1
 8007bca:	e21e      	b.n	800800a <_dtoa_r+0x882>
 8007bcc:	2202      	movs	r2, #2
 8007bce:	e77c      	b.n	8007aca <_dtoa_r+0x342>
 8007bd0:	07cc      	lsls	r4, r1, #31
 8007bd2:	d504      	bpl.n	8007bde <_dtoa_r+0x456>
 8007bd4:	ed90 6b00 	vldr	d6, [r0]
 8007bd8:	3201      	adds	r2, #1
 8007bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bde:	1049      	asrs	r1, r1, #1
 8007be0:	3008      	adds	r0, #8
 8007be2:	e773      	b.n	8007acc <_dtoa_r+0x344>
 8007be4:	d02e      	beq.n	8007c44 <_dtoa_r+0x4bc>
 8007be6:	f1cb 0100 	rsb	r1, fp, #0
 8007bea:	4a76      	ldr	r2, [pc, #472]	; (8007dc4 <_dtoa_r+0x63c>)
 8007bec:	f001 000f 	and.w	r0, r1, #15
 8007bf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007bf4:	ed92 7b00 	vldr	d7, [r2]
 8007bf8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007bfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007c00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007c04:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007c08:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007c0c:	486e      	ldr	r0, [pc, #440]	; (8007dc8 <_dtoa_r+0x640>)
 8007c0e:	1109      	asrs	r1, r1, #4
 8007c10:	2400      	movs	r4, #0
 8007c12:	2202      	movs	r2, #2
 8007c14:	b939      	cbnz	r1, 8007c26 <_dtoa_r+0x49e>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	f43f af60 	beq.w	8007adc <_dtoa_r+0x354>
 8007c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c24:	e75a      	b.n	8007adc <_dtoa_r+0x354>
 8007c26:	07cf      	lsls	r7, r1, #31
 8007c28:	d509      	bpl.n	8007c3e <_dtoa_r+0x4b6>
 8007c2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007c2e:	ed90 7b00 	vldr	d7, [r0]
 8007c32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007c36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007c3a:	3201      	adds	r2, #1
 8007c3c:	2401      	movs	r4, #1
 8007c3e:	1049      	asrs	r1, r1, #1
 8007c40:	3008      	adds	r0, #8
 8007c42:	e7e7      	b.n	8007c14 <_dtoa_r+0x48c>
 8007c44:	2202      	movs	r2, #2
 8007c46:	e749      	b.n	8007adc <_dtoa_r+0x354>
 8007c48:	465f      	mov	r7, fp
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	e765      	b.n	8007b1a <_dtoa_r+0x392>
 8007c4e:	ec42 1b17 	vmov	d7, r1, r2
 8007c52:	4a5c      	ldr	r2, [pc, #368]	; (8007dc4 <_dtoa_r+0x63c>)
 8007c54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c58:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007c5c:	9a00      	ldr	r2, [sp, #0]
 8007c5e:	1814      	adds	r4, r2, r0
 8007c60:	9a08      	ldr	r2, [sp, #32]
 8007c62:	b352      	cbz	r2, 8007cba <_dtoa_r+0x532>
 8007c64:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007c68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c6c:	f8dd 8000 	ldr.w	r8, [sp]
 8007c70:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007c74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007c78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007c7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c80:	ee14 2a90 	vmov	r2, s9
 8007c84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c88:	3230      	adds	r2, #48	; 0x30
 8007c8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c96:	f808 2b01 	strb.w	r2, [r8], #1
 8007c9a:	d439      	bmi.n	8007d10 <_dtoa_r+0x588>
 8007c9c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007ca0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca8:	d472      	bmi.n	8007d90 <_dtoa_r+0x608>
 8007caa:	45a0      	cmp	r8, r4
 8007cac:	f43f af5d 	beq.w	8007b6a <_dtoa_r+0x3e2>
 8007cb0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007cb4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007cb8:	e7e0      	b.n	8007c7c <_dtoa_r+0x4f4>
 8007cba:	f8dd 8000 	ldr.w	r8, [sp]
 8007cbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007cc8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ccc:	ee14 2a90 	vmov	r2, s9
 8007cd0:	3230      	adds	r2, #48	; 0x30
 8007cd2:	f808 2b01 	strb.w	r2, [r8], #1
 8007cd6:	45a0      	cmp	r8, r4
 8007cd8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007cdc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ce0:	d118      	bne.n	8007d14 <_dtoa_r+0x58c>
 8007ce2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007ce6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007cea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	dc4d      	bgt.n	8007d90 <_dtoa_r+0x608>
 8007cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d00:	f57f af33 	bpl.w	8007b6a <_dtoa_r+0x3e2>
 8007d04:	4688      	mov	r8, r1
 8007d06:	3901      	subs	r1, #1
 8007d08:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	d0f9      	beq.n	8007d04 <_dtoa_r+0x57c>
 8007d10:	46bb      	mov	fp, r7
 8007d12:	e02a      	b.n	8007d6a <_dtoa_r+0x5e2>
 8007d14:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d18:	e7d6      	b.n	8007cc8 <_dtoa_r+0x540>
 8007d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007d22:	f8dd 8000 	ldr.w	r8, [sp]
 8007d26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007d2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007d2e:	ee15 3a10 	vmov	r3, s10
 8007d32:	3330      	adds	r3, #48	; 0x30
 8007d34:	f808 3b01 	strb.w	r3, [r8], #1
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	eba8 0303 	sub.w	r3, r8, r3
 8007d3e:	4599      	cmp	r9, r3
 8007d40:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007d44:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007d48:	d133      	bne.n	8007db2 <_dtoa_r+0x62a>
 8007d4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007d4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d56:	dc1a      	bgt.n	8007d8e <_dtoa_r+0x606>
 8007d58:	eeb4 7b46 	vcmp.f64	d7, d6
 8007d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d60:	d103      	bne.n	8007d6a <_dtoa_r+0x5e2>
 8007d62:	ee15 3a10 	vmov	r3, s10
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d411      	bmi.n	8007d8e <_dtoa_r+0x606>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 fe7b 	bl	8008a68 <_Bfree>
 8007d72:	2300      	movs	r3, #0
 8007d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d76:	f888 3000 	strb.w	r3, [r8]
 8007d7a:	f10b 0301 	add.w	r3, fp, #1
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f43f ad4d 	beq.w	8007822 <_dtoa_r+0x9a>
 8007d88:	f8c3 8000 	str.w	r8, [r3]
 8007d8c:	e549      	b.n	8007822 <_dtoa_r+0x9a>
 8007d8e:	465f      	mov	r7, fp
 8007d90:	4643      	mov	r3, r8
 8007d92:	4698      	mov	r8, r3
 8007d94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d98:	2a39      	cmp	r2, #57	; 0x39
 8007d9a:	d106      	bne.n	8007daa <_dtoa_r+0x622>
 8007d9c:	9a00      	ldr	r2, [sp, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d1f7      	bne.n	8007d92 <_dtoa_r+0x60a>
 8007da2:	9900      	ldr	r1, [sp, #0]
 8007da4:	2230      	movs	r2, #48	; 0x30
 8007da6:	3701      	adds	r7, #1
 8007da8:	700a      	strb	r2, [r1, #0]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	3201      	adds	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	e7ae      	b.n	8007d10 <_dtoa_r+0x588>
 8007db2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007db6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbe:	d1b2      	bne.n	8007d26 <_dtoa_r+0x59e>
 8007dc0:	e7d3      	b.n	8007d6a <_dtoa_r+0x5e2>
 8007dc2:	bf00      	nop
 8007dc4:	0800b3b8 	.word	0x0800b3b8
 8007dc8:	0800b390 	.word	0x0800b390
 8007dcc:	9908      	ldr	r1, [sp, #32]
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	f000 80d1 	beq.w	8007f76 <_dtoa_r+0x7ee>
 8007dd4:	9907      	ldr	r1, [sp, #28]
 8007dd6:	2901      	cmp	r1, #1
 8007dd8:	f300 80b4 	bgt.w	8007f44 <_dtoa_r+0x7bc>
 8007ddc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007dde:	2900      	cmp	r1, #0
 8007de0:	f000 80ac 	beq.w	8007f3c <_dtoa_r+0x7b4>
 8007de4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007de8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007dec:	461c      	mov	r4, r3
 8007dee:	930a      	str	r3, [sp, #40]	; 0x28
 8007df0:	9b05      	ldr	r3, [sp, #20]
 8007df2:	4413      	add	r3, r2
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	9b06      	ldr	r3, [sp, #24]
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	9306      	str	r3, [sp, #24]
 8007e00:	f000 ff38 	bl	8008c74 <__i2b>
 8007e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e06:	4607      	mov	r7, r0
 8007e08:	f1b8 0f00 	cmp.w	r8, #0
 8007e0c:	dd0d      	ble.n	8007e2a <_dtoa_r+0x6a2>
 8007e0e:	9a06      	ldr	r2, [sp, #24]
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	dd0a      	ble.n	8007e2a <_dtoa_r+0x6a2>
 8007e14:	4542      	cmp	r2, r8
 8007e16:	9905      	ldr	r1, [sp, #20]
 8007e18:	bfa8      	it	ge
 8007e1a:	4642      	movge	r2, r8
 8007e1c:	1a89      	subs	r1, r1, r2
 8007e1e:	9105      	str	r1, [sp, #20]
 8007e20:	9906      	ldr	r1, [sp, #24]
 8007e22:	eba8 0802 	sub.w	r8, r8, r2
 8007e26:	1a8a      	subs	r2, r1, r2
 8007e28:	9206      	str	r2, [sp, #24]
 8007e2a:	b303      	cbz	r3, 8007e6e <_dtoa_r+0x6e6>
 8007e2c:	9a08      	ldr	r2, [sp, #32]
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	f000 80a6 	beq.w	8007f80 <_dtoa_r+0x7f8>
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	dd13      	ble.n	8007e60 <_dtoa_r+0x6d8>
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e40:	f000 ffd4 	bl	8008dec <__pow5mult>
 8007e44:	462a      	mov	r2, r5
 8007e46:	4601      	mov	r1, r0
 8007e48:	4607      	mov	r7, r0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f000 ff28 	bl	8008ca0 <__multiply>
 8007e50:	4629      	mov	r1, r5
 8007e52:	900a      	str	r0, [sp, #40]	; 0x28
 8007e54:	4630      	mov	r0, r6
 8007e56:	f000 fe07 	bl	8008a68 <_Bfree>
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e5e:	4615      	mov	r5, r2
 8007e60:	1b1a      	subs	r2, r3, r4
 8007e62:	d004      	beq.n	8007e6e <_dtoa_r+0x6e6>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 ffc0 	bl	8008dec <__pow5mult>
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 feff 	bl	8008c74 <__i2b>
 8007e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	f340 8082 	ble.w	8007f84 <_dtoa_r+0x7fc>
 8007e80:	461a      	mov	r2, r3
 8007e82:	4601      	mov	r1, r0
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 ffb1 	bl	8008dec <__pow5mult>
 8007e8a:	9b07      	ldr	r3, [sp, #28]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	4604      	mov	r4, r0
 8007e90:	dd7b      	ble.n	8007f8a <_dtoa_r+0x802>
 8007e92:	2300      	movs	r3, #0
 8007e94:	930a      	str	r3, [sp, #40]	; 0x28
 8007e96:	6922      	ldr	r2, [r4, #16]
 8007e98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e9c:	6910      	ldr	r0, [r2, #16]
 8007e9e:	f000 fe99 	bl	8008bd4 <__hi0bits>
 8007ea2:	f1c0 0020 	rsb	r0, r0, #32
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	4418      	add	r0, r3
 8007eaa:	f010 001f 	ands.w	r0, r0, #31
 8007eae:	f000 808d 	beq.w	8007fcc <_dtoa_r+0x844>
 8007eb2:	f1c0 0220 	rsb	r2, r0, #32
 8007eb6:	2a04      	cmp	r2, #4
 8007eb8:	f340 8086 	ble.w	8007fc8 <_dtoa_r+0x840>
 8007ebc:	f1c0 001c 	rsb	r0, r0, #28
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	4403      	add	r3, r0
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	9b06      	ldr	r3, [sp, #24]
 8007ec8:	4403      	add	r3, r0
 8007eca:	4480      	add	r8, r0
 8007ecc:	9306      	str	r3, [sp, #24]
 8007ece:	9b05      	ldr	r3, [sp, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd05      	ble.n	8007ee0 <_dtoa_r+0x758>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 ffe1 	bl	8008ea0 <__lshift>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd05      	ble.n	8007ef2 <_dtoa_r+0x76a>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 ffd8 	bl	8008ea0 <__lshift>
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d06b      	beq.n	8007fd0 <_dtoa_r+0x848>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	f001 f83c 	bl	8008f78 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	da65      	bge.n	8007fd0 <_dtoa_r+0x848>
 8007f04:	2300      	movs	r3, #0
 8007f06:	4629      	mov	r1, r5
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 fdce 	bl	8008aac <__multadd>
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f16:	4605      	mov	r5, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 8192 	beq.w	8008242 <_dtoa_r+0xaba>
 8007f1e:	4639      	mov	r1, r7
 8007f20:	2300      	movs	r3, #0
 8007f22:	220a      	movs	r2, #10
 8007f24:	4630      	mov	r0, r6
 8007f26:	f000 fdc1 	bl	8008aac <__multadd>
 8007f2a:	f1ba 0f00 	cmp.w	sl, #0
 8007f2e:	4607      	mov	r7, r0
 8007f30:	f300 808e 	bgt.w	8008050 <_dtoa_r+0x8c8>
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	dc51      	bgt.n	8007fde <_dtoa_r+0x856>
 8007f3a:	e089      	b.n	8008050 <_dtoa_r+0x8c8>
 8007f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f42:	e751      	b.n	8007de8 <_dtoa_r+0x660>
 8007f44:	f109 34ff 	add.w	r4, r9, #4294967295
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	bfbf      	itttt	lt
 8007f4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007f4e:	1ae3      	sublt	r3, r4, r3
 8007f50:	18d2      	addlt	r2, r2, r3
 8007f52:	4613      	movlt	r3, r2
 8007f54:	bfb7      	itett	lt
 8007f56:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f58:	1b1c      	subge	r4, r3, r4
 8007f5a:	4623      	movlt	r3, r4
 8007f5c:	2400      	movlt	r4, #0
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	bfb5      	itete	lt
 8007f64:	9a05      	ldrlt	r2, [sp, #20]
 8007f66:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8007f6a:	eba2 0809 	sublt.w	r8, r2, r9
 8007f6e:	464a      	movge	r2, r9
 8007f70:	bfb8      	it	lt
 8007f72:	2200      	movlt	r2, #0
 8007f74:	e73b      	b.n	8007dee <_dtoa_r+0x666>
 8007f76:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007f7a:	9f08      	ldr	r7, [sp, #32]
 8007f7c:	461c      	mov	r4, r3
 8007f7e:	e743      	b.n	8007e08 <_dtoa_r+0x680>
 8007f80:	461a      	mov	r2, r3
 8007f82:	e76f      	b.n	8007e64 <_dtoa_r+0x6dc>
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	dc18      	bgt.n	8007fbc <_dtoa_r+0x834>
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	b9b3      	cbnz	r3, 8007fbc <_dtoa_r+0x834>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007f94:	b9a2      	cbnz	r2, 8007fc0 <_dtoa_r+0x838>
 8007f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f9a:	0d12      	lsrs	r2, r2, #20
 8007f9c:	0512      	lsls	r2, r2, #20
 8007f9e:	b18a      	cbz	r2, 8007fc4 <_dtoa_r+0x83c>
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	2301      	movs	r3, #1
 8007fae:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f47f af6f 	bne.w	8007e96 <_dtoa_r+0x70e>
 8007fb8:	2001      	movs	r0, #1
 8007fba:	e774      	b.n	8007ea6 <_dtoa_r+0x71e>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e7f6      	b.n	8007fae <_dtoa_r+0x826>
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	e7f4      	b.n	8007fae <_dtoa_r+0x826>
 8007fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007fc6:	e7f3      	b.n	8007fb0 <_dtoa_r+0x828>
 8007fc8:	d081      	beq.n	8007ece <_dtoa_r+0x746>
 8007fca:	4610      	mov	r0, r2
 8007fcc:	301c      	adds	r0, #28
 8007fce:	e777      	b.n	8007ec0 <_dtoa_r+0x738>
 8007fd0:	f1b9 0f00 	cmp.w	r9, #0
 8007fd4:	dc37      	bgt.n	8008046 <_dtoa_r+0x8be>
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	dd34      	ble.n	8008046 <_dtoa_r+0x8be>
 8007fdc:	46ca      	mov	sl, r9
 8007fde:	f1ba 0f00 	cmp.w	sl, #0
 8007fe2:	d10d      	bne.n	8008000 <_dtoa_r+0x878>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4653      	mov	r3, sl
 8007fe8:	2205      	movs	r2, #5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 fd5e 	bl	8008aac <__multadd>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 ffbf 	bl	8008f78 <__mcmp>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f73f adde 	bgt.w	8007bbc <_dtoa_r+0x434>
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	f8dd 8000 	ldr.w	r8, [sp]
 8008006:	ea6f 0b03 	mvn.w	fp, r3
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	4621      	mov	r1, r4
 8008010:	4630      	mov	r0, r6
 8008012:	f000 fd29 	bl	8008a68 <_Bfree>
 8008016:	2f00      	cmp	r7, #0
 8008018:	f43f aea7 	beq.w	8007d6a <_dtoa_r+0x5e2>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	d005      	beq.n	800802e <_dtoa_r+0x8a6>
 8008022:	45b9      	cmp	r9, r7
 8008024:	d003      	beq.n	800802e <_dtoa_r+0x8a6>
 8008026:	4649      	mov	r1, r9
 8008028:	4630      	mov	r0, r6
 800802a:	f000 fd1d 	bl	8008a68 <_Bfree>
 800802e:	4639      	mov	r1, r7
 8008030:	4630      	mov	r0, r6
 8008032:	f000 fd19 	bl	8008a68 <_Bfree>
 8008036:	e698      	b.n	8007d6a <_dtoa_r+0x5e2>
 8008038:	2400      	movs	r4, #0
 800803a:	4627      	mov	r7, r4
 800803c:	e7e0      	b.n	8008000 <_dtoa_r+0x878>
 800803e:	46bb      	mov	fp, r7
 8008040:	4604      	mov	r4, r0
 8008042:	4607      	mov	r7, r0
 8008044:	e5ba      	b.n	8007bbc <_dtoa_r+0x434>
 8008046:	9b08      	ldr	r3, [sp, #32]
 8008048:	46ca      	mov	sl, r9
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8100 	beq.w	8008250 <_dtoa_r+0xac8>
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	dd05      	ble.n	8008062 <_dtoa_r+0x8da>
 8008056:	4639      	mov	r1, r7
 8008058:	4642      	mov	r2, r8
 800805a:	4630      	mov	r0, r6
 800805c:	f000 ff20 	bl	8008ea0 <__lshift>
 8008060:	4607      	mov	r7, r0
 8008062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d05d      	beq.n	8008124 <_dtoa_r+0x99c>
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	4630      	mov	r0, r6
 800806c:	f000 fcbc 	bl	80089e8 <_Balloc>
 8008070:	4680      	mov	r8, r0
 8008072:	b928      	cbnz	r0, 8008080 <_dtoa_r+0x8f8>
 8008074:	4b82      	ldr	r3, [pc, #520]	; (8008280 <_dtoa_r+0xaf8>)
 8008076:	4602      	mov	r2, r0
 8008078:	f240 21ea 	movw	r1, #746	; 0x2ea
 800807c:	f7ff bb9a 	b.w	80077b4 <_dtoa_r+0x2c>
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	3202      	adds	r2, #2
 8008084:	0092      	lsls	r2, r2, #2
 8008086:	f107 010c 	add.w	r1, r7, #12
 800808a:	300c      	adds	r0, #12
 800808c:	f000 fc9e 	bl	80089cc <memcpy>
 8008090:	2201      	movs	r2, #1
 8008092:	4641      	mov	r1, r8
 8008094:	4630      	mov	r0, r6
 8008096:	f000 ff03 	bl	8008ea0 <__lshift>
 800809a:	9b00      	ldr	r3, [sp, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	9305      	str	r3, [sp, #20]
 80080a0:	9b00      	ldr	r3, [sp, #0]
 80080a2:	4453      	add	r3, sl
 80080a4:	9309      	str	r3, [sp, #36]	; 0x24
 80080a6:	9b02      	ldr	r3, [sp, #8]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	46b9      	mov	r9, r7
 80080ae:	9308      	str	r3, [sp, #32]
 80080b0:	4607      	mov	r7, r0
 80080b2:	9b05      	ldr	r3, [sp, #20]
 80080b4:	4621      	mov	r1, r4
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4628      	mov	r0, r5
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	f7ff fad8 	bl	8007670 <quorem>
 80080c0:	4603      	mov	r3, r0
 80080c2:	3330      	adds	r3, #48	; 0x30
 80080c4:	9006      	str	r0, [sp, #24]
 80080c6:	4649      	mov	r1, r9
 80080c8:	4628      	mov	r0, r5
 80080ca:	930a      	str	r3, [sp, #40]	; 0x28
 80080cc:	f000 ff54 	bl	8008f78 <__mcmp>
 80080d0:	463a      	mov	r2, r7
 80080d2:	4682      	mov	sl, r0
 80080d4:	4621      	mov	r1, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 ff6a 	bl	8008fb0 <__mdiff>
 80080dc:	68c2      	ldr	r2, [r0, #12]
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	4680      	mov	r8, r0
 80080e2:	bb0a      	cbnz	r2, 8008128 <_dtoa_r+0x9a0>
 80080e4:	4601      	mov	r1, r0
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 ff46 	bl	8008f78 <__mcmp>
 80080ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ee:	4602      	mov	r2, r0
 80080f0:	4641      	mov	r1, r8
 80080f2:	4630      	mov	r0, r6
 80080f4:	920e      	str	r2, [sp, #56]	; 0x38
 80080f6:	930a      	str	r3, [sp, #40]	; 0x28
 80080f8:	f000 fcb6 	bl	8008a68 <_Bfree>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008100:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008104:	ea43 0102 	orr.w	r1, r3, r2
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	430b      	orrs	r3, r1
 800810c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800810e:	d10d      	bne.n	800812c <_dtoa_r+0x9a4>
 8008110:	2b39      	cmp	r3, #57	; 0x39
 8008112:	d029      	beq.n	8008168 <_dtoa_r+0x9e0>
 8008114:	f1ba 0f00 	cmp.w	sl, #0
 8008118:	dd01      	ble.n	800811e <_dtoa_r+0x996>
 800811a:	9b06      	ldr	r3, [sp, #24]
 800811c:	3331      	adds	r3, #49	; 0x31
 800811e:	9a02      	ldr	r2, [sp, #8]
 8008120:	7013      	strb	r3, [r2, #0]
 8008122:	e774      	b.n	800800e <_dtoa_r+0x886>
 8008124:	4638      	mov	r0, r7
 8008126:	e7b8      	b.n	800809a <_dtoa_r+0x912>
 8008128:	2201      	movs	r2, #1
 800812a:	e7e1      	b.n	80080f0 <_dtoa_r+0x968>
 800812c:	f1ba 0f00 	cmp.w	sl, #0
 8008130:	db06      	blt.n	8008140 <_dtoa_r+0x9b8>
 8008132:	9907      	ldr	r1, [sp, #28]
 8008134:	ea41 0a0a 	orr.w	sl, r1, sl
 8008138:	9908      	ldr	r1, [sp, #32]
 800813a:	ea5a 0101 	orrs.w	r1, sl, r1
 800813e:	d120      	bne.n	8008182 <_dtoa_r+0x9fa>
 8008140:	2a00      	cmp	r2, #0
 8008142:	ddec      	ble.n	800811e <_dtoa_r+0x996>
 8008144:	4629      	mov	r1, r5
 8008146:	2201      	movs	r2, #1
 8008148:	4630      	mov	r0, r6
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	f000 fea8 	bl	8008ea0 <__lshift>
 8008150:	4621      	mov	r1, r4
 8008152:	4605      	mov	r5, r0
 8008154:	f000 ff10 	bl	8008f78 <__mcmp>
 8008158:	2800      	cmp	r0, #0
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	dc02      	bgt.n	8008164 <_dtoa_r+0x9dc>
 800815e:	d1de      	bne.n	800811e <_dtoa_r+0x996>
 8008160:	07da      	lsls	r2, r3, #31
 8008162:	d5dc      	bpl.n	800811e <_dtoa_r+0x996>
 8008164:	2b39      	cmp	r3, #57	; 0x39
 8008166:	d1d8      	bne.n	800811a <_dtoa_r+0x992>
 8008168:	9a02      	ldr	r2, [sp, #8]
 800816a:	2339      	movs	r3, #57	; 0x39
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	4643      	mov	r3, r8
 8008170:	4698      	mov	r8, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008178:	2a39      	cmp	r2, #57	; 0x39
 800817a:	d051      	beq.n	8008220 <_dtoa_r+0xa98>
 800817c:	3201      	adds	r2, #1
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e745      	b.n	800800e <_dtoa_r+0x886>
 8008182:	2a00      	cmp	r2, #0
 8008184:	dd03      	ble.n	800818e <_dtoa_r+0xa06>
 8008186:	2b39      	cmp	r3, #57	; 0x39
 8008188:	d0ee      	beq.n	8008168 <_dtoa_r+0x9e0>
 800818a:	3301      	adds	r3, #1
 800818c:	e7c7      	b.n	800811e <_dtoa_r+0x996>
 800818e:	9a05      	ldr	r2, [sp, #20]
 8008190:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008192:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008196:	428a      	cmp	r2, r1
 8008198:	d02b      	beq.n	80081f2 <_dtoa_r+0xa6a>
 800819a:	4629      	mov	r1, r5
 800819c:	2300      	movs	r3, #0
 800819e:	220a      	movs	r2, #10
 80081a0:	4630      	mov	r0, r6
 80081a2:	f000 fc83 	bl	8008aac <__multadd>
 80081a6:	45b9      	cmp	r9, r7
 80081a8:	4605      	mov	r5, r0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	f04f 020a 	mov.w	r2, #10
 80081b2:	4649      	mov	r1, r9
 80081b4:	4630      	mov	r0, r6
 80081b6:	d107      	bne.n	80081c8 <_dtoa_r+0xa40>
 80081b8:	f000 fc78 	bl	8008aac <__multadd>
 80081bc:	4681      	mov	r9, r0
 80081be:	4607      	mov	r7, r0
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	e774      	b.n	80080b2 <_dtoa_r+0x92a>
 80081c8:	f000 fc70 	bl	8008aac <__multadd>
 80081cc:	4639      	mov	r1, r7
 80081ce:	4681      	mov	r9, r0
 80081d0:	2300      	movs	r3, #0
 80081d2:	220a      	movs	r2, #10
 80081d4:	4630      	mov	r0, r6
 80081d6:	f000 fc69 	bl	8008aac <__multadd>
 80081da:	4607      	mov	r7, r0
 80081dc:	e7f0      	b.n	80081c0 <_dtoa_r+0xa38>
 80081de:	f1ba 0f00 	cmp.w	sl, #0
 80081e2:	9a00      	ldr	r2, [sp, #0]
 80081e4:	bfcc      	ite	gt
 80081e6:	46d0      	movgt	r8, sl
 80081e8:	f04f 0801 	movle.w	r8, #1
 80081ec:	4490      	add	r8, r2
 80081ee:	f04f 0900 	mov.w	r9, #0
 80081f2:	4629      	mov	r1, r5
 80081f4:	2201      	movs	r2, #1
 80081f6:	4630      	mov	r0, r6
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f000 fe51 	bl	8008ea0 <__lshift>
 80081fe:	4621      	mov	r1, r4
 8008200:	4605      	mov	r5, r0
 8008202:	f000 feb9 	bl	8008f78 <__mcmp>
 8008206:	2800      	cmp	r0, #0
 8008208:	dcb1      	bgt.n	800816e <_dtoa_r+0x9e6>
 800820a:	d102      	bne.n	8008212 <_dtoa_r+0xa8a>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	07db      	lsls	r3, r3, #31
 8008210:	d4ad      	bmi.n	800816e <_dtoa_r+0x9e6>
 8008212:	4643      	mov	r3, r8
 8008214:	4698      	mov	r8, r3
 8008216:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821a:	2a30      	cmp	r2, #48	; 0x30
 800821c:	d0fa      	beq.n	8008214 <_dtoa_r+0xa8c>
 800821e:	e6f6      	b.n	800800e <_dtoa_r+0x886>
 8008220:	9a00      	ldr	r2, [sp, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d1a4      	bne.n	8008170 <_dtoa_r+0x9e8>
 8008226:	f10b 0b01 	add.w	fp, fp, #1
 800822a:	2331      	movs	r3, #49	; 0x31
 800822c:	e778      	b.n	8008120 <_dtoa_r+0x998>
 800822e:	4b15      	ldr	r3, [pc, #84]	; (8008284 <_dtoa_r+0xafc>)
 8008230:	f7ff bb12 	b.w	8007858 <_dtoa_r+0xd0>
 8008234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008236:	2b00      	cmp	r3, #0
 8008238:	f47f aaee 	bne.w	8007818 <_dtoa_r+0x90>
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <_dtoa_r+0xb00>)
 800823e:	f7ff bb0b 	b.w	8007858 <_dtoa_r+0xd0>
 8008242:	f1ba 0f00 	cmp.w	sl, #0
 8008246:	dc03      	bgt.n	8008250 <_dtoa_r+0xac8>
 8008248:	9b07      	ldr	r3, [sp, #28]
 800824a:	2b02      	cmp	r3, #2
 800824c:	f73f aec7 	bgt.w	8007fde <_dtoa_r+0x856>
 8008250:	f8dd 8000 	ldr.w	r8, [sp]
 8008254:	4621      	mov	r1, r4
 8008256:	4628      	mov	r0, r5
 8008258:	f7ff fa0a 	bl	8007670 <quorem>
 800825c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008260:	f808 3b01 	strb.w	r3, [r8], #1
 8008264:	9a00      	ldr	r2, [sp, #0]
 8008266:	eba8 0202 	sub.w	r2, r8, r2
 800826a:	4592      	cmp	sl, r2
 800826c:	ddb7      	ble.n	80081de <_dtoa_r+0xa56>
 800826e:	4629      	mov	r1, r5
 8008270:	2300      	movs	r3, #0
 8008272:	220a      	movs	r2, #10
 8008274:	4630      	mov	r0, r6
 8008276:	f000 fc19 	bl	8008aac <__multadd>
 800827a:	4605      	mov	r5, r0
 800827c:	e7ea      	b.n	8008254 <_dtoa_r+0xacc>
 800827e:	bf00      	nop
 8008280:	0800b29c 	.word	0x0800b29c
 8008284:	0800b4a1 	.word	0x0800b4a1
 8008288:	0800b219 	.word	0x0800b219

0800828c <rshift>:
 800828c:	6903      	ldr	r3, [r0, #16]
 800828e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800829a:	f100 0414 	add.w	r4, r0, #20
 800829e:	dd45      	ble.n	800832c <rshift+0xa0>
 80082a0:	f011 011f 	ands.w	r1, r1, #31
 80082a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082ac:	d10c      	bne.n	80082c8 <rshift+0x3c>
 80082ae:	f100 0710 	add.w	r7, r0, #16
 80082b2:	4629      	mov	r1, r5
 80082b4:	42b1      	cmp	r1, r6
 80082b6:	d334      	bcc.n	8008322 <rshift+0x96>
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	1eea      	subs	r2, r5, #3
 80082be:	4296      	cmp	r6, r2
 80082c0:	bf38      	it	cc
 80082c2:	2300      	movcc	r3, #0
 80082c4:	4423      	add	r3, r4
 80082c6:	e015      	b.n	80082f4 <rshift+0x68>
 80082c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082cc:	f1c1 0820 	rsb	r8, r1, #32
 80082d0:	40cf      	lsrs	r7, r1
 80082d2:	f105 0e04 	add.w	lr, r5, #4
 80082d6:	46a1      	mov	r9, r4
 80082d8:	4576      	cmp	r6, lr
 80082da:	46f4      	mov	ip, lr
 80082dc:	d815      	bhi.n	800830a <rshift+0x7e>
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	009a      	lsls	r2, r3, #2
 80082e2:	3a04      	subs	r2, #4
 80082e4:	3501      	adds	r5, #1
 80082e6:	42ae      	cmp	r6, r5
 80082e8:	bf38      	it	cc
 80082ea:	2200      	movcc	r2, #0
 80082ec:	18a3      	adds	r3, r4, r2
 80082ee:	50a7      	str	r7, [r4, r2]
 80082f0:	b107      	cbz	r7, 80082f4 <rshift+0x68>
 80082f2:	3304      	adds	r3, #4
 80082f4:	1b1a      	subs	r2, r3, r4
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082fc:	bf08      	it	eq
 80082fe:	2300      	moveq	r3, #0
 8008300:	6102      	str	r2, [r0, #16]
 8008302:	bf08      	it	eq
 8008304:	6143      	streq	r3, [r0, #20]
 8008306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830a:	f8dc c000 	ldr.w	ip, [ip]
 800830e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008312:	ea4c 0707 	orr.w	r7, ip, r7
 8008316:	f849 7b04 	str.w	r7, [r9], #4
 800831a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800831e:	40cf      	lsrs	r7, r1
 8008320:	e7da      	b.n	80082d8 <rshift+0x4c>
 8008322:	f851 cb04 	ldr.w	ip, [r1], #4
 8008326:	f847 cf04 	str.w	ip, [r7, #4]!
 800832a:	e7c3      	b.n	80082b4 <rshift+0x28>
 800832c:	4623      	mov	r3, r4
 800832e:	e7e1      	b.n	80082f4 <rshift+0x68>

08008330 <__hexdig_fun>:
 8008330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008334:	2b09      	cmp	r3, #9
 8008336:	d802      	bhi.n	800833e <__hexdig_fun+0xe>
 8008338:	3820      	subs	r0, #32
 800833a:	b2c0      	uxtb	r0, r0
 800833c:	4770      	bx	lr
 800833e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008342:	2b05      	cmp	r3, #5
 8008344:	d801      	bhi.n	800834a <__hexdig_fun+0x1a>
 8008346:	3847      	subs	r0, #71	; 0x47
 8008348:	e7f7      	b.n	800833a <__hexdig_fun+0xa>
 800834a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800834e:	2b05      	cmp	r3, #5
 8008350:	d801      	bhi.n	8008356 <__hexdig_fun+0x26>
 8008352:	3827      	subs	r0, #39	; 0x27
 8008354:	e7f1      	b.n	800833a <__hexdig_fun+0xa>
 8008356:	2000      	movs	r0, #0
 8008358:	4770      	bx	lr
	...

0800835c <__gethex>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	ed2d 8b02 	vpush	{d8}
 8008364:	b089      	sub	sp, #36	; 0x24
 8008366:	ee08 0a10 	vmov	s16, r0
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	4bbc      	ldr	r3, [pc, #752]	; (8008660 <__gethex+0x304>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	4618      	mov	r0, r3
 8008374:	468b      	mov	fp, r1
 8008376:	4690      	mov	r8, r2
 8008378:	f7f7 ff62 	bl	8000240 <strlen>
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	f8db 2000 	ldr.w	r2, [fp]
 8008382:	4403      	add	r3, r0
 8008384:	4682      	mov	sl, r0
 8008386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	1c93      	adds	r3, r2, #2
 800838e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008396:	32fe      	adds	r2, #254	; 0xfe
 8008398:	18d1      	adds	r1, r2, r3
 800839a:	461f      	mov	r7, r3
 800839c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083a0:	9100      	str	r1, [sp, #0]
 80083a2:	2830      	cmp	r0, #48	; 0x30
 80083a4:	d0f8      	beq.n	8008398 <__gethex+0x3c>
 80083a6:	f7ff ffc3 	bl	8008330 <__hexdig_fun>
 80083aa:	4604      	mov	r4, r0
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d13a      	bne.n	8008426 <__gethex+0xca>
 80083b0:	9901      	ldr	r1, [sp, #4]
 80083b2:	4652      	mov	r2, sl
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7fe fa98 	bl	80068ea <strncmp>
 80083ba:	4605      	mov	r5, r0
 80083bc:	2800      	cmp	r0, #0
 80083be:	d168      	bne.n	8008492 <__gethex+0x136>
 80083c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80083c4:	eb07 060a 	add.w	r6, r7, sl
 80083c8:	f7ff ffb2 	bl	8008330 <__hexdig_fun>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d062      	beq.n	8008496 <__gethex+0x13a>
 80083d0:	4633      	mov	r3, r6
 80083d2:	7818      	ldrb	r0, [r3, #0]
 80083d4:	2830      	cmp	r0, #48	; 0x30
 80083d6:	461f      	mov	r7, r3
 80083d8:	f103 0301 	add.w	r3, r3, #1
 80083dc:	d0f9      	beq.n	80083d2 <__gethex+0x76>
 80083de:	f7ff ffa7 	bl	8008330 <__hexdig_fun>
 80083e2:	2301      	movs	r3, #1
 80083e4:	fab0 f480 	clz	r4, r0
 80083e8:	0964      	lsrs	r4, r4, #5
 80083ea:	4635      	mov	r5, r6
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	463a      	mov	r2, r7
 80083f0:	4616      	mov	r6, r2
 80083f2:	3201      	adds	r2, #1
 80083f4:	7830      	ldrb	r0, [r6, #0]
 80083f6:	f7ff ff9b 	bl	8008330 <__hexdig_fun>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d1f8      	bne.n	80083f0 <__gethex+0x94>
 80083fe:	9901      	ldr	r1, [sp, #4]
 8008400:	4652      	mov	r2, sl
 8008402:	4630      	mov	r0, r6
 8008404:	f7fe fa71 	bl	80068ea <strncmp>
 8008408:	b980      	cbnz	r0, 800842c <__gethex+0xd0>
 800840a:	b94d      	cbnz	r5, 8008420 <__gethex+0xc4>
 800840c:	eb06 050a 	add.w	r5, r6, sl
 8008410:	462a      	mov	r2, r5
 8008412:	4616      	mov	r6, r2
 8008414:	3201      	adds	r2, #1
 8008416:	7830      	ldrb	r0, [r6, #0]
 8008418:	f7ff ff8a 	bl	8008330 <__hexdig_fun>
 800841c:	2800      	cmp	r0, #0
 800841e:	d1f8      	bne.n	8008412 <__gethex+0xb6>
 8008420:	1bad      	subs	r5, r5, r6
 8008422:	00ad      	lsls	r5, r5, #2
 8008424:	e004      	b.n	8008430 <__gethex+0xd4>
 8008426:	2400      	movs	r4, #0
 8008428:	4625      	mov	r5, r4
 800842a:	e7e0      	b.n	80083ee <__gethex+0x92>
 800842c:	2d00      	cmp	r5, #0
 800842e:	d1f7      	bne.n	8008420 <__gethex+0xc4>
 8008430:	7833      	ldrb	r3, [r6, #0]
 8008432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008436:	2b50      	cmp	r3, #80	; 0x50
 8008438:	d13b      	bne.n	80084b2 <__gethex+0x156>
 800843a:	7873      	ldrb	r3, [r6, #1]
 800843c:	2b2b      	cmp	r3, #43	; 0x2b
 800843e:	d02c      	beq.n	800849a <__gethex+0x13e>
 8008440:	2b2d      	cmp	r3, #45	; 0x2d
 8008442:	d02e      	beq.n	80084a2 <__gethex+0x146>
 8008444:	1c71      	adds	r1, r6, #1
 8008446:	f04f 0900 	mov.w	r9, #0
 800844a:	7808      	ldrb	r0, [r1, #0]
 800844c:	f7ff ff70 	bl	8008330 <__hexdig_fun>
 8008450:	1e43      	subs	r3, r0, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b18      	cmp	r3, #24
 8008456:	d82c      	bhi.n	80084b2 <__gethex+0x156>
 8008458:	f1a0 0210 	sub.w	r2, r0, #16
 800845c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008460:	f7ff ff66 	bl	8008330 <__hexdig_fun>
 8008464:	1e43      	subs	r3, r0, #1
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b18      	cmp	r3, #24
 800846a:	d91d      	bls.n	80084a8 <__gethex+0x14c>
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	d000      	beq.n	8008474 <__gethex+0x118>
 8008472:	4252      	negs	r2, r2
 8008474:	4415      	add	r5, r2
 8008476:	f8cb 1000 	str.w	r1, [fp]
 800847a:	b1e4      	cbz	r4, 80084b6 <__gethex+0x15a>
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	bf14      	ite	ne
 8008482:	2700      	movne	r7, #0
 8008484:	2706      	moveq	r7, #6
 8008486:	4638      	mov	r0, r7
 8008488:	b009      	add	sp, #36	; 0x24
 800848a:	ecbd 8b02 	vpop	{d8}
 800848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008492:	463e      	mov	r6, r7
 8008494:	4625      	mov	r5, r4
 8008496:	2401      	movs	r4, #1
 8008498:	e7ca      	b.n	8008430 <__gethex+0xd4>
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	1cb1      	adds	r1, r6, #2
 80084a0:	e7d3      	b.n	800844a <__gethex+0xee>
 80084a2:	f04f 0901 	mov.w	r9, #1
 80084a6:	e7fa      	b.n	800849e <__gethex+0x142>
 80084a8:	230a      	movs	r3, #10
 80084aa:	fb03 0202 	mla	r2, r3, r2, r0
 80084ae:	3a10      	subs	r2, #16
 80084b0:	e7d4      	b.n	800845c <__gethex+0x100>
 80084b2:	4631      	mov	r1, r6
 80084b4:	e7df      	b.n	8008476 <__gethex+0x11a>
 80084b6:	1bf3      	subs	r3, r6, r7
 80084b8:	3b01      	subs	r3, #1
 80084ba:	4621      	mov	r1, r4
 80084bc:	2b07      	cmp	r3, #7
 80084be:	dc0b      	bgt.n	80084d8 <__gethex+0x17c>
 80084c0:	ee18 0a10 	vmov	r0, s16
 80084c4:	f000 fa90 	bl	80089e8 <_Balloc>
 80084c8:	4604      	mov	r4, r0
 80084ca:	b940      	cbnz	r0, 80084de <__gethex+0x182>
 80084cc:	4b65      	ldr	r3, [pc, #404]	; (8008664 <__gethex+0x308>)
 80084ce:	4602      	mov	r2, r0
 80084d0:	21de      	movs	r1, #222	; 0xde
 80084d2:	4865      	ldr	r0, [pc, #404]	; (8008668 <__gethex+0x30c>)
 80084d4:	f001 fda4 	bl	800a020 <__assert_func>
 80084d8:	3101      	adds	r1, #1
 80084da:	105b      	asrs	r3, r3, #1
 80084dc:	e7ee      	b.n	80084bc <__gethex+0x160>
 80084de:	f100 0914 	add.w	r9, r0, #20
 80084e2:	f04f 0b00 	mov.w	fp, #0
 80084e6:	f1ca 0301 	rsb	r3, sl, #1
 80084ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80084ee:	f8cd b000 	str.w	fp, [sp]
 80084f2:	9306      	str	r3, [sp, #24]
 80084f4:	42b7      	cmp	r7, r6
 80084f6:	d340      	bcc.n	800857a <__gethex+0x21e>
 80084f8:	9802      	ldr	r0, [sp, #8]
 80084fa:	9b00      	ldr	r3, [sp, #0]
 80084fc:	f840 3b04 	str.w	r3, [r0], #4
 8008500:	eba0 0009 	sub.w	r0, r0, r9
 8008504:	1080      	asrs	r0, r0, #2
 8008506:	0146      	lsls	r6, r0, #5
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fb62 	bl	8008bd4 <__hi0bits>
 8008510:	1a30      	subs	r0, r6, r0
 8008512:	f8d8 6000 	ldr.w	r6, [r8]
 8008516:	42b0      	cmp	r0, r6
 8008518:	dd63      	ble.n	80085e2 <__gethex+0x286>
 800851a:	1b87      	subs	r7, r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fefd 	bl	800931e <__any_on>
 8008524:	4682      	mov	sl, r0
 8008526:	b1a8      	cbz	r0, 8008554 <__gethex+0x1f8>
 8008528:	1e7b      	subs	r3, r7, #1
 800852a:	1159      	asrs	r1, r3, #5
 800852c:	f003 021f 	and.w	r2, r3, #31
 8008530:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008534:	f04f 0a01 	mov.w	sl, #1
 8008538:	fa0a f202 	lsl.w	r2, sl, r2
 800853c:	420a      	tst	r2, r1
 800853e:	d009      	beq.n	8008554 <__gethex+0x1f8>
 8008540:	4553      	cmp	r3, sl
 8008542:	dd05      	ble.n	8008550 <__gethex+0x1f4>
 8008544:	1eb9      	subs	r1, r7, #2
 8008546:	4620      	mov	r0, r4
 8008548:	f000 fee9 	bl	800931e <__any_on>
 800854c:	2800      	cmp	r0, #0
 800854e:	d145      	bne.n	80085dc <__gethex+0x280>
 8008550:	f04f 0a02 	mov.w	sl, #2
 8008554:	4639      	mov	r1, r7
 8008556:	4620      	mov	r0, r4
 8008558:	f7ff fe98 	bl	800828c <rshift>
 800855c:	443d      	add	r5, r7
 800855e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008562:	42ab      	cmp	r3, r5
 8008564:	da4c      	bge.n	8008600 <__gethex+0x2a4>
 8008566:	ee18 0a10 	vmov	r0, s16
 800856a:	4621      	mov	r1, r4
 800856c:	f000 fa7c 	bl	8008a68 <_Bfree>
 8008570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008572:	2300      	movs	r3, #0
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	27a3      	movs	r7, #163	; 0xa3
 8008578:	e785      	b.n	8008486 <__gethex+0x12a>
 800857a:	1e73      	subs	r3, r6, #1
 800857c:	9a05      	ldr	r2, [sp, #20]
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008584:	4293      	cmp	r3, r2
 8008586:	d019      	beq.n	80085bc <__gethex+0x260>
 8008588:	f1bb 0f20 	cmp.w	fp, #32
 800858c:	d107      	bne.n	800859e <__gethex+0x242>
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	9a00      	ldr	r2, [sp, #0]
 8008592:	f843 2b04 	str.w	r2, [r3], #4
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	2300      	movs	r3, #0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	469b      	mov	fp, r3
 800859e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80085a2:	f7ff fec5 	bl	8008330 <__hexdig_fun>
 80085a6:	9b00      	ldr	r3, [sp, #0]
 80085a8:	f000 000f 	and.w	r0, r0, #15
 80085ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80085b0:	4303      	orrs	r3, r0
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	f10b 0b04 	add.w	fp, fp, #4
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	e00d      	b.n	80085d8 <__gethex+0x27c>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	9a06      	ldr	r2, [sp, #24]
 80085c0:	4413      	add	r3, r2
 80085c2:	42bb      	cmp	r3, r7
 80085c4:	d3e0      	bcc.n	8008588 <__gethex+0x22c>
 80085c6:	4618      	mov	r0, r3
 80085c8:	9901      	ldr	r1, [sp, #4]
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	4652      	mov	r2, sl
 80085ce:	f7fe f98c 	bl	80068ea <strncmp>
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d1d7      	bne.n	8008588 <__gethex+0x22c>
 80085d8:	461e      	mov	r6, r3
 80085da:	e78b      	b.n	80084f4 <__gethex+0x198>
 80085dc:	f04f 0a03 	mov.w	sl, #3
 80085e0:	e7b8      	b.n	8008554 <__gethex+0x1f8>
 80085e2:	da0a      	bge.n	80085fa <__gethex+0x29e>
 80085e4:	1a37      	subs	r7, r6, r0
 80085e6:	4621      	mov	r1, r4
 80085e8:	ee18 0a10 	vmov	r0, s16
 80085ec:	463a      	mov	r2, r7
 80085ee:	f000 fc57 	bl	8008ea0 <__lshift>
 80085f2:	1bed      	subs	r5, r5, r7
 80085f4:	4604      	mov	r4, r0
 80085f6:	f100 0914 	add.w	r9, r0, #20
 80085fa:	f04f 0a00 	mov.w	sl, #0
 80085fe:	e7ae      	b.n	800855e <__gethex+0x202>
 8008600:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008604:	42a8      	cmp	r0, r5
 8008606:	dd72      	ble.n	80086ee <__gethex+0x392>
 8008608:	1b45      	subs	r5, r0, r5
 800860a:	42ae      	cmp	r6, r5
 800860c:	dc36      	bgt.n	800867c <__gethex+0x320>
 800860e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d02a      	beq.n	800866c <__gethex+0x310>
 8008616:	2b03      	cmp	r3, #3
 8008618:	d02c      	beq.n	8008674 <__gethex+0x318>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d115      	bne.n	800864a <__gethex+0x2ee>
 800861e:	42ae      	cmp	r6, r5
 8008620:	d113      	bne.n	800864a <__gethex+0x2ee>
 8008622:	2e01      	cmp	r6, #1
 8008624:	d10b      	bne.n	800863e <__gethex+0x2e2>
 8008626:	9a04      	ldr	r2, [sp, #16]
 8008628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	2301      	movs	r3, #1
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	f8c9 3000 	str.w	r3, [r9]
 8008636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008638:	2762      	movs	r7, #98	; 0x62
 800863a:	601c      	str	r4, [r3, #0]
 800863c:	e723      	b.n	8008486 <__gethex+0x12a>
 800863e:	1e71      	subs	r1, r6, #1
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fe6c 	bl	800931e <__any_on>
 8008646:	2800      	cmp	r0, #0
 8008648:	d1ed      	bne.n	8008626 <__gethex+0x2ca>
 800864a:	ee18 0a10 	vmov	r0, s16
 800864e:	4621      	mov	r1, r4
 8008650:	f000 fa0a 	bl	8008a68 <_Bfree>
 8008654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008656:	2300      	movs	r3, #0
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	2750      	movs	r7, #80	; 0x50
 800865c:	e713      	b.n	8008486 <__gethex+0x12a>
 800865e:	bf00      	nop
 8008660:	0800b318 	.word	0x0800b318
 8008664:	0800b29c 	.word	0x0800b29c
 8008668:	0800b2ad 	.word	0x0800b2ad
 800866c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1eb      	bne.n	800864a <__gethex+0x2ee>
 8008672:	e7d8      	b.n	8008626 <__gethex+0x2ca>
 8008674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1d5      	bne.n	8008626 <__gethex+0x2ca>
 800867a:	e7e6      	b.n	800864a <__gethex+0x2ee>
 800867c:	1e6f      	subs	r7, r5, #1
 800867e:	f1ba 0f00 	cmp.w	sl, #0
 8008682:	d131      	bne.n	80086e8 <__gethex+0x38c>
 8008684:	b127      	cbz	r7, 8008690 <__gethex+0x334>
 8008686:	4639      	mov	r1, r7
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fe48 	bl	800931e <__any_on>
 800868e:	4682      	mov	sl, r0
 8008690:	117b      	asrs	r3, r7, #5
 8008692:	2101      	movs	r1, #1
 8008694:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008698:	f007 071f 	and.w	r7, r7, #31
 800869c:	fa01 f707 	lsl.w	r7, r1, r7
 80086a0:	421f      	tst	r7, r3
 80086a2:	4629      	mov	r1, r5
 80086a4:	4620      	mov	r0, r4
 80086a6:	bf18      	it	ne
 80086a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80086ac:	1b76      	subs	r6, r6, r5
 80086ae:	f7ff fded 	bl	800828c <rshift>
 80086b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086b6:	2702      	movs	r7, #2
 80086b8:	f1ba 0f00 	cmp.w	sl, #0
 80086bc:	d048      	beq.n	8008750 <__gethex+0x3f4>
 80086be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d015      	beq.n	80086f2 <__gethex+0x396>
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d017      	beq.n	80086fa <__gethex+0x39e>
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d109      	bne.n	80086e2 <__gethex+0x386>
 80086ce:	f01a 0f02 	tst.w	sl, #2
 80086d2:	d006      	beq.n	80086e2 <__gethex+0x386>
 80086d4:	f8d9 0000 	ldr.w	r0, [r9]
 80086d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80086dc:	f01a 0f01 	tst.w	sl, #1
 80086e0:	d10e      	bne.n	8008700 <__gethex+0x3a4>
 80086e2:	f047 0710 	orr.w	r7, r7, #16
 80086e6:	e033      	b.n	8008750 <__gethex+0x3f4>
 80086e8:	f04f 0a01 	mov.w	sl, #1
 80086ec:	e7d0      	b.n	8008690 <__gethex+0x334>
 80086ee:	2701      	movs	r7, #1
 80086f0:	e7e2      	b.n	80086b8 <__gethex+0x35c>
 80086f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086f4:	f1c3 0301 	rsb	r3, r3, #1
 80086f8:	9315      	str	r3, [sp, #84]	; 0x54
 80086fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0f0      	beq.n	80086e2 <__gethex+0x386>
 8008700:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008704:	f104 0314 	add.w	r3, r4, #20
 8008708:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800870c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008710:	f04f 0c00 	mov.w	ip, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800871e:	d01c      	beq.n	800875a <__gethex+0x3fe>
 8008720:	3201      	adds	r2, #1
 8008722:	6002      	str	r2, [r0, #0]
 8008724:	2f02      	cmp	r7, #2
 8008726:	f104 0314 	add.w	r3, r4, #20
 800872a:	d13f      	bne.n	80087ac <__gethex+0x450>
 800872c:	f8d8 2000 	ldr.w	r2, [r8]
 8008730:	3a01      	subs	r2, #1
 8008732:	42b2      	cmp	r2, r6
 8008734:	d10a      	bne.n	800874c <__gethex+0x3f0>
 8008736:	1171      	asrs	r1, r6, #5
 8008738:	2201      	movs	r2, #1
 800873a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800873e:	f006 061f 	and.w	r6, r6, #31
 8008742:	fa02 f606 	lsl.w	r6, r2, r6
 8008746:	421e      	tst	r6, r3
 8008748:	bf18      	it	ne
 800874a:	4617      	movne	r7, r2
 800874c:	f047 0720 	orr.w	r7, r7, #32
 8008750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008752:	601c      	str	r4, [r3, #0]
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	601d      	str	r5, [r3, #0]
 8008758:	e695      	b.n	8008486 <__gethex+0x12a>
 800875a:	4299      	cmp	r1, r3
 800875c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008760:	d8d8      	bhi.n	8008714 <__gethex+0x3b8>
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	459b      	cmp	fp, r3
 8008766:	db19      	blt.n	800879c <__gethex+0x440>
 8008768:	6861      	ldr	r1, [r4, #4]
 800876a:	ee18 0a10 	vmov	r0, s16
 800876e:	3101      	adds	r1, #1
 8008770:	f000 f93a 	bl	80089e8 <_Balloc>
 8008774:	4681      	mov	r9, r0
 8008776:	b918      	cbnz	r0, 8008780 <__gethex+0x424>
 8008778:	4b1a      	ldr	r3, [pc, #104]	; (80087e4 <__gethex+0x488>)
 800877a:	4602      	mov	r2, r0
 800877c:	2184      	movs	r1, #132	; 0x84
 800877e:	e6a8      	b.n	80084d2 <__gethex+0x176>
 8008780:	6922      	ldr	r2, [r4, #16]
 8008782:	3202      	adds	r2, #2
 8008784:	f104 010c 	add.w	r1, r4, #12
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	300c      	adds	r0, #12
 800878c:	f000 f91e 	bl	80089cc <memcpy>
 8008790:	4621      	mov	r1, r4
 8008792:	ee18 0a10 	vmov	r0, s16
 8008796:	f000 f967 	bl	8008a68 <_Bfree>
 800879a:	464c      	mov	r4, r9
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087a4:	6122      	str	r2, [r4, #16]
 80087a6:	2201      	movs	r2, #1
 80087a8:	615a      	str	r2, [r3, #20]
 80087aa:	e7bb      	b.n	8008724 <__gethex+0x3c8>
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	455a      	cmp	r2, fp
 80087b0:	dd0b      	ble.n	80087ca <__gethex+0x46e>
 80087b2:	2101      	movs	r1, #1
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7ff fd69 	bl	800828c <rshift>
 80087ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087be:	3501      	adds	r5, #1
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	f6ff aed0 	blt.w	8008566 <__gethex+0x20a>
 80087c6:	2701      	movs	r7, #1
 80087c8:	e7c0      	b.n	800874c <__gethex+0x3f0>
 80087ca:	f016 061f 	ands.w	r6, r6, #31
 80087ce:	d0fa      	beq.n	80087c6 <__gethex+0x46a>
 80087d0:	449a      	add	sl, r3
 80087d2:	f1c6 0620 	rsb	r6, r6, #32
 80087d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80087da:	f000 f9fb 	bl	8008bd4 <__hi0bits>
 80087de:	42b0      	cmp	r0, r6
 80087e0:	dbe7      	blt.n	80087b2 <__gethex+0x456>
 80087e2:	e7f0      	b.n	80087c6 <__gethex+0x46a>
 80087e4:	0800b29c 	.word	0x0800b29c

080087e8 <L_shift>:
 80087e8:	f1c2 0208 	rsb	r2, r2, #8
 80087ec:	0092      	lsls	r2, r2, #2
 80087ee:	b570      	push	{r4, r5, r6, lr}
 80087f0:	f1c2 0620 	rsb	r6, r2, #32
 80087f4:	6843      	ldr	r3, [r0, #4]
 80087f6:	6804      	ldr	r4, [r0, #0]
 80087f8:	fa03 f506 	lsl.w	r5, r3, r6
 80087fc:	432c      	orrs	r4, r5
 80087fe:	40d3      	lsrs	r3, r2
 8008800:	6004      	str	r4, [r0, #0]
 8008802:	f840 3f04 	str.w	r3, [r0, #4]!
 8008806:	4288      	cmp	r0, r1
 8008808:	d3f4      	bcc.n	80087f4 <L_shift+0xc>
 800880a:	bd70      	pop	{r4, r5, r6, pc}

0800880c <__match>:
 800880c:	b530      	push	{r4, r5, lr}
 800880e:	6803      	ldr	r3, [r0, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008816:	b914      	cbnz	r4, 800881e <__match+0x12>
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	2001      	movs	r0, #1
 800881c:	bd30      	pop	{r4, r5, pc}
 800881e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008822:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008826:	2d19      	cmp	r5, #25
 8008828:	bf98      	it	ls
 800882a:	3220      	addls	r2, #32
 800882c:	42a2      	cmp	r2, r4
 800882e:	d0f0      	beq.n	8008812 <__match+0x6>
 8008830:	2000      	movs	r0, #0
 8008832:	e7f3      	b.n	800881c <__match+0x10>

08008834 <__hexnan>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	680b      	ldr	r3, [r1, #0]
 800883a:	6801      	ldr	r1, [r0, #0]
 800883c:	115e      	asrs	r6, r3, #5
 800883e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008842:	f013 031f 	ands.w	r3, r3, #31
 8008846:	b087      	sub	sp, #28
 8008848:	bf18      	it	ne
 800884a:	3604      	addne	r6, #4
 800884c:	2500      	movs	r5, #0
 800884e:	1f37      	subs	r7, r6, #4
 8008850:	4682      	mov	sl, r0
 8008852:	4690      	mov	r8, r2
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f846 5c04 	str.w	r5, [r6, #-4]
 800885a:	46b9      	mov	r9, r7
 800885c:	463c      	mov	r4, r7
 800885e:	9502      	str	r5, [sp, #8]
 8008860:	46ab      	mov	fp, r5
 8008862:	784a      	ldrb	r2, [r1, #1]
 8008864:	1c4b      	adds	r3, r1, #1
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	b342      	cbz	r2, 80088bc <__hexnan+0x88>
 800886a:	4610      	mov	r0, r2
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	9204      	str	r2, [sp, #16]
 8008870:	f7ff fd5e 	bl	8008330 <__hexdig_fun>
 8008874:	2800      	cmp	r0, #0
 8008876:	d14f      	bne.n	8008918 <__hexnan+0xe4>
 8008878:	9a04      	ldr	r2, [sp, #16]
 800887a:	9905      	ldr	r1, [sp, #20]
 800887c:	2a20      	cmp	r2, #32
 800887e:	d818      	bhi.n	80088b2 <__hexnan+0x7e>
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	459b      	cmp	fp, r3
 8008884:	dd13      	ble.n	80088ae <__hexnan+0x7a>
 8008886:	454c      	cmp	r4, r9
 8008888:	d206      	bcs.n	8008898 <__hexnan+0x64>
 800888a:	2d07      	cmp	r5, #7
 800888c:	dc04      	bgt.n	8008898 <__hexnan+0x64>
 800888e:	462a      	mov	r2, r5
 8008890:	4649      	mov	r1, r9
 8008892:	4620      	mov	r0, r4
 8008894:	f7ff ffa8 	bl	80087e8 <L_shift>
 8008898:	4544      	cmp	r4, r8
 800889a:	d950      	bls.n	800893e <__hexnan+0x10a>
 800889c:	2300      	movs	r3, #0
 800889e:	f1a4 0904 	sub.w	r9, r4, #4
 80088a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80088a6:	f8cd b008 	str.w	fp, [sp, #8]
 80088aa:	464c      	mov	r4, r9
 80088ac:	461d      	mov	r5, r3
 80088ae:	9903      	ldr	r1, [sp, #12]
 80088b0:	e7d7      	b.n	8008862 <__hexnan+0x2e>
 80088b2:	2a29      	cmp	r2, #41	; 0x29
 80088b4:	d156      	bne.n	8008964 <__hexnan+0x130>
 80088b6:	3102      	adds	r1, #2
 80088b8:	f8ca 1000 	str.w	r1, [sl]
 80088bc:	f1bb 0f00 	cmp.w	fp, #0
 80088c0:	d050      	beq.n	8008964 <__hexnan+0x130>
 80088c2:	454c      	cmp	r4, r9
 80088c4:	d206      	bcs.n	80088d4 <__hexnan+0xa0>
 80088c6:	2d07      	cmp	r5, #7
 80088c8:	dc04      	bgt.n	80088d4 <__hexnan+0xa0>
 80088ca:	462a      	mov	r2, r5
 80088cc:	4649      	mov	r1, r9
 80088ce:	4620      	mov	r0, r4
 80088d0:	f7ff ff8a 	bl	80087e8 <L_shift>
 80088d4:	4544      	cmp	r4, r8
 80088d6:	d934      	bls.n	8008942 <__hexnan+0x10e>
 80088d8:	f1a8 0204 	sub.w	r2, r8, #4
 80088dc:	4623      	mov	r3, r4
 80088de:	f853 1b04 	ldr.w	r1, [r3], #4
 80088e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80088e6:	429f      	cmp	r7, r3
 80088e8:	d2f9      	bcs.n	80088de <__hexnan+0xaa>
 80088ea:	1b3b      	subs	r3, r7, r4
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	3304      	adds	r3, #4
 80088f2:	3401      	adds	r4, #1
 80088f4:	3e03      	subs	r6, #3
 80088f6:	42b4      	cmp	r4, r6
 80088f8:	bf88      	it	hi
 80088fa:	2304      	movhi	r3, #4
 80088fc:	4443      	add	r3, r8
 80088fe:	2200      	movs	r2, #0
 8008900:	f843 2b04 	str.w	r2, [r3], #4
 8008904:	429f      	cmp	r7, r3
 8008906:	d2fb      	bcs.n	8008900 <__hexnan+0xcc>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	b91b      	cbnz	r3, 8008914 <__hexnan+0xe0>
 800890c:	4547      	cmp	r7, r8
 800890e:	d127      	bne.n	8008960 <__hexnan+0x12c>
 8008910:	2301      	movs	r3, #1
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	2005      	movs	r0, #5
 8008916:	e026      	b.n	8008966 <__hexnan+0x132>
 8008918:	3501      	adds	r5, #1
 800891a:	2d08      	cmp	r5, #8
 800891c:	f10b 0b01 	add.w	fp, fp, #1
 8008920:	dd06      	ble.n	8008930 <__hexnan+0xfc>
 8008922:	4544      	cmp	r4, r8
 8008924:	d9c3      	bls.n	80088ae <__hexnan+0x7a>
 8008926:	2300      	movs	r3, #0
 8008928:	f844 3c04 	str.w	r3, [r4, #-4]
 800892c:	2501      	movs	r5, #1
 800892e:	3c04      	subs	r4, #4
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	f000 000f 	and.w	r0, r0, #15
 8008936:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	e7b7      	b.n	80088ae <__hexnan+0x7a>
 800893e:	2508      	movs	r5, #8
 8008940:	e7b5      	b.n	80088ae <__hexnan+0x7a>
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0df      	beq.n	8008908 <__hexnan+0xd4>
 8008948:	f04f 32ff 	mov.w	r2, #4294967295
 800894c:	f1c3 0320 	rsb	r3, r3, #32
 8008950:	fa22 f303 	lsr.w	r3, r2, r3
 8008954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008958:	401a      	ands	r2, r3
 800895a:	f846 2c04 	str.w	r2, [r6, #-4]
 800895e:	e7d3      	b.n	8008908 <__hexnan+0xd4>
 8008960:	3f04      	subs	r7, #4
 8008962:	e7d1      	b.n	8008908 <__hexnan+0xd4>
 8008964:	2004      	movs	r0, #4
 8008966:	b007      	add	sp, #28
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800896c <_localeconv_r>:
 800896c:	4800      	ldr	r0, [pc, #0]	; (8008970 <_localeconv_r+0x4>)
 800896e:	4770      	bx	lr
 8008970:	20000190 	.word	0x20000190

08008974 <_lseek_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_lseek_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f9 f95e 	bl	8001c44 <_lseek>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_lseek_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_lseek_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20010618 	.word	0x20010618

08008998 <malloc>:
 8008998:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <malloc+0xc>)
 800899a:	4601      	mov	r1, r0
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	f000 bd3f 	b.w	8009420 <_malloc_r>
 80089a2:	bf00      	nop
 80089a4:	20000038 	.word	0x20000038

080089a8 <__ascii_mbtowc>:
 80089a8:	b082      	sub	sp, #8
 80089aa:	b901      	cbnz	r1, 80089ae <__ascii_mbtowc+0x6>
 80089ac:	a901      	add	r1, sp, #4
 80089ae:	b142      	cbz	r2, 80089c2 <__ascii_mbtowc+0x1a>
 80089b0:	b14b      	cbz	r3, 80089c6 <__ascii_mbtowc+0x1e>
 80089b2:	7813      	ldrb	r3, [r2, #0]
 80089b4:	600b      	str	r3, [r1, #0]
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	1e10      	subs	r0, r2, #0
 80089ba:	bf18      	it	ne
 80089bc:	2001      	movne	r0, #1
 80089be:	b002      	add	sp, #8
 80089c0:	4770      	bx	lr
 80089c2:	4610      	mov	r0, r2
 80089c4:	e7fb      	b.n	80089be <__ascii_mbtowc+0x16>
 80089c6:	f06f 0001 	mvn.w	r0, #1
 80089ca:	e7f8      	b.n	80089be <__ascii_mbtowc+0x16>

080089cc <memcpy>:
 80089cc:	440a      	add	r2, r1
 80089ce:	4291      	cmp	r1, r2
 80089d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d4:	d100      	bne.n	80089d8 <memcpy+0xc>
 80089d6:	4770      	bx	lr
 80089d8:	b510      	push	{r4, lr}
 80089da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e2:	4291      	cmp	r1, r2
 80089e4:	d1f9      	bne.n	80089da <memcpy+0xe>
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <_Balloc>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089ec:	4604      	mov	r4, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	b976      	cbnz	r6, 8008a10 <_Balloc+0x28>
 80089f2:	2010      	movs	r0, #16
 80089f4:	f7ff ffd0 	bl	8008998 <malloc>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6260      	str	r0, [r4, #36]	; 0x24
 80089fc:	b920      	cbnz	r0, 8008a08 <_Balloc+0x20>
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <_Balloc+0x78>)
 8008a00:	4818      	ldr	r0, [pc, #96]	; (8008a64 <_Balloc+0x7c>)
 8008a02:	2166      	movs	r1, #102	; 0x66
 8008a04:	f001 fb0c 	bl	800a020 <__assert_func>
 8008a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a0c:	6006      	str	r6, [r0, #0]
 8008a0e:	60c6      	str	r6, [r0, #12]
 8008a10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a12:	68f3      	ldr	r3, [r6, #12]
 8008a14:	b183      	cbz	r3, 8008a38 <_Balloc+0x50>
 8008a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a1e:	b9b8      	cbnz	r0, 8008a50 <_Balloc+0x68>
 8008a20:	2101      	movs	r1, #1
 8008a22:	fa01 f605 	lsl.w	r6, r1, r5
 8008a26:	1d72      	adds	r2, r6, #5
 8008a28:	0092      	lsls	r2, r2, #2
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fc98 	bl	8009360 <_calloc_r>
 8008a30:	b160      	cbz	r0, 8008a4c <_Balloc+0x64>
 8008a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a36:	e00e      	b.n	8008a56 <_Balloc+0x6e>
 8008a38:	2221      	movs	r2, #33	; 0x21
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fc8f 	bl	8009360 <_calloc_r>
 8008a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a44:	60f0      	str	r0, [r6, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e4      	bne.n	8008a16 <_Balloc+0x2e>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	6802      	ldr	r2, [r0, #0]
 8008a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a56:	2300      	movs	r3, #0
 8008a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a5c:	e7f7      	b.n	8008a4e <_Balloc+0x66>
 8008a5e:	bf00      	nop
 8008a60:	0800b226 	.word	0x0800b226
 8008a64:	0800b32c 	.word	0x0800b32c

08008a68 <_Bfree>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b976      	cbnz	r6, 8008a90 <_Bfree+0x28>
 8008a72:	2010      	movs	r0, #16
 8008a74:	f7ff ff90 	bl	8008998 <malloc>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008a7c:	b920      	cbnz	r0, 8008a88 <_Bfree+0x20>
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <_Bfree+0x3c>)
 8008a80:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <_Bfree+0x40>)
 8008a82:	218a      	movs	r1, #138	; 0x8a
 8008a84:	f001 facc 	bl	800a020 <__assert_func>
 8008a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a8c:	6006      	str	r6, [r0, #0]
 8008a8e:	60c6      	str	r6, [r0, #12]
 8008a90:	b13c      	cbz	r4, 8008aa2 <_Bfree+0x3a>
 8008a92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a94:	6862      	ldr	r2, [r4, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a9c:	6021      	str	r1, [r4, #0]
 8008a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	0800b226 	.word	0x0800b226
 8008aa8:	0800b32c 	.word	0x0800b32c

08008aac <__multadd>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	690e      	ldr	r6, [r1, #16]
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	4698      	mov	r8, r3
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f101 0014 	add.w	r0, r1, #20
 8008abc:	2300      	movs	r3, #0
 8008abe:	6805      	ldr	r5, [r0, #0]
 8008ac0:	b2a9      	uxth	r1, r5
 8008ac2:	fb02 8101 	mla	r1, r2, r1, r8
 8008ac6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008aca:	0c2d      	lsrs	r5, r5, #16
 8008acc:	fb02 c505 	mla	r5, r2, r5, ip
 8008ad0:	b289      	uxth	r1, r1
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ad8:	429e      	cmp	r6, r3
 8008ada:	f840 1b04 	str.w	r1, [r0], #4
 8008ade:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ae2:	dcec      	bgt.n	8008abe <__multadd+0x12>
 8008ae4:	f1b8 0f00 	cmp.w	r8, #0
 8008ae8:	d022      	beq.n	8008b30 <__multadd+0x84>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	42b3      	cmp	r3, r6
 8008aee:	dc19      	bgt.n	8008b24 <__multadd+0x78>
 8008af0:	6861      	ldr	r1, [r4, #4]
 8008af2:	4638      	mov	r0, r7
 8008af4:	3101      	adds	r1, #1
 8008af6:	f7ff ff77 	bl	80089e8 <_Balloc>
 8008afa:	4605      	mov	r5, r0
 8008afc:	b928      	cbnz	r0, 8008b0a <__multadd+0x5e>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <__multadd+0x8c>)
 8008b02:	480e      	ldr	r0, [pc, #56]	; (8008b3c <__multadd+0x90>)
 8008b04:	21b5      	movs	r1, #181	; 0xb5
 8008b06:	f001 fa8b 	bl	800a020 <__assert_func>
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	3202      	adds	r2, #2
 8008b0e:	f104 010c 	add.w	r1, r4, #12
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	300c      	adds	r0, #12
 8008b16:	f7ff ff59 	bl	80089cc <memcpy>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff ffa3 	bl	8008a68 <_Bfree>
 8008b22:	462c      	mov	r4, r5
 8008b24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b28:	3601      	adds	r6, #1
 8008b2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b2e:	6126      	str	r6, [r4, #16]
 8008b30:	4620      	mov	r0, r4
 8008b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b36:	bf00      	nop
 8008b38:	0800b29c 	.word	0x0800b29c
 8008b3c:	0800b32c 	.word	0x0800b32c

08008b40 <__s2b>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	4615      	mov	r5, r2
 8008b48:	461f      	mov	r7, r3
 8008b4a:	2209      	movs	r2, #9
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	4606      	mov	r6, r0
 8008b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b54:	2100      	movs	r1, #0
 8008b56:	2201      	movs	r2, #1
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	db09      	blt.n	8008b70 <__s2b+0x30>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ff43 	bl	80089e8 <_Balloc>
 8008b62:	b940      	cbnz	r0, 8008b76 <__s2b+0x36>
 8008b64:	4602      	mov	r2, r0
 8008b66:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <__s2b+0x8c>)
 8008b68:	4819      	ldr	r0, [pc, #100]	; (8008bd0 <__s2b+0x90>)
 8008b6a:	21ce      	movs	r1, #206	; 0xce
 8008b6c:	f001 fa58 	bl	800a020 <__assert_func>
 8008b70:	0052      	lsls	r2, r2, #1
 8008b72:	3101      	adds	r1, #1
 8008b74:	e7f0      	b.n	8008b58 <__s2b+0x18>
 8008b76:	9b08      	ldr	r3, [sp, #32]
 8008b78:	6143      	str	r3, [r0, #20]
 8008b7a:	2d09      	cmp	r5, #9
 8008b7c:	f04f 0301 	mov.w	r3, #1
 8008b80:	6103      	str	r3, [r0, #16]
 8008b82:	dd16      	ble.n	8008bb2 <__s2b+0x72>
 8008b84:	f104 0909 	add.w	r9, r4, #9
 8008b88:	46c8      	mov	r8, r9
 8008b8a:	442c      	add	r4, r5
 8008b8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b90:	4601      	mov	r1, r0
 8008b92:	3b30      	subs	r3, #48	; 0x30
 8008b94:	220a      	movs	r2, #10
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ff88 	bl	8008aac <__multadd>
 8008b9c:	45a0      	cmp	r8, r4
 8008b9e:	d1f5      	bne.n	8008b8c <__s2b+0x4c>
 8008ba0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ba4:	444c      	add	r4, r9
 8008ba6:	1b2d      	subs	r5, r5, r4
 8008ba8:	1963      	adds	r3, r4, r5
 8008baa:	42bb      	cmp	r3, r7
 8008bac:	db04      	blt.n	8008bb8 <__s2b+0x78>
 8008bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	340a      	adds	r4, #10
 8008bb4:	2509      	movs	r5, #9
 8008bb6:	e7f6      	b.n	8008ba6 <__s2b+0x66>
 8008bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ff72 	bl	8008aac <__multadd>
 8008bc8:	e7ee      	b.n	8008ba8 <__s2b+0x68>
 8008bca:	bf00      	nop
 8008bcc:	0800b29c 	.word	0x0800b29c
 8008bd0:	0800b32c 	.word	0x0800b32c

08008bd4 <__hi0bits>:
 8008bd4:	0c03      	lsrs	r3, r0, #16
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	b9d3      	cbnz	r3, 8008c10 <__hi0bits+0x3c>
 8008bda:	0400      	lsls	r0, r0, #16
 8008bdc:	2310      	movs	r3, #16
 8008bde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008be2:	bf04      	itt	eq
 8008be4:	0200      	lsleq	r0, r0, #8
 8008be6:	3308      	addeq	r3, #8
 8008be8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bec:	bf04      	itt	eq
 8008bee:	0100      	lsleq	r0, r0, #4
 8008bf0:	3304      	addeq	r3, #4
 8008bf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bf6:	bf04      	itt	eq
 8008bf8:	0080      	lsleq	r0, r0, #2
 8008bfa:	3302      	addeq	r3, #2
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	db05      	blt.n	8008c0c <__hi0bits+0x38>
 8008c00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c04:	f103 0301 	add.w	r3, r3, #1
 8008c08:	bf08      	it	eq
 8008c0a:	2320      	moveq	r3, #32
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	4770      	bx	lr
 8008c10:	2300      	movs	r3, #0
 8008c12:	e7e4      	b.n	8008bde <__hi0bits+0xa>

08008c14 <__lo0bits>:
 8008c14:	6803      	ldr	r3, [r0, #0]
 8008c16:	f013 0207 	ands.w	r2, r3, #7
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	d00b      	beq.n	8008c36 <__lo0bits+0x22>
 8008c1e:	07da      	lsls	r2, r3, #31
 8008c20:	d424      	bmi.n	8008c6c <__lo0bits+0x58>
 8008c22:	0798      	lsls	r0, r3, #30
 8008c24:	bf49      	itett	mi
 8008c26:	085b      	lsrmi	r3, r3, #1
 8008c28:	089b      	lsrpl	r3, r3, #2
 8008c2a:	2001      	movmi	r0, #1
 8008c2c:	600b      	strmi	r3, [r1, #0]
 8008c2e:	bf5c      	itt	pl
 8008c30:	600b      	strpl	r3, [r1, #0]
 8008c32:	2002      	movpl	r0, #2
 8008c34:	4770      	bx	lr
 8008c36:	b298      	uxth	r0, r3
 8008c38:	b9b0      	cbnz	r0, 8008c68 <__lo0bits+0x54>
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	2010      	movs	r0, #16
 8008c3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c42:	bf04      	itt	eq
 8008c44:	0a1b      	lsreq	r3, r3, #8
 8008c46:	3008      	addeq	r0, #8
 8008c48:	071a      	lsls	r2, r3, #28
 8008c4a:	bf04      	itt	eq
 8008c4c:	091b      	lsreq	r3, r3, #4
 8008c4e:	3004      	addeq	r0, #4
 8008c50:	079a      	lsls	r2, r3, #30
 8008c52:	bf04      	itt	eq
 8008c54:	089b      	lsreq	r3, r3, #2
 8008c56:	3002      	addeq	r0, #2
 8008c58:	07da      	lsls	r2, r3, #31
 8008c5a:	d403      	bmi.n	8008c64 <__lo0bits+0x50>
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	f100 0001 	add.w	r0, r0, #1
 8008c62:	d005      	beq.n	8008c70 <__lo0bits+0x5c>
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	4770      	bx	lr
 8008c68:	4610      	mov	r0, r2
 8008c6a:	e7e8      	b.n	8008c3e <__lo0bits+0x2a>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	4770      	bx	lr
 8008c70:	2020      	movs	r0, #32
 8008c72:	4770      	bx	lr

08008c74 <__i2b>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	460c      	mov	r4, r1
 8008c78:	2101      	movs	r1, #1
 8008c7a:	f7ff feb5 	bl	80089e8 <_Balloc>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	b928      	cbnz	r0, 8008c8e <__i2b+0x1a>
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <__i2b+0x24>)
 8008c84:	4805      	ldr	r0, [pc, #20]	; (8008c9c <__i2b+0x28>)
 8008c86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c8a:	f001 f9c9 	bl	800a020 <__assert_func>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	6144      	str	r4, [r0, #20]
 8008c92:	6103      	str	r3, [r0, #16]
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop
 8008c98:	0800b29c 	.word	0x0800b29c
 8008c9c:	0800b32c 	.word	0x0800b32c

08008ca0 <__multiply>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	690a      	ldr	r2, [r1, #16]
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	bfb8      	it	lt
 8008cae:	460b      	movlt	r3, r1
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	bfbc      	itt	lt
 8008cb4:	4625      	movlt	r5, r4
 8008cb6:	461c      	movlt	r4, r3
 8008cb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008cbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008cc0:	68ab      	ldr	r3, [r5, #8]
 8008cc2:	6869      	ldr	r1, [r5, #4]
 8008cc4:	eb0a 0709 	add.w	r7, sl, r9
 8008cc8:	42bb      	cmp	r3, r7
 8008cca:	b085      	sub	sp, #20
 8008ccc:	bfb8      	it	lt
 8008cce:	3101      	addlt	r1, #1
 8008cd0:	f7ff fe8a 	bl	80089e8 <_Balloc>
 8008cd4:	b930      	cbnz	r0, 8008ce4 <__multiply+0x44>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b42      	ldr	r3, [pc, #264]	; (8008de4 <__multiply+0x144>)
 8008cda:	4843      	ldr	r0, [pc, #268]	; (8008de8 <__multiply+0x148>)
 8008cdc:	f240 115d 	movw	r1, #349	; 0x15d
 8008ce0:	f001 f99e 	bl	800a020 <__assert_func>
 8008ce4:	f100 0614 	add.w	r6, r0, #20
 8008ce8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008cec:	4633      	mov	r3, r6
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4543      	cmp	r3, r8
 8008cf2:	d31e      	bcc.n	8008d32 <__multiply+0x92>
 8008cf4:	f105 0c14 	add.w	ip, r5, #20
 8008cf8:	f104 0314 	add.w	r3, r4, #20
 8008cfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d04:	9202      	str	r2, [sp, #8]
 8008d06:	ebac 0205 	sub.w	r2, ip, r5
 8008d0a:	3a15      	subs	r2, #21
 8008d0c:	f022 0203 	bic.w	r2, r2, #3
 8008d10:	3204      	adds	r2, #4
 8008d12:	f105 0115 	add.w	r1, r5, #21
 8008d16:	458c      	cmp	ip, r1
 8008d18:	bf38      	it	cc
 8008d1a:	2204      	movcc	r2, #4
 8008d1c:	9201      	str	r2, [sp, #4]
 8008d1e:	9a02      	ldr	r2, [sp, #8]
 8008d20:	9303      	str	r3, [sp, #12]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d808      	bhi.n	8008d38 <__multiply+0x98>
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	dc55      	bgt.n	8008dd6 <__multiply+0x136>
 8008d2a:	6107      	str	r7, [r0, #16]
 8008d2c:	b005      	add	sp, #20
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	f843 2b04 	str.w	r2, [r3], #4
 8008d36:	e7db      	b.n	8008cf0 <__multiply+0x50>
 8008d38:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d3c:	f1ba 0f00 	cmp.w	sl, #0
 8008d40:	d020      	beq.n	8008d84 <__multiply+0xe4>
 8008d42:	f105 0e14 	add.w	lr, r5, #20
 8008d46:	46b1      	mov	r9, r6
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d4e:	f8d9 b000 	ldr.w	fp, [r9]
 8008d52:	b2a1      	uxth	r1, r4
 8008d54:	fa1f fb8b 	uxth.w	fp, fp
 8008d58:	fb0a b101 	mla	r1, sl, r1, fp
 8008d5c:	4411      	add	r1, r2
 8008d5e:	f8d9 2000 	ldr.w	r2, [r9]
 8008d62:	0c24      	lsrs	r4, r4, #16
 8008d64:	0c12      	lsrs	r2, r2, #16
 8008d66:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d6e:	b289      	uxth	r1, r1
 8008d70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d74:	45f4      	cmp	ip, lr
 8008d76:	f849 1b04 	str.w	r1, [r9], #4
 8008d7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008d7e:	d8e4      	bhi.n	8008d4a <__multiply+0xaa>
 8008d80:	9901      	ldr	r1, [sp, #4]
 8008d82:	5072      	str	r2, [r6, r1]
 8008d84:	9a03      	ldr	r2, [sp, #12]
 8008d86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	f1b9 0f00 	cmp.w	r9, #0
 8008d90:	d01f      	beq.n	8008dd2 <__multiply+0x132>
 8008d92:	6834      	ldr	r4, [r6, #0]
 8008d94:	f105 0114 	add.w	r1, r5, #20
 8008d98:	46b6      	mov	lr, r6
 8008d9a:	f04f 0a00 	mov.w	sl, #0
 8008d9e:	880a      	ldrh	r2, [r1, #0]
 8008da0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008da4:	fb09 b202 	mla	r2, r9, r2, fp
 8008da8:	4492      	add	sl, r2
 8008daa:	b2a4      	uxth	r4, r4
 8008dac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008db0:	f84e 4b04 	str.w	r4, [lr], #4
 8008db4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008db8:	f8be 2000 	ldrh.w	r2, [lr]
 8008dbc:	0c24      	lsrs	r4, r4, #16
 8008dbe:	fb09 2404 	mla	r4, r9, r4, r2
 8008dc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008dc6:	458c      	cmp	ip, r1
 8008dc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dcc:	d8e7      	bhi.n	8008d9e <__multiply+0xfe>
 8008dce:	9a01      	ldr	r2, [sp, #4]
 8008dd0:	50b4      	str	r4, [r6, r2]
 8008dd2:	3604      	adds	r6, #4
 8008dd4:	e7a3      	b.n	8008d1e <__multiply+0x7e>
 8008dd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1a5      	bne.n	8008d2a <__multiply+0x8a>
 8008dde:	3f01      	subs	r7, #1
 8008de0:	e7a1      	b.n	8008d26 <__multiply+0x86>
 8008de2:	bf00      	nop
 8008de4:	0800b29c 	.word	0x0800b29c
 8008de8:	0800b32c 	.word	0x0800b32c

08008dec <__pow5mult>:
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4615      	mov	r5, r2
 8008df2:	f012 0203 	ands.w	r2, r2, #3
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	d007      	beq.n	8008e0c <__pow5mult+0x20>
 8008dfc:	4c25      	ldr	r4, [pc, #148]	; (8008e94 <__pow5mult+0xa8>)
 8008dfe:	3a01      	subs	r2, #1
 8008e00:	2300      	movs	r3, #0
 8008e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e06:	f7ff fe51 	bl	8008aac <__multadd>
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	10ad      	asrs	r5, r5, #2
 8008e0e:	d03d      	beq.n	8008e8c <__pow5mult+0xa0>
 8008e10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e12:	b97c      	cbnz	r4, 8008e34 <__pow5mult+0x48>
 8008e14:	2010      	movs	r0, #16
 8008e16:	f7ff fdbf 	bl	8008998 <malloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8008e1e:	b928      	cbnz	r0, 8008e2c <__pow5mult+0x40>
 8008e20:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <__pow5mult+0xac>)
 8008e22:	481e      	ldr	r0, [pc, #120]	; (8008e9c <__pow5mult+0xb0>)
 8008e24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e28:	f001 f8fa 	bl	800a020 <__assert_func>
 8008e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e30:	6004      	str	r4, [r0, #0]
 8008e32:	60c4      	str	r4, [r0, #12]
 8008e34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e3c:	b94c      	cbnz	r4, 8008e52 <__pow5mult+0x66>
 8008e3e:	f240 2171 	movw	r1, #625	; 0x271
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ff16 	bl	8008c74 <__i2b>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e4e:	4604      	mov	r4, r0
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	f04f 0900 	mov.w	r9, #0
 8008e56:	07eb      	lsls	r3, r5, #31
 8008e58:	d50a      	bpl.n	8008e70 <__pow5mult+0x84>
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f7ff ff1e 	bl	8008ca0 <__multiply>
 8008e64:	4639      	mov	r1, r7
 8008e66:	4680      	mov	r8, r0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7ff fdfd 	bl	8008a68 <_Bfree>
 8008e6e:	4647      	mov	r7, r8
 8008e70:	106d      	asrs	r5, r5, #1
 8008e72:	d00b      	beq.n	8008e8c <__pow5mult+0xa0>
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	b938      	cbnz	r0, 8008e88 <__pow5mult+0x9c>
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff ff0f 	bl	8008ca0 <__multiply>
 8008e82:	6020      	str	r0, [r4, #0]
 8008e84:	f8c0 9000 	str.w	r9, [r0]
 8008e88:	4604      	mov	r4, r0
 8008e8a:	e7e4      	b.n	8008e56 <__pow5mult+0x6a>
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	bf00      	nop
 8008e94:	0800b480 	.word	0x0800b480
 8008e98:	0800b226 	.word	0x0800b226
 8008e9c:	0800b32c 	.word	0x0800b32c

08008ea0 <__lshift>:
 8008ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	6849      	ldr	r1, [r1, #4]
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb8:	f108 0601 	add.w	r6, r8, #1
 8008ebc:	42b3      	cmp	r3, r6
 8008ebe:	db0b      	blt.n	8008ed8 <__lshift+0x38>
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff fd91 	bl	80089e8 <_Balloc>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b948      	cbnz	r0, 8008ede <__lshift+0x3e>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b28      	ldr	r3, [pc, #160]	; (8008f70 <__lshift+0xd0>)
 8008ece:	4829      	ldr	r0, [pc, #164]	; (8008f74 <__lshift+0xd4>)
 8008ed0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ed4:	f001 f8a4 	bl	800a020 <__assert_func>
 8008ed8:	3101      	adds	r1, #1
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	e7ee      	b.n	8008ebc <__lshift+0x1c>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f100 0114 	add.w	r1, r0, #20
 8008ee4:	f100 0210 	add.w	r2, r0, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4553      	cmp	r3, sl
 8008eec:	db33      	blt.n	8008f56 <__lshift+0xb6>
 8008eee:	6920      	ldr	r0, [r4, #16]
 8008ef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ef4:	f104 0314 	add.w	r3, r4, #20
 8008ef8:	f019 091f 	ands.w	r9, r9, #31
 8008efc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f04:	d02b      	beq.n	8008f5e <__lshift+0xbe>
 8008f06:	f1c9 0e20 	rsb	lr, r9, #32
 8008f0a:	468a      	mov	sl, r1
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	fa00 f009 	lsl.w	r0, r0, r9
 8008f14:	4302      	orrs	r2, r0
 8008f16:	f84a 2b04 	str.w	r2, [sl], #4
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	459c      	cmp	ip, r3
 8008f20:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f24:	d8f3      	bhi.n	8008f0e <__lshift+0x6e>
 8008f26:	ebac 0304 	sub.w	r3, ip, r4
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3304      	adds	r3, #4
 8008f32:	f104 0015 	add.w	r0, r4, #21
 8008f36:	4584      	cmp	ip, r0
 8008f38:	bf38      	it	cc
 8008f3a:	2304      	movcc	r3, #4
 8008f3c:	50ca      	str	r2, [r1, r3]
 8008f3e:	b10a      	cbz	r2, 8008f44 <__lshift+0xa4>
 8008f40:	f108 0602 	add.w	r6, r8, #2
 8008f44:	3e01      	subs	r6, #1
 8008f46:	4638      	mov	r0, r7
 8008f48:	612e      	str	r6, [r5, #16]
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	f7ff fd8c 	bl	8008a68 <_Bfree>
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	e7c5      	b.n	8008eea <__lshift+0x4a>
 8008f5e:	3904      	subs	r1, #4
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f68:	459c      	cmp	ip, r3
 8008f6a:	d8f9      	bhi.n	8008f60 <__lshift+0xc0>
 8008f6c:	e7ea      	b.n	8008f44 <__lshift+0xa4>
 8008f6e:	bf00      	nop
 8008f70:	0800b29c 	.word	0x0800b29c
 8008f74:	0800b32c 	.word	0x0800b32c

08008f78 <__mcmp>:
 8008f78:	b530      	push	{r4, r5, lr}
 8008f7a:	6902      	ldr	r2, [r0, #16]
 8008f7c:	690c      	ldr	r4, [r1, #16]
 8008f7e:	1b12      	subs	r2, r2, r4
 8008f80:	d10e      	bne.n	8008fa0 <__mcmp+0x28>
 8008f82:	f100 0314 	add.w	r3, r0, #20
 8008f86:	3114      	adds	r1, #20
 8008f88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d003      	beq.n	8008fa4 <__mcmp+0x2c>
 8008f9c:	d305      	bcc.n	8008faa <__mcmp+0x32>
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	bd30      	pop	{r4, r5, pc}
 8008fa4:	4283      	cmp	r3, r0
 8008fa6:	d3f3      	bcc.n	8008f90 <__mcmp+0x18>
 8008fa8:	e7fa      	b.n	8008fa0 <__mcmp+0x28>
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	e7f7      	b.n	8008fa0 <__mcmp+0x28>

08008fb0 <__mdiff>:
 8008fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4617      	mov	r7, r2
 8008fbe:	f7ff ffdb 	bl	8008f78 <__mcmp>
 8008fc2:	1e05      	subs	r5, r0, #0
 8008fc4:	d110      	bne.n	8008fe8 <__mdiff+0x38>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff fd0d 	bl	80089e8 <_Balloc>
 8008fce:	b930      	cbnz	r0, 8008fde <__mdiff+0x2e>
 8008fd0:	4b39      	ldr	r3, [pc, #228]	; (80090b8 <__mdiff+0x108>)
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	f240 2132 	movw	r1, #562	; 0x232
 8008fd8:	4838      	ldr	r0, [pc, #224]	; (80090bc <__mdiff+0x10c>)
 8008fda:	f001 f821 	bl	800a020 <__assert_func>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	bfa4      	itt	ge
 8008fea:	463b      	movge	r3, r7
 8008fec:	4627      	movge	r7, r4
 8008fee:	4630      	mov	r0, r6
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	bfa6      	itte	ge
 8008ff4:	461c      	movge	r4, r3
 8008ff6:	2500      	movge	r5, #0
 8008ff8:	2501      	movlt	r5, #1
 8008ffa:	f7ff fcf5 	bl	80089e8 <_Balloc>
 8008ffe:	b920      	cbnz	r0, 800900a <__mdiff+0x5a>
 8009000:	4b2d      	ldr	r3, [pc, #180]	; (80090b8 <__mdiff+0x108>)
 8009002:	4602      	mov	r2, r0
 8009004:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009008:	e7e6      	b.n	8008fd8 <__mdiff+0x28>
 800900a:	693e      	ldr	r6, [r7, #16]
 800900c:	60c5      	str	r5, [r0, #12]
 800900e:	6925      	ldr	r5, [r4, #16]
 8009010:	f107 0114 	add.w	r1, r7, #20
 8009014:	f104 0914 	add.w	r9, r4, #20
 8009018:	f100 0e14 	add.w	lr, r0, #20
 800901c:	f107 0210 	add.w	r2, r7, #16
 8009020:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009024:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009028:	46f2      	mov	sl, lr
 800902a:	2700      	movs	r7, #0
 800902c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009034:	fa1f f883 	uxth.w	r8, r3
 8009038:	fa17 f78b 	uxtah	r7, r7, fp
 800903c:	0c1b      	lsrs	r3, r3, #16
 800903e:	eba7 0808 	sub.w	r8, r7, r8
 8009042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800904a:	fa1f f888 	uxth.w	r8, r8
 800904e:	141f      	asrs	r7, r3, #16
 8009050:	454d      	cmp	r5, r9
 8009052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009056:	f84a 3b04 	str.w	r3, [sl], #4
 800905a:	d8e7      	bhi.n	800902c <__mdiff+0x7c>
 800905c:	1b2b      	subs	r3, r5, r4
 800905e:	3b15      	subs	r3, #21
 8009060:	f023 0303 	bic.w	r3, r3, #3
 8009064:	3304      	adds	r3, #4
 8009066:	3415      	adds	r4, #21
 8009068:	42a5      	cmp	r5, r4
 800906a:	bf38      	it	cc
 800906c:	2304      	movcc	r3, #4
 800906e:	4419      	add	r1, r3
 8009070:	4473      	add	r3, lr
 8009072:	469e      	mov	lr, r3
 8009074:	460d      	mov	r5, r1
 8009076:	4565      	cmp	r5, ip
 8009078:	d30e      	bcc.n	8009098 <__mdiff+0xe8>
 800907a:	f10c 0203 	add.w	r2, ip, #3
 800907e:	1a52      	subs	r2, r2, r1
 8009080:	f022 0203 	bic.w	r2, r2, #3
 8009084:	3903      	subs	r1, #3
 8009086:	458c      	cmp	ip, r1
 8009088:	bf38      	it	cc
 800908a:	2200      	movcc	r2, #0
 800908c:	441a      	add	r2, r3
 800908e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009092:	b17b      	cbz	r3, 80090b4 <__mdiff+0x104>
 8009094:	6106      	str	r6, [r0, #16]
 8009096:	e7a5      	b.n	8008fe4 <__mdiff+0x34>
 8009098:	f855 8b04 	ldr.w	r8, [r5], #4
 800909c:	fa17 f488 	uxtah	r4, r7, r8
 80090a0:	1422      	asrs	r2, r4, #16
 80090a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80090a6:	b2a4      	uxth	r4, r4
 80090a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090ac:	f84e 4b04 	str.w	r4, [lr], #4
 80090b0:	1417      	asrs	r7, r2, #16
 80090b2:	e7e0      	b.n	8009076 <__mdiff+0xc6>
 80090b4:	3e01      	subs	r6, #1
 80090b6:	e7ea      	b.n	800908e <__mdiff+0xde>
 80090b8:	0800b29c 	.word	0x0800b29c
 80090bc:	0800b32c 	.word	0x0800b32c

080090c0 <__ulp>:
 80090c0:	b082      	sub	sp, #8
 80090c2:	ed8d 0b00 	vstr	d0, [sp]
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	4912      	ldr	r1, [pc, #72]	; (8009114 <__ulp+0x54>)
 80090ca:	4019      	ands	r1, r3
 80090cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80090d0:	2900      	cmp	r1, #0
 80090d2:	dd05      	ble.n	80090e0 <__ulp+0x20>
 80090d4:	2200      	movs	r2, #0
 80090d6:	460b      	mov	r3, r1
 80090d8:	ec43 2b10 	vmov	d0, r2, r3
 80090dc:	b002      	add	sp, #8
 80090de:	4770      	bx	lr
 80090e0:	4249      	negs	r1, r1
 80090e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	f04f 0300 	mov.w	r3, #0
 80090f2:	da04      	bge.n	80090fe <__ulp+0x3e>
 80090f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090f8:	fa41 f300 	asr.w	r3, r1, r0
 80090fc:	e7ec      	b.n	80090d8 <__ulp+0x18>
 80090fe:	f1a0 0114 	sub.w	r1, r0, #20
 8009102:	291e      	cmp	r1, #30
 8009104:	bfda      	itte	le
 8009106:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800910a:	fa20 f101 	lsrle.w	r1, r0, r1
 800910e:	2101      	movgt	r1, #1
 8009110:	460a      	mov	r2, r1
 8009112:	e7e1      	b.n	80090d8 <__ulp+0x18>
 8009114:	7ff00000 	.word	0x7ff00000

08009118 <__b2d>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	6905      	ldr	r5, [r0, #16]
 800911c:	f100 0714 	add.w	r7, r0, #20
 8009120:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009124:	1f2e      	subs	r6, r5, #4
 8009126:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800912a:	4620      	mov	r0, r4
 800912c:	f7ff fd52 	bl	8008bd4 <__hi0bits>
 8009130:	f1c0 0320 	rsb	r3, r0, #32
 8009134:	280a      	cmp	r0, #10
 8009136:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80091b4 <__b2d+0x9c>
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	dc14      	bgt.n	8009168 <__b2d+0x50>
 800913e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009142:	fa24 f10e 	lsr.w	r1, r4, lr
 8009146:	42b7      	cmp	r7, r6
 8009148:	ea41 030c 	orr.w	r3, r1, ip
 800914c:	bf34      	ite	cc
 800914e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009152:	2100      	movcs	r1, #0
 8009154:	3015      	adds	r0, #21
 8009156:	fa04 f000 	lsl.w	r0, r4, r0
 800915a:	fa21 f10e 	lsr.w	r1, r1, lr
 800915e:	ea40 0201 	orr.w	r2, r0, r1
 8009162:	ec43 2b10 	vmov	d0, r2, r3
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	42b7      	cmp	r7, r6
 800916a:	bf3a      	itte	cc
 800916c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009170:	f1a5 0608 	subcc.w	r6, r5, #8
 8009174:	2100      	movcs	r1, #0
 8009176:	380b      	subs	r0, #11
 8009178:	d017      	beq.n	80091aa <__b2d+0x92>
 800917a:	f1c0 0c20 	rsb	ip, r0, #32
 800917e:	fa04 f500 	lsl.w	r5, r4, r0
 8009182:	42be      	cmp	r6, r7
 8009184:	fa21 f40c 	lsr.w	r4, r1, ip
 8009188:	ea45 0504 	orr.w	r5, r5, r4
 800918c:	bf8c      	ite	hi
 800918e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009192:	2400      	movls	r4, #0
 8009194:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009198:	fa01 f000 	lsl.w	r0, r1, r0
 800919c:	fa24 f40c 	lsr.w	r4, r4, ip
 80091a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091a4:	ea40 0204 	orr.w	r2, r0, r4
 80091a8:	e7db      	b.n	8009162 <__b2d+0x4a>
 80091aa:	ea44 030c 	orr.w	r3, r4, ip
 80091ae:	460a      	mov	r2, r1
 80091b0:	e7d7      	b.n	8009162 <__b2d+0x4a>
 80091b2:	bf00      	nop
 80091b4:	3ff00000 	.word	0x3ff00000

080091b8 <__d2b>:
 80091b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091bc:	4689      	mov	r9, r1
 80091be:	2101      	movs	r1, #1
 80091c0:	ec57 6b10 	vmov	r6, r7, d0
 80091c4:	4690      	mov	r8, r2
 80091c6:	f7ff fc0f 	bl	80089e8 <_Balloc>
 80091ca:	4604      	mov	r4, r0
 80091cc:	b930      	cbnz	r0, 80091dc <__d2b+0x24>
 80091ce:	4602      	mov	r2, r0
 80091d0:	4b25      	ldr	r3, [pc, #148]	; (8009268 <__d2b+0xb0>)
 80091d2:	4826      	ldr	r0, [pc, #152]	; (800926c <__d2b+0xb4>)
 80091d4:	f240 310a 	movw	r1, #778	; 0x30a
 80091d8:	f000 ff22 	bl	800a020 <__assert_func>
 80091dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091e4:	bb35      	cbnz	r5, 8009234 <__d2b+0x7c>
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	d028      	beq.n	800923e <__d2b+0x86>
 80091ec:	4668      	mov	r0, sp
 80091ee:	9600      	str	r6, [sp, #0]
 80091f0:	f7ff fd10 	bl	8008c14 <__lo0bits>
 80091f4:	9900      	ldr	r1, [sp, #0]
 80091f6:	b300      	cbz	r0, 800923a <__d2b+0x82>
 80091f8:	9a01      	ldr	r2, [sp, #4]
 80091fa:	f1c0 0320 	rsb	r3, r0, #32
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	430b      	orrs	r3, r1
 8009204:	40c2      	lsrs	r2, r0
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	9201      	str	r2, [sp, #4]
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	61a3      	str	r3, [r4, #24]
 800920e:	2b00      	cmp	r3, #0
 8009210:	bf14      	ite	ne
 8009212:	2202      	movne	r2, #2
 8009214:	2201      	moveq	r2, #1
 8009216:	6122      	str	r2, [r4, #16]
 8009218:	b1d5      	cbz	r5, 8009250 <__d2b+0x98>
 800921a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800921e:	4405      	add	r5, r0
 8009220:	f8c9 5000 	str.w	r5, [r9]
 8009224:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009228:	f8c8 0000 	str.w	r0, [r8]
 800922c:	4620      	mov	r0, r4
 800922e:	b003      	add	sp, #12
 8009230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009238:	e7d5      	b.n	80091e6 <__d2b+0x2e>
 800923a:	6161      	str	r1, [r4, #20]
 800923c:	e7e5      	b.n	800920a <__d2b+0x52>
 800923e:	a801      	add	r0, sp, #4
 8009240:	f7ff fce8 	bl	8008c14 <__lo0bits>
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	6163      	str	r3, [r4, #20]
 8009248:	2201      	movs	r2, #1
 800924a:	6122      	str	r2, [r4, #16]
 800924c:	3020      	adds	r0, #32
 800924e:	e7e3      	b.n	8009218 <__d2b+0x60>
 8009250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009258:	f8c9 0000 	str.w	r0, [r9]
 800925c:	6918      	ldr	r0, [r3, #16]
 800925e:	f7ff fcb9 	bl	8008bd4 <__hi0bits>
 8009262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009266:	e7df      	b.n	8009228 <__d2b+0x70>
 8009268:	0800b29c 	.word	0x0800b29c
 800926c:	0800b32c 	.word	0x0800b32c

08009270 <__ratio>:
 8009270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	468a      	mov	sl, r1
 8009276:	4669      	mov	r1, sp
 8009278:	4683      	mov	fp, r0
 800927a:	f7ff ff4d 	bl	8009118 <__b2d>
 800927e:	a901      	add	r1, sp, #4
 8009280:	4650      	mov	r0, sl
 8009282:	ec59 8b10 	vmov	r8, r9, d0
 8009286:	ee10 6a10 	vmov	r6, s0
 800928a:	f7ff ff45 	bl	8009118 <__b2d>
 800928e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009292:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009296:	eba3 0c02 	sub.w	ip, r3, r2
 800929a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80092a4:	ec55 4b10 	vmov	r4, r5, d0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	ee10 0a10 	vmov	r0, s0
 80092ae:	bfce      	itee	gt
 80092b0:	464a      	movgt	r2, r9
 80092b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092b6:	462a      	movle	r2, r5
 80092b8:	464f      	mov	r7, r9
 80092ba:	4629      	mov	r1, r5
 80092bc:	bfcc      	ite	gt
 80092be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092c2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80092c6:	ec47 6b17 	vmov	d7, r6, r7
 80092ca:	ec41 0b16 	vmov	d6, r0, r1
 80092ce:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80092d2:	b003      	add	sp, #12
 80092d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092d8 <__copybits>:
 80092d8:	3901      	subs	r1, #1
 80092da:	b570      	push	{r4, r5, r6, lr}
 80092dc:	1149      	asrs	r1, r1, #5
 80092de:	6914      	ldr	r4, [r2, #16]
 80092e0:	3101      	adds	r1, #1
 80092e2:	f102 0314 	add.w	r3, r2, #20
 80092e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092ee:	1f05      	subs	r5, r0, #4
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	d30c      	bcc.n	800930e <__copybits+0x36>
 80092f4:	1aa3      	subs	r3, r4, r2
 80092f6:	3b11      	subs	r3, #17
 80092f8:	f023 0303 	bic.w	r3, r3, #3
 80092fc:	3211      	adds	r2, #17
 80092fe:	42a2      	cmp	r2, r4
 8009300:	bf88      	it	hi
 8009302:	2300      	movhi	r3, #0
 8009304:	4418      	add	r0, r3
 8009306:	2300      	movs	r3, #0
 8009308:	4288      	cmp	r0, r1
 800930a:	d305      	bcc.n	8009318 <__copybits+0x40>
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009312:	f845 6f04 	str.w	r6, [r5, #4]!
 8009316:	e7eb      	b.n	80092f0 <__copybits+0x18>
 8009318:	f840 3b04 	str.w	r3, [r0], #4
 800931c:	e7f4      	b.n	8009308 <__copybits+0x30>

0800931e <__any_on>:
 800931e:	f100 0214 	add.w	r2, r0, #20
 8009322:	6900      	ldr	r0, [r0, #16]
 8009324:	114b      	asrs	r3, r1, #5
 8009326:	4298      	cmp	r0, r3
 8009328:	b510      	push	{r4, lr}
 800932a:	db11      	blt.n	8009350 <__any_on+0x32>
 800932c:	dd0a      	ble.n	8009344 <__any_on+0x26>
 800932e:	f011 011f 	ands.w	r1, r1, #31
 8009332:	d007      	beq.n	8009344 <__any_on+0x26>
 8009334:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009338:	fa24 f001 	lsr.w	r0, r4, r1
 800933c:	fa00 f101 	lsl.w	r1, r0, r1
 8009340:	428c      	cmp	r4, r1
 8009342:	d10b      	bne.n	800935c <__any_on+0x3e>
 8009344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009348:	4293      	cmp	r3, r2
 800934a:	d803      	bhi.n	8009354 <__any_on+0x36>
 800934c:	2000      	movs	r0, #0
 800934e:	bd10      	pop	{r4, pc}
 8009350:	4603      	mov	r3, r0
 8009352:	e7f7      	b.n	8009344 <__any_on+0x26>
 8009354:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009358:	2900      	cmp	r1, #0
 800935a:	d0f5      	beq.n	8009348 <__any_on+0x2a>
 800935c:	2001      	movs	r0, #1
 800935e:	e7f6      	b.n	800934e <__any_on+0x30>

08009360 <_calloc_r>:
 8009360:	b513      	push	{r0, r1, r4, lr}
 8009362:	434a      	muls	r2, r1
 8009364:	4611      	mov	r1, r2
 8009366:	9201      	str	r2, [sp, #4]
 8009368:	f000 f85a 	bl	8009420 <_malloc_r>
 800936c:	4604      	mov	r4, r0
 800936e:	b118      	cbz	r0, 8009378 <_calloc_r+0x18>
 8009370:	9a01      	ldr	r2, [sp, #4]
 8009372:	2100      	movs	r1, #0
 8009374:	f7fc fbd2 	bl	8005b1c <memset>
 8009378:	4620      	mov	r0, r4
 800937a:	b002      	add	sp, #8
 800937c:	bd10      	pop	{r4, pc}
	...

08009380 <_free_r>:
 8009380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009382:	2900      	cmp	r1, #0
 8009384:	d048      	beq.n	8009418 <_free_r+0x98>
 8009386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938a:	9001      	str	r0, [sp, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f1a1 0404 	sub.w	r4, r1, #4
 8009392:	bfb8      	it	lt
 8009394:	18e4      	addlt	r4, r4, r3
 8009396:	f001 f847 	bl	800a428 <__malloc_lock>
 800939a:	4a20      	ldr	r2, [pc, #128]	; (800941c <_free_r+0x9c>)
 800939c:	9801      	ldr	r0, [sp, #4]
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	4615      	mov	r5, r2
 80093a2:	b933      	cbnz	r3, 80093b2 <_free_r+0x32>
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	6014      	str	r4, [r2, #0]
 80093a8:	b003      	add	sp, #12
 80093aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093ae:	f001 b841 	b.w	800a434 <__malloc_unlock>
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	d90b      	bls.n	80093ce <_free_r+0x4e>
 80093b6:	6821      	ldr	r1, [r4, #0]
 80093b8:	1862      	adds	r2, r4, r1
 80093ba:	4293      	cmp	r3, r2
 80093bc:	bf04      	itt	eq
 80093be:	681a      	ldreq	r2, [r3, #0]
 80093c0:	685b      	ldreq	r3, [r3, #4]
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	bf04      	itt	eq
 80093c6:	1852      	addeq	r2, r2, r1
 80093c8:	6022      	streq	r2, [r4, #0]
 80093ca:	602c      	str	r4, [r5, #0]
 80093cc:	e7ec      	b.n	80093a8 <_free_r+0x28>
 80093ce:	461a      	mov	r2, r3
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b10b      	cbz	r3, 80093d8 <_free_r+0x58>
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	d9fa      	bls.n	80093ce <_free_r+0x4e>
 80093d8:	6811      	ldr	r1, [r2, #0]
 80093da:	1855      	adds	r5, r2, r1
 80093dc:	42a5      	cmp	r5, r4
 80093de:	d10b      	bne.n	80093f8 <_free_r+0x78>
 80093e0:	6824      	ldr	r4, [r4, #0]
 80093e2:	4421      	add	r1, r4
 80093e4:	1854      	adds	r4, r2, r1
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	6011      	str	r1, [r2, #0]
 80093ea:	d1dd      	bne.n	80093a8 <_free_r+0x28>
 80093ec:	681c      	ldr	r4, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	6053      	str	r3, [r2, #4]
 80093f2:	4421      	add	r1, r4
 80093f4:	6011      	str	r1, [r2, #0]
 80093f6:	e7d7      	b.n	80093a8 <_free_r+0x28>
 80093f8:	d902      	bls.n	8009400 <_free_r+0x80>
 80093fa:	230c      	movs	r3, #12
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	e7d3      	b.n	80093a8 <_free_r+0x28>
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1961      	adds	r1, r4, r5
 8009404:	428b      	cmp	r3, r1
 8009406:	bf04      	itt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	bf04      	itt	eq
 8009410:	1949      	addeq	r1, r1, r5
 8009412:	6021      	streq	r1, [r4, #0]
 8009414:	6054      	str	r4, [r2, #4]
 8009416:	e7c7      	b.n	80093a8 <_free_r+0x28>
 8009418:	b003      	add	sp, #12
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	20000230 	.word	0x20000230

08009420 <_malloc_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	1ccd      	adds	r5, r1, #3
 8009424:	f025 0503 	bic.w	r5, r5, #3
 8009428:	3508      	adds	r5, #8
 800942a:	2d0c      	cmp	r5, #12
 800942c:	bf38      	it	cc
 800942e:	250c      	movcc	r5, #12
 8009430:	2d00      	cmp	r5, #0
 8009432:	4606      	mov	r6, r0
 8009434:	db01      	blt.n	800943a <_malloc_r+0x1a>
 8009436:	42a9      	cmp	r1, r5
 8009438:	d903      	bls.n	8009442 <_malloc_r+0x22>
 800943a:	230c      	movs	r3, #12
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	2000      	movs	r0, #0
 8009440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009442:	f000 fff1 	bl	800a428 <__malloc_lock>
 8009446:	4921      	ldr	r1, [pc, #132]	; (80094cc <_malloc_r+0xac>)
 8009448:	680a      	ldr	r2, [r1, #0]
 800944a:	4614      	mov	r4, r2
 800944c:	b99c      	cbnz	r4, 8009476 <_malloc_r+0x56>
 800944e:	4f20      	ldr	r7, [pc, #128]	; (80094d0 <_malloc_r+0xb0>)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	b923      	cbnz	r3, 800945e <_malloc_r+0x3e>
 8009454:	4621      	mov	r1, r4
 8009456:	4630      	mov	r0, r6
 8009458:	f000 fcd2 	bl	8009e00 <_sbrk_r>
 800945c:	6038      	str	r0, [r7, #0]
 800945e:	4629      	mov	r1, r5
 8009460:	4630      	mov	r0, r6
 8009462:	f000 fccd 	bl	8009e00 <_sbrk_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d123      	bne.n	80094b2 <_malloc_r+0x92>
 800946a:	230c      	movs	r3, #12
 800946c:	6033      	str	r3, [r6, #0]
 800946e:	4630      	mov	r0, r6
 8009470:	f000 ffe0 	bl	800a434 <__malloc_unlock>
 8009474:	e7e3      	b.n	800943e <_malloc_r+0x1e>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	1b5b      	subs	r3, r3, r5
 800947a:	d417      	bmi.n	80094ac <_malloc_r+0x8c>
 800947c:	2b0b      	cmp	r3, #11
 800947e:	d903      	bls.n	8009488 <_malloc_r+0x68>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	441c      	add	r4, r3
 8009484:	6025      	str	r5, [r4, #0]
 8009486:	e004      	b.n	8009492 <_malloc_r+0x72>
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	42a2      	cmp	r2, r4
 800948c:	bf0c      	ite	eq
 800948e:	600b      	streq	r3, [r1, #0]
 8009490:	6053      	strne	r3, [r2, #4]
 8009492:	4630      	mov	r0, r6
 8009494:	f000 ffce 	bl	800a434 <__malloc_unlock>
 8009498:	f104 000b 	add.w	r0, r4, #11
 800949c:	1d23      	adds	r3, r4, #4
 800949e:	f020 0007 	bic.w	r0, r0, #7
 80094a2:	1ac2      	subs	r2, r0, r3
 80094a4:	d0cc      	beq.n	8009440 <_malloc_r+0x20>
 80094a6:	1a1b      	subs	r3, r3, r0
 80094a8:	50a3      	str	r3, [r4, r2]
 80094aa:	e7c9      	b.n	8009440 <_malloc_r+0x20>
 80094ac:	4622      	mov	r2, r4
 80094ae:	6864      	ldr	r4, [r4, #4]
 80094b0:	e7cc      	b.n	800944c <_malloc_r+0x2c>
 80094b2:	1cc4      	adds	r4, r0, #3
 80094b4:	f024 0403 	bic.w	r4, r4, #3
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d0e3      	beq.n	8009484 <_malloc_r+0x64>
 80094bc:	1a21      	subs	r1, r4, r0
 80094be:	4630      	mov	r0, r6
 80094c0:	f000 fc9e 	bl	8009e00 <_sbrk_r>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d1dd      	bne.n	8009484 <_malloc_r+0x64>
 80094c8:	e7cf      	b.n	800946a <_malloc_r+0x4a>
 80094ca:	bf00      	nop
 80094cc:	20000230 	.word	0x20000230
 80094d0:	20000234 	.word	0x20000234

080094d4 <__ssputs_r>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	688e      	ldr	r6, [r1, #8]
 80094da:	429e      	cmp	r6, r3
 80094dc:	4682      	mov	sl, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4690      	mov	r8, r2
 80094e2:	461f      	mov	r7, r3
 80094e4:	d838      	bhi.n	8009558 <__ssputs_r+0x84>
 80094e6:	898a      	ldrh	r2, [r1, #12]
 80094e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094ec:	d032      	beq.n	8009554 <__ssputs_r+0x80>
 80094ee:	6825      	ldr	r5, [r4, #0]
 80094f0:	6909      	ldr	r1, [r1, #16]
 80094f2:	eba5 0901 	sub.w	r9, r5, r1
 80094f6:	6965      	ldr	r5, [r4, #20]
 80094f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009500:	3301      	adds	r3, #1
 8009502:	444b      	add	r3, r9
 8009504:	106d      	asrs	r5, r5, #1
 8009506:	429d      	cmp	r5, r3
 8009508:	bf38      	it	cc
 800950a:	461d      	movcc	r5, r3
 800950c:	0553      	lsls	r3, r2, #21
 800950e:	d531      	bpl.n	8009574 <__ssputs_r+0xa0>
 8009510:	4629      	mov	r1, r5
 8009512:	f7ff ff85 	bl	8009420 <_malloc_r>
 8009516:	4606      	mov	r6, r0
 8009518:	b950      	cbnz	r0, 8009530 <__ssputs_r+0x5c>
 800951a:	230c      	movs	r3, #12
 800951c:	f8ca 3000 	str.w	r3, [sl]
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	6921      	ldr	r1, [r4, #16]
 8009532:	464a      	mov	r2, r9
 8009534:	f7ff fa4a 	bl	80089cc <memcpy>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800953e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	6126      	str	r6, [r4, #16]
 8009546:	6165      	str	r5, [r4, #20]
 8009548:	444e      	add	r6, r9
 800954a:	eba5 0509 	sub.w	r5, r5, r9
 800954e:	6026      	str	r6, [r4, #0]
 8009550:	60a5      	str	r5, [r4, #8]
 8009552:	463e      	mov	r6, r7
 8009554:	42be      	cmp	r6, r7
 8009556:	d900      	bls.n	800955a <__ssputs_r+0x86>
 8009558:	463e      	mov	r6, r7
 800955a:	4632      	mov	r2, r6
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	4641      	mov	r1, r8
 8009560:	f000 ff48 	bl	800a3f4 <memmove>
 8009564:	68a3      	ldr	r3, [r4, #8]
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	1b9b      	subs	r3, r3, r6
 800956a:	4432      	add	r2, r6
 800956c:	60a3      	str	r3, [r4, #8]
 800956e:	6022      	str	r2, [r4, #0]
 8009570:	2000      	movs	r0, #0
 8009572:	e7db      	b.n	800952c <__ssputs_r+0x58>
 8009574:	462a      	mov	r2, r5
 8009576:	f000 ff63 	bl	800a440 <_realloc_r>
 800957a:	4606      	mov	r6, r0
 800957c:	2800      	cmp	r0, #0
 800957e:	d1e1      	bne.n	8009544 <__ssputs_r+0x70>
 8009580:	6921      	ldr	r1, [r4, #16]
 8009582:	4650      	mov	r0, sl
 8009584:	f7ff fefc 	bl	8009380 <_free_r>
 8009588:	e7c7      	b.n	800951a <__ssputs_r+0x46>
	...

0800958c <_svfiprintf_r>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	4698      	mov	r8, r3
 8009592:	898b      	ldrh	r3, [r1, #12]
 8009594:	061b      	lsls	r3, r3, #24
 8009596:	b09d      	sub	sp, #116	; 0x74
 8009598:	4607      	mov	r7, r0
 800959a:	460d      	mov	r5, r1
 800959c:	4614      	mov	r4, r2
 800959e:	d50e      	bpl.n	80095be <_svfiprintf_r+0x32>
 80095a0:	690b      	ldr	r3, [r1, #16]
 80095a2:	b963      	cbnz	r3, 80095be <_svfiprintf_r+0x32>
 80095a4:	2140      	movs	r1, #64	; 0x40
 80095a6:	f7ff ff3b 	bl	8009420 <_malloc_r>
 80095aa:	6028      	str	r0, [r5, #0]
 80095ac:	6128      	str	r0, [r5, #16]
 80095ae:	b920      	cbnz	r0, 80095ba <_svfiprintf_r+0x2e>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	e0d1      	b.n	800975e <_svfiprintf_r+0x1d2>
 80095ba:	2340      	movs	r3, #64	; 0x40
 80095bc:	616b      	str	r3, [r5, #20]
 80095be:	2300      	movs	r3, #0
 80095c0:	9309      	str	r3, [sp, #36]	; 0x24
 80095c2:	2320      	movs	r3, #32
 80095c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095cc:	2330      	movs	r3, #48	; 0x30
 80095ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009778 <_svfiprintf_r+0x1ec>
 80095d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d6:	f04f 0901 	mov.w	r9, #1
 80095da:	4623      	mov	r3, r4
 80095dc:	469a      	mov	sl, r3
 80095de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e2:	b10a      	cbz	r2, 80095e8 <_svfiprintf_r+0x5c>
 80095e4:	2a25      	cmp	r2, #37	; 0x25
 80095e6:	d1f9      	bne.n	80095dc <_svfiprintf_r+0x50>
 80095e8:	ebba 0b04 	subs.w	fp, sl, r4
 80095ec:	d00b      	beq.n	8009606 <_svfiprintf_r+0x7a>
 80095ee:	465b      	mov	r3, fp
 80095f0:	4622      	mov	r2, r4
 80095f2:	4629      	mov	r1, r5
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff ff6d 	bl	80094d4 <__ssputs_r>
 80095fa:	3001      	adds	r0, #1
 80095fc:	f000 80aa 	beq.w	8009754 <_svfiprintf_r+0x1c8>
 8009600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009602:	445a      	add	r2, fp
 8009604:	9209      	str	r2, [sp, #36]	; 0x24
 8009606:	f89a 3000 	ldrb.w	r3, [sl]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80a2 	beq.w	8009754 <_svfiprintf_r+0x1c8>
 8009610:	2300      	movs	r3, #0
 8009612:	f04f 32ff 	mov.w	r2, #4294967295
 8009616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961a:	f10a 0a01 	add.w	sl, sl, #1
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009626:	931a      	str	r3, [sp, #104]	; 0x68
 8009628:	4654      	mov	r4, sl
 800962a:	2205      	movs	r2, #5
 800962c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009630:	4851      	ldr	r0, [pc, #324]	; (8009778 <_svfiprintf_r+0x1ec>)
 8009632:	f7f6 fe0d 	bl	8000250 <memchr>
 8009636:	9a04      	ldr	r2, [sp, #16]
 8009638:	b9d8      	cbnz	r0, 8009672 <_svfiprintf_r+0xe6>
 800963a:	06d0      	lsls	r0, r2, #27
 800963c:	bf44      	itt	mi
 800963e:	2320      	movmi	r3, #32
 8009640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009644:	0711      	lsls	r1, r2, #28
 8009646:	bf44      	itt	mi
 8009648:	232b      	movmi	r3, #43	; 0x2b
 800964a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964e:	f89a 3000 	ldrb.w	r3, [sl]
 8009652:	2b2a      	cmp	r3, #42	; 0x2a
 8009654:	d015      	beq.n	8009682 <_svfiprintf_r+0xf6>
 8009656:	9a07      	ldr	r2, [sp, #28]
 8009658:	4654      	mov	r4, sl
 800965a:	2000      	movs	r0, #0
 800965c:	f04f 0c0a 	mov.w	ip, #10
 8009660:	4621      	mov	r1, r4
 8009662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009666:	3b30      	subs	r3, #48	; 0x30
 8009668:	2b09      	cmp	r3, #9
 800966a:	d94e      	bls.n	800970a <_svfiprintf_r+0x17e>
 800966c:	b1b0      	cbz	r0, 800969c <_svfiprintf_r+0x110>
 800966e:	9207      	str	r2, [sp, #28]
 8009670:	e014      	b.n	800969c <_svfiprintf_r+0x110>
 8009672:	eba0 0308 	sub.w	r3, r0, r8
 8009676:	fa09 f303 	lsl.w	r3, r9, r3
 800967a:	4313      	orrs	r3, r2
 800967c:	9304      	str	r3, [sp, #16]
 800967e:	46a2      	mov	sl, r4
 8009680:	e7d2      	b.n	8009628 <_svfiprintf_r+0x9c>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	1d19      	adds	r1, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	9103      	str	r1, [sp, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfbb      	ittet	lt
 800968e:	425b      	neglt	r3, r3
 8009690:	f042 0202 	orrlt.w	r2, r2, #2
 8009694:	9307      	strge	r3, [sp, #28]
 8009696:	9307      	strlt	r3, [sp, #28]
 8009698:	bfb8      	it	lt
 800969a:	9204      	strlt	r2, [sp, #16]
 800969c:	7823      	ldrb	r3, [r4, #0]
 800969e:	2b2e      	cmp	r3, #46	; 0x2e
 80096a0:	d10c      	bne.n	80096bc <_svfiprintf_r+0x130>
 80096a2:	7863      	ldrb	r3, [r4, #1]
 80096a4:	2b2a      	cmp	r3, #42	; 0x2a
 80096a6:	d135      	bne.n	8009714 <_svfiprintf_r+0x188>
 80096a8:	9b03      	ldr	r3, [sp, #12]
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	9203      	str	r2, [sp, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfb8      	it	lt
 80096b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b8:	3402      	adds	r4, #2
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009788 <_svfiprintf_r+0x1fc>
 80096c0:	7821      	ldrb	r1, [r4, #0]
 80096c2:	2203      	movs	r2, #3
 80096c4:	4650      	mov	r0, sl
 80096c6:	f7f6 fdc3 	bl	8000250 <memchr>
 80096ca:	b140      	cbz	r0, 80096de <_svfiprintf_r+0x152>
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	eba0 000a 	sub.w	r0, r0, sl
 80096d2:	fa03 f000 	lsl.w	r0, r3, r0
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	4303      	orrs	r3, r0
 80096da:	3401      	adds	r4, #1
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e2:	4826      	ldr	r0, [pc, #152]	; (800977c <_svfiprintf_r+0x1f0>)
 80096e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e8:	2206      	movs	r2, #6
 80096ea:	f7f6 fdb1 	bl	8000250 <memchr>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d038      	beq.n	8009764 <_svfiprintf_r+0x1d8>
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <_svfiprintf_r+0x1f4>)
 80096f4:	bb1b      	cbnz	r3, 800973e <_svfiprintf_r+0x1b2>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	3307      	adds	r3, #7
 80096fa:	f023 0307 	bic.w	r3, r3, #7
 80096fe:	3308      	adds	r3, #8
 8009700:	9303      	str	r3, [sp, #12]
 8009702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009704:	4433      	add	r3, r6
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	e767      	b.n	80095da <_svfiprintf_r+0x4e>
 800970a:	fb0c 3202 	mla	r2, ip, r2, r3
 800970e:	460c      	mov	r4, r1
 8009710:	2001      	movs	r0, #1
 8009712:	e7a5      	b.n	8009660 <_svfiprintf_r+0xd4>
 8009714:	2300      	movs	r3, #0
 8009716:	3401      	adds	r4, #1
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	4619      	mov	r1, r3
 800971c:	f04f 0c0a 	mov.w	ip, #10
 8009720:	4620      	mov	r0, r4
 8009722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009726:	3a30      	subs	r2, #48	; 0x30
 8009728:	2a09      	cmp	r2, #9
 800972a:	d903      	bls.n	8009734 <_svfiprintf_r+0x1a8>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0c5      	beq.n	80096bc <_svfiprintf_r+0x130>
 8009730:	9105      	str	r1, [sp, #20]
 8009732:	e7c3      	b.n	80096bc <_svfiprintf_r+0x130>
 8009734:	fb0c 2101 	mla	r1, ip, r1, r2
 8009738:	4604      	mov	r4, r0
 800973a:	2301      	movs	r3, #1
 800973c:	e7f0      	b.n	8009720 <_svfiprintf_r+0x194>
 800973e:	ab03      	add	r3, sp, #12
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	462a      	mov	r2, r5
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <_svfiprintf_r+0x1f8>)
 8009746:	a904      	add	r1, sp, #16
 8009748:	4638      	mov	r0, r7
 800974a:	f7fc fa81 	bl	8005c50 <_printf_float>
 800974e:	1c42      	adds	r2, r0, #1
 8009750:	4606      	mov	r6, r0
 8009752:	d1d6      	bne.n	8009702 <_svfiprintf_r+0x176>
 8009754:	89ab      	ldrh	r3, [r5, #12]
 8009756:	065b      	lsls	r3, r3, #25
 8009758:	f53f af2c 	bmi.w	80095b4 <_svfiprintf_r+0x28>
 800975c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800975e:	b01d      	add	sp, #116	; 0x74
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	462a      	mov	r2, r5
 800976a:	4b06      	ldr	r3, [pc, #24]	; (8009784 <_svfiprintf_r+0x1f8>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	4638      	mov	r0, r7
 8009770:	f7fc fcfa 	bl	8006168 <_printf_i>
 8009774:	e7eb      	b.n	800974e <_svfiprintf_r+0x1c2>
 8009776:	bf00      	nop
 8009778:	0800b48c 	.word	0x0800b48c
 800977c:	0800b496 	.word	0x0800b496
 8009780:	08005c51 	.word	0x08005c51
 8009784:	080094d5 	.word	0x080094d5
 8009788:	0800b492 	.word	0x0800b492

0800978c <_sungetc_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	1c4b      	adds	r3, r1, #1
 8009790:	4614      	mov	r4, r2
 8009792:	d103      	bne.n	800979c <_sungetc_r+0x10>
 8009794:	f04f 35ff 	mov.w	r5, #4294967295
 8009798:	4628      	mov	r0, r5
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	8993      	ldrh	r3, [r2, #12]
 800979e:	f023 0320 	bic.w	r3, r3, #32
 80097a2:	8193      	strh	r3, [r2, #12]
 80097a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a6:	6852      	ldr	r2, [r2, #4]
 80097a8:	b2cd      	uxtb	r5, r1
 80097aa:	b18b      	cbz	r3, 80097d0 <_sungetc_r+0x44>
 80097ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097ae:	4293      	cmp	r3, r2
 80097b0:	dd08      	ble.n	80097c4 <_sungetc_r+0x38>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	1e5a      	subs	r2, r3, #1
 80097b6:	6022      	str	r2, [r4, #0]
 80097b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	3301      	adds	r3, #1
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	e7e9      	b.n	8009798 <_sungetc_r+0xc>
 80097c4:	4621      	mov	r1, r4
 80097c6:	f000 fbe3 	bl	8009f90 <__submore>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d0f1      	beq.n	80097b2 <_sungetc_r+0x26>
 80097ce:	e7e1      	b.n	8009794 <_sungetc_r+0x8>
 80097d0:	6921      	ldr	r1, [r4, #16]
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	b151      	cbz	r1, 80097ec <_sungetc_r+0x60>
 80097d6:	4299      	cmp	r1, r3
 80097d8:	d208      	bcs.n	80097ec <_sungetc_r+0x60>
 80097da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80097de:	42a9      	cmp	r1, r5
 80097e0:	d104      	bne.n	80097ec <_sungetc_r+0x60>
 80097e2:	3b01      	subs	r3, #1
 80097e4:	3201      	adds	r2, #1
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	6062      	str	r2, [r4, #4]
 80097ea:	e7d5      	b.n	8009798 <_sungetc_r+0xc>
 80097ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80097f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f4:	6363      	str	r3, [r4, #52]	; 0x34
 80097f6:	2303      	movs	r3, #3
 80097f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80097fa:	4623      	mov	r3, r4
 80097fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	2301      	movs	r3, #1
 8009804:	e7dc      	b.n	80097c0 <_sungetc_r+0x34>

08009806 <__ssrefill_r>:
 8009806:	b510      	push	{r4, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800980c:	b169      	cbz	r1, 800982a <__ssrefill_r+0x24>
 800980e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009812:	4299      	cmp	r1, r3
 8009814:	d001      	beq.n	800981a <__ssrefill_r+0x14>
 8009816:	f7ff fdb3 	bl	8009380 <_free_r>
 800981a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800981c:	6063      	str	r3, [r4, #4]
 800981e:	2000      	movs	r0, #0
 8009820:	6360      	str	r0, [r4, #52]	; 0x34
 8009822:	b113      	cbz	r3, 800982a <__ssrefill_r+0x24>
 8009824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd10      	pop	{r4, pc}
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	2300      	movs	r3, #0
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	f04f 30ff 	mov.w	r0, #4294967295
 800983e:	e7f3      	b.n	8009828 <__ssrefill_r+0x22>

08009840 <__ssvfiscanf_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	460c      	mov	r4, r1
 8009846:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800984a:	2100      	movs	r1, #0
 800984c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009850:	49b2      	ldr	r1, [pc, #712]	; (8009b1c <__ssvfiscanf_r+0x2dc>)
 8009852:	91a0      	str	r1, [sp, #640]	; 0x280
 8009854:	f10d 0804 	add.w	r8, sp, #4
 8009858:	49b1      	ldr	r1, [pc, #708]	; (8009b20 <__ssvfiscanf_r+0x2e0>)
 800985a:	4fb2      	ldr	r7, [pc, #712]	; (8009b24 <__ssvfiscanf_r+0x2e4>)
 800985c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8009b28 <__ssvfiscanf_r+0x2e8>
 8009860:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009864:	4606      	mov	r6, r0
 8009866:	91a1      	str	r1, [sp, #644]	; 0x284
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	f892 a000 	ldrb.w	sl, [r2]
 800986e:	f1ba 0f00 	cmp.w	sl, #0
 8009872:	f000 8151 	beq.w	8009b18 <__ssvfiscanf_r+0x2d8>
 8009876:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800987a:	f013 0308 	ands.w	r3, r3, #8
 800987e:	f102 0501 	add.w	r5, r2, #1
 8009882:	d019      	beq.n	80098b8 <__ssvfiscanf_r+0x78>
 8009884:	6863      	ldr	r3, [r4, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd0f      	ble.n	80098aa <__ssvfiscanf_r+0x6a>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	5cba      	ldrb	r2, [r7, r2]
 8009890:	0712      	lsls	r2, r2, #28
 8009892:	d401      	bmi.n	8009898 <__ssvfiscanf_r+0x58>
 8009894:	462a      	mov	r2, r5
 8009896:	e7e8      	b.n	800986a <__ssvfiscanf_r+0x2a>
 8009898:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800989a:	3201      	adds	r2, #1
 800989c:	9245      	str	r2, [sp, #276]	; 0x114
 800989e:	6862      	ldr	r2, [r4, #4]
 80098a0:	3301      	adds	r3, #1
 80098a2:	3a01      	subs	r2, #1
 80098a4:	6062      	str	r2, [r4, #4]
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	e7ec      	b.n	8009884 <__ssvfiscanf_r+0x44>
 80098aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098ac:	4621      	mov	r1, r4
 80098ae:	4630      	mov	r0, r6
 80098b0:	4798      	blx	r3
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d0e9      	beq.n	800988a <__ssvfiscanf_r+0x4a>
 80098b6:	e7ed      	b.n	8009894 <__ssvfiscanf_r+0x54>
 80098b8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80098bc:	f040 8083 	bne.w	80099c6 <__ssvfiscanf_r+0x186>
 80098c0:	9341      	str	r3, [sp, #260]	; 0x104
 80098c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80098c4:	7853      	ldrb	r3, [r2, #1]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	bf02      	ittt	eq
 80098ca:	2310      	moveq	r3, #16
 80098cc:	1c95      	addeq	r5, r2, #2
 80098ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80098d0:	220a      	movs	r2, #10
 80098d2:	46ab      	mov	fp, r5
 80098d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80098d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d91d      	bls.n	800991c <__ssvfiscanf_r+0xdc>
 80098e0:	4891      	ldr	r0, [pc, #580]	; (8009b28 <__ssvfiscanf_r+0x2e8>)
 80098e2:	2203      	movs	r2, #3
 80098e4:	f7f6 fcb4 	bl	8000250 <memchr>
 80098e8:	b140      	cbz	r0, 80098fc <__ssvfiscanf_r+0xbc>
 80098ea:	2301      	movs	r3, #1
 80098ec:	eba0 0009 	sub.w	r0, r0, r9
 80098f0:	fa03 f000 	lsl.w	r0, r3, r0
 80098f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098f6:	4318      	orrs	r0, r3
 80098f8:	9041      	str	r0, [sp, #260]	; 0x104
 80098fa:	465d      	mov	r5, fp
 80098fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009900:	2b78      	cmp	r3, #120	; 0x78
 8009902:	d806      	bhi.n	8009912 <__ssvfiscanf_r+0xd2>
 8009904:	2b57      	cmp	r3, #87	; 0x57
 8009906:	d810      	bhi.n	800992a <__ssvfiscanf_r+0xea>
 8009908:	2b25      	cmp	r3, #37	; 0x25
 800990a:	d05c      	beq.n	80099c6 <__ssvfiscanf_r+0x186>
 800990c:	d856      	bhi.n	80099bc <__ssvfiscanf_r+0x17c>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d074      	beq.n	80099fc <__ssvfiscanf_r+0x1bc>
 8009912:	2303      	movs	r3, #3
 8009914:	9347      	str	r3, [sp, #284]	; 0x11c
 8009916:	230a      	movs	r3, #10
 8009918:	9342      	str	r3, [sp, #264]	; 0x108
 800991a:	e081      	b.n	8009a20 <__ssvfiscanf_r+0x1e0>
 800991c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800991e:	fb02 1303 	mla	r3, r2, r3, r1
 8009922:	3b30      	subs	r3, #48	; 0x30
 8009924:	9343      	str	r3, [sp, #268]	; 0x10c
 8009926:	465d      	mov	r5, fp
 8009928:	e7d3      	b.n	80098d2 <__ssvfiscanf_r+0x92>
 800992a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800992e:	2a20      	cmp	r2, #32
 8009930:	d8ef      	bhi.n	8009912 <__ssvfiscanf_r+0xd2>
 8009932:	a101      	add	r1, pc, #4	; (adr r1, 8009938 <__ssvfiscanf_r+0xf8>)
 8009934:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009938:	08009a0b 	.word	0x08009a0b
 800993c:	08009913 	.word	0x08009913
 8009940:	08009913 	.word	0x08009913
 8009944:	08009a69 	.word	0x08009a69
 8009948:	08009913 	.word	0x08009913
 800994c:	08009913 	.word	0x08009913
 8009950:	08009913 	.word	0x08009913
 8009954:	08009913 	.word	0x08009913
 8009958:	08009913 	.word	0x08009913
 800995c:	08009913 	.word	0x08009913
 8009960:	08009913 	.word	0x08009913
 8009964:	08009a7f 	.word	0x08009a7f
 8009968:	08009a55 	.word	0x08009a55
 800996c:	080099c3 	.word	0x080099c3
 8009970:	080099c3 	.word	0x080099c3
 8009974:	080099c3 	.word	0x080099c3
 8009978:	08009913 	.word	0x08009913
 800997c:	08009a59 	.word	0x08009a59
 8009980:	08009913 	.word	0x08009913
 8009984:	08009913 	.word	0x08009913
 8009988:	08009913 	.word	0x08009913
 800998c:	08009913 	.word	0x08009913
 8009990:	08009a8f 	.word	0x08009a8f
 8009994:	08009a61 	.word	0x08009a61
 8009998:	08009a03 	.word	0x08009a03
 800999c:	08009913 	.word	0x08009913
 80099a0:	08009913 	.word	0x08009913
 80099a4:	08009a8b 	.word	0x08009a8b
 80099a8:	08009913 	.word	0x08009913
 80099ac:	08009a55 	.word	0x08009a55
 80099b0:	08009913 	.word	0x08009913
 80099b4:	08009913 	.word	0x08009913
 80099b8:	08009a0b 	.word	0x08009a0b
 80099bc:	3b45      	subs	r3, #69	; 0x45
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d8a7      	bhi.n	8009912 <__ssvfiscanf_r+0xd2>
 80099c2:	2305      	movs	r3, #5
 80099c4:	e02b      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dd0d      	ble.n	80099e8 <__ssvfiscanf_r+0x1a8>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	4552      	cmp	r2, sl
 80099d2:	f040 80a1 	bne.w	8009b18 <__ssvfiscanf_r+0x2d8>
 80099d6:	3301      	adds	r3, #1
 80099d8:	6862      	ldr	r2, [r4, #4]
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80099de:	3a01      	subs	r2, #1
 80099e0:	3301      	adds	r3, #1
 80099e2:	6062      	str	r2, [r4, #4]
 80099e4:	9345      	str	r3, [sp, #276]	; 0x114
 80099e6:	e755      	b.n	8009894 <__ssvfiscanf_r+0x54>
 80099e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099ea:	4621      	mov	r1, r4
 80099ec:	4630      	mov	r0, r6
 80099ee:	4798      	blx	r3
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d0eb      	beq.n	80099cc <__ssvfiscanf_r+0x18c>
 80099f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f040 8084 	bne.w	8009b04 <__ssvfiscanf_r+0x2c4>
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	e086      	b.n	8009b10 <__ssvfiscanf_r+0x2d0>
 8009a02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a04:	f042 0220 	orr.w	r2, r2, #32
 8009a08:	9241      	str	r2, [sp, #260]	; 0x104
 8009a0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a10:	9241      	str	r2, [sp, #260]	; 0x104
 8009a12:	2210      	movs	r2, #16
 8009a14:	2b6f      	cmp	r3, #111	; 0x6f
 8009a16:	9242      	str	r2, [sp, #264]	; 0x108
 8009a18:	bf34      	ite	cc
 8009a1a:	2303      	movcc	r3, #3
 8009a1c:	2304      	movcs	r3, #4
 8009a1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a20:	6863      	ldr	r3, [r4, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd41      	ble.n	8009aaa <__ssvfiscanf_r+0x26a>
 8009a26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a28:	0659      	lsls	r1, r3, #25
 8009a2a:	d404      	bmi.n	8009a36 <__ssvfiscanf_r+0x1f6>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	781a      	ldrb	r2, [r3, #0]
 8009a30:	5cba      	ldrb	r2, [r7, r2]
 8009a32:	0712      	lsls	r2, r2, #28
 8009a34:	d440      	bmi.n	8009ab8 <__ssvfiscanf_r+0x278>
 8009a36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	dc4f      	bgt.n	8009adc <__ssvfiscanf_r+0x29c>
 8009a3c:	466b      	mov	r3, sp
 8009a3e:	4622      	mov	r2, r4
 8009a40:	a941      	add	r1, sp, #260	; 0x104
 8009a42:	4630      	mov	r0, r6
 8009a44:	f000 f874 	bl	8009b30 <_scanf_chars>
 8009a48:	2801      	cmp	r0, #1
 8009a4a:	d065      	beq.n	8009b18 <__ssvfiscanf_r+0x2d8>
 8009a4c:	2802      	cmp	r0, #2
 8009a4e:	f47f af21 	bne.w	8009894 <__ssvfiscanf_r+0x54>
 8009a52:	e7cf      	b.n	80099f4 <__ssvfiscanf_r+0x1b4>
 8009a54:	220a      	movs	r2, #10
 8009a56:	e7dd      	b.n	8009a14 <__ssvfiscanf_r+0x1d4>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9342      	str	r3, [sp, #264]	; 0x108
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e7de      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 8009a60:	2308      	movs	r3, #8
 8009a62:	9342      	str	r3, [sp, #264]	; 0x108
 8009a64:	2304      	movs	r3, #4
 8009a66:	e7da      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f000 f9d8 	bl	8009e20 <__sccl>
 8009a70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	9341      	str	r3, [sp, #260]	; 0x104
 8009a78:	4605      	mov	r5, r0
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7cf      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 8009a7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a84:	9341      	str	r3, [sp, #260]	; 0x104
 8009a86:	2300      	movs	r3, #0
 8009a88:	e7c9      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e7c7      	b.n	8009a1e <__ssvfiscanf_r+0x1de>
 8009a8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009a90:	06c3      	lsls	r3, r0, #27
 8009a92:	f53f aeff 	bmi.w	8009894 <__ssvfiscanf_r+0x54>
 8009a96:	9b00      	ldr	r3, [sp, #0]
 8009a98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a9a:	1d19      	adds	r1, r3, #4
 8009a9c:	9100      	str	r1, [sp, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	07c0      	lsls	r0, r0, #31
 8009aa2:	bf4c      	ite	mi
 8009aa4:	801a      	strhmi	r2, [r3, #0]
 8009aa6:	601a      	strpl	r2, [r3, #0]
 8009aa8:	e6f4      	b.n	8009894 <__ssvfiscanf_r+0x54>
 8009aaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009aac:	4621      	mov	r1, r4
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4798      	blx	r3
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0b7      	beq.n	8009a26 <__ssvfiscanf_r+0x1e6>
 8009ab6:	e79d      	b.n	80099f4 <__ssvfiscanf_r+0x1b4>
 8009ab8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009aba:	3201      	adds	r2, #1
 8009abc:	9245      	str	r2, [sp, #276]	; 0x114
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	3a01      	subs	r2, #1
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	6062      	str	r2, [r4, #4]
 8009ac6:	dd02      	ble.n	8009ace <__ssvfiscanf_r+0x28e>
 8009ac8:	3301      	adds	r3, #1
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	e7ae      	b.n	8009a2c <__ssvfiscanf_r+0x1ec>
 8009ace:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4798      	blx	r3
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0a8      	beq.n	8009a2c <__ssvfiscanf_r+0x1ec>
 8009ada:	e78b      	b.n	80099f4 <__ssvfiscanf_r+0x1b4>
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	dc06      	bgt.n	8009aee <__ssvfiscanf_r+0x2ae>
 8009ae0:	466b      	mov	r3, sp
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	a941      	add	r1, sp, #260	; 0x104
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f87a 	bl	8009be0 <_scanf_i>
 8009aec:	e7ac      	b.n	8009a48 <__ssvfiscanf_r+0x208>
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <__ssvfiscanf_r+0x2ec>)
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f43f aecf 	beq.w	8009894 <__ssvfiscanf_r+0x54>
 8009af6:	466b      	mov	r3, sp
 8009af8:	4622      	mov	r2, r4
 8009afa:	a941      	add	r1, sp, #260	; 0x104
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7fc fc59 	bl	80063b4 <_scanf_float>
 8009b02:	e7a1      	b.n	8009a48 <__ssvfiscanf_r+0x208>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b0a:	bf18      	it	ne
 8009b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8009b10:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b1a:	e7f9      	b.n	8009b10 <__ssvfiscanf_r+0x2d0>
 8009b1c:	0800978d 	.word	0x0800978d
 8009b20:	08009807 	.word	0x08009807
 8009b24:	0800b119 	.word	0x0800b119
 8009b28:	0800b492 	.word	0x0800b492
 8009b2c:	080063b5 	.word	0x080063b5

08009b30 <_scanf_chars>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	4615      	mov	r5, r2
 8009b36:	688a      	ldr	r2, [r1, #8]
 8009b38:	4680      	mov	r8, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b932      	cbnz	r2, 8009b4c <_scanf_chars+0x1c>
 8009b3e:	698a      	ldr	r2, [r1, #24]
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	bf0c      	ite	eq
 8009b44:	2201      	moveq	r2, #1
 8009b46:	f04f 32ff 	movne.w	r2, #4294967295
 8009b4a:	608a      	str	r2, [r1, #8]
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009bdc <_scanf_chars+0xac>
 8009b52:	06d1      	lsls	r1, r2, #27
 8009b54:	bf5f      	itttt	pl
 8009b56:	681a      	ldrpl	r2, [r3, #0]
 8009b58:	1d11      	addpl	r1, r2, #4
 8009b5a:	6019      	strpl	r1, [r3, #0]
 8009b5c:	6816      	ldrpl	r6, [r2, #0]
 8009b5e:	2700      	movs	r7, #0
 8009b60:	69a0      	ldr	r0, [r4, #24]
 8009b62:	b188      	cbz	r0, 8009b88 <_scanf_chars+0x58>
 8009b64:	2801      	cmp	r0, #1
 8009b66:	d107      	bne.n	8009b78 <_scanf_chars+0x48>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	6963      	ldr	r3, [r4, #20]
 8009b6e:	5c9b      	ldrb	r3, [r3, r2]
 8009b70:	b953      	cbnz	r3, 8009b88 <_scanf_chars+0x58>
 8009b72:	bb27      	cbnz	r7, 8009bbe <_scanf_chars+0x8e>
 8009b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b78:	2802      	cmp	r0, #2
 8009b7a:	d120      	bne.n	8009bbe <_scanf_chars+0x8e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	d41a      	bmi.n	8009bbe <_scanf_chars+0x8e>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	06da      	lsls	r2, r3, #27
 8009b8c:	bf5e      	ittt	pl
 8009b8e:	682b      	ldrpl	r3, [r5, #0]
 8009b90:	781b      	ldrbpl	r3, [r3, #0]
 8009b92:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009b96:	682a      	ldr	r2, [r5, #0]
 8009b98:	686b      	ldr	r3, [r5, #4]
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	68a2      	ldr	r2, [r4, #8]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	3a01      	subs	r2, #1
 8009ba4:	606b      	str	r3, [r5, #4]
 8009ba6:	3701      	adds	r7, #1
 8009ba8:	60a2      	str	r2, [r4, #8]
 8009baa:	b142      	cbz	r2, 8009bbe <_scanf_chars+0x8e>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dcd7      	bgt.n	8009b60 <_scanf_chars+0x30>
 8009bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	4798      	blx	r3
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d0d0      	beq.n	8009b60 <_scanf_chars+0x30>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	f013 0310 	ands.w	r3, r3, #16
 8009bc4:	d105      	bne.n	8009bd2 <_scanf_chars+0xa2>
 8009bc6:	68e2      	ldr	r2, [r4, #12]
 8009bc8:	3201      	adds	r2, #1
 8009bca:	60e2      	str	r2, [r4, #12]
 8009bcc:	69a2      	ldr	r2, [r4, #24]
 8009bce:	b102      	cbz	r2, 8009bd2 <_scanf_chars+0xa2>
 8009bd0:	7033      	strb	r3, [r6, #0]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	441f      	add	r7, r3
 8009bd6:	6127      	str	r7, [r4, #16]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7cb      	b.n	8009b74 <_scanf_chars+0x44>
 8009bdc:	0800b119 	.word	0x0800b119

08009be0 <_scanf_i>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	4698      	mov	r8, r3
 8009be6:	4b74      	ldr	r3, [pc, #464]	; (8009db8 <_scanf_i+0x1d8>)
 8009be8:	460c      	mov	r4, r1
 8009bea:	4682      	mov	sl, r0
 8009bec:	4616      	mov	r6, r2
 8009bee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bfa:	4b70      	ldr	r3, [pc, #448]	; (8009dbc <_scanf_i+0x1dc>)
 8009bfc:	69a1      	ldr	r1, [r4, #24]
 8009bfe:	4a70      	ldr	r2, [pc, #448]	; (8009dc0 <_scanf_i+0x1e0>)
 8009c00:	2903      	cmp	r1, #3
 8009c02:	bf18      	it	ne
 8009c04:	461a      	movne	r2, r3
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	9201      	str	r2, [sp, #4]
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c10:	bf88      	it	hi
 8009c12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c16:	4627      	mov	r7, r4
 8009c18:	bf82      	ittt	hi
 8009c1a:	eb03 0905 	addhi.w	r9, r3, r5
 8009c1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c22:	60a3      	strhi	r3, [r4, #8]
 8009c24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009c28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009c2c:	bf98      	it	ls
 8009c2e:	f04f 0900 	movls.w	r9, #0
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	463d      	mov	r5, r7
 8009c36:	f04f 0b00 	mov.w	fp, #0
 8009c3a:	6831      	ldr	r1, [r6, #0]
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	7809      	ldrb	r1, [r1, #0]
 8009c40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009c44:	2202      	movs	r2, #2
 8009c46:	f7f6 fb03 	bl	8000250 <memchr>
 8009c4a:	b328      	cbz	r0, 8009c98 <_scanf_i+0xb8>
 8009c4c:	f1bb 0f01 	cmp.w	fp, #1
 8009c50:	d159      	bne.n	8009d06 <_scanf_i+0x126>
 8009c52:	6862      	ldr	r2, [r4, #4]
 8009c54:	b92a      	cbnz	r2, 8009c62 <_scanf_i+0x82>
 8009c56:	6822      	ldr	r2, [r4, #0]
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5e:	6063      	str	r3, [r4, #4]
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	68a2      	ldr	r2, [r4, #8]
 8009c6c:	1e51      	subs	r1, r2, #1
 8009c6e:	60a1      	str	r1, [r4, #8]
 8009c70:	b192      	cbz	r2, 8009c98 <_scanf_i+0xb8>
 8009c72:	6832      	ldr	r2, [r6, #0]
 8009c74:	1c51      	adds	r1, r2, #1
 8009c76:	6031      	str	r1, [r6, #0]
 8009c78:	7812      	ldrb	r2, [r2, #0]
 8009c7a:	f805 2b01 	strb.w	r2, [r5], #1
 8009c7e:	6872      	ldr	r2, [r6, #4]
 8009c80:	3a01      	subs	r2, #1
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	6072      	str	r2, [r6, #4]
 8009c86:	dc07      	bgt.n	8009c98 <_scanf_i+0xb8>
 8009c88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4790      	blx	r2
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f040 8085 	bne.w	8009da2 <_scanf_i+0x1c2>
 8009c98:	f10b 0b01 	add.w	fp, fp, #1
 8009c9c:	f1bb 0f03 	cmp.w	fp, #3
 8009ca0:	d1cb      	bne.n	8009c3a <_scanf_i+0x5a>
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	b90b      	cbnz	r3, 8009caa <_scanf_i+0xca>
 8009ca6:	230a      	movs	r3, #10
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	4945      	ldr	r1, [pc, #276]	; (8009dc4 <_scanf_i+0x1e4>)
 8009cae:	6960      	ldr	r0, [r4, #20]
 8009cb0:	1ac9      	subs	r1, r1, r3
 8009cb2:	f000 f8b5 	bl	8009e20 <__sccl>
 8009cb6:	f04f 0b00 	mov.w	fp, #0
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	6822      	ldr	r2, [r4, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d03d      	beq.n	8009d3e <_scanf_i+0x15e>
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	6960      	ldr	r0, [r4, #20]
 8009cc6:	f891 c000 	ldrb.w	ip, [r1]
 8009cca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d035      	beq.n	8009d3e <_scanf_i+0x15e>
 8009cd2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009cd6:	d124      	bne.n	8009d22 <_scanf_i+0x142>
 8009cd8:	0510      	lsls	r0, r2, #20
 8009cda:	d522      	bpl.n	8009d22 <_scanf_i+0x142>
 8009cdc:	f10b 0b01 	add.w	fp, fp, #1
 8009ce0:	f1b9 0f00 	cmp.w	r9, #0
 8009ce4:	d003      	beq.n	8009cee <_scanf_i+0x10e>
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	6873      	ldr	r3, [r6, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	6073      	str	r3, [r6, #4]
 8009cf6:	dd1b      	ble.n	8009d30 <_scanf_i+0x150>
 8009cf8:	6833      	ldr	r3, [r6, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	e7d9      	b.n	8009cba <_scanf_i+0xda>
 8009d06:	f1bb 0f02 	cmp.w	fp, #2
 8009d0a:	d1ae      	bne.n	8009c6a <_scanf_i+0x8a>
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009d12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d16:	d1bf      	bne.n	8009c98 <_scanf_i+0xb8>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	6063      	str	r3, [r4, #4]
 8009d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d20:	e7a2      	b.n	8009c68 <_scanf_i+0x88>
 8009d22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	780b      	ldrb	r3, [r1, #0]
 8009d2a:	f805 3b01 	strb.w	r3, [r5], #1
 8009d2e:	e7de      	b.n	8009cee <_scanf_i+0x10e>
 8009d30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d34:	4631      	mov	r1, r6
 8009d36:	4650      	mov	r0, sl
 8009d38:	4798      	blx	r3
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0df      	beq.n	8009cfe <_scanf_i+0x11e>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	05d9      	lsls	r1, r3, #23
 8009d42:	d50d      	bpl.n	8009d60 <_scanf_i+0x180>
 8009d44:	42bd      	cmp	r5, r7
 8009d46:	d909      	bls.n	8009d5c <_scanf_i+0x17c>
 8009d48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d50:	4632      	mov	r2, r6
 8009d52:	4650      	mov	r0, sl
 8009d54:	4798      	blx	r3
 8009d56:	f105 39ff 	add.w	r9, r5, #4294967295
 8009d5a:	464d      	mov	r5, r9
 8009d5c:	42bd      	cmp	r5, r7
 8009d5e:	d028      	beq.n	8009db2 <_scanf_i+0x1d2>
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	f012 0210 	ands.w	r2, r2, #16
 8009d66:	d113      	bne.n	8009d90 <_scanf_i+0x1b0>
 8009d68:	702a      	strb	r2, [r5, #0]
 8009d6a:	6863      	ldr	r3, [r4, #4]
 8009d6c:	9e01      	ldr	r6, [sp, #4]
 8009d6e:	4639      	mov	r1, r7
 8009d70:	4650      	mov	r0, sl
 8009d72:	47b0      	blx	r6
 8009d74:	f8d8 3000 	ldr.w	r3, [r8]
 8009d78:	6821      	ldr	r1, [r4, #0]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	f8c8 2000 	str.w	r2, [r8]
 8009d80:	f011 0f20 	tst.w	r1, #32
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	d00f      	beq.n	8009da8 <_scanf_i+0x1c8>
 8009d88:	6018      	str	r0, [r3, #0]
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60e3      	str	r3, [r4, #12]
 8009d90:	1bed      	subs	r5, r5, r7
 8009d92:	44ab      	add	fp, r5
 8009d94:	6925      	ldr	r5, [r4, #16]
 8009d96:	445d      	add	r5, fp
 8009d98:	6125      	str	r5, [r4, #16]
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	b007      	add	sp, #28
 8009d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da2:	f04f 0b00 	mov.w	fp, #0
 8009da6:	e7ca      	b.n	8009d3e <_scanf_i+0x15e>
 8009da8:	07ca      	lsls	r2, r1, #31
 8009daa:	bf4c      	ite	mi
 8009dac:	8018      	strhmi	r0, [r3, #0]
 8009dae:	6018      	strpl	r0, [r3, #0]
 8009db0:	e7eb      	b.n	8009d8a <_scanf_i+0x1aa>
 8009db2:	2001      	movs	r0, #1
 8009db4:	e7f2      	b.n	8009d9c <_scanf_i+0x1bc>
 8009db6:	bf00      	nop
 8009db8:	0800b068 	.word	0x0800b068
 8009dbc:	08009f8d 	.word	0x08009f8d
 8009dc0:	08007629 	.word	0x08007629
 8009dc4:	0800b4b6 	.word	0x0800b4b6

08009dc8 <_read_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d07      	ldr	r5, [pc, #28]	; (8009de8 <_read_r+0x20>)
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f7 fed4 	bl	8001b84 <_read>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_read_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_read_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20010618 	.word	0x20010618
 8009dec:	00000000 	.word	0x00000000

08009df0 <nan>:
 8009df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009df8 <nan+0x8>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	7ff80000 	.word	0x7ff80000

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	; (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 ff28 	bl	8001c60 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20010618 	.word	0x20010618

08009e20 <__sccl>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	780b      	ldrb	r3, [r1, #0]
 8009e24:	4604      	mov	r4, r0
 8009e26:	2b5e      	cmp	r3, #94	; 0x5e
 8009e28:	bf0b      	itete	eq
 8009e2a:	784b      	ldrbeq	r3, [r1, #1]
 8009e2c:	1c48      	addne	r0, r1, #1
 8009e2e:	1c88      	addeq	r0, r1, #2
 8009e30:	2200      	movne	r2, #0
 8009e32:	bf08      	it	eq
 8009e34:	2201      	moveq	r2, #1
 8009e36:	1e61      	subs	r1, r4, #1
 8009e38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009e3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009e40:	42a9      	cmp	r1, r5
 8009e42:	d1fb      	bne.n	8009e3c <__sccl+0x1c>
 8009e44:	b90b      	cbnz	r3, 8009e4a <__sccl+0x2a>
 8009e46:	3801      	subs	r0, #1
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
 8009e4a:	f082 0101 	eor.w	r1, r2, #1
 8009e4e:	54e1      	strb	r1, [r4, r3]
 8009e50:	1c42      	adds	r2, r0, #1
 8009e52:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009e56:	2d2d      	cmp	r5, #45	; 0x2d
 8009e58:	f102 36ff 	add.w	r6, r2, #4294967295
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	d006      	beq.n	8009e6e <__sccl+0x4e>
 8009e60:	2d5d      	cmp	r5, #93	; 0x5d
 8009e62:	d0f1      	beq.n	8009e48 <__sccl+0x28>
 8009e64:	b90d      	cbnz	r5, 8009e6a <__sccl+0x4a>
 8009e66:	4630      	mov	r0, r6
 8009e68:	e7ee      	b.n	8009e48 <__sccl+0x28>
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	e7ef      	b.n	8009e4e <__sccl+0x2e>
 8009e6e:	7816      	ldrb	r6, [r2, #0]
 8009e70:	2e5d      	cmp	r6, #93	; 0x5d
 8009e72:	d0fa      	beq.n	8009e6a <__sccl+0x4a>
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	dcf8      	bgt.n	8009e6a <__sccl+0x4a>
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	4286      	cmp	r6, r0
 8009e7e:	5421      	strb	r1, [r4, r0]
 8009e80:	dcfb      	bgt.n	8009e7a <__sccl+0x5a>
 8009e82:	43d8      	mvns	r0, r3
 8009e84:	4430      	add	r0, r6
 8009e86:	1c5d      	adds	r5, r3, #1
 8009e88:	42b3      	cmp	r3, r6
 8009e8a:	bfa8      	it	ge
 8009e8c:	2000      	movge	r0, #0
 8009e8e:	182b      	adds	r3, r5, r0
 8009e90:	3202      	adds	r2, #2
 8009e92:	e7de      	b.n	8009e52 <__sccl+0x32>

08009e94 <_strtoul_l.isra.0>:
 8009e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e98:	4e3b      	ldr	r6, [pc, #236]	; (8009f88 <_strtoul_l.isra.0+0xf4>)
 8009e9a:	4686      	mov	lr, r0
 8009e9c:	468c      	mov	ip, r1
 8009e9e:	4660      	mov	r0, ip
 8009ea0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ea4:	5da5      	ldrb	r5, [r4, r6]
 8009ea6:	f015 0508 	ands.w	r5, r5, #8
 8009eaa:	d1f8      	bne.n	8009e9e <_strtoul_l.isra.0+0xa>
 8009eac:	2c2d      	cmp	r4, #45	; 0x2d
 8009eae:	d134      	bne.n	8009f1a <_strtoul_l.isra.0+0x86>
 8009eb0:	f89c 4000 	ldrb.w	r4, [ip]
 8009eb4:	f04f 0801 	mov.w	r8, #1
 8009eb8:	f100 0c02 	add.w	ip, r0, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d05e      	beq.n	8009f7e <_strtoul_l.isra.0+0xea>
 8009ec0:	2b10      	cmp	r3, #16
 8009ec2:	d10c      	bne.n	8009ede <_strtoul_l.isra.0+0x4a>
 8009ec4:	2c30      	cmp	r4, #48	; 0x30
 8009ec6:	d10a      	bne.n	8009ede <_strtoul_l.isra.0+0x4a>
 8009ec8:	f89c 0000 	ldrb.w	r0, [ip]
 8009ecc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ed0:	2858      	cmp	r0, #88	; 0x58
 8009ed2:	d14f      	bne.n	8009f74 <_strtoul_l.isra.0+0xe0>
 8009ed4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009ed8:	2310      	movs	r3, #16
 8009eda:	f10c 0c02 	add.w	ip, ip, #2
 8009ede:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	fbb7 f7f3 	udiv	r7, r7, r3
 8009ee8:	fb03 f907 	mul.w	r9, r3, r7
 8009eec:	ea6f 0909 	mvn.w	r9, r9
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009ef6:	2e09      	cmp	r6, #9
 8009ef8:	d818      	bhi.n	8009f2c <_strtoul_l.isra.0+0x98>
 8009efa:	4634      	mov	r4, r6
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	dd24      	ble.n	8009f4a <_strtoul_l.isra.0+0xb6>
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	db1f      	blt.n	8009f44 <_strtoul_l.isra.0+0xb0>
 8009f04:	4287      	cmp	r7, r0
 8009f06:	d31d      	bcc.n	8009f44 <_strtoul_l.isra.0+0xb0>
 8009f08:	d101      	bne.n	8009f0e <_strtoul_l.isra.0+0x7a>
 8009f0a:	45a1      	cmp	r9, r4
 8009f0c:	db1a      	blt.n	8009f44 <_strtoul_l.isra.0+0xb0>
 8009f0e:	fb00 4003 	mla	r0, r0, r3, r4
 8009f12:	2501      	movs	r5, #1
 8009f14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f18:	e7eb      	b.n	8009ef2 <_strtoul_l.isra.0+0x5e>
 8009f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f1c:	bf08      	it	eq
 8009f1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009f22:	46a8      	mov	r8, r5
 8009f24:	bf08      	it	eq
 8009f26:	f100 0c02 	addeq.w	ip, r0, #2
 8009f2a:	e7c7      	b.n	8009ebc <_strtoul_l.isra.0+0x28>
 8009f2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009f30:	2e19      	cmp	r6, #25
 8009f32:	d801      	bhi.n	8009f38 <_strtoul_l.isra.0+0xa4>
 8009f34:	3c37      	subs	r4, #55	; 0x37
 8009f36:	e7e1      	b.n	8009efc <_strtoul_l.isra.0+0x68>
 8009f38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009f3c:	2e19      	cmp	r6, #25
 8009f3e:	d804      	bhi.n	8009f4a <_strtoul_l.isra.0+0xb6>
 8009f40:	3c57      	subs	r4, #87	; 0x57
 8009f42:	e7db      	b.n	8009efc <_strtoul_l.isra.0+0x68>
 8009f44:	f04f 35ff 	mov.w	r5, #4294967295
 8009f48:	e7e4      	b.n	8009f14 <_strtoul_l.isra.0+0x80>
 8009f4a:	2d00      	cmp	r5, #0
 8009f4c:	da07      	bge.n	8009f5e <_strtoul_l.isra.0+0xca>
 8009f4e:	2322      	movs	r3, #34	; 0x22
 8009f50:	f8ce 3000 	str.w	r3, [lr]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	b942      	cbnz	r2, 8009f6c <_strtoul_l.isra.0+0xd8>
 8009f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f5e:	f1b8 0f00 	cmp.w	r8, #0
 8009f62:	d000      	beq.n	8009f66 <_strtoul_l.isra.0+0xd2>
 8009f64:	4240      	negs	r0, r0
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d0f7      	beq.n	8009f5a <_strtoul_l.isra.0+0xc6>
 8009f6a:	b10d      	cbz	r5, 8009f70 <_strtoul_l.isra.0+0xdc>
 8009f6c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009f70:	6011      	str	r1, [r2, #0]
 8009f72:	e7f2      	b.n	8009f5a <_strtoul_l.isra.0+0xc6>
 8009f74:	2430      	movs	r4, #48	; 0x30
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1b1      	bne.n	8009ede <_strtoul_l.isra.0+0x4a>
 8009f7a:	2308      	movs	r3, #8
 8009f7c:	e7af      	b.n	8009ede <_strtoul_l.isra.0+0x4a>
 8009f7e:	2c30      	cmp	r4, #48	; 0x30
 8009f80:	d0a2      	beq.n	8009ec8 <_strtoul_l.isra.0+0x34>
 8009f82:	230a      	movs	r3, #10
 8009f84:	e7ab      	b.n	8009ede <_strtoul_l.isra.0+0x4a>
 8009f86:	bf00      	nop
 8009f88:	0800b119 	.word	0x0800b119

08009f8c <_strtoul_r>:
 8009f8c:	f7ff bf82 	b.w	8009e94 <_strtoul_l.isra.0>

08009f90 <__submore>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	d11d      	bne.n	8009fdc <__submore+0x4c>
 8009fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fa4:	f7ff fa3c 	bl	8009420 <_malloc_r>
 8009fa8:	b918      	cbnz	r0, 8009fb2 <__submore+0x22>
 8009faa:	f04f 30ff 	mov.w	r0, #4294967295
 8009fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009fbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009fc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009fc6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009fca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009fce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009fd2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e7e8      	b.n	8009fae <__submore+0x1e>
 8009fdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009fde:	0077      	lsls	r7, r6, #1
 8009fe0:	463a      	mov	r2, r7
 8009fe2:	f000 fa2d 	bl	800a440 <_realloc_r>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0de      	beq.n	8009faa <__submore+0x1a>
 8009fec:	eb00 0806 	add.w	r8, r0, r6
 8009ff0:	4601      	mov	r1, r0
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	f7fe fce9 	bl	80089cc <memcpy>
 8009ffa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009ffe:	f8c4 8000 	str.w	r8, [r4]
 800a002:	e7e9      	b.n	8009fd8 <__submore+0x48>

0800a004 <__ascii_wctomb>:
 800a004:	b149      	cbz	r1, 800a01a <__ascii_wctomb+0x16>
 800a006:	2aff      	cmp	r2, #255	; 0xff
 800a008:	bf85      	ittet	hi
 800a00a:	238a      	movhi	r3, #138	; 0x8a
 800a00c:	6003      	strhi	r3, [r0, #0]
 800a00e:	700a      	strbls	r2, [r1, #0]
 800a010:	f04f 30ff 	movhi.w	r0, #4294967295
 800a014:	bf98      	it	ls
 800a016:	2001      	movls	r0, #1
 800a018:	4770      	bx	lr
 800a01a:	4608      	mov	r0, r1
 800a01c:	4770      	bx	lr
	...

0800a020 <__assert_func>:
 800a020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a022:	4614      	mov	r4, r2
 800a024:	461a      	mov	r2, r3
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <__assert_func+0x2c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4605      	mov	r5, r0
 800a02c:	68d8      	ldr	r0, [r3, #12]
 800a02e:	b14c      	cbz	r4, 800a044 <__assert_func+0x24>
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <__assert_func+0x30>)
 800a032:	9100      	str	r1, [sp, #0]
 800a034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a038:	4906      	ldr	r1, [pc, #24]	; (800a054 <__assert_func+0x34>)
 800a03a:	462b      	mov	r3, r5
 800a03c:	f000 f9a6 	bl	800a38c <fiprintf>
 800a040:	f000 fc3e 	bl	800a8c0 <abort>
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <__assert_func+0x38>)
 800a046:	461c      	mov	r4, r3
 800a048:	e7f3      	b.n	800a032 <__assert_func+0x12>
 800a04a:	bf00      	nop
 800a04c:	20000038 	.word	0x20000038
 800a050:	0800b4b8 	.word	0x0800b4b8
 800a054:	0800b4c5 	.word	0x0800b4c5
 800a058:	0800b4f3 	.word	0x0800b4f3

0800a05c <__sflush_r>:
 800a05c:	898a      	ldrh	r2, [r1, #12]
 800a05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a062:	4605      	mov	r5, r0
 800a064:	0710      	lsls	r0, r2, #28
 800a066:	460c      	mov	r4, r1
 800a068:	d458      	bmi.n	800a11c <__sflush_r+0xc0>
 800a06a:	684b      	ldr	r3, [r1, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dc05      	bgt.n	800a07c <__sflush_r+0x20>
 800a070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc02      	bgt.n	800a07c <__sflush_r+0x20>
 800a076:	2000      	movs	r0, #0
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a07e:	2e00      	cmp	r6, #0
 800a080:	d0f9      	beq.n	800a076 <__sflush_r+0x1a>
 800a082:	2300      	movs	r3, #0
 800a084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a088:	682f      	ldr	r7, [r5, #0]
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	d032      	beq.n	800a0f4 <__sflush_r+0x98>
 800a08e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	075a      	lsls	r2, r3, #29
 800a094:	d505      	bpl.n	800a0a2 <__sflush_r+0x46>
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	1ac0      	subs	r0, r0, r3
 800a09a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a09c:	b10b      	cbz	r3, 800a0a2 <__sflush_r+0x46>
 800a09e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a0:	1ac0      	subs	r0, r0, r3
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a8:	6a21      	ldr	r1, [r4, #32]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	47b0      	blx	r6
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	d106      	bne.n	800a0c2 <__sflush_r+0x66>
 800a0b4:	6829      	ldr	r1, [r5, #0]
 800a0b6:	291d      	cmp	r1, #29
 800a0b8:	d82c      	bhi.n	800a114 <__sflush_r+0xb8>
 800a0ba:	4a2a      	ldr	r2, [pc, #168]	; (800a164 <__sflush_r+0x108>)
 800a0bc:	40ca      	lsrs	r2, r1
 800a0be:	07d6      	lsls	r6, r2, #31
 800a0c0:	d528      	bpl.n	800a114 <__sflush_r+0xb8>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6062      	str	r2, [r4, #4]
 800a0c6:	04d9      	lsls	r1, r3, #19
 800a0c8:	6922      	ldr	r2, [r4, #16]
 800a0ca:	6022      	str	r2, [r4, #0]
 800a0cc:	d504      	bpl.n	800a0d8 <__sflush_r+0x7c>
 800a0ce:	1c42      	adds	r2, r0, #1
 800a0d0:	d101      	bne.n	800a0d6 <__sflush_r+0x7a>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b903      	cbnz	r3, 800a0d8 <__sflush_r+0x7c>
 800a0d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0da:	602f      	str	r7, [r5, #0]
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	d0ca      	beq.n	800a076 <__sflush_r+0x1a>
 800a0e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e4:	4299      	cmp	r1, r3
 800a0e6:	d002      	beq.n	800a0ee <__sflush_r+0x92>
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f7ff f949 	bl	8009380 <_free_r>
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a0f2:	e7c1      	b.n	800a078 <__sflush_r+0x1c>
 800a0f4:	6a21      	ldr	r1, [r4, #32]
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b0      	blx	r6
 800a0fc:	1c41      	adds	r1, r0, #1
 800a0fe:	d1c7      	bne.n	800a090 <__sflush_r+0x34>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0c4      	beq.n	800a090 <__sflush_r+0x34>
 800a106:	2b1d      	cmp	r3, #29
 800a108:	d001      	beq.n	800a10e <__sflush_r+0xb2>
 800a10a:	2b16      	cmp	r3, #22
 800a10c:	d101      	bne.n	800a112 <__sflush_r+0xb6>
 800a10e:	602f      	str	r7, [r5, #0]
 800a110:	e7b1      	b.n	800a076 <__sflush_r+0x1a>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	e7ad      	b.n	800a078 <__sflush_r+0x1c>
 800a11c:	690f      	ldr	r7, [r1, #16]
 800a11e:	2f00      	cmp	r7, #0
 800a120:	d0a9      	beq.n	800a076 <__sflush_r+0x1a>
 800a122:	0793      	lsls	r3, r2, #30
 800a124:	680e      	ldr	r6, [r1, #0]
 800a126:	bf08      	it	eq
 800a128:	694b      	ldreq	r3, [r1, #20]
 800a12a:	600f      	str	r7, [r1, #0]
 800a12c:	bf18      	it	ne
 800a12e:	2300      	movne	r3, #0
 800a130:	eba6 0807 	sub.w	r8, r6, r7
 800a134:	608b      	str	r3, [r1, #8]
 800a136:	f1b8 0f00 	cmp.w	r8, #0
 800a13a:	dd9c      	ble.n	800a076 <__sflush_r+0x1a>
 800a13c:	6a21      	ldr	r1, [r4, #32]
 800a13e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a140:	4643      	mov	r3, r8
 800a142:	463a      	mov	r2, r7
 800a144:	4628      	mov	r0, r5
 800a146:	47b0      	blx	r6
 800a148:	2800      	cmp	r0, #0
 800a14a:	dc06      	bgt.n	800a15a <__sflush_r+0xfe>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e78e      	b.n	800a078 <__sflush_r+0x1c>
 800a15a:	4407      	add	r7, r0
 800a15c:	eba8 0800 	sub.w	r8, r8, r0
 800a160:	e7e9      	b.n	800a136 <__sflush_r+0xda>
 800a162:	bf00      	nop
 800a164:	20400001 	.word	0x20400001

0800a168 <_fflush_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b913      	cbnz	r3, 800a178 <_fflush_r+0x10>
 800a172:	2500      	movs	r5, #0
 800a174:	4628      	mov	r0, r5
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	b118      	cbz	r0, 800a182 <_fflush_r+0x1a>
 800a17a:	6983      	ldr	r3, [r0, #24]
 800a17c:	b90b      	cbnz	r3, 800a182 <_fflush_r+0x1a>
 800a17e:	f000 f887 	bl	800a290 <__sinit>
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <_fflush_r+0x6c>)
 800a184:	429c      	cmp	r4, r3
 800a186:	d11b      	bne.n	800a1c0 <_fflush_r+0x58>
 800a188:	686c      	ldr	r4, [r5, #4]
 800a18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0ef      	beq.n	800a172 <_fflush_r+0xa>
 800a192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a194:	07d0      	lsls	r0, r2, #31
 800a196:	d404      	bmi.n	800a1a2 <_fflush_r+0x3a>
 800a198:	0599      	lsls	r1, r3, #22
 800a19a:	d402      	bmi.n	800a1a2 <_fflush_r+0x3a>
 800a19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19e:	f000 f927 	bl	800a3f0 <__retarget_lock_acquire_recursive>
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f7ff ff59 	bl	800a05c <__sflush_r>
 800a1aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ac:	07da      	lsls	r2, r3, #31
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	d4e0      	bmi.n	800a174 <_fflush_r+0xc>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	059b      	lsls	r3, r3, #22
 800a1b6:	d4dd      	bmi.n	800a174 <_fflush_r+0xc>
 800a1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ba:	f000 f91a 	bl	800a3f2 <__retarget_lock_release_recursive>
 800a1be:	e7d9      	b.n	800a174 <_fflush_r+0xc>
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <_fflush_r+0x70>)
 800a1c2:	429c      	cmp	r4, r3
 800a1c4:	d101      	bne.n	800a1ca <_fflush_r+0x62>
 800a1c6:	68ac      	ldr	r4, [r5, #8]
 800a1c8:	e7df      	b.n	800a18a <_fflush_r+0x22>
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <_fflush_r+0x74>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	bf08      	it	eq
 800a1d0:	68ec      	ldreq	r4, [r5, #12]
 800a1d2:	e7da      	b.n	800a18a <_fflush_r+0x22>
 800a1d4:	0800b514 	.word	0x0800b514
 800a1d8:	0800b534 	.word	0x0800b534
 800a1dc:	0800b4f4 	.word	0x0800b4f4

0800a1e0 <std>:
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ee:	6083      	str	r3, [r0, #8]
 800a1f0:	8181      	strh	r1, [r0, #12]
 800a1f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1f4:	81c2      	strh	r2, [r0, #14]
 800a1f6:	6183      	str	r3, [r0, #24]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	305c      	adds	r0, #92	; 0x5c
 800a1fe:	f7fb fc8d 	bl	8005b1c <memset>
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <std+0x38>)
 800a204:	6263      	str	r3, [r4, #36]	; 0x24
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <std+0x3c>)
 800a208:	62a3      	str	r3, [r4, #40]	; 0x28
 800a20a:	4b05      	ldr	r3, [pc, #20]	; (800a220 <std+0x40>)
 800a20c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <std+0x44>)
 800a210:	6224      	str	r4, [r4, #32]
 800a212:	6323      	str	r3, [r4, #48]	; 0x30
 800a214:	bd10      	pop	{r4, pc}
 800a216:	bf00      	nop
 800a218:	08006861 	.word	0x08006861
 800a21c:	08006887 	.word	0x08006887
 800a220:	080068bf 	.word	0x080068bf
 800a224:	080068e3 	.word	0x080068e3

0800a228 <_cleanup_r>:
 800a228:	4901      	ldr	r1, [pc, #4]	; (800a230 <_cleanup_r+0x8>)
 800a22a:	f000 b8c1 	b.w	800a3b0 <_fwalk_reent>
 800a22e:	bf00      	nop
 800a230:	0800a169 	.word	0x0800a169

0800a234 <__sfmoreglue>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	1e4a      	subs	r2, r1, #1
 800a238:	2568      	movs	r5, #104	; 0x68
 800a23a:	4355      	muls	r5, r2
 800a23c:	460e      	mov	r6, r1
 800a23e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a242:	f7ff f8ed 	bl	8009420 <_malloc_r>
 800a246:	4604      	mov	r4, r0
 800a248:	b140      	cbz	r0, 800a25c <__sfmoreglue+0x28>
 800a24a:	2100      	movs	r1, #0
 800a24c:	e9c0 1600 	strd	r1, r6, [r0]
 800a250:	300c      	adds	r0, #12
 800a252:	60a0      	str	r0, [r4, #8]
 800a254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a258:	f7fb fc60 	bl	8005b1c <memset>
 800a25c:	4620      	mov	r0, r4
 800a25e:	bd70      	pop	{r4, r5, r6, pc}

0800a260 <__sfp_lock_acquire>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__sfp_lock_acquire+0x8>)
 800a262:	f000 b8c5 	b.w	800a3f0 <__retarget_lock_acquire_recursive>
 800a266:	bf00      	nop
 800a268:	20010624 	.word	0x20010624

0800a26c <__sfp_lock_release>:
 800a26c:	4801      	ldr	r0, [pc, #4]	; (800a274 <__sfp_lock_release+0x8>)
 800a26e:	f000 b8c0 	b.w	800a3f2 <__retarget_lock_release_recursive>
 800a272:	bf00      	nop
 800a274:	20010624 	.word	0x20010624

0800a278 <__sinit_lock_acquire>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__sinit_lock_acquire+0x8>)
 800a27a:	f000 b8b9 	b.w	800a3f0 <__retarget_lock_acquire_recursive>
 800a27e:	bf00      	nop
 800a280:	2001061f 	.word	0x2001061f

0800a284 <__sinit_lock_release>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__sinit_lock_release+0x8>)
 800a286:	f000 b8b4 	b.w	800a3f2 <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	2001061f 	.word	0x2001061f

0800a290 <__sinit>:
 800a290:	b510      	push	{r4, lr}
 800a292:	4604      	mov	r4, r0
 800a294:	f7ff fff0 	bl	800a278 <__sinit_lock_acquire>
 800a298:	69a3      	ldr	r3, [r4, #24]
 800a29a:	b11b      	cbz	r3, 800a2a4 <__sinit+0x14>
 800a29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a0:	f7ff bff0 	b.w	800a284 <__sinit_lock_release>
 800a2a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <__sinit+0x68>)
 800a2ac:	4a13      	ldr	r2, [pc, #76]	; (800a2fc <__sinit+0x6c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	bf04      	itt	eq
 800a2b6:	2301      	moveq	r3, #1
 800a2b8:	61a3      	streq	r3, [r4, #24]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 f820 	bl	800a300 <__sfp>
 800a2c0:	6060      	str	r0, [r4, #4]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f81c 	bl	800a300 <__sfp>
 800a2c8:	60a0      	str	r0, [r4, #8]
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f818 	bl	800a300 <__sfp>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	60e0      	str	r0, [r4, #12]
 800a2d4:	2104      	movs	r1, #4
 800a2d6:	6860      	ldr	r0, [r4, #4]
 800a2d8:	f7ff ff82 	bl	800a1e0 <std>
 800a2dc:	68a0      	ldr	r0, [r4, #8]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	2109      	movs	r1, #9
 800a2e2:	f7ff ff7d 	bl	800a1e0 <std>
 800a2e6:	68e0      	ldr	r0, [r4, #12]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	2112      	movs	r1, #18
 800a2ec:	f7ff ff78 	bl	800a1e0 <std>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	61a3      	str	r3, [r4, #24]
 800a2f4:	e7d2      	b.n	800a29c <__sinit+0xc>
 800a2f6:	bf00      	nop
 800a2f8:	0800b08c 	.word	0x0800b08c
 800a2fc:	0800a229 	.word	0x0800a229

0800a300 <__sfp>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	4607      	mov	r7, r0
 800a304:	f7ff ffac 	bl	800a260 <__sfp_lock_acquire>
 800a308:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <__sfp+0x84>)
 800a30a:	681e      	ldr	r6, [r3, #0]
 800a30c:	69b3      	ldr	r3, [r6, #24]
 800a30e:	b913      	cbnz	r3, 800a316 <__sfp+0x16>
 800a310:	4630      	mov	r0, r6
 800a312:	f7ff ffbd 	bl	800a290 <__sinit>
 800a316:	3648      	adds	r6, #72	; 0x48
 800a318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	d503      	bpl.n	800a328 <__sfp+0x28>
 800a320:	6833      	ldr	r3, [r6, #0]
 800a322:	b30b      	cbz	r3, 800a368 <__sfp+0x68>
 800a324:	6836      	ldr	r6, [r6, #0]
 800a326:	e7f7      	b.n	800a318 <__sfp+0x18>
 800a328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a32c:	b9d5      	cbnz	r5, 800a364 <__sfp+0x64>
 800a32e:	4b16      	ldr	r3, [pc, #88]	; (800a388 <__sfp+0x88>)
 800a330:	60e3      	str	r3, [r4, #12]
 800a332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a336:	6665      	str	r5, [r4, #100]	; 0x64
 800a338:	f000 f859 	bl	800a3ee <__retarget_lock_init_recursive>
 800a33c:	f7ff ff96 	bl	800a26c <__sfp_lock_release>
 800a340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a348:	6025      	str	r5, [r4, #0]
 800a34a:	61a5      	str	r5, [r4, #24]
 800a34c:	2208      	movs	r2, #8
 800a34e:	4629      	mov	r1, r5
 800a350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a354:	f7fb fbe2 	bl	8005b1c <memset>
 800a358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a35c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a360:	4620      	mov	r0, r4
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	3468      	adds	r4, #104	; 0x68
 800a366:	e7d9      	b.n	800a31c <__sfp+0x1c>
 800a368:	2104      	movs	r1, #4
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7ff ff62 	bl	800a234 <__sfmoreglue>
 800a370:	4604      	mov	r4, r0
 800a372:	6030      	str	r0, [r6, #0]
 800a374:	2800      	cmp	r0, #0
 800a376:	d1d5      	bne.n	800a324 <__sfp+0x24>
 800a378:	f7ff ff78 	bl	800a26c <__sfp_lock_release>
 800a37c:	230c      	movs	r3, #12
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	e7ee      	b.n	800a360 <__sfp+0x60>
 800a382:	bf00      	nop
 800a384:	0800b08c 	.word	0x0800b08c
 800a388:	ffff0001 	.word	0xffff0001

0800a38c <fiprintf>:
 800a38c:	b40e      	push	{r1, r2, r3}
 800a38e:	b503      	push	{r0, r1, lr}
 800a390:	4601      	mov	r1, r0
 800a392:	ab03      	add	r3, sp, #12
 800a394:	4805      	ldr	r0, [pc, #20]	; (800a3ac <fiprintf+0x20>)
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f000 f89f 	bl	800a4e0 <_vfiprintf_r>
 800a3a2:	b002      	add	sp, #8
 800a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a8:	b003      	add	sp, #12
 800a3aa:	4770      	bx	lr
 800a3ac:	20000038 	.word	0x20000038

0800a3b0 <_fwalk_reent>:
 800a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	4688      	mov	r8, r1
 800a3b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3bc:	2700      	movs	r7, #0
 800a3be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a3c6:	d505      	bpl.n	800a3d4 <_fwalk_reent+0x24>
 800a3c8:	6824      	ldr	r4, [r4, #0]
 800a3ca:	2c00      	cmp	r4, #0
 800a3cc:	d1f7      	bne.n	800a3be <_fwalk_reent+0xe>
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d4:	89ab      	ldrh	r3, [r5, #12]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d907      	bls.n	800a3ea <_fwalk_reent+0x3a>
 800a3da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	d003      	beq.n	800a3ea <_fwalk_reent+0x3a>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	47c0      	blx	r8
 800a3e8:	4307      	orrs	r7, r0
 800a3ea:	3568      	adds	r5, #104	; 0x68
 800a3ec:	e7e9      	b.n	800a3c2 <_fwalk_reent+0x12>

0800a3ee <__retarget_lock_init_recursive>:
 800a3ee:	4770      	bx	lr

0800a3f0 <__retarget_lock_acquire_recursive>:
 800a3f0:	4770      	bx	lr

0800a3f2 <__retarget_lock_release_recursive>:
 800a3f2:	4770      	bx	lr

0800a3f4 <memmove>:
 800a3f4:	4288      	cmp	r0, r1
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	eb01 0402 	add.w	r4, r1, r2
 800a3fc:	d902      	bls.n	800a404 <memmove+0x10>
 800a3fe:	4284      	cmp	r4, r0
 800a400:	4623      	mov	r3, r4
 800a402:	d807      	bhi.n	800a414 <memmove+0x20>
 800a404:	1e43      	subs	r3, r0, #1
 800a406:	42a1      	cmp	r1, r4
 800a408:	d008      	beq.n	800a41c <memmove+0x28>
 800a40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a412:	e7f8      	b.n	800a406 <memmove+0x12>
 800a414:	4402      	add	r2, r0
 800a416:	4601      	mov	r1, r0
 800a418:	428a      	cmp	r2, r1
 800a41a:	d100      	bne.n	800a41e <memmove+0x2a>
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a426:	e7f7      	b.n	800a418 <memmove+0x24>

0800a428 <__malloc_lock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_lock+0x8>)
 800a42a:	f7ff bfe1 	b.w	800a3f0 <__retarget_lock_acquire_recursive>
 800a42e:	bf00      	nop
 800a430:	20010620 	.word	0x20010620

0800a434 <__malloc_unlock>:
 800a434:	4801      	ldr	r0, [pc, #4]	; (800a43c <__malloc_unlock+0x8>)
 800a436:	f7ff bfdc 	b.w	800a3f2 <__retarget_lock_release_recursive>
 800a43a:	bf00      	nop
 800a43c:	20010620 	.word	0x20010620

0800a440 <_realloc_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4607      	mov	r7, r0
 800a444:	4614      	mov	r4, r2
 800a446:	460e      	mov	r6, r1
 800a448:	b921      	cbnz	r1, 800a454 <_realloc_r+0x14>
 800a44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a44e:	4611      	mov	r1, r2
 800a450:	f7fe bfe6 	b.w	8009420 <_malloc_r>
 800a454:	b922      	cbnz	r2, 800a460 <_realloc_r+0x20>
 800a456:	f7fe ff93 	bl	8009380 <_free_r>
 800a45a:	4625      	mov	r5, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	f000 fa9a 	bl	800a998 <_malloc_usable_size_r>
 800a464:	42a0      	cmp	r0, r4
 800a466:	d20f      	bcs.n	800a488 <_realloc_r+0x48>
 800a468:	4621      	mov	r1, r4
 800a46a:	4638      	mov	r0, r7
 800a46c:	f7fe ffd8 	bl	8009420 <_malloc_r>
 800a470:	4605      	mov	r5, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0f2      	beq.n	800a45c <_realloc_r+0x1c>
 800a476:	4631      	mov	r1, r6
 800a478:	4622      	mov	r2, r4
 800a47a:	f7fe faa7 	bl	80089cc <memcpy>
 800a47e:	4631      	mov	r1, r6
 800a480:	4638      	mov	r0, r7
 800a482:	f7fe ff7d 	bl	8009380 <_free_r>
 800a486:	e7e9      	b.n	800a45c <_realloc_r+0x1c>
 800a488:	4635      	mov	r5, r6
 800a48a:	e7e7      	b.n	800a45c <_realloc_r+0x1c>

0800a48c <__sfputc_r>:
 800a48c:	6893      	ldr	r3, [r2, #8]
 800a48e:	3b01      	subs	r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	b410      	push	{r4}
 800a494:	6093      	str	r3, [r2, #8]
 800a496:	da08      	bge.n	800a4aa <__sfputc_r+0x1e>
 800a498:	6994      	ldr	r4, [r2, #24]
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	db01      	blt.n	800a4a2 <__sfputc_r+0x16>
 800a49e:	290a      	cmp	r1, #10
 800a4a0:	d103      	bne.n	800a4aa <__sfputc_r+0x1e>
 800a4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4a6:	f000 b94b 	b.w	800a740 <__swbuf_r>
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	1c58      	adds	r0, r3, #1
 800a4ae:	6010      	str	r0, [r2, #0]
 800a4b0:	7019      	strb	r1, [r3, #0]
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <__sfputs_r>:
 800a4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	18d5      	adds	r5, r2, r3
 800a4c4:	42ac      	cmp	r4, r5
 800a4c6:	d101      	bne.n	800a4cc <__sfputs_r+0x12>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e007      	b.n	800a4dc <__sfputs_r+0x22>
 800a4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ffda 	bl	800a48c <__sfputc_r>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d1f3      	bne.n	800a4c4 <__sfputs_r+0xa>
 800a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4e0 <_vfiprintf_r>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	b09d      	sub	sp, #116	; 0x74
 800a4e8:	4614      	mov	r4, r2
 800a4ea:	4698      	mov	r8, r3
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	b118      	cbz	r0, 800a4f8 <_vfiprintf_r+0x18>
 800a4f0:	6983      	ldr	r3, [r0, #24]
 800a4f2:	b90b      	cbnz	r3, 800a4f8 <_vfiprintf_r+0x18>
 800a4f4:	f7ff fecc 	bl	800a290 <__sinit>
 800a4f8:	4b89      	ldr	r3, [pc, #548]	; (800a720 <_vfiprintf_r+0x240>)
 800a4fa:	429d      	cmp	r5, r3
 800a4fc:	d11b      	bne.n	800a536 <_vfiprintf_r+0x56>
 800a4fe:	6875      	ldr	r5, [r6, #4]
 800a500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a502:	07d9      	lsls	r1, r3, #31
 800a504:	d405      	bmi.n	800a512 <_vfiprintf_r+0x32>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	059a      	lsls	r2, r3, #22
 800a50a:	d402      	bmi.n	800a512 <_vfiprintf_r+0x32>
 800a50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a50e:	f7ff ff6f 	bl	800a3f0 <__retarget_lock_acquire_recursive>
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	071b      	lsls	r3, r3, #28
 800a516:	d501      	bpl.n	800a51c <_vfiprintf_r+0x3c>
 800a518:	692b      	ldr	r3, [r5, #16]
 800a51a:	b9eb      	cbnz	r3, 800a558 <_vfiprintf_r+0x78>
 800a51c:	4629      	mov	r1, r5
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 f960 	bl	800a7e4 <__swsetup_r>
 800a524:	b1c0      	cbz	r0, 800a558 <_vfiprintf_r+0x78>
 800a526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a528:	07dc      	lsls	r4, r3, #31
 800a52a:	d50e      	bpl.n	800a54a <_vfiprintf_r+0x6a>
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	b01d      	add	sp, #116	; 0x74
 800a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a536:	4b7b      	ldr	r3, [pc, #492]	; (800a724 <_vfiprintf_r+0x244>)
 800a538:	429d      	cmp	r5, r3
 800a53a:	d101      	bne.n	800a540 <_vfiprintf_r+0x60>
 800a53c:	68b5      	ldr	r5, [r6, #8]
 800a53e:	e7df      	b.n	800a500 <_vfiprintf_r+0x20>
 800a540:	4b79      	ldr	r3, [pc, #484]	; (800a728 <_vfiprintf_r+0x248>)
 800a542:	429d      	cmp	r5, r3
 800a544:	bf08      	it	eq
 800a546:	68f5      	ldreq	r5, [r6, #12]
 800a548:	e7da      	b.n	800a500 <_vfiprintf_r+0x20>
 800a54a:	89ab      	ldrh	r3, [r5, #12]
 800a54c:	0598      	lsls	r0, r3, #22
 800a54e:	d4ed      	bmi.n	800a52c <_vfiprintf_r+0x4c>
 800a550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a552:	f7ff ff4e 	bl	800a3f2 <__retarget_lock_release_recursive>
 800a556:	e7e9      	b.n	800a52c <_vfiprintf_r+0x4c>
 800a558:	2300      	movs	r3, #0
 800a55a:	9309      	str	r3, [sp, #36]	; 0x24
 800a55c:	2320      	movs	r3, #32
 800a55e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a562:	f8cd 800c 	str.w	r8, [sp, #12]
 800a566:	2330      	movs	r3, #48	; 0x30
 800a568:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a72c <_vfiprintf_r+0x24c>
 800a56c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a570:	f04f 0901 	mov.w	r9, #1
 800a574:	4623      	mov	r3, r4
 800a576:	469a      	mov	sl, r3
 800a578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a57c:	b10a      	cbz	r2, 800a582 <_vfiprintf_r+0xa2>
 800a57e:	2a25      	cmp	r2, #37	; 0x25
 800a580:	d1f9      	bne.n	800a576 <_vfiprintf_r+0x96>
 800a582:	ebba 0b04 	subs.w	fp, sl, r4
 800a586:	d00b      	beq.n	800a5a0 <_vfiprintf_r+0xc0>
 800a588:	465b      	mov	r3, fp
 800a58a:	4622      	mov	r2, r4
 800a58c:	4629      	mov	r1, r5
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff ff93 	bl	800a4ba <__sfputs_r>
 800a594:	3001      	adds	r0, #1
 800a596:	f000 80aa 	beq.w	800a6ee <_vfiprintf_r+0x20e>
 800a59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a59c:	445a      	add	r2, fp
 800a59e:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80a2 	beq.w	800a6ee <_vfiprintf_r+0x20e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b4:	f10a 0a01 	add.w	sl, sl, #1
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c2:	4654      	mov	r4, sl
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ca:	4858      	ldr	r0, [pc, #352]	; (800a72c <_vfiprintf_r+0x24c>)
 800a5cc:	f7f5 fe40 	bl	8000250 <memchr>
 800a5d0:	9a04      	ldr	r2, [sp, #16]
 800a5d2:	b9d8      	cbnz	r0, 800a60c <_vfiprintf_r+0x12c>
 800a5d4:	06d1      	lsls	r1, r2, #27
 800a5d6:	bf44      	itt	mi
 800a5d8:	2320      	movmi	r3, #32
 800a5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5de:	0713      	lsls	r3, r2, #28
 800a5e0:	bf44      	itt	mi
 800a5e2:	232b      	movmi	r3, #43	; 0x2b
 800a5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ee:	d015      	beq.n	800a61c <_vfiprintf_r+0x13c>
 800a5f0:	9a07      	ldr	r2, [sp, #28]
 800a5f2:	4654      	mov	r4, sl
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f04f 0c0a 	mov.w	ip, #10
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a600:	3b30      	subs	r3, #48	; 0x30
 800a602:	2b09      	cmp	r3, #9
 800a604:	d94e      	bls.n	800a6a4 <_vfiprintf_r+0x1c4>
 800a606:	b1b0      	cbz	r0, 800a636 <_vfiprintf_r+0x156>
 800a608:	9207      	str	r2, [sp, #28]
 800a60a:	e014      	b.n	800a636 <_vfiprintf_r+0x156>
 800a60c:	eba0 0308 	sub.w	r3, r0, r8
 800a610:	fa09 f303 	lsl.w	r3, r9, r3
 800a614:	4313      	orrs	r3, r2
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	46a2      	mov	sl, r4
 800a61a:	e7d2      	b.n	800a5c2 <_vfiprintf_r+0xe2>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	1d19      	adds	r1, r3, #4
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	9103      	str	r1, [sp, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	bfbb      	ittet	lt
 800a628:	425b      	neglt	r3, r3
 800a62a:	f042 0202 	orrlt.w	r2, r2, #2
 800a62e:	9307      	strge	r3, [sp, #28]
 800a630:	9307      	strlt	r3, [sp, #28]
 800a632:	bfb8      	it	lt
 800a634:	9204      	strlt	r2, [sp, #16]
 800a636:	7823      	ldrb	r3, [r4, #0]
 800a638:	2b2e      	cmp	r3, #46	; 0x2e
 800a63a:	d10c      	bne.n	800a656 <_vfiprintf_r+0x176>
 800a63c:	7863      	ldrb	r3, [r4, #1]
 800a63e:	2b2a      	cmp	r3, #42	; 0x2a
 800a640:	d135      	bne.n	800a6ae <_vfiprintf_r+0x1ce>
 800a642:	9b03      	ldr	r3, [sp, #12]
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	9203      	str	r2, [sp, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	bfb8      	it	lt
 800a64e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a652:	3402      	adds	r4, #2
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a73c <_vfiprintf_r+0x25c>
 800a65a:	7821      	ldrb	r1, [r4, #0]
 800a65c:	2203      	movs	r2, #3
 800a65e:	4650      	mov	r0, sl
 800a660:	f7f5 fdf6 	bl	8000250 <memchr>
 800a664:	b140      	cbz	r0, 800a678 <_vfiprintf_r+0x198>
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	eba0 000a 	sub.w	r0, r0, sl
 800a66c:	fa03 f000 	lsl.w	r0, r3, r0
 800a670:	9b04      	ldr	r3, [sp, #16]
 800a672:	4303      	orrs	r3, r0
 800a674:	3401      	adds	r4, #1
 800a676:	9304      	str	r3, [sp, #16]
 800a678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67c:	482c      	ldr	r0, [pc, #176]	; (800a730 <_vfiprintf_r+0x250>)
 800a67e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a682:	2206      	movs	r2, #6
 800a684:	f7f5 fde4 	bl	8000250 <memchr>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d03f      	beq.n	800a70c <_vfiprintf_r+0x22c>
 800a68c:	4b29      	ldr	r3, [pc, #164]	; (800a734 <_vfiprintf_r+0x254>)
 800a68e:	bb1b      	cbnz	r3, 800a6d8 <_vfiprintf_r+0x1f8>
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	3307      	adds	r3, #7
 800a694:	f023 0307 	bic.w	r3, r3, #7
 800a698:	3308      	adds	r3, #8
 800a69a:	9303      	str	r3, [sp, #12]
 800a69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69e:	443b      	add	r3, r7
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a2:	e767      	b.n	800a574 <_vfiprintf_r+0x94>
 800a6a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	e7a5      	b.n	800a5fa <_vfiprintf_r+0x11a>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	3401      	adds	r4, #1
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f04f 0c0a 	mov.w	ip, #10
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c0:	3a30      	subs	r2, #48	; 0x30
 800a6c2:	2a09      	cmp	r2, #9
 800a6c4:	d903      	bls.n	800a6ce <_vfiprintf_r+0x1ee>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c5      	beq.n	800a656 <_vfiprintf_r+0x176>
 800a6ca:	9105      	str	r1, [sp, #20]
 800a6cc:	e7c3      	b.n	800a656 <_vfiprintf_r+0x176>
 800a6ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e7f0      	b.n	800a6ba <_vfiprintf_r+0x1da>
 800a6d8:	ab03      	add	r3, sp, #12
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	462a      	mov	r2, r5
 800a6de:	4b16      	ldr	r3, [pc, #88]	; (800a738 <_vfiprintf_r+0x258>)
 800a6e0:	a904      	add	r1, sp, #16
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7fb fab4 	bl	8005c50 <_printf_float>
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	1c78      	adds	r0, r7, #1
 800a6ec:	d1d6      	bne.n	800a69c <_vfiprintf_r+0x1bc>
 800a6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f0:	07d9      	lsls	r1, r3, #31
 800a6f2:	d405      	bmi.n	800a700 <_vfiprintf_r+0x220>
 800a6f4:	89ab      	ldrh	r3, [r5, #12]
 800a6f6:	059a      	lsls	r2, r3, #22
 800a6f8:	d402      	bmi.n	800a700 <_vfiprintf_r+0x220>
 800a6fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fc:	f7ff fe79 	bl	800a3f2 <__retarget_lock_release_recursive>
 800a700:	89ab      	ldrh	r3, [r5, #12]
 800a702:	065b      	lsls	r3, r3, #25
 800a704:	f53f af12 	bmi.w	800a52c <_vfiprintf_r+0x4c>
 800a708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a70a:	e711      	b.n	800a530 <_vfiprintf_r+0x50>
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	462a      	mov	r2, r5
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <_vfiprintf_r+0x258>)
 800a714:	a904      	add	r1, sp, #16
 800a716:	4630      	mov	r0, r6
 800a718:	f7fb fd26 	bl	8006168 <_printf_i>
 800a71c:	e7e4      	b.n	800a6e8 <_vfiprintf_r+0x208>
 800a71e:	bf00      	nop
 800a720:	0800b514 	.word	0x0800b514
 800a724:	0800b534 	.word	0x0800b534
 800a728:	0800b4f4 	.word	0x0800b4f4
 800a72c:	0800b48c 	.word	0x0800b48c
 800a730:	0800b496 	.word	0x0800b496
 800a734:	08005c51 	.word	0x08005c51
 800a738:	0800a4bb 	.word	0x0800a4bb
 800a73c:	0800b492 	.word	0x0800b492

0800a740 <__swbuf_r>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	460e      	mov	r6, r1
 800a744:	4614      	mov	r4, r2
 800a746:	4605      	mov	r5, r0
 800a748:	b118      	cbz	r0, 800a752 <__swbuf_r+0x12>
 800a74a:	6983      	ldr	r3, [r0, #24]
 800a74c:	b90b      	cbnz	r3, 800a752 <__swbuf_r+0x12>
 800a74e:	f7ff fd9f 	bl	800a290 <__sinit>
 800a752:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <__swbuf_r+0x98>)
 800a754:	429c      	cmp	r4, r3
 800a756:	d12b      	bne.n	800a7b0 <__swbuf_r+0x70>
 800a758:	686c      	ldr	r4, [r5, #4]
 800a75a:	69a3      	ldr	r3, [r4, #24]
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	071a      	lsls	r2, r3, #28
 800a762:	d52f      	bpl.n	800a7c4 <__swbuf_r+0x84>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	b36b      	cbz	r3, 800a7c4 <__swbuf_r+0x84>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	6963      	ldr	r3, [r4, #20]
 800a770:	b2f6      	uxtb	r6, r6
 800a772:	4283      	cmp	r3, r0
 800a774:	4637      	mov	r7, r6
 800a776:	dc04      	bgt.n	800a782 <__swbuf_r+0x42>
 800a778:	4621      	mov	r1, r4
 800a77a:	4628      	mov	r0, r5
 800a77c:	f7ff fcf4 	bl	800a168 <_fflush_r>
 800a780:	bb30      	cbnz	r0, 800a7d0 <__swbuf_r+0x90>
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	3b01      	subs	r3, #1
 800a786:	60a3      	str	r3, [r4, #8]
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	6022      	str	r2, [r4, #0]
 800a78e:	701e      	strb	r6, [r3, #0]
 800a790:	6963      	ldr	r3, [r4, #20]
 800a792:	3001      	adds	r0, #1
 800a794:	4283      	cmp	r3, r0
 800a796:	d004      	beq.n	800a7a2 <__swbuf_r+0x62>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	07db      	lsls	r3, r3, #31
 800a79c:	d506      	bpl.n	800a7ac <__swbuf_r+0x6c>
 800a79e:	2e0a      	cmp	r6, #10
 800a7a0:	d104      	bne.n	800a7ac <__swbuf_r+0x6c>
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f7ff fcdf 	bl	800a168 <_fflush_r>
 800a7aa:	b988      	cbnz	r0, 800a7d0 <__swbuf_r+0x90>
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <__swbuf_r+0x9c>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	d101      	bne.n	800a7ba <__swbuf_r+0x7a>
 800a7b6:	68ac      	ldr	r4, [r5, #8]
 800a7b8:	e7cf      	b.n	800a75a <__swbuf_r+0x1a>
 800a7ba:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <__swbuf_r+0xa0>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	bf08      	it	eq
 800a7c0:	68ec      	ldreq	r4, [r5, #12]
 800a7c2:	e7ca      	b.n	800a75a <__swbuf_r+0x1a>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f80c 	bl	800a7e4 <__swsetup_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d0cb      	beq.n	800a768 <__swbuf_r+0x28>
 800a7d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a7d4:	e7ea      	b.n	800a7ac <__swbuf_r+0x6c>
 800a7d6:	bf00      	nop
 800a7d8:	0800b514 	.word	0x0800b514
 800a7dc:	0800b534 	.word	0x0800b534
 800a7e0:	0800b4f4 	.word	0x0800b4f4

0800a7e4 <__swsetup_r>:
 800a7e4:	4b32      	ldr	r3, [pc, #200]	; (800a8b0 <__swsetup_r+0xcc>)
 800a7e6:	b570      	push	{r4, r5, r6, lr}
 800a7e8:	681d      	ldr	r5, [r3, #0]
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	b125      	cbz	r5, 800a7fa <__swsetup_r+0x16>
 800a7f0:	69ab      	ldr	r3, [r5, #24]
 800a7f2:	b913      	cbnz	r3, 800a7fa <__swsetup_r+0x16>
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f7ff fd4b 	bl	800a290 <__sinit>
 800a7fa:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <__swsetup_r+0xd0>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	d10f      	bne.n	800a820 <__swsetup_r+0x3c>
 800a800:	686c      	ldr	r4, [r5, #4]
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a808:	0719      	lsls	r1, r3, #28
 800a80a:	d42c      	bmi.n	800a866 <__swsetup_r+0x82>
 800a80c:	06dd      	lsls	r5, r3, #27
 800a80e:	d411      	bmi.n	800a834 <__swsetup_r+0x50>
 800a810:	2309      	movs	r3, #9
 800a812:	6033      	str	r3, [r6, #0]
 800a814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	e03e      	b.n	800a89e <__swsetup_r+0xba>
 800a820:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <__swsetup_r+0xd4>)
 800a822:	429c      	cmp	r4, r3
 800a824:	d101      	bne.n	800a82a <__swsetup_r+0x46>
 800a826:	68ac      	ldr	r4, [r5, #8]
 800a828:	e7eb      	b.n	800a802 <__swsetup_r+0x1e>
 800a82a:	4b24      	ldr	r3, [pc, #144]	; (800a8bc <__swsetup_r+0xd8>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	bf08      	it	eq
 800a830:	68ec      	ldreq	r4, [r5, #12]
 800a832:	e7e6      	b.n	800a802 <__swsetup_r+0x1e>
 800a834:	0758      	lsls	r0, r3, #29
 800a836:	d512      	bpl.n	800a85e <__swsetup_r+0x7a>
 800a838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a83a:	b141      	cbz	r1, 800a84e <__swsetup_r+0x6a>
 800a83c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a840:	4299      	cmp	r1, r3
 800a842:	d002      	beq.n	800a84a <__swsetup_r+0x66>
 800a844:	4630      	mov	r0, r6
 800a846:	f7fe fd9b 	bl	8009380 <_free_r>
 800a84a:	2300      	movs	r3, #0
 800a84c:	6363      	str	r3, [r4, #52]	; 0x34
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	2300      	movs	r3, #0
 800a858:	6063      	str	r3, [r4, #4]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0308 	orr.w	r3, r3, #8
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	b94b      	cbnz	r3, 800a87e <__swsetup_r+0x9a>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a874:	d003      	beq.n	800a87e <__swsetup_r+0x9a>
 800a876:	4621      	mov	r1, r4
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 f84d 	bl	800a918 <__smakebuf_r>
 800a87e:	89a0      	ldrh	r0, [r4, #12]
 800a880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a884:	f010 0301 	ands.w	r3, r0, #1
 800a888:	d00a      	beq.n	800a8a0 <__swsetup_r+0xbc>
 800a88a:	2300      	movs	r3, #0
 800a88c:	60a3      	str	r3, [r4, #8]
 800a88e:	6963      	ldr	r3, [r4, #20]
 800a890:	425b      	negs	r3, r3
 800a892:	61a3      	str	r3, [r4, #24]
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	b943      	cbnz	r3, 800a8aa <__swsetup_r+0xc6>
 800a898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a89c:	d1ba      	bne.n	800a814 <__swsetup_r+0x30>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	0781      	lsls	r1, r0, #30
 800a8a2:	bf58      	it	pl
 800a8a4:	6963      	ldrpl	r3, [r4, #20]
 800a8a6:	60a3      	str	r3, [r4, #8]
 800a8a8:	e7f4      	b.n	800a894 <__swsetup_r+0xb0>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7f7      	b.n	800a89e <__swsetup_r+0xba>
 800a8ae:	bf00      	nop
 800a8b0:	20000038 	.word	0x20000038
 800a8b4:	0800b514 	.word	0x0800b514
 800a8b8:	0800b534 	.word	0x0800b534
 800a8bc:	0800b4f4 	.word	0x0800b4f4

0800a8c0 <abort>:
 800a8c0:	b508      	push	{r3, lr}
 800a8c2:	2006      	movs	r0, #6
 800a8c4:	f000 f898 	bl	800a9f8 <raise>
 800a8c8:	2001      	movs	r0, #1
 800a8ca:	f7f7 f951 	bl	8001b70 <_exit>

0800a8ce <__swhatbuf_r>:
 800a8ce:	b570      	push	{r4, r5, r6, lr}
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	b096      	sub	sp, #88	; 0x58
 800a8da:	4614      	mov	r4, r2
 800a8dc:	461d      	mov	r5, r3
 800a8de:	da07      	bge.n	800a8f0 <__swhatbuf_r+0x22>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	89b3      	ldrh	r3, [r6, #12]
 800a8e6:	061a      	lsls	r2, r3, #24
 800a8e8:	d410      	bmi.n	800a90c <__swhatbuf_r+0x3e>
 800a8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ee:	e00e      	b.n	800a90e <__swhatbuf_r+0x40>
 800a8f0:	466a      	mov	r2, sp
 800a8f2:	f000 f89d 	bl	800aa30 <_fstat_r>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	dbf2      	blt.n	800a8e0 <__swhatbuf_r+0x12>
 800a8fa:	9a01      	ldr	r2, [sp, #4]
 800a8fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a904:	425a      	negs	r2, r3
 800a906:	415a      	adcs	r2, r3
 800a908:	602a      	str	r2, [r5, #0]
 800a90a:	e7ee      	b.n	800a8ea <__swhatbuf_r+0x1c>
 800a90c:	2340      	movs	r3, #64	; 0x40
 800a90e:	2000      	movs	r0, #0
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	b016      	add	sp, #88	; 0x58
 800a914:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a918 <__smakebuf_r>:
 800a918:	898b      	ldrh	r3, [r1, #12]
 800a91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a91c:	079d      	lsls	r5, r3, #30
 800a91e:	4606      	mov	r6, r0
 800a920:	460c      	mov	r4, r1
 800a922:	d507      	bpl.n	800a934 <__smakebuf_r+0x1c>
 800a924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	6123      	str	r3, [r4, #16]
 800a92c:	2301      	movs	r3, #1
 800a92e:	6163      	str	r3, [r4, #20]
 800a930:	b002      	add	sp, #8
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	ab01      	add	r3, sp, #4
 800a936:	466a      	mov	r2, sp
 800a938:	f7ff ffc9 	bl	800a8ce <__swhatbuf_r>
 800a93c:	9900      	ldr	r1, [sp, #0]
 800a93e:	4605      	mov	r5, r0
 800a940:	4630      	mov	r0, r6
 800a942:	f7fe fd6d 	bl	8009420 <_malloc_r>
 800a946:	b948      	cbnz	r0, 800a95c <__smakebuf_r+0x44>
 800a948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94c:	059a      	lsls	r2, r3, #22
 800a94e:	d4ef      	bmi.n	800a930 <__smakebuf_r+0x18>
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	f043 0302 	orr.w	r3, r3, #2
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	e7e3      	b.n	800a924 <__smakebuf_r+0xc>
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <__smakebuf_r+0x7c>)
 800a95e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	6020      	str	r0, [r4, #0]
 800a964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	6163      	str	r3, [r4, #20]
 800a96e:	9b01      	ldr	r3, [sp, #4]
 800a970:	6120      	str	r0, [r4, #16]
 800a972:	b15b      	cbz	r3, 800a98c <__smakebuf_r+0x74>
 800a974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 f86b 	bl	800aa54 <_isatty_r>
 800a97e:	b128      	cbz	r0, 800a98c <__smakebuf_r+0x74>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	89a0      	ldrh	r0, [r4, #12]
 800a98e:	4305      	orrs	r5, r0
 800a990:	81a5      	strh	r5, [r4, #12]
 800a992:	e7cd      	b.n	800a930 <__smakebuf_r+0x18>
 800a994:	0800a229 	.word	0x0800a229

0800a998 <_malloc_usable_size_r>:
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f18      	subs	r0, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfbc      	itt	lt
 800a9a2:	580b      	ldrlt	r3, [r1, r0]
 800a9a4:	18c0      	addlt	r0, r0, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <_raise_r>:
 800a9a8:	291f      	cmp	r1, #31
 800a9aa:	b538      	push	{r3, r4, r5, lr}
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	d904      	bls.n	800a9bc <_raise_r+0x14>
 800a9b2:	2316      	movs	r3, #22
 800a9b4:	6003      	str	r3, [r0, #0]
 800a9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9be:	b112      	cbz	r2, 800a9c6 <_raise_r+0x1e>
 800a9c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c4:	b94b      	cbnz	r3, 800a9da <_raise_r+0x32>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f830 	bl	800aa2c <_getpid_r>
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d6:	f000 b817 	b.w	800aa08 <_kill_r>
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d00a      	beq.n	800a9f4 <_raise_r+0x4c>
 800a9de:	1c59      	adds	r1, r3, #1
 800a9e0:	d103      	bne.n	800a9ea <_raise_r+0x42>
 800a9e2:	2316      	movs	r3, #22
 800a9e4:	6003      	str	r3, [r0, #0]
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	e7e7      	b.n	800a9ba <_raise_r+0x12>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	4798      	blx	r3
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e7e0      	b.n	800a9ba <_raise_r+0x12>

0800a9f8 <raise>:
 800a9f8:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <raise+0xc>)
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	f7ff bfd3 	b.w	800a9a8 <_raise_r>
 800aa02:	bf00      	nop
 800aa04:	20000038 	.word	0x20000038

0800aa08 <_kill_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d07      	ldr	r5, [pc, #28]	; (800aa28 <_kill_r+0x20>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	4611      	mov	r1, r2
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	f7f7 f89b 	bl	8001b50 <_kill>
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	d102      	bne.n	800aa24 <_kill_r+0x1c>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	b103      	cbz	r3, 800aa24 <_kill_r+0x1c>
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	bd38      	pop	{r3, r4, r5, pc}
 800aa26:	bf00      	nop
 800aa28:	20010618 	.word	0x20010618

0800aa2c <_getpid_r>:
 800aa2c:	f7f7 b888 	b.w	8001b40 <_getpid>

0800aa30 <_fstat_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	; (800aa50 <_fstat_r+0x20>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	f7f7 f8e6 	bl	8001c0e <_fstat>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d102      	bne.n	800aa4c <_fstat_r+0x1c>
 800aa46:	682b      	ldr	r3, [r5, #0]
 800aa48:	b103      	cbz	r3, 800aa4c <_fstat_r+0x1c>
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20010618 	.word	0x20010618

0800aa54 <_isatty_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4d06      	ldr	r5, [pc, #24]	; (800aa70 <_isatty_r+0x1c>)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f7 f8e5 	bl	8001c2e <_isatty>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_isatty_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_isatty_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20010618 	.word	0x20010618

0800aa74 <_init>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_fini>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr
